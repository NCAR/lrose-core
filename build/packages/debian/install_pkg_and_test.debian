#! /bin/bash

###########################################################
# in clean docker image,
# install package and test that the apps work
# $1: os_type, e.g. ubuntu
# $2: os_version, e.g. 16.04
# $3: lrose_pkg, e.g. core

os_type=$1
os_version=$2
lrose_pkg=$3

cd ~/git/lrose-core/build/packages/debian

# compute Dockerfile path

DockerfilePath=/tmp/docker/Dockerfile.install.${os_type}.${os_version}.${lrose_pkg}

echo "Performing lrose install in clean docker container"
echo "  os_type: ${os_type}"
echo "  os_version: ${os_version}"
echo "  lrose_pkg: ${lrose_pkg}"
echo "  Dockerfile path: " $DockerfilePath

# create Dockerfile preamble with the FROM command

mkdir -p /tmp/docker
echo "####################################################" > ${DockerfilePath}
echo "FROM ${os_type}:${os_version}" >> ${DockerfilePath}
echo "#" >> ${DockerfilePath}

# append the body of the Dockerfile

cat Dockerfile.debian.install >> ${DockerfilePath}

# remove any old image

tag=install.${lrose_pkg}/${os_type}:${os_version}
docker image rm ${tag}

# make .deb file available to container

debDir=/tmp/${os_type}-${os_version}-${lrose_pkg}/debs

# copy install script into that dir so it is available to the container

cp run_install_pkg.debian $debDir

# run the install, creating a new image for it

cd /tmp/docker

docker build \
    -v ${debDir}:/debs \
    --tag ${tag} \
    --file ${DockerfilePath} .


