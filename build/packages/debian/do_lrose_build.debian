#! /bin/bash

###########################################################
# build lrose in debian image

#--------------------------------------------------------------------
# usage function
#

function usage() {
    echo
    echo "Perform lrose build in docker container"
    echo "Usage:"
    echo "  $scriptName [options below]"
    echo "  -h   :  help"
    echo "  -d   :  turn debugging on"
    echo "  -p ? :  set lrose_pkg"
    echo "          e.g. core, blaze, cyclone, radx"
    echo "  -r ? :  set release_date"
    echo "          e.g. latest, 20190105"
    echo "  -t ? :  set os_type"
    echo "          e.g. debian, ubuntu"
    echo "  -v ? :  set os_version"
    echo "          e.g. 9 for debian 9, 18.04 for ubuntu 18.04"
    echo
}

scriptName=$(basename $0)

os_type=debian
os_version=9
lrose_pkg=core
release_date=latest
debug=true

# Parse command line options.
while getopts hdp:r:t:v: OPT; do
    case "$OPT" in
        h)
            usage
            exit 0
            ;;
        d)
            debug=true
            ;;
        p)
            lrose_pkg=$OPTARG
            ;;
        t)
            os_type=$OPTARG
            ;;
        r)
            release_date=$OPTARG
            ;;
        v)
            os_version=$OPTARG
            ;;
        \?)
            # getopts issues an error message
            echo "Problems with command line usage"
            usage
            exit 1
            ;;
    esac
done

if [ "$debug" == "true" ]
then
  echo "Running $scriptName"
  echo "  performing lrose build in docker container"
  echo "    os_type: ${os_type}"
  echo "    os_version: ${os_version}"
  echo "    lrose_pkg: ${lrose_pkg}"
  echo "    release_date: ${release_date}"
fi

# go to scripts dir

cd ~/git/lrose-core/build/packages/debian

# compute Dockerfile path

DockerfilePath=/tmp/docker/Dockerfile.build.${os_type}.${os_version}.${lrose_pkg}
echo "Dockerfile path: " $DockerfilePath

# create Dockerfile preamble with the FROM command

mkdir -p /tmp/docker
echo "####################################################" > ${DockerfilePath}
echo "FROM custom/${os_type}:${os_version}" >> ${DockerfilePath}
echo "#" >> ${DockerfilePath}

# append the body of the Dockerfile

#cat Dockerfile.debian.build >> ${DockerfilePath}

if [ "$os_type" = debian -a "$os_version" = 10 ] ; then
    cat Dockerfile.debian10.build >> ${DockerfilePath}
#elif [ "$os_type" = ubuntu -a "$os_version" = 19.10 ] ; then
#    cat Dockerfile.ubuntu1910.build >> ${DockerfilePath}
else
    cat Dockerfile.debian.build >> ${DockerfilePath}
fi


# remove any old image

tag=build.${lrose_pkg}/${os_type}:${os_version}
docker image rm -f ${tag}

# make build scripts available to container

scriptsDir=~/git/lrose-core/build

# run the build, creating a new image for it

cd /tmp/docker

docker build \
    -v ${scriptsDir}:/scripts \
    --tag ${tag} \
    --build-arg LROSE_PKG=${lrose_pkg} \
    --build-arg RELEASE_DATE=${release_date} \
    --file ${DockerfilePath} .

