#!/usr/bin/env bash

#
# script to run CIDD from a docker container, on a mac
#
# Dependencies:
#  * docker
#  * socat
#
# Install docker from the DMG
# Install socat with: new install socat

#
# version number for cidd-docker script
#

lrose_cidd_docker_version='latest'

# cidd-docker
#
# helper / wrapper script for invoking ncareol/lrose-cidd Docker image,
# setting up X11 and running cidd in specified directory

_echo_version () {
  echo `basename $0` version $lrose_cidd_docker_version
}

_echo_help () {
  _echo_version
  echo "  first input, required: URL for downloading CIDD parameters"
  echo "  second input, optional: version of cidd to run"
  echo "  e.g."
  echo "    "`basename $0` .
  echo "    "`basename $0` . latest
  echo
  echo "  For further details on running cidd w/ Docker:"
  echo "  https://github.com/NCAR/lrose-docs/cidd"
  echo
}

if [[ "$1" == '-v' ]] || [[ "$1" == '--version' ]]; then
  _echo_version
  exit
fi

if [[ "$1" == '-h' ]] || [[ "$1" == '--help' ]]; then
  _echo_help
  exit
fi

docker -v > /dev/null
docker_exit_code=$?

if [[ $docker_exit_code != 0 ]]; then
  echo 'It appears that docker is not installed or in PATH'
  echo 'Please install docker or add it to PATH'
  exit $docker_exit_code
fi

if [[ "$@" = '' ]] ; then
  echo 'Please specify a data directory for cidd'
  echo 'Run w/ -h or --help to see help information'
  exit 1
fi

# start socat to connect X server from container

lrose_uname=$(uname)
if [[ $lrose_uname = 'Darwin' ]]; then
  socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" >& /tmp/socat.log &
  cat /tmp/socat.log
fi

# get params URL from first arg

cidd_params_url=$1
cidd_docker_image='ncareol/lrose-cidd'

#
# use second argument as cidd version, set as Docker tag
#
if [ ! -z "$2" ]; then
  cidd_docker_image=$cidd_docker_image:$2
  echo "cidd version: $2"
else
  echo "cidd version: latest"
fi

echo "cidd_docker_image: " $cidd_docker_image

#
# architecture-specific method to set `docker run` options
#
lrose_docker_run_options () {
  lrose_uname=$(uname)
  if [[ $lrose_uname = 'Darwin' ]]; then
    lrose_host_ip=$(ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}' |head -1)

    #
    # handle case where XQuartz is not running on :0
    #
    lrose_display_number=`ps -e | grep 'Xquartz :\d' | grep -v bin\/xinit | awk '{ print substr($5,2); }'`
    #
    # if not set or empty, default to 0
    #
    [ -z "$lrose_display_number" ] && lrose_display_number='0'

    #
    # set DISPLAY to host-ip:display-number
    #
    echo "-e DISPLAY=$lrose_host_ip:$lrose_display_number"
  elif [[ $lrose_uname = 'Linux' ]]; then
    #
    # pass through DISPLAY, but specify X11 socket as shared volume
    #
    echo "-e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix"
  else
    echo "This platform is not supported by `basename $0`"
    exit 1
  fi
}

_echo_version

echo "running cmd: docker run \
    -v $HOME/.Xauthority:/root/.Xauthority \
    $(lrose_docker_run_options) \
    ${cidd_docker_image} \
    /usr/local/cidd/bin/CIDD -font fixed \
    -p $cidd_params_url"

docker run \
    -v $HOME/.Xauthority:/root/.Xauthority \
    $(lrose_docker_run_options) \
    ${cidd_docker_image} \
    /usr/local/cidd/bin/CIDD -font fixed \
    -p $cidd_params_url

