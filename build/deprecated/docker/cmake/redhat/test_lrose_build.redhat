#! /bin/bash

###########################################################
# test lrose build in redhat image
# logs are written to /tmp on host

#--------------------------------------------------------------------
# usage function
#

function usage() {
    echo
    echo "Perform lrose build in docker container"
    echo "Usage:"
    echo "  $scriptName [options below]"
    echo "  -h   :  help"
    echo "  -d   :  turn debugging on"
    echo "  -p ? :  set lrose_pkg"
    echo "          e.g. lrose-core, lrose-radx, lrose-cidd"
    echo "  -r ? :  set release_date"
    echo "          e.g. latest, 20190105"
    echo "  -t ? :  set os_type"
    echo "          e.g. centos, fedora"
    echo "  -v ? :  set os_version"
    echo "          e.g. 7 for centos 7, 29 for fedora 29"
    echo
}

scriptName=$(basename $0)

os_type=centos
os_version=7
lrose_pkg=lrose-core
release_date=latest
debug=true

# Parse command line options.
while getopts hdp:r:t:v: OPT; do
    case "$OPT" in
        h)
            usage
            exit 0
            ;;
        d)
            debug=true
            ;;
        p)
            lrose_pkg=$OPTARG
            ;;
        r)
            release_date=$OPTARG
            ;;
        t)
            os_type=$OPTARG
            ;;
        v)
            os_version=$OPTARG
            ;;
        \?)
            # getopts issues an error message
            echo "Problems with command line usage"
            usage
            exit 1
            ;;
    esac
done

if [ "$debug" == "true" ]
then
  echo "Running $scriptName"
  echo "  performing lrose build in docker container"
  echo "    os_type: ${os_type}"
  echo "    os_version: ${os_version}"
  echo "    lrose_pkg: ${lrose_pkg}"
  echo "    release_date: ${release_date}"
fi

# go to scripts dir

cd ~/git/lrose-core/build/packages/redhat

# compute Dockerfile path

DockerfilePath=/tmp/docker/Dockerfile.build.${os_type}.${os_version}.${lrose_pkg}
echo "Dockerfile path: " $DockerfilePath

# create Dockerfile preamble with the FROM command

mkdir -p /tmp/docker
echo "####################################################" > ${DockerfilePath}
echo "FROM custom/${os_type}:${os_version}" >> ${DockerfilePath}
echo "#" >> ${DockerfilePath}

# append the body of the Dockerfile

if [ "$lrose_pkg" = "cidd" ]
then
  cat Dockerfile.redhat.build.cidd >> ${DockerfilePath}
else
    # normal core build
    if [ "$os_type" = centos -a "$os_version" = 6 ] ; then
        cat Dockerfile.centos6.build >> ${DockerfilePath}
    elif [ "$os_type" = centos -a "$os_version" = 7 ] ; then
        cat Dockerfile.centos7.build >> ${DockerfilePath}
    else
        cat Dockerfile.redhat.build >> ${DockerfilePath}
    fi
fi

# remove old image if present

tag=build.${lrose_pkg}/${os_type}:${os_version}
docker image rm -f ${tag}

# make build script available to container

scriptsDir=~/git/lrose-core/build

# test the build, writing logs to local disk
# used for debugging

logsDir=/tmp/docker/logs.build.${os_type}.${os_version}.${lrose_pkg}
mkdir -p $logsDir
if [ "$os_type" = centos -a "$os_version" = 6 ] ; then
    docker run \
        -v ${scriptsDir}:/scripts \
        -v ${logsDir}:/logs \
        custom/${os_type}:${os_version} \
        /scripts/checkout_and_build_auto.py \
        --prefix /usr/local/lrose \
        --buildDir /tmp/lrose-build \
        --logDir /logs \
elif [ "$os_type" = centos -a "$os_version" = 7 ] ; then
    docker run \
        -v ${scriptsDir}:/scripts \
        -v ${logsDir}:/logs \
        custom/${os_type}:${os_version} \
        /scripts/checkout_and_build_auto.py \
        --prefix /usr/local/lrose \
        --buildDir /tmp/lrose-build \
        --logDir /logs \
        --cmake3 --fractl --vortrac --samurai
elif [ "$os_type" = centos -a "$os_version" = 8 ] ; then
    docker run \
        -v ${scriptsDir}:/scripts \
        -v ${logsDir}:/logs \
        custom/${os_type}:${os_version} \
        /scripts/checkout_and_build_auto.py \
        --prefix /usr/local/lrose \
        --buildDir /tmp/lrose-build \
        --logDir /logs \
        --fractl --vortrac --samurai
else
    docker run \
        -v ${scriptsDir}:/scripts \
        -v ${logsDir}:/logs \
        custom/${os_type}:${os_version} \
        /scripts/checkout_and_build_auto.py \
        --prefix /usr/local/lrose \
        --buildDir /tmp/lrose-build \
        --logDir /logs \
        --fractl --vortrac --samurai
fi


