# *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
# ** Copyright UCAR (c) 1992 - 2010 
# ** University Corporation for Atmospheric Research(UCAR) 
# ** National Center for Atmospheric Research(NCAR) 
# ** Research Applications Laboratory(RAL) 
# ** P.O.Box 3000, Boulder, Colorado, 80307-3000, USA 
# ** 2010/10/7 16:53:3 
# *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
##########################################################################
#
# Makefile targets for programs
#
# Mike Dixon
#
# RAP,NCAR,Boulder,Colorado,80307,USA
#
# Nov 1994
#
###########################################################################

all: 
	if $(TEST) "$(TARGET_FILES)" ; then \
		$(MAKE) -k _CC=$(CC) _CPPC=$(CPPC) \
		DBUG_OPT_FLAGS=$(DEBUG_FLAG) all_targets; \
	else \
		$(MAKE) -k _CC=$(CC) _CPPC=$(CPPC) \
		DBUG_OPT_FLAGS=$(DEBUG_FLAG) target; \
	fi

debug:
	if $(TEST) "$(TARGET_FILES)" ; then \
		$(MAKE) -k _CC=$(CC) _CPPC=$(CPPC) \
		DEBUG_LDFLAGS="-L$(RAP_DEBUG_LIB_DIR)" \
		DEBUG_CFLAGS="-DDEBUG" \
		DEBUG_LIBS="-ldbmalloc" \
		DBUG_OPT_FLAGS=$(DEBUG_FLAG) all_targets; \
	else \
		$(MAKE) -k _CC=$(CC) _CPPC=$(CPPC) \
		DEBUG_LDFLAGS="-L$(RAP_DEBUG_LIB_DIR)" \
		DEBUG_CFLAGS="-DDEBUG" \
		DEBUG_LIBS="-ldbmalloc" \
		DBUG_OPT_FLAGS=$(DEBUG_FLAG) target ; \
	fi

profile:
	if $(TEST) "$(TARGET_FILES)" ; then \
		$(MAKE) -k _CC=$(CC) _CPPC=$(CPPC) \
		DEBUG_LDFLAGS="-L$(RAP_PROFILE_LIB_DIR) $(PROF_LDFLAGS)" \
		SYS_LIBS=$(PROF_LIBS) \
		DBUG_OPT_FLAGS=$(PROFILE_FLAG) all_targets ; \
	else \
		$(MAKE) -k _CC=$(CC) _CPPC=$(CPPC) \
		DEBUG_LDFLAGS="-L$(RAP_PROFILE_LIB_DIR) $(PROF_LDFLAGS)" \
		SYS_LIBS=$(PROF_LIBS) \
		DBUG_OPT_FLAGS=$(PROFILE_FLAG) target ; \
	fi

insure:
	if $(TEST) "$(TARGET_FILES)" ; then \
		$(MAKE) -k _CC=insure _CPPC=insure \
		DEBUG_LDFLAGS="-L$(RAP_INSURE_LIB_DIR) -Zuse " \
		DBUG_OPT_FLAGS=$(DEBUG_FLAG) all_targets ; \
	else \
		$(MAKE) -k _CC=insure _CPPC=insure \
		DEBUG_LDFLAGS="-L$(RAP_INSURE_LIB_DIR) -Zuse " \
		DBUG_OPT_FLAGS=$(DEBUG_FLAG) target ; \
	fi

opt:
	if $(TEST) "$(TARGET_FILES)" ; then \
		$(MAKE) -k _CC=$(CC) _CPPC=$(CPPC) \
		DBUG_OPT_FLAGS=$(OPT_FLAG) all_targets ; \
	else \
		$(MAKE) -k _CC=$(CC) _CPPC=$(CPPC) \
		DBUG_OPT_FLAGS=$(OPT_FLAG) target ; \
	fi

target:
	if $(TEST) $(MODULE_TYPE) = library; \
	then \
		echo Making library ... ; \
		$(MAKE) -k lib; \
	else \
		echo Making program ... ; \
		$(MAKE) -k $(TARGET_FILE) ; \
	fi

lib:	$(OBJS)
	echo Archiving library ...
	$(AR) $(ARFLAGS) $(TARGET_FILE) $(OBJS);
	if $(TEST) -f $(RANLIB); \
	  then 	$(RANLIB) $(TARGET_FILE); \
	fi

all_targets: 
	if $(TEST) $(ACTION_TYPE) = install ; then \
		$(MAKE) clean_bin TARGET_FILE="$(TARGET_FILES)" ; \
	fi
	$(MAKE) -k $(TARGET_FILES) ACTION_TYPE=$(ACTION_TYPE)

$(TARGET_FILES):
	if $(TEST) $(ACTION_TYPE) = install; \
	then \
		$(MAKE) -k install_target TARGET_FILE=$@.exe \
			SRCS="$@.c $(COMMON_SRCS)" \
			INSTALL_PATH=$(INSTALL_BIN_DIR)/$@; \
	else \
		$(MAKE) -k target TARGET_FILE=$@.exe SRCS="$@.c $(COMMON_SRCS)"; \
	fi
	$(MV) $@.exe $@

$(TARGET_FILE): $(OBJS) Makefile
	if $(TEST) $(MODULE_TYPE) = program; \
	then \
		echo Linking C program ...; \
		$(RM) $(TARGET_FILE); \
		$(_CC) $(DBUG_OPT_FLAGS) -o $(TARGET_FILE) \
		$(OBJS) $(DEBUG_LDFLAGS) $(LDFLAGS) \
		$(LIBS); \
	elif $(TEST) $(MODULE_TYPE) = library; \
	then \
		$(MAKE) -k lib; \
	else \
		echo Linking C++ program ...; \
		$(RM) $(TARGET_FILE); \
		$(_CPPC) $(DBUG_OPT_FLAGS) -o $(TARGET_FILE) \
		$(OBJS) $(DEBUG_LDFLAGS) $(LDFLAGS) \
		$(LIBS); \
	fi

install_bin: $(INSTALL_PATH)
install_lib: $(INSTALL_LIB)

$(INSTALL_PATH): $(TARGET_FILE)
	if $(TEST) $(MODULE_TYPE) = program || \
	   $(TEST) $(MODULE_TYPE) = progcpp ; \
	then \
		$(CP) $(TARGET_FILE) $(INSTALL_PATH); \
	fi

$(INSTALL_LIB): all
	$(CP) $(TARGET_FILE) $(INSTALL_LIB)

install: 
	if $(TEST) "$(TARGET_FILES)" ; then \
		$(MAKE) -k install_all; \
	else \
		$(MAKE) -k install_target; \
	fi

install_all: 
	$(MAKE) -k all_targets ACTION_TYPE=install

install_target:
	if $(TEST) $(MODULE_TYPE) = library; \
	then \
	     $(MAKE) -k install_lib; \
	     echo Library $(TARGET_FILE) installed in $(INSTALL_LIB) ; \
	else \
	     $(MAKE) -k install_bin INSTALL_PATH=$(INSTALL_PATH); \
	     echo Program $(TARGET_FILE:.exe=) installed in $(INSTALL_PATH); \
	fi

clean:
	$(RM) core a.out
	$(RM) *.i *.o  *.ln *~ lcheck lhcheck

clean_bin:
	if $(TEST) "$(TARGET_FILES)" ; then \
		$(RM) $(TARGET_FILES); \
	else \
		$(RM) $(TARGET_FILE); \
	fi

clean_insure:
	$(RM) tca.map tca.log .inslog _*.out

clean_all: clean clean_bin clean_insure

copyright:
	copyright_remove $(SRCS) $(HDRS) Makefile
	copyright_prepend $(SRCS) $(HDRS) Makefile

rcs_keys:
	rcs_keys_remove $(SRCS) $(HDRS) Makefile
	rcs_keys_prepend $(SRCS) $(HDRS) Makefile

tags:
	etags -t $(SRCS) $(HDRS) Makefile

depend_generic:
	makedepend $(INCLUDES) -- $(CFLAGS) -- $(SRCS) $(C_SRCS) $(CPPC_SRCS)

clean_depend:
	makedepend

.SUFFIXES: .c .cc .l .y .o .ln

.c.o:
	$(_CC) $(CFLAGS) $(DBUG_OPT_FLAGS) -c $(INCLUDES) $<

.c.ln:
	$(LINT) $(LINTFLAGS) -c $(INCLUDES) $< 2>&1 | $(LINTFILTER)

.cc.o:
	$(_CPPC) $(CPPC_CFLAGS) $(DBUG_OPT_FLAGS) -c $(CPPC_INCLUDES) $<

.cc.ln:
	$(LINT) $(LINTFLAGS) -c $(INCLUDES) $< 2>&1 | $(LINTFILTER)

.l.o:
	$(LEX.l) $< > $*.c
	$(_CC) $(CFLAGS) $(INCLUDES) -c -o $@ $*.c

.y.o:
	$(YACC.y) $(YFLAGS) $<
	$(_CC) $(CFLAGS) $(INCLUDES) -c -o $@ y.tab.c

# note: see dix_make_macros for definition of EDIT_RPCGEN

%.h: %.x
	rpcgen -h -o $@ $<
	rpcgen -c -o `basename $@ .h`.c $<
	$(EDIT_RPCGEN) $@ `basename $@ .h`.c
	$(RAP_MAKE_BIN_DIR)/fix_xdr.pl < $@ > $@.new 
	mv $@.new $@
	$(RAP_MAKE_BIN_DIR)/install_header.pl $@ $(TARGET_FILE)	

