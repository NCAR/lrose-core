# *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
# ** Copyright UCAR (c) 1992 - 2010 
# ** University Corporation for Atmospheric Research(UCAR) 
# ** National Center for Atmospheric Research(NCAR) 
# ** Research Applications Laboratory(RAL) 
# ** P.O.Box 3000, Boulder, Colorado, 80307-3000, USA 
# ** 2010/10/7 16:53:3 
# *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
###########################################################
#
# rap_make_enum_to_string_macros
#
# macros to be included for using a program 'enum_to_string' to
# generate c++ .cc and .hh or .h files to be used in other libraries and
# applications.
#
# Dave Albo
#
# RAP,NCAR,Boulder,Colorado,80307,USA
#
# June 2005
#
# NOTE:
#
#    The current design uses GNU make extensions, so is not suitable
#    for general use on any UNIX platforms.
#
#    Use of enum_to_string as part of nightly build makes is currently NOT 
#    supported.
#
# Design:
#
#    The program enum_to_string reads any header file, searches
#    for 'enum's within that file, and creates .cc and .hh (or .h)
#    files with methods associated with the enums.  Since a
#    header file can have any number of enum's, the program
#    creates one output file per enum. Consider an example:
#
#    a.hh has this code in it somewhere:
#        enum x { a, b, c};
#        enum y { d, e, f};
#    b.hh has this code in it somewhere:
#        enum z { g, h, i};
#
#    The Makefile that includes this file should have these lines:
#
#    ENUM_TO_STRING_TARGETS = x.a y.a z.b
#
#    more generally each target is of the form
#
#           <enum name>.<source header name>
#
#    the files created in this example are:
#       x_to_string.cc, x_to_string.hh
#       y_to_string.cc, y_to_string.hh
#       z_to_string.cc, z_to_string.hh
#
#
#    Two optional definitions are as follows:
#
#    ENUM_TO_STRING_SUFFIX = h
#
#       Add this definition if you want .h files instead of .hh.
#       If you want .hh, you do not need this line.
#
#    ENUM_TO_STRING_HH_DIR = mylibname
#
#       If enum_to_string can assume include files are in a
#       directory associated with a library under the RAP standard
#       make organization, the include files are found in
#
#            ../include/mylibname
#
#       For the example above, they would be:
#
#          ../include/mylibname/a.hh
#          ../include/mylibname/b.hh
#
#      and the files x_to_string.hh, y_to_string.hh and z_to_string.hh
#      will get created/managed also in ../include/mylibname
#
#
#       Without this definitions, the include files read in and created
#       are local.
#
############################################################

ENUM_TO_STRING_CPPC_SRCS = $(addsuffix _to_string.cc,$(basename $(ENUM_TO_STRING_TARGETS)))

ifeq ($(ENUM_TO_STRING_SUFFIX),)
  ENUM_TO_STRING_SUFFIX=hh
endif

ifeq ($(ENUM_TO_STRING_HH_DIR),)
  ENUM_TO_STRING_HH_DIR=.
endif

ifeq ($(strip $(ENUM_TO_STRING_HH_DIR)),.)
  ENUM_TO_STRING_CPPC_HDRS = $(addsuffix _to_string.$(ENUM_TO_STRING_SUFFIX),$(basename $(ENUM_TO_STRING_TARGETS)))
else
  ENUM_TO_STRING_CPPC_HDRS = $(addprefix ../include/$(ENUM_TO_STRING_HH_DIR)/,$(addsuffix _to_string.$(ENUM_TO_STRING_SUFFIX),$(basename $(ENUM_TO_STRING_TARGETS))))
endif

ifeq ($(ENUM_TO_STRING_SUFFIX),h)
  ENUM_TO_STRING_FLAGS = 
else
  ENUM_TO_STRING_FLAGS = -hh
endif

ENUM_TO_STRING = enum_to_string
