#!/usr/bin/env python3

from __future__ import print_function
import subprocess
import sys
import os

template = """
require 'formula'

class LroseCore < Formula
  homepage 'https://github.com/NCAR/lrose-core'

  url '{0}'
  version '{1}'
  sha256 '{2}'

  depends_on 'hdf5' => 'enable-cxx'
  depends_on 'netcdf' => 'enable-cxx-compat'
  depends_on 'udunits'
  depends_on 'fftw'
  depends_on 'flex'
  depends_on 'jpeg'
  depends_on 'libpng'
  depends_on 'libzip'
  depends_on 'libomp'
  depends_on 'qt'
  depends_on 'pkg-config'
  depends_on 'cmake'
  depends_on 'eigen'
  depends_on 'geographiclib'
  # depends_on 'armadillo'
  depends_on 'rsync'
  depends_on :x11

  def install

    ENV["PKG_CONFIG_PATH"] = "/usr/local/opt/qt/lib/pkgconfig"
    Dir.chdir("codebase")
    system "./configure", "--disable-dependency-tracking", "--prefix=#{{prefix}}"
    system "make install"
    Dir.chdir("..")
    system "rsync", "-av", "share", "#{{prefix}}"

    # Build/install fractl
    Dir.chdir("fractl")
    ENV['LROSE_ROOT_DIR'] = prefix
    system "cmake", "-DCMAKE_INSTALL_PREFIX=#{{prefix}}", "."
    system "make install"
    Dir.chdir("..")

    # Build/install samurai
    Dir.chdir("samurai")
    ENV['LROSE_ROOT_DIR'] = prefix
    system "cmake", "-DCMAKE_INSTALL_PREFIX=#{{prefix}}", "."
    system "make install", "VERBOSE=1"
    bin.install 'build/release/bin/samurai'
    lib.install 'build/release/lib/libsamurai.a'
    lib.install 'build/release/lib/libsamurai.dylib'
    include.install 'src/samurai.h'
    Dir.chdir("..")

  end

  def test
    system "#{{bin}}/RadxPrint", "-h"
  end

end
"""

if "check_output" not in dir( subprocess ): # duck punch it in!
    def f(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be overridden.')
        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise CalledProcessError(retcode, cmd)
        return output
    subprocess.check_output = f

def build_lrose_formula(tar_url, tar_name, formula_name):
    """ build a Homebrew forumula file for lrose-core """	
    dash = tar_name.find('-')
    period = tar_name.find('.', dash)
    version = tar_name[dash+1:period]
    checksum = subprocess.check_output(("sha256sum", tar_name))
    checksum = checksum.split()[0]
    formula = template.format(tar_url, version, checksum)
    outf = open(formula_name, 'w')
    outf.write(formula)
    outf.close()

if __name__ == '__main__':
    if len(sys.argv) == 4:
        build_lrose_formula(sys.argv[1], sys.argv[2], sys.argv[3])
    else:
        print("usage: ",
              sys.argv[0],
              "  ftp_dir tar_name formula_name",
              file=sys.stderr)
