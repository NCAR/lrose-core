/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// FiltAlgParams.cc
//
// TDRP C++ code file for class 'FiltAlgParams'.
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "FiltAlgParams.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  FiltAlgParams::FiltAlgParams()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "FiltAlgParams";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  FiltAlgParams::FiltAlgParams(const FiltAlgParams& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "FiltAlgParams";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  FiltAlgParams::~FiltAlgParams()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void FiltAlgParams::operator=(const FiltAlgParams& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int FiltAlgParams::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int FiltAlgParams::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool FiltAlgParams::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int FiltAlgParams::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int FiltAlgParams::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int FiltAlgParams::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void FiltAlgParams::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void FiltAlgParams::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int FiltAlgParams::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int FiltAlgParams::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void FiltAlgParams::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void FiltAlgParams::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int FiltAlgParams::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int FiltAlgParams::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void FiltAlgParams::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("FiltAlg");
    tt->comment_text = tdrpStrDup("This program does generic and general algorithm data filtering");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("instance");
    tt->help = tdrpStrDup("for PMU");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("default");
    tt++;
    
    // Parameter 'debug_mode'
    // ctype is '_debug_e'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug_mode");
    tt->descr = tdrpStrDup("debugging mode");
    tt->help = tdrpStrDup("NONE=as quiet as possible, DEBUG = minimal debug output, DEBUG_VERBOSE=more");
    tt->val_offset = (char *) &debug_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_e");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("NONE");
      tt->enum_def.fields[0].val = NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG");
      tt->enum_def.fields[1].val = DEBUG;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG;
    tt++;
    
    // Parameter 'debug_triggering'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_triggering");
    tt->descr = tdrpStrDup("triggering debug");
    tt->help = tdrpStrDup("set to TRUE to debug triggering");
    tt->val_offset = (char *) &debug_triggering - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'realtime'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("realtime");
    tt->descr = tdrpStrDup("realtime");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &realtime - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_wait_minutes'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_wait_minutes");
    tt->descr = tdrpStrDup("max wait");
    tt->help = tdrpStrDup("maximum wait time (minutes) for realtime=TRUE and multiple input URLs. Not used in archive mode");
    tt->val_offset = (char *) &max_wait_minutes - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'read_tolerance_seconds'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_tolerance_seconds");
    tt->descr = tdrpStrDup("read_tolerance_seconds");
    tt->help = tdrpStrDup("maximum allowed difference (seconds) between read request time and data time");
    tt->val_offset = (char *) &read_tolerance_seconds - &_start_;
    tt->single_val.i = 120;
    tt++;
    
    // Parameter 'trigger_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("trigger_url");
    tt->descr = tdrpStrDup("trigger url");
    tt->help = tdrpStrDup("URL to trigger off");
    tt->val_offset = (char *) &trigger_url - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'min_gate_index'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_gate_index");
    tt->descr = tdrpStrDup("min gate index");
    tt->help = tdrpStrDup("sometimes the data is bad too close to radar. Don't include data this close or closer in computations. Set to -1 for no effect");
    tt->val_offset = (char *) &min_gate_index - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("output for Algorithm MDV (grids)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_spdb'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_spdb");
    tt->descr = tdrpStrDup("output for Algorithm SPDB (1d data)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_spdb - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'filter'
    // ctype is '_data_filter_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("filter");
    tt->descr = tdrpStrDup("Filters to apply");
    tt->help = tdrpStrDup("field = name of input field to the filter\nis_input_field = TRUE if field is an actual input FALSE if an upstream filters output\nwrite_output_field=TRUE to write output field to MDV file, FALSE to keep it only as a passthrough to downstream filters\noutput_field = name of output field to the filter\nfilter = The filter to apply\nfilter_index = index into an array of params for that filter type (below)\napp_filter_name = name of filter when type = APPFILTER, empty if not");
    tt->array_offset = (char *) &_filter - &_start_;
    tt->array_n_offset = (char *) &filter_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(data_filter_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("data_filter_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("field");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_filter->field - (char *) _filter;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input_field");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_filter->is_input_field - (char *) _filter;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("write_output_field");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_filter->write_output_field - (char *) _filter;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("output_field");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_filter->output_field - (char *) _filter;
      tt->struct_def.fields[4].ftype = tdrpStrDup("filter_t");
      tt->struct_def.fields[4].fname = tdrpStrDup("filter");
      tt->struct_def.fields[4].ptype = ENUM_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_filter->filter - (char *) _filter;
        tt->struct_def.fields[4].enum_def.name = tdrpStrDup("filter_t");
        tt->struct_def.fields[4].enum_def.nfields = 34;
        tt->struct_def.fields[4].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[4].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[4].enum_def.fields[0].name = tdrpStrDup("CLUMP");
        tt->struct_def.fields[4].enum_def.fields[0].val = CLUMP;
        tt->struct_def.fields[4].enum_def.fields[1].name = tdrpStrDup("ELLIP");
        tt->struct_def.fields[4].enum_def.fields[1].val = ELLIP;
        tt->struct_def.fields[4].enum_def.fields[2].name = tdrpStrDup("DILATE");
        tt->struct_def.fields[4].enum_def.fields[2].val = DILATE;
        tt->struct_def.fields[4].enum_def.fields[3].name = tdrpStrDup("MEDIAN");
        tt->struct_def.fields[4].enum_def.fields[3].val = MEDIAN;
        tt->struct_def.fields[4].enum_def.fields[4].name = tdrpStrDup("SDEV");
        tt->struct_def.fields[4].enum_def.fields[4].val = SDEV;
        tt->struct_def.fields[4].enum_def.fields[5].name = tdrpStrDup("MEDIAN_NO_OVERLAP");
        tt->struct_def.fields[4].enum_def.fields[5].val = MEDIAN_NO_OVERLAP;
        tt->struct_def.fields[4].enum_def.fields[6].name = tdrpStrDup("SDEV_NO_OVERLAP");
        tt->struct_def.fields[4].enum_def.fields[6].val = SDEV_NO_OVERLAP;
        tt->struct_def.fields[4].enum_def.fields[7].name = tdrpStrDup("TEXTURE_X");
        tt->struct_def.fields[4].enum_def.fields[7].val = TEXTURE_X;
        tt->struct_def.fields[4].enum_def.fields[8].name = tdrpStrDup("TEXTURE_Y");
        tt->struct_def.fields[4].enum_def.fields[8].val = TEXTURE_Y;
        tt->struct_def.fields[4].enum_def.fields[9].name = tdrpStrDup("REMAP");
        tt->struct_def.fields[4].enum_def.fields[9].val = REMAP;
        tt->struct_def.fields[4].enum_def.fields[10].name = tdrpStrDup("REPLACE");
        tt->struct_def.fields[4].enum_def.fields[10].val = REPLACE;
        tt->struct_def.fields[4].enum_def.fields[11].name = tdrpStrDup("MAX_TRUE");
        tt->struct_def.fields[4].enum_def.fields[11].val = MAX_TRUE;
        tt->struct_def.fields[4].enum_def.fields[12].name = tdrpStrDup("MAX");
        tt->struct_def.fields[4].enum_def.fields[12].val = MAX;
        tt->struct_def.fields[4].enum_def.fields[13].name = tdrpStrDup("AVERAGE");
        tt->struct_def.fields[4].enum_def.fields[13].val = AVERAGE;
        tt->struct_def.fields[4].enum_def.fields[14].name = tdrpStrDup("AVERAGE_ORIENTATION");
        tt->struct_def.fields[4].enum_def.fields[14].val = AVERAGE_ORIENTATION;
        tt->struct_def.fields[4].enum_def.fields[15].name = tdrpStrDup("PRODUCT");
        tt->struct_def.fields[4].enum_def.fields[15].val = PRODUCT;
        tt->struct_def.fields[4].enum_def.fields[16].name = tdrpStrDup("FULL_MEAN");
        tt->struct_def.fields[4].enum_def.fields[16].val = FULL_MEAN;
        tt->struct_def.fields[4].enum_def.fields[17].name = tdrpStrDup("FULL_SDEV");
        tt->struct_def.fields[4].enum_def.fields[17].val = FULL_SDEV;
        tt->struct_def.fields[4].enum_def.fields[18].name = tdrpStrDup("FULL_MEDIAN");
        tt->struct_def.fields[4].enum_def.fields[18].val = FULL_MEDIAN;
        tt->struct_def.fields[4].enum_def.fields[19].name = tdrpStrDup("VERT_AVERAGE");
        tt->struct_def.fields[4].enum_def.fields[19].val = VERT_AVERAGE;
        tt->struct_def.fields[4].enum_def.fields[20].name = tdrpStrDup("VERT_MAX");
        tt->struct_def.fields[4].enum_def.fields[20].val = VERT_MAX;
        tt->struct_def.fields[4].enum_def.fields[21].name = tdrpStrDup("VERT_PRODUCT");
        tt->struct_def.fields[4].enum_def.fields[21].val = VERT_PRODUCT;
        tt->struct_def.fields[4].enum_def.fields[22].name = tdrpStrDup("WEIGHTED_SUM");
        tt->struct_def.fields[4].enum_def.fields[22].val = WEIGHTED_SUM;
        tt->struct_def.fields[4].enum_def.fields[23].name = tdrpStrDup("WEIGHTED_ORIENTATION_SUM");
        tt->struct_def.fields[4].enum_def.fields[23].val = WEIGHTED_ORIENTATION_SUM;
        tt->struct_def.fields[4].enum_def.fields[24].name = tdrpStrDup("NORM_WEIGHTED_SUM");
        tt->struct_def.fields[4].enum_def.fields[24].val = NORM_WEIGHTED_SUM;
        tt->struct_def.fields[4].enum_def.fields[25].name = tdrpStrDup("NORM_WEIGHTED_ORIENTATION_SUM");
        tt->struct_def.fields[4].enum_def.fields[25].val = NORM_WEIGHTED_ORIENTATION_SUM;
        tt->struct_def.fields[4].enum_def.fields[26].name = tdrpStrDup("MASK");
        tt->struct_def.fields[4].enum_def.fields[26].val = MASK;
        tt->struct_def.fields[4].enum_def.fields[27].name = tdrpStrDup("RESCALE");
        tt->struct_def.fields[4].enum_def.fields[27].val = RESCALE;
        tt->struct_def.fields[4].enum_def.fields[28].name = tdrpStrDup("DB2LINEAR");
        tt->struct_def.fields[4].enum_def.fields[28].val = DB2LINEAR;
        tt->struct_def.fields[4].enum_def.fields[29].name = tdrpStrDup("LINEAR2DB");
        tt->struct_def.fields[4].enum_def.fields[29].val = LINEAR2DB;
        tt->struct_def.fields[4].enum_def.fields[30].name = tdrpStrDup("TRAPEZOID_REMAP");
        tt->struct_def.fields[4].enum_def.fields[30].val = TRAPEZOID_REMAP;
        tt->struct_def.fields[4].enum_def.fields[31].name = tdrpStrDup("S_REMAP");
        tt->struct_def.fields[4].enum_def.fields[31].val = S_REMAP;
        tt->struct_def.fields[4].enum_def.fields[32].name = tdrpStrDup("PASSTHROUGH");
        tt->struct_def.fields[4].enum_def.fields[32].val = PASSTHROUGH;
        tt->struct_def.fields[4].enum_def.fields[33].name = tdrpStrDup("APPFILTER");
        tt->struct_def.fields[4].enum_def.fields[33].val = APPFILTER;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("filter_index");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_filter->filter_index - (char *) _filter;
      tt->struct_def.fields[6].ftype = tdrpStrDup("string");
      tt->struct_def.fields[6].fname = tdrpStrDup("app_filter_name");
      tt->struct_def.fields[6].ptype = STRING_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_filter->app_filter_name - (char *) _filter;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'input'
    // ctype is '_input_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("input");
    tt->descr = tdrpStrDup("input fields");
    tt->help = tdrpStrDup("The fields read in externally\nname = name used in filtering as input\nurl = where the data is\nfield = field name within this data\n");
    tt->array_offset = (char *) &_input - &_start_;
    tt->array_n_offset = (char *) &input_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(input_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("input_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_input->name - (char *) _input;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("url");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_input->url - (char *) _input;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("field");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_input->field - (char *) _input;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'feedback_input'
    // ctype is '_input_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("feedback_input");
    tt->descr = tdrpStrDup("input fields that are feedback inputs");
    tt->help = tdrpStrDup("The fields read in externally from the previous processing step\nname = name used in filtering as input\nurl = where the data is\nfield = field name within this data\nThis allows data output from a downstream filter to be used upstream with a time delay i.e. feedback");
    tt->array_offset = (char *) &_feedback_input - &_start_;
    tt->array_n_offset = (char *) &feedback_input_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(input_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("input_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_feedback_input->name - (char *) _feedback_input;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("url");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_feedback_input->url - (char *) _feedback_input;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("field");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_feedback_input->field - (char *) _feedback_input;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'feedback_immediately'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("feedback_immediately");
    tt->descr = tdrpStrDup("feedback immediately");
    tt->help = tdrpStrDup("If TRUE, the app will look back for the most recent feedback data for the first processing step. If FALSE, the first processing step will replace feedback data with all missing values and not attempt to read in older data");
    tt->val_offset = (char *) &feedback_immediately - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_feedback_seconds_back'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_feedback_seconds_back");
    tt->descr = tdrpStrDup("max feedback lookback");
    tt->help = tdrpStrDup("Maximum number of seconds back for immediate feedback, when feedback_immediate = true, ignored otherwise");
    tt->val_offset = (char *) &max_feedback_seconds_back - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'input_info_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_info_url");
    tt->descr = tdrpStrDup("input info url");
    tt->help = tdrpStrDup("URL that has info that can be extracted from the chunk, empty for none");
    tt->val_offset = (char *) &input_info_url - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'vlevel'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("vlevel");
    tt->descr = tdrpStrDup("vlevel range");
    tt->help = tdrpStrDup("range of radar vertical levels to use from input data (degrees). If either value < 0, then use all radar vertical levels in the input");
    tt->array_offset = (char *) &_vlevel - &_start_;
    tt->array_n_offset = (char *) &vlevel_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 8.98847e+307;
      tt->array_vals[1].d = 8.98847e+307;
    tt++;
    
    // Parameter 'vlevel_tolerance'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("vlevel_tolerance");
    tt->descr = tdrpStrDup("vlevel tolerance");
    tt->help = tdrpStrDup("maximum allowed difference (vlevel units within MDV) between inputs");
    tt->val_offset = (char *) &vlevel_tolerance - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'num_threads'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("num_threads");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Number of threads, 1 or less for no threading");
    tt->val_offset = (char *) &num_threads - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'thread_debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("thread_debug");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Thread debugging");
    tt->val_offset = (char *) &thread_debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'parm_2d'
    // ctype is '_filter_2d_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_2d");
    tt->descr = tdrpStrDup("list of 2d filter params");
    tt->help = tdrpStrDup("nr = number of radial points\nntheta = number of azimuthal points\nfilters that are 2d are:  ELLIP, DILATE SDEV SDEV_NO_OVERLAP TEXTURE_X TEXTURE_Y\n");
    tt->array_offset = (char *) &_parm_2d - &_start_;
    tt->array_n_offset = (char *) &parm_2d_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_2d_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_2d_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nr");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_2d->nr - (char *) _parm_2d;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("ntheta");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_2d->ntheta - (char *) _parm_2d;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_2d_median'
    // ctype is '_filter_2d_median_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_2d_median");
    tt->descr = tdrpStrDup("list of 2d median filter params");
    tt->help = tdrpStrDup("nr = number of radial points\nntheta = number of azimuthal points\nbin_min = minimum data bin value\nbin_max = maximum data bin value\nbin_delta = bin delta value resolution\nfilters that are use these params are:  MEDIAN  MEDIAN_NO_OVERLAP\n");
    tt->array_offset = (char *) &_parm_2d_median - &_start_;
    tt->array_n_offset = (char *) &parm_2d_median_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_2d_median_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_2d_median_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nr");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_2d_median->nr - (char *) _parm_2d_median;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("ntheta");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_2d_median->ntheta - (char *) _parm_2d_median;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("bin_min");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_2d_median->bin_min - (char *) _parm_2d_median;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("bin_max");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_parm_2d_median->bin_max - (char *) _parm_2d_median;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("bin_delta");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_parm_2d_median->bin_delta - (char *) _parm_2d_median;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_combine'
    // ctype is '_filter_comb_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_combine");
    tt->descr = tdrpStrDup("filters for combining.");
    tt->help = tdrpStrDup("For AVERAGE, AVERAGE_ORIENTATION, PRODUCT, MAX, WEIGHTED_SUM, NORM_WEIGHTED_SUM, WEIGHTED_ORIENTATION_SUM, NORM_WEIGHTED_ORIENTATION_SUM\ninput_weight = main input weight, when WEIGHTED_SUM or NORM_WEIGHTED_SUM or WEIGHTED_ORIENTATION_SUM or NORM_WEIGHTED_ORIENTATION_SUM\ncombine_index = index into combine arrays below\n");
    tt->array_offset = (char *) &_parm_combine - &_start_;
    tt->array_n_offset = (char *) &parm_combine_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_comb_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_comb_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_weight");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_combine->input_weight - (char *) _parm_combine;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("combine_index");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_combine->combine_index - (char *) _parm_combine;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_clump'
    // ctype is '_filter_clump_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_clump");
    tt->descr = tdrpStrDup("filters for clumping");
    tt->help = tdrpStrDup("For CLUMP\nthreshold = clumping threshold, all data >= threshold goes into a clump\nClump output values are 1.0 in a clump, 0.0 outside a clump");
    tt->array_offset = (char *) &_parm_clump - &_start_;
    tt->array_n_offset = (char *) &parm_clump_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_clump_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_clump_t");
    tt->struct_def.nfields = 1;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("threshold");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_clump->threshold - (char *) _parm_clump;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_replace'
    // ctype is '_filter_replace_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_replace");
    tt->descr = tdrpStrDup("filters for the REPLACE filter.");
    tt->help = tdrpStrDup("set_initial_value = TRUE to set the initial value to a constant prior to replacing values, FALSE to set the initial value to the main input to the filter\ninitial_value = The value to fill the input with when set_initial_value=TRUE, ignored when set_initial_value=FALSE\nreplacement_value = The value to set into the output data when conditions are met\nlogical_command = string with named data and conditionals (for example \"A <= 30 & B < 5\", where A and B are named data values found upstream or as input)\ncombine_index = index into combine arrays below (this filter will ignore weight)\n");
    tt->array_offset = (char *) &_parm_replace - &_start_;
    tt->array_n_offset = (char *) &parm_replace_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_replace_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_replace_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("set_initial_value");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_replace->set_initial_value - (char *) _parm_replace;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("initial_value");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_replace->initial_value - (char *) _parm_replace;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("replacement_value");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_replace->replacement_value - (char *) _parm_replace;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("logical_command");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_parm_replace->logical_command - (char *) _parm_replace;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("combine_index");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_parm_replace->combine_index - (char *) _parm_replace;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_max_true'
    // ctype is '_filter_max_true_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_max_true");
    tt->descr = tdrpStrDup("filters for the MAX_TRUE filter.");
    tt->help = tdrpStrDup("strings_index = index to strings<strings_index> params below, with each string there of the form of a conditional (for example (for example \"A <= 30 & B < 5\", where A and B are named data values found upstream or as input)\ncombine_index = index into combine arrays below (this filter will ignore weight)\n");
    tt->array_offset = (char *) &_parm_max_true - &_start_;
    tt->array_n_offset = (char *) &parm_max_true_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_max_true_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_max_true_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("strings_index");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_max_true->strings_index - (char *) _parm_max_true;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("combine_index");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_max_true->combine_index - (char *) _parm_max_true;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_rescale'
    // ctype is '_filter_rescale_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_rescale");
    tt->descr = tdrpStrDup("filters for the RESCALE filter.");
    tt->help = tdrpStrDup("The remap value at each point is old_value*scale + offset");
    tt->array_offset = (char *) &_parm_rescale - &_start_;
    tt->array_n_offset = (char *) &parm_rescale_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_rescale_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_rescale_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_rescale->scale - (char *) _parm_rescale;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("offset");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_rescale->offset - (char *) _parm_rescale;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_trap_remap'
    // ctype is '_filter_trap_remap_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_trap_remap");
    tt->descr = tdrpStrDup("filters for the TRAPEZOID_REMAP filter");
    tt->help = tdrpStrDup("The filter is trapezoid shaped with 4 parameters a < b < c < d\nThe remap value at each point x is max(min((x-a)/(b-a),1,(d-x)/(d-c)), 0)");
    tt->array_offset = (char *) &_parm_trap_remap - &_start_;
    tt->array_n_offset = (char *) &parm_trap_remap_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_trap_remap_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_trap_remap_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("a");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_trap_remap->a - (char *) _parm_trap_remap;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("b");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_trap_remap->b - (char *) _parm_trap_remap;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("c");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_trap_remap->c - (char *) _parm_trap_remap;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("d");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_parm_trap_remap->d - (char *) _parm_trap_remap;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_s_remap'
    // ctype is '_filter_s_remap_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_s_remap");
    tt->descr = tdrpStrDup("filters for the S_REMAP filter");
    tt->help = tdrpStrDup("The remap is 'S' shaped, with two params a and b with a < b\nf(x) = 0 for x<= a\nf(x) = 2*((x-a)/(b-a))^2  for a <= x and x <= (a+b)/2\nf(x) = 1 - 2*((x-b)/(b-a))^2  for (a+b)/2 <= x and x <= b\nf(x) = 1  for x >= b");
    tt->array_offset = (char *) &_parm_s_remap - &_start_;
    tt->array_n_offset = (char *) &parm_s_remap_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_s_remap_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_s_remap_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("a");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_s_remap->a - (char *) _parm_s_remap;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("b");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_s_remap->b - (char *) _parm_s_remap;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_Scalar'
    // ctype is '_filter_Scalar_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_Scalar");
    tt->descr = tdrpStrDup("list of scalar filter params");
    tt->help = tdrpStrDup("rLwr     = lower bound of radials to calculate scalar statistic over\nrUpr     = upper bound of radials to calculate scalar statistic over\nthetaLwr = lower bound of aziumuths to calculate scalar statistic over\nthetaUpr = upper bound of aziumuths to calculate scalar statistic over\nfilters that are Scalr are:  FULL_MEAN, FULL_SDEV, FULL_MEDIAN\n");
    tt->array_offset = (char *) &_parm_Scalar - &_start_;
    tt->array_n_offset = (char *) &parm_Scalar_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_Scalar_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("filter_Scalar_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("rLwr");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_Scalar->rLwr - (char *) _parm_Scalar;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("rUpr");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_Scalar->rUpr - (char *) _parm_Scalar;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("thetaLwr");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_Scalar->thetaLwr - (char *) _parm_Scalar;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("thetaUpr");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_parm_Scalar->thetaUpr - (char *) _parm_Scalar;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_dummy'
    // ctype is '_dummy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_dummy");
    tt->descr = tdrpStrDup("params for filters with no params");
    tt->help = tdrpStrDup("dummy    = placeholder. \nfilts with no parms: VERT_AVERAGE, VERT_MAX, VERT_PRODUCT\n                     DB2LINEAR, LINEAR2DB, PASSTHROUGH");
    tt->array_offset = (char *) &_parm_dummy - &_start_;
    tt->array_n_offset = (char *) &parm_dummy_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(dummy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("dummy_t");
    tt->struct_def.nfields = 1;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("dummy");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_dummy->dummy - (char *) _parm_dummy;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'parm_mask'
    // ctype is '_mask_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("parm_mask");
    tt->descr = tdrpStrDup("MASK filter params");
    tt->help = tdrpStrDup("mask_name = name of mask field\nmask_is_input = TRUE if this is an input to the program, FALSE if derived within the program\nmask_list_index = index to list of mask ranges below\n");
    tt->array_offset = (char *) &_parm_mask - &_start_;
    tt->array_n_offset = (char *) &parm_mask_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(mask_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("mask_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("mask_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_parm_mask->mask_name - (char *) _parm_mask;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("mask_is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_parm_mask->mask_is_input - (char *) _parm_mask;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("mask_list_index");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_parm_mask->mask_list_index - (char *) _parm_mask;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("Fuzzy Function params");
    tt->comment_text = tdrpStrDup(" Used internally for various filters, and for REMAP filter\n index 0 up to 11, each one has any number of :\n   x = fuzzy x value\n   y = fuzzy y value\n");
    tt++;
    
    // Parameter 'fuzzy0'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy0");
    tt->descr = tdrpStrDup("0 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy0 - &_start_;
    tt->array_n_offset = (char *) &fuzzy0_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy0->x - (char *) _fuzzy0;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy0->y - (char *) _fuzzy0;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy1'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy1");
    tt->descr = tdrpStrDup("1 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy1 - &_start_;
    tt->array_n_offset = (char *) &fuzzy1_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy1->x - (char *) _fuzzy1;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy1->y - (char *) _fuzzy1;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy2'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy2");
    tt->descr = tdrpStrDup("2 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy2 - &_start_;
    tt->array_n_offset = (char *) &fuzzy2_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy2->x - (char *) _fuzzy2;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy2->y - (char *) _fuzzy2;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy3'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy3");
    tt->descr = tdrpStrDup("3 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy3 - &_start_;
    tt->array_n_offset = (char *) &fuzzy3_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy3->x - (char *) _fuzzy3;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy3->y - (char *) _fuzzy3;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy4'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy4");
    tt->descr = tdrpStrDup("4 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy4 - &_start_;
    tt->array_n_offset = (char *) &fuzzy4_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy4->x - (char *) _fuzzy4;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy4->y - (char *) _fuzzy4;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy5'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy5");
    tt->descr = tdrpStrDup("5 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy5 - &_start_;
    tt->array_n_offset = (char *) &fuzzy5_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy5->x - (char *) _fuzzy5;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy5->y - (char *) _fuzzy5;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy6'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy6");
    tt->descr = tdrpStrDup("6 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy6 - &_start_;
    tt->array_n_offset = (char *) &fuzzy6_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy6->x - (char *) _fuzzy6;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy6->y - (char *) _fuzzy6;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy7'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy7");
    tt->descr = tdrpStrDup("7 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy7 - &_start_;
    tt->array_n_offset = (char *) &fuzzy7_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy7->x - (char *) _fuzzy7;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy7->y - (char *) _fuzzy7;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy8'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy8");
    tt->descr = tdrpStrDup("8 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy8 - &_start_;
    tt->array_n_offset = (char *) &fuzzy8_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy8->x - (char *) _fuzzy8;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy8->y - (char *) _fuzzy8;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy9'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy9");
    tt->descr = tdrpStrDup("9 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy9 - &_start_;
    tt->array_n_offset = (char *) &fuzzy9_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy9->x - (char *) _fuzzy9;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy9->y - (char *) _fuzzy9;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy10'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy10");
    tt->descr = tdrpStrDup("10 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy10 - &_start_;
    tt->array_n_offset = (char *) &fuzzy10_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy10->x - (char *) _fuzzy10;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy10->y - (char *) _fuzzy10;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy11'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy11");
    tt->descr = tdrpStrDup("11 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy11 - &_start_;
    tt->array_n_offset = (char *) &fuzzy11_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy11->x - (char *) _fuzzy11;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy11->y - (char *) _fuzzy11;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy12'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy12");
    tt->descr = tdrpStrDup("12 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy12 - &_start_;
    tt->array_n_offset = (char *) &fuzzy12_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy12->x - (char *) _fuzzy12;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy12->y - (char *) _fuzzy12;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy13'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy13");
    tt->descr = tdrpStrDup("13 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy13 - &_start_;
    tt->array_n_offset = (char *) &fuzzy13_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy13->x - (char *) _fuzzy13;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy13->y - (char *) _fuzzy13;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'fuzzy14'
    // ctype is '_fuzzy_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fuzzy14");
    tt->descr = tdrpStrDup("14 fuzzy f");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_fuzzy14 - &_start_;
    tt->array_n_offset = (char *) &fuzzy14_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(fuzzy_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("fuzzy_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fuzzy14->x - (char *) _fuzzy14;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fuzzy14->y - (char *) _fuzzy14;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("Combine params");
    tt->comment_text = tdrpStrDup(" for filters AVERAGE, PRODUCT, MAX, WEIGHTED_SUM, NORM_WEIGHTED_SUM, REPLACE\n index 0 up to 6, each one has any number of :\n   name = data name\n   is_input = TRUE if the input is an original input\n   weight = weight for WEIGHTED_SUM and NORM_WEIGHTED_SUM\n");
    tt++;
    
    // Parameter 'combine0'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine0");
    tt->descr = tdrpStrDup("0 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine0 - &_start_;
    tt->array_n_offset = (char *) &combine0_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine0->name - (char *) _combine0;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine0->is_input - (char *) _combine0;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine0->weight - (char *) _combine0;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'combine1'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine1");
    tt->descr = tdrpStrDup("1 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine1 - &_start_;
    tt->array_n_offset = (char *) &combine1_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine1->name - (char *) _combine1;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine1->is_input - (char *) _combine1;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine1->weight - (char *) _combine1;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'combine2'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine2");
    tt->descr = tdrpStrDup("2 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine2 - &_start_;
    tt->array_n_offset = (char *) &combine2_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine2->name - (char *) _combine2;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine2->is_input - (char *) _combine2;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine2->weight - (char *) _combine2;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'combine3'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine3");
    tt->descr = tdrpStrDup("3 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine3 - &_start_;
    tt->array_n_offset = (char *) &combine3_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine3->name - (char *) _combine3;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine3->is_input - (char *) _combine3;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine3->weight - (char *) _combine3;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'combine4'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine4");
    tt->descr = tdrpStrDup("4 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine4 - &_start_;
    tt->array_n_offset = (char *) &combine4_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine4->name - (char *) _combine4;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine4->is_input - (char *) _combine4;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine4->weight - (char *) _combine4;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'combine5'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine5");
    tt->descr = tdrpStrDup("5 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine5 - &_start_;
    tt->array_n_offset = (char *) &combine5_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine5->name - (char *) _combine5;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine5->is_input - (char *) _combine5;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine5->weight - (char *) _combine5;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'combine6'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine6");
    tt->descr = tdrpStrDup("6 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine6 - &_start_;
    tt->array_n_offset = (char *) &combine6_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine6->name - (char *) _combine6;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine6->is_input - (char *) _combine6;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine6->weight - (char *) _combine6;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'combine7'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine7");
    tt->descr = tdrpStrDup("7 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine7 - &_start_;
    tt->array_n_offset = (char *) &combine7_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine7->name - (char *) _combine7;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine7->is_input - (char *) _combine7;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine7->weight - (char *) _combine7;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'combine8'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine8");
    tt->descr = tdrpStrDup("8 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine8 - &_start_;
    tt->array_n_offset = (char *) &combine8_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine8->name - (char *) _combine8;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine8->is_input - (char *) _combine8;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine8->weight - (char *) _combine8;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'combine9'
    // ctype is '_combine_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("combine9");
    tt->descr = tdrpStrDup("9 combine params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_combine9 - &_start_;
    tt->array_n_offset = (char *) &combine9_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(combine_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("combine_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_combine9->name - (char *) _combine9;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_input");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_combine9->is_input - (char *) _combine9;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weight");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_combine9->weight - (char *) _combine9;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'mask_range0'
    // ctype is '_mask_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("mask_range0");
    tt->descr = tdrpStrDup("0 mask_range params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_mask_range0 - &_start_;
    tt->array_n_offset = (char *) &mask_range0_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(mask_range_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("mask_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("mask_min");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_mask_range0->mask_min - (char *) _mask_range0;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("mask_max");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_mask_range0->mask_max - (char *) _mask_range0;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'mask_range1'
    // ctype is '_mask_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("mask_range1");
    tt->descr = tdrpStrDup("1 mask_range params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_mask_range1 - &_start_;
    tt->array_n_offset = (char *) &mask_range1_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(mask_range_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("mask_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("mask_min");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_mask_range1->mask_min - (char *) _mask_range1;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("mask_max");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_mask_range1->mask_max - (char *) _mask_range1;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'mask_range2'
    // ctype is '_mask_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("mask_range2");
    tt->descr = tdrpStrDup("2 mask_range params");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_mask_range2 - &_start_;
    tt->array_n_offset = (char *) &mask_range2_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(mask_range_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("mask_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("mask_min");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_mask_range2->mask_min - (char *) _mask_range2;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("mask_max");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_mask_range2->mask_max - (char *) _mask_range2;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'strings0'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("strings0");
    tt->descr = tdrpStrDup("0 array of strings");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_strings0 - &_start_;
    tt->array_n_offset = (char *) &strings0_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'strings1'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("strings1");
    tt->descr = tdrpStrDup("1 array of strings");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_strings1 - &_start_;
    tt->array_n_offset = (char *) &strings1_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'strings2'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("strings2");
    tt->descr = tdrpStrDup("2 array of strings");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_strings2 - &_start_;
    tt->array_n_offset = (char *) &strings2_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'strings3'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("strings3");
    tt->descr = tdrpStrDup("3 array of strings");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_strings3 - &_start_;
    tt->array_n_offset = (char *) &strings3_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'strings4'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("strings4");
    tt->descr = tdrpStrDup("4 array of strings");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_strings4 - &_start_;
    tt->array_n_offset = (char *) &strings4_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
