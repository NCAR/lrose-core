/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// NcarPidParams.cc
//
// TDRP C++ code file for class 'NcarPidParams'.
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include <radar/NcarPidParams.hh>
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  NcarPidParams::NcarPidParams()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "NcarPidParams";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  NcarPidParams::NcarPidParams(const NcarPidParams& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "NcarPidParams";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  NcarPidParams::~NcarPidParams()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void NcarPidParams::operator=(const NcarPidParams& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int NcarPidParams::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int NcarPidParams::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool NcarPidParams::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int NcarPidParams::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int NcarPidParams::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int NcarPidParams::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void NcarPidParams::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void NcarPidParams::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int NcarPidParams::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int NcarPidParams::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void NcarPidParams::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void NcarPidParams::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int NcarPidParams::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int NcarPidParams::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void NcarPidParams::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("The NCAR PID method is based on a fuzzy logic approach.");
    tt->comment_text = tdrpStrDup("This is documented in the following reference: Cloud Microphysics Retrieval Using S-Band Dual-Polarization Radar Measurements: J. Vivekanandan, D. S. Zrnic, S. M. Ellis, R. Oye, A. V. Ryzhkov, and J. Straka. Bulletin of the American Meteorological Society, 1999");
    tt++;
    
    // Parameter 'PID_thresholds_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("PID_thresholds_file_path");
    tt->descr = tdrpStrDup("File path for fuzzy logic thresholds for PID.");
    tt->help = tdrpStrDup("This file contains the thresholds and weights for computing particle ID.");
    tt->val_offset = (char *) &PID_thresholds_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./pid_thresholds.nexrad");
    tt++;
    
    // Parameter 'PID_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_snr_threshold");
    tt->descr = tdrpStrDup("Minimum SNR for valid PID.");
    tt->help = tdrpStrDup("If the SNR at a gate is below this, the PID is censored.");
    tt->val_offset = (char *) &PID_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'PID_snr_upper_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_snr_upper_threshold");
    tt->descr = tdrpStrDup("Maximum SNR for valid PID.");
    tt->help = tdrpStrDup("If the SNR at a gate is above this value, the PID will be set to SATURATED_SNR = 18.");
    tt->val_offset = (char *) &PID_snr_upper_threshold - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'PID_min_valid_interest'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_min_valid_interest");
    tt->descr = tdrpStrDup("Minimum valid interest value for identifying a particle.");
    tt->help = tdrpStrDup("If the computed interest value is below this, the PID is set to missing.");
    tt->val_offset = (char *) &PID_min_valid_interest - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_DBZ'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_DBZ");
    tt->descr = tdrpStrDup("Option to filter DBZ with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_DBZ - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_DBZ_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_DBZ_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for DBZ - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_DBZ'");
    tt->val_offset = (char *) &PID_DBZ_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_ZDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_ZDR");
    tt->descr = tdrpStrDup("Option to filter ZDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_ZDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_ZDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_ZDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for ZDR - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_ZDR'");
    tt->val_offset = (char *) &PID_ZDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_RHOHV'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_RHOHV");
    tt->descr = tdrpStrDup("Option to filter RHOHV with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_RHOHV - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_RHOHV_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_RHOHV_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for RHOHV - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_RHOHV'");
    tt->val_offset = (char *) &PID_RHOHV_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_LDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_LDR");
    tt->descr = tdrpStrDup("Option to filter LDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_LDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_LDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_LDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for LDR - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_LDR'");
    tt->val_offset = (char *) &PID_LDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_replace_missing_LDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_replace_missing_LDR");
    tt->descr = tdrpStrDup("For PID, option to replace missing LDR values with a specified value.");
    tt->help = tdrpStrDup("When the SNR gets low, LDR is unreliable since there is not sufficient dynamic range to provide an accurate cross-polar power measurement. In these cases, it makes sense to replace LDR with a neutral value, such as 0.0, so that we do not reject gates at which valuable data is available.");
    tt->val_offset = (char *) &PID_replace_missing_LDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_LDR_replacement_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_LDR_replacement_value");
    tt->descr = tdrpStrDup("Value to which LDR will be set if missing.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &PID_LDR_replacement_value - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'PID_ngates_for_sdev'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_ngates_for_sdev");
    tt->descr = tdrpStrDup("Number of gates for computing standard deviations.");
    tt->help = tdrpStrDup("This applies to computing the standard deviation of zdr and phidp.");
    tt->val_offset = (char *) &PID_ngates_for_sdev - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'PID_output_particle_interest_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_output_particle_interest_fields");
    tt->descr = tdrpStrDup("Option to output the individual interest fields.");
    tt->help = tdrpStrDup("If TRUE, the interest field for each particle type will be written to the output FMQ, in addition to the list in 'output_fields'.");
    tt->val_offset = (char *) &PID_output_particle_interest_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_locate_melting_layer'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_locate_melting_layer");
    tt->descr = tdrpStrDup("Option to locate the melting layer.");
    tt->help = tdrpStrDup("If true, the melting layer will be located using the WET_SNOW category. In addition, the ML_INTEREST field will be computed. Otherwise it will be missing. Follows Giangrande et al. - Automatic Designation of the Melting Layer with Polarimitric Prototype of WSR-88D Radar - AMS JAMC, Vol47, 2008.");
    tt->val_offset = (char *) &PID_locate_melting_layer - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_melting_layer_percentile_for_bottom_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_melting_layer_percentile_for_bottom_limit");
    tt->descr = tdrpStrDup("Percentile value for estimating the bottom of the melting layer.");
    tt->help = tdrpStrDup("To locate the melting layer limits, we rank the heights of all gates containing WET_SNOW, from bottom to top. This is the percentile value for the bottom of the layer.");
    tt->val_offset = (char *) &PID_melting_layer_percentile_for_bottom_limit - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'PID_melting_layer_percentile_for_top_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_melting_layer_percentile_for_top_limit");
    tt->descr = tdrpStrDup("Percentile value for estimating the top of the melting layer.");
    tt->help = tdrpStrDup("To locate the melting layer limits, we rank the heights of all gates containing WET_SNOW, from bottom to top. This is the percentile value for the top of the layer.");
    tt->val_offset = (char *) &PID_melting_layer_percentile_for_top_limit - &_start_;
    tt->single_val.d = 75;
    tt++;
    
    // Parameter 'PID_melting_layer_write_results_to_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_melting_layer_write_results_to_spdb");
    tt->descr = tdrpStrDup("Option to save melting layer properties to spdb.");
    tt->help = tdrpStrDup("If true, the melting layer properties will be saved to SPDB using XML encoding. See 'melting_layer_spdb_output_url'");
    tt->val_offset = (char *) &PID_melting_layer_write_results_to_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_melting_layer_spdb_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("PID_melting_layer_spdb_output_url");
    tt->descr = tdrpStrDup("URL for writing melting layer results to SPDB XML.");
    tt->help = tdrpStrDup("For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir");
    tt->val_offset = (char *) &PID_melting_layer_spdb_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/spdb/melting_layer");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("SOUNDINGS FOR PID TEMPERATURES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'PID_use_soundings_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_use_soundings_from_spdb");
    tt->descr = tdrpStrDup("Option to read sounding data from SPDB.");
    tt->help = tdrpStrDup("If TRUE, the program will read the closest (in time) available sounding from an SPDB data base. The temperature profile from the sounding will be used to override the temperature profile in the PID thresholds config file");
    tt->val_offset = (char *) &PID_use_soundings_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_sounding_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_spdb_url");
    tt->descr = tdrpStrDup("SPDB URL for sounding data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &PID_sounding_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/soundings");
    tt++;
    
    // Parameter 'PID_sounding_search_time_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_search_time_margin_secs");
    tt->descr = tdrpStrDup("Time margin for retrieving sounding, in secs.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &PID_sounding_search_time_margin_secs - &_start_;
    tt->single_val.i = 86400;
    tt++;
    
    // Parameter 'PID_sounding_location_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_location_name");
    tt->descr = tdrpStrDup("Name of sounding location.");
    tt->help = tdrpStrDup("If set, we request a profile just for that sounding. If empty, all soundings in the data base are considered valid.");
    tt->val_offset = (char *) &PID_sounding_location_name - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'PID_sounding_check_pressure_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_check_pressure_range");
    tt->descr = tdrpStrDup("Option to check that pressure covers the required range.");
    tt->help = tdrpStrDup("If TRUE, we will check that pressure range in the sounding meets or exceeds the min and max specified.");
    tt->val_offset = (char *) &PID_sounding_check_pressure_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_sounding_required_pressure_range_hpa'
    // ctype is '_data_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_required_pressure_range_hpa");
    tt->descr = tdrpStrDup("Required pressure range for sounding to be valid (hPa)");
    tt->help = tdrpStrDup("This is used to provide a quality check on the sounding. If the pressure data does not fully cover this range, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &PID_sounding_required_pressure_range_hpa - &_start_;
    tt->struct_def.name = tdrpStrDup("data_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_val");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &PID_sounding_required_pressure_range_hpa.min_val - (char *) &PID_sounding_required_pressure_range_hpa;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_val");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &PID_sounding_required_pressure_range_hpa.max_val - (char *) &PID_sounding_required_pressure_range_hpa;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 300;
      tt->struct_vals[1].d = 950;
    tt++;
    
    // Parameter 'PID_sounding_check_height_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_check_height_range");
    tt->descr = tdrpStrDup("Option to check that height covers the required range.");
    tt->help = tdrpStrDup("If TRUE, we will check that height range in the sounding meets or exceeds the min and max specified.");
    tt->val_offset = (char *) &PID_sounding_check_height_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_sounding_required_height_range_m'
    // ctype is '_data_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_required_height_range_m");
    tt->descr = tdrpStrDup("Required height range for sounding to be valid (m)");
    tt->help = tdrpStrDup("This is used to provide a quality check on the sounding. If the height data does not fully cover this range, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &PID_sounding_required_height_range_m - &_start_;
    tt->struct_def.name = tdrpStrDup("data_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_val");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &PID_sounding_required_height_range_m.min_val - (char *) &PID_sounding_required_height_range_m;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_val");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &PID_sounding_required_height_range_m.max_val - (char *) &PID_sounding_required_height_range_m;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 500;
      tt->struct_vals[1].d = 15000;
    tt++;
    
    // Parameter 'PID_sounding_check_pressure_monotonically_decreasing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_check_pressure_monotonically_decreasing");
    tt->descr = tdrpStrDup("Option to check that pressure decreases monotonically.");
    tt->help = tdrpStrDup("If TRUE, we will check that pressure decreases monotonically. If not, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &PID_sounding_check_pressure_monotonically_decreasing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_sounding_height_correction_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_height_correction_km");
    tt->descr = tdrpStrDup("Correction to the heights read in with the sounding (km).");
    tt->help = tdrpStrDup("This correction is ADDED to the heights read in. So if the freezing level seems low, the correction should be positive. If the freezing level appears high, it should be negative.");
    tt->val_offset = (char *) &PID_sounding_height_correction_km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'PID_sounding_use_wet_bulb_temp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_sounding_use_wet_bulb_temp");
    tt->descr = tdrpStrDup("Option to use wet bulb temperature profile.");
    tt->help = tdrpStrDup("If TRUE, we use the wet bulb temperature profile from the sounding instead of the dry bulb. This is thought to more closely track the temperature of melting ice.");
    tt->val_offset = (char *) &PID_sounding_use_wet_bulb_temp - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
