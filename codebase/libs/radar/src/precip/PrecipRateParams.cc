/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// PrecipRateParams.cc
//
// TDRP C++ code file for class 'PrecipRateParams'.
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include <radar/PrecipRateParams.hh>
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  PrecipRateParams::PrecipRateParams()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "PrecipRateParams";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  PrecipRateParams::PrecipRateParams(const PrecipRateParams& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "PrecipRateParams";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  PrecipRateParams::~PrecipRateParams()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void PrecipRateParams::operator=(const PrecipRateParams& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int PrecipRateParams::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int PrecipRateParams::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool PrecipRateParams::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int PrecipRateParams::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int PrecipRateParams::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int PrecipRateParams::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void PrecipRateParams::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void PrecipRateParams::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int PrecipRateParams::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int PrecipRateParams::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void PrecipRateParams::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void PrecipRateParams::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int PrecipRateParams::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int PrecipRateParams::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void PrecipRateParams::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("The PrecipRate module estimates precip rate from dual polarization data.");
    tt->comment_text = tdrpStrDup("See NCAR_QPE.pdf.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("COMPUTING PRECIP RATE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'RATE_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_snr_threshold");
    tt->descr = tdrpStrDup("Minimum SNR for valid PRECIP.");
    tt->help = tdrpStrDup("If the SNR at a gate is below this, the PRECIP is censored.");
    tt->val_offset = (char *) &RATE_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'RATE_apply_median_filter_to_DBZ'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("RATE_apply_median_filter_to_DBZ");
    tt->descr = tdrpStrDup("Option to filter DBZ with median filter.");
    tt->help = tdrpStrDup("The filter is computed in rang..");
    tt->val_offset = (char *) &RATE_apply_median_filter_to_DBZ - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'RATE_DBZ_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("RATE_DBZ_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for DBZ - gates.");
    tt->help = tdrpStrDup("See 'RATE_apply_median_filter_to_DBZ'");
    tt->val_offset = (char *) &RATE_DBZ_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'RATE_apply_median_filter_to_ZDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("RATE_apply_median_filter_to_ZDR");
    tt->descr = tdrpStrDup("Option to filter ZDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &RATE_apply_median_filter_to_ZDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'RATE_ZDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("RATE_ZDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for ZDR - gates.");
    tt->help = tdrpStrDup("See 'PID_RATE_apply_median_filter_to_ZDR'");
    tt->val_offset = (char *) &RATE_ZDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'RATE_min_valid_rate'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_min_valid_rate");
    tt->descr = tdrpStrDup("Minimum valid precip rate (mm/hr).");
    tt->help = tdrpStrDup("If any computed rate is less than this value, it is set to 0.");
    tt->val_offset = (char *) &RATE_min_valid_rate - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'RATE_max_valid_rate'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_max_valid_rate");
    tt->descr = tdrpStrDup("Maximum valid precip rate (mm/hr).");
    tt->help = tdrpStrDup("If any computed rate exceeds this value, it is set to this max.");
    tt->val_offset = (char *) &RATE_max_valid_rate - &_start_;
    tt->single_val.d = 250;
    tt++;
    
    // Parameter 'RATE_max_valid_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_max_valid_dbz");
    tt->descr = tdrpStrDup("Maximum valid dbz for computing precip rate.");
    tt->help = tdrpStrDup("If any dbz exceeds this value, it is set to this max before use. This helps mitigate large DBZ values in hail.");
    tt->val_offset = (char *) &RATE_max_valid_dbz - &_start_;
    tt->single_val.d = 53;
    tt++;
    
    // Parameter 'RATE_brightband_dbz_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_brightband_dbz_correction");
    tt->descr = tdrpStrDup("Correction to be applied in brightband before computing precip rate.");
    tt->help = tdrpStrDup("This should be negative.");
    tt->val_offset = (char *) &RATE_brightband_dbz_correction - &_start_;
    tt->has_max = TRUE;
    tt->max_val.d = 0;
    tt->single_val.d = -10;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("PRECIP COEFFICIENTS");
    tt->comment_text = tdrpStrDup("Coefficients for the precip equations.");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("RATE_ZH");
    tt->comment_text = tdrpStrDup("RATE_ZH = zh_aa * (ZH ** zh_bb)");
    tt++;
    
    // Parameter 'RATE_zh_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_zh_aa");
    tt->descr = tdrpStrDup("Coefficient for RATE_ZH.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_zh_aa - &_start_;
    tt->single_val.d = 0.017;
    tt++;
    
    // Parameter 'RATE_zh_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_zh_bb");
    tt->descr = tdrpStrDup("Exponent for RATE_ZH.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_zh_bb - &_start_;
    tt->single_val.d = 0.714;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("RATE_SNOW_ZH");
    tt->comment_text = tdrpStrDup("RATE_SNOW_ZH = zh_aa_snow * (ZH ** zh_bb_snow)");
    tt++;
    
    // Parameter 'RATE_zh_aa_snow'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_zh_aa_snow");
    tt->descr = tdrpStrDup("Coefficient for RATE_ZH in SNOW.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_zh_aa_snow - &_start_;
    tt->single_val.d = 0.0365;
    tt++;
    
    // Parameter 'RATE_zh_bb_snow'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_zh_bb_snow");
    tt->descr = tdrpStrDup("Exponent for RATE_ZH in SNOW.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_zh_bb_snow - &_start_;
    tt->single_val.d = 0.625;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("RATE_Z_ZDR");
    tt->comment_text = tdrpStrDup("RATE_Z_ZDR = zzdr_aa * (ZH ** zzdr_bb) * (ZDR ** zzdr_cc)");
    tt++;
    
    // Parameter 'RATE_zzdr_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_zzdr_aa");
    tt->descr = tdrpStrDup("Coefficient for RATE_ZZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_zzdr_aa - &_start_;
    tt->single_val.d = 0.00684;
    tt++;
    
    // Parameter 'RATE_zzdr_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_zzdr_bb");
    tt->descr = tdrpStrDup("ZH exponent for RATE_ZZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_zzdr_bb - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'RATE_zzdr_cc'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_zzdr_cc");
    tt->descr = tdrpStrDup("ZDR exponent for RATE_ZZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_zzdr_cc - &_start_;
    tt->single_val.d = -4.86;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("RATE_KDP");
    tt->comment_text = tdrpStrDup("RATE_KDP = sign(KDP) * kdp_aa * (|KDP| ** kdp_bb)");
    tt++;
    
    // Parameter 'RATE_kdp_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_kdp_aa");
    tt->descr = tdrpStrDup("Coefficient for RATE_KDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_kdp_aa - &_start_;
    tt->single_val.d = 40.6;
    tt++;
    
    // Parameter 'RATE_kdp_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_kdp_bb");
    tt->descr = tdrpStrDup("Exponent for RATE_KDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_kdp_bb - &_start_;
    tt->single_val.d = 0.866;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("RATE_KDP_ZDR");
    tt->comment_text = tdrpStrDup("RATE_KDP_ZDR = sign(KDP) * kdpzdr_aa * (|KDP| ** kdpzdr_bb) * (ZDR ** kdpzdr_cc)");
    tt++;
    
    // Parameter 'RATE_kdpzdr_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_kdpzdr_aa");
    tt->descr = tdrpStrDup("Coefficient for RATE_KDP_ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_kdpzdr_aa - &_start_;
    tt->single_val.d = 136;
    tt++;
    
    // Parameter 'RATE_kdpzdr_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_kdpzdr_bb");
    tt->descr = tdrpStrDup("KDP exponent for RATE_KDP_ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_kdpzdr_bb - &_start_;
    tt->single_val.d = 0.968;
    tt++;
    
    // Parameter 'RATE_kdpzdr_cc'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_kdpzdr_cc");
    tt->descr = tdrpStrDup("ZDR exponent for RATE_KDP_ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RATE_kdpzdr_cc - &_start_;
    tt->single_val.d = -2.86;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("PRECIP RATE BASED ON PID");
    tt->comment_text = tdrpStrDup("The PID-based rate is a wieghted-average of the rates for the various precip types.\nThe weights are derived from the interest values for each PID particle type.\n\t  RATE_LIGHT_RAIN = RATE_ZH\n\t  RATE_MOD_RAIN = RATE_Z_ZDR\n\t  RATE_SNOW = RATE_ZH_SNOW\n\t  RATE_MIXED = RATE_ZH_MIXED\n\n\t  if (kdp > threshold && RATE_KDP is valid)\n\t    RATE_HVY_RAIN = RATE_KDP\n\t    RATE_HAIL = RATE_KDP\n\t  else\n\t    RATE_HVY_RAIN = RATE_ZZDR\n\t    RATE_HAIL = RATE_ZZDR\n\n\t  RATE = 0\n\t  RATE += RATE_LIGHT_RAIN * WT_LIGHT_RAIN\n\t  RATE += RATE_MOD_RAIN * WT_MOD_RAIN\n\t  RATE += RATE_HVY_RAIN * WT_HVY_RAIN\n\t  RATE += RATE_SNOW * WT_SNOW\n\t  RATE += RATE_MIXED * WT_MIXED\n\t  RATE += RATE_HAIL * WT_HAIL\n");
    tt++;
    
    // Parameter 'RATE_pid_rate_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_pid_rate_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_pid_rate_kdp_threshold - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("RATE_HYBRID");
    tt->comment_text = tdrpStrDup("The HYBRID rate is based on the PID and the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Hybrid et al, JTech, Vol 26, 2009, 2107 - 2122.\n\n\t  if hail or heavy rain\n\t    if KDP > threhsold and rateKDP is valid\n\t      use RATE_KDP\n\t    else\n\t      use RATE_KDP\n\t  else if snow/ice\n\t    use RATE_ZH_SNOW\n\t  else if mixed precip\n\t    use RATE_ZH_MIXED\n\t  else if rain or SLD\n\t    if dBZ > theshold and KDP > threhsold\n\t      if rateKDP is valid\n\t        use RATE_KDP\n\t      else\n\t        use RATE_ZZDR\n\t    else\n\t      if ZDR >= threshold\n\t        use RATE_Z\n\t      else\n\t        use RATE_ZZDR\n");
    tt++;
    
    // Parameter 'RATE_hybrid_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_hybrid_dbz_threshold");
    tt->descr = tdrpStrDup("Units are dBZ.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_hybrid_dbz_threshold - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'RATE_hybrid_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_hybrid_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_hybrid_kdp_threshold - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'RATE_hybrid_zdr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_hybrid_zdr_threshold");
    tt->descr = tdrpStrDup("Units are dB.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_hybrid_zdr_threshold - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("RATE_HIDRO");
    tt->comment_text = tdrpStrDup("The HIDRO rate is based on the CSU-HIDRO algorithm. See 'A New Dual-Polarization Radar Rainfall Algorithm: Application to Colorado Precipition Events', Cifelli et al, JTech, Vol 28, 2011, 352 - 364. NOTE - this algorithm is generally only applied to liquid and mixed-phase precip, so you need to run PID for this to work as intended.\n\t  For ice:\n\t    RATE_HIDRO = MISSING\n\t  For hail or mixed:\n\t    if KDP >= threshold and rateKdp is valid\n\t      RATE_HIDRO = RATE_KDP\n\t    else\n\t      RATE_HIDRO = RATE_ZR\n\t  For rain or sld:\n\t    if KDP >= threshold and DBZ >= threhold\n\t      if ZDR >= threshold and rateKdpZdr is valid\n\t        RATE_HIDRO = RATE_KDPZDR\n\t      else if rateKdp is valid\n\t        RATE_HIDRO = RATE_KDP\n\t      else\n\t        RATE_HIDRO = RATE_ZZDR\n\t    else\n\t      if ZDR >= threshold\n\t        RATE_HIDRO = RATE_Z\n\t      else\n\t        RATE_HIDRO = RATE_ZZDR\n");
    tt++;
    
    // Parameter 'RATE_hidro_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_hidro_dbz_threshold");
    tt->descr = tdrpStrDup("Units are dBZ.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_hidro_dbz_threshold - &_start_;
    tt->single_val.d = 38;
    tt++;
    
    // Parameter 'RATE_hidro_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_hidro_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_hidro_kdp_threshold - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'RATE_hidro_zdr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_hidro_zdr_threshold");
    tt->descr = tdrpStrDup("Units are dB.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_hidro_zdr_threshold - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("RATE_BRINGI");
    tt->comment_text = tdrpStrDup("The BRINGI rate is based on the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Bringi et al, JTech, Vol 26, 2009, 2107 - 2122.\n\t  if HAIL or RAIN/HAIL mixture and rateKdp is valid\n\t    RATE_BRINGI = RATE_KDP\n\t  else if dBZ > theshold and KDP > threhsold and rateKdp is valid\n\t    RATE_BRINGI = RATE_KDP\n\t  else\n\t    if ZDR >= threshold\n\t      RATE_BRINGI = RATE_ZZDR\n\t    else\n\t      RATE_BRINGI = RATE_Z\n");
    tt++;
    
    // Parameter 'RATE_bringi_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_bringi_dbz_threshold");
    tt->descr = tdrpStrDup("Units are dBZ.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_bringi_dbz_threshold - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'RATE_bringi_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_bringi_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_bringi_kdp_threshold - &_start_;
    tt->single_val.d = 0.15;
    tt++;
    
    // Parameter 'RATE_bringi_zdr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("RATE_bringi_zdr_threshold");
    tt->descr = tdrpStrDup("Units are dB.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &RATE_bringi_zdr_threshold - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
