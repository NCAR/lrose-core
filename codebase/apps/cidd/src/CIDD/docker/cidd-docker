#!/usr/bin/env bash

#
# version number for cidd-docker script
#

lrose_cidd_docker_version='0.0.1'

#
# cidd-docker
#
# helper / wrapper script for invoking cidd Docker image,
# setting up X11 and running cidd in specified directory
#

#
# CHANGELOG
#
# - 0.0.0: initial working functionality for macOS and Linux

_echo_version () {
  echo `basename $0` version $lrose_cidd_docker_version
}

_echo_help () {
  _echo_version
  echo "  first input, required: directory path from which to invoke cidd"
  echo "  second input, optional: version of cidd to run"
  echo "  e.g."
  echo "    "`basename $0` .
  echo "    "`basename $0` . 1.18
  echo
  echo "  For further details on running cidd w/ Docker:"
  echo "  https://github.com/NCAR/lrose-core/wiki/Docker"
  echo
}

if [[ "$1" == '-v' ]] || [[ "$1" == '--version' ]]; then
  _echo_version
  exit
fi

if [[ "$1" == '-h' ]] || [[ "$1" == '--help' ]]; then
  _echo_help
  exit
fi

docker -v > /dev/null
docker_exit_code=$?

if [[ $docker_exit_code != 0 ]]; then
  echo 'It appears that docker is not installed or in PATH'
  echo 'Please install docker or add it to PATH'
  exit $docker_exit_code
fi

if [[ "$@" = '' ]] ; then
  echo 'Please specify a params file for cidd'
  echo 'Run w/ -h or --help to see help information'
  exit 1
fi

cidd_params_file=$1

if [[ $cidd_params_file == ~* ]]; then
  #
  # replace tilde w/ $HOME
  #
  cidd_params_file=$(echo $cidd_params_file | sed s/./$HOME/1)
elif [[ $cidd_params_file != /* ]]; then
  #
  # prefix relative path w/ pwd
  #
  cidd_params_file=`pwd`/$cidd_params_file
fi

#
# verify that cidd_params_file exists, else exit 1
#

if [[ ! -e $cidd_params_file ]]; then
  echo "ERROR: $cidd_params_file does not exist"
  echo "Please specify a valid file"
  exit 1
fi

cidd_docker_image='cidd'

#
# use second argument as cidd version, set as Docker tag
#
if [ ! -z "$2" ]; then
  cidd_docker_image=$cidd_docker_image:$2
  echo "cidd version: $2"
else
  echo "cidd version: 1.20"
fi

#
# architecture-specific method to set `docker run` options
#
run_options () {
  lrose_uname=$(uname)
  if [[ $lrose_uname = 'Darwin' ]]; then
    lrose_host_ip=$(ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}' |head -1)

    #
    # handle case where XQuartz is not running on :0
    #
    lrose_display_number=`ps -e | grep 'Xquartz :\d' | grep -v bin\/xinit | awk '{ print substr($5,2); }'`
    #
    # if not set or empty, default to 0
    #
    [ -z "$lrose_display_number" ] && lrose_display_number='0'

    #
    # set DISPLAY to host-ip:display-number
    #
    echo "-e DISPLAY=$lrose_host_ip:$lrose_display_number"
  elif [[ $lrose_uname = 'Linux' ]]; then
    #
    # pass through DISPLAY, but specify X11 socket as shared volume
    #
    echo "-e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix"
  else
    echo "This platform is not supported by `basename $0`"
    exit 1
  fi
}

_echo_version

# set X resources

timestr=`date -u +%Y%m%d%H%M%S`
XResourcesFile=/tmp/XResources4CIDD.${timestr}
touch $XResourcesFile
echo "OpenWindows.MonospaceFont: 7x13" >> $XResourcesFile
echo "OpenWindows.RegularFont: 6x13" >> $XResourcesFile  
echo "OpenWindows.BoldFont: 6x13bold" >> $XResourcesFile
xrdb -nocpp -override $XResourcesFile
/bin/rm -f $XResourcesFile

if [ -e ~/.Xdefaults ]; then
  xrdb -nocpp -override ~/.Xdefaults
fi

# set the font path
# try various options because fonts are not always in the same place

xset fp= /usr/share/X11/fonts/misc/,/usr/share/X11/fonts/75dpi/,/usr/share/X11/fonts/100dpi/ >& /dev/null
xset fp= /usr/share/fonts/X11/misc/,/usr/share/fonts/X11/75dpi/,/usr/share/fonts/X11/100dpi/ >& /dev/null
xset fp= /usr/share/fonts/misc/,/usr/share/fonts/75dpi/,/usr/share/fonts/100dpi/ >& /dev/null
xset fp= /usr/X11R6/lib/X11/fonts/misc/,/usr/X11R6/lib/X11/fonts/75dpi/,/usr/X11R6/lib/X11/fonts/100dpi/ >& /dev/null

# run image

echo 1111111111111111111

echo docker run \
  -v $HOME/.Xauthority:/root/.Xauthority \
  $(run_options) \
  -p $cidd_params_file:/data \
  $cidd_docker_image /data

docker run \
  -v $HOME/.Xauthority:/root/.Xauthority \
  $(run_options) \
  -p $cidd_params_file:/data \
  $cidd_docker_image /data

