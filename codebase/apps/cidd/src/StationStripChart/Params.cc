// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
// ** Copyright UCAR (c) 1992 - 2017
// ** University Corporation for Atmospheric Research(UCAR)
// ** National Center for Atmospheric Research(NCAR)
// ** Boulder, Colorado, USA
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program StationStripChart
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Program name: StationStripChart");
    tt->comment_text = tdrpStrDup("StationStripChart displays a time-history of Surface Station/METAR data.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUG AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'units'
    // ctype is '_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("units");
    tt->descr = tdrpStrDup("Units to use for Display");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &units - &_start_;
    tt->enum_def.name = tdrpStrDup("units_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("METRIC");
      tt->enum_def.fields[0].val = METRIC;
      tt->enum_def.fields[1].name = tdrpStrDup("ENGLISH");
      tt->enum_def.fields[1].val = ENGLISH;
    tt->single_val.e = METRIC;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Generic");
    tt++;
    
    // Parameter 'use_localtime'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_localtime");
    tt->descr = tdrpStrDup("Use Local times, rather than UTC for all times");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &use_localtime - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'focus_lon'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("focus_lon");
    tt->descr = tdrpStrDup("Starting Focus longitude for Distance sorting.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &focus_lon - &_start_;
    tt->single_val.f = -104;
    tt++;
    
    // Parameter 'focus_lat'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("focus_lat");
    tt->descr = tdrpStrDup("Starting Focus latitude for Distance sorting.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &focus_lat - &_start_;
    tt->single_val.f = 40;
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, StationStripChart retrieves data every update_interval\nand renders that data, moving forward in time as time passes.\nIn ARCHIVE mode, the program starts up and remains at the archive_time.\nIn SLAVE mode, the program FOLLOWS CIDD shared memory commands .\n");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
      tt->enum_def.fields[2].name = tdrpStrDup("SLAVE");
      tt->enum_def.fields[2].val = SLAVE;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'archive_time'
    // ctype is '_archive_time_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("archive_time");
    tt->descr = tdrpStrDup("The display time for ARCHIVE mode");
    tt->help = tdrpStrDup("See mode");
    tt->val_offset = (char *) &archive_time - &_start_;
    tt->struct_def.name = tdrpStrDup("archive_time_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("year");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &archive_time.year - (char *) &archive_time;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("month");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &archive_time.month - (char *) &archive_time;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("day");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &archive_time.day - (char *) &archive_time;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("hour");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &archive_time.hour - (char *) &archive_time;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("min");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &archive_time.min - (char *) &archive_time;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("sec");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &archive_time.sec - (char *) &archive_time;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 2000;
      tt->struct_vals[1].i = 9;
      tt->struct_vals[2].i = 5;
      tt->struct_vals[3].i = 12;
      tt->struct_vals[4].i = 0;
      tt->struct_vals[5].i = 0;
    tt++;
    
    // Parameter 'cidd_shmem_key'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cidd_shmem_key");
    tt->descr = tdrpStrDup("The shared memory key for the CIDD coordinate struct.");
    tt->help = tdrpStrDup("When the user clicks in the CIDD main window, \nthe coordinate struct is updated with the click lat long.\nThe time value is used to drive StationStripChart in REALTIME mode.");
    tt->val_offset = (char *) &cidd_shmem_key - &_start_;
    tt->single_val.i = 61500;
    tt++;
    
    // Parameter 'update_interval_min'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("update_interval_min");
    tt->descr = tdrpStrDup("Interval at which to request new data (minutes)");
    tt->help = tdrpStrDup("This program will schedule updates on the even interval");
    tt->val_offset = (char *) &update_interval_min - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'seconds_delay'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("seconds_delay");
    tt->descr = tdrpStrDup("Seconds after the Update Interval to inititate data retrieval");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &seconds_delay - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 0;
    tt->max_val.i = 59;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_url");
    tt->descr = tdrpStrDup("URL for input SPDB data.");
    tt->help = tdrpStrDup("METAR data is stored in SPDB format at this URL.");
    tt->val_offset = (char *) &input_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/metar");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("STATION DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_display_stations'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_display_stations");
    tt->descr = tdrpStrDup("Max number of stations to display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_display_stations - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DISPLAY DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'window_label'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("window_label");
    tt->descr = tdrpStrDup("Label for window border");
    tt->help = tdrpStrDup("This label will normally appear in the top border of the display window.");
    tt->val_offset = (char *) &window_label - &_start_;
    tt->single_val.s = tdrpStrDup("Surface Station Time History");
    tt++;
    
    // Parameter 'window_height'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_height");
    tt->descr = tdrpStrDup("The startup height for the window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_height - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'window_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_width");
    tt->descr = tdrpStrDup("The startup width for the window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_width - &_start_;
    tt->single_val.i = 435;
    tt++;
    
    // Parameter 'bottom_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bottom_margin");
    tt->descr = tdrpStrDup("Width of bottom margin (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bottom_margin - &_start_;
    tt->single_val.i = 15;
    tt++;
    
    // Parameter 'trace_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("trace_line_width");
    tt->descr = tdrpStrDup("The width of the lines used for the plot traces.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &trace_line_width - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'right_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("right_margin");
    tt->descr = tdrpStrDup("Width of right margin (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &right_margin - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'plot_period_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("plot_period_secs");
    tt->descr = tdrpStrDup("The initial period for the plot - secs.");
    tt->help = tdrpStrDup("This is the initial time period for the plot in seconds. \n The scale of the plot (pixels/sec) =  window_width/plot_period_secs. If the window is resized, the plot period will change, keeping the pixels/sec scale constant. - If keep_period_fixed is TRUE the  plot period stays fixed and the pixels/sec varies.");
    tt->val_offset = (char *) &plot_period_secs - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 86400;
    tt++;
    
    // Parameter 'keep_period_fixed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("keep_period_fixed");
    tt->descr = tdrpStrDup("Do not expand the time range on window resize when true");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &keep_period_fixed - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'spare1_scale'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("spare1_scale");
    tt->descr = tdrpStrDup("Scale Spare1 values by this amount");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spare1_scale - &_start_;
    tt->single_val.f = 1;
    tt++;
    
    // Parameter 'spare1_bias'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("spare1_bias");
    tt->descr = tdrpStrDup("Bias Spare1 values by this amount - After scaling");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spare1_bias - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'spare2_scale'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("spare2_scale");
    tt->descr = tdrpStrDup("Scale Spare2 values by this amount");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spare2_scale - &_start_;
    tt->single_val.f = 1;
    tt++;
    
    // Parameter 'spare2_bias'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("spare2_bias");
    tt->descr = tdrpStrDup("Bias Spare2 values by this amount - After scaling");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spare2_bias - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'display_variable'
    // ctype is '_display_variables_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("display_variable");
    tt->descr = tdrpStrDup("List of Variables to Display");
    tt->help = tdrpStrDup("Choose from the field_name_t list above. The program will generate a menu with the fields listed");
    tt->array_offset = (char *) &_display_variable - &_start_;
    tt->array_n_offset = (char *) &display_variable_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(display_variables_t);
    tt->array_n = 16;
    tt->struct_def.name = tdrpStrDup("display_variables_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("field_name_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("field");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_display_variable->field - (char *) _display_variable;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("field_name_t");
        tt->struct_def.fields[0].enum_def.nfields = 16;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("RATE");
        tt->struct_def.fields[0].enum_def.fields[0].val = RATE;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("ACCUMULATION");
        tt->struct_def.fields[0].enum_def.fields[1].val = ACCUMULATION;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("CEILING");
        tt->struct_def.fields[0].enum_def.fields[2].val = CEILING;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("VISIBILITY");
        tt->struct_def.fields[0].enum_def.fields[3].val = VISIBILITY;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("FLIGHT_CAT");
        tt->struct_def.fields[0].enum_def.fields[4].val = FLIGHT_CAT;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("TEMPERATURE");
        tt->struct_def.fields[0].enum_def.fields[5].val = TEMPERATURE;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("HUMIDITY");
        tt->struct_def.fields[0].enum_def.fields[6].val = HUMIDITY;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("WIND_SPEED");
        tt->struct_def.fields[0].enum_def.fields[7].val = WIND_SPEED;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("WIND_DIRN");
        tt->struct_def.fields[0].enum_def.fields[8].val = WIND_DIRN;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("PRESSURE");
        tt->struct_def.fields[0].enum_def.fields[9].val = PRESSURE;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("ACCUMULATION2");
        tt->struct_def.fields[0].enum_def.fields[10].val = ACCUMULATION2;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("SPARE1");
        tt->struct_def.fields[0].enum_def.fields[11].val = SPARE1;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("SPARE2");
        tt->struct_def.fields[0].enum_def.fields[12].val = SPARE2;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("FZ_PRECIP");
        tt->struct_def.fields[0].enum_def.fields[13].val = FZ_PRECIP;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("DEWPT");
        tt->struct_def.fields[0].enum_def.fields[14].val = DEWPT;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("PRECIP_TYPE");
        tt->struct_def.fields[0].enum_def.fields[15].val = PRECIP_TYPE;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("label_str");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_display_variable->label_str - (char *) _display_variable;
    tt->n_struct_vals = 32;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = RATE;
      tt->struct_vals[1].s = tdrpStrDup("Precip Rate");
      tt->struct_vals[2].e = ACCUMULATION;
      tt->struct_vals[3].s = tdrpStrDup("Precip Accum");
      tt->struct_vals[4].e = CEILING;
      tt->struct_vals[5].s = tdrpStrDup("Ceiling");
      tt->struct_vals[6].e = VISIBILITY;
      tt->struct_vals[7].s = tdrpStrDup("Visibility");
      tt->struct_vals[8].e = FLIGHT_CAT;
      tt->struct_vals[9].s = tdrpStrDup("Flt Cat");
      tt->struct_vals[10].e = TEMPERATURE;
      tt->struct_vals[11].s = tdrpStrDup("Temperature");
      tt->struct_vals[12].e = HUMIDITY;
      tt->struct_vals[13].s = tdrpStrDup("Humidity");
      tt->struct_vals[14].e = DEWPT;
      tt->struct_vals[15].s = tdrpStrDup("Dew Point");
      tt->struct_vals[16].e = WIND_SPEED;
      tt->struct_vals[17].s = tdrpStrDup("Wind Speed");
      tt->struct_vals[18].e = WIND_DIRN;
      tt->struct_vals[19].s = tdrpStrDup("Wind Direction");
      tt->struct_vals[20].e = PRESSURE;
      tt->struct_vals[21].s = tdrpStrDup("Barometer");
      tt->struct_vals[22].e = ACCUMULATION2;
      tt->struct_vals[23].s = tdrpStrDup("12 Hr Accum");
      tt->struct_vals[24].e = SPARE1;
      tt->struct_vals[25].s = tdrpStrDup("Probe Frequency");
      tt->struct_vals[26].e = SPARE2;
      tt->struct_vals[27].s = tdrpStrDup("Icing Rate");
      tt->struct_vals[28].e = FZ_PRECIP;
      tt->struct_vals[29].s = tdrpStrDup("Freezing Precip");
      tt->struct_vals[30].e = PRECIP_TYPE;
      tt->struct_vals[31].s = tdrpStrDup("Precip Type");
    tt++;
    
    // Parameter 'starting_menu_selection'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("starting_menu_selection");
    tt->descr = tdrpStrDup("Which Menu Button to activate on startup.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &starting_menu_selection - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'foreground_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("foreground_color");
    tt->descr = tdrpStrDup("Color of the foreground in the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &foreground_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("background_color");
    tt->descr = tdrpStrDup("Color of the background in the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &background_color - &_start_;
    tt->single_val.s = tdrpStrDup("black");
    tt++;
    
    // Parameter 'now_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("now_color");
    tt->descr = tdrpStrDup("Color for the NOW line on the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &now_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("font_name");
    tt->descr = tdrpStrDup("Name of font for the text on the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &font_name - &_start_;
    tt->single_val.s = tdrpStrDup("6x13");
    tt++;
    
    // Parameter 'min_ceiling_range'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("min_ceiling_range");
    tt->descr = tdrpStrDup("Minimum range for ceiling plot.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &min_ceiling_range - &_start_;
    tt->single_val.f = 20;
    tt++;
    
    // Parameter 'min_prate_range'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("min_prate_range");
    tt->descr = tdrpStrDup("Minimum Precip Rate scale range mm/hr");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &min_prate_range - &_start_;
    tt->single_val.f = 5;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("Frozen Precip  CATEGORY ");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'no_fzra_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("no_fzra_color");
    tt->descr = tdrpStrDup("Color for No Frozen Precip.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &no_fzra_color - &_start_;
    tt->single_val.s = tdrpStrDup("dark green");
    tt++;
    
    // Parameter 'fzfg_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fzfg_color");
    tt->descr = tdrpStrDup("Color for Frozen FOG.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fzfg_color - &_start_;
    tt->single_val.s = tdrpStrDup("burlywood");
    tt++;
    
    // Parameter 'frost_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("frost_color");
    tt->descr = tdrpStrDup("Color for FROST");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &frost_color - &_start_;
    tt->single_val.s = tdrpStrDup("peru");
    tt++;
    
    // Parameter 'lt_fzdz_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("lt_fzdz_color");
    tt->descr = tdrpStrDup("Color for -FZDZ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lt_fzdz_color - &_start_;
    tt->single_val.s = tdrpStrDup("LightSkyBlue");
    tt++;
    
    // Parameter 'fzdz_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fzdz_color");
    tt->descr = tdrpStrDup("Color for FZDZ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fzdz_color - &_start_;
    tt->single_val.s = tdrpStrDup("Royal Blue");
    tt++;
    
    // Parameter 'hv_fzdz_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hv_fzdz_color");
    tt->descr = tdrpStrDup("Color for +FZDZ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hv_fzdz_color - &_start_;
    tt->single_val.s = tdrpStrDup("Dark Blue");
    tt++;
    
    // Parameter 'lt_fzra_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("lt_fzra_color");
    tt->descr = tdrpStrDup("Color for -FZRA");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lt_fzra_color - &_start_;
    tt->single_val.s = tdrpStrDup("gold");
    tt++;
    
    // Parameter 'fzra_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fzra_color");
    tt->descr = tdrpStrDup("Color for FZRA");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fzra_color - &_start_;
    tt->single_val.s = tdrpStrDup("plum");
    tt++;
    
    // Parameter 'hv_fzra_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hv_fzra_color");
    tt->descr = tdrpStrDup("Color for +FZRA");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hv_fzra_color - &_start_;
    tt->single_val.s = tdrpStrDup("magenta");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("RAIN and SNOW TYPES ");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'ts_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ts_color");
    tt->descr = tdrpStrDup("Color for TS");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ts_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'dz_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dz_color");
    tt->descr = tdrpStrDup("Color for DZ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dz_color - &_start_;
    tt->single_val.s = tdrpStrDup("DarkOliveGreen");
    tt++;
    
    // Parameter 'fg_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fg_color");
    tt->descr = tdrpStrDup("Color for FG");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fg_color - &_start_;
    tt->single_val.s = tdrpStrDup("Grey");
    tt++;
    
    // Parameter 'hz_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hz_color");
    tt->descr = tdrpStrDup("Color for HZ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hz_color - &_start_;
    tt->single_val.s = tdrpStrDup("DimGrey");
    tt++;
    
    // Parameter 'up_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("up_color");
    tt->descr = tdrpStrDup("Color for UP");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &up_color - &_start_;
    tt->single_val.s = tdrpStrDup("RosyBrown");
    tt++;
    
    // Parameter 'lt_ra_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("lt_ra_color");
    tt->descr = tdrpStrDup("Color for -RA");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lt_ra_color - &_start_;
    tt->single_val.s = tdrpStrDup("DarkGreen");
    tt++;
    
    // Parameter 'ra_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ra_color");
    tt->descr = tdrpStrDup("Color for RA");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ra_color - &_start_;
    tt->single_val.s = tdrpStrDup("LimeGreen");
    tt++;
    
    // Parameter 'hv_ra_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hv_ra_color");
    tt->descr = tdrpStrDup("Color for +RA");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hv_ra_color - &_start_;
    tt->single_val.s = tdrpStrDup("GreenYellow");
    tt++;
    
    // Parameter 'lt_sn_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("lt_sn_color");
    tt->descr = tdrpStrDup("Color for -SN");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lt_sn_color - &_start_;
    tt->single_val.s = tdrpStrDup("skyblue1");
    tt++;
    
    // Parameter 'sn_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sn_color");
    tt->descr = tdrpStrDup("Color for SN");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sn_color - &_start_;
    tt->single_val.s = tdrpStrDup("deepskyblue1");
    tt++;
    
    // Parameter 'hv_sn_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hv_sn_color");
    tt->descr = tdrpStrDup("Color for +SN");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hv_sn_color - &_start_;
    tt->single_val.s = tdrpStrDup("royalblue");
    tt++;
    
    // Parameter 'pe_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("pe_color");
    tt->descr = tdrpStrDup("Color for PE");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &pe_color - &_start_;
    tt->single_val.s = tdrpStrDup("blue");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("FLIGHT CATEGORY AND SKY OBSCURATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'flight_category'
    // ctype is '_flight_category_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("flight_category");
    tt->descr = tdrpStrDup("Array of flight category parameters.");
    tt->help = tdrpStrDup("The flight category at a station will be computed using the aeiling (ft) and visibility (km) thresholds. If both values exceed the threshold, the flight category will be equal to or greater that the specified category.");
    tt->array_offset = (char *) &_flight_category - &_start_;
    tt->array_n_offset = (char *) &flight_category_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(flight_category_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("flight_category_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("flight_category_label_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("label");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_flight_category->label - (char *) _flight_category;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("flight_category_label_t");
        tt->struct_def.fields[0].enum_def.nfields = 3;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("VFR");
        tt->struct_def.fields[0].enum_def.fields[0].val = VFR;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("MVFR");
        tt->struct_def.fields[0].enum_def.fields[1].val = MVFR;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("IFR");
        tt->struct_def.fields[0].enum_def.fields[2].val = IFR;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("label_str");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_flight_category->label_str - (char *) _flight_category;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_flight_category->color - (char *) _flight_category;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("ceiling_threshold");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_flight_category->ceiling_threshold - (char *) _flight_category;
      tt->struct_def.fields[4].ftype = tdrpStrDup("float");
      tt->struct_def.fields[4].fname = tdrpStrDup("visibility_threshold");
      tt->struct_def.fields[4].ptype = FLOAT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_flight_category->visibility_threshold - (char *) _flight_category;
    tt->n_struct_vals = 15;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = VFR;
      tt->struct_vals[1].s = tdrpStrDup("VFR");
      tt->struct_vals[2].s = tdrpStrDup("seagreen");
      tt->struct_vals[3].f = 1500;
      tt->struct_vals[4].f = 5;
      tt->struct_vals[5].e = MVFR;
      tt->struct_vals[6].s = tdrpStrDup("MVFR");
      tt->struct_vals[7].s = tdrpStrDup("blue");
      tt->struct_vals[8].f = 500;
      tt->struct_vals[9].f = 1.6;
      tt->struct_vals[10].e = IFR;
      tt->struct_vals[11].s = tdrpStrDup("IFR");
      tt->struct_vals[12].s = tdrpStrDup("orange");
      tt->struct_vals[13].f = 0;
      tt->struct_vals[14].f = 0;
    tt++;
    
    // Parameter 'flight_category_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("flight_category_line_width");
    tt->descr = tdrpStrDup("The width of the lines used for flight category.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &flight_category_line_width - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("HTML OUTPUT FOR INDIVIDUAL FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_html'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_html");
    tt->descr = tdrpStrDup("Option to generate html output.");
    tt->help = tdrpStrDup("If true, images suitable for html pages are generated for each station and each field. See stations[] and xxxx_html_image.");
    tt->val_offset = (char *) &output_html - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'show_window'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("show_window");
    tt->descr = tdrpStrDup(" - For HTML Mode. Option to run unmapped (off screen).");
    tt->help = tdrpStrDup("If false, the program should run hidden.");
    tt->val_offset = (char *) &show_window - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'write_ldata_info'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_ldata_info");
    tt->descr = tdrpStrDup(" - For HTML Mode. Option to output ldata info");
    tt->help = tdrpStrDup("Use the Ldata FMQ, as the images come out fast.");
    tt->val_offset = (char *) &write_ldata_info - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'html_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("html_output_dir");
    tt->descr = tdrpStrDup("Where image files will be left.");
    tt->help = tdrpStrDup("This directory should be scrubbed by some mechanism.");
    tt->val_offset = (char *) &html_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp");
    tt++;
    
    // Parameter 'filename_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("filename_prefix");
    tt->descr = tdrpStrDup("Html mode file name prefix string - strftime(3) format");
    tt->help = tdrpStrDup("Often: %Y%m%d%H%M");
    tt->val_offset = (char *) &filename_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'image_output_type'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("image_output_type");
    tt->descr = tdrpStrDup("Image Output type. Imlib Library supported formats");
    tt->help = tdrpStrDup("Legal image types are png,tiff,jpg,pgm,ppm,eim");
    tt->val_offset = (char *) &image_output_type - &_start_;
    tt->single_val.s = tdrpStrDup("png");
    tt++;
    
    // Parameter 'html_image_post_process_script'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("html_image_post_process_script");
    tt->descr = tdrpStrDup("Conversion script to post process the ouput imagesNote: StationStripChart calls this script and passes the name of theoutput image as the first argument");
    tt->help = tdrpStrDup("  Images are output in the chosen format. The script often copies the image onto a web server and then removes the local copy.");
    tt->val_offset = (char *) &html_image_post_process_script - &_start_;
    tt->single_val.s = tdrpStrDup("ls -l");
    tt++;
    
    // Parameter 'post_process_timeout'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("post_process_timeout");
    tt->descr = tdrpStrDup("Timeout (secs) for post processing script to prevent hanging.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &post_process_timeout - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'stations'
    // ctype is '_station_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("stations");
    tt->descr = tdrpStrDup("Information for each station to be displayed.");
    tt->help = tdrpStrDup("The name must be a 4 character ID of the Surface station Set fz_precip_field to a data field which, when set, indicate that  freezing precip indicator bits are valid in the data for this stationThis is used to prevent false negative indications.");
    tt->array_offset = (char *) &_stations - &_start_;
    tt->array_n_offset = (char *) &stations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(station_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("station_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("menu_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_stations->menu_name - (char *) _stations;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_stations->name - (char *) _stations;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_stations->color - (char *) _stations;
      tt->struct_def.fields[3].ftype = tdrpStrDup("field_name_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("fz_precip_field");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_stations->fz_precip_field - (char *) _stations;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("field_name_t");
        tt->struct_def.fields[3].enum_def.nfields = 16;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("RATE");
        tt->struct_def.fields[3].enum_def.fields[0].val = RATE;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("ACCUMULATION");
        tt->struct_def.fields[3].enum_def.fields[1].val = ACCUMULATION;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("CEILING");
        tt->struct_def.fields[3].enum_def.fields[2].val = CEILING;
        tt->struct_def.fields[3].enum_def.fields[3].name = tdrpStrDup("VISIBILITY");
        tt->struct_def.fields[3].enum_def.fields[3].val = VISIBILITY;
        tt->struct_def.fields[3].enum_def.fields[4].name = tdrpStrDup("FLIGHT_CAT");
        tt->struct_def.fields[3].enum_def.fields[4].val = FLIGHT_CAT;
        tt->struct_def.fields[3].enum_def.fields[5].name = tdrpStrDup("TEMPERATURE");
        tt->struct_def.fields[3].enum_def.fields[5].val = TEMPERATURE;
        tt->struct_def.fields[3].enum_def.fields[6].name = tdrpStrDup("HUMIDITY");
        tt->struct_def.fields[3].enum_def.fields[6].val = HUMIDITY;
        tt->struct_def.fields[3].enum_def.fields[7].name = tdrpStrDup("WIND_SPEED");
        tt->struct_def.fields[3].enum_def.fields[7].val = WIND_SPEED;
        tt->struct_def.fields[3].enum_def.fields[8].name = tdrpStrDup("WIND_DIRN");
        tt->struct_def.fields[3].enum_def.fields[8].val = WIND_DIRN;
        tt->struct_def.fields[3].enum_def.fields[9].name = tdrpStrDup("PRESSURE");
        tt->struct_def.fields[3].enum_def.fields[9].val = PRESSURE;
        tt->struct_def.fields[3].enum_def.fields[10].name = tdrpStrDup("ACCUMULATION2");
        tt->struct_def.fields[3].enum_def.fields[10].val = ACCUMULATION2;
        tt->struct_def.fields[3].enum_def.fields[11].name = tdrpStrDup("SPARE1");
        tt->struct_def.fields[3].enum_def.fields[11].val = SPARE1;
        tt->struct_def.fields[3].enum_def.fields[12].name = tdrpStrDup("SPARE2");
        tt->struct_def.fields[3].enum_def.fields[12].val = SPARE2;
        tt->struct_def.fields[3].enum_def.fields[13].name = tdrpStrDup("FZ_PRECIP");
        tt->struct_def.fields[3].enum_def.fields[13].val = FZ_PRECIP;
        tt->struct_def.fields[3].enum_def.fields[14].name = tdrpStrDup("DEWPT");
        tt->struct_def.fields[3].enum_def.fields[14].val = DEWPT;
        tt->struct_def.fields[3].enum_def.fields[15].name = tdrpStrDup("PRECIP_TYPE");
        tt->struct_def.fields[3].enum_def.fields[15].val = PRECIP_TYPE;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("Denver");
      tt->struct_vals[1].s = tdrpStrDup("KDEN");
      tt->struct_vals[2].s = tdrpStrDup("green");
      tt->struct_vals[3].e = SPARE2;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
