// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
// ** Copyright UCAR (c) 1992 - 2017
// ** University Corporation for Atmospheric Research(UCAR)
// ** National Center for Atmospheric Research(NCAR)
// ** Boulder, Colorado, USA
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program SoundingChart
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("SoundingChart is a program that works\nwith CIDD to plot sounding data.\nNiles Oien and Frank Hage February 2004.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("Window Attributes");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'window_height'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_height");
    tt->descr = tdrpStrDup("Default Window Height");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_height - &_start_;
    tt->single_val.i = 500;
    tt++;
    
    // Parameter 'window_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_width");
    tt->descr = tdrpStrDup("Default Window Width");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_width - &_start_;
    tt->single_val.i = 500;
    tt++;
    
    // Parameter 'window_title'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("window_title");
    tt->descr = tdrpStrDup("Window is labeled with this  Text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_title - &_start_;
    tt->single_val.s = tdrpStrDup("Sounding - Model Sounding Time Series Plot");
    tt++;
    
    // Parameter 'foreground_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("foreground_color");
    tt->descr = tdrpStrDup("Foreground Color - Used for Axes, labels");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &foreground_color - &_start_;
    tt->single_val.s = tdrpStrDup("White");
    tt++;
    
    // Parameter 'reference_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("reference_color");
    tt->descr = tdrpStrDup("Reference Line Color");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &reference_color - &_start_;
    tt->single_val.s = tdrpStrDup("Orange");
    tt++;
    
    // Parameter 'background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("background_color");
    tt->descr = tdrpStrDup("Background Color");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &background_color - &_start_;
    tt->single_val.s = tdrpStrDup("Black");
    tt++;
    
    // Parameter 'font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("font_name");
    tt->descr = tdrpStrDup("Name of font for the text on the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &font_name - &_start_;
    tt->single_val.s = tdrpStrDup("6x13");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("USER INTERFACE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_cidd_time'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_cidd_time");
    tt->descr = tdrpStrDup("Use Cidd time");
    tt->help = tdrpStrDup("Use times from Cidd to retrieve data");
    tt->val_offset = (char *) &use_cidd_time - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'mouse_button'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("mouse_button");
    tt->descr = tdrpStrDup("mouse button recognized");
    tt->help = tdrpStrDup("0 = any, 1 = left button, 2 = middle, 3 = right button.");
    tt->val_offset = (char *) &mouse_button - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'sleep_msecs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sleep_msecs");
    tt->descr = tdrpStrDup("sleep milli-seconds");
    tt->help = tdrpStrDup("Number of milli-seconds to sleep between checks for mouse clicks.");
    tt->val_offset = (char *) &sleep_msecs - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 20;
    tt->single_val.i = 250;
    tt++;
    
    // Parameter 'auto_click_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("auto_click_interval");
    tt->descr = tdrpStrDup("Automatic click interval - secs");
    tt->help = tdrpStrDup("Number of seconds between automatic clicks.  If the user hasn't clicked anywhere after this number of seconds, we will simulate a user click in the same place as before and will update the information.  If <= 0, no automatic updates of the display are done.");
    tt->val_offset = (char *) &auto_click_interval - &_start_;
    tt->single_val.i = 60;
    tt++;
    
    // Parameter 'startup_location'
    // ctype is '_origin_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("startup_location");
    tt->descr = tdrpStrDup("startup click location");
    tt->help = tdrpStrDup("Lat/lon position to display if the user hasn't clicked on a location.");
    tt->val_offset = (char *) &startup_location - &_start_;
    tt->struct_def.name = tdrpStrDup("origin_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("lat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &startup_location.lat - (char *) &startup_location;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &startup_location.lon - (char *) &startup_location;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'click_point_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("click_point_url");
    tt->descr = tdrpStrDup("SPDB URL to Click point reference markers");
    tt->help = tdrpStrDup("This Url is used to ourput click points for plotting on CIDD");
    tt->val_offset = (char *) &click_point_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/sounding_click_point");
    tt++;
    
    // Parameter 'click_point_label'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("click_point_label");
    tt->descr = tdrpStrDup("Label to use for SPDB data base and invalidating CIDD data");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &click_point_label - &_start_;
    tt->single_val.s = tdrpStrDup("Click Point");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("Plot Parameters ");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'left_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("left_margin");
    tt->descr = tdrpStrDup("Size of Left Margin in Pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &left_margin - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'right_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("right_margin");
    tt->descr = tdrpStrDup("Size of Right Margin in Pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &right_margin - &_start_;
    tt->single_val.i = 40;
    tt++;
    
    // Parameter 'top_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("top_margin");
    tt->descr = tdrpStrDup("Size of Top Margin in Pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &top_margin - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'bottom_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bottom_margin");
    tt->descr = tdrpStrDup("Size of Bottom Margin in Pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bottom_margin - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'min_height_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_height_km");
    tt->descr = tdrpStrDup("Min Height - Kilometers ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &min_height_km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'max_height_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_height_km");
    tt->descr = tdrpStrDup("Max Height - Kilometers ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_height_km - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'lookBack'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("lookBack");
    tt->descr = tdrpStrDup("Additional Time to look back before CIDD epoch-  hours");
    tt->help = tdrpStrDup("Temporal window is defined by this + CIDD's epoch + lookAhead.");
    tt->val_offset = (char *) &lookBack - &_start_;
    tt->single_val.d = 12;
    tt++;
    
    // Parameter 'lookAhead'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("lookAhead");
    tt->descr = tdrpStrDup("Additional Time to look  & plot ahead of CIDD's epoch- hours.");
    tt->help = tdrpStrDup("Temporal window is defined by this + CIDD's epoch + lookBack.");
    tt->val_offset = (char *) &lookAhead - &_start_;
    tt->single_val.d = 12;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("DATA TO DISPLAY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'coord_shmem_key'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("coord_shmem_key");
    tt->descr = tdrpStrDup("Shared memory status key");
    tt->help = tdrpStrDup("Id for the shared memory status segment used for communicating with the display.");
    tt->val_offset = (char *) &coord_shmem_key - &_start_;
    tt->single_val.i = 61500;
    tt++;
    
    // Parameter 'no_wait_for_shmem'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_wait_for_shmem");
    tt->descr = tdrpStrDup("Flag to not wait for display shared memory.");
    tt->help = tdrpStrDup("If set, this program will not wait for shared memory segment from the display to be set ready.");
    tt->val_offset = (char *) &no_wait_for_shmem - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_data_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_data_age");
    tt->descr = tdrpStrDup("Don't collect new data until last request was this old (secs)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_data_age - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'StationLocatorURL'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("StationLocatorURL");
    tt->descr = tdrpStrDup("URL for Locating Station ID's by Lat Lon ");
    tt->help = tdrpStrDup("Sounding Locations are looked up in this data base.");
    tt->val_offset = (char *) &StationLocatorURL - &_start_;
    tt->single_val.s = tdrpStrDup("http://www.rap.ucar.edu/maps/world_stations.dat");
    tt++;
    
    // Parameter 'useStationLocator'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("useStationLocator");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &useStationLocator - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'station_id'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("station_id");
    tt->descr = tdrpStrDup("If not using the StationLocator, request this station");
    tt->help = tdrpStrDup("Set to 0 to gather any/all soundings from the url");
    tt->val_offset = (char *) &station_id - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'max_station_dist_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_station_dist_km");
    tt->descr = tdrpStrDup("Maximum distance to a valid station");
    tt->help = tdrpStrDup("Locater will not return station further than this from the interest point");
    tt->val_offset = (char *) &max_station_dist_km - &_start_;
    tt->single_val.d = 3000;
    tt++;
    
    // Parameter 'cscale_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cscale_dir");
    tt->descr = tdrpStrDup("Comma delimited list of URL's to color scales");
    tt->help = tdrpStrDup("Directory containing Color scale files");
    tt->val_offset = (char *) &cscale_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".,http://www.rap.ucar.edu/colorscales");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("URLs for Sounding  Data ");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'doSoundings'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("doSoundings");
    tt->descr = tdrpStrDup("If set, actual soundings are collected and displayed.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &doSoundings - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'output_ref_points'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_ref_points");
    tt->descr = tdrpStrDup("If set, SPDB GenPt reference points are output.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_ref_points - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sound_winds_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sound_winds_on");
    tt->descr = tdrpStrDup("Toggle to Set Sounding winds to ON at startup");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sound_winds_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_3d_border'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_3d_border");
    tt->descr = tdrpStrDup("Toggle to Set Plotting 3d  to ON at startup");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_3d_border - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sound_lines_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sound_lines_on");
    tt->descr = tdrpStrDup("Toggle to Set Sounding Line plots to ON at startup");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sound_lines_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sound_color_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sound_color_on");
    tt->descr = tdrpStrDup("Toggle to Set Sounding Color Cells to ON at startup");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sound_color_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sound_winds_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sound_winds_color");
    tt->descr = tdrpStrDup("Color to render the Sounding Wind Barbs in");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sound_winds_color - &_start_;
    tt->single_val.s = tdrpStrDup("White");
    tt++;
    
    // Parameter 'sounding_width_minutes'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sounding_width_minutes");
    tt->descr = tdrpStrDup("Sounding will be rendered this many minutes wide");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sounding_width_minutes - &_start_;
    tt->single_val.d = 120;
    tt++;
    
    // Parameter 'vscale_type'
    // ctype is '_vscale_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("vscale_type");
    tt->descr = tdrpStrDup("Average & Plot data on this vertical scale");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vscale_type - &_start_;
    tt->enum_def.name = tdrpStrDup("vscale_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VSCALE_MB");
      tt->enum_def.fields[0].val = VSCALE_MB;
      tt->enum_def.fields[1].name = tdrpStrDup("VSCALE_KM");
      tt->enum_def.fields[1].val = VSCALE_KM;
    tt->single_val.e = VSCALE_MB;
    tt++;
    
    // Parameter 'sounding_interval_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sounding_interval_km");
    tt->descr = tdrpStrDup("Sounding values will be averaged into vertical bins of this size when vscale_type =  VSCALE_KM");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sounding_interval_km - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'sounding_interval_mbar'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sounding_interval_mbar");
    tt->descr = tdrpStrDup("Sounding values will be averaged into vertical bins of this sizewhen vscale_type =  VSCALE_MB");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sounding_interval_mbar - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'soundingSrc'
    // ctype is '_soundingSrc_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("soundingSrc");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Spdb Sounding or Sounding Plus data URL and field to display.\nTEMP - Temperature\nPRES - Pressure mb\nRH - Rel Humid %\nDEWPT - Dew point C\nW_WIND - Vertical Winds m/s\nW_SPD - Wind Speed m/s\nW_DIR - Wind Direction degrees\nASCEN_R - Asention Rate m/s\nSPARE1 - Spare value\nSPARE2 - Second SpareSPARE3 - 3rd Spare\n");
    tt->array_offset = (char *) &_soundingSrc - &_start_;
    tt->array_n_offset = (char *) &soundingSrc_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(soundingSrc_t);
    tt->array_n = 4;
    tt->struct_def.name = tdrpStrDup("soundingSrc_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("label");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_soundingSrc->label - (char *) _soundingSrc;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("url");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_soundingSrc->url - (char *) _soundingSrc;
      tt->struct_def.fields[2].ftype = tdrpStrDup("sounding_fld_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("field");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_soundingSrc->field - (char *) _soundingSrc;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("sounding_fld_t");
        tt->struct_def.fields[2].enum_def.nfields = 11;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("TEMP");
        tt->struct_def.fields[2].enum_def.fields[0].val = TEMP;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("RH");
        tt->struct_def.fields[2].enum_def.fields[1].val = RH;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("DEWPT");
        tt->struct_def.fields[2].enum_def.fields[2].val = DEWPT;
        tt->struct_def.fields[2].enum_def.fields[3].name = tdrpStrDup("W_WIND");
        tt->struct_def.fields[2].enum_def.fields[3].val = W_WIND;
        tt->struct_def.fields[2].enum_def.fields[4].name = tdrpStrDup("W_SPD");
        tt->struct_def.fields[2].enum_def.fields[4].val = W_SPD;
        tt->struct_def.fields[2].enum_def.fields[5].name = tdrpStrDup("W_DIR");
        tt->struct_def.fields[2].enum_def.fields[5].val = W_DIR;
        tt->struct_def.fields[2].enum_def.fields[6].name = tdrpStrDup("ASCEN_R");
        tt->struct_def.fields[2].enum_def.fields[6].val = ASCEN_R;
        tt->struct_def.fields[2].enum_def.fields[7].name = tdrpStrDup("PRESS");
        tt->struct_def.fields[2].enum_def.fields[7].val = PRESS;
        tt->struct_def.fields[2].enum_def.fields[8].name = tdrpStrDup("SPARE1");
        tt->struct_def.fields[2].enum_def.fields[8].val = SPARE1;
        tt->struct_def.fields[2].enum_def.fields[9].name = tdrpStrDup("SPARE2");
        tt->struct_def.fields[2].enum_def.fields[9].val = SPARE2;
        tt->struct_def.fields[2].enum_def.fields[10].name = tdrpStrDup("SPARE3");
        tt->struct_def.fields[2].enum_def.fields[10].val = SPARE3;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("cscale");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_soundingSrc->cscale - (char *) _soundingSrc;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_soundingSrc->units - (char *) _soundingSrc;
    tt->n_struct_vals = 20;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("TEMP");
      tt->struct_vals[1].s = tdrpStrDup("spdbp:://sydney::IHOP/spdb/RaobCollectives");
      tt->struct_vals[2].e = TEMP;
      tt->struct_vals[3].s = tdrpStrDup("deg_c.colors");
      tt->struct_vals[4].s = tdrpStrDup("C");
      tt->struct_vals[5].s = tdrpStrDup("RH");
      tt->struct_vals[6].s = tdrpStrDup("spdbp:://sydney::IHOP/spdb/RaobCollectives");
      tt->struct_vals[7].e = RH;
      tt->struct_vals[8].s = tdrpStrDup("humid.colors");
      tt->struct_vals[9].s = tdrpStrDup("%");
      tt->struct_vals[10].s = tdrpStrDup("CAPE");
      tt->struct_vals[11].s = tdrpStrDup("spdbp:://host::/dir");
      tt->struct_vals[12].e = SPARE1;
      tt->struct_vals[13].s = tdrpStrDup("cape.colors");
      tt->struct_vals[14].s = tdrpStrDup("Cape");
      tt->struct_vals[15].s = tdrpStrDup("CIN");
      tt->struct_vals[16].s = tdrpStrDup("spdbp:://host::/dir");
      tt->struct_vals[17].e = SPARE2;
      tt->struct_vals[18].s = tdrpStrDup("cin.colors");
      tt->struct_vals[19].s = tdrpStrDup("Cin");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("Gridded Data Params");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'grid_winds_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("grid_winds_on");
    tt->descr = tdrpStrDup("Toggle to Set Grid winds to ON at startup");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_winds_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'grid_lines_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("grid_lines_on");
    tt->descr = tdrpStrDup("Toggle to Set Grid Line Plots to ON at startup");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_lines_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'grid_color_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("grid_color_on");
    tt->descr = tdrpStrDup("Toggle to Set Grid Color Cells to ON at startup");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_color_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'grid_winds_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("grid_winds_color");
    tt->descr = tdrpStrDup("Color to render the Grid Wind Barbs in");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_winds_color - &_start_;
    tt->single_val.s = tdrpStrDup("White");
    tt++;
    
    // Parameter 'doMdv'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("doMdv");
    tt->descr = tdrpStrDup("If set, MDV soundings are collected and displayed.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &doMdv - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'GridSrc'
    // ctype is '_GridSrc_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("GridSrc");
    tt->descr = tdrpStrDup("List of Gridded/MDV data fields to display");
    tt->help = tdrpStrDup("label = Menu Label \nurl = MDV URL to data \nfieldname = Short Field name in Mdv File\nu_fname = Short Field name of E-W Wind componet\nv_fname = Short Field name of N-S Wind componet\ncscale = Name of Colorscale to use for drawing");
    tt->array_offset = (char *) &_GridSrc - &_start_;
    tt->array_n_offset = (char *) &GridSrc_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(GridSrc_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("GridSrc_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("label");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_GridSrc->label - (char *) _GridSrc;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("url");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_GridSrc->url - (char *) _GridSrc;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fieldname");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_GridSrc->fieldname - (char *) _GridSrc;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("u_fname");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_GridSrc->u_fname - (char *) _GridSrc;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("v_fname");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_GridSrc->v_fname - (char *) _GridSrc;
      tt->struct_def.fields[5].ftype = tdrpStrDup("string");
      tt->struct_def.fields[5].fname = tdrpStrDup("cscale");
      tt->struct_def.fields[5].ptype = STRING_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_GridSrc->cscale - (char *) _GridSrc;
      tt->struct_def.fields[6].ftype = tdrpStrDup("string");
      tt->struct_def.fields[6].fname = tdrpStrDup("units");
      tt->struct_def.fields[6].ptype = STRING_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_GridSrc->units - (char *) _GridSrc;
    tt->n_struct_vals = 14;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("Temperature");
      tt->struct_vals[1].s = tdrpStrDup("mdvp:://gauss.rap::/d3/data/IHOP/mdv/ruc10km/pressure/f00");
      tt->struct_vals[2].s = tdrpStrDup("TMP");
      tt->struct_vals[3].s = tdrpStrDup("UGRD");
      tt->struct_vals[4].s = tdrpStrDup("VGRD");
      tt->struct_vals[5].s = tdrpStrDup("temp.colors");
      tt->struct_vals[6].s = tdrpStrDup("C");
      tt->struct_vals[7].s = tdrpStrDup("RH");
      tt->struct_vals[8].s = tdrpStrDup("mdvp:://host::dir/dir");
      tt->struct_vals[9].s = tdrpStrDup("RH");
      tt->struct_vals[10].s = tdrpStrDup("UGRD");
      tt->struct_vals[11].s = tdrpStrDup("VGRD");
      tt->struct_vals[12].s = tdrpStrDup("humid.colors");
      tt->struct_vals[13].s = tdrpStrDup("%");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
