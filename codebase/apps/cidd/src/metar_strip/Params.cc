// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
// ** Copyright UCAR (c) 1992 - 2017
// ** University Corporation for Atmospheric Research(UCAR)
// ** National Center for Atmospheric Research(NCAR)
// ** Boulder, Colorado, USA
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program metar_strip
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Program name: metar_strip");
    tt->comment_text = tdrpStrDup("metar_strip displays a time-history of METAR data.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUG AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, metar_strip retrieves data every poll_interval_secs and renders that data. In FOLLOW_CIDD mode, metar_strip watches the CIDD coordinate shared memory segment, and follows that time. In ARCHIVE mode, the program starts up at the archive_time.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
      tt->enum_def.fields[2].name = tdrpStrDup("FOLLOW_CIDD");
      tt->enum_def.fields[2].val = FOLLOW_CIDD;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'archive_time'
    // ctype is '_archive_time_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("archive_time");
    tt->descr = tdrpStrDup("The display time for ARCHIVE mode");
    tt->help = tdrpStrDup("See mode");
    tt->val_offset = (char *) &archive_time - &_start_;
    tt->struct_def.name = tdrpStrDup("archive_time_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("year");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &archive_time.year - (char *) &archive_time;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("month");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &archive_time.month - (char *) &archive_time;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("day");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &archive_time.day - (char *) &archive_time;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("hour");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &archive_time.hour - (char *) &archive_time;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("min");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &archive_time.min - (char *) &archive_time;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("sec");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &archive_time.sec - (char *) &archive_time;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 2000;
      tt->struct_vals[1].i = 9;
      tt->struct_vals[2].i = 5;
      tt->struct_vals[3].i = 12;
      tt->struct_vals[4].i = 0;
      tt->struct_vals[5].i = 0;
    tt++;
    
    // Parameter 'cidd_shmem_key'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cidd_shmem_key");
    tt->descr = tdrpStrDup("The shared memory key for the CIDD coordinate struct.");
    tt->help = tdrpStrDup("When the user clicks in the CIDD main window, the coordinate struct is updated with the location and time. The time value is used to drive metar_strip in REALTIME mode.");
    tt->val_offset = (char *) &cidd_shmem_key - &_start_;
    tt->single_val.i = 61500;
    tt++;
    
    // Parameter 'poll_interval_sec'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("poll_interval_sec");
    tt->descr = tdrpStrDup("Interval at which to poll the main display for new data (sec).");
    tt->help = tdrpStrDup("At this interval, the shared memory segment on the main display is checked for changes.");
    tt->val_offset = (char *) &poll_interval_sec - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_url");
    tt->descr = tdrpStrDup("URL for input SPDB data.");
    tt->help = tdrpStrDup("METAR data is stored in SPDB format at this URL.");
    tt->val_offset = (char *) &input_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/metar");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("STATION DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'stations'
    // ctype is '_station_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("stations");
    tt->descr = tdrpStrDup("Information for each station to be displayed.");
    tt->help = tdrpStrDup("The xwd_path designates the file to be created when doing window dumps for HTML generation. The convert_command converts the xwd file to a suitable file for web content. If you add a special station called 'Follow mouse' the station name will be set to the closest station to the last mouse click in the main display.");
    tt->array_offset = (char *) &_stations - &_start_;
    tt->array_n_offset = (char *) &stations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(station_t);
    tt->array_n = 5;
    tt->struct_def.name = tdrpStrDup("station_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_stations->name - (char *) _stations;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_stations->color - (char *) _stations;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("xwd_path");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_stations->xwd_path - (char *) _stations;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("convert_command");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_stations->convert_command - (char *) _stations;
    tt->n_struct_vals = 20;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("RCTP");
      tt->struct_vals[1].s = tdrpStrDup("green");
      tt->struct_vals[2].s = tdrpStrDup("/tmp/RCTP.xwd");
      tt->struct_vals[3].s = tdrpStrDup("convert /tmp/RCTP.xwd /tmp/RCTP.gif");
      tt->struct_vals[4].s = tdrpStrDup("RCSS");
      tt->struct_vals[5].s = tdrpStrDup("green");
      tt->struct_vals[6].s = tdrpStrDup("/tmp/RCSS.xwd");
      tt->struct_vals[7].s = tdrpStrDup("convert /tmp/RCSS.xwd /tmp/RCSS.gif");
      tt->struct_vals[8].s = tdrpStrDup("RCKH");
      tt->struct_vals[9].s = tdrpStrDup("green");
      tt->struct_vals[10].s = tdrpStrDup("/tmp/RCKH.xwd");
      tt->struct_vals[11].s = tdrpStrDup("convert /tmp/RCKH.xwd /tmp/RCKH.gif");
      tt->struct_vals[12].s = tdrpStrDup("RCFN");
      tt->struct_vals[13].s = tdrpStrDup("green");
      tt->struct_vals[14].s = tdrpStrDup("/tmp/RCFN.xwd");
      tt->struct_vals[15].s = tdrpStrDup("convert /tmp/RCFN.xwd /tmp/RCFN.gif");
      tt->struct_vals[16].s = tdrpStrDup("Follow mouse");
      tt->struct_vals[17].s = tdrpStrDup("white");
      tt->struct_vals[18].s = tdrpStrDup("/tmp/FOLLOW.xwd");
      tt->struct_vals[19].s = tdrpStrDup("convert /tmp/FOLLOW.xwd /tmp/FOLLOW.gif");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("LOCATING STATIONS FROM MOUSE CLICKS");
    tt->comment_text = tdrpStrDup("See stations parameter");
    tt++;
    
    // Parameter 'station_location_file'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("station_location_file");
    tt->descr = tdrpStrDup("Station location file - gives Lat, Lon and Alt for each station.");
    tt->help = tdrpStrDup("Each line in file is of form 4_CHAR_ID, Lat, Lon, Alt. Set to 'none; if no file will be used.");
    tt->val_offset = (char *) &station_location_file - &_start_;
    tt->single_val.s = tdrpStrDup("none");
    tt++;
    
    // Parameter 'search_radius'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("search_radius");
    tt->descr = tdrpStrDup("Search radius for locating station - km.");
    tt->help = tdrpStrDup("See station_location_file.");
    tt->val_offset = (char *) &search_radius - &_start_;
    tt->single_val.d = 250;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("DISPLAY DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'window_label'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("window_label");
    tt->descr = tdrpStrDup("Label for window border");
    tt->help = tdrpStrDup("This label will normally appear in the top border of the display window.");
    tt->val_offset = (char *) &window_label - &_start_;
    tt->single_val.s = tdrpStrDup("METAR TIME HISTORY");
    tt++;
    
    // Parameter 'show_window'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("show_window");
    tt->descr = tdrpStrDup("Option to map the main window to the screen.");
    tt->help = tdrpStrDup("If false, the main window will not be mapped to the screen. In this case html content will be generated in the background.");
    tt->val_offset = (char *) &show_window - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'window_height'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_height");
    tt->descr = tdrpStrDup("The startup height for the window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_height - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'window_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_width");
    tt->descr = tdrpStrDup("The startup width for the window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_width - &_start_;
    tt->single_val.i = 435;
    tt++;
    
    // Parameter 'bottom_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bottom_margin");
    tt->descr = tdrpStrDup("Width of bottom margin (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bottom_margin - &_start_;
    tt->single_val.i = 15;
    tt++;
    
    // Parameter 'right_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("right_margin");
    tt->descr = tdrpStrDup("Width of right margin (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &right_margin - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'plot_period_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("plot_period_secs");
    tt->descr = tdrpStrDup("The initial period for the plot - secs.");
    tt->help = tdrpStrDup("This is the initial time period for the plot in seconds. If the window is resized, the plot period will change.");
    tt->val_offset = (char *) &plot_period_secs - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 86400;
    tt++;
    
    // Parameter 'startup_field'
    // ctype is '_field_name_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("startup_field");
    tt->descr = tdrpStrDup("The name of the field on which the display should start.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &startup_field - &_start_;
    tt->enum_def.name = tdrpStrDup("field_name_t");
    tt->enum_def.nfields = 8;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CEILING");
      tt->enum_def.fields[0].val = CEILING;
      tt->enum_def.fields[1].name = tdrpStrDup("VISIBILITY");
      tt->enum_def.fields[1].val = VISIBILITY;
      tt->enum_def.fields[2].name = tdrpStrDup("FLIGHT_CAT");
      tt->enum_def.fields[2].val = FLIGHT_CAT;
      tt->enum_def.fields[3].name = tdrpStrDup("TEMPERATURE");
      tt->enum_def.fields[3].val = TEMPERATURE;
      tt->enum_def.fields[4].name = tdrpStrDup("HUMIDITY");
      tt->enum_def.fields[4].val = HUMIDITY;
      tt->enum_def.fields[5].name = tdrpStrDup("WIND_SPEED");
      tt->enum_def.fields[5].val = WIND_SPEED;
      tt->enum_def.fields[6].name = tdrpStrDup("WIND_DIRN");
      tt->enum_def.fields[6].val = WIND_DIRN;
      tt->enum_def.fields[7].name = tdrpStrDup("PRESSURE");
      tt->enum_def.fields[7].val = PRESSURE;
    tt->single_val.e = TEMPERATURE;
    tt++;
    
    // Parameter 'foreground_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("foreground_color");
    tt->descr = tdrpStrDup("Color of the foreground in the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &foreground_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("background_color");
    tt->descr = tdrpStrDup("Color of the background in the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &background_color - &_start_;
    tt->single_val.s = tdrpStrDup("black");
    tt++;
    
    // Parameter 'now_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("now_color");
    tt->descr = tdrpStrDup("Color for the NOW line on the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &now_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("font_name");
    tt->descr = tdrpStrDup("Name of font for the text on the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &font_name - &_start_;
    tt->single_val.s = tdrpStrDup("6x13");
    tt++;
    
    // Parameter 'min_ceiling_range'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("min_ceiling_range");
    tt->descr = tdrpStrDup("Minimum range for ceiling plot.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &min_ceiling_range - &_start_;
    tt->single_val.f = 20;
    tt++;
    
    // Parameter 'trace_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("trace_line_width");
    tt->descr = tdrpStrDup("The width of the lines used for the plot traces.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &trace_line_width - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("FLIGHT CATEGORY AND SKY OBSCURATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_flight_category'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_flight_category");
    tt->descr = tdrpStrDup("Option to plot the flight category time history.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_flight_category - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'flight_category'
    // ctype is '_flight_category_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("flight_category");
    tt->descr = tdrpStrDup("Array of flight category parameters.");
    tt->help = tdrpStrDup("The flight category at a station will be computed using the ceiling (ft) and visibility (km) thresholds. If both values exceed the threshold, the flight category will be equal to or greater that the specified category.");
    tt->array_offset = (char *) &_flight_category - &_start_;
    tt->array_n_offset = (char *) &flight_category_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(flight_category_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("flight_category_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("flight_category_label_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("label");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_flight_category->label - (char *) _flight_category;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("flight_category_label_t");
        tt->struct_def.fields[0].enum_def.nfields = 3;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("VFR");
        tt->struct_def.fields[0].enum_def.fields[0].val = VFR;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("MVFR");
        tt->struct_def.fields[0].enum_def.fields[1].val = MVFR;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("IFR");
        tt->struct_def.fields[0].enum_def.fields[2].val = IFR;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("label_str");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_flight_category->label_str - (char *) _flight_category;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_flight_category->color - (char *) _flight_category;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("ceiling_threshold");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_flight_category->ceiling_threshold - (char *) _flight_category;
      tt->struct_def.fields[4].ftype = tdrpStrDup("float");
      tt->struct_def.fields[4].fname = tdrpStrDup("visibility_threshold");
      tt->struct_def.fields[4].ptype = FLOAT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_flight_category->visibility_threshold - (char *) _flight_category;
    tt->n_struct_vals = 15;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = VFR;
      tt->struct_vals[1].s = tdrpStrDup("VFR");
      tt->struct_vals[2].s = tdrpStrDup("seagreen");
      tt->struct_vals[3].f = 1500;
      tt->struct_vals[4].f = 5;
      tt->struct_vals[5].e = MVFR;
      tt->struct_vals[6].s = tdrpStrDup("MVFR");
      tt->struct_vals[7].s = tdrpStrDup("blue");
      tt->struct_vals[8].f = 500;
      tt->struct_vals[9].f = 1.6;
      tt->struct_vals[10].e = IFR;
      tt->struct_vals[11].s = tdrpStrDup("IFR");
      tt->struct_vals[12].s = tdrpStrDup("orange");
      tt->struct_vals[13].f = 0;
      tt->struct_vals[14].f = 0;
    tt++;
    
    // Parameter 'flight_category_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("flight_category_line_width");
    tt->descr = tdrpStrDup("The width of the lines used for flight category.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &flight_category_line_width - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("HTML OUTPUT FOR INDIVIDUAL FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_html'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_html");
    tt->descr = tdrpStrDup("Option to generate html output.");
    tt->help = tdrpStrDup("If true, images suitable for html pages are generated for each station and each field. See stations[] and xxxx_html_image.");
    tt->val_offset = (char *) &output_html - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ceiling_html'
    // ctype is '_html_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ceiling_html");
    tt->descr = tdrpStrDup("File path and conversion for ceiling HTML image");
    tt->help = tdrpStrDup("The xwd_path designates the file to be created when doing window dumps for HTML generation. The convert_command converts the xwd file to a suitable file for web content.");
    tt->val_offset = (char *) &ceiling_html - &_start_;
    tt->struct_def.name = tdrpStrDup("html_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xwd_path");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &ceiling_html.xwd_path - (char *) &ceiling_html;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("convert_command");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &ceiling_html.convert_command - (char *) &ceiling_html;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("ceiling.xwd");
      tt->struct_vals[1].s = tdrpStrDup("convert ceiling.xwd ceiling.gif");
    tt++;
    
    // Parameter 'visibility_html'
    // ctype is '_html_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("visibility_html");
    tt->descr = tdrpStrDup("File path and conversion for visibility HTML image");
    tt->help = tdrpStrDup("The xwd_path designates the file to be created when doing window dumps for HTML generation. The convert_command converts the xwd file to a suitable file for web content.");
    tt->val_offset = (char *) &visibility_html - &_start_;
    tt->struct_def.name = tdrpStrDup("html_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xwd_path");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &visibility_html.xwd_path - (char *) &visibility_html;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("convert_command");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &visibility_html.convert_command - (char *) &visibility_html;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("visibility.xwd");
      tt->struct_vals[1].s = tdrpStrDup("convert visibility.xwd visibility.gif");
    tt++;
    
    // Parameter 'flight_cat_html'
    // ctype is '_html_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("flight_cat_html");
    tt->descr = tdrpStrDup("File path and conversion for flight_cat HTML image");
    tt->help = tdrpStrDup("The xwd_path designates the file to be created when doing window dumps for HTML generation. The convert_command converts the xwd file to a suitable file for web content.");
    tt->val_offset = (char *) &flight_cat_html - &_start_;
    tt->struct_def.name = tdrpStrDup("html_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xwd_path");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &flight_cat_html.xwd_path - (char *) &flight_cat_html;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("convert_command");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &flight_cat_html.convert_command - (char *) &flight_cat_html;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("flight_cat.xwd");
      tt->struct_vals[1].s = tdrpStrDup("convert flight_cat.xwd flight_cat.gif");
    tt++;
    
    // Parameter 'temperature_html'
    // ctype is '_html_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("temperature_html");
    tt->descr = tdrpStrDup("File path and conversion for temperature HTML image");
    tt->help = tdrpStrDup("The xwd_path designates the file to be created when doing window dumps for HTML generation. The convert_command converts the xwd file to a suitable file for web content.");
    tt->val_offset = (char *) &temperature_html - &_start_;
    tt->struct_def.name = tdrpStrDup("html_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xwd_path");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &temperature_html.xwd_path - (char *) &temperature_html;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("convert_command");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &temperature_html.convert_command - (char *) &temperature_html;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("temperature.xwd");
      tt->struct_vals[1].s = tdrpStrDup("convert temperature.xwd temperature.gif");
    tt++;
    
    // Parameter 'humidity_html'
    // ctype is '_html_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("humidity_html");
    tt->descr = tdrpStrDup("File path and conversion for humidity HTML image");
    tt->help = tdrpStrDup("The xwd_path designates the file to be created when doing window dumps for HTML generation. The convert_command converts the xwd file to a suitable file for web content.");
    tt->val_offset = (char *) &humidity_html - &_start_;
    tt->struct_def.name = tdrpStrDup("html_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xwd_path");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &humidity_html.xwd_path - (char *) &humidity_html;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("convert_command");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &humidity_html.convert_command - (char *) &humidity_html;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("humidity.xwd");
      tt->struct_vals[1].s = tdrpStrDup("convert humidity.xwd humidity.gif");
    tt++;
    
    // Parameter 'wind_speed_html'
    // ctype is '_html_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_speed_html");
    tt->descr = tdrpStrDup("File path and conversion for wind_speed HTML image");
    tt->help = tdrpStrDup("The xwd_path designates the file to be created when doing window dumps for HTML generation. The convert_command converts the xwd file to a suitable file for web content.");
    tt->val_offset = (char *) &wind_speed_html - &_start_;
    tt->struct_def.name = tdrpStrDup("html_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xwd_path");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &wind_speed_html.xwd_path - (char *) &wind_speed_html;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("convert_command");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &wind_speed_html.convert_command - (char *) &wind_speed_html;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("wind_speed.xwd");
      tt->struct_vals[1].s = tdrpStrDup("convert wind_speed.xwd wind_speed.gif");
    tt++;
    
    // Parameter 'wind_dirn_html'
    // ctype is '_html_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_dirn_html");
    tt->descr = tdrpStrDup("File path and conversion for wind_dirn HTML image");
    tt->help = tdrpStrDup("The xwd_path designates the file to be created when doing window dumps for HTML generation. The convert_command converts the xwd file to a suitable file for web content.");
    tt->val_offset = (char *) &wind_dirn_html - &_start_;
    tt->struct_def.name = tdrpStrDup("html_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xwd_path");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &wind_dirn_html.xwd_path - (char *) &wind_dirn_html;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("convert_command");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &wind_dirn_html.convert_command - (char *) &wind_dirn_html;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("wind_dirn.xwd");
      tt->struct_vals[1].s = tdrpStrDup("convert wind_dirn.xwd wind_dirn.gif");
    tt++;
    
    // Parameter 'pressure_html'
    // ctype is '_html_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("pressure_html");
    tt->descr = tdrpStrDup("File path and conversion for pressure HTML image");
    tt->help = tdrpStrDup("The xwd_path designates the file to be created when doing window dumps for HTML generation. The convert_command converts the xwd file to a suitable file for web content.");
    tt->val_offset = (char *) &pressure_html - &_start_;
    tt->struct_def.name = tdrpStrDup("html_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xwd_path");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &pressure_html.xwd_path - (char *) &pressure_html;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("convert_command");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &pressure_html.convert_command - (char *) &pressure_html;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("pressure.xwd");
      tt->struct_vals[1].s = tdrpStrDup("convert pressure.xwd pressure.gif");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("FIELD THRESHOLD DEFINITION AND APPLICATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_ceiling'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_ceiling");
    tt->descr = tdrpStrDup("Flag to turn on and off application of an upper threshold to ceiling");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &apply_ceiling - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ceiling_threshold'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("ceiling_threshold");
    tt->descr = tdrpStrDup("Ceiling threshold in feet.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ceiling_threshold - &_start_;
    tt->single_val.f = 5000;
    tt++;
    
    // Parameter 'apply_visibility'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_visibility");
    tt->descr = tdrpStrDup("Flag to turn on and off application of an upper threshold to visibilty");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &apply_visibility - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'visibility_threshold'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("visibility_threshold");
    tt->descr = tdrpStrDup("Visibility threshold in kilometers.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &visibility_threshold - &_start_;
    tt->single_val.f = 10;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
