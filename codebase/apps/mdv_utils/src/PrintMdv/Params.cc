/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program PrintMdv
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DATA RETRIEVAL CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'specify_file_by_time'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_file_by_time");
    tt->descr = tdrpStrDup("Option to specify file by time.");
    tt->help = tdrpStrDup("If true, paths for reads and writes are based on time and the data directory. If false, reads and writes use the specified path.");
    tt->val_offset = (char *) &specify_file_by_time - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("url");
    tt->descr = tdrpStrDup("Url string - for timed read/write.");
    tt->help = tdrpStrDup("On read, files will be searched for in this url. On write, files will be written to this url.");
    tt->val_offset = (char *) &url - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("path");
    tt->descr = tdrpStrDup("Path string - full path specified.");
    tt->help = tdrpStrDup("File will be read from ro written to this path.");
    tt->val_offset = (char *) &path - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'get_mode'
    // ctype is '_get_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("get_mode");
    tt->descr = tdrpStrDup("Mode for get request.");
    tt->help = tdrpStrDup("For GET_VSECTION, you must fill out the waypoint array. A single waypoint yields a column of data.");
    tt->val_offset = (char *) &get_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("get_mode_t");
    tt->enum_def.nfields = 7;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("GET_VOLUME");
      tt->enum_def.fields[0].val = GET_VOLUME;
      tt->enum_def.fields[1].name = tdrpStrDup("GET_VSECTION");
      tt->enum_def.fields[1].val = GET_VSECTION;
      tt->enum_def.fields[2].name = tdrpStrDup("GET_TIME_LIST");
      tt->enum_def.fields[2].val = GET_TIME_LIST;
      tt->enum_def.fields[3].name = tdrpStrDup("GET_TIME_HEIGHT");
      tt->enum_def.fields[3].val = GET_TIME_HEIGHT;
      tt->enum_def.fields[4].name = tdrpStrDup("GET_GIS");
      tt->enum_def.fields[4].val = GET_GIS;
      tt->enum_def.fields[5].name = tdrpStrDup("GET_TABLE");
      tt->enum_def.fields[5].val = GET_TABLE;
      tt->enum_def.fields[6].name = tdrpStrDup("GET_ALL_HEADERS");
      tt->enum_def.fields[6].val = GET_ALL_HEADERS;
    tt->single_val.e = GET_VOLUME;
    tt++;
    
    // Parameter 'threaded'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("threaded");
    tt->descr = tdrpStrDup("Option to use threaded calls.");
    tt->help = tdrpStrDup("If true, a DsMdvxThreaded object is used. If false, a DsMdvx object is used.");
    tt->val_offset = (char *) &threaded - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_search_mode'
    // ctype is '_read_search_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("read_search_mode");
    tt->descr = tdrpStrDup("Mode for searching for data in time domain.");
    tt->help = tdrpStrDup("For all except LATEST, you must specify the search time and the search margin. For SPECIFIED_FORECAST you must also specify the lead time.");
    tt->val_offset = (char *) &read_search_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("read_search_mode_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("READ_LATEST");
      tt->enum_def.fields[0].val = READ_LATEST;
      tt->enum_def.fields[1].name = tdrpStrDup("READ_CLOSEST");
      tt->enum_def.fields[1].val = READ_CLOSEST;
      tt->enum_def.fields[2].name = tdrpStrDup("READ_FIRST_BEFORE");
      tt->enum_def.fields[2].val = READ_FIRST_BEFORE;
      tt->enum_def.fields[3].name = tdrpStrDup("READ_FIRST_AFTER");
      tt->enum_def.fields[3].val = READ_FIRST_AFTER;
      tt->enum_def.fields[4].name = tdrpStrDup("READ_BEST_FORECAST");
      tt->enum_def.fields[4].val = READ_BEST_FORECAST;
      tt->enum_def.fields[5].name = tdrpStrDup("READ_SPECIFIED_FORECAST");
      tt->enum_def.fields[5].val = READ_SPECIFIED_FORECAST;
    tt->single_val.e = READ_CLOSEST;
    tt++;
    
    // Parameter 'read_search_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("read_search_time");
    tt->descr = tdrpStrDup("Data time string.");
    tt->help = tdrpStrDup("Time for data requested. Format is YYYY MM DD HH MM SS");
    tt->val_offset = (char *) &read_search_time - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'read_search_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_search_margin");
    tt->descr = tdrpStrDup("Margin around search time (secs).");
    tt->help = tdrpStrDup("Applies to all search modes except LATEST.");
    tt->val_offset = (char *) &read_search_margin - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'read_forecast_lead_time'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_forecast_lead_time");
    tt->descr = tdrpStrDup("Forecast lead time - uses search_time as the model gen time.");
    tt->help = tdrpStrDup("Applies to READ_SPECIFIED_FORECAST search mode only.");
    tt->val_offset = (char *) &read_forecast_lead_time - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'set_latest_valid_mod_time'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_latest_valid_mod_time");
    tt->descr = tdrpStrDup("Option to only consider files written before a specified time.");
    tt->help = tdrpStrDup("Setting this TRUE causes Mdvx to ignore files written AFTER the specified modify time.");
    tt->val_offset = (char *) &set_latest_valid_mod_time - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'latest_valid_mod_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("latest_valid_mod_time");
    tt->descr = tdrpStrDup("Latest valid modify time for file retrieval.");
    tt->help = tdrpStrDup("See 'read_set_latest_valid_mod_time'.");
    tt->val_offset = (char *) &latest_valid_mod_time - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'set_valid_time_search_wt'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_valid_time_search_wt");
    tt->descr = tdrpStrDup("Option to sey valid time search weight.");
    tt->help = tdrpStrDup(" Set the weight given to valid time differences, over gen time differences, when searching for the best forecast for a specified time. Finding the best forecast for a given time is tricky. Do you care more about differences between the valid time and the requested time, or do you want to give more weight to the closest gen time. The default value is 2.5. This works well for most situations. If the time between model runs is long (say 6 hours) as compared to the time between model output times (say 30 mins) then you need to increase the weight to say 25. Setting it to 100 will weight the decision very heavily in favor of the diff between the valid and requested time, and put very little weight on which model run to use.");
    tt->val_offset = (char *) &set_valid_time_search_wt - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'valid_time_search_wt'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("valid_time_search_wt");
    tt->descr = tdrpStrDup("See 'set_valid_time_search_wt.'");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &valid_time_search_wt - &_start_;
    tt->single_val.d = 2.5;
    tt++;
    
    // Parameter 'constrain_forecast_lead_times'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("constrain_forecast_lead_times");
    tt->descr = tdrpStrDup("Option to constrain the lead times to be considered.");
    tt->help = tdrpStrDup("If true, only forecast lead times within the specified limits will be considerd. Also, you can specify to request the data by generate time rather than valid time. The valid time will be computed as the request_time plus the mean of the min and max lead times.");
    tt->val_offset = (char *) &constrain_forecast_lead_times - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'forecast_constraints'
    // ctype is '_forecast_constraints_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("forecast_constraints");
    tt->descr = tdrpStrDup("Set constraints for forecast lead times.");
    tt->help = tdrpStrDup("See constrain_forecast_lead_times. Only forecast lead times within the specified limits will be considerd. If request_by_gen_time is true, the search_time specified will be interpreted as the generate time rather than the valid time. The valid time will be computed as the search_time plus the mean of the min and max lead times specified.");
    tt->val_offset = (char *) &forecast_constraints - &_start_;
    tt->struct_def.name = tdrpStrDup("forecast_constraints_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_lead_time");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &forecast_constraints.min_lead_time - (char *) &forecast_constraints;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_lead_time");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &forecast_constraints.max_lead_time - (char *) &forecast_constraints;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("request_by_gen_time");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &forecast_constraints.request_by_gen_time - (char *) &forecast_constraints;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 0;
      tt->struct_vals[1].i = 0;
      tt->struct_vals[2].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("READ CONTROL OPTIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_set_horiz_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_horiz_limits");
    tt->descr = tdrpStrDup("Option to set horizontal limits.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_set_horiz_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_horiz_limits'
    // ctype is '_horiz_limits_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("read_horiz_limits");
    tt->descr = tdrpStrDup("Horizontal limits for read.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_horiz_limits - &_start_;
    tt->struct_def.name = tdrpStrDup("horiz_limits_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_lat");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &read_horiz_limits.min_lat - (char *) &read_horiz_limits;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("min_lon");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &read_horiz_limits.min_lon - (char *) &read_horiz_limits;
      tt->struct_def.fields[2].ftype = tdrpStrDup("float");
      tt->struct_def.fields[2].fname = tdrpStrDup("max_lat");
      tt->struct_def.fields[2].ptype = FLOAT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &read_horiz_limits.max_lat - (char *) &read_horiz_limits;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("max_lon");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &read_horiz_limits.max_lon - (char *) &read_horiz_limits;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = -90;
      tt->struct_vals[1].f = -180;
      tt->struct_vals[2].f = 90;
      tt->struct_vals[3].f = 180;
    tt++;
    
    // Parameter 'read_set_vlevel_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_vlevel_limits");
    tt->descr = tdrpStrDup("Option to set plane vlevel limits");
    tt->help = tdrpStrDup("Mutually exclusive with read_set_plane_num_limits.");
    tt->val_offset = (char *) &read_set_vlevel_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_lower_vlevel'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("read_lower_vlevel");
    tt->descr = tdrpStrDup("Lower plane vlevel limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_lower_vlevel - &_start_;
    tt->single_val.f = -9999;
    tt++;
    
    // Parameter 'read_upper_vlevel'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("read_upper_vlevel");
    tt->descr = tdrpStrDup("Upper plane vlevel limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_upper_vlevel - &_start_;
    tt->single_val.f = 9999;
    tt++;
    
    // Parameter 'read_set_plane_num_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_plane_num_limits");
    tt->descr = tdrpStrDup("Option to set plane number limits");
    tt->help = tdrpStrDup("Mutually exclusive with read_set_vlevel_limits.");
    tt->val_offset = (char *) &read_set_plane_num_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_lower_plane_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_lower_plane_num");
    tt->descr = tdrpStrDup("Lower plane num limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_lower_plane_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'read_upper_plane_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_upper_plane_num");
    tt->descr = tdrpStrDup("Upper plane num limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_upper_plane_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'read_set_vlevel_type'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_vlevel_type");
    tt->descr = tdrpStrDup("Set vlevel type for return data");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_set_vlevel_type - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_vlevel_type'
    // ctype is '_vlevel_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("read_vlevel_type");
    tt->descr = tdrpStrDup("Read vlevel type.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_vlevel_type - &_start_;
    tt->enum_def.name = tdrpStrDup("vlevel_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_TYPE_PRESSURE");
      tt->enum_def.fields[0].val = VERT_TYPE_PRESSURE;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_TYPE_Z");
      tt->enum_def.fields[1].val = VERT_TYPE_Z;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_FLIGHT_LEVEL");
      tt->enum_def.fields[2].val = VERT_FLIGHT_LEVEL;
    tt->single_val.e = VERT_TYPE_Z;
    tt++;
    
    // Parameter 'read_encoding_type'
    // ctype is '_encoding_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("read_encoding_type");
    tt->descr = tdrpStrDup("Read encoding type.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_encoding_type - &_start_;
    tt->enum_def.name = tdrpStrDup("encoding_type_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ENCODING_ASIS");
      tt->enum_def.fields[0].val = ENCODING_ASIS;
      tt->enum_def.fields[1].name = tdrpStrDup("ENCODING_INT8");
      tt->enum_def.fields[1].val = ENCODING_INT8;
      tt->enum_def.fields[2].name = tdrpStrDup("ENCODING_INT16");
      tt->enum_def.fields[2].val = ENCODING_INT16;
      tt->enum_def.fields[3].name = tdrpStrDup("ENCODING_FLOAT32");
      tt->enum_def.fields[3].val = ENCODING_FLOAT32;
    tt->single_val.e = ENCODING_ASIS;
    tt++;
    
    // Parameter 'read_compression_type'
    // ctype is '_compression_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("read_compression_type");
    tt->descr = tdrpStrDup("Read compression type.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_compression_type - &_start_;
    tt->enum_def.name = tdrpStrDup("compression_type_t");
    tt->enum_def.nfields = 8;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("COMPRESSION_ASIS");
      tt->enum_def.fields[0].val = COMPRESSION_ASIS;
      tt->enum_def.fields[1].name = tdrpStrDup("COMPRESSION_NONE");
      tt->enum_def.fields[1].val = COMPRESSION_NONE;
      tt->enum_def.fields[2].name = tdrpStrDup("COMPRESSION_RLE");
      tt->enum_def.fields[2].val = COMPRESSION_RLE;
      tt->enum_def.fields[3].name = tdrpStrDup("COMPRESSION_LZO");
      tt->enum_def.fields[3].val = COMPRESSION_LZO;
      tt->enum_def.fields[4].name = tdrpStrDup("COMPRESSION_ZLIB");
      tt->enum_def.fields[4].val = COMPRESSION_ZLIB;
      tt->enum_def.fields[5].name = tdrpStrDup("COMPRESSION_BZIP");
      tt->enum_def.fields[5].val = COMPRESSION_BZIP;
      tt->enum_def.fields[6].name = tdrpStrDup("COMPRESSION_GZIP");
      tt->enum_def.fields[6].val = COMPRESSION_GZIP;
      tt->enum_def.fields[7].name = tdrpStrDup("COMPRESSION_GZIP_VOL");
      tt->enum_def.fields[7].val = COMPRESSION_GZIP_VOL;
    tt->single_val.e = COMPRESSION_ASIS;
    tt++;
    
    // Parameter 'read_scaling_type'
    // ctype is '_scaling_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("read_scaling_type");
    tt->descr = tdrpStrDup("Read scaling type.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_scaling_type - &_start_;
    tt->enum_def.name = tdrpStrDup("scaling_type_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SCALING_NONE");
      tt->enum_def.fields[0].val = SCALING_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("SCALING_ROUNDED");
      tt->enum_def.fields[1].val = SCALING_ROUNDED;
      tt->enum_def.fields[2].name = tdrpStrDup("SCALING_INTEGRAL");
      tt->enum_def.fields[2].val = SCALING_INTEGRAL;
      tt->enum_def.fields[3].name = tdrpStrDup("SCALING_DYNAMIC");
      tt->enum_def.fields[3].val = SCALING_DYNAMIC;
      tt->enum_def.fields[4].name = tdrpStrDup("SCALING_SPECIFIED");
      tt->enum_def.fields[4].val = SCALING_SPECIFIED;
    tt->single_val.e = SCALING_ROUNDED;
    tt++;
    
    // Parameter 'read_scale'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("read_scale");
    tt->descr = tdrpStrDup("Read scaling scale.");
    tt->help = tdrpStrDup("For SCALING_SPECIFIED only.");
    tt->val_offset = (char *) &read_scale - &_start_;
    tt->single_val.f = 1;
    tt++;
    
    // Parameter 'read_bias'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("read_bias");
    tt->descr = tdrpStrDup("Read scaling bias.");
    tt->help = tdrpStrDup("For SCALING_SPECIFIED only.");
    tt->val_offset = (char *) &read_bias - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'read_composite'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_composite");
    tt->descr = tdrpStrDup("Option for creating composite in the read operation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_composite - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_set_fill_missing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_fill_missing");
    tt->descr = tdrpStrDup("Option to set fill_missing flag for read");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_set_fill_missing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_transform_to_linear'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_transform_to_linear");
    tt->descr = tdrpStrDup("Option to force a transform to linear on read.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_transform_to_linear - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_set_field_nums'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_field_nums");
    tt->descr = tdrpStrDup("Option to set field numbers");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_set_field_nums - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_field_nums'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_field_nums");
    tt->descr = tdrpStrDup("Field number list.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_read_field_nums - &_start_;
    tt->array_n_offset = (char *) &read_field_nums_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].i = 0;
    tt++;
    
    // Parameter 'read_set_field_names'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_field_names");
    tt->descr = tdrpStrDup("Option to set field names");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_set_field_names - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_field_names'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("read_field_names");
    tt->descr = tdrpStrDup("Field name list.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_read_field_names - &_start_;
    tt->array_n_offset = (char *) &read_field_names_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'read_vsect_waypts'
    // ctype is '_vsect_waypt_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("read_vsect_waypts");
    tt->descr = tdrpStrDup("Waypts for vertical section.");
    tt->help = tdrpStrDup("For READ_VSECTION mode only.");
    tt->array_offset = (char *) &_read_vsect_waypts - &_start_;
    tt->array_n_offset = (char *) &read_vsect_waypts_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(vsect_waypt_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("vsect_waypt_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("lat");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_read_vsect_waypts->lat - (char *) _read_vsect_waypts;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("lon");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_read_vsect_waypts->lon - (char *) _read_vsect_waypts;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 0;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // Parameter 'disable_vsection_interp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("disable_vsection_interp");
    tt->descr = tdrpStrDup("Option to disable interpolation for a vert section.");
    tt->help = tdrpStrDup("By default, data in a vertical section will be interpolated from the grid. If this is set to true, nearest neighbor will be used.");
    tt->val_offset = (char *) &disable_vsection_interp - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_set_decimation'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_decimation");
    tt->descr = tdrpStrDup("Option to decimate data on return.");
    tt->help = tdrpStrDup("This allows you to request that the data is returned to you decimated, so that the number of points in a plane does not exceed 'decimation_max_nxy'.");
    tt->val_offset = (char *) &read_set_decimation - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'decimation_max_nxy'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("decimation_max_nxy");
    tt->descr = tdrpStrDup("Max number of points in plane, when decimation is on.");
    tt->help = tdrpStrDup("See 'read_set_decimation'");
    tt->val_offset = (char *) &decimation_max_nxy - &_start_;
    tt->single_val.i = 10000000;
    tt++;
    
    // Parameter 'remap_z_to_constant_grid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remap_z_to_constant_grid");
    tt->descr = tdrpStrDup("Option to remap the Z levels onto a grid with constant dz.");
    tt->help = tdrpStrDup("Field data will be remapped onto the specified Z levels. See 'remap_z_grid'.");
    tt->val_offset = (char *) &remap_z_to_constant_grid - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remap_z_grid'
    // ctype is '_remap_z_grid_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("remap_z_grid");
    tt->descr = tdrpStrDup("Specified Z levels for remapping.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &remap_z_grid - &_start_;
    tt->struct_def.name = tdrpStrDup("remap_z_grid_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nz");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &remap_z_grid.nz - (char *) &remap_z_grid;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("minz");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &remap_z_grid.minz - (char *) &remap_z_grid;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("dz");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &remap_z_grid.dz - (char *) &remap_z_grid;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 10;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 1;
    tt++;
    
    // Parameter 'read_time_list_also'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_time_list_also");
    tt->descr = tdrpStrDup("Option to get time list in addition to field data.");
    tt->help = tdrpStrDup("Intended for GET_VOLUME and GET_VSECTION modes. If true, you must specify the time list options. The time list will be returned in addition to the main fields requested. If you only want the time list, use the GET_TIME_LIST mode.");
    tt->val_offset = (char *) &read_time_list_also - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_field_file_headers_also'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_field_file_headers_also");
    tt->descr = tdrpStrDup("Option to also read field file headers.");
    tt->help = tdrpStrDup("If true, the field and vlevel headers, exactly as in the file, will be sent across for each field read.");
    tt->val_offset = (char *) &read_field_file_headers_also - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_as_single_part'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_as_single_part");
    tt->descr = tdrpStrDup("Option to read file as a single part in the message.");
    tt->help = tdrpStrDup("If true, the MDV main object will be sent across as a single part. This option is used by the Java MDV API.");
    tt->val_offset = (char *) &read_as_single_part - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_using_32_bit_headers'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_using_32_bit_headers");
    tt->descr = tdrpStrDup("Read using the legacy 32-bit headers.");
    tt->help = tdrpStrDup("If false, the new 64-bit headers will be used.");
    tt->val_offset = (char *) &read_using_32_bit_headers - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("TIME LIST MODE AND OPTIONS");
    tt->comment_text = tdrpStrDup("Specifying mode for time lists:\n  TIME_LIST_VALID: valid data times in a given time range.\n    For model data, if more than 1 gen time produces data\n    for the same valid time, only a single time is returned.\n  TIME_LIST_GENERATE: model generate times within a given time range.\n  TIME_LIST_FORECAST: model foreast times for a given gen time.\n  TIME_LIST_FIRST: the first time in the data set\n  TIME_LIST_LAST: the last time in the data set\n  TIME_LIST_GEN_PLUS_FORECASTS: gen times within a given time range,\n    plus all forecast times for each gen time.\n  TIME_LIST_VALID_MULT_GEN: valid times in a given data range.\n    Often different gen times produce forecasts at the same valid time,\n    i.e., the results overlap. In this case, there will be multiple\n    instances of the same valid time, each with a different gen time.\n  TIME_LIST_CLOSEST: get closest data time to search time,\n    within search_margin\n  TIME_LIST_FIRST_BEFORE: get first time at or before search_time,\n    within search_margin\n  TIME_LIST_FIRST_AFTER: get first time at or after search_time,\n    within search_margin\n  TIME_LIST_BEST_FORECAST: get best forecast time closest to \n    search time, withing search_margin.\n  TIME_LIST_SPECIFIED_FORECAST: get forecast generated at search time,\n    closest to forecast time, within search_margin\n");
    tt++;
    
    // Parameter 'time_list_mode'
    // ctype is '_time_list_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("time_list_mode");
    tt->descr = tdrpStrDup("Mode for searching for data in time list.");
    tt->help = tdrpStrDup("For VALID and GEN you must specify time_list_start time_list_end times. For LEAD you must specify the time_list_gen_time.");
    tt->val_offset = (char *) &time_list_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("time_list_mode_t");
    tt->enum_def.nfields = 12;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIME_LIST_VALID");
      tt->enum_def.fields[0].val = TIME_LIST_VALID;
      tt->enum_def.fields[1].name = tdrpStrDup("TIME_LIST_GEN");
      tt->enum_def.fields[1].val = TIME_LIST_GEN;
      tt->enum_def.fields[2].name = tdrpStrDup("TIME_LIST_FORECAST");
      tt->enum_def.fields[2].val = TIME_LIST_FORECAST;
      tt->enum_def.fields[3].name = tdrpStrDup("TIME_LIST_FIRST");
      tt->enum_def.fields[3].val = TIME_LIST_FIRST;
      tt->enum_def.fields[4].name = tdrpStrDup("TIME_LIST_LAST");
      tt->enum_def.fields[4].val = TIME_LIST_LAST;
      tt->enum_def.fields[5].name = tdrpStrDup("TIME_LIST_GEN_PLUS_FORECASTS");
      tt->enum_def.fields[5].val = TIME_LIST_GEN_PLUS_FORECASTS;
      tt->enum_def.fields[6].name = tdrpStrDup("TIME_LIST_VALID_MULT_GEN");
      tt->enum_def.fields[6].val = TIME_LIST_VALID_MULT_GEN;
      tt->enum_def.fields[7].name = tdrpStrDup("TIME_LIST_CLOSEST");
      tt->enum_def.fields[7].val = TIME_LIST_CLOSEST;
      tt->enum_def.fields[8].name = tdrpStrDup("TIME_LIST_FIRST_BEFORE");
      tt->enum_def.fields[8].val = TIME_LIST_FIRST_BEFORE;
      tt->enum_def.fields[9].name = tdrpStrDup("TIME_LIST_FIRST_AFTER");
      tt->enum_def.fields[9].val = TIME_LIST_FIRST_AFTER;
      tt->enum_def.fields[10].name = tdrpStrDup("TIME_LIST_BEST_FORECAST");
      tt->enum_def.fields[10].val = TIME_LIST_BEST_FORECAST;
      tt->enum_def.fields[11].name = tdrpStrDup("TIME_LIST_SPECIFIED_FORECAST");
      tt->enum_def.fields[11].val = TIME_LIST_SPECIFIED_FORECAST;
    tt->single_val.e = TIME_LIST_VALID;
    tt++;
    
    // Parameter 'time_list_start'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("time_list_start");
    tt->descr = tdrpStrDup("Time list start time.");
    tt->help = tdrpStrDup("For VALID, GEN, GEN_PLUS_FORECASTS and VALID_PLUS_MULT_GEN modes. Format is YYYY MM DD HH MM SS");
    tt->val_offset = (char *) &time_list_start - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'time_list_end'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("time_list_end");
    tt->descr = tdrpStrDup("Time list end time.");
    tt->help = tdrpStrDup("For VALID, GEN, GEN_PLUS_FORECASTS and VALID_PLUS_MULT_GEN modes. Format is YYYY MM DD HH MM SS");
    tt->val_offset = (char *) &time_list_end - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'time_list_gen'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("time_list_gen");
    tt->descr = tdrpStrDup("Time list generate time.");
    tt->help = tdrpStrDup("For GEN, GEN_PLUS_FORECASTS and SPECIFIED_FORECAST modes. Format is YYYY MM DD HH MM SS");
    tt->val_offset = (char *) &time_list_gen - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'time_list_search'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("time_list_search");
    tt->descr = tdrpStrDup("Search time.");
    tt->help = tdrpStrDup("For CLOSEST, FIRST_BEFORE, FIRST_AFTER, BEST_FORECAST and SPECIFIED_FORECAST modes. Format is YYYY MM DD HH MM SS");
    tt->val_offset = (char *) &time_list_search - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'time_list_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("time_list_margin");
    tt->descr = tdrpStrDup("Time list time margin.");
    tt->help = tdrpStrDup("For CLOSEST, FIRST_BEFORE, FIRST_AFTER, BEST_FORECAST and SPECIFIED_FORECAST modes.");
    tt->val_offset = (char *) &time_list_margin - &_start_;
    tt->single_val.i = 86400;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("PRINT CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'print_summary'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_summary");
    tt->descr = tdrpStrDup("Option to print out summary only.");
    tt->help = tdrpStrDup("If true, only header summaries will be printed.");
    tt->val_offset = (char *) &print_summary - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_data");
    tt->descr = tdrpStrDup("Option to print out data.");
    tt->help = tdrpStrDup("If true, data values will be printed.");
    tt->val_offset = (char *) &print_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_native'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_native");
    tt->descr = tdrpStrDup("Option to print out in native format.");
    tt->help = tdrpStrDup("If false, printout will be in float mode.");
    tt->val_offset = (char *) &print_native - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'start_at_top'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("start_at_top");
    tt->descr = tdrpStrDup("Option to start with top row in GIS mode.");
    tt->help = tdrpStrDup("If true, the top row is printed first. If false, the bottom is printed first.");
    tt->val_offset = (char *) &start_at_top - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'print_canonical'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_canonical");
    tt->descr = tdrpStrDup("Option to print out in canonical.");
    tt->help = tdrpStrDup("If set, the compressed type of output is not used, and every single value is printed out.");
    tt->val_offset = (char *) &print_canonical - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_chunks'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_chunks");
    tt->descr = tdrpStrDup("Option to print out chunks (if present)");
    tt->help = tdrpStrDup("If set, the chunks are printed when no other flags are set, otherwise the volume might not be loaded and chunks won't be seen");
    tt->val_offset = (char *) &print_chunks - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_nlines_data'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("print_nlines_data");
    tt->descr = tdrpStrDup("Option to limit field data to specified number of lines.");
    tt->help = tdrpStrDup("If > 0, only the first n lines of each field will be printed.");
    tt->val_offset = (char *) &print_nlines_data - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("SAVING THE DATA TO AN MDV FILE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'save_to_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_to_file");
    tt->descr = tdrpStrDup("Option to save the resulting object to an Mdv file.");
    tt->help = tdrpStrDup("If true, the Mdvx object which results from the read will be saved to the specified url. Only works for volumes and vsections.");
    tt->val_offset = (char *) &save_to_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'no_print'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_print");
    tt->descr = tdrpStrDup("Option to save only, without printing.");
    tt->help = tdrpStrDup("If true, the Mdvx object will be saved to a file, but the normal print to stdout will be suppressed.");
    tt->val_offset = (char *) &no_print - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'save_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("save_url");
    tt->descr = tdrpStrDup("URL to which the file should be saved.");
    tt->help = tdrpStrDup("See 'save_to_file.");
    tt->val_offset = (char *) &save_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdpv:://localhost::mdv/print");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("FILE FORMAT");
    tt->comment_text = tdrpStrDup("The data may be represented in normal MDV format, or in alternate XML and NCF formats.");
    tt++;
    
    // Parameter 'file_format'
    // ctype is '_file_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("file_format");
    tt->descr = tdrpStrDup("Specify format of file on read and save.");
    tt->help = tdrpStrDup("FORMAT_MDV: normal MDV formal. FORMAT_XML: XML format. XML format consists of 2 files: *.mdv.xml and *.mdv.buf. The xml file contains the meta-data. The buf file contains the binary fields.\nNOTE: only COMPRESSION_NONE and COMPRESSION_GZIP_VOL are supported in XML. FORMAT_NCF: represent data in netCDF CF format. Extension will be .nc.");
    tt->val_offset = (char *) &file_format - &_start_;
    tt->enum_def.name = tdrpStrDup("file_format_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FORMAT_MDV");
      tt->enum_def.fields[0].val = FORMAT_MDV;
      tt->enum_def.fields[1].name = tdrpStrDup("FORMAT_XML");
      tt->enum_def.fields[1].val = FORMAT_XML;
      tt->enum_def.fields[2].name = tdrpStrDup("FORMAT_NCF");
      tt->enum_def.fields[2].val = FORMAT_NCF;
    tt->single_val.e = FORMAT_MDV;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("PERFORMANCE TESTING");
    tt->comment_text = tdrpStrDup("Option to retrieve data without printing, to test retrieval speed.");
    tt++;
    
    // Parameter 'test_no_print'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("test_no_print");
    tt->descr = tdrpStrDup("Option to test retrieval speed.");
    tt->help = tdrpStrDup("If true, printing is suppressed, and the data is retrieved test_n_retrievals times.");
    tt->val_offset = (char *) &test_no_print - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'test_n_retrievals'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("test_n_retrievals");
    tt->descr = tdrpStrDup("Number of retrievals for performance monitoring.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &test_n_retrievals - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
