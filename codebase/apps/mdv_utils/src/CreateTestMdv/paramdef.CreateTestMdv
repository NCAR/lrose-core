/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// parameter definitions - CreateTestMdv
//
// Mike Dixon
// EOL, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// Jan 2020
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "CreateTestMdv creates a dummy MDV file for testing purposes.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

commentdef {
  p_header = "CARTESIAN GRID XY DETAILS";
  p_text = "Specify the grid details in (x,y). This will be a regular Cartesian grid. The units for the grid paramters are in (km,km) for all projections except for PROJ_LATLON. For the LATLON projection, the units are in (deg,deg).";
}

typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_xy_geom_t;

paramdef struct grid_xy_geom_t {
  p_default = {400, 400, -199.5, -199.5, 1.0, 1.0};
  p_descr = "Specify the grid parameters in x,y.";
  p_help =
    "\tnx: the number of grid points in the X dimension.\n"
    "\tny: the number of grid points in the Y dimension.\n"
    "\tminx: the X coordinate of the center of the SW grid cell.\n"
    "\tminy: the Y coordinate of the center of the SW grid cell.\n"
    "\tdx: the grid spacing in the X dimension.\n"
    "\tdy: the grid spacing in the Y dimension.\n"
    "\nUnits are in km, except for PROJ_LATLON, which has units in degrees.";
} grid_xy_geom;

commentdef {
  p_header = "CARTESIAN GRID PROJECTION";
}

typedef enum {
  PROJ_LATLON = 0,
  PROJ_LAMBERT_CONF = 3,
  PROJ_MERCATOR =  4,
  PROJ_POLAR_STEREO = 5,
  PROJ_FLAT = 8,
  PROJ_OBLIQUE_STEREO = 12,
  PROJ_TRANS_MERCATOR = 15,
  PROJ_ALBERS = 16,
  PROJ_LAMBERT_AZIM = 17,
  PROJ_VERT_PERSP = 18
} projection_t;

paramdef enum projection_t {
  p_default = PROJ_FLAT;
  p_descr = "Projection details for the Cartesian grid..";
  p_help =
  "\tPROJ_LATLON: regular lat/lon grid (Equidistant Cylindrical)\n"
  "\tPROJ_FLAT: Azimuthal Equidistant (Radar)\n"
  "\tPROJ_LAMBERT_CONF: Lambert Conformal Conic\n"
  "\tPROJ_LAMBERT_AZIM: Lambert Azimuthal Equal Area\n"
  "\tPROJ_MERCATOR: Mercator - EW orientation\n"
  "\tPROJ_TRANS_MERCATOR: Tranverse Mercator - NS orientation\n"
  "\tPROJ_POLAR_STEREO: Stereographic- polar aspect\n"
  "\tPROJ_OBLIQUE_STEREO: Stereographic - oblique aspect\n"
  "\tPROJ_ALBERS: Albers Equal Area Conic\n"
  "\tPROJ_VERT_PERSP: Vertical Perspective (satellite view)\n\n";
} projection;

paramdef double {
  p_default = 0.0;
  p_descr = "Grid rotation.";
  p_help = "This applies only to PROJ_FLAT projection.";
} proj_rotation;

paramdef double {
  p_default = 40.0;
  p_descr = "Grid origin latitude.";
  p_help = "This applies to all projections except LATLON.";
} proj_origin_lat;

paramdef double {
  p_default = -105;
  p_descr = "Grid origin longitude.";
  p_help = "This applies to all projections except LATLON.";
} proj_origin_lon;

paramdef double {
  p_default = 20.0;
  p_descr = "Grid reference latitude 1.";
  p_help = "This applies to LAMBERT_CONF and ALBERS projections.";
} proj_lat1;

paramdef double {
  p_default = 40.0;
  p_descr = "Grid reference latitude 2.";
  p_help = "This applies to LAMBERT_CONF and ALBERS projections.";
} proj_lat2;

paramdef double {
  p_default = 1.0;
  p_descr = "Central scale for projections.";
  p_help = "This applies to POLAR_STEREO, OBLIQUE_STEREO and TRANSVERSE_MERCATOR projections.";
} proj_central_scale;

paramdef double {
  p_default = 30.0;
  p_descr = "Tangent latitude (deg).";
  p_help = "This applies to OBLIQUE_STEREO only.";
} proj_tangent_lat;

paramdef double {
  p_default = 0.0;
  p_descr = "Tangent longitude (deg).";
  p_help = "This applies to OBLIQUE_STEREO and POLAR_STEREO.";
} proj_tangent_lon;

paramdef boolean {
  p_default = true;
  p_descr = "Flag indicating stereogtraphic is over the NORTH pole.";
  p_help = "This applies to POLAR_STEREO. If false, the projection is over the south pole.";
} proj_pole_is_north;

paramdef double {
  p_default = 35786;
  p_descr = "Radius of perspective point (km).";
  p_help = "This applies to VERT_PERSP.";
} proj_persp_radius;

paramdef double {
  p_default = 0.0;
  p_descr = "False northing correction.";
  p_help = "Occasionally, this is added to the Y coordinate so that all coordinates are positive. Normally 0. As an alternative to false_northing and false_easting, you can set the offset_latitude and offset_longitude";
} proj_false_northing;

paramdef double {
  p_default = 0.0;
  p_descr = "False easting correction.";
  p_help = "Occasionally, this is added to the X coordinate so that all coordinates are positive. Normally 0.";
} proj_false_easting;

commentdef {
  p_header = "CARTESIAN GRID VERTICAL LEVELS";
  p_text = 
    "\nSet the vertical levels for the Cartesian grid.\n"
    "\nThis applies to INTERP_MODE_CART, INTERP_MODE_SAT and INTERP_MODE_REORDER.\n"
    "\nFor INTERP_MODE_PPI and INTERP_MODE_POLAR, the vertical levels are governed by the elevation angle for each sweep in the input volume.\n"
    "\nYou can either specify a grid with constant vertial spacing, or you can provide an array of heights. The latter allows you to specify a grid with irregular vertical spacing.";
}

typedef enum {
  VERT_TYPE_UNKNOWN =      0,
  VERT_TYPE_SURFACE =      1,
  VERT_TYPE_SIGMA_P =      2,
  VERT_TYPE_PRESSURE =     3,
  VERT_TYPE_Z =            4,
  VERT_TYPE_SIGMA_Z =      5,
  VERT_TYPE_ETA =          6,
  VERT_TYPE_THETA =        7,
  VERT_TYPE_MIXED =        8,
  VERT_TYPE_ELEV =         9,
  VERT_TYPE_COMPOSITE =   10,
  VERT_SATELLITE_IMAGE =  12,
  VERT_FLIGHT_LEVEL =     15,
  VERT_EARTH_IMAGE =      16
} vlevel_type_t;

paramdef enum vlevel_type_t {
  p_default = VERT_TYPE_Z;
  p_descr = "Vertical level type.";
  p_help =
  "Supported types\n"
  "  VERT_TYPE_UNKNOWN\n"
  "  VERT_TYPE_SURFACE - Earth surface field\n"
  "  VERT_TYPE_SIGMA_P - Sigma pressure levels\n"
  "  VERT_TYPE_PRESSURE - Pressure levels, units = mb\n"
  "  VERT_TYPE_Z - Constant altitude, units = Km MSL\n"
  "  VERT_TYPE_SIGMA_Z - Model sigma Z levels\n"
  "  VERT_TYPE_ETA - Model eta levels\n"
  "  VERT_TYPE_THETA - Isentropic surface, units = Kelvin\n"
  "  VERT_TYPE_MIXED - Any hybrid grid\n"
  "  VERT_TYPE_ELEV - Elevation angles - radar\n"
  "  VERT_TYPE_COMPOSITE - A Composite of a set of planes\n"
  "  VERT_SATELLITE_IMAGE - Satelite Image\n"
  "  VERT_FLIGHT_LEVEL - ICAO flight level (100's of ft)\n"
  "  VERT_EARTH_IMAGE - Image, conformal to the surface of the earth \n";
} vlevel_type;

typedef struct {
  int nz;
  double minz;
  double dz;
} grid_z_geom_t;

paramdef struct grid_z_geom_t {
  p_default = {40, 0.5, 0.5};
  p_descr = "Specifying regular vertical grid levels.";
  p_help =
    "\tnz is the number of levels.\n"
    "\tdz is constant spacing of the Z levels, in km.\n"
    "\tminz is the lowest level, in km MSL.\n"
    "\nNOTE: Applies if specify_individual_z_levels is false.";
} grid_z_geom;

paramdef boolean {
  p_default = false;
  p_descr = "Option to specify each Z level individually.";
  p_help = "If true, you will fill out the z_level array to specify each Z level. This allows you to set up a grid with unequal spacing in the vertical. If false, use grid_z_geom to specify Z levels at constant spacing.";
} specify_individual_z_levels;

paramdef double {
  p_default = { 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0 };
  p_descr = "Array of grid levels, in km MSL.";
  p_help = "This applies if specify_individual_z_levels is true.";
} z_level_array[];

commentdef {
  p_header = "OUTPUT FIELDS";
}

typedef enum {
  ENCODING_INT8 =      1,
  ENCODING_INT16 =     2,
  ENCODING_FLOAT32 =   5
} encoding_type_t;

paramdef enum encoding_type_t {
  p_default = ENCODING_INT16;
  p_descr = "Set encoding type.";
} encoding_type;

typedef struct {
  string name;
  string long_name;
  string units;
  double min_val;
  double max_val;
  encoding_type_t encoding;
} field_t;

paramdef struct field_t {
  p_default = {
    {"DBZ", "DBZ", "dBZ", -30, 80, ENCODING_INT16 },
    {"VEL", "VEL", "m/s", -25, 25, ENCODING_INT16 }
  };
  p_descr = "Array of output fields.";
  p_help = "The program will create these fields.";
} fields[];

commentdef {
  p_header = "DATA OUTPUT";
};

paramdef string {
  p_descr = "Output directory.";
  p_default = "/tmp/MdvTest";
} output_dir;

typedef enum {
  COMPRESSION_NONE =  0,
  COMPRESSION_ZLIB =  3,
  COMPRESSION_BZIP =  4, 
  COMPRESSION_GZIP =  5
} compression_type_t;

paramdef enum compression_type_t {
  p_default = COMPRESSION_GZIP;
  p_descr = "Set compression type.";
} compression;

paramdef string {
  p_default = "Unknown";
  p_descr = "Data set name.";
  p_help = "This short string is placed in the MDV master header for documentation purposes.";
} data_set_name;

paramdef string {
  p_default = "Converted by CreateTestMdv.";
  p_descr = "Data set source details.";
  p_help = "This short string is placed in the MDV master header for documentation purposes.";
} data_set_source;

paramdef string {
  p_default = "Unknown";
  p_descr = "Data set info.";
  p_help = "This long string is placed in the MDV master header for documentation purposes.";
} data_set_info;

