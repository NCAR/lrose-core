/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Mdv2Grib
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters controlling debug outputs.");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("debug flag");
    tt->help = tdrpStrDup("Debug flag.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("PROCESS I/O PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters describing the input and output locations.");
    tt++;
    
    // Parameter 'trigger_mode'
    // ctype is '_trigger_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("trigger_mode");
    tt->descr = tdrpStrDup("Input triggering mode");
    tt->help = tdrpStrDup("In LATEST_DATA mode, the program waits for new data from the MDV location specified by the latest_data_trigger parameter.\nIn TIME_LIST mode, the program operates on archive data as specified in the time_list_trigger parameter.\nIn FILE_LIST mode, the files listed on the command line using the -f command line option are processed and then Mdv2Grib exits. FILE_LIST mode is automatically invoked by -f option on the command line and if the FILE_LIST mode is specified, the -f option is required on the command line.\nIn DS_INPUT_PATH and LOCAL_FILEPATH_REALTIME modes (these are equivalent) the program watches for new files in a DS directory and triggers when a new file appears. The DS directories are the ones named like <dir>/yyyymmdd/hhmmss.<ext>. This is needed in addition to the LATEST_DATA trigger to handle cases where the  data is coming in too fast to be seen in the DataMapper.\nIn SPECIFIC_GEN_TIME_LDATA mode, the application will trigger whenever the latest data info file indicates a new file from the specified generation time is received. The specific_gen_time_ldata parameter specifies the desired generation time.");
    tt->val_offset = (char *) &trigger_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("trigger_mode_t");
    tt->enum_def.nfields = 7;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LATEST_DATA");
      tt->enum_def.fields[0].val = LATEST_DATA;
      tt->enum_def.fields[1].name = tdrpStrDup("LATEST_DATA_FCST");
      tt->enum_def.fields[1].val = LATEST_DATA_FCST;
      tt->enum_def.fields[2].name = tdrpStrDup("TIME_LIST");
      tt->enum_def.fields[2].val = TIME_LIST;
      tt->enum_def.fields[3].name = tdrpStrDup("FILE_LIST");
      tt->enum_def.fields[3].val = FILE_LIST;
      tt->enum_def.fields[4].name = tdrpStrDup("DS_INPUT_PATH");
      tt->enum_def.fields[4].val = DS_INPUT_PATH;
      tt->enum_def.fields[5].name = tdrpStrDup("LOCAL_FILEPATH_REALTIME");
      tt->enum_def.fields[5].val = LOCAL_FILEPATH_REALTIME;
      tt->enum_def.fields[6].name = tdrpStrDup("SPECIFIC_GEN_TIME_LDATA");
      tt->enum_def.fields[6].val = SPECIFIC_GEN_TIME_LDATA;
    tt->single_val.e = LATEST_DATA;
    tt++;
    
    // Parameter 'latest_data_trigger'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("latest_data_trigger");
    tt->descr = tdrpStrDup("URL to use when using a LATEST_DATA trigger");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &latest_data_trigger - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::./mdv/ruc");
    tt++;
    
    // Parameter 'time_list_trigger'
    // ctype is '_time_list_trigger_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("time_list_trigger");
    tt->descr = tdrpStrDup("Trigger information used when using the TIME_LIST trigger");
    tt->help = tdrpStrDup("url specifies the URL to use to get the available data times.\nstart_time specifies the archive start time in any format recognized by the DateTime class.\nend_time specifies the archive end time in any format recognized by the DateTime class.");
    tt->val_offset = (char *) &time_list_trigger - &_start_;
    tt->struct_def.name = tdrpStrDup("time_list_trigger_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("start_time");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &time_list_trigger.start_time - (char *) &time_list_trigger;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("end_time");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &time_list_trigger.end_time - (char *) &time_list_trigger;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("2001/1/1 00:00:00");
      tt->struct_vals[1].s = tdrpStrDup("2002/1/2 00:00:00");
    tt++;
    
    // Parameter 'specific_gen_time_ldata_trigger'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("specific_gen_time_ldata_trigger");
    tt->descr = tdrpStrDup("The desired generation time when using the SPECIFIC_GEN_TIME_LDATA triggering mode.");
    tt->help = tdrpStrDup("This is the number of seconds after 0:00 for the desired generation time.");
    tt->val_offset = (char *) &specific_gen_time_ldata_trigger - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'input_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_url");
    tt->descr = tdrpStrDup("Input URL.");
    tt->help = tdrpStrDup("URL for the input MDV files.");
    tt->val_offset = (char *) &input_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::mdv/input");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./grib/output");
    tt++;
    
    // Parameter 'use_ral_subdirs'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_ral_subdirs");
    tt->descr = tdrpStrDup("Flag indicating whether to put output files into a RAL-style subdirectory structure.");
    tt->help = tdrpStrDup("If true and is_forecast_data is set to false, the files will appear in <output_dir>/<YYYYMMDD> where <YYYYMMDD> is the date of the valid time of the data.\nIf true and is_forecast_data is set to true, the files will appear in <output_dir>/<YYYYMMDD>/g_<HHMMSS> where <YYYYMMDD> and <HHMMSS> are the forecast generation date and time.\n");
    tt->val_offset = (char *) &use_ral_subdirs - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_file_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_file_prefix");
    tt->descr = tdrpStrDup("Output file prefix");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_file_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_iso8601_filename_convention'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_iso8601_filename_convention");
    tt->descr = tdrpStrDup("If true the output filename uses the basename, followed by ISO 8601 timestamp convention");
    tt->help = tdrpStrDup("eg. prefix.2008-05-22T14:00:00.nc");
    tt->val_offset = (char *) &use_iso8601_filename_convention - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'is_forecast_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("is_forecast_data");
    tt->descr = tdrpStrDup("If use_iso8601_filename_convention is true and is_forecast_data is true, ISO 8601 timestamp will contain forecast period in terms of hours and minutes");
    tt->help = tdrpStrDup("eg. prefix.2008-05-22T14:00:00.PT01:00.nc");
    tt->val_offset = (char *) &is_forecast_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_ldata_info'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_ldata_info");
    tt->descr = tdrpStrDup("Flag indicating whether to write an ldata info file in the output directory.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_ldata_info - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("ALGORITHM PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'remap_output'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remap_output");
    tt->descr = tdrpStrDup("Flag indicating whether to remap the output fields.");
    tt->help = tdrpStrDup("If TRUE, the output fields will be remapped according to the information in the remap_info parameter.");
    tt->val_offset = (char *) &remap_output - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remap_info'
    // ctype is '_remap_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("remap_info");
    tt->descr = tdrpStrDup("Information on how to remap the output fields. Used only if remap_output is set to TRUE.");
    tt->help = tdrpStrDup("\tproj_type - specifies the output projection to use. Can be either PROJ_LATLON or PROJ_LAMBERT_CONF. Currently, only PROJ_LAMBERT_CONF is supported.\n\tnx, ny - specify the output grid dimensions.\n\tminx, miny - specify the output grid location.\n\tdx, dy - specify the output grid resolution.\n\torigin_lat, origin_lon - specify the output grid origin. Used only if proj_type is set to PROJ_LAMBERT_CONF.\nlat1, lat2 - specify the output grid parameters. Used only if proj_type is set to PROJ_LAMBERT_CONF.");
    tt->val_offset = (char *) &remap_info - &_start_;
    tt->struct_def.name = tdrpStrDup("remap_info_t");
    tt->struct_def.nfields = 11;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("proj_type_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("proj_type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &remap_info.proj_type - (char *) &remap_info;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("proj_type_t");
        tt->struct_def.fields[0].enum_def.nfields = 2;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("PROJ_LATLON");
        tt->struct_def.fields[0].enum_def.fields[0].val = PROJ_LATLON;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("PROJ_LAMBERT_CONF");
        tt->struct_def.fields[0].enum_def.fields[1].val = PROJ_LAMBERT_CONF;
      tt->struct_def.fields[1].ftype = tdrpStrDup("long");
      tt->struct_def.fields[1].fname = tdrpStrDup("nx");
      tt->struct_def.fields[1].ptype = LONG_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &remap_info.nx - (char *) &remap_info;
      tt->struct_def.fields[2].ftype = tdrpStrDup("long");
      tt->struct_def.fields[2].fname = tdrpStrDup("ny");
      tt->struct_def.fields[2].ptype = LONG_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &remap_info.ny - (char *) &remap_info;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("minx");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &remap_info.minx - (char *) &remap_info;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("miny");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &remap_info.miny - (char *) &remap_info;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("dx");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &remap_info.dx - (char *) &remap_info;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("dy");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &remap_info.dy - (char *) &remap_info;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("origin_lat");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &remap_info.origin_lat - (char *) &remap_info;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("origin_lon");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &remap_info.origin_lon - (char *) &remap_info;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("lat1");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &remap_info.lat1 - (char *) &remap_info;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("lat2");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &remap_info.lat2 - (char *) &remap_info;
    tt->n_struct_vals = 11;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = PROJ_LAMBERT_CONF;
      tt->struct_vals[1].l = 301;
      tt->struct_vals[2].l = 225;
      tt->struct_vals[3].d = -3332.14;
      tt->struct_vals[4].d = -588.89;
      tt->struct_vals[5].d = 20.318;
      tt->struct_vals[6].d = 20.318;
      tt->struct_vals[7].d = 25;
      tt->struct_vals[8].d = -95;
      tt->struct_vals[9].d = 25;
      tt->struct_vals[10].d = 25;
    tt++;
    
    // Parameter 'offset_latitude'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("offset_latitude");
    tt->descr = tdrpStrDup("Offset latitude degrees");
    tt->help = tdrpStrDup("Used only when remap_output=TRUE and projection is PROJ_LAMBERT_CONF. Set to 0.0 for no offset latitude adjustment. Not used when use_horiz_limits = TRUE");
    tt->val_offset = (char *) &offset_latitude - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'offset_longitude'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("offset_longitude");
    tt->descr = tdrpStrDup("Offset longitude degrees");
    tt->help = tdrpStrDup("Used only when remap_output=TRUE and projection is PROJ_LAMBERT_CONF. Set to 0.0 for no offset longitude adjustment. Not used when use_horiz_limits=TRUE");
    tt->val_offset = (char *) &offset_longitude - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'use_horiz_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_horiz_limits");
    tt->descr = tdrpStrDup("Flag indicating whether to apply horizontal limits instead of remapping the output fields using the remap_info.");
    tt->help = tdrpStrDup("If TRUE and Lambert Conformal projection, the output fields will be limited by the horizontal boundary (minLat/maxLat/minLon/maxLon).");
    tt->val_offset = (char *) &use_horiz_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'horiz_limits'
    // ctype is '_horiz_limits_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("horiz_limits");
    tt->descr = tdrpStrDup("Bounding box which defines the horizontal limits of the target data.Used only if use_horiz_limits is set to TRUE.");
    tt->help = tdrpStrDup("\tmin_lat - specifies the minimum latitude.\n\tmax_lat - specifies the maximum latitude.\n\tmin_lon - specifies the minimum longitude.\n\tmax_lon - specifies the maximum longitude.");
    tt->val_offset = (char *) &horiz_limits - &_start_;
    tt->struct_def.name = tdrpStrDup("horiz_limits_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_lat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &horiz_limits.min_lat - (char *) &horiz_limits;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_lat");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &horiz_limits.max_lat - (char *) &horiz_limits;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("min_lon");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &horiz_limits.min_lon - (char *) &horiz_limits;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("max_lon");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &horiz_limits.max_lon - (char *) &horiz_limits;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -90;
      tt->struct_vals[1].d = 90;
      tt->struct_vals[2].d = -180;
      tt->struct_vals[3].d = 180;
    tt++;
    
    // Parameter 'grib_tables_version'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("grib_tables_version");
    tt->descr = tdrpStrDup("GRIB tables version number");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grib_tables_version - &_start_;
    tt->single_val.l = 2;
    tt++;
    
    // Parameter 'originating_center'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("originating_center");
    tt->descr = tdrpStrDup("GRIB originating center");
    tt->help = tdrpStrDup("See WMO code table 0. Here are a couple of useful center IDs:\n\t0 = WMO Secretariat\n\t7 = NCEP\n\t8 = NWS Telecommunications Gateway\n\t9 = NWS other\n\t59 = NOAA FSL\n\t60 = NCAR\n");
    tt->val_offset = (char *) &originating_center - &_start_;
    tt->single_val.l = 60;
    tt++;
    
    // Parameter 'subcenter_id'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("subcenter_id");
    tt->descr = tdrpStrDup("GRIB subcenter id");
    tt->help = tdrpStrDup("See WMO code table 0, Part 2. Here are a couple of useful subcenter IDs:\n\t7 = US Weather Service - National Met. Center\n\t8 = US Weather Service - NWS Telecomms Gateway\n\t9 = US Weather Service - Field Stations\n\t57 = US Air Force - Global Weather Center\n\t58 = US Navy - Fleet Numerical Oceanography Center\n\t59 = NOAA Forecast Systems Lab\n");
    tt->val_offset = (char *) &subcenter_id - &_start_;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'generating_process_id'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("generating_process_id");
    tt->descr = tdrpStrDup("Generating process identification number.");
    tt->help = tdrpStrDup("This is a number allocated by the originating center. I'm not sure how this is used operationally.");
    tt->val_offset = (char *) &generating_process_id - &_start_;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'grid_id'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("grid_id");
    tt->descr = tdrpStrDup("Grid identification number.");
    tt->help = tdrpStrDup("This is a number identifies a predefined grid. See the GRIB documentation for help setting value.");
    tt->val_offset = (char *) &grid_id - &_start_;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'time_range_id'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("time_range_id");
    tt->descr = tdrpStrDup("time range indicator.");
    tt->help = tdrpStrDup("This number sets the time range indicator, PDS octet 21. See the GRIB documentation for help setting value.\nThis value is automatically set to 4 for fields where the is_accum flag is set to true.\n");
    tt->val_offset = (char *) &time_range_id - &_start_;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'use_mdv_field_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_mdv_field_name");
    tt->descr = tdrpStrDup("Flag indicating whether to use the mdv_field_name or the mdv_field_num to identify the output fields.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &use_mdv_field_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'forecast_interval_type'
    // ctype is '_forecast_interval_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("forecast_interval_type");
    tt->descr = tdrpStrDup("Forecast interval type");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &forecast_interval_type - &_start_;
    tt->enum_def.name = tdrpStrDup("forecast_interval_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FORECAST_INTERVAL_SECONDS");
      tt->enum_def.fields[0].val = FORECAST_INTERVAL_SECONDS;
      tt->enum_def.fields[1].name = tdrpStrDup("FORECAST_INTERVAL_MINUTES");
      tt->enum_def.fields[1].val = FORECAST_INTERVAL_MINUTES;
      tt->enum_def.fields[2].name = tdrpStrDup("FORECAST_INTERVAL_HOURS");
      tt->enum_def.fields[2].val = FORECAST_INTERVAL_HOURS;
    tt->single_val.e = FORECAST_INTERVAL_SECONDS;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("List of fields to write to the GRIB file.");
    tt->help = tdrpStrDup("\tmdv_field_name - Field name of the field in the MDV file. Used only if use_mdv_field_name is set to TRUE.\n\tmdv_field_num - Field number (the first field is 0) of the field in the MDV file.Used only if use_mdv_field_name is set to FALSE.\n\tgrib_code - GRIB code to use for the field in the output file.\n\tprecision - Number of decimal places to store in the GRIB file.\n\tmax_bit_length - Maximum number of bits used to store data in the\nGRIB file. If a smaller number of bits can represent the data, it\nwill be used. If value is -1, the width is dynamiclly determined.\tdata_convert_type - Flag indicating what type of units conversion to perform on the MDV data before writing it to the GRIB file.\n\tdata_convert_parameter - Parameter used in data conversion:\n\t\tDATA_CONVERT_NONE - parameter not used.\n\t\tDATA_CONVERT_MULTIPLY - the MDV values are multiplied by this value before being written to the GRIB file.\n\toverride_vert_level - flag indicating whether to override the vertical level information (octets 10-12 of the PDS) in the output file.\n\tvert_level_type - the value to use for octet 10 (the vertical level type) of the PDS. Used only if override_vert_level is set to true.\n\tvert_level_bottom - the vertical level bottom value for the output PDS. How this value is used depends on how the vert_level_type value is set -- see GRIB documentation. Used only if override_vert_level is set to true.\n\tvert_level_top - the vertical level top value for the output PDS. How this value is used depends on how the vert_level_type value is set -- see GRIB documentation. Used only if override_vert_level is set to true.\n\tdata_addend - This value will be added to the data values; the default addend is 0.\n\tfield_type - Value indicating type of field. If this is a FIELD_TYPE_ACCUM or FIELD_TYPE_AVG field, the GRIB file forecast period 1 field contains the offset of the field start time from the timestamp of the file and the forecast period 2 field contains the offset of the end time.\n\taccum_secs - The accumulation period in seconds. Used only if is_accum_field is set to true.\n\toverride_grib_tables_version - Used to assign a different\n grib_table_version number for a particular field. If set to -1\n the the parameter is ignored.\n");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 15;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("mdv_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->mdv_field_name - (char *) _output_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("mdv_field_num");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->mdv_field_num - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("grib_code");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->grib_code - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("precision");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->precision - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("max_bit_length");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->max_bit_length - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("data_convert_type_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("data_convert_type");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->data_convert_type - (char *) _output_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("data_convert_type_t");
        tt->struct_def.fields[5].enum_def.nfields = 2;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("DATA_CONVERT_NONE");
        tt->struct_def.fields[5].enum_def.fields[0].val = DATA_CONVERT_NONE;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("DATA_CONVERT_MULTIPLY");
        tt->struct_def.fields[5].enum_def.fields[1].val = DATA_CONVERT_MULTIPLY;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("data_convert_parameter");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_fields->data_convert_parameter - (char *) _output_fields;
      tt->struct_def.fields[7].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[7].fname = tdrpStrDup("override_vert_level");
      tt->struct_def.fields[7].ptype = BOOL_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_output_fields->override_vert_level - (char *) _output_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("int");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_level_type");
      tt->struct_def.fields[8].ptype = INT_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_output_fields->vert_level_type - (char *) _output_fields;
      tt->struct_def.fields[9].ftype = tdrpStrDup("int");
      tt->struct_def.fields[9].fname = tdrpStrDup("vert_level_bottom");
      tt->struct_def.fields[9].ptype = INT_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_output_fields->vert_level_bottom - (char *) _output_fields;
      tt->struct_def.fields[10].ftype = tdrpStrDup("int");
      tt->struct_def.fields[10].fname = tdrpStrDup("vert_level_top");
      tt->struct_def.fields[10].ptype = INT_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_output_fields->vert_level_top - (char *) _output_fields;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("data_addend");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_output_fields->data_addend - (char *) _output_fields;
      tt->struct_def.fields[12].ftype = tdrpStrDup("field_type_t");
      tt->struct_def.fields[12].fname = tdrpStrDup("field_type");
      tt->struct_def.fields[12].ptype = ENUM_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_output_fields->field_type - (char *) _output_fields;
        tt->struct_def.fields[12].enum_def.name = tdrpStrDup("field_type_t");
        tt->struct_def.fields[12].enum_def.nfields = 3;
        tt->struct_def.fields[12].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[12].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[12].enum_def.fields[0].name = tdrpStrDup("FIELD_TYPE_NORMAL");
        tt->struct_def.fields[12].enum_def.fields[0].val = FIELD_TYPE_NORMAL;
        tt->struct_def.fields[12].enum_def.fields[1].name = tdrpStrDup("FIELD_TYPE_ACCUM");
        tt->struct_def.fields[12].enum_def.fields[1].val = FIELD_TYPE_ACCUM;
        tt->struct_def.fields[12].enum_def.fields[2].name = tdrpStrDup("FIELD_TYPE_AVG");
        tt->struct_def.fields[12].enum_def.fields[2].val = FIELD_TYPE_AVG;
      tt->struct_def.fields[13].ftype = tdrpStrDup("int");
      tt->struct_def.fields[13].fname = tdrpStrDup("accum_secs");
      tt->struct_def.fields[13].ptype = INT_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_output_fields->accum_secs - (char *) _output_fields;
      tt->struct_def.fields[14].ftype = tdrpStrDup("int");
      tt->struct_def.fields[14].fname = tdrpStrDup("override_grib_tables_version");
      tt->struct_def.fields[14].ptype = INT_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &_output_fields->override_grib_tables_version - (char *) _output_fields;
    tt->n_struct_vals = 15;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("radar/ltg");
      tt->struct_vals[1].i = 0;
      tt->struct_vals[2].i = 257;
      tt->struct_vals[3].i = 2;
      tt->struct_vals[4].i = -1;
      tt->struct_vals[5].e = DATA_CONVERT_NONE;
      tt->struct_vals[6].d = 0;
      tt->struct_vals[7].b = pFALSE;
      tt->struct_vals[8].i = 0;
      tt->struct_vals[9].i = 0;
      tt->struct_vals[10].i = 0;
      tt->struct_vals[11].d = 0;
      tt->struct_vals[12].e = FIELD_TYPE_NORMAL;
      tt->struct_vals[13].i = 0;
      tt->struct_vals[14].i = -1;
    tt++;
    
    // Parameter 'all_fields_required'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("all_fields_required");
    tt->descr = tdrpStrDup("Flag indicating whether to create the output GRIB file if not all of the fields are available in the MDV file.");
    tt->help = tdrpStrDup("If true, all fields specified in the output_fields list must be present for the GRIB file to be created.");
    tt->val_offset = (char *) &all_fields_required - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
