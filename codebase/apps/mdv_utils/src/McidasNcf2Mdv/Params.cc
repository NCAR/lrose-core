/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program McidasNcf2Mdv
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Program name: McidasNcf2Mdv");
    tt->comment_text = tdrpStrDup("McidasNcf2Mdv reads netCDF files containing satellite data written by a McIdas system, and converts it into MDV format. It is assumed that data from only a single band (field) exists in the file.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'reg_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("reg_interval");
    tt->descr = tdrpStrDup("Registration interval.");
    tt->help = tdrpStrDup("The number of seconds between expected procmap registrations.");
    tt->val_offset = (char *) &reg_interval - &_start_;
    tt->single_val.i = 60;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in FILELIST mode, at least) MUST contain a day-directory below the data file -- ./data_file.mdv will not work as a file path");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Directory for input data.");
    tt->help = tdrpStrDup("This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, the file paths are specified on the command line.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("raw/input");
    tt++;
    
    // Parameter 'use_ldata_info_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_ldata_info_file");
    tt->descr = tdrpStrDup("Option to use _latest_data_info file as input trigger.");
    tt->help = tdrpStrDup("REALTIME mode only. If true, waits on _latest_data_info file. If false, scans the directory for new file.");
    tt->val_offset = (char *) &use_ldata_info_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_realtime_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_age");
    tt->descr = tdrpStrDup("Max valid age of rdata input files in realtime mode (secs)");
    tt->help = tdrpStrDup("This the max valid age for an incoming file. The program will wait for a data file more recent than this age.");
    tt->val_offset = (char *) &max_realtime_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'process_latest_file_only'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("process_latest_file_only");
    tt->descr = tdrpStrDup("Option to use only the latest file to have arrived.");
    tt->help = tdrpStrDup("REALTIME mode only. If true, will process only the latest file on startup, if the file has an age less than max_realtime_age. If false, on startup will process all files with age less than max_realtime_age.");
    tt->val_offset = (char *) &process_latest_file_only - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'file_name_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("file_name_ext");
    tt->descr = tdrpStrDup("Specify the extension of the files to be read.");
    tt->help = tdrpStrDup("If blank, all extensions will be used.");
    tt->val_offset = (char *) &file_name_ext - &_start_;
    tt->single_val.s = tdrpStrDup("nc");
    tt++;
    
    // Parameter 'file_name_substr'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("file_name_substr");
    tt->descr = tdrpStrDup("Specify a seach string for the names of the files to be read.");
    tt->help = tdrpStrDup("If blank, no check will be performed.");
    tt->val_offset = (char *) &file_name_substr - &_start_;
    tt->single_val.s = tdrpStrDup("NCF");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("NETCDF dimension and variable names");
    tt->comment_text = tdrpStrDup("Specify the names used in the netCDF file for dimensions and variables, since they can vary depending on the application used to create the file.");
    tt++;
    
    // Parameter 'netcdf_dim_n_lines'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_dim_n_lines");
    tt->descr = tdrpStrDup("name for netCDF dimension for number of lines.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_dim_n_lines - &_start_;
    tt->single_val.s = tdrpStrDup("lines");
    tt++;
    
    // Parameter 'netcdf_dim_n_elems'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_dim_n_elems");
    tt->descr = tdrpStrDup("name for netCDF dimension for number of elements (pixels across image).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_dim_n_elems - &_start_;
    tt->single_val.s = tdrpStrDup("elems");
    tt++;
    
    // Parameter 'netcdf_dim_n_bands'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_dim_n_bands");
    tt->descr = tdrpStrDup("name for netCDF dimension for number of bands.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_dim_n_bands - &_start_;
    tt->single_val.s = tdrpStrDup("bands");
    tt++;
    
    // Parameter 'netcdf_var_image_date'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_image_date");
    tt->descr = tdrpStrDup("name for netCDF variable for image date.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_image_date - &_start_;
    tt->single_val.s = tdrpStrDup("imageDate");
    tt++;
    
    // Parameter 'netcdf_var_image_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_image_time");
    tt->descr = tdrpStrDup("name for netCDF variable for image time.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_image_time - &_start_;
    tt->single_val.s = tdrpStrDup("imageTime");
    tt++;
    
    // Parameter 'netcdf_var_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_time");
    tt->descr = tdrpStrDup("name for netCDF variable for time.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_time - &_start_;
    tt->single_val.s = tdrpStrDup("time");
    tt++;
    
    // Parameter 'netcdf_var_line_res'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_line_res");
    tt->descr = tdrpStrDup("name for netCDF variable for line resolution.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_line_res - &_start_;
    tt->single_val.s = tdrpStrDup("lineRes");
    tt++;
    
    // Parameter 'netcdf_var_prefix_size'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_prefix_size");
    tt->descr = tdrpStrDup("name for netCDF variable for line prefix size.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_prefix_size - &_start_;
    tt->single_val.s = tdrpStrDup("prefixSize");
    tt++;
    
    // Parameter 'netcdf_var_elem_res'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_elem_res");
    tt->descr = tdrpStrDup("name for netCDF variable for element resolution.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_elem_res - &_start_;
    tt->single_val.s = tdrpStrDup("elemRes");
    tt++;
    
    // Parameter 'netcdf_var_image_data'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_image_data");
    tt->descr = tdrpStrDup("name for netCDF variable for image_data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_image_data - &_start_;
    tt->single_val.s = tdrpStrDup("data");
    tt++;
    
    // Parameter 'netcdf_var_data_width'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_data_width");
    tt->descr = tdrpStrDup("name for netCDF variable for width of image data in bytes.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_data_width - &_start_;
    tt->single_val.s = tdrpStrDup("data_width");
    tt++;
    
    // Parameter 'netcdf_var_latitude'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_latitude");
    tt->descr = tdrpStrDup("name for netCDF variable for latitude.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_latitude - &_start_;
    tt->single_val.s = tdrpStrDup("latitude");
    tt++;
    
    // Parameter 'netcdf_var_longitude'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_longitude");
    tt->descr = tdrpStrDup("name for netCDF variable for longitude.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_longitude - &_start_;
    tt->single_val.s = tdrpStrDup("longitude");
    tt++;
    
    // Parameter 'netcdf_var_creation_date'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_creation_date");
    tt->descr = tdrpStrDup("name for netCDF variable for creation date.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_creation_date - &_start_;
    tt->single_val.s = tdrpStrDup("crDate");
    tt++;
    
    // Parameter 'netcdf_var_creation_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_creation_time");
    tt->descr = tdrpStrDup("name for netCDF variable for creation time.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_creation_time - &_start_;
    tt->single_val.s = tdrpStrDup("crTime");
    tt++;
    
    // Parameter 'netcdf_var_sensor_id'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_sensor_id");
    tt->descr = tdrpStrDup("name for netCDF variable for sensor ID.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_sensor_id - &_start_;
    tt->single_val.s = tdrpStrDup("sensorID");
    tt++;
    
    // Parameter 'netcdf_var_audit_trail'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("netcdf_var_audit_trail");
    tt->descr = tdrpStrDup("name for netCDF variable for audit trail, if available.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &netcdf_var_audit_trail - &_start_;
    tt->single_val.s = tdrpStrDup("auditTrail");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DATASET TYPE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'datasets'
    // ctype is '_dataset_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("datasets");
    tt->descr = tdrpStrDup("Details applicable to each input dataset type.");
    tt->help = tdrpStrDup("Each dataset contains a single field. We look for the name_sub_string in the file name. If found, those details are applied to that dataset. If a 0-length sub string is supplied, it will be used for all files for which a valid sub string is not found. The data_scale and data_offset are applied to the data dataset, to scale the data appropriately and allow you to change units. If set to 1.0 and 0.0 respectively, no transformation will occur. The grid parameters are also set individually for each data set.");
    tt->array_offset = (char *) &_datasets - &_start_;
    tt->array_n_offset = (char *) &datasets_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(dataset_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("dataset_t");
    tt->struct_def.nfields = 13;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("file_name_sub_string");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_datasets->file_name_sub_string - (char *) _datasets;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_datasets->field_name - (char *) _datasets;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("field_name_long");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_datasets->field_name_long - (char *) _datasets;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("units");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_datasets->units - (char *) _datasets;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("data_scale");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_datasets->data_scale - (char *) _datasets;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("data_offset");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_datasets->data_offset - (char *) _datasets;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("grid_nx");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_datasets->grid_nx - (char *) _datasets;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("grid_ny");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_datasets->grid_ny - (char *) _datasets;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("grid_minx");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_datasets->grid_minx - (char *) _datasets;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("grid_miny");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_datasets->grid_miny - (char *) _datasets;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("grid_dx");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_datasets->grid_dx - (char *) _datasets;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("grid_dy");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_datasets->grid_dy - (char *) _datasets;
      tt->struct_def.fields[12].ftype = tdrpStrDup("string");
      tt->struct_def.fields[12].fname = tdrpStrDup("output_url");
      tt->struct_def.fields[12].ptype = STRING_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_datasets->output_url - (char *) _datasets;
    tt->n_struct_vals = 39;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("ch1");
      tt->struct_vals[1].s = tdrpStrDup("VIS");
      tt->struct_vals[2].s = tdrpStrDup("Visible");
      tt->struct_vals[3].s = tdrpStrDup("Albedo");
      tt->struct_vals[4].d = 1;
      tt->struct_vals[5].d = 0;
      tt->struct_vals[6].i = 1200;
      tt->struct_vals[7].i = 1200;
      tt->struct_vals[8].d = -600;
      tt->struct_vals[9].d = -600;
      tt->struct_vals[10].d = 1;
      tt->struct_vals[11].d = 1;
      tt->struct_vals[12].s = tdrpStrDup("./output/vis");
      tt->struct_vals[13].s = tdrpStrDup("ch2");
      tt->struct_vals[14].s = tdrpStrDup("IR");
      tt->struct_vals[15].s = tdrpStrDup("Near IR");
      tt->struct_vals[16].s = tdrpStrDup("C");
      tt->struct_vals[17].d = 1;
      tt->struct_vals[18].d = -273.15;
      tt->struct_vals[19].i = 300;
      tt->struct_vals[20].i = 300;
      tt->struct_vals[21].d = -600;
      tt->struct_vals[22].d = -600;
      tt->struct_vals[23].d = 4;
      tt->struct_vals[24].d = 4;
      tt->struct_vals[25].s = tdrpStrDup("./output/ir");
      tt->struct_vals[26].s = tdrpStrDup("ch4");
      tt->struct_vals[27].s = tdrpStrDup("WV");
      tt->struct_vals[28].s = tdrpStrDup("Water Vapor");
      tt->struct_vals[29].s = tdrpStrDup("C");
      tt->struct_vals[30].d = 1;
      tt->struct_vals[31].d = -273.15;
      tt->struct_vals[32].i = 300;
      tt->struct_vals[33].i = 300;
      tt->struct_vals[34].d = -600;
      tt->struct_vals[35].d = -600;
      tt->struct_vals[36].d = 4;
      tt->struct_vals[37].d = 4;
      tt->struct_vals[38].s = tdrpStrDup("./output/wv");
    tt++;
    
    // Parameter 'convert_counts_to_albedo'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("convert_counts_to_albedo");
    tt->descr = tdrpStrDup("Option to compute albedo (%), given raw counts.");
    tt->help = tdrpStrDup("If true, the albedo will be computed by scaling the counts into albedo, and then correcting for sun angle.");
    tt->val_offset = (char *) &convert_counts_to_albedo - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'counts_to_albedo_scale'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("counts_to_albedo_scale");
    tt->descr = tdrpStrDup("Scale factor to apply to convert raw count values into albedo.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &counts_to_albedo_scale - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("OUTPUT TIME STAMPING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'valid_time_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("valid_time_offset");
    tt->descr = tdrpStrDup("Offset added to image time to get valid time (secs)");
    tt->help = tdrpStrDup("The McIdas images are time-stamed at the start of taking data for the image. Generally, MDV files are time-stamped with the end time of the data. So, this offset is added to the image time to give the valid time of the data.");
    tt->val_offset = (char *) &valid_time_offset - &_start_;
    tt->single_val.i = 1800;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("OUTPUT PROJECTION and GRID");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_projection'
    // ctype is '_projection_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_projection");
    tt->descr = tdrpStrDup("Projection for remapping in x,y. See projection param below.");
    tt->help = tdrpStrDup("\tPROJ_LATLON: simple lat/lon grid (Equidistant Cylindrical)\n\tPROJ_FLAT: Azimuthal Equidistant (Radar)\n\tPROJ_LAMBERT_CONF: Lambert Conformal Conic\n\tPROJ_LAMBERT_AZIM: Lambert Azimuthal Equal Area\n\tPROJ_MERCATOR: Mercator - EW orientation\n\tPROJ_TRANS_MERCATOR: Tranverse Mercator - NS orientation\n\tPROJ_POLAR_STEREO: Stereographic- polar aspect\n\tPROJ_OBLIQUE_STEREO: Stereographic - oblique aspect\n\tPROJ_ALBERS: Albers Equal Area Conic\n\tPROJ_VERT_PERSP: Vertical Perspective (satellite view)\n\n");
    tt->val_offset = (char *) &output_projection - &_start_;
    tt->enum_def.name = tdrpStrDup("projection_t");
    tt->enum_def.nfields = 10;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PROJ_LATLON");
      tt->enum_def.fields[0].val = PROJ_LATLON;
      tt->enum_def.fields[1].name = tdrpStrDup("PROJ_LAMBERT_CONF");
      tt->enum_def.fields[1].val = PROJ_LAMBERT_CONF;
      tt->enum_def.fields[2].name = tdrpStrDup("PROJ_MERCATOR");
      tt->enum_def.fields[2].val = PROJ_MERCATOR;
      tt->enum_def.fields[3].name = tdrpStrDup("PROJ_POLAR_STEREO");
      tt->enum_def.fields[3].val = PROJ_POLAR_STEREO;
      tt->enum_def.fields[4].name = tdrpStrDup("PROJ_FLAT");
      tt->enum_def.fields[4].val = PROJ_FLAT;
      tt->enum_def.fields[5].name = tdrpStrDup("PROJ_OBLIQUE_STEREO");
      tt->enum_def.fields[5].val = PROJ_OBLIQUE_STEREO;
      tt->enum_def.fields[6].name = tdrpStrDup("PROJ_TRANS_MERCATOR");
      tt->enum_def.fields[6].val = PROJ_TRANS_MERCATOR;
      tt->enum_def.fields[7].name = tdrpStrDup("PROJ_ALBERS");
      tt->enum_def.fields[7].val = PROJ_ALBERS;
      tt->enum_def.fields[8].name = tdrpStrDup("PROJ_LAMBERT_AZIM");
      tt->enum_def.fields[8].val = PROJ_LAMBERT_AZIM;
      tt->enum_def.fields[9].name = tdrpStrDup("PROJ_VERT_PERSP");
      tt->enum_def.fields[9].val = PROJ_VERT_PERSP;
    tt->single_val.e = PROJ_FLAT;
    tt++;
    
    // Parameter 'preserve_input_geom_for_regular_latlon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("preserve_input_geom_for_regular_latlon");
    tt->descr = tdrpStrDup("Option to preserve the input grid details for regular lat/lon grids.");
    tt->help = tdrpStrDup("If the output projection type is LATLON, and the input data is on a regular latlon grid, the input grid is preserved, and the output grid will match the input grid.");
    tt->val_offset = (char *) &preserve_input_geom_for_regular_latlon - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'proj_rotation'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("proj_rotation");
    tt->descr = tdrpStrDup("Projection grid rotation.");
    tt->help = tdrpStrDup("This applies only to PROJ_FLAT projections.");
    tt->val_offset = (char *) &proj_rotation - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'proj_origin_lat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("proj_origin_lat");
    tt->descr = tdrpStrDup("Projection grid origin latitude.");
    tt->help = tdrpStrDup("This applies to all projections except LATLON.");
    tt->val_offset = (char *) &proj_origin_lat - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'proj_origin_lon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("proj_origin_lon");
    tt->descr = tdrpStrDup("Projection grid origin longitude.");
    tt->help = tdrpStrDup("This applies to all projections except LATLON.");
    tt->val_offset = (char *) &proj_origin_lon - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'proj_lat1'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("proj_lat1");
    tt->descr = tdrpStrDup("Projection grid reference latitude 1.");
    tt->help = tdrpStrDup("This applies to LAMBERT_CONF and ALBERS projections.");
    tt->val_offset = (char *) &proj_lat1 - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'proj_lat2'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("proj_lat2");
    tt->descr = tdrpStrDup("Projection grid reference latitude 2.");
    tt->help = tdrpStrDup("This applies to LAMBERT_CONF and ALBERS projections.");
    tt->val_offset = (char *) &proj_lat2 - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'proj_central_scale'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("proj_central_scale");
    tt->descr = tdrpStrDup("Central scale for remapped projections.");
    tt->help = tdrpStrDup("This applies to POLAR_STEREO and TRANSVERSE_MERCATOR projections.");
    tt->val_offset = (char *) &proj_central_scale - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'proj_tangent_lat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("proj_tangent_lat");
    tt->descr = tdrpStrDup("Projection tangent latitude (deg).");
    tt->help = tdrpStrDup("This applies to OBLIQUE_STEREO only.");
    tt->val_offset = (char *) &proj_tangent_lat - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'proj_tangent_lon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("proj_tangent_lon");
    tt->descr = tdrpStrDup("Projection tangent longitude (deg).");
    tt->help = tdrpStrDup("This applies to OBLIQUE_STEREO and POLAR_STEREO.");
    tt->val_offset = (char *) &proj_tangent_lon - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'proj_pole_is_north'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("proj_pole_is_north");
    tt->descr = tdrpStrDup("Flag indicating stereogtraphic is over the NORTH pole.");
    tt->help = tdrpStrDup("This applies to POLAR_STEREO. If false, the projection is over the south pole.");
    tt->val_offset = (char *) &proj_pole_is_north - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'proj_persp_radius'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("proj_persp_radius");
    tt->descr = tdrpStrDup("Radius of perspective point (km).");
    tt->help = tdrpStrDup("This applies to VERT_PERSP.");
    tt->val_offset = (char *) &proj_persp_radius - &_start_;
    tt->single_val.d = 35786;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("OUTPUT ENCODING AND COMPRESSION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_encoding_type'
    // ctype is '_encoding_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_encoding_type");
    tt->descr = tdrpStrDup("Set output encoding type.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_encoding_type - &_start_;
    tt->enum_def.name = tdrpStrDup("encoding_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ENCODING_INT8");
      tt->enum_def.fields[0].val = ENCODING_INT8;
      tt->enum_def.fields[1].name = tdrpStrDup("ENCODING_INT16");
      tt->enum_def.fields[1].val = ENCODING_INT16;
      tt->enum_def.fields[2].name = tdrpStrDup("ENCODING_FLOAT32");
      tt->enum_def.fields[2].val = ENCODING_FLOAT32;
    tt->single_val.e = ENCODING_INT16;
    tt++;
    
    // Parameter 'output_compression_type'
    // ctype is '_compression_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_compression_type");
    tt->descr = tdrpStrDup("Set output compression type.");
    tt->help = tdrpStrDup("See <toolsa/compress> for details on the compression types.");
    tt->val_offset = (char *) &output_compression_type - &_start_;
    tt->enum_def.name = tdrpStrDup("compression_type_t");
    tt->enum_def.nfields = 7;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("COMPRESSION_NONE");
      tt->enum_def.fields[0].val = COMPRESSION_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("COMPRESSION_RLE");
      tt->enum_def.fields[1].val = COMPRESSION_RLE;
      tt->enum_def.fields[2].name = tdrpStrDup("COMPRESSION_LZO");
      tt->enum_def.fields[2].val = COMPRESSION_LZO;
      tt->enum_def.fields[3].name = tdrpStrDup("COMPRESSION_ZLIB");
      tt->enum_def.fields[3].val = COMPRESSION_ZLIB;
      tt->enum_def.fields[4].name = tdrpStrDup("COMPRESSION_BZIP");
      tt->enum_def.fields[4].val = COMPRESSION_BZIP;
      tt->enum_def.fields[5].name = tdrpStrDup("COMPRESSION_GZIP");
      tt->enum_def.fields[5].val = COMPRESSION_GZIP;
      tt->enum_def.fields[6].name = tdrpStrDup("COMPRESSION_GZIP_VOL");
      tt->enum_def.fields[6].val = COMPRESSION_GZIP_VOL;
    tt->single_val.e = COMPRESSION_GZIP;
    tt++;
    
    // Parameter 'data_set_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_name");
    tt->descr = tdrpStrDup("Name of data set.");
    tt->help = tdrpStrDup("Appears in Mdv master header.");
    tt->val_offset = (char *) &data_set_name - &_start_;
    tt->single_val.s = tdrpStrDup("McIDAS");
    tt++;
    
    // Parameter 'data_set_source'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_source");
    tt->descr = tdrpStrDup("Source of data.");
    tt->help = tdrpStrDup("Appears in Mdv master header.");
    tt->val_offset = (char *) &data_set_source - &_start_;
    tt->single_val.s = tdrpStrDup("Bureau of Meteorology, Australia");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("WRITE ZEBRA NETCDF");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_zebra_netcdf'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_zebra_netcdf");
    tt->descr = tdrpStrDup("Option to write NetCDF files for use in Zebra.");
    tt->help = tdrpStrDup("Zebra uses a specific NetCDF output format.");
    tt->val_offset = (char *) &write_zebra_netcdf - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'zebra_netcdf_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("zebra_netcdf_dir");
    tt->descr = tdrpStrDup("Directory for Zebra NetCDF files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zebra_netcdf_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/zebra/sat");
    tt++;
    
    // Parameter 'zebra_write_to_day_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("zebra_write_to_day_dir");
    tt->descr = tdrpStrDup("Option to create a day dir for Zebra data.");
    tt->help = tdrpStrDup("A subdirectory named yyyymmdd will be created for the files.");
    tt->val_offset = (char *) &zebra_write_to_day_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'zebra_datasets'
    // ctype is '_zebra_dataset_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("zebra_datasets");
    tt->descr = tdrpStrDup("Zebra field name details.");
    tt->help = tdrpStrDup("Zebra field data will be written in floats.");
    tt->array_offset = (char *) &_zebra_datasets - &_start_;
    tt->array_n_offset = (char *) &zebra_datasets_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(zebra_dataset_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("zebra_dataset_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("file_name_sub_string");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_zebra_datasets->file_name_sub_string - (char *) _zebra_datasets;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("zebra_data_set_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_zebra_datasets->zebra_data_set_name - (char *) _zebra_datasets;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("zebra_field_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_zebra_datasets->zebra_field_name - (char *) _zebra_datasets;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("ch1");
      tt->struct_vals[1].s = tdrpStrDup("goes_1km");
      tt->struct_vals[2].s = tdrpStrDup("VIS");
      tt->struct_vals[3].s = tdrpStrDup("ch2");
      tt->struct_vals[4].s = tdrpStrDup("goes_4km");
      tt->struct_vals[5].s = tdrpStrDup("IR");
      tt->struct_vals[6].s = tdrpStrDup("ch4");
      tt->struct_vals[7].s = tdrpStrDup("goes_4km");
      tt->struct_vals[8].s = tdrpStrDup("WV");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
