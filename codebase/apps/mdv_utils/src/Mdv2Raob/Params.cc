/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Mdv2Raob
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Read MDV model data, write ASCII files of\nsoundings suitable for reading into RAOBs.\nAssuming you are running this on MM5 MDV data, you\nshould ask for at least the following fields in your\nMM5Ingest param file :\n\n   PRESSURE_FIELD\n   TC_FIELD\n   DEWPT_FIELD\n   WSPD_FIELD\n   WDIR_FIELD\n   Z_FIELD\n   T2C_FIELD\n   DEWPT2_FIELD\n   WSPD10_FIELD\n   WDIR10_FIELD\n   MSLP2_FIELD\n   TERRAIN_FIELD\n\nNiles Oien March 2008.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'TriggerUrl'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("TriggerUrl");
    tt->descr = tdrpStrDup("URL to trigger off, typically of the form\nmdvp:://host.domain:[port]:dir/dir");
    tt->help = tdrpStrDup("Program runs when new data appear here.");
    tt->val_offset = (char *) &TriggerUrl - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::mdv/input");
    tt++;
    
    // Parameter 'OutDir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("OutDir");
    tt->descr = tdrpStrDup("Output directory");
    tt->help = tdrpStrDup("Data are written here.");
    tt->val_offset = (char *) &OutDir - &_start_;
    tt->single_val.s = tdrpStrDup("/some/directory/structure");
    tt++;
    
    // Parameter 'Instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("Instance");
    tt->descr = tdrpStrDup("Instance to check in to Procmap with");
    tt->help = tdrpStrDup("Set to something unique.");
    tt->val_offset = (char *) &Instance - &_start_;
    tt->single_val.s = tdrpStrDup("primary");
    tt++;
    
    // Parameter 'Mode'
    // ctype is '_mode'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("Mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Archive mode automatically invoked by -interval option.");
    tt->val_offset = (char *) &Mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'MaxRealtimeValidAge'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("MaxRealtimeValidAge");
    tt->descr = tdrpStrDup("Maximum valid age for files");
    tt->help = tdrpStrDup("REALTIME mode only.");
    tt->val_offset = (char *) &MaxRealtimeValidAge - &_start_;
    tt->single_val.i = 1800;
    tt++;
    
    // Parameter 'Debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("Debug");
    tt->descr = tdrpStrDup("Set to print debugging messages.");
    tt->help = tdrpStrDup("Defaults to FALSE");
    tt->val_offset = (char *) &Debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'samplePoints'
    // ctype is '_samplePoint_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("samplePoints");
    tt->descr = tdrpStrDup("List of points to output data for. The id string is\nused in the output filename, probably best to avoid spaces\nor other unusual characters.");
    tt->help = tdrpStrDup("Set as appropriate for your region.");
    tt->array_offset = (char *) &_samplePoints - &_start_;
    tt->array_n_offset = (char *) &samplePoints_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(samplePoint_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("samplePoint_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("lat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_samplePoints->lat - (char *) _samplePoints;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_samplePoints->lon - (char *) _samplePoints;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("id");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_samplePoints->id - (char *) _samplePoints;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("wmoNum");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_samplePoints->wmoNum - (char *) _samplePoints;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("wbanNum");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_samplePoints->wbanNum - (char *) _samplePoints;
    tt->n_struct_vals = 5;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 40;
      tt->struct_vals[1].d = -90;
      tt->struct_vals[2].s = tdrpStrDup("KDEN");
      tt->struct_vals[3].i = 77777;
      tt->struct_vals[4].i = 2300;
    tt++;
    
    // Parameter 'mandatedLevels'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("mandatedLevels");
    tt->descr = tdrpStrDup("List of manditory pressure levels.");
    tt->help = tdrpStrDup("Default should be fine. Must be in order of decreasing pressure.");
    tt->array_offset = (char *) &_mandatedLevels - &_start_;
    tt->array_n_offset = (char *) &mandatedLevels_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 8;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 1000;
      tt->array_vals[1].d = 925;
      tt->array_vals[2].d = 850;
      tt->array_vals[3].d = 700;
      tt->array_vals[4].d = 500;
      tt->array_vals[5].d = 400;
      tt->array_vals[6].d = 300;
      tt->array_vals[7].d = 250;
    tt++;
    
    // Parameter 'mandatedInterpolate'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("mandatedInterpolate");
    tt->descr = tdrpStrDup("Option to interpolate to manditory pressure levels.");
    tt->help = tdrpStrDup("If TRUE then model data will be interpolated onto the\nspecified manditory levels. If FALSE the manditory levels will\nbe left with missing data unless they co-incide with model output.");
    tt->val_offset = (char *) &mandatedInterpolate - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'windowsEndOfLine'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("windowsEndOfLine");
    tt->descr = tdrpStrDup("Option to end lines windows (or DOS) style, that is,\nif this is TRUE end lines with carriage return and linefeed\nrather than just linefeed as is done on UNIX.");
    tt->help = tdrpStrDup("RAOBS usually runs on windows, so we want the files\nto have windows style formatting when they are on the windows\nbox. The question is if this program should write the\nwindows format directly or if the files will be reformatted\non being sent to the windows box (as would be the case if\nFTP is used in ASCII mode). Set this appropriate to your transfer\nmechanism.");
    tt->val_offset = (char *) &windowsEndOfLine - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'inputFieldNameList'
    // ctype is '_inputFieldnameList_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("inputFieldNameList");
    tt->descr = tdrpStrDup("List of input field names, scales, biases.");
    tt->help = tdrpStrDup("Default is OK for MM5. The point of the scale\nand bias is to allow a change of units.");
    tt->val_offset = (char *) &inputFieldNameList - &_start_;
    tt->struct_def.name = tdrpStrDup("inputFieldnameList_t");
    tt->struct_def.nfields = 32;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("pFieldName");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &inputFieldNameList.pFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("pScale");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &inputFieldNameList.pScale - (char *) &inputFieldNameList;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("pBias");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &inputFieldNameList.pBias - (char *) &inputFieldNameList;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("tFieldName");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &inputFieldNameList.tFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("tScale");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &inputFieldNameList.tScale - (char *) &inputFieldNameList;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("tBias");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &inputFieldNameList.tBias - (char *) &inputFieldNameList;
      tt->struct_def.fields[6].ftype = tdrpStrDup("string");
      tt->struct_def.fields[6].fname = tdrpStrDup("zFieldName");
      tt->struct_def.fields[6].ptype = STRING_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &inputFieldNameList.zFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("zScale");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &inputFieldNameList.zScale - (char *) &inputFieldNameList;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("zBias");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &inputFieldNameList.zBias - (char *) &inputFieldNameList;
      tt->struct_def.fields[9].ftype = tdrpStrDup("string");
      tt->struct_def.fields[9].fname = tdrpStrDup("speedFieldName");
      tt->struct_def.fields[9].ptype = STRING_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &inputFieldNameList.speedFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("speedScale");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &inputFieldNameList.speedScale - (char *) &inputFieldNameList;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("speedBias");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &inputFieldNameList.speedBias - (char *) &inputFieldNameList;
      tt->struct_def.fields[12].ftype = tdrpStrDup("string");
      tt->struct_def.fields[12].fname = tdrpStrDup("dirFieldName");
      tt->struct_def.fields[12].ptype = STRING_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &inputFieldNameList.dirFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[13].ftype = tdrpStrDup("string");
      tt->struct_def.fields[13].fname = tdrpStrDup("dewFieldName");
      tt->struct_def.fields[13].ptype = STRING_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &inputFieldNameList.dewFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[14].ftype = tdrpStrDup("double");
      tt->struct_def.fields[14].fname = tdrpStrDup("dewScale");
      tt->struct_def.fields[14].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &inputFieldNameList.dewScale - (char *) &inputFieldNameList;
      tt->struct_def.fields[15].ftype = tdrpStrDup("double");
      tt->struct_def.fields[15].fname = tdrpStrDup("dewBias");
      tt->struct_def.fields[15].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[15].rel_offset = 
        (char *) &inputFieldNameList.dewBias - (char *) &inputFieldNameList;
      tt->struct_def.fields[16].ftype = tdrpStrDup("string");
      tt->struct_def.fields[16].fname = tdrpStrDup("sfcTfieldName");
      tt->struct_def.fields[16].ptype = STRING_TYPE;
      tt->struct_def.fields[16].rel_offset = 
        (char *) &inputFieldNameList.sfcTfieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[17].ftype = tdrpStrDup("double");
      tt->struct_def.fields[17].fname = tdrpStrDup("sfcTscale");
      tt->struct_def.fields[17].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[17].rel_offset = 
        (char *) &inputFieldNameList.sfcTscale - (char *) &inputFieldNameList;
      tt->struct_def.fields[18].ftype = tdrpStrDup("double");
      tt->struct_def.fields[18].fname = tdrpStrDup("sfcTbias");
      tt->struct_def.fields[18].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[18].rel_offset = 
        (char *) &inputFieldNameList.sfcTbias - (char *) &inputFieldNameList;
      tt->struct_def.fields[19].ftype = tdrpStrDup("string");
      tt->struct_def.fields[19].fname = tdrpStrDup("sfcDewFieldName");
      tt->struct_def.fields[19].ptype = STRING_TYPE;
      tt->struct_def.fields[19].rel_offset = 
        (char *) &inputFieldNameList.sfcDewFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[20].ftype = tdrpStrDup("double");
      tt->struct_def.fields[20].fname = tdrpStrDup("sfcDewScale");
      tt->struct_def.fields[20].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[20].rel_offset = 
        (char *) &inputFieldNameList.sfcDewScale - (char *) &inputFieldNameList;
      tt->struct_def.fields[21].ftype = tdrpStrDup("double");
      tt->struct_def.fields[21].fname = tdrpStrDup("sfcDewBias");
      tt->struct_def.fields[21].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[21].rel_offset = 
        (char *) &inputFieldNameList.sfcDewBias - (char *) &inputFieldNameList;
      tt->struct_def.fields[22].ftype = tdrpStrDup("string");
      tt->struct_def.fields[22].fname = tdrpStrDup("sfcSpeedFieldName");
      tt->struct_def.fields[22].ptype = STRING_TYPE;
      tt->struct_def.fields[22].rel_offset = 
        (char *) &inputFieldNameList.sfcSpeedFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[23].ftype = tdrpStrDup("double");
      tt->struct_def.fields[23].fname = tdrpStrDup("sfcSpeedScale");
      tt->struct_def.fields[23].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[23].rel_offset = 
        (char *) &inputFieldNameList.sfcSpeedScale - (char *) &inputFieldNameList;
      tt->struct_def.fields[24].ftype = tdrpStrDup("double");
      tt->struct_def.fields[24].fname = tdrpStrDup("sfcSpeedBias");
      tt->struct_def.fields[24].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[24].rel_offset = 
        (char *) &inputFieldNameList.sfcSpeedBias - (char *) &inputFieldNameList;
      tt->struct_def.fields[25].ftype = tdrpStrDup("string");
      tt->struct_def.fields[25].fname = tdrpStrDup("sfcDirFieldName");
      tt->struct_def.fields[25].ptype = STRING_TYPE;
      tt->struct_def.fields[25].rel_offset = 
        (char *) &inputFieldNameList.sfcDirFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[26].ftype = tdrpStrDup("string");
      tt->struct_def.fields[26].fname = tdrpStrDup("sfcPresFieldName");
      tt->struct_def.fields[26].ptype = STRING_TYPE;
      tt->struct_def.fields[26].rel_offset = 
        (char *) &inputFieldNameList.sfcPresFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[27].ftype = tdrpStrDup("double");
      tt->struct_def.fields[27].fname = tdrpStrDup("sfcPresScale");
      tt->struct_def.fields[27].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[27].rel_offset = 
        (char *) &inputFieldNameList.sfcPresScale - (char *) &inputFieldNameList;
      tt->struct_def.fields[28].ftype = tdrpStrDup("double");
      tt->struct_def.fields[28].fname = tdrpStrDup("sfcPresBias");
      tt->struct_def.fields[28].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[28].rel_offset = 
        (char *) &inputFieldNameList.sfcPresBias - (char *) &inputFieldNameList;
      tt->struct_def.fields[29].ftype = tdrpStrDup("string");
      tt->struct_def.fields[29].fname = tdrpStrDup("terrainFieldName");
      tt->struct_def.fields[29].ptype = STRING_TYPE;
      tt->struct_def.fields[29].rel_offset = 
        (char *) &inputFieldNameList.terrainFieldName - (char *) &inputFieldNameList;
      tt->struct_def.fields[30].ftype = tdrpStrDup("double");
      tt->struct_def.fields[30].fname = tdrpStrDup("terrainScale");
      tt->struct_def.fields[30].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[30].rel_offset = 
        (char *) &inputFieldNameList.terrainScale - (char *) &inputFieldNameList;
      tt->struct_def.fields[31].ftype = tdrpStrDup("double");
      tt->struct_def.fields[31].fname = tdrpStrDup("terrainBias");
      tt->struct_def.fields[31].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[31].rel_offset = 
        (char *) &inputFieldNameList.terrainBias - (char *) &inputFieldNameList;
    tt->n_struct_vals = 32;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("pressure");
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].s = tdrpStrDup("Temp");
      tt->struct_vals[4].d = 1;
      tt->struct_vals[5].d = 0;
      tt->struct_vals[6].s = tdrpStrDup("z");
      tt->struct_vals[7].d = 1;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].s = tdrpStrDup("Speed");
      tt->struct_vals[10].d = 1;
      tt->struct_vals[11].d = 0;
      tt->struct_vals[12].s = tdrpStrDup("Wdir");
      tt->struct_vals[13].s = tdrpStrDup("DewPt");
      tt->struct_vals[14].d = 1;
      tt->struct_vals[15].d = 0;
      tt->struct_vals[16].s = tdrpStrDup("T2C");
      tt->struct_vals[17].d = 1;
      tt->struct_vals[18].d = 0;
      tt->struct_vals[19].s = tdrpStrDup("DewPt2");
      tt->struct_vals[20].d = 1;
      tt->struct_vals[21].d = 0;
      tt->struct_vals[22].s = tdrpStrDup("Speed10");
      tt->struct_vals[23].d = 1;
      tt->struct_vals[24].d = 0;
      tt->struct_vals[25].s = tdrpStrDup("Wdir10");
      tt->struct_vals[26].s = tdrpStrDup("pressure2");
      tt->struct_vals[27].d = 1;
      tt->struct_vals[28].d = 0;
      tt->struct_vals[29].s = tdrpStrDup("terrain");
      tt->struct_vals[30].d = 1;
      tt->struct_vals[31].d = 0;
    tt++;
    
    // Parameter 'convertSfcPres'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("convertSfcPres");
    tt->descr = tdrpStrDup("Option to treat surface pressure field as if it is mean\nsea level pressure and adjust it back so that it is\nstation pressure.");
    tt->help = tdrpStrDup("Set to TRUE if your surface pressure is appropriate\nfor sea level.");
    tt->val_offset = (char *) &convertSfcPres - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sfcDewPtIsRH'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sfcDewPtIsRH");
    tt->descr = tdrpStrDup("If you don't have a dewpoint field at the surface, but\ndo have temp and rh, then set the surface dew point field name to\nbe the RH field name and then set this to TRUE.");
    tt->help = tdrpStrDup("May have to do this with WRF data.");
    tt->val_offset = (char *) &sfcDewPtIsRH - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'aloftDewPtIsRH'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("aloftDewPtIsRH");
    tt->descr = tdrpStrDup("If you don't have a 3D dewpoint field, but\ndo have temp and rh, then set the 3D dew point field name to\nbe the 3D RH field name and then set this to TRUE.");
    tt->help = tdrpStrDup("May have to do this in some cases.");
    tt->val_offset = (char *) &aloftDewPtIsRH - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
