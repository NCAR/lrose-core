/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program surf_interp
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("surf_interp program");
    tt->comment_text = tdrpStrDup("surf_interp performs interpolation on point data at non-uniform grid locations. It produces an MDV file containing the interpolation results.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("primary");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Program may be run in two modes, ARCHIVE and REALTIME. In REALTIME mode, the analysis is performed for each volume scan as it becomes available. In ARCHIVE mode, the file list is obtained from the command line.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'time_trigger_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("time_trigger_interval");
    tt->descr = tdrpStrDup("Interval for TIME_TRIGGER - secs.");
    tt->help = tdrpStrDup("For TIME_TRIGGER, this is the interval between trigger events. In REALTIME mode, a time trigger always occurs on the hour, and at constant intervals thereafter. In ARCHIVE mode the trigger starts at start_time and at constant intervals thereafter.");
    tt->val_offset = (char *) &time_trigger_interval - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'terrain_file'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("terrain_file");
    tt->descr = tdrpStrDup("File of terrain data in LATLON projection.");
    tt->help = tdrpStrDup("Used to correct ceiling for height above sea.");
    tt->val_offset = (char *) &terrain_file - &_start_;
    tt->single_val.s = tdrpStrDup("./terrain.mdv");
    tt++;
    
    // Parameter 'input_source'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_source");
    tt->descr = tdrpStrDup("Input URL");
    tt->help = tdrpStrDup("This is the URL that the station data are read from.");
    tt->val_offset = (char *) &input_source - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/data");
    tt++;
    
    // Parameter 'duration'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("duration");
    tt->descr = tdrpStrDup("Data duration");
    tt->help = tdrpStrDup("This is how far back from the start time to search.");
    tt->val_offset = (char *) &duration - &_start_;
    tt->single_val.i = 5400;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("SOUNDING DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'ReadSoundingClassFiles'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ReadSoundingClassFiles");
    tt->descr = tdrpStrDup("To read from sounding class files or from a\ndatabase.");
    tt->help = tdrpStrDup("By default soundings are read directly from\nclass files in the sounding_dir. Setting\nReadSoundingClassFiles to FALSE causes the soundings\nto be read from an spdb soundings database specified\nby sounding_url - in which case the sounding_look_back,\nsounding_alt_min and sounding_alt_max parameters are\nrelevant, and sounding_dir is ignored.\nNote that all sounding parameters are ignored\nif the lifted index field code (131) is not\nto be interpolated.");
    tt->val_offset = (char *) &ReadSoundingClassFiles - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_url");
    tt->descr = tdrpStrDup("URL of sounding database.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sounding_url - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'sounding_look_back'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sounding_look_back");
    tt->descr = tdrpStrDup("Time (in minutes) to search back for a sounding; Default is 9 hours; max is 24 hours");
    tt->help = tdrpStrDup("This value is overridden by DsSpdbServer when using a hybrid sounding database with search criteria.");
    tt->val_offset = (char *) &sounding_look_back - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 0;
    tt->max_val.i = 1440;
    tt->single_val.i = 540;
    tt++;
    
    // Parameter 'sounding_alt_min'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sounding_alt_min");
    tt->descr = tdrpStrDup("Minimum altitude (in km) for a sounding to be considered valid.");
    tt->help = tdrpStrDup("If the sounding does not include this height, it is skipped.\nSet to include the pressure pres_li if lifted index is desired");
    tt->val_offset = (char *) &sounding_alt_min - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 10;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'sounding_alt_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sounding_alt_max");
    tt->descr = tdrpStrDup("Maximum altitude (in km) for a sounding to be considered valid.");
    tt->help = tdrpStrDup("If the sounding does not include this height, it is skipped.\nSet to include the pressure pres_li if lifted index is desired");
    tt->val_offset = (char *) &sounding_alt_max - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 10;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'sounding_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_dir");
    tt->descr = tdrpStrDup("Directory where sounding files are.");
    tt->help = tdrpStrDup("Used to read sounding data, if any, if ReadSoundingClass is false.");
    tt->val_offset = (char *) &sounding_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./sounding_dir");
    tt++;
    
    // Parameter 'MaxSoundDist'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxSoundDist");
    tt->descr = tdrpStrDup("Maximum distance between origin (SW corner) and Sounding, Km");
    tt->help = tdrpStrDup("If exceeded a message is printed - but calc is still done");
    tt->val_offset = (char *) &MaxSoundDist - &_start_;
    tt->single_val.f = 500;
    tt++;
    
    // Parameter 'MaxSoundTimeDiff'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("MaxSoundTimeDiff");
    tt->descr = tdrpStrDup("Maximum time difference between sounding and data time, days");
    tt->help = tdrpStrDup("If exceeded message is printed but calc is still done");
    tt->val_offset = (char *) &MaxSoundTimeDiff - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'PresLi'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("PresLi");
    tt->descr = tdrpStrDup("Pressure to take temperature from in soundings");
    tt->help = tdrpStrDup("For lifted index");
    tt->val_offset = (char *) &PresLi - &_start_;
    tt->single_val.f = 500;
    tt++;
    
    // Parameter 'ExitOnSoundingError'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ExitOnSoundingError");
    tt->descr = tdrpStrDup("Does not write MDV file if no soundings found within time/space range.");
    tt->help = tdrpStrDup("Only matters for the lift index.");
    tt->val_offset = (char *) &ExitOnSoundingError - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("GRID");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'nx'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("nx");
    tt->descr = tdrpStrDup("Grid size in X");
    tt->help = tdrpStrDup("Number of X points.");
    tt->val_offset = (char *) &nx - &_start_;
    tt->single_val.i = 134;
    tt++;
    
    // Parameter 'ny'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ny");
    tt->descr = tdrpStrDup("Grid size in Y");
    tt->help = tdrpStrDup("Number of Y points.");
    tt->val_offset = (char *) &ny - &_start_;
    tt->single_val.i = 134;
    tt++;
    
    // Parameter 'dx'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("dx");
    tt->descr = tdrpStrDup("Grid spacing in X");
    tt->help = tdrpStrDup("Grid spacing in x, units determined by projection");
    tt->val_offset = (char *) &dx - &_start_;
    tt->single_val.f = 3;
    tt++;
    
    // Parameter 'dy'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("dy");
    tt->descr = tdrpStrDup("Grid spacing in Y");
    tt->help = tdrpStrDup("Grid spacing in y, units determined by projection");
    tt->val_offset = (char *) &dy - &_start_;
    tt->single_val.f = 3;
    tt++;
    
    // Parameter 'lat_origin'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("lat_origin");
    tt->descr = tdrpStrDup("If LAT_LON projection, Latitude of SW corner. If flat earth, Latitude of center.");
    tt->help = tdrpStrDup("Defaults to New York radar");
    tt->val_offset = (char *) &lat_origin - &_start_;
    tt->single_val.f = 38.9753;
    tt++;
    
    // Parameter 'lon_origin'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("lon_origin");
    tt->descr = tdrpStrDup("If LAT_LON projection, Longitude of SW corner. If flat earth, Longitude of center.");
    tt->help = tdrpStrDup("Defaults to New York radar");
    tt->val_offset = (char *) &lon_origin - &_start_;
    tt->single_val.f = -77.477;
    tt++;
    
    // Parameter 'altitude'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("altitude");
    tt->descr = tdrpStrDup("Altitude of sensor");
    tt->help = tdrpStrDup("Defaults to New York (1600.0)");
    tt->val_offset = (char *) &altitude - &_start_;
    tt->single_val.f = 1600;
    tt++;
    
    // Parameter 'flat'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("flat");
    tt->descr = tdrpStrDup("Flat earth projection");
    tt->help = tdrpStrDup("If not use LatLon");
    tt->val_offset = (char *) &flat - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'AllowOutsideTerrain'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("AllowOutsideTerrain");
    tt->descr = tdrpStrDup("Allow terrain MDV file not to cover region");
    tt->help = tdrpStrDup("May be useful for an island.");
    tt->val_offset = (char *) &AllowOutsideTerrain - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output URL.");
    tt->help = tdrpStrDup("The interpolated MDV data is written to this URL.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("./Output");
    tt++;
    
    // Parameter 'dataset_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dataset_name");
    tt->descr = tdrpStrDup("Dataset name");
    tt->help = tdrpStrDup("Radar, wind, temperature etc.");
    tt->val_offset = (char *) &dataset_name - &_start_;
    tt->single_val.s = tdrpStrDup("Radar volume file type 2");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'desired_fields'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("desired_fields");
    tt->descr = tdrpStrDup("Desired field numbers");
    tt->help = tdrpStrDup("FIELD CODES \n Fields codes have the following significance.\n \n  GRIB code    Significance \n \n*  33		U wind\n*  34		V wind\n*  11		Temperature, in C not K\n*  17		Dew point temp, C not K\n  131		Lifted index - requires soundings.\n  52		Relative humidity\n  118		Wind gust - grib code is undefined\n*  1		Pressure\n   13         Potential temperature\n  263		liquid_accum\n   59		precip_rate\n*  20		visibility\n* 153		rvr - Runway visual Range - grib undefined.\n* 154		Cloud height - grib code is undefined.\n* 170		Convergance - calculated from U and V.\n  185         Sea Level corrected ceiling - requires\n               terrain file and needs ceiling to be specified.\n  186         Flight Category\n    5            Terrain from DEM\n  171            Terrain from weather stations.\n   18         Dew point depression\n \n A star (*) indicates that this field is included by default.\n The user specifies GRIB codes on the TDRP command line.\n Soundings are only read if the lifted index (code 131)\n is specified.");
    tt->array_offset = (char *) &_desired_fields - &_start_;
    tt->array_n_offset = (char *) &desired_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 9;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].i = 33;
      tt->array_vals[1].i = 34;
      tt->array_vals[2].i = 11;
      tt->array_vals[3].i = 17;
      tt->array_vals[4].i = 1;
      tt->array_vals[5].i = 20;
      tt->array_vals[6].i = 153;
      tt->array_vals[7].i = 154;
      tt->array_vals[8].i = 170;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("INTERPOLATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'InterpMethod'
    // ctype is '_InterpMethod_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("InterpMethod");
    tt->descr = tdrpStrDup("Interpolation option - choose the interpolation scheme");
    tt->help = tdrpStrDup("Must be the same length as the desired_fields array.\nIf this is not the case, Barnes interpolation is used\nfor all fields.");
    tt->array_offset = (char *) &_InterpMethod - &_start_;
    tt->array_n_offset = (char *) &InterpMethod_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(InterpMethod_t);
    tt->array_n = 1;
    tt->enum_def.name = tdrpStrDup("InterpMethod_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("INTERP_BARNES");
      tt->enum_def.fields[0].val = INTERP_BARNES;
      tt->enum_def.fields[1].name = tdrpStrDup("INTERP_NEAREST");
      tt->enum_def.fields[1].val = INTERP_NEAREST;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].e = INTERP_BARNES;
    tt++;
    
    // Parameter 'MaxAltError'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxAltError");
    tt->descr = tdrpStrDup("Max difference between altitude and terrain for VFR to work");
    tt->help = tdrpStrDup("If negative, no check is made. Units are feet");
    tt->val_offset = (char *) &MaxAltError - &_start_;
    tt->single_val.f = -1;
    tt++;
    
    // Parameter 'MinWeight'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MinWeight");
    tt->descr = tdrpStrDup("Minimum sum of weights in Barnes interpolation for valid data");
    tt->help = tdrpStrDup("If not reached, bad value output - effectively sets radius of influence.");
    tt->val_offset = (char *) &MinWeight - &_start_;
    tt->single_val.f = 0.0001;
    tt++;
    
    // Parameter 'WindowSize'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("WindowSize");
    tt->descr = tdrpStrDup("WindowSize for optional VFR median filter");
    tt->help = tdrpStrDup("Actual tile is 2W +1 by 2W + 1");
    tt->val_offset = (char *) &WindowSize - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'NumPasses'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("NumPasses");
    tt->descr = tdrpStrDup("Number of passes for VFR median filter");
    tt->help = tdrpStrDup("Used to smooth out VFR image");
    tt->val_offset = (char *) &NumPasses - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'MinStations'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("MinStations");
    tt->descr = tdrpStrDup("Minimum number of stations");
    tt->help = tdrpStrDup("If fewer stations report, don't bother.");
    tt->val_offset = (char *) &MinStations - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'MaxInterpDist'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxInterpDist");
    tt->descr = tdrpStrDup("Maximum distance for interpolation to be valid, Km.");
    tt->help = tdrpStrDup("Works in conjunction with minimum weight parameter.");
    tt->val_offset = (char *) &MaxInterpDist - &_start_;
    tt->single_val.f = 50;
    tt++;
    
    // Parameter 'Rscale'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("Rscale");
    tt->descr = tdrpStrDup("Scale radius for interpolations.");
    tt->help = tdrpStrDup("Defaults to half of MaxInterpDist if 0 or less");
    tt->val_offset = (char *) &Rscale - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'UseOutsideRegion'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("UseOutsideRegion");
    tt->descr = tdrpStrDup("Set to TRUE to accept stations outside the grid.");
    tt->help = tdrpStrDup("Default is to only accept stations within the grid.");
    tt->val_offset = (char *) &UseOutsideRegion - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("FLIGHT CATEGORY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'BadCeilingValue'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("BadCeilingValue");
    tt->descr = tdrpStrDup("Value to use if ceiling is missing - if negative, use bad value.");
    tt->help = tdrpStrDup("Default sets both ceiling and flight cat to missingif ceiling is bad");
    tt->val_offset = (char *) &BadCeilingValue - &_start_;
    tt->single_val.f = -1;
    tt++;
    
    // Parameter 'VisThresh'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("VisThresh");
    tt->descr = tdrpStrDup("Thresholds for visibility in flight category, Km");
    tt->help = tdrpStrDup("Must be is ascending order. See comments for CeilThresh");
    tt->array_offset = (char *) &_VisThresh - &_start_;
    tt->array_n_offset = (char *) &VisThresh_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(float);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].f = 0;
      tt->array_vals[1].f = 1.6;
      tt->array_vals[2].f = 5;
    tt++;
    
    // Parameter 'CeilThresh'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("CeilThresh");
    tt->descr = tdrpStrDup("Thresholds for ceiling in flight category, ft");
    tt->help = tdrpStrDup("Must be is ascending order. Every time a ceiling\nand vis criteria is satisfied, 10 is added to the numerical\nvalue of the flight category (which is initialised with\nthe value 10.0). Thus, the maximum numerical value for\nflight category is 10.0 + NumThresholds*10.0.\n\nThe number of thresholds in ceiling and visibilitymust be the same.\n");
    tt->array_offset = (char *) &_CeilThresh - &_start_;
    tt->array_n_offset = (char *) &CeilThresh_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(float);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].f = 0;
      tt->array_vals[1].f = 500;
      tt->array_vals[2].f = 1500;
    tt++;
    
    // Parameter 'MaxVis'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxVis");
    tt->descr = tdrpStrDup("Maximum visibility from a station, Km");
    tt->help = tdrpStrDup("Values greater than this are set to missing.");
    tt->val_offset = (char *) &MaxVis - &_start_;
    tt->single_val.f = 30;
    tt++;
    
    // Parameter 'MaxCeiling'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxCeiling");
    tt->descr = tdrpStrDup("Maximum cloud ceiling from a station, Km");
    tt->help = tdrpStrDup("Values greater than this are set to missing.");
    tt->val_offset = (char *) &MaxCeiling - &_start_;
    tt->single_val.f = 30;
    tt++;
    
    // Parameter 'ReplaceCeiling'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ReplaceCeiling");
    tt->descr = tdrpStrDup("If set to TRUE, ceiling values above ReplaceCeilingThreshold\nare replaced with ReplaceCeilingValue. The reason is that in\nsome systems, a clear sky is reported as a ceiling of 10,000\nfeet - but the terrain may be near 10,000 feet which leads\nto erroneous regions of bad flight cat.");
    tt->help = tdrpStrDup("No such processing occurrs if set to FALSE.");
    tt->val_offset = (char *) &ReplaceCeiling - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ReplaceCeilingThreshold'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("ReplaceCeilingThreshold");
    tt->descr = tdrpStrDup("Cloud ceiling threshold, ft.");
    tt->help = tdrpStrDup("If ReplaceCeiling is TRUE then values of ceiling at or above\nthis value are replaced with ReplaceCeilingValue.");
    tt->val_offset = (char *) &ReplaceCeilingThreshold - &_start_;
    tt->single_val.f = 9500;
    tt++;
    
    // Parameter 'ReplaceCeilingValue'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("ReplaceCeilingValue");
    tt->descr = tdrpStrDup("Cloud ceiling value, ft.");
    tt->help = tdrpStrDup("If ReplaceCeiling is TRUE then values of ceiling at or above\nReplaceCeilingThreshold are replaced with this value.");
    tt->val_offset = (char *) &ReplaceCeilingValue - &_start_;
    tt->single_val.f = 30000;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("CONVERGENCE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'converganceCalcPoints'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("converganceCalcPoints");
    tt->descr = tdrpStrDup("Number of grid points over which convergance will be calculated.");
    tt->help = tdrpStrDup("By default the convergance is calculated using adjacent grid\npoints (converganceCalcPoints = 1). Adjusting this parameter allows\nthe convergance to be calculated over a larger spatial domain.");
    tt->val_offset = (char *) &converganceCalcPoints - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 1;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
