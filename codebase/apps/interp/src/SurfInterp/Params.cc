/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program SurfInterp
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("surfInterp program");
    tt->comment_text = tdrpStrDup("surfInterp performs interpolation on point data at non-uniform grid locations. It produces an MDV file containing the interpolation results.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("primary");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Program may be run in two modes, ARCHIVE and REALTIME");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'time_trigger_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("time_trigger_interval");
    tt->descr = tdrpStrDup("Interval for TIME_TRIGGER - secs.");
    tt->help = tdrpStrDup("For TIME_TRIGGER, this is the interval between trigger events. In REALTIME mode, a time trigger always occurs on the hour, and at constant intervals thereafter. In ARCHIVE mode the trigger starts at start_time and at constant intervals thereafter.");
    tt->val_offset = (char *) &time_trigger_interval - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_terrain_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_terrain_data");
    tt->descr = tdrpStrDup("Option to use terrain data.");
    tt->help = tdrpStrDup("You need terrain data for ceiling computations.");
    tt->val_offset = (char *) &use_terrain_data - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'terrain_file'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("terrain_file");
    tt->descr = tdrpStrDup("File of terrain data in LATLON projection.");
    tt->help = tdrpStrDup("Used to correct ceiling for height above sea.");
    tt->val_offset = (char *) &terrain_file - &_start_;
    tt->single_val.s = tdrpStrDup("./terrain.mdv");
    tt++;
    
    // Parameter 'terrain_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("terrain_field_name");
    tt->descr = tdrpStrDup("Terrain field name");
    tt->help = tdrpStrDup("To use a field number, specify # as first character");
    tt->val_offset = (char *) &terrain_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("#0");
    tt++;
    
    // Parameter 'surface_data_urls'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("surface_data_urls");
    tt->descr = tdrpStrDup("Input URLs");
    tt->help = tdrpStrDup("These are the URLs from which the station data are read.");
    tt->array_offset = (char *) &_surface_data_urls - &_start_;
    tt->array_n_offset = (char *) &surface_data_urls_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("spdbp:://$(HOST)::spdb/surface");
    tt++;
    
    // Parameter 'genpt_data_urls'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("genpt_data_urls");
    tt->descr = tdrpStrDup("Input URLs for surface GenPt data");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_genpt_data_urls - &_start_;
    tt->array_n_offset = (char *) &genpt_data_urls_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("spdbp:://$(HOST)::spdb/surfaceCapeCin");
    tt++;
    
    // Parameter 'duration'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("duration");
    tt->descr = tdrpStrDup("Data duration");
    tt->help = tdrpStrDup("This is how far back from the start time to search.");
    tt->val_offset = (char *) &duration - &_start_;
    tt->single_val.i = 5400;
    tt++;
    
    // Parameter 'sounding_urls'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_urls");
    tt->descr = tdrpStrDup("URL of sounding database.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_sounding_urls - &_start_;
    tt->array_n_offset = (char *) &sounding_urls_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("spdbp:://$(HOST)::spdb/soundings");
    tt++;
    
    // Parameter 'sounding_look_back'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sounding_look_back");
    tt->descr = tdrpStrDup("Time (in minutes) to search back for a sounding; Default is 9 hours; max is 24 hours");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sounding_look_back - &_start_;
    tt->single_val.i = 540;
    tt++;
    
    // Parameter 'PresLi'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("PresLi");
    tt->descr = tdrpStrDup("Pressure to take temperature from in soundings");
    tt->help = tdrpStrDup("For lifted index");
    tt->val_offset = (char *) &PresLi - &_start_;
    tt->single_val.f = 500;
    tt++;
    
    // Parameter 'sounding_max_dist'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("sounding_max_dist");
    tt->descr = tdrpStrDup("Maximum distance of sounding from a surface report");
    tt->help = tdrpStrDup("For lifted index. Distance in kilometers.");
    tt->val_offset = (char *) &sounding_max_dist - &_start_;
    tt->single_val.f = 250;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("GRID");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'OutputProj'
    // ctype is '_output_proj_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("OutputProj");
    tt->descr = tdrpStrDup("Output projection");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &OutputProj - &_start_;
    tt->struct_def.name = tdrpStrDup("output_proj_t");
    tt->struct_def.nfields = 11;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("proj_type_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("proj_type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &OutputProj.proj_type - (char *) &OutputProj;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("proj_type_t");
        tt->struct_def.fields[0].enum_def.nfields = 3;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("PROJ_LATLON");
        tt->struct_def.fields[0].enum_def.fields[0].val = PROJ_LATLON;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("PROJ_FLAT");
        tt->struct_def.fields[0].enum_def.fields[1].val = PROJ_FLAT;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("PROJ_LC");
        tt->struct_def.fields[0].enum_def.fields[2].val = PROJ_LC;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("nx");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &OutputProj.nx - (char *) &OutputProj;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("ny");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &OutputProj.ny - (char *) &OutputProj;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("dx");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &OutputProj.dx - (char *) &OutputProj;
      tt->struct_def.fields[4].ftype = tdrpStrDup("float");
      tt->struct_def.fields[4].fname = tdrpStrDup("dy");
      tt->struct_def.fields[4].ptype = FLOAT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &OutputProj.dy - (char *) &OutputProj;
      tt->struct_def.fields[5].ftype = tdrpStrDup("float");
      tt->struct_def.fields[5].fname = tdrpStrDup("minx");
      tt->struct_def.fields[5].ptype = FLOAT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &OutputProj.minx - (char *) &OutputProj;
      tt->struct_def.fields[6].ftype = tdrpStrDup("float");
      tt->struct_def.fields[6].fname = tdrpStrDup("miny");
      tt->struct_def.fields[6].ptype = FLOAT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &OutputProj.miny - (char *) &OutputProj;
      tt->struct_def.fields[7].ftype = tdrpStrDup("float");
      tt->struct_def.fields[7].fname = tdrpStrDup("origin_lat");
      tt->struct_def.fields[7].ptype = FLOAT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &OutputProj.origin_lat - (char *) &OutputProj;
      tt->struct_def.fields[8].ftype = tdrpStrDup("float");
      tt->struct_def.fields[8].fname = tdrpStrDup("origin_lon");
      tt->struct_def.fields[8].ptype = FLOAT_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &OutputProj.origin_lon - (char *) &OutputProj;
      tt->struct_def.fields[9].ftype = tdrpStrDup("float");
      tt->struct_def.fields[9].fname = tdrpStrDup("lat1");
      tt->struct_def.fields[9].ptype = FLOAT_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &OutputProj.lat1 - (char *) &OutputProj;
      tt->struct_def.fields[10].ftype = tdrpStrDup("float");
      tt->struct_def.fields[10].fname = tdrpStrDup("lat2");
      tt->struct_def.fields[10].ptype = FLOAT_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &OutputProj.lat2 - (char *) &OutputProj;
    tt->n_struct_vals = 11;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = PROJ_FLAT;
      tt->struct_vals[1].i = 134;
      tt->struct_vals[2].i = 134;
      tt->struct_vals[3].f = 3;
      tt->struct_vals[4].f = 3;
      tt->struct_vals[5].f = -200;
      tt->struct_vals[6].f = -200;
      tt->struct_vals[7].f = 38.9753;
      tt->struct_vals[8].f = -77.477;
      tt->struct_vals[9].f = 0;
      tt->struct_vals[10].f = 0;
    tt++;
    
    // Parameter 'altitude'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("altitude");
    tt->descr = tdrpStrDup("Altitude of origin");
    tt->help = tdrpStrDup("Defaults to New York (1600.0)");
    tt->val_offset = (char *) &altitude - &_start_;
    tt->single_val.f = 1600;
    tt++;
    
    // Parameter 'flat'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("flat");
    tt->descr = tdrpStrDup("Flat earth projection");
    tt->help = tdrpStrDup("If not use LatLon");
    tt->val_offset = (char *) &flat - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'AllowOutsideTerrain'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("AllowOutsideTerrain");
    tt->descr = tdrpStrDup("Allow terrain MDV file not to cover region");
    tt->help = tdrpStrDup("May be useful for an island.\nTHIS PARAMETER IS CURRENTLY NOT USED.\n");
    tt->val_offset = (char *) &AllowOutsideTerrain - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output URL.");
    tt->help = tdrpStrDup("The interpolated MDV data is written to this URL.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://$(HOST)::mdv/surfInterp");
    tt++;
    
    // Parameter 'datasetName'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("datasetName");
    tt->descr = tdrpStrDup("Dataset name");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &datasetName - &_start_;
    tt->single_val.s = tdrpStrDup("SurfInterp");
    tt++;
    
    // Parameter 'dataSource'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dataSource");
    tt->descr = tdrpStrDup("Data Source");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dataSource - &_start_;
    tt->single_val.s = tdrpStrDup("Unknown");
    tt++;
    
    // Parameter 'dataInfo'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dataInfo");
    tt->descr = tdrpStrDup("Data info");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dataInfo - &_start_;
    tt->single_val.s = tdrpStrDup("none");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'outputFields'
    // ctype is '_interp_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("outputFields");
    tt->descr = tdrpStrDup("List of fields to include in the output file.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_outputFields - &_start_;
    tt->array_n_offset = (char *) &outputFields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interp_field_t);
    tt->array_n = 9;
    tt->enum_def.name = tdrpStrDup("interp_field_t");
    tt->enum_def.nfields = 20;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("UWIND");
      tt->enum_def.fields[0].val = UWIND;
      tt->enum_def.fields[1].name = tdrpStrDup("VWIND");
      tt->enum_def.fields[1].val = VWIND;
      tt->enum_def.fields[2].name = tdrpStrDup("TEMP");
      tt->enum_def.fields[2].val = TEMP;
      tt->enum_def.fields[3].name = tdrpStrDup("DEWPT");
      tt->enum_def.fields[3].val = DEWPT;
      tt->enum_def.fields[4].name = tdrpStrDup("LIFTED_INDEX");
      tt->enum_def.fields[4].val = LIFTED_INDEX;
      tt->enum_def.fields[5].name = tdrpStrDup("REL_HUM");
      tt->enum_def.fields[5].val = REL_HUM;
      tt->enum_def.fields[6].name = tdrpStrDup("WIND_GUST");
      tt->enum_def.fields[6].val = WIND_GUST;
      tt->enum_def.fields[7].name = tdrpStrDup("PRESSURE");
      tt->enum_def.fields[7].val = PRESSURE;
      tt->enum_def.fields[8].name = tdrpStrDup("POTENTIAL_TEMP");
      tt->enum_def.fields[8].val = POTENTIAL_TEMP;
      tt->enum_def.fields[9].name = tdrpStrDup("LIQUID_ACCUM");
      tt->enum_def.fields[9].val = LIQUID_ACCUM;
      tt->enum_def.fields[10].name = tdrpStrDup("PRECIP_RATE");
      tt->enum_def.fields[10].val = PRECIP_RATE;
      tt->enum_def.fields[11].name = tdrpStrDup("VISIBILITY");
      tt->enum_def.fields[11].val = VISIBILITY;
      tt->enum_def.fields[12].name = tdrpStrDup("RUNWAY_VIS_RANGE");
      tt->enum_def.fields[12].val = RUNWAY_VIS_RANGE;
      tt->enum_def.fields[13].name = tdrpStrDup("SEALEVEL_RELATIVE_CEILING");
      tt->enum_def.fields[13].val = SEALEVEL_RELATIVE_CEILING;
      tt->enum_def.fields[14].name = tdrpStrDup("ALTITUDE");
      tt->enum_def.fields[14].val = ALTITUDE;
      tt->enum_def.fields[15].name = tdrpStrDup("DEWPT_DEPRESSION");
      tt->enum_def.fields[15].val = DEWPT_DEPRESSION;
      tt->enum_def.fields[16].name = tdrpStrDup("TERRAIN");
      tt->enum_def.fields[16].val = TERRAIN;
      tt->enum_def.fields[17].name = tdrpStrDup("CONVERGENCE");
      tt->enum_def.fields[17].val = CONVERGENCE;
      tt->enum_def.fields[18].name = tdrpStrDup("TERRAIN_RELATIVE_CEILING");
      tt->enum_def.fields[18].val = TERRAIN_RELATIVE_CEILING;
      tt->enum_def.fields[19].name = tdrpStrDup("FLIGHT_CAT");
      tt->enum_def.fields[19].val = FLIGHT_CAT;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].e = UWIND;
      tt->array_vals[1].e = VWIND;
      tt->array_vals[2].e = TEMP;
      tt->array_vals[3].e = DEWPT;
      tt->array_vals[4].e = PRESSURE;
      tt->array_vals[5].e = VISIBILITY;
      tt->array_vals[6].e = RUNWAY_VIS_RANGE;
      tt->array_vals[7].e = SEALEVEL_RELATIVE_CEILING;
      tt->array_vals[8].e = CONVERGENCE;
    tt++;
    
    // Parameter 'outputFieldsEncoding'
    // ctype is '_output_encoding_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("outputFieldsEncoding");
    tt->descr = tdrpStrDup("Output encoding for each outputField. If nothing is specified, the default output encoding (ENCODING_INT16 and SCALING_ROUNDED) will be used for every output field. If output encoding is specified, there must be 1 structure in this array for every outputField specified. If the array sizes don't match, the default output encoding will be used for every field.");
    tt->help = tdrpStrDup("\tencoding_type - Type of encoding to use for the field data.\n\tuse_scaling_info - Flag indicating whether to use the scaling information from the structure. If set to false, the default SCALING_ROUNDED will be used.\n\tscaling_type - Type of scaling to use for the output field. Used only if use_scaling_info is set to true.\n\tscale - The scale value to use when scaling. Used only if use_scaling_info is set to true and scaling_type is set to SCALING_SPECIFIED.\n\tbias - The bias value to use when scaling. Used only if use_scaling_info is set to true and scaling_type is set to SCALING_SPECIFIED.\n");
    tt->array_offset = (char *) &_outputFieldsEncoding - &_start_;
    tt->array_n_offset = (char *) &outputFieldsEncoding_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_encoding_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("output_encoding_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("encoding_type_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("encoding_type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_outputFieldsEncoding->encoding_type - (char *) _outputFieldsEncoding;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("encoding_type_t");
        tt->struct_def.fields[0].enum_def.nfields = 3;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("ENCODING_INT8");
        tt->struct_def.fields[0].enum_def.fields[0].val = ENCODING_INT8;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("ENCODING_INT16");
        tt->struct_def.fields[0].enum_def.fields[1].val = ENCODING_INT16;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("ENCODING_FLOAT32");
        tt->struct_def.fields[0].enum_def.fields[2].val = ENCODING_FLOAT32;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("use_scaling_info");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_outputFieldsEncoding->use_scaling_info - (char *) _outputFieldsEncoding;
      tt->struct_def.fields[2].ftype = tdrpStrDup("scaling_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("scaling_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_outputFieldsEncoding->scaling_type - (char *) _outputFieldsEncoding;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("scaling_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 5;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("SCALING_NONE");
        tt->struct_def.fields[2].enum_def.fields[0].val = SCALING_NONE;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("SCALING_ROUNDED");
        tt->struct_def.fields[2].enum_def.fields[1].val = SCALING_ROUNDED;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("SCALING_INTEGRAL");
        tt->struct_def.fields[2].enum_def.fields[2].val = SCALING_INTEGRAL;
        tt->struct_def.fields[2].enum_def.fields[3].name = tdrpStrDup("SCALING_DYNAMIC");
        tt->struct_def.fields[2].enum_def.fields[3].val = SCALING_DYNAMIC;
        tt->struct_def.fields[2].enum_def.fields[4].name = tdrpStrDup("SCALING_SPECIFIED");
        tt->struct_def.fields[2].enum_def.fields[4].val = SCALING_SPECIFIED;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("scale");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_outputFieldsEncoding->scale - (char *) _outputFieldsEncoding;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("bias");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_outputFieldsEncoding->bias - (char *) _outputFieldsEncoding;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'genptFields'
    // ctype is '_genpt_fields_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("genptFields");
    tt->descr = tdrpStrDup("Array of fields to generate from GenPt data");
    tt->help = tdrpStrDup("\tgenpt_field_name - Name of field as it appears in the GenPt database.\n\tcheck_missing - Flag indicating whether to check for missing data values in the GenPt data.\n\tmissing_value - The missing data value to use for this GenPt field. By default, the GenPt database uses -9999.0 for missing data; however, some programs, like MetarCapeCin, don't use this value for missing data. MetarCapeCin uses -99999.0 for missing CIN values.\nUsed only if check_missing is set to true.\n\toutput_field_name - Name of field as it should appear in the output file.\n\toutput_field_units - Name of field units to put in the output file.\n\tencoding_type - Type of encoding to use for the field data.\n\tuse_scaling_info - Flag indicating whether to use the scaling information from the structure. If set to false, the default SCALING_ROUNDED will be used.\n\tscaling_type - Type of scaling to use for the output field. Used only if use_scaling_info is set to true.\n\tscale - The scale value to use when scaling. Used only if use_scaling_info is set to true and scaling_type is set to SCALING_SPECIFIED.\n\tbias - The bias value to use when scaling. Used only if use_scaling_info is set to true and scaling_type is set to SCALING_SPECIFIED.\n");
    tt->array_offset = (char *) &_genptFields - &_start_;
    tt->array_n_offset = (char *) &genptFields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(genpt_fields_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("genpt_fields_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("genpt_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_genptFields->genpt_field_name - (char *) _genptFields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("check_missing");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_genptFields->check_missing - (char *) _genptFields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("missing_value");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_genptFields->missing_value - (char *) _genptFields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("output_field_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_genptFields->output_field_name - (char *) _genptFields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("output_field_units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_genptFields->output_field_units - (char *) _genptFields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("encoding_type_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("encoding_type");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_genptFields->encoding_type - (char *) _genptFields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("encoding_type_t");
        tt->struct_def.fields[5].enum_def.nfields = 3;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("ENCODING_INT8");
        tt->struct_def.fields[5].enum_def.fields[0].val = ENCODING_INT8;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("ENCODING_INT16");
        tt->struct_def.fields[5].enum_def.fields[1].val = ENCODING_INT16;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("ENCODING_FLOAT32");
        tt->struct_def.fields[5].enum_def.fields[2].val = ENCODING_FLOAT32;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("use_scaling_info");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_genptFields->use_scaling_info - (char *) _genptFields;
      tt->struct_def.fields[7].ftype = tdrpStrDup("scaling_type_t");
      tt->struct_def.fields[7].fname = tdrpStrDup("scaling_type");
      tt->struct_def.fields[7].ptype = ENUM_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_genptFields->scaling_type - (char *) _genptFields;
        tt->struct_def.fields[7].enum_def.name = tdrpStrDup("scaling_type_t");
        tt->struct_def.fields[7].enum_def.nfields = 5;
        tt->struct_def.fields[7].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[7].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[7].enum_def.fields[0].name = tdrpStrDup("SCALING_NONE");
        tt->struct_def.fields[7].enum_def.fields[0].val = SCALING_NONE;
        tt->struct_def.fields[7].enum_def.fields[1].name = tdrpStrDup("SCALING_ROUNDED");
        tt->struct_def.fields[7].enum_def.fields[1].val = SCALING_ROUNDED;
        tt->struct_def.fields[7].enum_def.fields[2].name = tdrpStrDup("SCALING_INTEGRAL");
        tt->struct_def.fields[7].enum_def.fields[2].val = SCALING_INTEGRAL;
        tt->struct_def.fields[7].enum_def.fields[3].name = tdrpStrDup("SCALING_DYNAMIC");
        tt->struct_def.fields[7].enum_def.fields[3].val = SCALING_DYNAMIC;
        tt->struct_def.fields[7].enum_def.fields[4].name = tdrpStrDup("SCALING_SPECIFIED");
        tt->struct_def.fields[7].enum_def.fields[4].val = SCALING_SPECIFIED;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("scale");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_genptFields->scale - (char *) _genptFields;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("bias");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_genptFields->bias - (char *) _genptFields;
    tt->n_struct_vals = 20;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("cape");
      tt->struct_vals[1].b = pFALSE;
      tt->struct_vals[2].d = -9999;
      tt->struct_vals[3].s = tdrpStrDup("Cape");
      tt->struct_vals[4].s = tdrpStrDup("none");
      tt->struct_vals[5].e = ENCODING_INT8;
      tt->struct_vals[6].b = pFALSE;
      tt->struct_vals[7].e = SCALING_ROUNDED;
      tt->struct_vals[8].d = 1;
      tt->struct_vals[9].d = 0;
      tt->struct_vals[10].s = tdrpStrDup("cin");
      tt->struct_vals[11].b = pTRUE;
      tt->struct_vals[12].d = -99999;
      tt->struct_vals[13].s = tdrpStrDup("Cin");
      tt->struct_vals[14].s = tdrpStrDup("none");
      tt->struct_vals[15].e = ENCODING_INT8;
      tt->struct_vals[16].b = pFALSE;
      tt->struct_vals[17].e = SCALING_ROUNDED;
      tt->struct_vals[18].d = 1;
      tt->struct_vals[19].d = 0;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("QC check");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'MinValidTempC'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MinValidTempC");
    tt->descr = tdrpStrDup("Minimum valid temperature (C).");
    tt->help = tdrpStrDup("Stations with temperature below this are discsarded.");
    tt->val_offset = (char *) &MinValidTempC - &_start_;
    tt->single_val.f = -35;
    tt++;
    
    // Parameter 'MaxValidTempC'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxValidTempC");
    tt->descr = tdrpStrDup("Maximum valid temperature (C).");
    tt->help = tdrpStrDup("Stations with temperature above this are discsarded.");
    tt->val_offset = (char *) &MaxValidTempC - &_start_;
    tt->single_val.f = 55;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("INTERPOLATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'InterpMethod'
    // ctype is '_InterpMethod_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("InterpMethod");
    tt->descr = tdrpStrDup("Interpolation option - choose the interpolation scheme");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &InterpMethod - &_start_;
    tt->enum_def.name = tdrpStrDup("InterpMethod_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("INTERP_BARNES");
      tt->enum_def.fields[0].val = INTERP_BARNES;
      tt->enum_def.fields[1].name = tdrpStrDup("INTERP_NEAREST");
      tt->enum_def.fields[1].val = INTERP_NEAREST;
    tt->single_val.e = INTERP_BARNES;
    tt++;
    
    // Parameter 'MaxAltError'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxAltError");
    tt->descr = tdrpStrDup("Max difference between altitude and terrain for VFR to work");
    tt->help = tdrpStrDup("If negative, no check is made. Units are feet");
    tt->val_offset = (char *) &MaxAltError - &_start_;
    tt->single_val.f = -1;
    tt++;
    
    // Parameter 'MinWeight'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MinWeight");
    tt->descr = tdrpStrDup("Minimum sum of weights in Barnes interpolation for valid data");
    tt->help = tdrpStrDup("If not reached, bad value output - effectively sets radius of influence.");
    tt->val_offset = (char *) &MinWeight - &_start_;
    tt->single_val.f = 0.0001;
    tt++;
    
    // Parameter 'WindowSize'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("WindowSize");
    tt->descr = tdrpStrDup("WindowSize for optional VFR median filter");
    tt->help = tdrpStrDup("Actual tile is 2W +1 by 2W + 1");
    tt->val_offset = (char *) &WindowSize - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'NumPasses'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("NumPasses");
    tt->descr = tdrpStrDup("Number of passes for VFR median filter");
    tt->help = tdrpStrDup("Used to smooth out VFR image");
    tt->val_offset = (char *) &NumPasses - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'MinStations'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("MinStations");
    tt->descr = tdrpStrDup("Minimum number of stations");
    tt->help = tdrpStrDup("If fewer stations report, don't bother.");
    tt->val_offset = (char *) &MinStations - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'MaxInterpDist'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxInterpDist");
    tt->descr = tdrpStrDup("Maximum distance for interpolation to be valid, Km.");
    tt->help = tdrpStrDup("Works in conjunction with minimum weight parameter.");
    tt->val_offset = (char *) &MaxInterpDist - &_start_;
    tt->single_val.f = 50;
    tt++;
    
    // Parameter 'Rscale'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("Rscale");
    tt->descr = tdrpStrDup("Scale radius for interpolations.");
    tt->help = tdrpStrDup("Defaults to half of MaxInterpDist if 0 or less");
    tt->val_offset = (char *) &Rscale - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'UseOutsideRegion'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("UseOutsideRegion");
    tt->descr = tdrpStrDup("Set to TRUE to accept stations outside the grid.");
    tt->help = tdrpStrDup("Default is to only accept stations within the grid.");
    tt->val_offset = (char *) &UseOutsideRegion - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("FLIGHT CATEGORY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'BadCeilingValue'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("BadCeilingValue");
    tt->descr = tdrpStrDup("Value to use if ceiling is missing - if negative, use bad value.");
    tt->help = tdrpStrDup("Default sets both ceiling and flight cat to missing if ceiling is bad");
    tt->val_offset = (char *) &BadCeilingValue - &_start_;
    tt->single_val.f = -1;
    tt++;
    
    // Parameter 'FltCatThresh'
    // ctype is '_flt_cat_thresh_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("FltCatThresh");
    tt->descr = tdrpStrDup("Array of thresholds used for determining flight categories");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_FltCatThresh - &_start_;
    tt->array_n_offset = (char *) &FltCatThresh_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(flt_cat_thresh_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("flt_cat_thresh_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("vis_thresh");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_FltCatThresh->vis_thresh - (char *) _FltCatThresh;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("ceil_thresh");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_FltCatThresh->ceil_thresh - (char *) _FltCatThresh;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 0;
      tt->struct_vals[1].f = 0;
      tt->struct_vals[2].f = 1.6;
      tt->struct_vals[3].f = 500;
      tt->struct_vals[4].f = 5;
      tt->struct_vals[5].f = 1500;
    tt++;
    
    // Parameter 'MaxVis'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxVis");
    tt->descr = tdrpStrDup("Maximum visibility from a station, Km");
    tt->help = tdrpStrDup("Values greater than this are set to missing.");
    tt->val_offset = (char *) &MaxVis - &_start_;
    tt->single_val.f = 30;
    tt++;
    
    // Parameter 'MaxCeiling'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("MaxCeiling");
    tt->descr = tdrpStrDup("Maximum cloud ceiling from a station, Km");
    tt->help = tdrpStrDup("Values greater than this are set to missing.");
    tt->val_offset = (char *) &MaxCeiling - &_start_;
    tt->single_val.f = 30;
    tt++;
    
    // Parameter 'ReplaceCeiling'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ReplaceCeiling");
    tt->descr = tdrpStrDup("If set to TRUE, ceiling values above ReplaceCeilingThreshold\nare replaced with ReplaceCeilingValue. The reason is that in\nsome systems, a clear sky is reported as a ceiling of 10,000\nfeet - but the terrain may be near 10,000 feet which leads\nto erroneous regions of bad flight cat.");
    tt->help = tdrpStrDup("No such processing occurrs if set to FALSE.");
    tt->val_offset = (char *) &ReplaceCeiling - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ReplaceCeilingThreshold'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("ReplaceCeilingThreshold");
    tt->descr = tdrpStrDup("Cloud ceiling threshold, ft.");
    tt->help = tdrpStrDup("If ReplaceCeiling is TRUE then values of ceiling at or above\nthis value are replaced with ReplaceCeilingValue.");
    tt->val_offset = (char *) &ReplaceCeilingThreshold - &_start_;
    tt->single_val.f = 9500;
    tt++;
    
    // Parameter 'ReplaceCeilingValue'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("ReplaceCeilingValue");
    tt->descr = tdrpStrDup("Cloud ceiling value, ft.");
    tt->help = tdrpStrDup("If ReplaceCeiling is TRUE then values of ceiling at or above\nReplaceCeilingThreshold are replaced with this value.");
    tt->val_offset = (char *) &ReplaceCeilingValue - &_start_;
    tt->single_val.f = 30000;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("CONVERGENCE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'convergenceDxDy'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("convergenceDxDy");
    tt->descr = tdrpStrDup("Convergence is the sum of the derivatives of u and v with respect distance.   convergenceDxDy is the distace in gridpoints from the point   reference at which we will take values of u and v to form the difference  quotients.");
    tt->help = tdrpStrDup("By default the convergence is calculated using values of u and v at adjacent grid points ( convergenceDxDy = 1). Adjusting this parameter allows the convergence to be calculated over a larger spatial domain.");
    tt->val_offset = (char *) &convergenceDxDy - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'tryOtherPressure'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("tryOtherPressure");
    tt->descr = tdrpStrDup("Option to fall back onto another pressure if the\nstation pressure is missing in the calculation of lifted index.");
    tt->help = tdrpStrDup("The calculation of lifted index uses pressure data\nfrom a surface station. If the\nshared.pressure_station.stn_pres field in the station report\nis not missing, then it is used. If it is missing and\ntryOtherPressure is set to FALSE (default) then the lifted index\nis not calculated, however if tryOtherPressure is set to TRUE and\nthe pres field in the station report is set to a\nnon-missing value then that value is used in the lifted index calc.");
    tt->val_offset = (char *) &tryOtherPressure - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'adjustStationPressure'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("adjustStationPressure");
    tt->descr = tdrpStrDup("If set, station pressures are treated as having been\ncorrected to be at sea level, and a correction is applied\nto get the actual station pressure, ie. to un-do the\nthe correction that was applied to get the sea level\nstation pressure.");
    tt->help = tdrpStrDup("If all your station pressures are near 1013, you\nprobably need this.");
    tt->val_offset = (char *) &adjustStationPressure - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
