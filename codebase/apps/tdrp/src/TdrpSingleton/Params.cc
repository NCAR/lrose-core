/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program TdrpSingleton
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */

/* This class is a singleton */
#include "Params.hh"
#include <cstring>

// singleton instance is global
Params *Params::_instance = (Params *) NULL;

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

    delete _instance;
    _instance = NULL;
  }

  ////////////////////////////////////////////
  // Inst(): retrieve singleton instance
  //
  Params *Params::Inst()
  {
    if (_instance == (Params *) NULL) {
      _instance = new Params;
    }
    return _instance;
  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("INTEGER PARAMETERS");
    tt->comment_text = tdrpStrDup("Testing integer parameter behavior.");
    tt++;
    
    // Parameter 'your_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("your_age");
    tt->descr = tdrpStrDup("Single int value");
    tt->help = tdrpStrDup("Testing single int actions.");
    tt->val_offset = (char *) &your_age - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 0;
    tt->max_val.i = 120;
    tt->single_val.i = 35;
    tt++;
    
    // Parameter 'our_ages'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("our_ages");
    tt->descr = tdrpStrDup("Int array - variable length.");
    tt->help = tdrpStrDup("Testing variable length int array.");
    tt->array_offset = (char *) &_our_ages - &_start_;
    tt->array_n_offset = (char *) &our_ages_n - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 5;
    tt->min_val.i = 0;
    tt->max_val.i = 120;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].i = 30;
      tt->array_vals[1].i = 31;
      tt->array_vals[2].i = 42;
      tt->array_vals[3].i = 43;
      tt->array_vals[4].i = 54;
    tt++;
    
    // Parameter 'icon'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("icon");
    tt->descr = tdrpStrDup("Variable length 2-D array.");
    tt->help = tdrpStrDup("Testing variable length 2-D array.");
    tt->array_offset = (char *) &_icon - &_start_;
    tt->array_n_offset = (char *) &icon_n - &_start_;
    tt->array2D_offset = (char *) &__icon - &_start_;
    tt->array_n1_offset = (char *) &icon_n1 - &_start_;
    tt->array_n2_offset = (char *) &icon_n2 - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 20;
    tt->array_n1 = 4;
    tt->array_n2 = 5;
    tt->min_val.i = 0;
    tt->max_val.i = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].i = 0;
      tt->array_vals[1].i = 0;
      tt->array_vals[2].i = 1;
      tt->array_vals[3].i = 1;
      tt->array_vals[4].i = 1;
      tt->array_vals[5].i = 0;
      tt->array_vals[6].i = 0;
      tt->array_vals[7].i = 0;
      tt->array_vals[8].i = 0;
      tt->array_vals[9].i = 1;
      tt->array_vals[10].i = 0;
      tt->array_vals[11].i = 1;
      tt->array_vals[12].i = 0;
      tt->array_vals[13].i = 1;
      tt->array_vals[14].i = 0;
      tt->array_vals[15].i = 0;
      tt->array_vals[16].i = 0;
      tt->array_vals[17].i = 0;
      tt->array_vals[18].i = 1;
      tt->array_vals[19].i = 1;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("LONG INTEGER PARAMETERS");
    tt->comment_text = tdrpStrDup("Testing long integer parameter behavior.");
    tt++;
    
    // Parameter 'number_of_radars'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("number_of_radars");
    tt->descr = tdrpStrDup("Single long value");
    tt->help = tdrpStrDup("Testing single long actions.");
    tt->val_offset = (char *) &number_of_radars - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 0;
    tt->single_val.l = 1;
    tt++;
    
    // Parameter 'days_in_month'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("days_in_month");
    tt->descr = tdrpStrDup("Long array - fixed length.");
    tt->help = tdrpStrDup("Testing fixed length long array.");
    tt->array_offset = (char *) &_days_in_month - &_start_;
    tt->array_n_offset = (char *) &days_in_month_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(long);
    tt->array_n = 12;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].l = 31;
      tt->array_vals[1].l = 28;
      tt->array_vals[2].l = 31;
      tt->array_vals[3].l = 30;
      tt->array_vals[4].l = 31;
      tt->array_vals[5].l = 30;
      tt->array_vals[6].l = 31;
      tt->array_vals[7].l = 31;
      tt->array_vals[8].l = 30;
      tt->array_vals[9].l = 31;
      tt->array_vals[10].l = 30;
      tt->array_vals[11].l = 31;
    tt++;
    
    // Parameter 'item_count'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("item_count");
    tt->descr = tdrpStrDup("Variable fixed 2-D array.");
    tt->help = tdrpStrDup("Testing fixed length 2-D array.");
    tt->array_offset = (char *) &_item_count - &_start_;
    tt->array_n_offset = (char *) &item_count_n - &_start_;
    tt->array2D_offset = (char *) &__item_count - &_start_;
    tt->array_n1_offset = (char *) &item_count_n1 - &_start_;
    tt->array_n2_offset = (char *) &item_count_n2 - &_start_;
    tt->has_min = TRUE;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(long);
    tt->array_n = 24;
    tt->array_n1 = 4;
    tt->array_n2 = 6;
    tt->min_val.l = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].l = 0;
      tt->array_vals[1].l = 5;
      tt->array_vals[2].l = 6;
      tt->array_vals[3].l = 11;
      tt->array_vals[4].l = 2;
      tt->array_vals[5].l = 3;
      tt->array_vals[6].l = 9;
      tt->array_vals[7].l = 8;
      tt->array_vals[8].l = 15;
      tt->array_vals[9].l = 12;
      tt->array_vals[10].l = 4;
      tt->array_vals[11].l = 4;
      tt->array_vals[12].l = 17;
      tt->array_vals[13].l = 18;
      tt->array_vals[14].l = 3;
      tt->array_vals[15].l = 7;
      tt->array_vals[16].l = 0;
      tt->array_vals[17].l = 12;
      tt->array_vals[18].l = 15;
      tt->array_vals[19].l = 10;
      tt->array_vals[20].l = 10;
      tt->array_vals[21].l = 1;
      tt->array_vals[22].l = 9;
      tt->array_vals[23].l = 1;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("FLOAT PARAMETERS");
    tt->comment_text = tdrpStrDup("Testing float parameter behavior.");
    tt++;
    
    // Parameter 'speed'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("speed");
    tt->descr = tdrpStrDup("Single float value");
    tt->help = tdrpStrDup("Testing single float actions.");
    tt->val_offset = (char *) &speed - &_start_;
    tt->has_min = TRUE;
    tt->min_val.f = 0;
    tt->single_val.f = 15;
    tt++;
    
    // Parameter 'storm_volume'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("storm_volume");
    tt->descr = tdrpStrDup("Float array - fixed length.");
    tt->help = tdrpStrDup("Testing fixed length float array.");
    tt->array_offset = (char *) &_storm_volume - &_start_;
    tt->array_n_offset = (char *) &storm_volume_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(float);
    tt->array_n = 10;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].f = 101.1;
      tt->array_vals[1].f = 102.1;
      tt->array_vals[2].f = 103.1;
      tt->array_vals[3].f = 104.1;
      tt->array_vals[4].f = 105.1;
      tt->array_vals[5].f = 106.1;
      tt->array_vals[6].f = 107.1;
      tt->array_vals[7].f = 108.1;
      tt->array_vals[8].f = 109.1;
      tt->array_vals[9].f = 110.1;
    tt++;
    
    // Parameter 'rain_accumulation'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("rain_accumulation");
    tt->descr = tdrpStrDup("Variable length 2-D array.");
    tt->help = tdrpStrDup("Testing variable length 2-D array.");
    tt->array_offset = (char *) &_rain_accumulation - &_start_;
    tt->array_n_offset = (char *) &rain_accumulation_n - &_start_;
    tt->array2D_offset = (char *) &__rain_accumulation - &_start_;
    tt->array_n1_offset = (char *) &rain_accumulation_n1 - &_start_;
    tt->array_n2_offset = (char *) &rain_accumulation_n2 - &_start_;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(float);
    tt->array_n = 20;
    tt->array_n1 = 4;
    tt->array_n2 = 5;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].f = 0.1;
      tt->array_vals[1].f = 0.6;
      tt->array_vals[2].f = 1.9;
      tt->array_vals[3].f = 12.4;
      tt->array_vals[4].f = 1.1;
      tt->array_vals[5].f = 2.3;
      tt->array_vals[6].f = 5.7;
      tt->array_vals[7].f = 12.8;
      tt->array_vals[8].f = 19.4;
      tt->array_vals[9].f = 0;
      tt->array_vals[10].f = 14.3;
      tt->array_vals[11].f = 19.3;
      tt->array_vals[12].f = 12.1;
      tt->array_vals[13].f = 3.3;
      tt->array_vals[14].f = 7.5;
      tt->array_vals[15].f = 8;
      tt->array_vals[16].f = 6.1;
      tt->array_vals[17].f = 0;
      tt->array_vals[18].f = 15.1;
      tt->array_vals[19].f = 10;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DOUBLE PARAMETERS");
    tt->comment_text = tdrpStrDup("Testing double parameter behavior.");
    tt++;
    
    // Parameter 'mass_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("mass_coefficient");
    tt->descr = tdrpStrDup("Single double value");
    tt->help = tdrpStrDup("Testing single double actions.");
    tt->val_offset = (char *) &mass_coefficient - &_start_;
    tt->single_val.d = 9.1e-09;
    tt++;
    
    // Parameter 'speed_of_light'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("speed_of_light");
    tt->descr = tdrpStrDup("Private double value");
    tt->help = tdrpStrDup("Testing private double actions.");
    tt->val_offset = (char *) &speed_of_light - &_start_;
    tt->is_private = TRUE;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 2.99e+08;
    tt->max_val.d = 3.01e+08;
    tt->single_val.d = 3e+08;
    tt++;
    
    // Parameter 'storm_mass'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("storm_mass");
    tt->descr = tdrpStrDup("Double array - variable length.");
    tt->help = tdrpStrDup("Testing variable length double array.");
    tt->array_offset = (char *) &_storm_mass - &_start_;
    tt->array_n_offset = (char *) &storm_mass_n - &_start_;
    tt->has_min = TRUE;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 5;
    tt->min_val.d = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 1.9e+08;
      tt->array_vals[1].d = 2.1e+08;
      tt->array_vals[2].d = 9.7e+07;
      tt->array_vals[3].d = 5.3e+07;
      tt->array_vals[4].d = 1.1e+09;
    tt++;
    
    // Parameter 'length_factor'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("length_factor");
    tt->descr = tdrpStrDup("Fixed length 2-D array.");
    tt->help = tdrpStrDup("Testing fixed length 2-D array.");
    tt->array_offset = (char *) &_length_factor - &_start_;
    tt->array_n_offset = (char *) &length_factor_n - &_start_;
    tt->array2D_offset = (char *) &__length_factor - &_start_;
    tt->array_n1_offset = (char *) &length_factor_n1 - &_start_;
    tt->array_n2_offset = (char *) &length_factor_n2 - &_start_;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 18;
    tt->array_n1 = 3;
    tt->array_n2 = 6;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].d = 0.9;
      tt->array_vals[1].d = 0.9;
      tt->array_vals[2].d = 1.9;
      tt->array_vals[3].d = 1.9;
      tt->array_vals[4].d = 1.9;
      tt->array_vals[5].d = 100.3;
      tt->array_vals[6].d = 0.9;
      tt->array_vals[7].d = 1.9;
      tt->array_vals[8].d = 0.9;
      tt->array_vals[9].d = 1.9;
      tt->array_vals[10].d = 0.9;
      tt->array_vals[11].d = -100.1;
      tt->array_vals[12].d = 0.9;
      tt->array_vals[13].d = 0.9;
      tt->array_vals[14].d = 0.9;
      tt->array_vals[15].d = 1.9;
      tt->array_vals[16].d = 1.9;
      tt->array_vals[17].d = -99.9;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("BOOLEAN PARAMETERS");
    tt->comment_text = tdrpStrDup("Testing boolean parameter behavior.");
    tt++;
    
    // Parameter 'use_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_data");
    tt->descr = tdrpStrDup("Single bool value");
    tt->help = tdrpStrDup("Testing single bool actions.");
    tt->val_offset = (char *) &use_data - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'allow_outliers'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("allow_outliers");
    tt->descr = tdrpStrDup("Bool array - variable length.");
    tt->help = tdrpStrDup("Testing variable length bool array.");
    tt->array_offset = (char *) &_allow_outliers - &_start_;
    tt->array_n_offset = (char *) &allow_outliers_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(tdrp_bool_t);
    tt->array_n = 4;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].b = pTRUE;
      tt->array_vals[1].b = pFALSE;
      tt->array_vals[2].b = pTRUE;
      tt->array_vals[3].b = pTRUE;
    tt++;
    
    // Parameter 'compute_length'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_length");
    tt->descr = tdrpStrDup("Variable length 2-D array.");
    tt->help = tdrpStrDup("Testing variable length 2-D array.");
    tt->array_offset = (char *) &_compute_length - &_start_;
    tt->array_n_offset = (char *) &compute_length_n - &_start_;
    tt->array2D_offset = (char *) &__compute_length - &_start_;
    tt->array_n1_offset = (char *) &compute_length_n1 - &_start_;
    tt->array_n2_offset = (char *) &compute_length_n2 - &_start_;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(tdrp_bool_t);
    tt->array_n = 20;
    tt->array_n1 = 4;
    tt->array_n2 = 5;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].b = pFALSE;
      tt->array_vals[1].b = pFALSE;
      tt->array_vals[2].b = pTRUE;
      tt->array_vals[3].b = pTRUE;
      tt->array_vals[4].b = pTRUE;
      tt->array_vals[5].b = pFALSE;
      tt->array_vals[6].b = pFALSE;
      tt->array_vals[7].b = pFALSE;
      tt->array_vals[8].b = pFALSE;
      tt->array_vals[9].b = pTRUE;
      tt->array_vals[10].b = pFALSE;
      tt->array_vals[11].b = pTRUE;
      tt->array_vals[12].b = pFALSE;
      tt->array_vals[13].b = pTRUE;
      tt->array_vals[14].b = pFALSE;
      tt->array_vals[15].b = pFALSE;
      tt->array_vals[16].b = pFALSE;
      tt->array_vals[17].b = pFALSE;
      tt->array_vals[18].b = pTRUE;
      tt->array_vals[19].b = pTRUE;
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Option to print debugging messages");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'flags'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("flags");
    tt->descr = tdrpStrDup("Test boolean flags.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_flags - &_start_;
    tt->array_n_offset = (char *) &flags_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(tdrp_bool_t);
    tt->array_n = 6;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].b = pTRUE;
      tt->array_vals[1].b = pFALSE;
      tt->array_vals[2].b = pTRUE;
      tt->array_vals[3].b = pFALSE;
      tt->array_vals[4].b = pTRUE;
      tt->array_vals[5].b = pTRUE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("STRING PARAMETERS");
    tt->comment_text = tdrpStrDup("Testing string parameter behavior.");
    tt++;
    
    // Parameter 'path_delim'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("path_delim");
    tt->descr = tdrpStrDup("path delimiter");
    tt->help = tdrpStrDup("Testing private string parameter.");
    tt->val_offset = (char *) &path_delim - &_start_;
    tt->is_private = TRUE;
    tt->single_val.s = tdrpStrDup("/");
    tt++;
    
    // Parameter 'input_file_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_file_ext");
    tt->descr = tdrpStrDup("Input file extension");
    tt->help = tdrpStrDup("Testing single-valued string parameter.");
    tt->val_offset = (char *) &input_file_ext - &_start_;
    tt->single_val.s = tdrpStrDup("mcg");
    tt++;
    
    // Parameter 'input_file_paths'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_file_paths");
    tt->descr = tdrpStrDup("Input file paths");
    tt->help = tdrpStrDup("Testing variable length array of strings. Note imbedded environment variables.");
    tt->array_offset = (char *) &_input_file_paths - &_start_;
    tt->array_n_offset = (char *) &input_file_paths_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("$(HOME)/path1");
      tt->array_vals[1].s = tdrpStrDup("$(HOME)/paths");
      tt->array_vals[2].s = tdrpStrDup("$(HOME)/path3");
    tt++;
    
    // Parameter 'output_file_paths'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_file_paths");
    tt->descr = tdrpStrDup("Output file paths.");
    tt->help = tdrpStrDup("Testing variable length 2D array of strings. Note imbedded environment variables.");
    tt->array_offset = (char *) &_output_file_paths - &_start_;
    tt->array_n_offset = (char *) &output_file_paths_n - &_start_;
    tt->array2D_offset = (char *) &__output_file_paths - &_start_;
    tt->array_n1_offset = (char *) &output_file_paths_n1 - &_start_;
    tt->array_n2_offset = (char *) &output_file_paths_n2 - &_start_;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 18;
    tt->array_n1 = 6;
    tt->array_n2 = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("$(USER)/path11");
      tt->array_vals[1].s = tdrpStrDup("$(USER)/path21");
      tt->array_vals[2].s = tdrpStrDup("$(USER)/path31");
      tt->array_vals[3].s = tdrpStrDup("$(USER)/path12");
      tt->array_vals[4].s = tdrpStrDup("$(USER)/path22");
      tt->array_vals[5].s = tdrpStrDup("$(USER)/path32");
      tt->array_vals[6].s = tdrpStrDup("$(USER)/path13");
      tt->array_vals[7].s = tdrpStrDup("$(USER)/path23");
      tt->array_vals[8].s = tdrpStrDup("$(USER)/path33");
      tt->array_vals[9].s = tdrpStrDup("$(USER)/path14");
      tt->array_vals[10].s = tdrpStrDup("$(USER)/path24");
      tt->array_vals[11].s = tdrpStrDup("$(USER)/path34");
      tt->array_vals[12].s = tdrpStrDup("$(USER)/path15");
      tt->array_vals[13].s = tdrpStrDup("$(USER)/path25");
      tt->array_vals[14].s = tdrpStrDup("$(USER)/path35");
      tt->array_vals[15].s = tdrpStrDup("$(USER)/path16");
      tt->array_vals[16].s = tdrpStrDup("$(USER)/path26");
      tt->array_vals[17].s = tdrpStrDup("$(USER)/path36");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory");
    tt->help = tdrpStrDup("Path of input directory - realtime mode only. Note imbedded environment variables.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("$(HOME)/input_dir");
    tt++;
    
    // Parameter 'this_is_a_very_long_string_paramater_this_is_a_very_long_string_paramater_this_is_a_very_long_string_paramater'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("this_is_a_very_long_string_paramater_this_is_a_very_long_string_paramater_this_is_a_very_long_string_paramater");
    tt->descr = tdrpStrDup("test parameter");
    tt->help = tdrpStrDup("test for Dave's bug.");
    tt->val_offset = (char *) &this_is_a_very_long_string_paramater_this_is_a_very_long_string_paramater_this_is_a_very_long_string_paramater - &_start_;
    tt->single_val.s = tdrpStrDup("very-long-param");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("ENUM PARAMETERS");
    tt->comment_text = tdrpStrDup("Testing enum parameter behavior.");
    tt++;
    
    // Parameter 'data_origin'
    // ctype is '_origin_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("data_origin");
    tt->descr = tdrpStrDup("Data origin position");
    tt->help = tdrpStrDup("Testing variable length enum array.");
    tt->array_offset = (char *) &_data_origin - &_start_;
    tt->array_n_offset = (char *) &data_origin_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(origin_t);
    tt->array_n = 2;
    tt->enum_def.name = tdrpStrDup("origin_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("BOTLEFT");
      tt->enum_def.fields[0].val = BOTLEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("TOPLEFT");
      tt->enum_def.fields[1].val = TOPLEFT;
      tt->enum_def.fields[2].name = tdrpStrDup("BOTRIGHT");
      tt->enum_def.fields[2].val = BOTRIGHT;
      tt->enum_def.fields[3].name = tdrpStrDup("TOPRIGHT");
      tt->enum_def.fields[3].val = TOPRIGHT;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].e = BOTLEFT;
      tt->array_vals[1].e = TOPLEFT;
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Testing 2-D enum array.");
    tt->help = tdrpStrDup("The options for this enum are defined in the paramdef instead of in a typedef.");
    tt->array_offset = (char *) &_mode - &_start_;
    tt->array_n_offset = (char *) &mode_n - &_start_;
    tt->array2D_offset = (char *) &__mode - &_start_;
    tt->array_n1_offset = (char *) &mode_n1 - &_start_;
    tt->array_n2_offset = (char *) &mode_n2 - &_start_;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(mode_t);
    tt->array_n = 8;
    tt->array_n1 = 2;
    tt->array_n2 = 4;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("OTHER");
      tt->enum_def.fields[2].val = OTHER;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].e = REALTIME;
      tt->array_vals[1].e = REALTIME;
      tt->array_vals[2].e = ARCHIVE;
      tt->array_vals[3].e = OTHER;
      tt->array_vals[4].e = OTHER;
      tt->array_vals[5].e = ARCHIVE;
      tt->array_vals[6].e = ARCHIVE;
      tt->array_vals[7].e = REALTIME;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("STRUCT PARAMETERS");
    tt->comment_text = tdrpStrDup("Testing struct parameter behavior.");
    tt++;
    
    // Parameter 'grid'
    // ctype is '_grid_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("grid");
    tt->descr = tdrpStrDup("Grid parameters.");
    tt->help = tdrpStrDup("Testing single-valued struct.  Struct Definition occurs within the paramdef.");
    tt->val_offset = (char *) &grid - &_start_;
    tt->struct_def.name = tdrpStrDup("grid_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("long");
      tt->struct_def.fields[0].fname = tdrpStrDup("nx");
      tt->struct_def.fields[0].ptype = LONG_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &grid.nx - (char *) &grid;
      tt->struct_def.fields[1].ftype = tdrpStrDup("long");
      tt->struct_def.fields[1].fname = tdrpStrDup("ny");
      tt->struct_def.fields[1].ptype = LONG_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &grid.ny - (char *) &grid;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("minx");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &grid.minx - (char *) &grid;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("miny");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &grid.miny - (char *) &grid;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("dx");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &grid.dx - (char *) &grid;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("dy");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &grid.dy - (char *) &grid;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].l = 100;
      tt->struct_vals[1].l = 100;
      tt->struct_vals[2].d = -50;
      tt->struct_vals[3].d = -50;
      tt->struct_vals[4].d = 2;
      tt->struct_vals[5].d = 2.5;
    tt++;
    
    // Parameter 'surface_stations'
    // ctype is '_surface_station_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("surface_stations");
    tt->descr = tdrpStrDup("Surface station information.");
    tt->help = tdrpStrDup("Test of variable length struct array. Note that the struct is defined in a typedef before the paramdef. Also, the struct includes an enum which is pre-defined. Enums included in this manned MUST be defined in a typedef.");
    tt->array_offset = (char *) &_surface_stations - &_start_;
    tt->array_n_offset = (char *) &surface_stations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(surface_station_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("surface_station_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("lat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_surface_stations->lat - (char *) _surface_stations;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_surface_stations->lon - (char *) _surface_stations;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("wind_sensor_ht");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_surface_stations->wind_sensor_ht - (char *) _surface_stations;
      tt->struct_def.fields[3].ftype = tdrpStrDup("gauge_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("gauge_make");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_surface_stations->gauge_make - (char *) _surface_stations;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("gauge_t");
        tt->struct_def.fields[3].enum_def.nfields = 3;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("ETI");
        tt->struct_def.fields[3].enum_def.fields[0].val = ETI;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("GEONOR");
        tt->struct_def.fields[3].enum_def.fields[1].val = GEONOR;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("CAMPBELL");
        tt->struct_def.fields[3].enum_def.fields[2].val = CAMPBELL;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("has_humidity");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_surface_stations->has_humidity - (char *) _surface_stations;
    tt->n_struct_vals = 15;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 40.1012;
      tt->struct_vals[1].d = -104.231;
      tt->struct_vals[2].d = 10;
      tt->struct_vals[3].e = ETI;
      tt->struct_vals[4].b = pTRUE;
      tt->struct_vals[5].d = 40.2109;
      tt->struct_vals[6].d = -104.576;
      tt->struct_vals[7].d = 10;
      tt->struct_vals[8].e = GEONOR;
      tt->struct_vals[9].b = pFALSE;
      tt->struct_vals[10].d = 39.1379;
      tt->struct_vals[11].d = -104.908;
      tt->struct_vals[12].d = 3;
      tt->struct_vals[13].e = CAMPBELL;
      tt->struct_vals[14].b = pFALSE;
    tt++;
    
    // Parameter 'data_field'
    // ctype is '_data_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("data_field");
    tt->descr = tdrpStrDup("Data field parameters");
    tt->help = tdrpStrDup("Test of fixed-length struct array.");
    tt->array_offset = (char *) &_data_field - &_start_;
    tt->array_n_offset = (char *) &data_field_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(data_field_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("data_field_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_data_field->scale - (char *) _data_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_data_field->bias - (char *) _data_field;
      tt->struct_def.fields[2].ftype = tdrpStrDup("long");
      tt->struct_def.fields[2].fname = tdrpStrDup("nplanes");
      tt->struct_def.fields[2].ptype = LONG_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_data_field->nplanes - (char *) _data_field;
      tt->struct_def.fields[3].ftype = tdrpStrDup("char*");
      tt->struct_def.fields[3].fname = tdrpStrDup("name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_data_field->name - (char *) _data_field;
      tt->struct_def.fields[4].ftype = tdrpStrDup("char*");
      tt->struct_def.fields[4].fname = tdrpStrDup("units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_data_field->units - (char *) _data_field;
      tt->struct_def.fields[5].ftype = tdrpStrDup("origin_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("origin");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_data_field->origin - (char *) _data_field;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("origin_t");
        tt->struct_def.fields[5].enum_def.nfields = 4;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("BOTLEFT");
        tt->struct_def.fields[5].enum_def.fields[0].val = BOTLEFT;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("TOPLEFT");
        tt->struct_def.fields[5].enum_def.fields[1].val = TOPLEFT;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("BOTRIGHT");
        tt->struct_def.fields[5].enum_def.fields[2].val = BOTRIGHT;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("TOPRIGHT");
        tt->struct_def.fields[5].enum_def.fields[3].val = TOPRIGHT;
    tt->n_struct_vals = 12;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.5;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].l = 16;
      tt->struct_vals[3].s = tdrpStrDup("Reflectivity");
      tt->struct_vals[4].s = tdrpStrDup("dBZ");
      tt->struct_vals[5].e = BOTLEFT;
      tt->struct_vals[6].d = 0.6;
      tt->struct_vals[7].d = 1.1;
      tt->struct_vals[8].l = 17;
      tt->struct_vals[9].s = tdrpStrDup("Velocity");
      tt->struct_vals[10].s = tdrpStrDup("m/s");
      tt->struct_vals[11].e = TOPLEFT;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
