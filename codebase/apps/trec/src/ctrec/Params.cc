/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program ctrec
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("ctrec tracks echo motion using a cross-correlation technique to match pattern movement from one image to the next in time. Input is radar reflectivity, or a similar field (such as satellite IR) in MDV format. Output is U/V fields in MDV format, as well as a copy of the original tracked field.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("OPERATIONAL PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Option to print debugging messages/post-analysis output.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for registration with the process mapper.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operational Mode.");
    tt->help = tdrpStrDup("Realtime mode waits for new data; archive mode processes files in a given file list.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'time_value'
    // ctype is '_time_value_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("time_value");
    tt->descr = tdrpStrDup("Master header time field to use for time calculations");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &time_value - &_start_;
    tt->enum_def.name = tdrpStrDup("time_value_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIME_BEGIN");
      tt->enum_def.fields[0].val = TIME_BEGIN;
      tt->enum_def.fields[1].name = tdrpStrDup("TIME_CENTROID");
      tt->enum_def.fields[1].val = TIME_CENTROID;
      tt->enum_def.fields[2].name = tdrpStrDup("TIME_END");
      tt->enum_def.fields[2].val = TIME_END;
    tt->single_val.e = TIME_BEGIN;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("ALGORITHM PARAMETERS");
    tt->comment_text = tdrpStrDup("The ctrec algorithm performs the following steps:\n\tread in the data\n\treplace bad data values with thr_dbz\n\tif (clutter_flg)\n\t\tremove clutter (detrend if dtrnd_flg set)\n\tif (floor_flg)\n\t\treplace weak/missing data with noise\n\ttrack echoes\n\tif (thrvec_flg)\n\t\tdiscard vectors based on local mean\n\tdiscard vectors based on global mean\n\tif (fillvec_flg)\n\t\tfill in missing vectors using least-squares fit\n\tfill in areas around each vector with closest vector value\n\tperform temporal smoothing based on previous vectors\nThe parameters below are given in the order that things happen in the program.");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("Image timing parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_time_between_images'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("max_time_between_images");
    tt->descr = tdrpStrDup("Maximum time (in seconds) allowed between images used to generate vectors.");
    tt->help = tdrpStrDup("Two (consecutive) volume times are required to compute vectors.");
    tt->val_offset = (char *) &max_time_between_images - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 1;
    tt->single_val.l = 3600;
    tt++;
    
    // Parameter 'min_time_between_images'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("min_time_between_images");
    tt->descr = tdrpStrDup("Minimum time (in seconds) allowed between images used to generate vectors.");
    tt->help = tdrpStrDup("Two (consecutive) volume times are required to compute vectors.");
    tt->val_offset = (char *) &min_time_between_images - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 1;
    tt->single_val.l = 240;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("Output grid parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'define_output_grid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("define_output_grid");
    tt->descr = tdrpStrDup("Define output grid flag");
    tt->help = tdrpStrDup("If TRUE, the output_grid parameter will be used to define the output grid.  If FALSE, the input grid will be used for the output grid.");
    tt->val_offset = (char *) &define_output_grid - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_grid'
    // ctype is '_grid_def_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_grid");
    tt->descr = tdrpStrDup("Output grid definition");
    tt->help = tdrpStrDup("If define_output_grid is TRUE, this structure is used to define the new output grid.  The grid_type field can be either FLAT or LATLON.  If grid_type is LATLON, the origin_lat and origin_lon fields are ignored.");
    tt->val_offset = (char *) &output_grid - &_start_;
    tt->struct_def.name = tdrpStrDup("grid_def_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("grid_type_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("grid_type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &output_grid.grid_type - (char *) &output_grid;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("grid_type_t");
        tt->struct_def.fields[0].enum_def.nfields = 2;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("FLAT");
        tt->struct_def.fields[0].enum_def.fields[0].val = FLAT;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("LATLON");
        tt->struct_def.fields[0].enum_def.fields[1].val = LATLON;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("minx");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &output_grid.minx - (char *) &output_grid;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("miny");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &output_grid.miny - (char *) &output_grid;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("dx");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &output_grid.dx - (char *) &output_grid;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("dy");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &output_grid.dy - (char *) &output_grid;
      tt->struct_def.fields[5].ftype = tdrpStrDup("long");
      tt->struct_def.fields[5].fname = tdrpStrDup("nx");
      tt->struct_def.fields[5].ptype = LONG_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &output_grid.nx - (char *) &output_grid;
      tt->struct_def.fields[6].ftype = tdrpStrDup("long");
      tt->struct_def.fields[6].fname = tdrpStrDup("ny");
      tt->struct_def.fields[6].ptype = LONG_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &output_grid.ny - (char *) &output_grid;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("origin_lat");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &output_grid.origin_lat - (char *) &output_grid;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("origin_lon");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &output_grid.origin_lon - (char *) &output_grid;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = FLAT;
      tt->struct_vals[1].d = -199.5;
      tt->struct_vals[2].d = -199.5;
      tt->struct_vals[3].d = 1;
      tt->struct_vals[4].d = 1;
      tt->struct_vals[5].l = 400;
      tt->struct_vals[6].l = 400;
      tt->struct_vals[7].d = 38.9753;
      tt->struct_vals[8].d = -77.477;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("Input file parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'analyze_alt'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("analyze_alt");
    tt->descr = tdrpStrDup("Analyze altitude, in units used for vertical levels by the input field.");
    tt->help = tdrpStrDup("This value must be given in units that match the units used in the input files.  The plane in the data closest to this altitude with be used in the analysis.");
    tt->val_offset = (char *) &analyze_alt - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("field_name");
    tt->descr = tdrpStrDup("Field name to analyze. The user can specify a field number\nrather than a name by using the pound sign, ie. setting the\nname to #3 asks for field number three (fields start at 0).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'input_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_url");
    tt->descr = tdrpStrDup("URL used for retrieving the input data.");
    tt->help = tdrpStrDup("For data on local disk, this can just be the directory containing the input MDV data files.  For data retrieved from a server, it is the URL for the server.  A server URL looks like the following:\n\tmdvp:://host:port:directory_path\nThis URL specifies a DsMdvServer process running on the specified host and using the specified port.  The data would reside on the specified host under $RAP_DATA_DIR/directory_path.");
    tt->val_offset = (char *) &input_url - &_start_;
    tt->single_val.s = tdrpStrDup("./input");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("Output file parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("URL used for writing the output data.");
    tt->help = tdrpStrDup("For data on local disk, this can just be the directory containing the output MDV data files.  For data written via a server, it is the URL for the server.  A server URL looks like the following:\n\tmdvp:://host:port:directory_path\nThis URL specifies a DsMdvServer process running on the specified host and using the specified port.  The data would reside on the specified host under $RAP_DATA_DIR/directory_path.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("General algorithm parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'min_echo'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_echo");
    tt->descr = tdrpStrDup("Minimum data value to track");
    tt->help = tdrpStrDup("This value is given in the same units as the underlying data.\n\nNote that this value must be greater than or equal to thr_dbz.");
    tt->val_offset = (char *) &min_echo - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'max_echo'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_echo");
    tt->descr = tdrpStrDup("Maximum data value to track");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_echo - &_start_;
    tt->single_val.d = 1000;
    tt++;
    
    // Parameter 'track_top_percentage'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("track_top_percentage");
    tt->descr = tdrpStrDup("Flag indicating whether to track the top_percentage percent of the data.");
    tt->help = tdrpStrDup("If this flag is set, ctrec will track just the top given percentage (defined in the top_percentage parameter below) of the data values in each correlation box.  For example, if top_percentage is set to 0.4, in each correlation box ctrec will sort the \"good\" data values (those values between min_echo and max_echo) and find the value at the 40% mark from the top of the data.  Then, any data value below this value will be replaced with noise before calculating the correlation coefficient.\nNote that if top_percentage_increasing is set to false, the tracking is reversed and the lowest 40% (or whatever) of the data in each box will be tracked.");
    tt->val_offset = (char *) &track_top_percentage - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'top_percentage'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("top_percentage");
    tt->descr = tdrpStrDup("The percentage value to use if track_top_percentage is set to true.");
    tt->help = tdrpStrDup("This is a value between 0.0 and 0.1 representing the percentage of data values to track.\n\nSee the description for the track_top_percentage parameter for detailed information on how this parameter is used.");
    tt->val_offset = (char *) &top_percentage - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 1;
    tt->single_val.d = 0.4;
    tt++;
    
    // Parameter 'top_percentage_increasing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("top_percentage_increasing");
    tt->descr = tdrpStrDup("Flag indicating whether the data values are increasing or decreasing when looking for the top percentage of the data.");
    tt->help = tdrpStrDup("For example, this flag would be true for reflectivity data, but false for satellite data.\nThis flag is ignored if track_top_percentage is set to false.");
    tt->val_offset = (char *) &top_percentage_increasing - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_speed_echo'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_speed_echo");
    tt->descr = tdrpStrDup("User entered maximum expected echo speed (m/s) ");
    tt->help = tdrpStrDup("This should be set to a reasonable value for the data.  If it is set very large not only will it slow down processing, it will also reduce the area of the data where motion is calculated because we skip the area around the data covered by this distance to make sure we can look in all directions before calculating the correlations.");
    tt->val_offset = (char *) &max_speed_echo - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("Clutter removal parameters");
    tt->comment_text = tdrpStrDup("Clutter removal is performed on the individual images before the tracking algorithm is run.  The clutter is removed independently on the two images.");
    tt++;
    
    // Parameter 'clutter_flg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("clutter_flg");
    tt->descr = tdrpStrDup("Remove Clutter Flag");
    tt->help = tdrpStrDup("If true, clutter in the original images is removed using  the reflectivity variance method.");
    tt->val_offset = (char *) &clutter_flg - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'dtrnd_flg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("dtrnd_flg");
    tt->descr = tdrpStrDup("Detrend Flag");
    tt->help = tdrpStrDup("If true, the reflectivity data will be detrended during the variance calculation for clutter removal.  This flag is ignored if clutter_flg is false.");
    tt->val_offset = (char *) &dtrnd_flg - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'thr_sd'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("thr_sd");
    tt->descr = tdrpStrDup("Variance threshold for clutter removal ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &thr_sd - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 100;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'output_after_clutter_removal'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_after_clutter_removal");
    tt->descr = tdrpStrDup("Output data grid after clutter removal flag");
    tt->help = tdrpStrDup("If true and clutter_flg is also true, the data grid after clutter removal has been performed will be added to the output file.");
    tt->val_offset = (char *) &output_after_clutter_removal - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("Data filling parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'floor_flg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("floor_flg");
    tt->descr = tdrpStrDup("Floor data flag");
    tt->help = tdrpStrDup("If true, weak/missing reflectivity data will be replaced with random numbers.  This should always be set to true.");
    tt->val_offset = (char *) &floor_flg - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'thr_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("thr_dbz");
    tt->descr = tdrpStrDup("Threshold dbz -- threshold for reflectivity filling/tracking");
    tt->help = tdrpStrDup("If floor_flg is true, reflectivity values less than min_echo or greater than max_echo will be filled with random values centered around this value.\n\nNote that this value must be less than or equal to min_echo.");
    tt->val_offset = (char *) &thr_dbz - &_start_;
    tt->single_val.d = -28;
    tt++;
    
    // Parameter 'del_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("del_dbz");
    tt->descr = tdrpStrDup("Delta dbz -- purtubation value for random numbers ");
    tt->help = tdrpStrDup("If floor_flg is true, reflectivity values less than min_echo will be filled with random numbers between thr_dbz - del_dbz and thr_dbz + del_dbz.");
    tt->val_offset = (char *) &del_dbz - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'output_after_random_noise'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_after_random_noise");
    tt->descr = tdrpStrDup("Output data grid after adding random noise flag");
    tt->help = tdrpStrDup("If true and floor_flg is also true, the data grid after data filling with random noise has been performed will be added to the output file.");
    tt->val_offset = (char *) &output_after_random_noise - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("Correlation calculation parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'cbox_fract'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cbox_fract");
    tt->descr = tdrpStrDup("Correlation box fraction");
    tt->help = tdrpStrDup("Maximum fraction (%) of bad data allowed in a correlation box.");
    tt->val_offset = (char *) &cbox_fract - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 100;
    tt->single_val.d = 95;
    tt++;
    
    // Parameter 'cbox_size'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cbox_size");
    tt->descr = tdrpStrDup("Correlation box size");
    tt->help = tdrpStrDup("The length of one side of the correlation box, in km");
    tt->val_offset = (char *) &cbox_size - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 3;
    tt->max_val.d = 1000;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'cbox_space'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cbox_space");
    tt->descr = tdrpStrDup("Correlation box spacing");
    tt->help = tdrpStrDup("Spacing between vectors in the final grid, in km.");
    tt->val_offset = (char *) &cbox_space - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 2;
    tt->max_val.d = 1000;
    tt->single_val.d = 15;
    tt++;
    
    // Parameter 'thr_cor'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("thr_cor");
    tt->descr = tdrpStrDup("Correlation threshold");
    tt->help = tdrpStrDup("Echo motion vectors that have (correlation coefficient*100) less than this value will be discarded.");
    tt->val_offset = (char *) &thr_cor - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 100;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'cormax_search_params'
    // ctype is '_cormax_search_params_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("cormax_search_params");
    tt->descr = tdrpStrDup("Parameters describing the method for searching for the maximum correlation value.");
    tt->help = tdrpStrDup("This parameter only matters if there are several motions for a box that share the same maximum correlation.");
    tt->val_offset = (char *) &cormax_search_params - &_start_;
    tt->struct_def.name = tdrpStrDup("cormax_search_params_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("search_start_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("start");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &cormax_search_params.start - (char *) &cormax_search_params;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("search_start_t");
        tt->struct_def.fields[0].enum_def.nfields = 4;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("UPPER_LEFT_CORNER");
        tt->struct_def.fields[0].enum_def.fields[0].val = UPPER_LEFT_CORNER;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("UPPER_RIGHT_CORNER");
        tt->struct_def.fields[0].enum_def.fields[1].val = UPPER_RIGHT_CORNER;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("LOWER_LEFT_CORNER");
        tt->struct_def.fields[0].enum_def.fields[2].val = LOWER_LEFT_CORNER;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("LOWER_RIGHT_CORNER");
        tt->struct_def.fields[0].enum_def.fields[3].val = LOWER_RIGHT_CORNER;
      tt->struct_def.fields[1].ftype = tdrpStrDup("search_dir_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("direction");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &cormax_search_params.direction - (char *) &cormax_search_params;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("search_dir_t");
        tt->struct_def.fields[1].enum_def.nfields = 2;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("ROW_FIRST_SEARCH");
        tt->struct_def.fields[1].enum_def.fields[0].val = ROW_FIRST_SEARCH;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("COLUMN_FIRST_SEARCH");
        tt->struct_def.fields[1].enum_def.fields[1].val = COLUMN_FIRST_SEARCH;
      tt->struct_def.fields[2].ftype = tdrpStrDup("search_result_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("result");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &cormax_search_params.result - (char *) &cormax_search_params;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("search_result_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("TAKE_FIRST_FOUND");
        tt->struct_def.fields[2].enum_def.fields[0].val = TAKE_FIRST_FOUND;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("TAKE_LAST_FOUND");
        tt->struct_def.fields[2].enum_def.fields[1].val = TAKE_LAST_FOUND;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("TAKE_MIDDLE_FOUND");
        tt->struct_def.fields[2].enum_def.fields[2].val = TAKE_MIDDLE_FOUND;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = LOWER_LEFT_CORNER;
      tt->struct_vals[1].e = COLUMN_FIRST_SEARCH;
      tt->struct_vals[2].e = TAKE_FIRST_FOUND;
    tt++;
    
    // Parameter 'output_correlation_locations'
    // ctype is '_corr_loc_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_correlation_locations");
    tt->descr = tdrpStrDup("Locations for outputting calculated correlation values");
    tt->help = tdrpStrDup("X and Y values should be given in the correct units for the underlying grid (deg for lat/lon grids; km for flat grids).");
    tt->array_offset = (char *) &_output_correlation_locations - &_start_;
    tt->array_n_offset = (char *) &output_correlation_locations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(corr_loc_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("corr_loc_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_correlation_locations->x - (char *) _output_correlation_locations;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_correlation_locations->y - (char *) _output_correlation_locations;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'output_correlation_grid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_correlation_grid");
    tt->descr = tdrpStrDup("Output correlation grid flag");
    tt->help = tdrpStrDup("If true, the correlation grid will be added to the output file.");
    tt->val_offset = (char *) &output_correlation_grid - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_cormax_count_grid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_cormax_count_grid");
    tt->descr = tdrpStrDup("Output max correlation count grid flag");
    tt->help = tdrpStrDup("If true, a field will be added to the output file containing a count of the number of positions where the maximum correlation coefficient occurred in the search.  This was added to see if the direction of the search for the maximum correlation coefficient is affecting the final motion vectors.  For example, if we are searching for maximum correlation beginning north of the current position and use the first grid space to contain the maximum correlation coefficient to determine the motion, will be a motion bias to the north if the maximum correlation value appears multiple times in the search area.");
    tt->val_offset = (char *) &output_cormax_count_grid - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_original_vectors'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_original_vectors");
    tt->descr = tdrpStrDup("Output original vectors flag");
    tt->help = tdrpStrDup("If true, the original U and V vectors (before all of the following thresholding and filling) will be added to the output file.");
    tt->val_offset = (char *) &output_original_vectors - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("Thresholding based on local mean parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'thrvec_flg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("thrvec_flg");
    tt->descr = tdrpStrDup("Threshold Echo Motion Vectors Flag");
    tt->help = tdrpStrDup("Flag indicating whether the motion vectors should be thresholded based on a local mean.");
    tt->val_offset = (char *) &thrvec_flg - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rad_mean'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rad_mean");
    tt->descr = tdrpStrDup("Maximum radius used to find the local mean, in km");
    tt->help = tdrpStrDup("Used only if thrvec_flg is true.There must be at least 5 valid vectors around the current one within this radius in order for the local mean to be computed.  If there are not enough valid vectors, the current vector is discarded.  The current vector is NOT included in the local mean calculation.\nNote that this value must be greater than (1.5 * cbox_space) for there to ever be enough vectors to calculate the local mean.");
    tt->val_offset = (char *) &rad_mean - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'thr_vec'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("thr_vec");
    tt->descr = tdrpStrDup("Threshold used for discarding echo motion vectors ");
    tt->help = tdrpStrDup("If an echo motion vector differs from the local mean in either the U or V direction by more than this value, it will be discarded.\nUsed only if thrvec_flg is true.");
    tt->val_offset = (char *) &thr_vec - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'output_local_mean_grids'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_local_mean_grids");
    tt->descr = tdrpStrDup("Output local mean grid flag");
    tt->help = tdrpStrDup("If true and thrvec_flg is true, the grids containing the calculated local mean values used for threshholding the vectors are created and added to the output file.  Note that there are separate grids for the U and V components of the vectors.");
    tt->val_offset = (char *) &output_local_mean_grids - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_local_mean_thresh_vectors'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_local_mean_thresh_vectors");
    tt->descr = tdrpStrDup("Output vectors after local mean thresholding flag");
    tt->help = tdrpStrDup("If true and thrvec_flg is true, the U and V vectors after thresholding based on the local mean will be added to the output file.");
    tt->val_offset = (char *) &output_local_mean_thresh_vectors - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("Thresholding based on global mean parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'thr_dif'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("thr_dif");
    tt->descr = tdrpStrDup("Global mean threshold difference");
    tt->help = tdrpStrDup("Echo motion vectors that differ from the global mean in either the U or V component by more than this value will be discarded.\nGlobal mean thresholding is always performed.");
    tt->val_offset = (char *) &thr_dif - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'output_global_mean_thresh_vectors'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_global_mean_thresh_vectors");
    tt->descr = tdrpStrDup("Output vectors after global mean thresholding flag");
    tt->help = tdrpStrDup("If true, the U and V vectors after thresholding based on the global mean will be added to the output file.");
    tt->val_offset = (char *) &output_global_mean_thresh_vectors - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("Vector filling parameters");
    tt->comment_text = tdrpStrDup("If requested, at the end of the tracking processing missing vectors are filled using a least-squares fit to surrounding vectors.  The least-squares fit is done using the smallest area around the vector that includes at least min_vec_pts valid vectors and has vectors in at least nquad_vec quadrants.  If these conditions are not met within rad_vec km around the vector, the vector is left as missing.");
    tt++;
    
    // Parameter 'fillvec_flg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("fillvec_flg");
    tt->descr = tdrpStrDup("Fill Echo Motion Vectors Flag");
    tt->help = tdrpStrDup("If true, motion vectors discarded above and missing motion vectors will be filled in using the local mean if nquad_vec and min_vec_pts are satisfied.");
    tt->val_offset = (char *) &fillvec_flg - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rad_vec'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rad_vec");
    tt->descr = tdrpStrDup("Radius for finding filling echo motion vectors, in km");
    tt->help = tdrpStrDup("Used only if fillvec_flg is true.");
    tt->val_offset = (char *) &rad_vec - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'nquad_vec'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("nquad_vec");
    tt->descr = tdrpStrDup("Number of quadrants with data needed to fill echo motion vectors.");
    tt->help = tdrpStrDup("Used only if fillvec_flg is true.");
    tt->val_offset = (char *) &nquad_vec - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.l = 0;
    tt->max_val.l = 4;
    tt->single_val.l = 4;
    tt++;
    
    // Parameter 'min_vec_pts'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_vec_pts");
    tt->descr = tdrpStrDup("Minimum number of points required for filling echo motion vectors ");
    tt->help = tdrpStrDup("Used only if fillvec_flg is true.");
    tt->val_offset = (char *) &min_vec_pts - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("Parameters for printing the global mean");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'print_global_mean'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_global_mean");
    tt->descr = tdrpStrDup("Print global mean");
    tt->help = tdrpStrDup("If set to TRUE, the global mean will be printed to stdout.");
    tt->val_offset = (char *) &print_global_mean - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("Temporal smoothing parameters");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'temporal_smoothing_type'
    // ctype is '_temporal_smoothing_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("temporal_smoothing_type");
    tt->descr = tdrpStrDup("Type of temporal smoothing to perform");
    tt->help = tdrpStrDup("\tSMOOTH_NONE means that no temporal smoothing is performed.\n\tSMOOTH_WITH_PREVIOUS_VECTOR means that the change in the values of the U and V vector components are limited to temporal_u_percent and temporal_v_percent of the previous U and V vector component values. If there was no vector calculated for the current grid position in the previous time period, the new vector is unchanged. For example, assume both temporal_u_percent and temporal_v_percent are set to 0.1. Then, at the end of processing ctrec will compare each current vector with the final vector from the previous time step. If the U value for the new vector is calculated to be 5 m/s and the U value of the final vector at the same grid point for the prevous time period is 4 m/s, then the U value for the new vector will be changed to 4.4 m/s (4 + (4 * 0.1)). Since this method breaks down when the previous U or V component is 0.0, the temporal_prev_u_min and temporal_prev_v_min parameters are used to give minimum values for the previous vector components, below which the smoothing is skipped (i.e. the current vector values are not changed if the previous vector values are below the given values).\n\tSMOOTH_WITH_VECTOR_DIFFERENCE means that the difference between the current and previous vector components is reduced by (1.0 - temporal_u_percent) or (1.0 - temporal_v_percent). So, in the above example, the calculated U difference is 1 m/s. This difference is reduced to 0.1 percent of it's original value so the smoothed U value becomes 4.1 m/s.");
    tt->val_offset = (char *) &temporal_smoothing_type - &_start_;
    tt->enum_def.name = tdrpStrDup("temporal_smoothing_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SMOOTH_NONE");
      tt->enum_def.fields[0].val = SMOOTH_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("SMOOTH_WITH_PREVIOUS_VECTOR");
      tt->enum_def.fields[1].val = SMOOTH_WITH_PREVIOUS_VECTOR;
      tt->enum_def.fields[2].name = tdrpStrDup("SMOOTH_WITH_VECTOR_DIFFERENCE");
      tt->enum_def.fields[2].val = SMOOTH_WITH_VECTOR_DIFFERENCE;
    tt->single_val.e = SMOOTH_NONE;
    tt++;
    
    // Parameter 'temporal_prev_grid_type'
    // ctype is '_temporal_prev_grid_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("temporal_prev_grid_type");
    tt->descr = tdrpStrDup("Type of grid to use as the previous grid in temporal smoothing");
    tt->help = tdrpStrDup("\tPREV_GRID_SMOOTHED uses the temporally smoothed grid from the previous time period.\n\tPREV_GRID_UNSMOOTHED uses the originally calculated vectors (before temporal smoothing) from the previous time period.\n\tPREV_GRID_AVERAGE uses the average of the above two vectors from the previous time period.");
    tt->val_offset = (char *) &temporal_prev_grid_type - &_start_;
    tt->enum_def.name = tdrpStrDup("temporal_prev_grid_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PREV_GRID_SMOOTHED");
      tt->enum_def.fields[0].val = PREV_GRID_SMOOTHED;
      tt->enum_def.fields[1].name = tdrpStrDup("PREV_GRID_UNSMOOTHED");
      tt->enum_def.fields[1].val = PREV_GRID_UNSMOOTHED;
      tt->enum_def.fields[2].name = tdrpStrDup("PREV_GRID_AVERAGE");
      tt->enum_def.fields[2].val = PREV_GRID_AVERAGE;
    tt->single_val.e = PREV_GRID_SMOOTHED;
    tt++;
    
    // Parameter 'max_time_between_vectors'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("max_time_between_vectors");
    tt->descr = tdrpStrDup("Maximum time (in seconds) allowed between vectors when performing temporal smoothing.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_time_between_vectors - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 1;
    tt->single_val.l = 3600;
    tt++;
    
    // Parameter 'min_time_between_vectors'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("min_time_between_vectors");
    tt->descr = tdrpStrDup("Minimum time (in seconds) allowed between vectors when performing temporal smoothing.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &min_time_between_vectors - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 1;
    tt->single_val.l = 240;
    tt++;
    
    // Parameter 'temporal_u_percent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("temporal_u_percent");
    tt->descr = tdrpStrDup("Temporal smoothing U change percentage");
    tt->help = tdrpStrDup("See the temporal_smoothing_type parameter description for information about how this parameter is used.");
    tt->val_offset = (char *) &temporal_u_percent - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'temporal_v_percent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("temporal_v_percent");
    tt->descr = tdrpStrDup("Temporal smoothing V change percentage");
    tt->help = tdrpStrDup("See the temporal_smoothing_type parameter description for information about how this parameter is used.");
    tt->val_offset = (char *) &temporal_v_percent - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'temporal_prev_u_min'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("temporal_prev_u_min");
    tt->descr = tdrpStrDup("Temporal smoothing minimum previous U component value");
    tt->help = tdrpStrDup("See the temporal_smoothing_type parameter description for information about how this parameter is used.");
    tt->val_offset = (char *) &temporal_prev_u_min - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'temporal_prev_v_min'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("temporal_prev_v_min");
    tt->descr = tdrpStrDup("Temporal smoothing minimum previous V component value");
    tt->help = tdrpStrDup("See the temporal_smoothing_type parameter description for information about how this parameter is used.");
    tt->val_offset = (char *) &temporal_prev_v_min - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'output_vectors_before_temporal_smoothing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_vectors_before_temporal_smoothing");
    tt->descr = tdrpStrDup("Flag indicating whether the calculated vectors before temporal smoothing should be included in the output file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_vectors_before_temporal_smoothing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
