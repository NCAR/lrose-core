/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program PrecipAccum
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("");
    tt->comment_text = tdrpStrDup("PrecipAccum calculates accumulated precipitation depth from radar files in MDV format. The 2-D precipitation fields are written out to MDV files.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_WARNINGS");
      tt->enum_def.fields[1].val = DEBUG_WARNINGS;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[2].val = DEBUG_NORM;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[3].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("PROGRAM MODES OF OPERATION.");
    tt->comment_text = tdrpStrDup("Modes and trigger mechanism.");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Program may be run in two modes, archive, and realtime. In realtime mode, the analysis is performed for each volume scan as it becomes available. In archive mode, the file list is obtained from the command line.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'trigger'
    // ctype is '_trigger_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("trigger");
    tt->descr = tdrpStrDup("Trigger mechanism. REALTIME mode only.");
    tt->help = tdrpStrDup("TIME_TRIGGER: the program is triggered at constant time intervals - see time_trigger_interval. FILE_TRIGGER: the program watches the first input_dir and triggers based on data in that directory.");
    tt->val_offset = (char *) &trigger - &_start_;
    tt->enum_def.name = tdrpStrDup("trigger_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIME_TRIGGER");
      tt->enum_def.fields[0].val = TIME_TRIGGER;
      tt->enum_def.fields[1].name = tdrpStrDup("FILE_TRIGGER");
      tt->enum_def.fields[1].val = FILE_TRIGGER;
    tt->single_val.e = TIME_TRIGGER;
    tt++;
    
    // Parameter 'time_trigger_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("time_trigger_interval");
    tt->descr = tdrpStrDup("Interval for TIME_TRIGGER - secs.");
    tt->help = tdrpStrDup("For TIME_TRIGGER, this is the interval between trigger events. In REALTIME mode, a time trigger always occurs on the hour, and at constant intervals thereafter. In ARCHIVE mode the trigger starts at start_time and at constant intervals thereafter.");
    tt->val_offset = (char *) &time_trigger_interval - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'trigger_time_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("trigger_time_margin");
    tt->descr = tdrpStrDup("Max time diff for searching for files relative to the trigger time - secs.");
    tt->help = tdrpStrDup("When matching files up with the trigger time, the difference between the trigger time and file time must be less than this margin. This value is also used as the max age of the latest data info file when in REALTIME mode with FILE_TRIGGER.");
    tt->val_offset = (char *) &trigger_time_margin - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 600;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("INPUT DATA.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_rdata_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_rdata_dir");
    tt->descr = tdrpStrDup("Directory for input radar data.");
    tt->help = tdrpStrDup("Input data is in MDV format, and must contain a reflectivity field. The reflectivity data is used for computing the precip rate.");
    tt->val_offset = (char *) &input_rdata_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'check_input_geom'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_input_geom");
    tt->descr = tdrpStrDup("Option to check that the input grid geometry does not change.");
    tt->help = tdrpStrDup("If this is TRUE, the input grid geometry is checked. If it changes, the accumulation routine will return an error.");
    tt->val_offset = (char *) &check_input_geom - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'dbz_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dbz_field_name");
    tt->descr = tdrpStrDup("Name of dBZ field in input MDV files.");
    tt->help = tdrpStrDup("If empty, the dbz_field parameter is used instead.");
    tt->val_offset = (char *) &dbz_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'dbz_field'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("dbz_field");
    tt->descr = tdrpStrDup("dBZ field position in input MDV files.");
    tt->help = tdrpStrDup("Position of reflectivity (dBZ) data in the radar volumes.");
    tt->val_offset = (char *) &dbz_field - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'input_is_rate'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("input_is_rate");
    tt->descr = tdrpStrDup("The input data is precip rate (mm/hr) instead of dBZ.");
    tt->help = tdrpStrDup("If TRUE, the input data has already been converted to precip rate in mm/hr. In this case, the data in the 'precip_field_name' field is interpreted as precip rate instead of DBZ. The following parameters are ignored: composite_min_altitude, composite_max_altitude, low_dbz_threshold, hail_dbz_threshold, zr");
    tt->val_offset = (char *) &input_is_rate - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'input_is_precip'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("input_is_precip");
    tt->descr = tdrpStrDup("The input data is precip depth (mm) instead of dBZ.");
    tt->help = tdrpStrDup("If TRUE, the input data has already been converted to precip. In this case, the data in the 'precip_field_name' field is accumulated without any translation. The following parameters are ignored: composite_min_altitude, composite_max_altitude, low_dbz_threshold, hail_dbz_threshold, zr");
    tt->val_offset = (char *) &input_is_precip - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'precip_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("precip_field_name");
    tt->descr = tdrpStrDup("Name of precip field in input MDV files.");
    tt->help = tdrpStrDup("Used if 'input_is_precip' is true.");
    tt->val_offset = (char *) &precip_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("precip");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("ACCUMULATION METHOD.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'accum_method'
    // ctype is '_accum_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("accum_method");
    tt->descr = tdrpStrDup("Accumulation method.");
    tt->help = tdrpStrDup("Two methods are available: RUNNING_ACCUM: preform a running accumulation over a given period prior to the trigger time.\n ACCUM_FROM_TIME_OF_DAY: perform an accumulation from a given time of day until the trigger time. When the selected time of day is reached, the accumulation starts again at zero. The time of day is stored in an array, so that multiple restarts may be set for each day.\nTOTAL_ACCUM: accumulate for the entire period, output result at the end of the period. ARCHIVE mode only.\n");
    tt->val_offset = (char *) &accum_method - &_start_;
    tt->enum_def.name = tdrpStrDup("accum_method_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("RUNNING_ACCUM");
      tt->enum_def.fields[0].val = RUNNING_ACCUM;
      tt->enum_def.fields[1].name = tdrpStrDup("ACCUM_FROM_TIME_OF_DAY");
      tt->enum_def.fields[1].val = ACCUM_FROM_TIME_OF_DAY;
      tt->enum_def.fields[2].name = tdrpStrDup("TOTAL_ACCUM");
      tt->enum_def.fields[2].val = TOTAL_ACCUM;
      tt->enum_def.fields[3].name = tdrpStrDup("SINGLE_FILE");
      tt->enum_def.fields[3].val = SINGLE_FILE;
      tt->enum_def.fields[4].name = tdrpStrDup("SINGLE_FILE_FORECAST");
      tt->enum_def.fields[4].val = SINGLE_FILE_FORECAST;
      tt->enum_def.fields[5].name = tdrpStrDup("CLIMO_ACCUM");
      tt->enum_def.fields[5].val = CLIMO_ACCUM;
    tt->single_val.e = RUNNING_ACCUM;
    tt++;
    
    // Parameter 'running_duration'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("running_duration");
    tt->descr = tdrpStrDup("Accumulation duration (secs).");
    tt->help = tdrpStrDup("For RUNNING ACCUM method only. This is the duration of the period over which the accumulation is computed.");
    tt->val_offset = (char *) &running_duration - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'use_elapsed_time'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_elapsed_time");
    tt->descr = tdrpStrDup("Option to force the use of elapsed time.");
    tt->help = tdrpStrDup("PrecipAccum usually adjusts the precip amount based on the observed times from the data files. However, sometimes these times are not correctly placed in the files. Therefore we may need to override and use elapsed time instead.");
    tt->val_offset = (char *) &use_elapsed_time - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'restart_time_of_day'
    // ctype is '_restart_time_of_day_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("restart_time_of_day");
    tt->descr = tdrpStrDup("The times in the day (UCT/GMT) at which accumulation restart occurs.");
    tt->help = tdrpStrDup("For ACCUM_FROM_TIME_OF_DAY method only. The program cycles through the times of day, zeroing out the accumulation at each specified time.");
    tt->array_offset = (char *) &_restart_time_of_day - &_start_;
    tt->array_n_offset = (char *) &restart_time_of_day_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(restart_time_of_day_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("restart_time_of_day_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("hour");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_restart_time_of_day->hour - (char *) _restart_time_of_day;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("min");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_restart_time_of_day->min - (char *) _restart_time_of_day;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("sec");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_restart_time_of_day->sec - (char *) _restart_time_of_day;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 0;
      tt->struct_vals[1].i = 0;
      tt->struct_vals[2].i = 0;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("CLIMATOLOGY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'climo_start_month'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("climo_start_month");
    tt->descr = tdrpStrDup("Start month for climotology.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &climo_start_month - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'climo_start_day'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("climo_start_day");
    tt->descr = tdrpStrDup("Start day for climotology.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &climo_start_day - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'climo_end_month'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("climo_end_month");
    tt->descr = tdrpStrDup("End month for climotology.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &climo_end_month - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'climo_end_day'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("climo_end_day");
    tt->descr = tdrpStrDup("End day for climotology.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &climo_end_day - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'normalize_by_number_of_seasons'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("normalize_by_number_of_seasons");
    tt->descr = tdrpStrDup("Option to normalize the total accumulation by the number of seasons.");
    tt->help = tdrpStrDup("In CLIMATOLOGY mode, divide the total by the number of seasons.");
    tt->val_offset = (char *) &normalize_by_number_of_seasons - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'climo_n_seasons'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("climo_n_seasons");
    tt->descr = tdrpStrDup("Number of seasons for climatology.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &climo_n_seasons - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("DATA VOLUME DURATION.");
    tt->comment_text = tdrpStrDup("By default, the volume duration is computed by taking the difference between the start and end times in the MDV file header. This behavior may be modified by the parameters below.");
    tt++;
    
    // Parameter 'max_duration_seconds'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_duration_seconds");
    tt->descr = tdrpStrDup("Maximum allowed volume duration");
    tt->help = tdrpStrDup("When taking the difference between start and end times in MDV file headers, if that difference exceeds this value, the default volume duration is instead set to the volume_duration parameter value - see below.");
    tt->val_offset = (char *) &max_duration_seconds - &_start_;
    tt->single_val.i = 1800;
    tt++;
    
    // Parameter 'compute_volume_duration_from_data_times'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_volume_duration_from_data_times");
    tt->descr = tdrpStrDup("Option to compute vol duration by the spacing of the data in time.");
    tt->help = tdrpStrDup("If TRUE, the duration for each volume is computed as the time difference between the current volume and the previous volume. This option takes precedence over 'override_volume_duration' - see below.");
    tt->val_offset = (char *) &compute_volume_duration_from_data_times - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_computed_volume_duration'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_computed_volume_duration");
    tt->descr = tdrpStrDup("Specify the max computed volume duration - secs.");
    tt->help = tdrpStrDup("Used in conjunction with 'compute_volume_duration_from_data_times'. If the computed volume duration exceeds this, we revert to the default behavior, i.e. computing it from the start and end times in the volume.");
    tt->val_offset = (char *) &max_computed_volume_duration - &_start_;
    tt->single_val.i = 1800;
    tt++;
    
    // Parameter 'override_volume_duration'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_volume_duration");
    tt->descr = tdrpStrDup("Option to override volume duration in input MDV files.");
    tt->help = tdrpStrDup("If TRUE, the duration for each volume is set to the parameter volume_duration. This parameter is overridden by 'compute_volume_duration_from_data_times'.");
    tt->val_offset = (char *) &override_volume_duration - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'volume_duration'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("volume_duration");
    tt->descr = tdrpStrDup("Specified volume duration - secs.");
    tt->help = tdrpStrDup("If override_volume_duration is TRUE, this value is used instead of computing the volume duraiton from the MDV file header.");
    tt->val_offset = (char *) &volume_duration - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'adjust_for_expected_total_duration'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("adjust_for_expected_total_duration");
    tt->descr = tdrpStrDup("Option to adjust the precip accum for the expected total duration.");
    tt->help = tdrpStrDup("If TRUE, the computed accumulation is adjusted for the total expected duration. This corrects for the problem of incorrect volume duration in the file headers, or missing data. This correction is not done if either 'override_volume_duration' or 'compute_volume_duration_from_data_times' is TRUE.");
    tt->val_offset = (char *) &adjust_for_expected_total_duration - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("PRECIP ESTIMATION.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'vert_method'
    // ctype is '_vert_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("vert_method");
    tt->descr = tdrpStrDup("Method for computing the dbz value from the vertical column data.");
    tt->help = tdrpStrDup("All vert methods apply to the layers between (and including) composite_min_altitude and composite_max_altitude. For VERT_MAX, the max reflecivity in the layers is used. To use a single layer, set the min and max altitudes to the same value. For VERT_MEAN_Z, the mean Z value for the layers is computed, and converted into dBZ. For VERT_MEAN_DBZ, the mean of the dBZ values in the layers is computed. NOTE: these methods do NOT apply if input_is_precip is true.");
    tt->val_offset = (char *) &vert_method - &_start_;
    tt->enum_def.name = tdrpStrDup("vert_method_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_MAX");
      tt->enum_def.fields[0].val = VERT_MAX;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_MEAN_Z");
      tt->enum_def.fields[1].val = VERT_MEAN_Z;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_MEAN_DBZ");
      tt->enum_def.fields[2].val = VERT_MEAN_DBZ;
    tt->single_val.e = VERT_MAX;
    tt++;
    
    // Parameter 'composite_min_altitude'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("composite_min_altitude");
    tt->descr = tdrpStrDup("Min altitude CAPPI used in composite (km).");
    tt->help = tdrpStrDup("All precip estimates are computed from composite reflectivity, i.e. the max reflectivity over a given point between two height limits. This is the altitude of lower CAPPI for the composite. If you want to use reflectivity at a single height only, set this equal to composite_max_altitude.");
    tt->val_offset = (char *) &composite_min_altitude - &_start_;
    tt->single_val.f = -1;
    tt++;
    
    // Parameter 'composite_max_altitude'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("composite_max_altitude");
    tt->descr = tdrpStrDup("Max altitude CAPPI used in composite (km).");
    tt->help = tdrpStrDup("All precip estimates are computed from composite reflectivity, i.e. the max reflectivity over a given point between two height limits. This is the altitude of upper CAPPI for the composite. If you want to use reflectivity at a single height only, set this equal to composite_min_altitude.");
    tt->val_offset = (char *) &composite_max_altitude - &_start_;
    tt->single_val.f = 25;
    tt++;
    
    // Parameter 'set_max_precip_depth'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_max_precip_depth");
    tt->descr = tdrpStrDup("Option to contrain precip depth to a max value.");
    tt->help = tdrpStrDup("If set, the precip depth at any point will be constrained to max_precip_depth. The reason to do this is to prevent certain points, normally ground clutter, from causing large apparent precip depths, thereby losing precision for the lower depths.");
    tt->val_offset = (char *) &set_max_precip_depth - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_precip_depth'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("max_precip_depth");
    tt->descr = tdrpStrDup("Max precip depth (mm) if set_max_precip_depth is TRUE.");
    tt->help = tdrpStrDup("See set_max_precip_depth.");
    tt->val_offset = (char *) &max_precip_depth - &_start_;
    tt->single_val.f = 1000;
    tt++;
    
    // Parameter 'low_dbz_threshold'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("low_dbz_threshold");
    tt->descr = tdrpStrDup("Low reflectivity threshold (dBZ).");
    tt->help = tdrpStrDup("Reflectivity below this threshold is ignored in making the computations. This prevents clear air returns from creating areas of low precipitation.");
    tt->val_offset = (char *) &low_dbz_threshold - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = -40;
    tt->max_val.f = 90;
    tt->single_val.f = 10;
    tt++;
    
    // Parameter 'hail_dbz_threshold'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("hail_dbz_threshold");
    tt->descr = tdrpStrDup("Hail reflectivity threshold (dBZ).");
    tt->help = tdrpStrDup("The reflectivity threshold between rain and hail. dBZ values above this threshold are truncated to the threshold prior to the computation of precipitation rate.");
    tt->val_offset = (char *) &hail_dbz_threshold - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = 40;
    tt->max_val.f = 90;
    tt->single_val.f = 53;
    tt++;
    
    // Parameter 'get_zr_from_database'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("get_zr_from_database");
    tt->descr = tdrpStrDup("Option to use ZR from SPDB data base.");
    tt->help = tdrpStrDup("If set, the Z-R parameters are obtained from the closest entry in the ZR data base. This option is not yet implemented.");
    tt->val_offset = (char *) &get_zr_from_database - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'zr_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("zr_spdb_url");
    tt->descr = tdrpStrDup("URL for ZR SPDB data.");
    tt->help = tdrpStrDup("The ZR data is obtained from a server at this URL.");
    tt->val_offset = (char *) &zr_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("zr");
    tt++;
    
    // Parameter 'zr'
    // ctype is '_zr_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("zr");
    tt->descr = tdrpStrDup("ZR function parameters.");
    tt->help = tdrpStrDup("These are used if the ZR function is considered constant and is not obtained from the data base.");
    tt->val_offset = (char *) &zr - &_start_;
    tt->struct_def.name = tdrpStrDup("zr_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("coeff");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &zr.coeff - (char *) &zr;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("expon");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &zr.expon - (char *) &zr;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 200;
      tt->struct_vals[1].f = 1.6;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("FILE LABEL DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'data_set_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_name");
    tt->descr = tdrpStrDup("Data set name.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_name - &_start_;
    tt->single_val.s = tdrpStrDup("Precipitation accumulation.");
    tt++;
    
    // Parameter 'data_set_source'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_source");
    tt->descr = tdrpStrDup("Data set source details.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_source - &_start_;
    tt->single_val.s = tdrpStrDup("Computed by applying ZR function to dBZ data and integrating.");
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("OUTPUT DATA.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'set_missing_to_zero'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_missing_to_zero");
    tt->descr = tdrpStrDup("Option to set missing data values to 0.");
    tt->help = tdrpStrDup("If TRUE, any point in the grid with a missing data value will be set to zero. If FALSE, grid points without any valid data will be set to missing in the output grids. Note that grid points that have missing data for some time periods but valid data for others will treat the missing data as 0 for calculations.");
    tt->val_offset = (char *) &set_missing_to_zero - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'generate_rate_grid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("generate_rate_grid");
    tt->descr = tdrpStrDup("Option to generate additional MDV field for precip rate.");
    tt->help = tdrpStrDup("If set, the precip rate is computed and added to the MDV output file.");
    tt->val_offset = (char *) &generate_rate_grid - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'generate_max_dbz_grid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("generate_max_dbz_grid");
    tt->descr = tdrpStrDup("Option to generate additional MDV field for max_dbz.");
    tt->help = tdrpStrDup("If set, the max_dbz is computed in addition to the precip. This field appears in the output MDV file.");
    tt->val_offset = (char *) &generate_max_dbz_grid - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'generate_max_vil_grid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("generate_max_vil_grid");
    tt->descr = tdrpStrDup("Option to generate additional MDV field for max_vil.");
    tt->help = tdrpStrDup("If set, the max_vil is computed in addition to the precip. This field appears in the output MDV file.");
    tt->val_offset = (char *) &generate_max_vil_grid - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_precip_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_precip_dir");
    tt->descr = tdrpStrDup("Output directory.");
    tt->help = tdrpStrDup("The precipitation accumulation data is output to this directory in MDV format.");
    tt->val_offset = (char *) &output_precip_dir - &_start_;
    tt->single_val.s = tdrpStrDup("$(RAP_DATA_DIR)/mdv/precip_accum");
    tt++;
    
    // Parameter 'write_as_forecast'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_as_forecast");
    tt->descr = tdrpStrDup("Set to true to write as forecast data (g_HHMMSS/f_00000000.mdv\n Otherwise, output will just be written to a day dir.\n ");
    tt->help = tdrpStrDup("Defaults to FALSE");
    tt->val_offset = (char *) &write_as_forecast - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_encoding_type'
    // ctype is '_encoding_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_encoding_type");
    tt->descr = tdrpStrDup("Set encoding type.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_encoding_type - &_start_;
    tt->enum_def.name = tdrpStrDup("encoding_type_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ENCODING_ASIS");
      tt->enum_def.fields[0].val = ENCODING_ASIS;
      tt->enum_def.fields[1].name = tdrpStrDup("ENCODING_INT8");
      tt->enum_def.fields[1].val = ENCODING_INT8;
      tt->enum_def.fields[2].name = tdrpStrDup("ENCODING_INT16");
      tt->enum_def.fields[2].val = ENCODING_INT16;
      tt->enum_def.fields[3].name = tdrpStrDup("ENCODING_FLOAT32");
      tt->enum_def.fields[3].val = ENCODING_FLOAT32;
    tt->single_val.e = ENCODING_INT8;
    tt++;
    
    // Parameter 'store_precip_as_log'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("store_precip_as_log");
    tt->descr = tdrpStrDup("Option to take the log of the precip accum before storing in the file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &store_precip_as_log - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
