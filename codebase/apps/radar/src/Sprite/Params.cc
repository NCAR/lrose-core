/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Sprite
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Sprite is the spectral display for time series data");
    tt->comment_text = tdrpStrDup("This is a C++ application based on the QT GUI toolkit.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register this process with the process mapper (procmap).");
    tt->help = tdrpStrDup("If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'check_alloc'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_alloc");
    tt->descr = tdrpStrDup("Option to check memory allocations.");
    tt->help = tdrpStrDup("For debugging memory usage.");
    tt->val_offset = (char *) &check_alloc - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT MODE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_mode'
    // ctype is '_input_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_mode");
    tt->descr = tdrpStrDup("Method for reading the input time series data");
    tt->help = tdrpStrDup("\n\nREALTIME_FMQ_MODE: read a real-time IWRF data stream from an FMQ.\n\nREALTIME_TCP_MODE: read a real-time IWRF data stream from a TCP server.\n\nARCHIVE_TIME_MODE: given a time span and data directory, identify the list of files within that time span and read those files.\n\nFILE_LIST_MODE: the list of time series files is specified on the command line.\n\nFOLLOW_MOMENTS_MODE: the user is running a moments display (e.g. HawkEye or CIDD) and clicks on locations of interest. Sprite polls a shared memory segment for information on the user's clicks, and reads in the data for the time and location specified in the latest click.");
    tt->val_offset = (char *) &input_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("input_mode_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME_FMQ_MODE");
      tt->enum_def.fields[0].val = REALTIME_FMQ_MODE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME_TCP_MODE");
      tt->enum_def.fields[1].val = REALTIME_TCP_MODE;
      tt->enum_def.fields[2].name = tdrpStrDup("ARCHIVE_TIME_MODE");
      tt->enum_def.fields[2].val = ARCHIVE_TIME_MODE;
      tt->enum_def.fields[3].name = tdrpStrDup("FILE_LIST_MODE");
      tt->enum_def.fields[3].val = FILE_LIST_MODE;
      tt->enum_def.fields[4].name = tdrpStrDup("FOLLOW_MOMENTS_MODE");
      tt->enum_def.fields[4].val = FOLLOW_MOMENTS_MODE;
    tt->single_val.e = REALTIME_FMQ_MODE;
    tt++;
    
    // Parameter 'input_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_url");
    tt->descr = tdrpStrDup("REALTIME_FMQ_MODE: input URL for moments data from an FMQ");
    tt->help = tdrpStrDup("A fully-qualified url is of the form fmqp:://hostname:port:path. The path does not include the file extension.");
    tt->val_offset = (char *) &input_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/ts");
    tt++;
    
    // Parameter 'seek_to_start_of_fmq'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("seek_to_start_of_fmq");
    tt->descr = tdrpStrDup("Option to seek to the start of the input FMQ.");
    tt->help = tdrpStrDup("If TRUE, the program will seek to the start of the fmq and read the entire contents at startup. If FALSE, it will read only new data as it arrives.");
    tt->val_offset = (char *) &seek_to_start_of_fmq - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'input_tcp_address'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_tcp_address");
    tt->descr = tdrpStrDup("REALTIME_TCP_MODE: ip address of host running IWRF moments server.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_tcp_address - &_start_;
    tt->single_val.s = tdrpStrDup("localhost");
    tt++;
    
    // Parameter 'input_tcp_port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("input_tcp_port");
    tt->descr = tdrpStrDup("REALTIME_TCP_MODE: TCP port for IWRF moments server.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_tcp_port - &_start_;
    tt->single_val.i = 11000;
    tt++;
    
    // Parameter 'archive_data_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("archive_data_dir");
    tt->descr = tdrpStrDup("ARCHIVE_TIME_MODE: directory path for time series files.");
    tt->help = tdrpStrDup("This should point to the top dir of a time series data set. Below this will be date directories - i.e. yyyymmdd.");
    tt->val_offset = (char *) &archive_data_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/data/time_series/spol");
    tt++;
    
    // Parameter 'archive_start_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("archive_start_time");
    tt->descr = tdrpStrDup("ARCHIVE_TIME_MODE: start time (yyyy mm dd hh mm ss).");
    tt->help = tdrpStrDup("Data retrieval starts at this time.");
    tt->val_offset = (char *) &archive_start_time - &_start_;
    tt->single_val.s = tdrpStrDup("2019 03 01 00 00 00");
    tt++;
    
    // Parameter 'archive_time_span_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("archive_time_span_secs");
    tt->descr = tdrpStrDup("ARCHIVE_TIME_MODE: time span (secs).");
    tt->help = tdrpStrDup("archive_end_time = archive_start_time + archive_time_span.");
    tt->val_offset = (char *) &archive_time_span_secs - &_start_;
    tt->single_val.d = 200;
    tt++;
    
    // Parameter 'min_secs_between_rendering'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_secs_between_rendering");
    tt->descr = tdrpStrDup("Min time between rendering (secs).");
    tt->help = tdrpStrDup("Setting this higher makes the display less smooth, but prevents the display from taking up too much CPU.");
    tt->val_offset = (char *) &min_secs_between_rendering - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("GETTING CLICK-POINT INFO FROM MOMENTS DISPLAY (CIDD or HawkEye)");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'moments_shmem_key'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("moments_shmem_key");
    tt->descr = tdrpStrDup("The shared memory key for the moments display coordinate struct.");
    tt->help = tdrpStrDup("When the user clicks in the moments main window, the coordinate struct is updated with the location and time.");
    tt->val_offset = (char *) &moments_shmem_key - &_start_;
    tt->single_val.i = 61500;
    tt++;
    
    // Parameter 'moments_max_search_angle_error'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("moments_max_search_angle_error");
    tt->descr = tdrpStrDup("Max angular error when searching for spectra close to the click point (deg).");
    tt->help = tdrpStrDup("When the user clicks in CIDD, the (x) location is saved. From this, the elevation, elevation and range of the click point can be determined. The data base is then searched for spectra from a beam close to this. This parameter gives the max angular error allowable in this search.");
    tt->val_offset = (char *) &moments_max_search_angle_error - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("INITIAL RANGE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'selected_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("selected_range_km");
    tt->descr = tdrpStrDup("Initial range for selecting a radar gate (km).");
    tt->help = tdrpStrDup("The display begins using this range. The user can then change the range either by selecting a point in CIDD or HawkEye, or by clicking in the ascope plots.");
    tt->val_offset = (char *) &selected_range_km - &_start_;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("STATUS TO BE SHOWN IN GUI");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'show_status_in_gui'
    // ctype is '_show_status_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("show_status_in_gui");
    tt->descr = tdrpStrDup("Indicate which status items to show in GUI.");
    tt->help = tdrpStrDup("These items are shown in the left panel in the GUI. Setting an item to false will hide it in the GUI.");
    tt->val_offset = (char *) &show_status_in_gui - &_start_;
    tt->struct_def.name = tdrpStrDup("show_status_t");
    tt->struct_def.nfields = 24;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("azimuth");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &show_status_in_gui.azimuth - (char *) &show_status_in_gui;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("elevation");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &show_status_in_gui.elevation - (char *) &show_status_in_gui;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("fixed_angle");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &show_status_in_gui.fixed_angle - (char *) &show_status_in_gui;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("volume_number");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &show_status_in_gui.volume_number - (char *) &show_status_in_gui;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("sweep_number");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &show_status_in_gui.sweep_number - (char *) &show_status_in_gui;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("n_samples");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &show_status_in_gui.n_samples - (char *) &show_status_in_gui;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("n_gates");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &show_status_in_gui.n_gates - (char *) &show_status_in_gui;
      tt->struct_def.fields[7].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[7].fname = tdrpStrDup("gate_length");
      tt->struct_def.fields[7].ptype = BOOL_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &show_status_in_gui.gate_length - (char *) &show_status_in_gui;
      tt->struct_def.fields[8].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[8].fname = tdrpStrDup("pulse_width");
      tt->struct_def.fields[8].ptype = BOOL_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &show_status_in_gui.pulse_width - (char *) &show_status_in_gui;
      tt->struct_def.fields[9].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[9].fname = tdrpStrDup("prf_mode");
      tt->struct_def.fields[9].ptype = BOOL_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &show_status_in_gui.prf_mode - (char *) &show_status_in_gui;
      tt->struct_def.fields[10].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[10].fname = tdrpStrDup("prf");
      tt->struct_def.fields[10].ptype = BOOL_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &show_status_in_gui.prf - (char *) &show_status_in_gui;
      tt->struct_def.fields[11].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[11].fname = tdrpStrDup("nyquist");
      tt->struct_def.fields[11].ptype = BOOL_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &show_status_in_gui.nyquist - (char *) &show_status_in_gui;
      tt->struct_def.fields[12].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[12].fname = tdrpStrDup("max_range");
      tt->struct_def.fields[12].ptype = BOOL_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &show_status_in_gui.max_range - (char *) &show_status_in_gui;
      tt->struct_def.fields[13].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[13].fname = tdrpStrDup("unambiguous_range");
      tt->struct_def.fields[13].ptype = BOOL_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &show_status_in_gui.unambiguous_range - (char *) &show_status_in_gui;
      tt->struct_def.fields[14].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[14].fname = tdrpStrDup("measured_power_h");
      tt->struct_def.fields[14].ptype = BOOL_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &show_status_in_gui.measured_power_h - (char *) &show_status_in_gui;
      tt->struct_def.fields[15].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[15].fname = tdrpStrDup("measured_power_v");
      tt->struct_def.fields[15].ptype = BOOL_TYPE;
      tt->struct_def.fields[15].rel_offset = 
        (char *) &show_status_in_gui.measured_power_v - (char *) &show_status_in_gui;
      tt->struct_def.fields[16].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[16].fname = tdrpStrDup("scan_name");
      tt->struct_def.fields[16].ptype = BOOL_TYPE;
      tt->struct_def.fields[16].rel_offset = 
        (char *) &show_status_in_gui.scan_name - (char *) &show_status_in_gui;
      tt->struct_def.fields[17].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[17].fname = tdrpStrDup("scan_mode");
      tt->struct_def.fields[17].ptype = BOOL_TYPE;
      tt->struct_def.fields[17].rel_offset = 
        (char *) &show_status_in_gui.scan_mode - (char *) &show_status_in_gui;
      tt->struct_def.fields[18].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[18].fname = tdrpStrDup("polarization_mode");
      tt->struct_def.fields[18].ptype = BOOL_TYPE;
      tt->struct_def.fields[18].rel_offset = 
        (char *) &show_status_in_gui.polarization_mode - (char *) &show_status_in_gui;
      tt->struct_def.fields[19].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[19].fname = tdrpStrDup("latitude");
      tt->struct_def.fields[19].ptype = BOOL_TYPE;
      tt->struct_def.fields[19].rel_offset = 
        (char *) &show_status_in_gui.latitude - (char *) &show_status_in_gui;
      tt->struct_def.fields[20].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[20].fname = tdrpStrDup("longitude");
      tt->struct_def.fields[20].ptype = BOOL_TYPE;
      tt->struct_def.fields[20].rel_offset = 
        (char *) &show_status_in_gui.longitude - (char *) &show_status_in_gui;
      tt->struct_def.fields[21].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[21].fname = tdrpStrDup("altitude");
      tt->struct_def.fields[21].ptype = BOOL_TYPE;
      tt->struct_def.fields[21].rel_offset = 
        (char *) &show_status_in_gui.altitude - (char *) &show_status_in_gui;
      tt->struct_def.fields[22].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[22].fname = tdrpStrDup("sun_elevation");
      tt->struct_def.fields[22].ptype = BOOL_TYPE;
      tt->struct_def.fields[22].rel_offset = 
        (char *) &show_status_in_gui.sun_elevation - (char *) &show_status_in_gui;
      tt->struct_def.fields[23].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[23].fname = tdrpStrDup("sun_azimuth");
      tt->struct_def.fields[23].ptype = BOOL_TYPE;
      tt->struct_def.fields[23].rel_offset = 
        (char *) &show_status_in_gui.sun_azimuth - (char *) &show_status_in_gui;
    tt->n_struct_vals = 24;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].b = pTRUE;
      tt->struct_vals[2].b = pTRUE;
      tt->struct_vals[3].b = pTRUE;
      tt->struct_vals[4].b = pTRUE;
      tt->struct_vals[5].b = pTRUE;
      tt->struct_vals[6].b = pTRUE;
      tt->struct_vals[7].b = pTRUE;
      tt->struct_vals[8].b = pTRUE;
      tt->struct_vals[9].b = pTRUE;
      tt->struct_vals[10].b = pTRUE;
      tt->struct_vals[11].b = pTRUE;
      tt->struct_vals[12].b = pTRUE;
      tt->struct_vals[13].b = pTRUE;
      tt->struct_vals[14].b = pTRUE;
      tt->struct_vals[15].b = pTRUE;
      tt->struct_vals[16].b = pTRUE;
      tt->struct_vals[17].b = pTRUE;
      tt->struct_vals[18].b = pTRUE;
      tt->struct_vals[19].b = pTRUE;
      tt->struct_vals[20].b = pTRUE;
      tt->struct_vals[21].b = pTRUE;
      tt->struct_vals[22].b = pTRUE;
      tt->struct_vals[23].b = pTRUE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("MAIN WINDOW DIMENSIONS AND PLOTTING DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'main_window_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_width");
    tt->descr = tdrpStrDup("Startup width of main window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_width - &_start_;
    tt->single_val.i = 1250;
    tt++;
    
    // Parameter 'main_window_height'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_height");
    tt->descr = tdrpStrDup("Startup height of main window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_height - &_start_;
    tt->single_val.i = 800;
    tt++;
    
    // Parameter 'main_window_start_x'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_start_x");
    tt->descr = tdrpStrDup("Startup X for main window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_start_x - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'main_window_start_y'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_start_y");
    tt->descr = tdrpStrDup("Startup Y for main window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_start_y - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'main_window_title_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_title_margin");
    tt->descr = tdrpStrDup("Height of top title margin, main window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_title_margin - &_start_;
    tt->single_val.i = 24;
    tt++;
    
    // Parameter 'main_title_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_title_font_size");
    tt->descr = tdrpStrDup("Font size of main title (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_title_font_size - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'main_title_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("main_title_color");
    tt->descr = tdrpStrDup("Text color for main title.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_title_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'main_label_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_label_font_size");
    tt->descr = tdrpStrDup("Basic font size for labels (pixels).");
    tt->help = tdrpStrDup("Some of the labels are scaled relative to this size.");
    tt->val_offset = (char *) &main_label_font_size - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'main_background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("main_background_color");
    tt->descr = tdrpStrDup("Color of main display background.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_background_color - &_start_;
    tt->single_val.s = tdrpStrDup("darkslateblue");
    tt++;
    
    // Parameter 'main_window_panel_divider_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_panel_divider_line_width");
    tt->descr = tdrpStrDup("Width for lines dividing up the main window into panels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_panel_divider_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'main_window_panel_divider_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("main_window_panel_divider_color");
    tt->descr = tdrpStrDup("Color for lines dividing up the main window into panels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_panel_divider_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'main_color_scale_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_color_scale_width");
    tt->descr = tdrpStrDup("Width of color scale (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_color_scale_width - &_start_;
    tt->single_val.i = 40;
    tt++;
    
    // Parameter 'click_cross_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("click_cross_size");
    tt->descr = tdrpStrDup("Size of cross at click point (pixels).");
    tt->help = tdrpStrDup("Size of cross drawn at click point, to select data.");
    tt->val_offset = (char *) &click_cross_size - &_start_;
    tt->single_val.i = 11;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("IQ PLOTS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'iqplots_n_rows'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplots_n_rows");
    tt->descr = tdrpStrDup("Number of rows of plots in iq plots.");
    tt->help = tdrpStrDup("The iq plots are made up of a matrix of plots, n_rows by n_colums. This is the starting value for the number of rows.");
    tt->val_offset = (char *) &iqplots_n_rows - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'iqplots_n_columns'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplots_n_columns");
    tt->descr = tdrpStrDup("Number of columns of plots in iq plots.");
    tt->help = tdrpStrDup("The iq plots are made up of a matrix of plots, n_rows by n_colums. This is the starting value for the number of columns.");
    tt->val_offset = (char *) &iqplots_n_columns - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'iqplot_types'
    // ctype is '_iqplot_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("iqplot_types");
    tt->descr = tdrpStrDup("Array of types of IQ plots for each sub panel.");
    tt->help = tdrpStrDup("The array size must match n_rows times n_columns.");
    tt->array_offset = (char *) &_iqplot_types - &_start_;
    tt->array_n_offset = (char *) &iqplot_types_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(iqplot_type_t);
    tt->array_n = 4;
    tt->enum_def.name = tdrpStrDup("iqplot_type_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SPECTRUM");
      tt->enum_def.fields[0].val = SPECTRUM;
      tt->enum_def.fields[1].name = tdrpStrDup("I_AND_Q");
      tt->enum_def.fields[1].val = I_AND_Q;
      tt->enum_def.fields[2].name = tdrpStrDup("I_VS_Q");
      tt->enum_def.fields[2].val = I_VS_Q;
      tt->enum_def.fields[3].name = tdrpStrDup("PHASOR");
      tt->enum_def.fields[3].val = PHASOR;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].e = SPECTRUM;
      tt->array_vals[1].e = I_AND_Q;
      tt->array_vals[2].e = I_VS_Q;
      tt->array_vals[3].e = PHASOR;
    tt++;
    
    // Parameter 'iqplot_top_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_top_margin");
    tt->descr = tdrpStrDup("Height of top margin in IQPLOT mode (pixels).");
    tt->help = tdrpStrDup("Titles go in the top margin.");
    tt->val_offset = (char *) &iqplot_top_margin - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'iqplot_bottom_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_bottom_margin");
    tt->descr = tdrpStrDup("Height of bottom margin in IQPLOT mode (pixels).");
    tt->help = tdrpStrDup("Time scale goes in the bottom margin.");
    tt->val_offset = (char *) &iqplot_bottom_margin - &_start_;
    tt->single_val.i = 18;
    tt++;
    
    // Parameter 'iqplot_left_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_left_margin");
    tt->descr = tdrpStrDup("Width of left margin in IQPLOT mode (pixels).");
    tt->help = tdrpStrDup("Height scale goes in the left margin.");
    tt->val_offset = (char *) &iqplot_left_margin - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'iqplot_right_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_right_margin");
    tt->descr = tdrpStrDup("Width of right margin in IQPLOT mode (pixels).");
    tt->help = tdrpStrDup("Height scale goes in the right margin.");
    tt->val_offset = (char *) &iqplot_right_margin - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'iqplot_axis_tick_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_axis_tick_len");
    tt->descr = tdrpStrDup("Length of ticks on axes (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_axis_tick_len - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'iqplot_n_ticks_ideal'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_n_ticks_ideal");
    tt->descr = tdrpStrDup("Ideal number of ticks on axes.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_n_ticks_ideal - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'iqplot_title_text_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_title_text_margin");
    tt->descr = tdrpStrDup("Margin around title text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_title_text_margin - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'iqplot_legend_text_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_legend_text_margin");
    tt->descr = tdrpStrDup("Margin around legend text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_legend_text_margin - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'iqplot_axis_text_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_axis_text_margin");
    tt->descr = tdrpStrDup("Margin around axis text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_axis_text_margin - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("IQPLOT TITLES, LABELS AND AXES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'iqplot_title_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_title_font_size");
    tt->descr = tdrpStrDup("Font size of center title (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_title_font_size - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'iqplot_axis_label_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_axis_label_font_size");
    tt->descr = tdrpStrDup("Font size of axis labels in iq plots (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_axis_label_font_size - &_start_;
    tt->single_val.i = 8;
    tt++;
    
    // Parameter 'iqplot_tick_values_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_tick_values_font_size");
    tt->descr = tdrpStrDup("Font size of axis tick values (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_tick_values_font_size - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'iqplot_legend_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iqplot_legend_font_size");
    tt->descr = tdrpStrDup("Font size for plot legends (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_legend_font_size - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'iqplot_axis_label_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_axis_label_color");
    tt->descr = tdrpStrDup("Color of iqplot axis labels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_axis_label_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'iqplot_title_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_title_color");
    tt->descr = tdrpStrDup("Color of plot title.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_title_color - &_start_;
    tt->single_val.s = tdrpStrDup("orange");
    tt++;
    
    // Parameter 'iqplot_axes_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_axes_color");
    tt->descr = tdrpStrDup("Color of axes in iq plots.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_axes_color - &_start_;
    tt->single_val.s = tdrpStrDup("green");
    tt++;
    
    // Parameter 'iqplot_grid_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_grid_color");
    tt->descr = tdrpStrDup("Color of grid lines on iq plots.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_grid_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray");
    tt++;
    
    // Parameter 'iqplot_fill_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_fill_color");
    tt->descr = tdrpStrDup("Color of area fill for IQ plots.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_fill_color - &_start_;
    tt->single_val.s = tdrpStrDup("pink");
    tt++;
    
    // Parameter 'iqplot_labels_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_labels_color");
    tt->descr = tdrpStrDup("Color of labels in iq plots.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_labels_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'iqplot_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_line_color");
    tt->descr = tdrpStrDup("Color of general lines in iq plots.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'iqplot_spectrum_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_spectrum_line_color");
    tt->descr = tdrpStrDup("Color of line in iq spectrum.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_spectrum_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'iqplot_ival_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_ival_line_color");
    tt->descr = tdrpStrDup("Color of I values in time series.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_ival_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'iqplot_qval_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iqplot_qval_line_color");
    tt->descr = tdrpStrDup("Color of V values in time series.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_qval_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("orange");
    tt++;
    
    // Parameter 'iqplot_y_grid_lines_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("iqplot_y_grid_lines_on");
    tt->descr = tdrpStrDup("Option to draw grid lines in the Y direction.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_y_grid_lines_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'iqplot_x_grid_lines_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("iqplot_x_grid_lines_on");
    tt->descr = tdrpStrDup("Option to draw grid lines in the X direction.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_x_grid_lines_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'iqplot_draw_instrument_height_line'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("iqplot_draw_instrument_height_line");
    tt->descr = tdrpStrDup("Option to draw a line for the instrument location.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iqplot_draw_instrument_height_line - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'iqplot_x_axis_labels_inside'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("iqplot_x_axis_labels_inside");
    tt->descr = tdrpStrDup("Location of tick labels, relative to x axis.");
    tt->help = tdrpStrDup("These can either be outside the axes, or inside - i.e. within the data area of the plot.");
    tt->val_offset = (char *) &iqplot_x_axis_labels_inside - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'iqplot_y_axis_labels_inside'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("iqplot_y_axis_labels_inside");
    tt->descr = tdrpStrDup("Location of tick labels, relative to y axis.");
    tt->help = tdrpStrDup("These can either be outside the axes, or inside - i.e. within the data area of the plot.");
    tt->val_offset = (char *) &iqplot_y_axis_labels_inside - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("IQPLOT LEGENDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'iqplot_main_legend_pos'
    // ctype is '_legend_pos_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("iqplot_main_legend_pos");
    tt->descr = tdrpStrDup("Position of main legend in the IQPLOT plot window");
    tt->help = tdrpStrDup("This include time, field name and elevation angle.");
    tt->val_offset = (char *) &iqplot_main_legend_pos - &_start_;
    tt->enum_def.name = tdrpStrDup("legend_pos_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LEGEND_TOP_LEFT");
      tt->enum_def.fields[0].val = LEGEND_TOP_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("LEGEND_TOP_RIGHT");
      tt->enum_def.fields[1].val = LEGEND_TOP_RIGHT;
      tt->enum_def.fields[2].name = tdrpStrDup("LEGEND_BOTTOM_LEFT");
      tt->enum_def.fields[2].val = LEGEND_BOTTOM_LEFT;
      tt->enum_def.fields[3].name = tdrpStrDup("LEGEND_BOTTOM_RIGHT");
      tt->enum_def.fields[3].val = LEGEND_BOTTOM_RIGHT;
    tt->single_val.e = LEGEND_TOP_LEFT;
    tt++;
    
    // Parameter 'iqplot_plot_legend1'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("iqplot_plot_legend1");
    tt->descr = tdrpStrDup("Option to plot the starting lat/lon position as a legend.");
    tt->help = tdrpStrDup("This helps in geolocating the data from a mobile system.");
    tt->val_offset = (char *) &iqplot_plot_legend1 - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'iqplot_legend1_pos'
    // ctype is '_legend_pos_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("iqplot_legend1_pos");
    tt->descr = tdrpStrDup("Position of lat/lon legend in plot");
    tt->help = tdrpStrDup("The starting latitude/longitude will be plotted as a legend in the location specified. See 'iqplot_plot_starting_latlon_as_legend'.");
    tt->val_offset = (char *) &iqplot_legend1_pos - &_start_;
    tt->enum_def.name = tdrpStrDup("legend_pos_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LEGEND_TOP_LEFT");
      tt->enum_def.fields[0].val = LEGEND_TOP_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("LEGEND_TOP_RIGHT");
      tt->enum_def.fields[1].val = LEGEND_TOP_RIGHT;
      tt->enum_def.fields[2].name = tdrpStrDup("LEGEND_BOTTOM_LEFT");
      tt->enum_def.fields[2].val = LEGEND_BOTTOM_LEFT;
      tt->enum_def.fields[3].name = tdrpStrDup("LEGEND_BOTTOM_RIGHT");
      tt->enum_def.fields[3].val = LEGEND_BOTTOM_RIGHT;
    tt->single_val.e = LEGEND_TOP_LEFT;
    tt++;
    
    // Parameter 'iqplot_legend2_pos'
    // ctype is '_legend_pos_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("iqplot_legend2_pos");
    tt->descr = tdrpStrDup("Position of lat/lon legend in plot");
    tt->help = tdrpStrDup("The starting latitude/longitude will be plotted as a legend in the location specified. See 'iqplot_plot_starting_latlon_as_legend'.");
    tt->val_offset = (char *) &iqplot_legend2_pos - &_start_;
    tt->enum_def.name = tdrpStrDup("legend_pos_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LEGEND_TOP_LEFT");
      tt->enum_def.fields[0].val = LEGEND_TOP_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("LEGEND_TOP_RIGHT");
      tt->enum_def.fields[1].val = LEGEND_TOP_RIGHT;
      tt->enum_def.fields[2].name = tdrpStrDup("LEGEND_BOTTOM_LEFT");
      tt->enum_def.fields[2].val = LEGEND_BOTTOM_LEFT;
      tt->enum_def.fields[3].name = tdrpStrDup("LEGEND_BOTTOM_RIGHT");
      tt->enum_def.fields[3].val = LEGEND_BOTTOM_RIGHT;
    tt->single_val.e = LEGEND_TOP_LEFT;
    tt++;
    
    // Parameter 'iqplot_plot_legend2'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("iqplot_plot_legend2");
    tt->descr = tdrpStrDup("Option to plot the starting lat/lon position as a legend.");
    tt->help = tdrpStrDup("This helps in geolocating the data from a mobile system.");
    tt->val_offset = (char *) &iqplot_plot_legend2 - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("ASCOPE DISPLAY PANEL");
    tt->comment_text = tdrpStrDup("The ascope panel shows the power plotted against range. It can be configured for both the spectra plot and the waterfall plot.");
    tt++;
    
    // Parameter 'ascope_n_panels_in_spectra_window'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_n_panels_in_spectra_window");
    tt->descr = tdrpStrDup("Number of ascope panels in spectra window (pixels).");
    tt->help = tdrpStrDup("The ascopes will be on the left of the plot. Set to 0 for no ASCOPE panel.");
    tt->val_offset = (char *) &ascope_n_panels_in_spectra_window - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'ascope_moments'
    // ctype is '_moment_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("ascope_moments");
    tt->descr = tdrpStrDup("Moments to be displaed on ascope panels.");
    tt->help = tdrpStrDup("The number of specified moments must match the number of ascope panels.");
    tt->array_offset = (char *) &_ascope_moments - &_start_;
    tt->array_n_offset = (char *) &ascope_moments_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(moment_type_t);
    tt->array_n = 2;
    tt->enum_def.name = tdrpStrDup("moment_type_t");
    tt->enum_def.nfields = 11;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DBZ");
      tt->enum_def.fields[0].val = DBZ;
      tt->enum_def.fields[1].name = tdrpStrDup("VEL");
      tt->enum_def.fields[1].val = VEL;
      tt->enum_def.fields[2].name = tdrpStrDup("WIDTH");
      tt->enum_def.fields[2].val = WIDTH;
      tt->enum_def.fields[3].name = tdrpStrDup("NCP");
      tt->enum_def.fields[3].val = NCP;
      tt->enum_def.fields[4].name = tdrpStrDup("SNR");
      tt->enum_def.fields[4].val = SNR;
      tt->enum_def.fields[5].name = tdrpStrDup("DBM");
      tt->enum_def.fields[5].val = DBM;
      tt->enum_def.fields[6].name = tdrpStrDup("ZDR");
      tt->enum_def.fields[6].val = ZDR;
      tt->enum_def.fields[7].name = tdrpStrDup("LDR");
      tt->enum_def.fields[7].val = LDR;
      tt->enum_def.fields[8].name = tdrpStrDup("RHOHV");
      tt->enum_def.fields[8].val = RHOHV;
      tt->enum_def.fields[9].name = tdrpStrDup("PHIDP");
      tt->enum_def.fields[9].val = PHIDP;
      tt->enum_def.fields[10].name = tdrpStrDup("KDP");
      tt->enum_def.fields[10].val = KDP;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].e = DBZ;
      tt->array_vals[1].e = VEL;
    tt++;
    
    // Parameter 'ascope_width_in_spectra_window'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_width_in_spectra_window");
    tt->descr = tdrpStrDup("Width of ASCOPE panel in spectra window (pixels).");
    tt->help = tdrpStrDup("The ASCOPE will be on the left of the plot. Set to 0 for no ASCOPE panel.");
    tt->val_offset = (char *) &ascope_width_in_spectra_window - &_start_;
    tt->single_val.i = 150;
    tt++;
    
    // Parameter 'ascope_title_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_title_font_size");
    tt->descr = tdrpStrDup("Font size of center title (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_title_font_size - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'ascope_axis_label_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_axis_label_font_size");
    tt->descr = tdrpStrDup("Font size of axis labels in ascope (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_axis_label_font_size - &_start_;
    tt->single_val.i = 8;
    tt++;
    
    // Parameter 'ascope_tick_values_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_tick_values_font_size");
    tt->descr = tdrpStrDup("Font size of axis tick values (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_tick_values_font_size - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'ascope_legend_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_legend_font_size");
    tt->descr = tdrpStrDup("Font size for plot legends (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_legend_font_size - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'ascope_title_text_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_title_text_margin");
    tt->descr = tdrpStrDup("Margin around title text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_title_text_margin - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'ascope_legend_text_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_legend_text_margin");
    tt->descr = tdrpStrDup("Margin around legend text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_legend_text_margin - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'ascope_axis_text_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_axis_text_margin");
    tt->descr = tdrpStrDup("Margin around axis text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_axis_text_margin - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'ascope_axis_tick_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_axis_tick_len");
    tt->descr = tdrpStrDup("Length of ticks on axes (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_axis_tick_len - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'ascope_n_ticks_ideal'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_n_ticks_ideal");
    tt->descr = tdrpStrDup("Ideal number of ticks on axes.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_n_ticks_ideal - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'ascope_left_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_left_margin");
    tt->descr = tdrpStrDup("Width of left margin for ascope plot (pixels).");
    tt->help = tdrpStrDup("The Y axis labels are plotted here.");
    tt->val_offset = (char *) &ascope_left_margin - &_start_;
    tt->single_val.i = 18;
    tt++;
    
    // Parameter 'ascope_bottom_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascope_bottom_margin");
    tt->descr = tdrpStrDup("Height of bottom margin for ascope plot (pixels).");
    tt->help = tdrpStrDup("The X axis labels are plotted here.");
    tt->val_offset = (char *) &ascope_bottom_margin - &_start_;
    tt->single_val.i = 18;
    tt++;
    
    // Parameter 'ascope_x_grid_lines_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ascope_x_grid_lines_on");
    tt->descr = tdrpStrDup("Option to draw grid lines in the X direction.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_x_grid_lines_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'ascope_y_grid_lines_on'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ascope_y_grid_lines_on");
    tt->descr = tdrpStrDup("Option to draw grid lines in the Y direction.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_y_grid_lines_on - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'ascope_axis_label_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascope_axis_label_color");
    tt->descr = tdrpStrDup("Color of ascope axis labels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_axis_label_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'ascope_axes_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascope_axes_color");
    tt->descr = tdrpStrDup("Color of axes in ascope.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_axes_color - &_start_;
    tt->single_val.s = tdrpStrDup("green");
    tt++;
    
    // Parameter 'ascope_grid_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascope_grid_color");
    tt->descr = tdrpStrDup("Color of grid lines on ascope.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_grid_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray");
    tt++;
    
    // Parameter 'ascope_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascope_line_color");
    tt->descr = tdrpStrDup("Color of ascope line.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("lightgray");
    tt++;
    
    // Parameter 'ascope_selected_range_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascope_selected_range_color");
    tt->descr = tdrpStrDup("Color of line showing currently selected range.");
    tt->help = tdrpStrDup("The user can double click in the ascope to move this line.");
    tt->val_offset = (char *) &ascope_selected_range_color - &_start_;
    tt->single_val.s = tdrpStrDup("cyan");
    tt++;
    
    // Parameter 'ascope_fill_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascope_fill_color");
    tt->descr = tdrpStrDup("Color of ascope fill.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_fill_color - &_start_;
    tt->single_val.s = tdrpStrDup("darkgreen");
    tt++;
    
    // Parameter 'ascope_title_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascope_title_color");
    tt->descr = tdrpStrDup("Color of ascope title.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_title_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'ascope_x_axis_labels_inside'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ascope_x_axis_labels_inside");
    tt->descr = tdrpStrDup("Location of tick labels, relative to x axis.");
    tt->help = tdrpStrDup("These can either be outside the axes, or inside - i.e. within the data area of the plot.");
    tt->val_offset = (char *) &ascope_x_axis_labels_inside - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ascope_y_axis_labels_inside'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ascope_y_axis_labels_inside");
    tt->descr = tdrpStrDup("Location of tick labels, relative to y axis.");
    tt->help = tdrpStrDup("These can either be outside the axes, or inside - i.e. within the data area of the plot.");
    tt->val_offset = (char *) &ascope_y_axis_labels_inside - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("CLUTTER FILTERING");
    tt->comment_text = tdrpStrDup("The default clutter filtering method is the Adaptive Filter, with residue correction activated.");
    tt++;
    
    // Parameter 'apply_residue_correction_in_adaptive_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_residue_correction_in_adaptive_filter");
    tt->descr = tdrpStrDup("Option to apply residue correction to adaptive filter.");
    tt->help = tdrpStrDup("At some gates, the spectral noise floor may be high. If this correction is applied, the spectral noise floor will be reduced to the measured noise value.");
    tt->val_offset = (char *) &apply_residue_correction_in_adaptive_filter - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'min_snr_db_for_residue_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_db_for_residue_correction");
    tt->descr = tdrpStrDup("Min SNR for applying the residue correction (dB).");
    tt->help = tdrpStrDup("Spectral residue seems to occur at high powers, when the receiver is close to saturated. This is probably related to increased phase noise. Only apply residue correction if SNR exceeds this value. Otherwise, do not apply a correction.");
    tt->val_offset = (char *) &min_snr_db_for_residue_correction - &_start_;
    tt->single_val.d = 75;
    tt++;
    
    // Parameter 'use_polynomial_regression_clutter_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_polynomial_regression_clutter_filter");
    tt->descr = tdrpStrDup("Option to apply a regression clutter filter.");
    tt->help = tdrpStrDup("For the regression filter, a polynomial fit is performed on the I and Q data individually. The filtered time series is computed as the original minus the regression fit. If true, this takes preference over the notch filter.");
    tt->val_offset = (char *) &use_polynomial_regression_clutter_filter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'regression_filter_polynomial_order'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_polynomial_order");
    tt->descr = tdrpStrDup("Order of the polynomial fit for the regression filter.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &regression_filter_polynomial_order - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'regression_filter_determine_order_from_CSR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_determine_order_from_CSR");
    tt->descr = tdrpStrDup("Option to determine the polynomial order from the Clutter-to-Signal-Ratio (CSR).");
    tt->help = tdrpStrDup("If TRUE, we compute the CSR from the 3 central spectral points. Then, using a lookup-table based on CSR, we determine the appropriate order of the polynomial fit.");
    tt->val_offset = (char *) &regression_filter_determine_order_from_CSR - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'regression_filter_notch_edge_power_ratio_threshold_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_notch_edge_power_ratio_threshold_db");
    tt->descr = tdrpStrDup("Power ratio threshold to determine the edge of the filtered notch (dB).");
    tt->help = tdrpStrDup("After the initial application of the regression filter, a notch is formed around 0. In order to determine the width of this notch, we compute the ratio of the filtered power to the original unfiltered power. This is the threshold used to determine where the edge of the notch occurs.");
    tt->val_offset = (char *) &regression_filter_notch_edge_power_ratio_threshold_db - &_start_;
    tt->single_val.d = -45;
    tt++;
    
    // Parameter 'regression_filter_min_csr_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_min_csr_db");
    tt->descr = tdrpStrDup("Min valid CSR - Clutter-to-Signal-Ratio - for applying the filter (dB).");
    tt->help = tdrpStrDup("As a first step, we compute the CSR using a 3rd order regression fit. If the CSR is below this threshold, we do not apply the filter at all, and simply return the unfiltered spectrum.");
    tt->val_offset = (char *) &regression_filter_min_csr_db - &_start_;
    tt->single_val.d = -5;
    tt++;
    
    // Parameter 'regression_filter_interp_across_notch'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_interp_across_notch");
    tt->descr = tdrpStrDup("For the regression filter, option to interpolate power across the notch.");
    tt->help = tdrpStrDup("If true, the spectral power in the notch created by the filter will be interpolated using values to each side of the notch.");
    tt->val_offset = (char *) &regression_filter_interp_across_notch - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'use_simple_notch_clutter_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_simple_notch_clutter_filter");
    tt->descr = tdrpStrDup("Option to use a simple notch for clutter filtering.");
    tt->help = tdrpStrDup("If false, spectral adaptive clutter filtering is used. If true, a simple notch is used instead. The width is specified in notch_filter_width_mps. The depth of the notch is down to the calibrated noise floor.");
    tt->val_offset = (char *) &use_simple_notch_clutter_filter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'simple_notch_filter_width_mps'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("simple_notch_filter_width_mps");
    tt->descr = tdrpStrDup("Width of simple clutter notch (m/s).");
    tt->help = tdrpStrDup("See use_simple_notch_clutter_filter");
    tt->val_offset = (char *) &simple_notch_filter_width_mps - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'staggered_prt_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("staggered_prt_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter applied to unfolding interval for staggered PRT.");
    tt->help = tdrpStrDup("If less than 3, no filtering will be performed.");
    tt->val_offset = (char *) &staggered_prt_median_filter_len - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("SPECTRUM WIDTH METHOD");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'spectrum_width_method'
    // ctype is '_spectrum_width_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("spectrum_width_method");
    tt->descr = tdrpStrDup("Method for computing spectrum width.");
    tt->help = tdrpStrDup("R0R1 is the default. For staggered we use R0Rm in this case. Otherwise we use R1R2 if applicable. For staggered, we use the hybrid if R0R1 is not selected.");
    tt->val_offset = (char *) &spectrum_width_method - &_start_;
    tt->enum_def.name = tdrpStrDup("spectrum_width_method_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("WIDTH_METHOD_R0R1");
      tt->enum_def.fields[0].val = WIDTH_METHOD_R0R1;
      tt->enum_def.fields[1].name = tdrpStrDup("WIDTH_METHOD_R1R2");
      tt->enum_def.fields[1].val = WIDTH_METHOD_R1R2;
      tt->enum_def.fields[2].name = tdrpStrDup("WIDTH_METHOD_HYBRID");
      tt->enum_def.fields[2].val = WIDTH_METHOD_HYBRID;
    tt->single_val.e = WIDTH_METHOD_R0R1;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("COMPUTING KDP USING ADAPTIVE FILTER METHOD");
    tt->comment_text = tdrpStrDup("Parameters for computing KDP.");
    tt++;
    
    // Parameter 'KDP_fir_filter_len'
    // ctype is '_fir_filter_len_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("KDP_fir_filter_len");
    tt->descr = tdrpStrDup("Filter length for the FIR filter for PHIDP (gates)");
    tt->help = tdrpStrDup("When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.");
    tt->val_offset = (char *) &KDP_fir_filter_len - &_start_;
    tt->enum_def.name = tdrpStrDup("fir_filter_len_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FIR_LEN_125");
      tt->enum_def.fields[0].val = FIR_LEN_125;
      tt->enum_def.fields[1].name = tdrpStrDup("FIR_LEN_60");
      tt->enum_def.fields[1].val = FIR_LEN_60;
      tt->enum_def.fields[2].name = tdrpStrDup("FIR_LEN_40");
      tt->enum_def.fields[2].val = FIR_LEN_40;
      tt->enum_def.fields[3].name = tdrpStrDup("FIR_LEN_30");
      tt->enum_def.fields[3].val = FIR_LEN_30;
      tt->enum_def.fields[4].name = tdrpStrDup("FIR_LEN_20");
      tt->enum_def.fields[4].val = FIR_LEN_20;
      tt->enum_def.fields[5].name = tdrpStrDup("FIR_LEN_10");
      tt->enum_def.fields[5].val = FIR_LEN_10;
    tt->single_val.e = FIR_LEN_20;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_unfolded'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_unfolded");
    tt->descr = tdrpStrDup("Sets the number of iterations for the initial FIR filter for unfolded PHIDP.");
    tt->help = tdrpStrDup("After unfolding PHIDP, the FIR filter is applied to the unfolded phidp, a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_unfolded - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_conditioned'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_conditioned");
    tt->descr = tdrpStrDup("Sets the number of iterations for the final FIR filter for conditioned PHIDP.");
    tt->help = tdrpStrDup("In order to identify phase shift on backscatter (PSOB), we condition the PHIDP to keep it generally increasing with range. The FIR filter is applied to the conditioned phidp a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_conditioned - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'KDP_use_iterative_filtering'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_use_iterative_filtering");
    tt->descr = tdrpStrDup("Perform iterative filtering to locate backscatter phase shift.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_use_iterative_filtering - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_phidp_difference_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_difference_threshold");
    tt->descr = tdrpStrDup("Difference threshold for the iterative filtering method.");
    tt->help = tdrpStrDup("The FIR filter is applied successively, KDP_n_filt_iterations_conditioned times. After each iteration the result is checked against the original. If the difference is less than this parameter, the original value at that gate is retained. If the difference exceeds this parameter, the new filtered value is retained.");
    tt->val_offset = (char *) &KDP_phidp_difference_threshold - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'KDP_ngates_for_stats'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_ngates_for_stats");
    tt->descr = tdrpStrDup("Number of gates over which the phidp mean, sdev and jitter are computed.");
    tt->help = tdrpStrDup("The mean, sdev and jitter of phidp are computed over a consecutive number of gates in range, centered on the current gate of interest. This parameter is the number of gates over which these statistics are computed.");
    tt->val_offset = (char *) &KDP_ngates_for_stats - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'KDP_phidp_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of phidp in range.");
    tt->help = tdrpStrDup("The sdev of phidp is a good test for valid phidp. The sdev is computed in the circle, so that it takes account of folding if present. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_sdev_max - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'KDP_phidp_jitter_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_jitter_max");
    tt->descr = tdrpStrDup("Sets the threshold for the jitter of phidp in range.");
    tt->help = tdrpStrDup("The jitter of phidp is defined as the mean absolute change in angle between successive phidp measurements in range. It is computed on the circle to take account of folding. If the jitter is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_jitter_max - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'KDP_check_snr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_snr");
    tt->descr = tdrpStrDup("Check the SNR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_snr - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_snr_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking SNR (dB).");
    tt->help = tdrpStrDup("If the SNR drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_snr_threshold - &_start_;
    tt->single_val.d = -6;
    tt++;
    
    // Parameter 'KDP_check_rhohv'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_rhohv");
    tt->descr = tdrpStrDup("Check the RHOHV.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_rhohv - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_rhohv_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_rhohv_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking RHOHV.");
    tt->help = tdrpStrDup("If the RHOHV drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_rhohv_threshold - &_start_;
    tt->single_val.d = 0.95;
    tt++;
    
    // Parameter 'KDP_check_zdr_sdev'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_zdr_sdev");
    tt->descr = tdrpStrDup("Check the standard deviation of ZDR in range?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_zdr_sdev - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_zdr_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_zdr_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of zdr in range.");
    tt->help = tdrpStrDup("The sdev of zdr is a good test for clutter. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_zdr_sdev_max - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'KDP_min_valid_abs_kdp'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_min_valid_abs_kdp");
    tt->descr = tdrpStrDup("Sets the min valid KDP value.");
    tt->help = tdrpStrDup("Values less than this are set to 0.");
    tt->val_offset = (char *) &KDP_min_valid_abs_kdp - &_start_;
    tt->single_val.d = 0.025;
    tt++;
    
    // Parameter 'KDP_debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_debug");
    tt->descr = tdrpStrDup("Option to print debug messages in KDP computation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("BEAM SAMPLING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'n_samples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_samples");
    tt->descr = tdrpStrDup("Number of samples (pulses) per dwell.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &n_samples - &_start_;
    tt->single_val.i = 256;
    tt++;
    
    // Parameter 'indexed_beams'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("indexed_beams");
    tt->descr = tdrpStrDup("Index the beams on even centers?");
    tt->help = tdrpStrDup("If false, the pulses are formed into beams sequentially, with no overlap.");
    tt->val_offset = (char *) &indexed_beams - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'indexed_resolution_ppi'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("indexed_resolution_ppi");
    tt->descr = tdrpStrDup("Dwell width in azimuth (deg).");
    tt->help = tdrpStrDup("Applies to PPI mode.");
    tt->val_offset = (char *) &indexed_resolution_ppi - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'indexed_resolution_rhi'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("indexed_resolution_rhi");
    tt->descr = tdrpStrDup("Dwell width in elevation (deg).");
    tt->help = tdrpStrDup("Applies to RHI mode.");
    tt->val_offset = (char *) &indexed_resolution_rhi - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'invert_hv_flag'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("invert_hv_flag");
    tt->descr = tdrpStrDup("Option to invert the sense of the HV flag in alternating mode.");
    tt->help = tdrpStrDup("In alternating dual-pol mode, the HV flag indicates whether the pulse is horizontally or vertically polarized. Normally 1 indicates H and 0 V. This parameter allows you to invert the sense of the flag, so that 1 is interpreted as V and 0 as H.");
    tt->val_offset = (char *) &invert_hv_flag - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'prt_is_for_previous_interval'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("prt_is_for_previous_interval");
    tt->descr = tdrpStrDup("Does the PRT in the pulse header refer to the previous time interval?.");
    tt->help = tdrpStrDup("If TRUE, the PRT in the pulse header refers to the time from the PREVIOUS pulse to THIS pulse. If FALSE, the PRT in the header refers to the time from THIS pulse to the NEXT pulse.");
    tt->val_offset = (char *) &prt_is_for_previous_interval - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'check_for_missing_pulses'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_for_missing_pulses");
    tt->descr = tdrpStrDup("Option to check for missing pulses in the time series.");
    tt->help = tdrpStrDup("If missing pulses are found, the beam formed by those pulses will be discarded.");
    tt->val_offset = (char *) &check_for_missing_pulses - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'swap_receiver_channels'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("swap_receiver_channels");
    tt->descr = tdrpStrDup("Option to swap the H and V channels for IQ data from the receiver.");
    tt->help = tdrpStrDup("It is possible that the receiver was incorrectly connected and the channels (H and V for example) are swapped. If this flag is set to TRUE, the channels in the data will be swapped before computing the moments.");
    tt->val_offset = (char *) &swap_receiver_channels - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("OVERRIDING RADAR PARAMETERS");
    tt->comment_text = tdrpStrDup("Some radar parameters may be included in the time series data. This section allows you to optionally override some of those values.");
    tt++;
    
    // Parameter 'override_radar_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_name");
    tt->descr = tdrpStrDup("Option to override the radar name.");
    tt->help = tdrpStrDup("If true, the name in this file will be used. If not, the name in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radar_name");
    tt->descr = tdrpStrDup("Name of the radar.");
    tt->help = tdrpStrDup("See 'override_radar_name'.");
    tt->val_offset = (char *) &radar_name - &_start_;
    tt->single_val.s = tdrpStrDup("SPOL");
    tt++;
    
    // Parameter 'override_radar_location'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_location");
    tt->descr = tdrpStrDup("Option to override the radar location.");
    tt->help = tdrpStrDup("If true, the location in this file will be used. If not, the location in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_location - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_latitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_latitude_deg");
    tt->descr = tdrpStrDup("Radar latitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_latitude_deg - &_start_;
    tt->single_val.d = 39.9321;
    tt++;
    
    // Parameter 'radar_longitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_longitude_deg");
    tt->descr = tdrpStrDup("Radar longitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_longitude_deg - &_start_;
    tt->single_val.d = -105.182;
    tt++;
    
    // Parameter 'radar_altitude_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_altitude_meters");
    tt->descr = tdrpStrDup("Radar altitude (meters).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_altitude_meters - &_start_;
    tt->single_val.d = 1742;
    tt++;
    
    // Parameter 'override_gate_geometry'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_gate_geometry");
    tt->descr = tdrpStrDup("Option to override the gate geometry.");
    tt->help = tdrpStrDup("If true, the gate_spacing and start_range in the time series data is overridden by the parameters in this file.");
    tt->val_offset = (char *) &override_gate_geometry - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'gate_spacing_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("gate_spacing_meters");
    tt->descr = tdrpStrDup("Gate spacing (meters).");
    tt->help = tdrpStrDup("See override_gate_geometry.");
    tt->val_offset = (char *) &gate_spacing_meters - &_start_;
    tt->single_val.d = 150;
    tt++;
    
    // Parameter 'start_range_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("start_range_meters");
    tt->descr = tdrpStrDup("Start range (meters).");
    tt->help = tdrpStrDup("See override_gate_geometry.");
    tt->val_offset = (char *) &start_range_meters - &_start_;
    tt->single_val.d = 150;
    tt++;
    
    // Parameter 'override_radar_wavelength'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_wavelength");
    tt->descr = tdrpStrDup("Option to override the radar wavelength.");
    tt->help = tdrpStrDup("If true, the radar wavelength in this file will be used. If not, the wavelength in the time series data will be used if available.");
    tt->val_offset = (char *) &override_radar_wavelength - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_wavelength_cm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_wavelength_cm");
    tt->descr = tdrpStrDup("Radar wavelength (cm).");
    tt->help = tdrpStrDup("See override_radar_wavelength.");
    tt->val_offset = (char *) &radar_wavelength_cm - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'Comment 16'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 16");
    tt->comment_hdr = tdrpStrDup("FFT WINDOWING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'window'
    // ctype is '_window_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("window");
    tt->descr = tdrpStrDup("Window to be applied to time series before computing spectra.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window - &_start_;
    tt->enum_def.name = tdrpStrDup("window_t");
    tt->enum_def.nfields = 8;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("WINDOW_RECT");
      tt->enum_def.fields[0].val = WINDOW_RECT;
      tt->enum_def.fields[1].name = tdrpStrDup("WINDOW_VONHANN");
      tt->enum_def.fields[1].val = WINDOW_VONHANN;
      tt->enum_def.fields[2].name = tdrpStrDup("WINDOW_BLACKMAN");
      tt->enum_def.fields[2].val = WINDOW_BLACKMAN;
      tt->enum_def.fields[3].name = tdrpStrDup("WINDOW_BLACKMAN_NUTTALL");
      tt->enum_def.fields[3].val = WINDOW_BLACKMAN_NUTTALL;
      tt->enum_def.fields[4].name = tdrpStrDup("WINDOW_TUKEY_10");
      tt->enum_def.fields[4].val = WINDOW_TUKEY_10;
      tt->enum_def.fields[5].name = tdrpStrDup("WINDOW_TUKEY_20");
      tt->enum_def.fields[5].val = WINDOW_TUKEY_20;
      tt->enum_def.fields[6].name = tdrpStrDup("WINDOW_TUKEY_30");
      tt->enum_def.fields[6].val = WINDOW_TUKEY_30;
      tt->enum_def.fields[7].name = tdrpStrDup("WINDOW_TUKEY_50");
      tt->enum_def.fields[7].val = WINDOW_TUKEY_50;
    tt->single_val.e = WINDOW_VONHANN;
    tt++;
    
    // Parameter 'Comment 17'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 17");
    tt->comment_hdr = tdrpStrDup("RADAR CALIBRATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'cal_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cal_file_path");
    tt->descr = tdrpStrDup("File name for XML calibration file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &cal_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./sband_cal.xml");
    tt++;
    
    // Parameter 'use_cal_from_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_cal_from_time_series");
    tt->descr = tdrpStrDup("Option to override cal in time series data.");
    tt->help = tdrpStrDup("If false, the cal information in the time series data will be used. If true, the cal info in the param file will be used.");
    tt->val_offset = (char *) &use_cal_from_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
