/**********************************************************************
 * TDRP params for Sprite
 **********************************************************************/

//======================================================================
//
// Sprite is the spectral display for time series data.
//
// This is a C++ application based on the QT GUI toolkit.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// register_with_procmap ///////////////////
//
// Option to register this process with the process mapper (procmap).
//
// If TRUE, every minute this process will register a heartbeat with 
//   procmap. If the process hangs, it will be restared by the 
//   auto_restarter.
//
//
// Type: boolean
//

register_with_procmap = FALSE;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "test";

///////////// check_alloc /////////////////////////////
//
// Option to check memory allocations.
//
// For debugging memory usage.
//
//
// Type: boolean
//

check_alloc = FALSE;

//======================================================================
//
// DATA INPUT MODE.
//
//======================================================================
 
///////////// input_mode //////////////////////////////
//
// Method for reading the input time series data.
//

//
// REALTIME_FMQ_MODE: read a real-time IWRF data stream from an FMQ.
//
// REALTIME_TCP_MODE: read a real-time IWRF data stream from a TCP 
//   server.
//
// ARCHIVE_TIME_MODE: given a time span and data directory, identify the 
//   list of files within that time span and read those files.
//
// FILE_LIST_MODE: the list of time series files is specified on the 
//   command line.
//
// FOLLOW_MOMENTS_MODE: the user is running a moments display (e.g. 
//   HawkEye or CIDD) and clicks on locations of interest. Sprite polls a 
//   shared memory segment for information on the user's clicks, and reads 
//   in the data for the time and location specified in the latest click.
//
//
// Type: enum
// Options:
//     REALTIME_FMQ_MODE
//     REALTIME_TCP_MODE
//     ARCHIVE_TIME_MODE
//     FILE_LIST_MODE
//     FOLLOW_MOMENTS_MODE
//

input_mode = REALTIME_FMQ_MODE;

///////////// input_fmq_url ///////////////////////////
//
// REALTIME_FMQ_MODE: input URL for moments data from an FMQ.
//
// A fully-qualified url is of the form fmqp:://hostname:port:path. The 
//   path does not include the file extension.
//
//
// Type: string
//

input_fmq_url = "/tmp/fmq/ts";

///////////// seek_to_start_of_fmq ////////////////////
//
// Option to seek to the start of the input FMQ.
//
// If TRUE, the program will seek to the start of the fmq and read the 
//   entire contents at startup. If FALSE, it will read only new data as 
//   it arrives.
//
//
// Type: boolean
//

seek_to_start_of_fmq = FALSE;

///////////// input_tcp_address ///////////////////////
//
// REALTIME_TCP_MODE: ip address of host running IWRF moments server.
//
//
// Type: string
//

input_tcp_address = "localhost";

///////////// input_tcp_port //////////////////////////
//
// REALTIME_TCP_MODE: TCP port for IWRF moments server.
//
//
// Type: int
//

input_tcp_port = 11000;

///////////// archive_data_dir ////////////////////////
//
// ARCHIVE_TIME_MODE: directory path for time series files.
//
// This should point to the top dir of a time series data set. Below 
//   this will be date directories - i.e. yyyymmdd.
//
//
// Type: string
//

archive_data_dir = "/data/time_series/spol";

///////////// archive_start_time //////////////////////
//
// ARCHIVE_TIME_MODE: start time (yyyy mm dd hh mm ss).
//
// Data retrieval starts at this time.
//
//
// Type: string
//

archive_start_time = "2019 03 01 00 00 00";

///////////// archive_time_span_secs //////////////////
//
// ARCHIVE_TIME_MODE: time span (secs).
//
// archive_end_time = archive_start_time + archive_time_span.
//
//
// Type: double
//

archive_time_span_secs = 600;

//======================================================================
//
// GETTING CLICK-POINT INFO FROM MOMENTS DISPLAY (CIDD or HawkEye).
//
//======================================================================
 
///////////// moments_shmem_key ///////////////////////
//
// The shared memory key for the moments display coordinate struct.
//
// When the user clicks in the moments main window, the coordinate 
//   struct is updated with the location and time.
//
//
// Type: int
//

moments_shmem_key = 61500;

///////////// moments_max_search_angle_error //////////
//
// Max angular error when searching for spectra close to the click point 
//   (deg).
//
// When the user clicks in CIDD, the (x) location is saved. From this, 
//   the elevation, elevation and range of the click point can be 
//   determined. The data base is then searched for spectra from a beam 
//   close to this. This parameter gives the max angular error allowable 
//   in this search.
//
//
// Type: double
//

moments_max_search_angle_error = 10;

//======================================================================
//
// BEAM SAMPLING.
//
//======================================================================
 
///////////// n_samples ///////////////////////////////
//
// Number of samples (pulses) per dwell.
//
//
// Type: int
//

n_samples = 64;

///////////// indexed_beams ///////////////////////////
//
// Index the beams on even centers?.
//
// If false, the pulses are formed into beams sequentially, with no 
//   overlap.
//
//
// Type: boolean
//

indexed_beams = TRUE;

///////////// indexed_resolution_ppi //////////////////
//
// Dwell width in azimuth (deg).
//
// Applies to PPI mode.
//
//
// Type: double
//

indexed_resolution_ppi = 1;

///////////// indexed_resolution_rhi //////////////////
//
// Dwell width in elevation (deg).
//
// Applies to RHI mode.
//
//
// Type: double
//

indexed_resolution_rhi = 0.5;

///////////// invert_hv_flag //////////////////////////
//
// Option to invert the sense of the HV flag in alternating mode.
//
// In alternating dual-pol mode, the HV flag indicates whether the pulse 
//   is horizontally or vertically polarized. Normally 1 indicates H and 0 
//   V. This parameter allows you to invert the sense of the flag, so that 
//   1 is interpreted as V and 0 as H.
//
//
// Type: boolean
//

invert_hv_flag = FALSE;

///////////// prt_is_for_previous_interval ////////////
//
// Does the PRT in the pulse header refer to the previous time 
//   interval?.
//
// If TRUE, the PRT in the pulse header refers to the time from the 
//   PREVIOUS pulse to THIS pulse. If FALSE, the PRT in the header refers 
//   to the time from THIS pulse to the NEXT pulse.
//
//
// Type: boolean
//

prt_is_for_previous_interval = TRUE;

///////////// check_for_missing_pulses ////////////////
//
// Option to check for missing pulses in the time series.
//
// If missing pulses are found, the beam formed by those pulses will be 
//   discarded.
//
//
// Type: boolean
//

check_for_missing_pulses = TRUE;

//======================================================================
//
// OVERRIDING RADAR PARAMETERS.
//
// Some radar parameters may be included in the time series data. This 
//   section allows you to optionally override some of those values.
//
//======================================================================
 
///////////// override_radar_name /////////////////////
//
// Option to override the radar name.
//
// If true, the name in this file will be used. If not, the name in the 
//   time series data will be used.
//
//
// Type: boolean
//

override_radar_name = FALSE;

///////////// radar_name //////////////////////////////
//
// Name of the radar.
//
// See 'override_radar_name'.
//
//
// Type: string
//

radar_name = "SPOL";

///////////// override_radar_location /////////////////
//
// Option to override the radar location.
//
// If true, the location in this file will be used. If not, the location 
//   in the time series data will be used.
//
//
// Type: boolean
//

override_radar_location = FALSE;

///////////// radar_latitude_deg //////////////////////
//
// Radar latitude (deg).
//
// See override_radar_location.
//
//
// Type: double
//

radar_latitude_deg = 39.9321;

///////////// radar_longitude_deg /////////////////////
//
// Radar longitude (deg).
//
// See override_radar_location.
//
//
// Type: double
//

radar_longitude_deg = -105.182;

///////////// radar_altitude_meters ///////////////////
//
// Radar altitude (meters).
//
// See override_radar_location.
//
//
// Type: double
//

radar_altitude_meters = 1742;

///////////// override_gate_geometry //////////////////
//
// Option to override the gate geometry.
//
// If true, the gate_spacing and start_range in the time series data is 
//   overridden by the parameters in this file.
//
//
// Type: boolean
//

override_gate_geometry = FALSE;

///////////// gate_spacing_meters /////////////////////
//
// Gate spacing (meters).
//
// See override_gate_geometry.
//
//
// Type: double
//

gate_spacing_meters = 150;

///////////// start_range_meters //////////////////////
//
// Start range (meters).
//
// See override_gate_geometry.
//
//
// Type: double
//

start_range_meters = 150;

///////////// override_radar_wavelength ///////////////
//
// Option to override the radar wavelength.
//
// If true, the radar wavelength in this file will be used. If not, the 
//   wavelength in the time series data will be used if available.
//
//
// Type: boolean
//

override_radar_wavelength = FALSE;

///////////// radar_wavelength_cm /////////////////////
//
// Radar wavelength (cm).
//
// See override_radar_wavelength.
//
//
// Type: double
//

radar_wavelength_cm = 10;

//======================================================================
//
// FFT WINDOW.
//
//======================================================================
 
///////////// window //////////////////////////////////
//
// Window to be applied to time series before computing spectra.
//
//
// Type: enum
// Options:
//     WINDOW_RECT
//     WINDOW_VONHANN
//     WINDOW_BLACKMAN
//

window = WINDOW_VONHANN;

//======================================================================
//
// RADAR CALIBRATION.
//
//======================================================================
 
///////////// cal_file_path ///////////////////////////
//
// File name for XML calibration file.
//
//
// Type: string
//

cal_file_path = "./radar_cal.xml";

///////////// use_cal_from_time_series ////////////////
//
// Option to override cal in time series data.
//
// If false, the cal information in the time series data will be used. 
//   If true, the cal info in the param file will be used.
//
//
// Type: boolean
//

use_cal_from_time_series = FALSE;

//======================================================================
//
// STATUS TO BE SHOWN IN GUI.
//
//======================================================================
 
///////////// show_status_in_gui //////////////////////
//
// Indicate which status items to show in GUI.
//
// These items are shown in the left panel in the GUI. Setting an item 
//   to false will hide it in the GUI.
//
//
// Type: struct
//   typedef struct {
//      boolean azimuth;
//      boolean elevation;
//      boolean fixed_angle;
//      boolean volume_number;
//      boolean sweep_number;
//      boolean n_samples;
//      boolean n_gates;
//      boolean gate_length;
//      boolean pulse_width;
//      boolean prf_mode;
//      boolean prf;
//      boolean nyquist;
//      boolean max_range;
//      boolean unambiguous_range;
//      boolean measured_power_h;
//      boolean measured_power_v;
//      boolean scan_name;
//      boolean scan_mode;
//      boolean polarization_mode;
//      boolean latitude;
//      boolean longitude;
//      boolean altitude;
//      boolean altitude_rate;
//      boolean sun_elevation;
//      boolean sun_azimuth;
//      boolean speed;
//      boolean heading;
//      boolean track;
//   }
//
//

show_status_in_gui = {
    azimuth = TRUE,
    elevation = TRUE,
    fixed_angle = TRUE,
    volume_number = FALSE,
    sweep_number = TRUE,
    n_samples = TRUE,
    n_gates = TRUE,
    gate_length = TRUE,
    pulse_width = TRUE,
    prf_mode = TRUE,
    prf = TRUE,
    nyquist = TRUE,
    max_range = TRUE,
    unambiguous_range = TRUE,
    measured_power_h = FALSE,
    measured_power_v = FALSE,
    scan_name = FALSE,
    scan_mode = TRUE,
    polarization_mode = TRUE,
    latitude = TRUE,
    longitude = TRUE,
    altitude = TRUE,
    altitude_rate = FALSE,
    sun_elevation = TRUE,
    sun_azimuth = TRUE,
    speed = FALSE,
    heading = FALSE,
    track = FALSE
};

//======================================================================
//
// INITIAL MAX RANGE.
//
//======================================================================
 
///////////// max_range_km ////////////////////////////
//
// Max range for the display (km).
//
//
// Type: double
//

max_range_km = 225;

//======================================================================
//
// WINDOW DIMENSIONS AND PLOTTING DETAILS.
//
//======================================================================
 
///////////// main_window_width ///////////////////////
//
// Startup width of main window (pixels).
//
//
// Type: int
//

main_window_width = 1400;

///////////// main_window_height //////////////////////
//
// Startup height of main window (pixels).
//
//
// Type: int
//

main_window_height = 1100;

///////////// main_window_start_x /////////////////////
//
// Startup X for main window (pixels).
//
//
// Type: int
//

main_window_start_x = 0;

///////////// main_window_start_y /////////////////////
//
// Startup Y for main window (pixels).
//
//
// Type: int
//

main_window_start_y = 0;

///////////// color_scale_width ///////////////////////
//
// Width of color scale (pixels).
//
//
// Type: int
//

color_scale_width = 40;

///////////// label_font_size /////////////////////////
//
// Basic font size for labels (pixels).
//
// Some of the labels are scaled relative to this size.
//
//
// Type: int
//

label_font_size = 12;

///////////// background_color ////////////////////////
//
// Color of main display background.
//
//
// Type: string
//

background_color = "black";

///////////// overlay_color ///////////////////////////
//
// Color of overlays.
//
//
// Type: string
//

overlay_color = "white";

///////////// overlay_font_size ///////////////////////
//
// Font size for labels on overlays (pixels).
//
//
// Type: int
//

overlay_font_size = 8;

///////////// click_cross_size ////////////////////////
//
// Size of cross at click point (pixels).
//
// Size of cross drawn at click point, to select data.
//
//
// Type: int
//

click_cross_size = 11;

//======================================================================
//
// ASCOPE MODE DISPLAY.
//
//======================================================================
 
///////////// ascope_aspect_ratio /////////////////////
//
// Aspect ratio (width/height) of ASCOPE window.
//
//
// Type: double
//

ascope_aspect_ratio = 1;

///////////// ascope_grids_on_at_startup //////////////
//
// Set ASCOPE grids overlay on at startup.
//
//
// Type: boolean
//

ascope_grids_on_at_startup = FALSE;

//======================================================================
//
// ASCOPE MARGINS.
//
//======================================================================
 
///////////// ascope_top_margin ///////////////////////
//
// Height of top margin in ASCOPE mode (pixels).
//
// Titles go in the top margin.
//
//
// Type: int
//

ascope_top_margin = 40;

///////////// ascope_bottom_margin ////////////////////
//
// Height of bottom margin in ASCOPE mode (pixels).
//
// Time scale goes in the bottom margin.
//
//
// Type: int
//

ascope_bottom_margin = 45;

///////////// ascope_left_margin //////////////////////
//
// Width of left margin in ASCOPE mode (pixels).
//
// Height scale goes in the left margin.
//
//
// Type: int
//

ascope_left_margin = 50;

///////////// ascope_right_margin /////////////////////
//
// Width of right margin in ASCOPE mode (pixels).
//
// Height scale goes in the right margin.
//
//
// Type: int
//

ascope_right_margin = 40;

///////////// ascope_axis_tick_len ////////////////////
//
// Length of ticks on axes (pixels).
//
//
// Type: int
//

ascope_axis_tick_len = 6;

///////////// ascope_n_ticks_ideal ////////////////////
//
// Ideal number of ticks on axes.
//
//
// Type: int
//

ascope_n_ticks_ideal = 10;

///////////// ascope_text_margin //////////////////////
//
// Margin around some text (pixels).
//
//
// Type: int
//

ascope_text_margin = 5;

///////////// ascope_time_span_secs ///////////////////
//
// Time span for ASCOPE (secs).
//
//
// Type: double
//

ascope_time_span_secs = 3600;

///////////// ascope_min_amplitude ////////////////////
//
// Min amplitude for ascope.
//
//
// Type: double
//

ascope_min_amplitude = 0;

///////////// ascope_max_amplitude ////////////////////
//
// Max amplitude for ascope.
//
//
// Type: double
//

ascope_max_amplitude = 1;

///////////// ascope_min_secs_between_rendering ///////
//
// Min time between rendering (secs).
//
// Setting this higher makes the display less smooth, but prevents the 
//   display from taking up too much CPU.
//
//
// Type: double
//

ascope_min_secs_between_rendering = 0;

//======================================================================
//
// ASCOPE TITLES, LABELS AND AXES.
//
//======================================================================
 
///////////// ascope_title_font_size //////////////////
//
// Font size of center title (pixels).
//
//
// Type: int
//

ascope_title_font_size = 12;

///////////// ascope_axis_label_font_size /////////////
//
// Font size of axis labels in ascope (pixels).
//
//
// Type: int
//

ascope_axis_label_font_size = 10;

///////////// ascope_axis_values_font_size ////////////
//
// Font size of axis values (pixels).
//
//
// Type: int
//

ascope_axis_values_font_size = 8;

///////////// ascope_axes_color ///////////////////////
//
// Color of axes in ascope.
//
//
// Type: string
//

ascope_axes_color = "white";

///////////// ascope_grid_color ///////////////////////
//
// Color of grid lines on ascope.
//
//
// Type: string
//

ascope_grid_color = "gray";

///////////// ascope_labels_color /////////////////////
//
// Color of labels in ascope.
//
//
// Type: string
//

ascope_labels_color = "white";

///////////// ascope_draw_y_grid_lines ////////////////
//
// Option to draw grid lines in the Y direction.
//
//
// Type: boolean
//

ascope_draw_y_grid_lines = TRUE;

///////////// ascope_draw_x_grid_lines ////////////////
//
// Option to draw grid lines in the X direction.
//
//
// Type: boolean
//

ascope_draw_x_grid_lines = TRUE;

///////////// ascope_draw_instrument_height_line //////
//
// Option to draw a line for the instrument location.
//
//
// Type: boolean
//

ascope_draw_instrument_height_line = TRUE;

///////////// ascope_instrument_height_color //////////
//
// Color of instrument height line in ALTITUDE plot.
//
//
// Type: string
//

ascope_instrument_height_color = "white";

//======================================================================
//
// ASCOPE LEGENDS.
//
//======================================================================
 
///////////// ascope_main_legend_pos //////////////////
//
// Position of main legend in the ASCOPE plot window.
//
// This include time, field name and elevation angle.
//
//
// Type: enum
// Options:
//     LEGEND_TOP_LEFT
//     LEGEND_TOP_RIGHT
//     LEGEND_BOTTOM_LEFT
//     LEGEND_BOTTOM_RIGHT
//

ascope_main_legend_pos = LEGEND_TOP_LEFT;

///////////// ascope_plot_legend1 /////////////////////
//
// Option to plot the starting lat/lon position as a legend.
//
// This helps in geolocating the data from a mobile system.
//
//
// Type: boolean
//

ascope_plot_legend1 = TRUE;

///////////// ascope_legend1_pos //////////////////////
//
// Position of lat/lon legend in plot.
//
// The starting latitude/longitude will be plotted as a legend in the 
//   location specified. See 'ascope_plot_starting_latlon_as_legend'.
//
//
// Type: enum
// Options:
//     LEGEND_TOP_LEFT
//     LEGEND_TOP_RIGHT
//     LEGEND_BOTTOM_LEFT
//     LEGEND_BOTTOM_RIGHT
//

ascope_legend1_pos = LEGEND_TOP_LEFT;

///////////// ascope_legend2_pos //////////////////////
//
// Position of lat/lon legend in plot.
//
// The starting latitude/longitude will be plotted as a legend in the 
//   location specified. See 'ascope_plot_starting_latlon_as_legend'.
//
//
// Type: enum
// Options:
//     LEGEND_TOP_LEFT
//     LEGEND_TOP_RIGHT
//     LEGEND_BOTTOM_LEFT
//     LEGEND_BOTTOM_RIGHT
//

ascope_legend2_pos = LEGEND_TOP_LEFT;

///////////// ascope_plot_legend2 /////////////////////
//
// Option to plot the starting lat/lon position as a legend.
//
// This helps in geolocating the data from a mobile system.
//
//
// Type: boolean
//

ascope_plot_legend2 = TRUE;

