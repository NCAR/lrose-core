/*********************************************************
 * parameter definitions for AparAscope
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * August 2020
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "AparAscope is the ascope display for time series data in APAR format.";
  p_text = "";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE,
  DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to register this process with the process mapper (procmap).";
  p_help = "If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.";
} register_with_procmap;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "REALTIME DATA INPUT";
}

typedef enum {
  FMQ_INPUT, 
  TCP_INPUT
} input_mode_t;

paramdef enum input_mode_t {
  p_default = FMQ_INPUT;
  p_descr = "Method for reading the input data";
  p_help = "\tFMQ_INPUT: read moments from an FMQ.\n\tTCP_INPUT: read a moments stream from a TCP socket.";
} input_mode;

paramdef string {
  p_default = "/tmp/fmq/test";
  p_descr = "FMQ_INPUT mode: input URL for moments data from an FMQ";
  p_help = "Full url is of the form fmqp:://hostname:port:path. Path does not in lude the file extension.";
} input_fmq_url;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to seek to the start of the input FMQ.";
  p_help = "If TRUE, the program will seek to the start of the fmq and read the entire contents at startup. If FALSE, it will read only new data as it arrives.";
} seek_to_start_of_fmq;

paramdef string {
  p_default = "localhost";
  p_descr = "TCP_INPUT: name of host running IWRF moments server.";
} input_tcp_host;

paramdef int {
  p_default = 11000;
  p_descr = "TCP_INPUT: port for IWRF moments server.";
} input_tcp_port;

commentdef {
  p_header = "WINDOW DIMENSIONS";
}

paramdef int {
  p_default = 1100;
  p_descr = "Startup width of main window (pixels).";
} main_window_width;

paramdef int {
  p_default = 635;
  p_descr = "Startup height of main window (pixels).";
} main_window_height;

paramdef int {
  p_default = 0;
  p_descr = "Startup X for main window (pixels).";
} main_window_start_x;

paramdef int {
  p_default = 0;
  p_descr = "Startup Y for main window (pixels).";
} main_window_start_y;

commentdef {
  p_header = "DISPLAY DETAILS";
}

paramdef string {
  p_default = "AparAscope";
  p_descr = "Title for plot window.";
} main_window_title;

paramdef double {
  p_default = 50.0;
  p_descr = "Set the display refresh rate (Hz).";
  p_help = "The display will update at this rate.";
} refresh_hz;

paramdef int {
  p_default = 0;
  p_descr = "Radar Identifier.";
  p_help = "Set radarId if data contains multiple IDs, 0 uses all data.";
} radar_id;

paramdef string {
  p_default = "/tmp/AparAscope/images";
  p_descr = "Dir for saving images.";
} save_dir;

paramdef int {
  p_default = 0;
  p_descr = "Starting gate number.";
  p_help = "This is the gate number in use when the display starts.";
} start_gate_num;

