///////////////////////////////////////////////////////
//  parameter definitions for AcGeoref2Spdb
//
//  Mike Dixon, EOL, NCAR
//  P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
//  March 2016
////////////////////////////////////////////////////////

commentdef {
  p_header = "AcGeoref2Spdb reads aircraft georeference data (posn, attitude, motion etc) from IWRF time series and netcdf files, and writes the data to SPDB.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;
  
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Register with procmap.";
} reg_with_procmap;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

typedef enum {
  RADX_FMQ,
  IWRF_FMQ,
  RAF_IWG1_UDP,
  CFRADIAL,
  IWRF_FILE,
  RAF_NETCDF
} input_mode_t;
  
paramdef enum input_mode_t {
  p_default = IWRF_FILE;
  p_descr = "Reading the input data.";
  p_help = "RADX_FMQ: realtime mode from FMQ in RADX moments format.\n\nIWRF_FMQ: read the georeference packets from an FMQ containing IWRF time series.\n\nRAF_IWG1_UDP: read NCAR RAF IWG1 packets from UDP.\n\nCFRADIAL: read CfRadial files.\n\nIWRF_FILE: read the georeference packets from files containing IWRF time series.\n\nRAF_NETCDF: read files produced by the NCAR EOL/RAF aircraft group.";
} input_mode;

commentdef {
  p_header = "AIRCRAFT CALL SIGN";
  p_text = "For IWRF, CFRADIAL and UDP data.";
}

paramdef string {
  p_default = "";
  p_descr = "Callsign of aircraft";
  p_help = "Used for IWRF data. The RAF data includes the callsign in the file.";
} aircraft_callsign;

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_default = "spdbp:://localhost::/tmp/spdb/ac_georef";
  p_descr = "Output SPDB URL for georef data.";
  p_help = "The format is spdbp::params//host:port:dir. Normally params is an empty string, and port is an empty string, so that the default behavior will occur.";
} output_spdb_url;

paramdef int {
  p_default = 20;
  p_descr = "Number of SPDB chunks per write.";
  p_help = "We package up the SPDB data chunks, and write them together once the number of chunks reaches this threshold.";
} spdb_nchunks_per_write;

commentdef {
  p_header = "INPUT MODE - RADX_FMQ and IWRF_FMQ";
  p_text = "Read realtime data from FMQ";
}

paramdef string {
  p_default = "/tmp/fmq/ts";
  p_descr = "FMQ name. For IWRF_FMQ or RADX_FMQ only.";
  p_help = "Path to FMQ files. There are 2 files, one with a .buf extension and one with a .stat extention. This path does not include the extensions.";
} input_fmq_name;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to seek to the end of the input FMQ.";
  p_help = "Applies to input_mode = IWRF_FMQ. If TRUE, the program will seek to the end of the fmq and only read in new data. If FALSE, it will start reading from the beginning of the FMQ.";
} seek_to_end_of_input;

commentdef {
  p_header = "INPUT MODE - RAF_IWG1_UDP";
  p_header = "Read georeference data in IWG1 format from RAF UDP packets";
}

paramdef int {
  p_default = 7071;
  p_descr = "Port for reading IWG1 packets via UDP.";
  p_help = "Applies to input_mode = RAF_IWG1_UDP. On the aircraft, the IWG1 georeference information is broadcast using UDP. This is the UDP port used.";
} iwg1_udp_port;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to read multi-cast udp packets.";
  p_help = "If true, you must set the multicast group as well.";
} udp_is_multicast;

paramdef string {
  p_default = "239.0.0.10";
  p_descr = "Group for multicast packets";
  p_help = "Multicast packets are sometimes required to get through a firewall.";
} udp_multicast_group;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to store a default location if no UDP data is available.";
  p_help = "If the system is not on the aircraft, no UDP data will be available. This option allows us to store out a known location for fixed operations on the ground.";
} store_default_if_no_udp_data;

typedef struct {
  double latitude_deg;
  double longitude_deg;
  double altitude_m;
} default_location_t;

paramdef struct default_location_t {
  p_default = {
    latitude_deg = 40.0,
    longitude_deg = -105.0,
    altitude_m = 1750.0
  };
  p_descr = "Default location to be used for fixed operations.";
  p_help = "This is the location to be set if the instrument is not on the aircraft.";
} default_location;

paramdef int {
  p_default = 5;
  p_descr = "Time to wait for UDP data before writing out default location.";
} udp_sleep_secs;

commentdef {
  p_header = "INPUT MODE - RAF_NETCDF";
  p_text = "Set the NetCDF variable names for the fields to be read in. If a field is not available. set the name to an empty string.";
}

paramdef string {
  p_default = "ALT";
  p_descr = "Netcdf variable name for altitude_msl";
} nc_varname_altitude_msl;

paramdef string {
  p_default = "PALT_A";
  p_descr = "Netcdf variable name for pressure altitude";
} nc_varname_altitude_pres;

paramdef string {
  p_default = "VEWC";
  p_descr = "Netcdf variable name for ew_velocity";
} nc_varname_ew_velocity;

paramdef string {
  p_default = "VNSC";
  p_descr = "Netcdf variable name for ns_velocity";
} nc_varname_ns_velocity;

paramdef string {
  p_default = "VSPD";
  p_descr = "Netcdf variable name for vert_velocity";
} nc_varname_vert_velocity;

paramdef string {
  p_default = "UIC";
  p_descr = "Netcdf variable name for ew_wind";
} nc_varname_ew_wind;

paramdef string {
  p_default = "VIC";
  p_descr = "Netcdf variable name for ns_wind";
} nc_varname_ns_wind;

paramdef string {
  p_default = "WIC";
  p_descr = "Netcdf variable name for vert_wind";
} nc_varname_vert_wind;

paramdef string {
  p_default = "THDG";
  p_descr = "Netcdf variable name for heading";
} nc_varname_heading;

paramdef string {
  p_default = "DRFTA";
  p_descr = "Netcdf variable name for drift_angle";
} nc_varname_drift_angle;

paramdef string {
  p_default = "TKAT";
  p_descr = "Netcdf variable name for track_angle";
} nc_varname_track;

paramdef string {
  p_default = "ROLL";
  p_descr = "Netcdf variable name for roll";
} nc_varname_roll;

paramdef string {
  p_default = "PITCH";
  p_descr = "Netcdf variable name for pitch";
} nc_varname_pitch;

paramdef string {
  p_default = "AT_A";
  p_descr = "Netcdf variable name for ambient temperature";
} nc_varname_temperature;

paramdef string {
  p_default = "PSXC";
  p_descr = "Netcdf variable name for ambient static pressure";
} nc_varname_pressure;

paramdef string {
  p_default = "RHUM";
  p_descr = "Netcdf variable name for rh";
} nc_varname_rh;

paramdef string {
  p_default = "ATTACK";
  p_descr = "Netcdf variable name for angle_of_attack";
} nc_varname_angle_of_attack;

paramdef string {
  p_default = "CAS_A";
  p_descr = "Netcdf variable name for indicated airspeed";
} nc_varname_indicated_airspeed;

paramdef string {
  p_default = "TAS_A";
  p_descr = "Netcdf variable name for true_airspeed";
} nc_varname_true_airspeed;

paramdef string {
  p_default = "BNORMA";
  p_descr = "Netcdf variable name for normal acceleration";
} nc_varname_normal_accel;

paramdef string {
  p_default = "BLATA";
  p_descr = "Netcdf variable name for lateral acceleration";
} nc_varname_lateral_accel;

paramdef string {
  p_default = "BLONGA";
  p_descr = "Netcdf variable name for longitudinal acceleration";
} nc_varname_longitudinal_accel;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to specify custom fields to be read in.";
  p_help = "If TRUE, the program will read in custom fields from the netcdf file, and store them in the custom array in the ac_georef_t struct in SPDB.";
} nc_specify_custom_fields;

paramdef string {
  p_default = { "PITCH_IRS2", "PITCH_IRS3" };
  p_descr = "Netcdf variable names for custom fields";
  p_descr = "You can specify up to 10 fields to be stored in the custom variable array in the ac_georef_t struct.";
} nc_varname_custom_fields[];

commentdef {
  p_header = "HCR TEMPERATURE from CFRADIAL FILES";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to get the HCR temperatures from the Cfradial files.";
  p_help = "If true, we get the Cmigits and Tailcone temperatures for the HCR from the status XML block in the CfRadial files.";
} get_hcr_temps_from_cfradial;

commentdef {
  p_header = "DETERMINE THE SURFACE VELOCITY FROM CFRADIAL DATA";
  p_text = "This applies to HCR data.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to compute the surface velocity from the data.";
  p_help = "We find the range to the peak in reflectivity, and then determine the radial velocity at that range.";
} compute_surface_vel_in_cfradial;

paramdef string {
  p_default = "VEL";
  p_descr = "Field name for VEL in CfRadial file";
  p_help = "We need to read in at least 1 field for a valid read operation.";
} cfradial_vel_field_name;

paramdef double {
  p_default = 0.5;
  p_descr = "Minumum range to the surface (km).";
  p_help = "We will search for the surface echo in the gates beyound this range.";
} min_range_to_surface_km;

paramdef double {
  p_default = 20.0;
  p_descr = "Minumum dbz value for a valid surface return.";
  p_help = "Gates with values below this will not be used.";
} min_dbz_for_surface_echo;

paramdef string {
  p_default = "DBZ";
  p_descr = "Field name for DBZ in CfRadial file";
  p_help = "We need to read in at least 1 field for a valid read operation.";
} cfradial_dbz_field_name;

paramdef double {
  p_default = 5;
  p_descr = "Maximum error from nadir pointing for computing surface velocity (deg).";
  p_help = "We only try to compute the surface velocity if the beam is pointing within this margin of nadir (vertically down).";
} max_nadir_error_for_surface_vel;

paramdef int {
  p_default = 1;
  p_descr = "Number of gates needed for identifying surface echo.";
  p_help = "We require this number of gates to exceed min_dbz_for_surface_echo.";
} ngates_for_surface_echo;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print surface velocity information to stdout.";
  p_help = "If true, the surface velocity estimates, as well as estimated antenna pointing angles, will be printed to stdout at regular intervals.";
} print_surface_velocity_data;

paramdef double {
  p_default = 2.0;
  p_descr = "Number of seconds between printing information on surface velocity.";
  p_help = "The data will be averaged over this time period and then printed to stdout.";
} surface_velocity_print_period_secs;

