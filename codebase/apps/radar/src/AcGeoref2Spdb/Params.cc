/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program AcGeoref2Spdb
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("AcGeoref2Spdb reads aircraft georeference data (posn, attitude, motion etc) from IWRF time series and netcdf files, and writes the data to SPDB.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'reg_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("reg_with_procmap");
    tt->descr = tdrpStrDup("Register with procmap.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &reg_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_mode'
    // ctype is '_input_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_mode");
    tt->descr = tdrpStrDup("Reading the input data.");
    tt->help = tdrpStrDup("RADX_FMQ: realtime mode from FMQ in RADX moments format.\n\nIWRF_FMQ: read the georeference packets from an FMQ containing IWRF time series.\n\nRAF_IWG1_UDP: read NCAR RAF IWG1 packets from UDP.\n\nCFRADIAL: read CfRadial files.\n\nIWRF_FILE: read the georeference packets from files containing IWRF time series.\n\nRAF_NETCDF: read files produced by the NCAR EOL/RAF aircraft group.");
    tt->val_offset = (char *) &input_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("input_mode_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("RADX_FMQ");
      tt->enum_def.fields[0].val = RADX_FMQ;
      tt->enum_def.fields[1].name = tdrpStrDup("IWRF_FMQ");
      tt->enum_def.fields[1].val = IWRF_FMQ;
      tt->enum_def.fields[2].name = tdrpStrDup("RAF_IWG1_UDP");
      tt->enum_def.fields[2].val = RAF_IWG1_UDP;
      tt->enum_def.fields[3].name = tdrpStrDup("CFRADIAL");
      tt->enum_def.fields[3].val = CFRADIAL;
      tt->enum_def.fields[4].name = tdrpStrDup("IWRF_FILE");
      tt->enum_def.fields[4].val = IWRF_FILE;
      tt->enum_def.fields[5].name = tdrpStrDup("RAF_NETCDF");
      tt->enum_def.fields[5].val = RAF_NETCDF;
    tt->single_val.e = IWRF_FILE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("AIRCRAFT CALL SIGN");
    tt->comment_text = tdrpStrDup("For IWRF, CFRADIAL and UDP data.");
    tt++;
    
    // Parameter 'aircraft_callsign'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("aircraft_callsign");
    tt->descr = tdrpStrDup("Callsign of aircraft");
    tt->help = tdrpStrDup("Used for IWRF data. The RAF data includes the callsign in the file.");
    tt->val_offset = (char *) &aircraft_callsign - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_spdb_url");
    tt->descr = tdrpStrDup("Output SPDB URL for georef data.");
    tt->help = tdrpStrDup("The format is spdbp::params//host:port:dir. Normally params is an empty string, and port is an empty string, so that the default behavior will occur.");
    tt->val_offset = (char *) &output_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::/tmp/spdb/ac_georef");
    tt++;
    
    // Parameter 'spdb_nchunks_per_write'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("spdb_nchunks_per_write");
    tt->descr = tdrpStrDup("Number of SPDB chunks per write.");
    tt->help = tdrpStrDup("We package up the SPDB data chunks, and write them together once the number of chunks reaches this threshold.");
    tt->val_offset = (char *) &spdb_nchunks_per_write - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("INPUT MODE - RADX_FMQ and IWRF_FMQ");
    tt->comment_text = tdrpStrDup("Read realtime data from FMQ");
    tt++;
    
    // Parameter 'input_fmq_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_name");
    tt->descr = tdrpStrDup("FMQ name. For IWRF_FMQ or RADX_FMQ only.");
    tt->help = tdrpStrDup("Path to FMQ files. There are 2 files, one with a .buf extension and one with a .stat extention. This path does not include the extensions.");
    tt->val_offset = (char *) &input_fmq_name - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/ts");
    tt++;
    
    // Parameter 'seek_to_end_of_input'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("seek_to_end_of_input");
    tt->descr = tdrpStrDup("Option to seek to the end of the input FMQ.");
    tt->help = tdrpStrDup("Applies to input_mode = IWRF_FMQ. If TRUE, the program will seek to the end of the fmq and only read in new data. If FALSE, it will start reading from the beginning of the FMQ.");
    tt->val_offset = (char *) &seek_to_end_of_input - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("INPUT MODE - RAF_IWG1_UDP");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'iwg1_udp_port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("iwg1_udp_port");
    tt->descr = tdrpStrDup("Port for reading IWG1 packets via UDP.");
    tt->help = tdrpStrDup("Applies to input_mode = RAF_IWG1_UDP. On the aircraft, the IWG1 georeference information is broadcast using UDP. This is the UDP port used.");
    tt->val_offset = (char *) &iwg1_udp_port - &_start_;
    tt->single_val.i = 7071;
    tt++;
    
    // Parameter 'udp_is_multicast'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("udp_is_multicast");
    tt->descr = tdrpStrDup("Option to read multi-cast udp packets.");
    tt->help = tdrpStrDup("If true, you must set the multicast group as well.");
    tt->val_offset = (char *) &udp_is_multicast - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'udp_multicast_group'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("udp_multicast_group");
    tt->descr = tdrpStrDup("Group for multicast packets");
    tt->help = tdrpStrDup("Multicast packets are sometimes required to get through a firewall.");
    tt->val_offset = (char *) &udp_multicast_group - &_start_;
    tt->single_val.s = tdrpStrDup("239.0.0.10");
    tt++;
    
    // Parameter 'store_default_if_no_udp_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("store_default_if_no_udp_data");
    tt->descr = tdrpStrDup("Option to store a default location if no UDP data is available.");
    tt->help = tdrpStrDup("If the system is not on the aircraft, no UDP data will be available. This option allows us to store out a known location for fixed operations on the ground.");
    tt->val_offset = (char *) &store_default_if_no_udp_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'default_location'
    // ctype is '_default_location_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("default_location");
    tt->descr = tdrpStrDup("Default location to be used for fixed operations.");
    tt->help = tdrpStrDup("This is the location to be set if the instrument is not on the aircraft.");
    tt->val_offset = (char *) &default_location - &_start_;
    tt->struct_def.name = tdrpStrDup("default_location_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("latitude_deg");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &default_location.latitude_deg - (char *) &default_location;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("longitude_deg");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &default_location.longitude_deg - (char *) &default_location;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("altitude_m");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &default_location.altitude_m - (char *) &default_location;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 40;
      tt->struct_vals[1].d = -105;
      tt->struct_vals[2].d = 1750;
    tt++;
    
    // Parameter 'udp_sleep_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("udp_sleep_secs");
    tt->descr = tdrpStrDup("Time to wait for UDP data before writing out default location.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &udp_sleep_secs - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("INPUT MODE - RAF_NETCDF");
    tt->comment_text = tdrpStrDup("Set the NetCDF variable names for the fields to be read in. If a field is not available. set the name to an empty string.");
    tt++;
    
    // Parameter 'nc_varname_altitude_msl'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_altitude_msl");
    tt->descr = tdrpStrDup("Netcdf variable name for altitude_msl");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_altitude_msl - &_start_;
    tt->single_val.s = tdrpStrDup("ALT");
    tt++;
    
    // Parameter 'nc_varname_altitude_pres'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_altitude_pres");
    tt->descr = tdrpStrDup("Netcdf variable name for pressure altitude");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_altitude_pres - &_start_;
    tt->single_val.s = tdrpStrDup("PALT_A");
    tt++;
    
    // Parameter 'nc_varname_ew_velocity'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_ew_velocity");
    tt->descr = tdrpStrDup("Netcdf variable name for ew_velocity");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_ew_velocity - &_start_;
    tt->single_val.s = tdrpStrDup("VEWC");
    tt++;
    
    // Parameter 'nc_varname_ns_velocity'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_ns_velocity");
    tt->descr = tdrpStrDup("Netcdf variable name for ns_velocity");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_ns_velocity - &_start_;
    tt->single_val.s = tdrpStrDup("VNSC");
    tt++;
    
    // Parameter 'nc_varname_vert_velocity'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_vert_velocity");
    tt->descr = tdrpStrDup("Netcdf variable name for vert_velocity");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_vert_velocity - &_start_;
    tt->single_val.s = tdrpStrDup("VSPD");
    tt++;
    
    // Parameter 'nc_varname_ew_wind'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_ew_wind");
    tt->descr = tdrpStrDup("Netcdf variable name for ew_wind");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_ew_wind - &_start_;
    tt->single_val.s = tdrpStrDup("UIC");
    tt++;
    
    // Parameter 'nc_varname_ns_wind'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_ns_wind");
    tt->descr = tdrpStrDup("Netcdf variable name for ns_wind");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_ns_wind - &_start_;
    tt->single_val.s = tdrpStrDup("VIC");
    tt++;
    
    // Parameter 'nc_varname_vert_wind'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_vert_wind");
    tt->descr = tdrpStrDup("Netcdf variable name for vert_wind");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_vert_wind - &_start_;
    tt->single_val.s = tdrpStrDup("WIC");
    tt++;
    
    // Parameter 'nc_varname_heading'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_heading");
    tt->descr = tdrpStrDup("Netcdf variable name for heading");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_heading - &_start_;
    tt->single_val.s = tdrpStrDup("THDG");
    tt++;
    
    // Parameter 'nc_varname_drift_angle'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_drift_angle");
    tt->descr = tdrpStrDup("Netcdf variable name for drift_angle");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_drift_angle - &_start_;
    tt->single_val.s = tdrpStrDup("DRFTA");
    tt++;
    
    // Parameter 'nc_varname_track'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_track");
    tt->descr = tdrpStrDup("Netcdf variable name for track_angle");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_track - &_start_;
    tt->single_val.s = tdrpStrDup("TKAT");
    tt++;
    
    // Parameter 'nc_varname_roll'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_roll");
    tt->descr = tdrpStrDup("Netcdf variable name for roll");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_roll - &_start_;
    tt->single_val.s = tdrpStrDup("ROLL");
    tt++;
    
    // Parameter 'nc_varname_pitch'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_pitch");
    tt->descr = tdrpStrDup("Netcdf variable name for pitch");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_pitch - &_start_;
    tt->single_val.s = tdrpStrDup("PITCH");
    tt++;
    
    // Parameter 'nc_varname_temperature'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_temperature");
    tt->descr = tdrpStrDup("Netcdf variable name for ambient temperature");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_temperature - &_start_;
    tt->single_val.s = tdrpStrDup("AT_A");
    tt++;
    
    // Parameter 'nc_varname_pressure'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_pressure");
    tt->descr = tdrpStrDup("Netcdf variable name for ambient static pressure");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_pressure - &_start_;
    tt->single_val.s = tdrpStrDup("PSXC");
    tt++;
    
    // Parameter 'nc_varname_rh'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_rh");
    tt->descr = tdrpStrDup("Netcdf variable name for rh");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_rh - &_start_;
    tt->single_val.s = tdrpStrDup("RHUM");
    tt++;
    
    // Parameter 'nc_varname_angle_of_attack'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_angle_of_attack");
    tt->descr = tdrpStrDup("Netcdf variable name for angle_of_attack");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_angle_of_attack - &_start_;
    tt->single_val.s = tdrpStrDup("ATTACK");
    tt++;
    
    // Parameter 'nc_varname_indicated_airspeed'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_indicated_airspeed");
    tt->descr = tdrpStrDup("Netcdf variable name for indicated airspeed");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_indicated_airspeed - &_start_;
    tt->single_val.s = tdrpStrDup("CAS_A");
    tt++;
    
    // Parameter 'nc_varname_true_airspeed'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_true_airspeed");
    tt->descr = tdrpStrDup("Netcdf variable name for true_airspeed");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_true_airspeed - &_start_;
    tt->single_val.s = tdrpStrDup("TAS_A");
    tt++;
    
    // Parameter 'nc_varname_normal_accel'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_normal_accel");
    tt->descr = tdrpStrDup("Netcdf variable name for normal acceleration");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_normal_accel - &_start_;
    tt->single_val.s = tdrpStrDup("BNORMA");
    tt++;
    
    // Parameter 'nc_varname_lateral_accel'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_lateral_accel");
    tt->descr = tdrpStrDup("Netcdf variable name for lateral acceleration");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_lateral_accel - &_start_;
    tt->single_val.s = tdrpStrDup("BLATA");
    tt++;
    
    // Parameter 'nc_varname_longitudinal_accel'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_longitudinal_accel");
    tt->descr = tdrpStrDup("Netcdf variable name for longitudinal acceleration");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nc_varname_longitudinal_accel - &_start_;
    tt->single_val.s = tdrpStrDup("BLONGA");
    tt++;
    
    // Parameter 'nc_specify_custom_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("nc_specify_custom_fields");
    tt->descr = tdrpStrDup("Option to specify custom fields to be read in.");
    tt->help = tdrpStrDup("If TRUE, the program will read in custom fields from the netcdf file, and store them in the custom array in the ac_georef_t struct in SPDB.");
    tt->val_offset = (char *) &nc_specify_custom_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'nc_varname_custom_fields'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("nc_varname_custom_fields");
    tt->descr = tdrpStrDup("Netcdf variable names for custom fields");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_nc_varname_custom_fields - &_start_;
    tt->array_n_offset = (char *) &nc_varname_custom_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("PITCH_IRS2");
      tt->array_vals[1].s = tdrpStrDup("PITCH_IRS3");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("HCR TEMPERATURE from CFRADIAL FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'get_hcr_temps_from_cfradial'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("get_hcr_temps_from_cfradial");
    tt->descr = tdrpStrDup("Option to get the HCR temperatures from the Cfradial files.");
    tt->help = tdrpStrDup("If true, we get the Cmigits and Tailcone temperatures for the HCR from the status XML block in the CfRadial files.");
    tt->val_offset = (char *) &get_hcr_temps_from_cfradial - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("DETERMINE THE SURFACE VELOCITY FROM CFRADIAL DATA");
    tt->comment_text = tdrpStrDup("This applies to HCR data.");
    tt++;
    
    // Parameter 'compute_surface_vel_in_cfradial'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_surface_vel_in_cfradial");
    tt->descr = tdrpStrDup("Option to compute the surface velocity from the data.");
    tt->help = tdrpStrDup("We find the range to the peak in reflectivity, and then determine the radial velocity at that range.");
    tt->val_offset = (char *) &compute_surface_vel_in_cfradial - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'cfradial_vel_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_vel_field_name");
    tt->descr = tdrpStrDup("Field name for VEL in CfRadial file");
    tt->help = tdrpStrDup("We need to read in at least 1 field for a valid read operation.");
    tt->val_offset = (char *) &cfradial_vel_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'min_range_to_surface_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_range_to_surface_km");
    tt->descr = tdrpStrDup("Minumum range to the surface (km).");
    tt->help = tdrpStrDup("We will search for the surface echo in the gates beyound this range.");
    tt->val_offset = (char *) &min_range_to_surface_km - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'min_dbz_for_surface_echo'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_dbz_for_surface_echo");
    tt->descr = tdrpStrDup("Minumum dbz value for a valid surface return.");
    tt->help = tdrpStrDup("Gates with values below this will not be used.");
    tt->val_offset = (char *) &min_dbz_for_surface_echo - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'cfradial_dbz_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_dbz_field_name");
    tt->descr = tdrpStrDup("Field name for DBZ in CfRadial file");
    tt->help = tdrpStrDup("We need to read in at least 1 field for a valid read operation.");
    tt->val_offset = (char *) &cfradial_dbz_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'max_nadir_error_for_surface_vel'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_nadir_error_for_surface_vel");
    tt->descr = tdrpStrDup("Maximum error from nadir pointing for computing surface velocity (deg).");
    tt->help = tdrpStrDup("We only try to compute the surface velocity if the beam is pointing within this margin of nadir (vertically down).");
    tt->val_offset = (char *) &max_nadir_error_for_surface_vel - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'ngates_for_surface_echo'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ngates_for_surface_echo");
    tt->descr = tdrpStrDup("Number of gates needed for identifying surface echo.");
    tt->help = tdrpStrDup("We require this number of gates to exceed min_dbz_for_surface_echo.");
    tt->val_offset = (char *) &ngates_for_surface_echo - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'print_surface_velocity_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_surface_velocity_data");
    tt->descr = tdrpStrDup("Option to print surface velocity information to stdout.");
    tt->help = tdrpStrDup("If true, the surface velocity estimates, as well as estimated antenna pointing angles, will be printed to stdout at regular intervals.");
    tt->val_offset = (char *) &print_surface_velocity_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'surface_velocity_print_period_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("surface_velocity_print_period_secs");
    tt->descr = tdrpStrDup("Number of seconds between printing information on surface velocity.");
    tt->help = tdrpStrDup("The data will be averaged over this time period and then printed to stdout.");
    tt->val_offset = (char *) &surface_velocity_print_period_secs - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
