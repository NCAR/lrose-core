/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program PartRain
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("PartRain (Particle-ID/Rain-rate) application");
    tt->comment_text = tdrpStrDup("PartRain reads dual-polarization moments in an input DsRadar FMQ, computes rain rate and particle ID, and writes the results to a DsRadar queue.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_url");
    tt->descr = tdrpStrDup("Input URL for dual-pol moments data via DsRadar FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmq/moments");
    tt++;
    
    // Parameter 'seek_to_start_of_input'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("seek_to_start_of_input");
    tt->descr = tdrpStrDup("Option to seek to the start of the input FMQ.");
    tt->help = tdrpStrDup("If TRUE, the program will seek to the start of the fmq and read in data from the entire queue. If FALSE, it will only read new data as it is added to the FMQ.");
    tt->val_offset = (char *) &seek_to_start_of_input - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("WAVELENGTH");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_wavelength'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_wavelength");
    tt->descr = tdrpStrDup("Option to specify the wavelength (cm).");
    tt->help = tdrpStrDup("If FALSE, the wavelength will be obtained from the input data stream. If TRUE, the wavelength will be set from the parameter file.");
    tt->val_offset = (char *) &override_wavelength - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'wavelength_cm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("wavelength_cm");
    tt->descr = tdrpStrDup("Wavelength (cm).");
    tt->help = tdrpStrDup("See 'override_wavelength'.");
    tt->val_offset = (char *) &wavelength_cm - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("INPUT FIELD INFORMATION");
    tt->comment_text = tdrpStrDup("Names of input fields in the Dsr queue. The following fields are required: SNR, DBZ, ZDR, PHIDP and RHOHV. KDP is also required internally, but if KDP is not available it will be computed from PHIDP. LDR is optional, and is used for PID only.");
    tt++;
    
    // Parameter 'dsr_name_SNR'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dsr_name_SNR");
    tt->descr = tdrpStrDup("Dsr field name for SNR.");
    tt->help = tdrpStrDup("Signal-to-noise ratio (dB).");
    tt->val_offset = (char *) &dsr_name_SNR - &_start_;
    tt->single_val.s = tdrpStrDup("SNR");
    tt++;
    
    // Parameter 'SNR_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("SNR_available");
    tt->descr = tdrpStrDup("Is SNR data available?");
    tt->help = tdrpStrDup("If not, SNR will be computed from the DBZ field. See 'noise_dbz_at_100km'.");
    tt->val_offset = (char *) &SNR_available - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'noise_dbz_at_100km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noise_dbz_at_100km");
    tt->descr = tdrpStrDup("The noise value, represented as dBZ at a range of 100km.");
    tt->help = tdrpStrDup("This is used for computing the SNR from the DBZ field. It is only used if SNR_available is FALSE. The SNR will be computed by range-correcting this value and using it as the noise value.");
    tt->val_offset = (char *) &noise_dbz_at_100km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'dsr_name_DBZ'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dsr_name_DBZ");
    tt->descr = tdrpStrDup("Dsr field name for DBZ.");
    tt->help = tdrpStrDup("Horizontally-polarized reflectivity factor.");
    tt->val_offset = (char *) &dsr_name_DBZ - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'dsr_name_VEL'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dsr_name_VEL");
    tt->descr = tdrpStrDup("Dsr field name for VEL, radial velocity.");
    tt->help = tdrpStrDup("Only used for passing data through. VEL data not used by PartRain.");
    tt->val_offset = (char *) &dsr_name_VEL - &_start_;
    tt->single_val.s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'dsr_name_WIDTH'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dsr_name_WIDTH");
    tt->descr = tdrpStrDup("Dsr field name for WIDTH, spectrum width.");
    tt->help = tdrpStrDup("Only used for passing data through. WIDTH data not used by PartRain.");
    tt->val_offset = (char *) &dsr_name_WIDTH - &_start_;
    tt->single_val.s = tdrpStrDup("WIDTH");
    tt++;
    
    // Parameter 'dsr_name_ZDR'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dsr_name_ZDR");
    tt->descr = tdrpStrDup("Dsr field name for ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dsr_name_ZDR - &_start_;
    tt->single_val.s = tdrpStrDup("ZDR");
    tt++;
    
    // Parameter 'dsr_name_PHIDP'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dsr_name_PHIDP");
    tt->descr = tdrpStrDup("Dsr field name for PHIDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dsr_name_PHIDP - &_start_;
    tt->single_val.s = tdrpStrDup("PHIDP");
    tt++;
    
    // Parameter 'dsr_name_RHOHV'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dsr_name_RHOHV");
    tt->descr = tdrpStrDup("Dsr field name for RHOHV.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dsr_name_RHOHV - &_start_;
    tt->single_val.s = tdrpStrDup("RHOHV");
    tt++;
    
    // Parameter 'KDP_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_available");
    tt->descr = tdrpStrDup("Is KDP data available?");
    tt->help = tdrpStrDup("If not, KDP will be computed from PHIDP");
    tt->val_offset = (char *) &KDP_available - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'dsr_name_KDP'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dsr_name_KDP");
    tt->descr = tdrpStrDup("Dsr field name for KDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dsr_name_KDP - &_start_;
    tt->single_val.s = tdrpStrDup("KDP");
    tt++;
    
    // Parameter 'dsr_name_LDR'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dsr_name_LDR");
    tt->descr = tdrpStrDup("Dsr field name for LDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dsr_name_LDR - &_start_;
    tt->single_val.s = tdrpStrDup("LDR");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("OPTION TO REPLACE MISSING LDR WITH SPECIFIED VALUE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'replace_missing_LDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("replace_missing_LDR");
    tt->descr = tdrpStrDup("Option to replace missing LDR values with a specified value.");
    tt->help = tdrpStrDup("When the SNR gets low, LDR is unreliable since there is not sufficient dynamic range to provide an accurate cross-polar power measurement. In these cases, it makes sense to replace LDR with a neutral value, such as 0.0, so that we do not reject gates at which valuable data is available.");
    tt->val_offset = (char *) &replace_missing_LDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'LDR_replacement_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("LDR_replacement_value");
    tt->descr = tdrpStrDup("Value to which LDR will be set if missing.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &LDR_replacement_value - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("SMOOTHING INPUT FIELDS");
    tt->comment_text = tdrpStrDup("DBZ, ZDR, LDR and RHOHV can be somewhat noisy gate-to-gate. This section gives you the option of smoothing the fields in range by applying a median filter.");
    tt++;
    
    // Parameter 'apply_median_filter_to_DBZ'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_DBZ");
    tt->descr = tdrpStrDup("Option to filter DBZ with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range, and affects both rain rate and PID.");
    tt->val_offset = (char *) &apply_median_filter_to_DBZ - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'DBZ_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("DBZ_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for DBZ - gates.");
    tt->help = tdrpStrDup("See 'appply_median_filter_to_DBZ'");
    tt->val_offset = (char *) &DBZ_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'apply_median_filter_to_ZDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_ZDR");
    tt->descr = tdrpStrDup("Option to filter ZDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range, and affects both rain rate and PID.");
    tt->val_offset = (char *) &apply_median_filter_to_ZDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'ZDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ZDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for ZDR - gates.");
    tt->help = tdrpStrDup("See 'appply_median_filter_to_ZDR'");
    tt->val_offset = (char *) &ZDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'apply_median_filter_to_LDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_LDR");
    tt->descr = tdrpStrDup("Option to filter LDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range, and affects PID only.");
    tt->val_offset = (char *) &apply_median_filter_to_LDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'LDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("LDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for LDR - gates.");
    tt->help = tdrpStrDup("See 'appply_median_filter_to_LDR'");
    tt->val_offset = (char *) &LDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'apply_median_filter_to_RHOHV'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_RHOHV");
    tt->descr = tdrpStrDup("Option to filter RHOHV with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range, and affects PID only.");
    tt->val_offset = (char *) &apply_median_filter_to_RHOHV - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'RHOHV_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("RHOHV_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for RHOHV - gates.");
    tt->help = tdrpStrDup("See 'appply_median_filter_to_RHOHV'");
    tt->val_offset = (char *) &RHOHV_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'ngates_for_sdev'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ngates_for_sdev");
    tt->descr = tdrpStrDup("Number of gates for computing standard deviations.");
    tt->help = tdrpStrDup("This applies to computing the standard deviation of zdr and phidp, for PID.");
    tt->val_offset = (char *) &ngates_for_sdev - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("SMOOTHING FIELDS FOR KDP");
    tt->comment_text = tdrpStrDup("PHIDP can have spikes in it. This section gives you the option of smoothing the fields in range by applying a median filter before computing KDP. This only applies to KDP.");
    tt++;
    
    // Parameter 'apply_median_filter_to_PHIDP'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_PHIDP");
    tt->descr = tdrpStrDup("Option to filter PHIDP with median filter.");
    tt->help = tdrpStrDup("The filter is applied in range.");
    tt->val_offset = (char *) &apply_median_filter_to_PHIDP - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PHIDP_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PHIDP_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for PHIDP - gates.");
    tt->help = tdrpStrDup("See 'appply_median_filter_to_PHIDP'");
    tt->val_offset = (char *) &PHIDP_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("COMPUTING KDP");
    tt->comment_text = tdrpStrDup("Parameters for computing KDP.");
    tt++;
    
    // Parameter 'KDP_fir_filter_len'
    // ctype is '_fir_filter_len_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("KDP_fir_filter_len");
    tt->descr = tdrpStrDup("Filter length for the FIR filter for PHIDP (gates)");
    tt->help = tdrpStrDup("When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.");
    tt->val_offset = (char *) &KDP_fir_filter_len - &_start_;
    tt->enum_def.name = tdrpStrDup("fir_filter_len_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FIR_LEN_125");
      tt->enum_def.fields[0].val = FIR_LEN_125;
      tt->enum_def.fields[1].name = tdrpStrDup("FIR_LEN_30");
      tt->enum_def.fields[1].val = FIR_LEN_30;
      tt->enum_def.fields[2].name = tdrpStrDup("FIR_LEN_20");
      tt->enum_def.fields[2].val = FIR_LEN_20;
      tt->enum_def.fields[3].name = tdrpStrDup("FIR_LEN_10");
      tt->enum_def.fields[3].val = FIR_LEN_10;
    tt->single_val.e = FIR_LEN_20;
    tt++;
    
    // Parameter 'KDP_phidp_difference_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_difference_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for difference of phidp.");
    tt->help = tdrpStrDup("This is used to test the difference between the unfolded phidp value and the filtered phidp value. If the difference exceeds this value, we use the original value instead of the filtered value. Applies to computation of KDP only");
    tt->val_offset = (char *) &KDP_phidp_difference_threshold - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'KDP_phidp_sdev_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_sdev_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of phidp in range.");
    tt->help = tdrpStrDup("The sdev of phidp is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_sdev_threshold - &_start_;
    tt->single_val.d = 12;
    tt++;
    
    // Parameter 'KDP_zdr_sdev_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_zdr_sdev_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of zdr in range.");
    tt->help = tdrpStrDup("The sdev of zdr is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_zdr_sdev_threshold - &_start_;
    tt->single_val.d = 1.8;
    tt++;
    
    // Parameter 'KDP_rhohv_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_rhohv_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for rhohv.");
    tt->help = tdrpStrDup("rhohv is a good test for weather. If rhohv is greater than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_rhohv_threshold - &_start_;
    tt->single_val.d = 0.75;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("SMOOTHING OUTPUT PID");
    tt->comment_text = tdrpStrDup("This section gives you the option of smoothing the output pid field in range by applying a median filter.");
    tt++;
    
    // Parameter 'apply_median_filter_to_PID'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_PID");
    tt->descr = tdrpStrDup("Option to filter PID with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range, and affects both rain rate and PID.");
    tt->val_offset = (char *) &apply_median_filter_to_PID - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for PID - gates.");
    tt->help = tdrpStrDup("See 'appply_median_filter_to_PID'");
    tt->val_offset = (char *) &PID_median_filter_len - &_start_;
    tt->single_val.i = 7;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("CENSORING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'min_DBZ_for_KDP_rates'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_DBZ_for_KDP_rates");
    tt->descr = tdrpStrDup("KDP-based rates will be set to 0 for gates with DBZ values below this threshold.");
    tt->help = tdrpStrDup("KDP can be a noisy field, which can lead to large KDP-based estimates even in low reflectivity areas. Use of this threshold prevents high KDP estimates in low reflectivity regions.");
    tt->val_offset = (char *) &min_DBZ_for_KDP_rates - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'min_valid_rate'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_valid_rate");
    tt->descr = tdrpStrDup("Minimum valid precip rate (mm/hr).");
    tt->help = tdrpStrDup("If any computed rate is less than this value, it is set to 0.");
    tt->val_offset = (char *) &min_valid_rate - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("PRECIP COMPUTATIONS");
    tt->comment_text = tdrpStrDup("Coefficients for the precip equations.");
    tt++;
    
    // Parameter 'PRECIP_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_snr_threshold");
    tt->descr = tdrpStrDup("Minimum SNR for valid PID.");
    tt->help = tdrpStrDup("If the SNR at a gate is below this, the PID is censored.");
    tt->val_offset = (char *) &PRECIP_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_ZH");
    tt->comment_text = tdrpStrDup("RATE_ZH = zh_aa * (ZH ** zh_bb)");
    tt++;
    
    // Parameter 'zh_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zh_aa");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_ZH.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zh_aa - &_start_;
    tt->single_val.d = 0.0262;
    tt++;
    
    // Parameter 'zh_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zh_bb");
    tt->descr = tdrpStrDup("Exponent for PRECIP_RATE_ZH.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zh_bb - &_start_;
    tt->single_val.d = 0.687;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_SNOW_ZH");
    tt->comment_text = tdrpStrDup("RATE_SNOW_ZH = zh_aa_snow * (ZH ** zh_bb_snow)");
    tt++;
    
    // Parameter 'zh_aa_snow'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zh_aa_snow");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_ZH in SNOW.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zh_aa_snow - &_start_;
    tt->single_val.d = 0.0365;
    tt++;
    
    // Parameter 'zh_bb_snow'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zh_bb_snow");
    tt->descr = tdrpStrDup("Exponent for PRECIP_RATE_ZH in SNOW.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zh_bb_snow - &_start_;
    tt->single_val.d = 0.625;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_Z_ZDR");
    tt->comment_text = tdrpStrDup("RATE_Z_ZDR = zzdr_aa * (ZH ** zzdr_bb) * (ZDR ** zzdr_cc)");
    tt++;
    
    // Parameter 'zzdr_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zzdr_aa");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_ZZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zzdr_aa - &_start_;
    tt->single_val.d = 0.00786;
    tt++;
    
    // Parameter 'zzdr_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zzdr_bb");
    tt->descr = tdrpStrDup("ZH exponent for PRECIP_RATE_ZZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zzdr_bb - &_start_;
    tt->single_val.d = 0.967;
    tt++;
    
    // Parameter 'zzdr_cc'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zzdr_cc");
    tt->descr = tdrpStrDup("ZDR exponent for PRECIP_RATE_ZZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zzdr_cc - &_start_;
    tt->single_val.d = -4.98;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_KDP");
    tt->comment_text = tdrpStrDup("RATE_KDP = sign(KDP) * kdp_aa * (|KDP| ** kdp_bb)");
    tt++;
    
    // Parameter 'kdp_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdp_aa");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_KDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdp_aa - &_start_;
    tt->single_val.d = 54.3;
    tt++;
    
    // Parameter 'kdp_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdp_bb");
    tt->descr = tdrpStrDup("Exponent for PRECIP_RATE_KDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdp_bb - &_start_;
    tt->single_val.d = 0.806;
    tt++;
    
    // Parameter 'Comment 16'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 16");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_KDP_ZDR");
    tt->comment_text = tdrpStrDup("RATE_KDP_ZDR = sign(KDP) * kdpzdr_aa * (|KDP| ** kdpzdr_bb) * (ZDR ** kdpzdr_cc)");
    tt++;
    
    // Parameter 'kdpzdr_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdpzdr_aa");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_KDP_ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdpzdr_aa - &_start_;
    tt->single_val.d = 136;
    tt++;
    
    // Parameter 'kdpzdr_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdpzdr_bb");
    tt->descr = tdrpStrDup("KDP exponent for PRECIP_RATE_KDP_ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdpzdr_bb - &_start_;
    tt->single_val.d = 0.968;
    tt++;
    
    // Parameter 'kdpzdr_cc'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdpzdr_cc");
    tt->descr = tdrpStrDup("ZDR exponent for PRECIP_RATE_KDP_ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdpzdr_cc - &_start_;
    tt->single_val.d = -2.86;
    tt++;
    
    // Parameter 'Comment 17'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 17");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_HYBRID");
    tt->comment_text = tdrpStrDup("The HYBRID rate is based on the PID and the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Hybrid et al, JTech, Vol 26, 2009, 2107 - 2122.\n\t if HAIL is present\n\t   use RATE_KDP\n\t else if in SNOW/ICE\n\t   use RATE_ZH_SNOW\n\t else if in MIXED PRECIP (brightband)\n\t   use RATE_ZZDR\n\t else if in RAIN do the following:\n\t   if DBZ > threshold and KDP > threshold\n\t     RATE_HYBRID = RATE_KDP\n\t   else\n\t     if ZDR >= THRESHOLD\n\t       RATE_HYBRID = RATE_ZZDR\n\t     else\n\t       RATE_HYBRID = RATE_Z\n");
    tt++;
    
    // Parameter 'hybrid_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hybrid_dbz_threshold");
    tt->descr = tdrpStrDup("Units are dBZ.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hybrid_dbz_threshold - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'hybrid_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hybrid_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hybrid_kdp_threshold - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'hybrid_zdr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hybrid_zdr_threshold");
    tt->descr = tdrpStrDup("Units are dB.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hybrid_zdr_threshold - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'Comment 18'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 18");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_HIDRO");
    tt->comment_text = tdrpStrDup("The HIDRO rate is based on the CSU-HIDRO algorithm. See 'A New Dual-Polarization Radar Rainfall Algorithm: Application to Colorado Precipition Events', Cifelli et al, JTech, Vol 28, 2011, 352 - 364. NOTE - this algorithm is generally only applied to liquid and mixed-phase precip, so you need to run PID for this to work as intended.\n\t For ice:\n\t   RATE_HIDRO = MISSING\n\t For mixed_phase:\n\t   if KDP >= threshold\n\t     RATE_HIDRO = RATE_KDP\n\t   else\n\t     RATE_HIDRO = MISSING\n\t For liquid_phase:\n\t   if KDP >= threshold and DBZ >= threhold\n\t     if ZDR >= THRESHOLD\n\t       RATE_HIDRO = RATE_KDPZDR\n\t     else\n\t       RATE_HIDRO = RATE_KDP\n\t   else\n\t     if ZDR >= THRESHOLD\n\t       RATE_HIDRO = RATE_Z\n\t     else\n\t       RATE_HIDRO = RATE_ZZDR\n");
    tt++;
    
    // Parameter 'hidro_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hidro_dbz_threshold");
    tt->descr = tdrpStrDup("Units are dBZ.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hidro_dbz_threshold - &_start_;
    tt->single_val.d = 38;
    tt++;
    
    // Parameter 'hidro_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hidro_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hidro_kdp_threshold - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'hidro_zdr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hidro_zdr_threshold");
    tt->descr = tdrpStrDup("Units are dB.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hidro_zdr_threshold - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'Comment 19'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 19");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_BRINGI");
    tt->comment_text = tdrpStrDup("The BRINGI rate is based on the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Bringi et al, JTech, Vol 26, 2009, 2107 - 2122.\n\t if DBZ > threshold and KDP > threshold\n\t   RATE_BRINGI = RATE_KDP\n\t else\n\t   if ZDR >= THRESHOLD\n\t     RATE_BRINGI = RATE_ZZDR\n\t   else\n\t     RATE_BRINGI = RATE_Z\n");
    tt++;
    
    // Parameter 'bringi_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bringi_dbz_threshold");
    tt->descr = tdrpStrDup("Units are dBZ.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &bringi_dbz_threshold - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'bringi_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bringi_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &bringi_kdp_threshold - &_start_;
    tt->single_val.d = 0.15;
    tt++;
    
    // Parameter 'bringi_zdr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bringi_zdr_threshold");
    tt->descr = tdrpStrDup("Units are dB.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &bringi_zdr_threshold - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'Comment 20'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 20");
    tt->comment_hdr = tdrpStrDup("PARTICLE ID COMPUTATIONS - PID");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'pid_thresholds_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("pid_thresholds_file_path");
    tt->descr = tdrpStrDup("File path for fuzzy logic thresholds for PID.");
    tt->help = tdrpStrDup("This file contains the thresholds and weights for computing particle ID.");
    tt->val_offset = (char *) &pid_thresholds_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./s_band_pid_input_steraotables27.input");
    tt++;
    
    // Parameter 'PID_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_snr_threshold");
    tt->descr = tdrpStrDup("Minimum SNR for valid PID.");
    tt->help = tdrpStrDup("If the SNR at a gate is below this, the PID is censored.");
    tt->val_offset = (char *) &PID_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'PID_snr_upper_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_snr_upper_threshold");
    tt->descr = tdrpStrDup("Maximum SNR for valid PID.");
    tt->help = tdrpStrDup("If the SNR at a gate is above this value, the PID will be set to SATURATED_SNR = 18.");
    tt->val_offset = (char *) &PID_snr_upper_threshold - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'PID_min_valid_interest'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_min_valid_interest");
    tt->descr = tdrpStrDup("Minimum valid interest value for identifying a particle.");
    tt->help = tdrpStrDup("If the computed interest value is below this, the PID is set to missing.");
    tt->val_offset = (char *) &PID_min_valid_interest - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'Comment 21'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 21");
    tt->comment_hdr = tdrpStrDup("SETTING PSEUDO EARTH RADIUS RATIO FOR HEIGHT COMPUTATIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_standard_pseudo_earth_radius'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_standard_pseudo_earth_radius");
    tt->descr = tdrpStrDup("Option to override the standard 4/3 earth radius model for refraction.");
    tt->help = tdrpStrDup("If true, the standard 4/3 earth radius will be overridden. The US NWS NEXRAD system uses 1.21 instead of 1.333.");
    tt->val_offset = (char *) &override_standard_pseudo_earth_radius - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'pseudo_earth_radius_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("pseudo_earth_radius_ratio");
    tt->descr = tdrpStrDup("Ratio for computing the pseudo earth radius for beam height computations.");
    tt->help = tdrpStrDup("For standard refraction this is 4/3. For super refraction it will be less than 4.3, and for sub-refraction it will be greater. NEXRAD uses 1.21.");
    tt->val_offset = (char *) &pseudo_earth_radius_ratio - &_start_;
    tt->single_val.d = 1.33333;
    tt++;
    
    // Parameter 'Comment 22'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 22");
    tt->comment_hdr = tdrpStrDup("SOUNDING INPUT FOR PID temperatures - OPTIONAL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_soundings_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_soundings_from_spdb");
    tt->descr = tdrpStrDup("Option to read sounding data from SPDB.");
    tt->help = tdrpStrDup("If TRUE, the program will read the closest (in time) available sounding from an SPDB data base. The temperature profile from the sounding will be used to override the temperature profile in the PID thresholds config file");
    tt->val_offset = (char *) &use_soundings_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sounding_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_spdb_url");
    tt->descr = tdrpStrDup("SPDB URL for sounding data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sounding_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/soundings");
    tt++;
    
    // Parameter 'sounding_search_time_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sounding_search_time_margin_secs");
    tt->descr = tdrpStrDup("Time margin for retrieving sounding, in secs.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &sounding_search_time_margin_secs - &_start_;
    tt->single_val.i = 86400;
    tt++;
    
    // Parameter 'sounding_location_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_location_name");
    tt->descr = tdrpStrDup("Name of sounding location.");
    tt->help = tdrpStrDup("If set, we request a profile just for that sounding. If empty, all soundings in the data base are considered valid.");
    tt->val_offset = (char *) &sounding_location_name - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'sounding_check_pressure_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_check_pressure_range");
    tt->descr = tdrpStrDup("Option to check that pressure covers the required range.");
    tt->help = tdrpStrDup("If TRUE, we will check that pressure range in the sounding meets or exceeds the min and max specified.");
    tt->val_offset = (char *) &sounding_check_pressure_range - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_required_pressure_range_hpa'
    // ctype is '_data_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sounding_required_pressure_range_hpa");
    tt->descr = tdrpStrDup("Required pressure range for sounding to be valid (hPa)");
    tt->help = tdrpStrDup("This is used to provide a quality check on the sounding. If the pressure data does not fully cover this range, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &sounding_required_pressure_range_hpa - &_start_;
    tt->struct_def.name = tdrpStrDup("data_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_val");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &sounding_required_pressure_range_hpa.min_val - (char *) &sounding_required_pressure_range_hpa;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_val");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &sounding_required_pressure_range_hpa.max_val - (char *) &sounding_required_pressure_range_hpa;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 300;
      tt->struct_vals[1].d = 950;
    tt++;
    
    // Parameter 'sounding_check_height_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_check_height_range");
    tt->descr = tdrpStrDup("Option to check that height covers the required range.");
    tt->help = tdrpStrDup("If TRUE, we will check that height range in the sounding meets or exceeds the min and max specified.");
    tt->val_offset = (char *) &sounding_check_height_range - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_required_height_range_m'
    // ctype is '_data_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sounding_required_height_range_m");
    tt->descr = tdrpStrDup("Required height range for sounding to be valid (m)");
    tt->help = tdrpStrDup("This is used to provide a quality check on the sounding. If the height data does not fully cover this range, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &sounding_required_height_range_m - &_start_;
    tt->struct_def.name = tdrpStrDup("data_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_val");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &sounding_required_height_range_m.min_val - (char *) &sounding_required_height_range_m;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_val");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &sounding_required_height_range_m.max_val - (char *) &sounding_required_height_range_m;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 500;
      tt->struct_vals[1].d = 15000;
    tt++;
    
    // Parameter 'sounding_check_pressure_monotonically_decreasing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_check_pressure_monotonically_decreasing");
    tt->descr = tdrpStrDup("Option to check that pressure decreases monotonically.");
    tt->help = tdrpStrDup("If TRUE, we will check that pressure decreases monotonically. If not, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &sounding_check_pressure_monotonically_decreasing - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_height_correction_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sounding_height_correction_km");
    tt->descr = tdrpStrDup("Correction to the heights read in with the sounding (km).");
    tt->help = tdrpStrDup("This correction is ADDED to the heights read in. So if the freezing level seems low, the correction should be positive. If the freezing level appears high, it should be negative.");
    tt->val_offset = (char *) &sounding_height_correction_km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'sounding_use_wet_bulb_temp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_use_wet_bulb_temp");
    tt->descr = tdrpStrDup("Option to use wet bulb temperature profile.");
    tt->help = tdrpStrDup("If TRUE, we use the wet bulb temperature profile from the sounding instead of the dry bulb. This is thought to more closely track the temperature of melting ice.");
    tt->val_offset = (char *) &sounding_use_wet_bulb_temp - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 23'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 23");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_url");
    tt->descr = tdrpStrDup("Output URL for derived data via DsRadar FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmq/derived");
    tt++;
    
    // Parameter 'output_fmq_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_size");
    tt->descr = tdrpStrDup("Size of output FMQ, in bytes.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &output_fmq_size - &_start_;
    tt->single_val.i = 50000000;
    tt++;
    
    // Parameter 'output_fmq_nslots'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_nslots");
    tt->descr = tdrpStrDup("Number of slots in output FMQ.");
    tt->help = tdrpStrDup("The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.");
    tt->val_offset = (char *) &output_fmq_nslots - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'output_fmq_compress'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_compress");
    tt->descr = tdrpStrDup("FMQ compression option.");
    tt->help = tdrpStrDup("If TRUE FMQ messages are compressed.");
    tt->val_offset = (char *) &output_fmq_compress - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_blocking'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_blocking");
    tt->descr = tdrpStrDup("Option to set up the output FMQ as blocking.");
    tt->help = tdrpStrDup("If TRUE, the output FMQ will be set up for blocking operation. If the FMQ becomes full, this app will then block until there is space for more data. WARNING - only use this with a single reader.");
    tt->val_offset = (char *) &write_blocking - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Indicate which fields should be written to the Dsr FMQ.");
    tt->help = tdrpStrDup("Choose the ID from the list. The name and units can be set however the user prefers. The scale and bias are applied to the floating point value to compute the 16-bit output value for the FMQ.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 33;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("output_field_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->id - (char *) _output_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("output_field_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 43;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("SNR");
        tt->struct_def.fields[0].enum_def.fields[0].val = SNR;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("DBZ");
        tt->struct_def.fields[0].enum_def.fields[1].val = DBZ;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("VEL");
        tt->struct_def.fields[0].enum_def.fields[2].val = VEL;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("WIDTH");
        tt->struct_def.fields[0].enum_def.fields[3].val = WIDTH;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("ZDR");
        tt->struct_def.fields[0].enum_def.fields[4].val = ZDR;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("LDR");
        tt->struct_def.fields[0].enum_def.fields[5].val = LDR;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("PHIDP");
        tt->struct_def.fields[0].enum_def.fields[6].val = PHIDP;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("RHOHV");
        tt->struct_def.fields[0].enum_def.fields[7].val = RHOHV;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("KDP");
        tt->struct_def.fields[0].enum_def.fields[8].val = KDP;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("DBZ_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[9].val = DBZ_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("ZDR_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[10].val = ZDR_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("RHOHV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[11].val = RHOHV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("SNR_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[12].val = SNR_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("PHIDP_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[13].val = PHIDP_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("PHIDP_FILT_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[14].val = PHIDP_FILT_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("SDPHIDP_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[15].val = SDPHIDP_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("SDZDR_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[16].val = SDZDR_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("PRECIP_RATE_ZH");
        tt->struct_def.fields[0].enum_def.fields[17].val = PRECIP_RATE_ZH;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("PRECIP_RATE_ZH_SNOW");
        tt->struct_def.fields[0].enum_def.fields[18].val = PRECIP_RATE_ZH_SNOW;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("PRECIP_RATE_Z_ZDR");
        tt->struct_def.fields[0].enum_def.fields[19].val = PRECIP_RATE_Z_ZDR;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("PRECIP_RATE_KDP");
        tt->struct_def.fields[0].enum_def.fields[20].val = PRECIP_RATE_KDP;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("PRECIP_RATE_KDP_ZDR");
        tt->struct_def.fields[0].enum_def.fields[21].val = PRECIP_RATE_KDP_ZDR;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("PRECIP_RATE_HYBRID");
        tt->struct_def.fields[0].enum_def.fields[22].val = PRECIP_RATE_HYBRID;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("PRECIP_RATE_PID");
        tt->struct_def.fields[0].enum_def.fields[23].val = PRECIP_RATE_PID;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("PRECIP_RATE_HIDRO");
        tt->struct_def.fields[0].enum_def.fields[24].val = PRECIP_RATE_HIDRO;
        tt->struct_def.fields[0].enum_def.fields[25].name = tdrpStrDup("PRECIP_RATE_BRINGI");
        tt->struct_def.fields[0].enum_def.fields[25].val = PRECIP_RATE_BRINGI;
        tt->struct_def.fields[0].enum_def.fields[26].name = tdrpStrDup("DBZ_FOR_RATE");
        tt->struct_def.fields[0].enum_def.fields[26].val = DBZ_FOR_RATE;
        tt->struct_def.fields[0].enum_def.fields[27].name = tdrpStrDup("ZDR_FOR_RATE");
        tt->struct_def.fields[0].enum_def.fields[27].val = ZDR_FOR_RATE;
        tt->struct_def.fields[0].enum_def.fields[28].name = tdrpStrDup("KDP_FOR_RATE");
        tt->struct_def.fields[0].enum_def.fields[28].val = KDP_FOR_RATE;
        tt->struct_def.fields[0].enum_def.fields[29].name = tdrpStrDup("PARTICLE_ID");
        tt->struct_def.fields[0].enum_def.fields[29].val = PARTICLE_ID;
        tt->struct_def.fields[0].enum_def.fields[30].name = tdrpStrDup("PID_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[30].val = PID_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[31].name = tdrpStrDup("PARTICLE_ID2");
        tt->struct_def.fields[0].enum_def.fields[31].val = PARTICLE_ID2;
        tt->struct_def.fields[0].enum_def.fields[32].name = tdrpStrDup("PID_INTEREST2");
        tt->struct_def.fields[0].enum_def.fields[32].val = PID_INTEREST2;
        tt->struct_def.fields[0].enum_def.fields[33].name = tdrpStrDup("PID_CONFIDENCE");
        tt->struct_def.fields[0].enum_def.fields[33].val = PID_CONFIDENCE;
        tt->struct_def.fields[0].enum_def.fields[34].name = tdrpStrDup("DBZ_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[34].val = DBZ_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[35].name = tdrpStrDup("ZDR_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[35].val = ZDR_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[36].name = tdrpStrDup("LDR_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[36].val = LDR_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[37].name = tdrpStrDup("PHIDP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[37].val = PHIDP_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[38].name = tdrpStrDup("RHOHV_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[38].val = RHOHV_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[39].name = tdrpStrDup("KDP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[39].val = KDP_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[40].name = tdrpStrDup("SDZDR_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[40].val = SDZDR_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[41].name = tdrpStrDup("SDPHIDP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[41].val = SDPHIDP_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[42].name = tdrpStrDup("TEMP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[42].val = TEMP_FOR_PID;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->units - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("scale");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->scale - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("bias");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->bias - (char *) _output_fields;
    tt->n_struct_vals = 165;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = KDP;
      tt->struct_vals[1].s = tdrpStrDup("KDP");
      tt->struct_vals[2].s = tdrpStrDup("deg/km");
      tt->struct_vals[3].d = 0.001;
      tt->struct_vals[4].d = -32;
      tt->struct_vals[5].e = DBZ_FOR_KDP;
      tt->struct_vals[6].s = tdrpStrDup("DBZ_FOR_KDP");
      tt->struct_vals[7].s = tdrpStrDup("dBZ");
      tt->struct_vals[8].d = 0.01;
      tt->struct_vals[9].d = -320;
      tt->struct_vals[10].e = ZDR_FOR_KDP;
      tt->struct_vals[11].s = tdrpStrDup("ZDR_FOR_KDP");
      tt->struct_vals[12].s = tdrpStrDup("dB");
      tt->struct_vals[13].d = 0.001;
      tt->struct_vals[14].d = -32;
      tt->struct_vals[15].e = RHOHV_FOR_KDP;
      tt->struct_vals[16].s = tdrpStrDup("RHOHV_FOR_KDP");
      tt->struct_vals[17].s = tdrpStrDup("");
      tt->struct_vals[18].d = 0.0001;
      tt->struct_vals[19].d = -1;
      tt->struct_vals[20].e = SNR_FOR_KDP;
      tt->struct_vals[21].s = tdrpStrDup("SNR_FOR_KDP");
      tt->struct_vals[22].s = tdrpStrDup("dB");
      tt->struct_vals[23].d = 0.01;
      tt->struct_vals[24].d = -320;
      tt->struct_vals[25].e = PHIDP_FOR_KDP;
      tt->struct_vals[26].s = tdrpStrDup("PHIDP_FOR_KDP");
      tt->struct_vals[27].s = tdrpStrDup("deg");
      tt->struct_vals[28].d = 0.06;
      tt->struct_vals[29].d = -200;
      tt->struct_vals[30].e = PHIDP_FOR_KDP;
      tt->struct_vals[31].s = tdrpStrDup("PHIDP_FOR_KDP");
      tt->struct_vals[32].s = tdrpStrDup("deg");
      tt->struct_vals[33].d = 0.06;
      tt->struct_vals[34].d = -200;
      tt->struct_vals[35].e = PHIDP_FILT_FOR_KDP;
      tt->struct_vals[36].s = tdrpStrDup("PHIDP_FILT_FOR_KDP");
      tt->struct_vals[37].s = tdrpStrDup("deg");
      tt->struct_vals[38].d = 0.06;
      tt->struct_vals[39].d = -200;
      tt->struct_vals[40].e = SDPHIDP_FOR_KDP;
      tt->struct_vals[41].s = tdrpStrDup("SDPHIDP_FOR_KDP");
      tt->struct_vals[42].s = tdrpStrDup("deg");
      tt->struct_vals[43].d = 0.001;
      tt->struct_vals[44].d = -1;
      tt->struct_vals[45].e = SDZDR_FOR_KDP;
      tt->struct_vals[46].s = tdrpStrDup("SDZDR_FOR_KDP");
      tt->struct_vals[47].s = tdrpStrDup("deg");
      tt->struct_vals[48].d = 0.001;
      tt->struct_vals[49].d = -1;
      tt->struct_vals[50].e = PRECIP_RATE_ZH;
      tt->struct_vals[51].s = tdrpStrDup("RATE_ZH");
      tt->struct_vals[52].s = tdrpStrDup("mm/hr");
      tt->struct_vals[53].d = 0.01;
      tt->struct_vals[54].d = 0;
      tt->struct_vals[55].e = PRECIP_RATE_Z_ZDR;
      tt->struct_vals[56].s = tdrpStrDup("RATE_Z_ZDR");
      tt->struct_vals[57].s = tdrpStrDup("mm/hr");
      tt->struct_vals[58].d = 0.01;
      tt->struct_vals[59].d = 0;
      tt->struct_vals[60].e = PRECIP_RATE_KDP;
      tt->struct_vals[61].s = tdrpStrDup("RATE_KDP");
      tt->struct_vals[62].s = tdrpStrDup("mm/hr");
      tt->struct_vals[63].d = 0.01;
      tt->struct_vals[64].d = 0;
      tt->struct_vals[65].e = PRECIP_RATE_KDP_ZDR;
      tt->struct_vals[66].s = tdrpStrDup("RATE_KDP_ZDR");
      tt->struct_vals[67].s = tdrpStrDup("mm/hr");
      tt->struct_vals[68].d = 0.01;
      tt->struct_vals[69].d = 0;
      tt->struct_vals[70].e = PRECIP_RATE_HYBRID;
      tt->struct_vals[71].s = tdrpStrDup("RATE_HYBRID");
      tt->struct_vals[72].s = tdrpStrDup("mm/hr");
      tt->struct_vals[73].d = 0.01;
      tt->struct_vals[74].d = 0;
      tt->struct_vals[75].e = PRECIP_RATE_PID;
      tt->struct_vals[76].s = tdrpStrDup("RATE_PID");
      tt->struct_vals[77].s = tdrpStrDup("mm/hr");
      tt->struct_vals[78].d = 0.01;
      tt->struct_vals[79].d = 0;
      tt->struct_vals[80].e = DBZ_FOR_RATE;
      tt->struct_vals[81].s = tdrpStrDup("DBZ_FOR_RATE");
      tt->struct_vals[82].s = tdrpStrDup("dBZ");
      tt->struct_vals[83].d = 0.01;
      tt->struct_vals[84].d = -320;
      tt->struct_vals[85].e = ZDR_FOR_RATE;
      tt->struct_vals[86].s = tdrpStrDup("ZDR_FOR_RATE");
      tt->struct_vals[87].s = tdrpStrDup("dB");
      tt->struct_vals[88].d = 0.001;
      tt->struct_vals[89].d = -32;
      tt->struct_vals[90].e = KDP_FOR_RATE;
      tt->struct_vals[91].s = tdrpStrDup("KDP_FOR_RATE");
      tt->struct_vals[92].s = tdrpStrDup("deg/km");
      tt->struct_vals[93].d = 0.001;
      tt->struct_vals[94].d = -32;
      tt->struct_vals[95].e = PARTICLE_ID;
      tt->struct_vals[96].s = tdrpStrDup("PID");
      tt->struct_vals[97].s = tdrpStrDup("");
      tt->struct_vals[98].d = 1;
      tt->struct_vals[99].d = 0;
      tt->struct_vals[100].e = PID_INTEREST;
      tt->struct_vals[101].s = tdrpStrDup("PidInterest");
      tt->struct_vals[102].s = tdrpStrDup("");
      tt->struct_vals[103].d = 0.0001;
      tt->struct_vals[104].d = -1;
      tt->struct_vals[105].e = PARTICLE_ID2;
      tt->struct_vals[106].s = tdrpStrDup("PID2");
      tt->struct_vals[107].s = tdrpStrDup("");
      tt->struct_vals[108].d = 1;
      tt->struct_vals[109].d = 0;
      tt->struct_vals[110].e = PID_INTEREST2;
      tt->struct_vals[111].s = tdrpStrDup("PidInterest2");
      tt->struct_vals[112].s = tdrpStrDup("");
      tt->struct_vals[113].d = 0.0001;
      tt->struct_vals[114].d = -1;
      tt->struct_vals[115].e = PID_CONFIDENCE;
      tt->struct_vals[116].s = tdrpStrDup("PidConfidence");
      tt->struct_vals[117].s = tdrpStrDup("");
      tt->struct_vals[118].d = 0.0001;
      tt->struct_vals[119].d = -1;
      tt->struct_vals[120].e = DBZ_FOR_PID;
      tt->struct_vals[121].s = tdrpStrDup("DBZ_FOR_PID");
      tt->struct_vals[122].s = tdrpStrDup("dBZ");
      tt->struct_vals[123].d = 0.01;
      tt->struct_vals[124].d = -320;
      tt->struct_vals[125].e = ZDR_FOR_PID;
      tt->struct_vals[126].s = tdrpStrDup("ZDR_FOR_PID");
      tt->struct_vals[127].s = tdrpStrDup("dB");
      tt->struct_vals[128].d = 0.001;
      tt->struct_vals[129].d = -32;
      tt->struct_vals[130].e = LDR_FOR_PID;
      tt->struct_vals[131].s = tdrpStrDup("LDR_FOR_PID");
      tt->struct_vals[132].s = tdrpStrDup("dB");
      tt->struct_vals[133].d = 0.001;
      tt->struct_vals[134].d = -32;
      tt->struct_vals[135].e = PHIDP_FOR_PID;
      tt->struct_vals[136].s = tdrpStrDup("PHIDP_FOR_PID");
      tt->struct_vals[137].s = tdrpStrDup("deg");
      tt->struct_vals[138].d = 0.06;
      tt->struct_vals[139].d = -200;
      tt->struct_vals[140].e = RHOHV_FOR_PID;
      tt->struct_vals[141].s = tdrpStrDup("RHOHV_FOR_PID");
      tt->struct_vals[142].s = tdrpStrDup("");
      tt->struct_vals[143].d = 0.0001;
      tt->struct_vals[144].d = -1;
      tt->struct_vals[145].e = KDP_FOR_PID;
      tt->struct_vals[146].s = tdrpStrDup("KDP_FOR_PID");
      tt->struct_vals[147].s = tdrpStrDup("deg/km");
      tt->struct_vals[148].d = 0.001;
      tt->struct_vals[149].d = -32;
      tt->struct_vals[150].e = SDZDR_FOR_PID;
      tt->struct_vals[151].s = tdrpStrDup("SDZDR_FOR_PID");
      tt->struct_vals[152].s = tdrpStrDup("dB");
      tt->struct_vals[153].d = 0.001;
      tt->struct_vals[154].d = -1;
      tt->struct_vals[155].e = SDPHIDP_FOR_PID;
      tt->struct_vals[156].s = tdrpStrDup("SDPHIDP_FOR_PID");
      tt->struct_vals[157].s = tdrpStrDup("deg");
      tt->struct_vals[158].d = 0.001;
      tt->struct_vals[159].d = -1;
      tt->struct_vals[160].e = TEMP_FOR_PID;
      tt->struct_vals[161].s = tdrpStrDup("TEMP_FOR_PID");
      tt->struct_vals[162].s = tdrpStrDup("C");
      tt->struct_vals[163].d = 0.01;
      tt->struct_vals[164].d = -100;
    tt++;
    
    // Parameter 'output_particle_interest_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_particle_interest_fields");
    tt->descr = tdrpStrDup("Option to output the individual interest fields.");
    tt->help = tdrpStrDup("If TRUE, the interest field for each particle type will be written to the output FMQ, in addition to the list in 'output_fields'.");
    tt->val_offset = (char *) &output_particle_interest_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'data_mapper_report_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("data_mapper_report_interval");
    tt->descr = tdrpStrDup("Number of seconds between reports to DataMapper.");
    tt->help = tdrpStrDup("If > 0, the program will register with the DataMapper when the output FMQ is written to. If <= 0, registration will not be performed.");
    tt->val_offset = (char *) &data_mapper_report_interval - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
