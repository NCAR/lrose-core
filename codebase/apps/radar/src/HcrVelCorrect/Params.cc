/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program HcrVelCorrect
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("HcrVelCorrect reads in HCR moments, computes the apparent velocity of the ground echo, filters the apparent velocity in time to remove spurious spikes, and then corrects the weather echo velocity using the filtered ground velocity as the correction to be applied.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'write_results_to_stdout'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_results_to_stdout");
    tt->descr = tdrpStrDup("Option to write filtered data to stdout.");
    tt->help = tdrpStrDup("If TRUE, the filtered data will be written to stdout in a manner suitable for plotting via gnuplot and python.");
    tt->val_offset = (char *) &write_results_to_stdout - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register this process with the process mapper (procmap).");
    tt->help = tdrpStrDup("If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("\nREALTIME: wait for a new input file. Expects latest_data_info to be available. \n\nARCHIVE: move through the data between the start and end times set on the command line. \n\nFILELIST: move through the list of file names specified on the command line. \nPaths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory. REALTIME, ARCHIVE and FILELIST modes .");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'wait_between_checks'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wait_between_checks");
    tt->descr = tdrpStrDup("Sleep time between checking for input data (secs).");
    tt->help = tdrpStrDup("REALTIME mode only");
    tt->val_offset = (char *) &wait_between_checks - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("COMPUTING THE SURFACE ECHO VELOCITY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'dbz_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dbz_field_name");
    tt->descr = tdrpStrDup("Name of field used to identify the surface from the data.");
    tt->help = tdrpStrDup("The surface will be identified at the gate with the maximum value in this field.");
    tt->val_offset = (char *) &dbz_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'min_range_to_surface_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_range_to_surface_km");
    tt->descr = tdrpStrDup("Minumum range to the surface (km).");
    tt->help = tdrpStrDup("We will search for the surface echo in the gates beyound this range.");
    tt->val_offset = (char *) &min_range_to_surface_km - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'max_surface_height_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_surface_height_km");
    tt->descr = tdrpStrDup("Max expected height of the terrain (km).");
    tt->help = tdrpStrDup("We ignore gates above this maximum, since they cannot be at the surface.");
    tt->val_offset = (char *) &max_surface_height_km - &_start_;
    tt->single_val.d = 9;
    tt++;
    
    // Parameter 'min_dbz_for_surface_echo'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_dbz_for_surface_echo");
    tt->descr = tdrpStrDup("Minumum dbz value for a valid surface return.");
    tt->help = tdrpStrDup("Gates with values below this will not be used.");
    tt->val_offset = (char *) &min_dbz_for_surface_echo - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'ngates_for_surface_echo'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ngates_for_surface_echo");
    tt->descr = tdrpStrDup("Number of gates needed for identifying surface echo.");
    tt->help = tdrpStrDup("We require this number of gates to exceed min_dbz_for_surface_echo.");
    tt->val_offset = (char *) &ngates_for_surface_echo - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'vel_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vel_field_name");
    tt->descr = tdrpStrDup("Name of field used to compute the apparent velocity of the surface echo.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vel_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'corrected_vel_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("corrected_vel_field_name");
    tt->descr = tdrpStrDup("Name of field for corrected velocity.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &corrected_vel_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("VEL_CORR");
    tt++;
    
    // Parameter 'max_nadir_error_for_surface_vel'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_nadir_error_for_surface_vel");
    tt->descr = tdrpStrDup("Maximum error from nadir pointing for computing surface velocity (deg).");
    tt->help = tdrpStrDup("We only try to compute the surface velocity if the beam is pointing within this margin of nadir (vertically down).");
    tt->val_offset = (char *) &max_nadir_error_for_surface_vel - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("OUTPUT FIELD DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_encoding'
    // ctype is '_output_encoding_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_encoding");
    tt->descr = tdrpStrDup("Output encoding for all fields, if requested.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_encoding - &_start_;
    tt->enum_def.name = tdrpStrDup("output_encoding_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_FLOAT32");
      tt->enum_def.fields[0].val = OUTPUT_ENCODING_FLOAT32;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
      tt->enum_def.fields[1].val = OUTPUT_ENCODING_INT32;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
      tt->enum_def.fields[2].val = OUTPUT_ENCODING_INT16;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
      tt->enum_def.fields[3].val = OUTPUT_ENCODING_INT08;
    tt->single_val.e = OUTPUT_ENCODING_FLOAT32;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("OUTPUT FORMAT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'netcdf_style'
    // ctype is '_netcdf_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("netcdf_style");
    tt->descr = tdrpStrDup("NetCDF style - if output_format is CFRADIAL");
    tt->help = tdrpStrDup("netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls");
    tt->val_offset = (char *) &netcdf_style - &_start_;
    tt->enum_def.name = tdrpStrDup("netcdf_style_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLASSIC");
      tt->enum_def.fields[0].val = CLASSIC;
      tt->enum_def.fields[1].name = tdrpStrDup("NC64BIT");
      tt->enum_def.fields[1].val = NC64BIT;
      tt->enum_def.fields[2].name = tdrpStrDup("NETCDF4");
      tt->enum_def.fields[2].val = NETCDF4;
      tt->enum_def.fields[3].name = tdrpStrDup("NETCDF4_CLASSIC");
      tt->enum_def.fields[3].val = NETCDF4_CLASSIC;
    tt->single_val.e = NETCDF4;
    tt++;
    
    // Parameter 'compression_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("compression_level");
    tt->descr = tdrpStrDup("Compression level for output, if compressed.");
    tt->help = tdrpStrDup("Applies to netCDF only. Dorade compression is run-length encoding, and has not options..");
    tt->val_offset = (char *) &compression_level - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("OUTPUT DIRECTORY AND FILE NAME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name. SPECIFY_FILE_NAME: file of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
      tt->enum_def.fields[3].name = tdrpStrDup("SPECIFY_FILE_NAME");
      tt->enum_def.fields[3].val = SPECIFY_FILE_NAME;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'output_filename_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename_prefix");
    tt->descr = tdrpStrDup("Optional prefix for output filename.");
    tt->help = tdrpStrDup("If empty, the standard prefix will be used.");
    tt->val_offset = (char *) &output_filename_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'include_instrument_name_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_instrument_name_in_file_name");
    tt->descr = tdrpStrDup("Option to include the instrument name in the file name.");
    tt->help = tdrpStrDup("Only applies to CfRadial files. If true, the instrument name will be included just before the volume number in the output file name.");
    tt->val_offset = (char *) &include_instrument_name_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'output_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename");
    tt->descr = tdrpStrDup("Name of output file.");
    tt->help = tdrpStrDup("Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename - &_start_;
    tt->single_val.s = tdrpStrDup("cfradial.test.nc");
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_latest_data_info'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_latest_data_info");
    tt->descr = tdrpStrDup("Option to write out _latest_data_info files.");
    tt->help = tdrpStrDup("If true, the _latest_data_info files will be written after the converted file is written.");
    tt->val_offset = (char *) &write_latest_data_info - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("WRITING SURFACE VEL RESULTS TO SPDB IN XML");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_surface_vel_results_to_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_surface_vel_results_to_spdb");
    tt->descr = tdrpStrDup("Option to write out surface velocity results to SPDB.");
    tt->help = tdrpStrDup("The results will be written in XML, stored in SPDB. The data can then be retrieved for plotting or other purposes.");
    tt->val_offset = (char *) &write_surface_vel_results_to_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'surface_vel_results_spdb_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("surface_vel_results_spdb_output_url");
    tt->descr = tdrpStrDup("URL for writing surface vel results to SPDB XML.");
    tt->help = tdrpStrDup("For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir");
    tt->val_offset = (char *) &surface_vel_results_spdb_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/spdb/hcr_surface_vel");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("FILTERING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'filter_type'
    // ctype is '_filter_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("filter_type");
    tt->descr = tdrpStrDup("Filtering option");
    tt->help = tdrpStrDup("The FIR filter approach was developed for the data from NOREASTER and CSET. For SOCRATES is was found that this filter does not work with the large waves in the southern ocean. The WAVE_FILTER approach was developed for SOCRATES.");
    tt->val_offset = (char *) &filter_type - &_start_;
    tt->enum_def.name = tdrpStrDup("filter_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("WAVE_FILTER");
      tt->enum_def.fields[0].val = WAVE_FILTER;
      tt->enum_def.fields[1].name = tdrpStrDup("FIR_FILTER");
      tt->enum_def.fields[1].val = FIR_FILTER;
    tt->single_val.e = FIR_FILTER;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("WAVE FILTERING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'noise_filter_length_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noise_filter_length_secs");
    tt->descr = tdrpStrDup("Length of the noise filter (secs).");
    tt->help = tdrpStrDup("The noise filter is a simple running mean to smooth out the measurement noise in the velocity measurements. The filter has the same center as the wave filter.");
    tt->val_offset = (char *) &noise_filter_length_secs - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'wave_filter_length_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("wave_filter_length_secs");
    tt->descr = tdrpStrDup("Length of the wave filter (secs).");
    tt->help = tdrpStrDup("The same length is used for mean, median and polynomial filtering. All are computed but only the selected method is applied for the velocity correction. We compute the filtered values at the center of the filtered length.");
    tt->val_offset = (char *) &wave_filter_length_secs - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'wave_filter_min_n_rays'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wave_filter_min_n_rays");
    tt->descr = tdrpStrDup("Min number of rays for valid wave filter.");
    tt->help = tdrpStrDup("If fewer than this number of rays are available within the time period for the wave filter, the filter is not run and no corrected velocity is computed.");
    tt->val_offset = (char *) &wave_filter_min_n_rays - &_start_;
    tt->single_val.i = 150;
    tt++;
    
    // Parameter 'wave_filter_type'
    // ctype is '_wave_filter_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("wave_filter_type");
    tt->descr = tdrpStrDup("Wave filtering type");
    tt->help = tdrpStrDup("All filter types use the same length in secs.\n\nWAVE_MEAN: running mean in time.\n\nWAVE_MEDIAN: running median in time.\n\nWAVE_POLYNOMIAL: polynomial fit.");
    tt->val_offset = (char *) &wave_filter_type - &_start_;
    tt->enum_def.name = tdrpStrDup("wave_filter_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("WAVE_MEAN");
      tt->enum_def.fields[0].val = WAVE_MEAN;
      tt->enum_def.fields[1].name = tdrpStrDup("WAVE_MEDIAN");
      tt->enum_def.fields[1].val = WAVE_MEDIAN;
      tt->enum_def.fields[2].name = tdrpStrDup("WAVE_POLYNOMIAL");
      tt->enum_def.fields[2].val = WAVE_POLYNOMIAL;
    tt->single_val.e = WAVE_MEDIAN;
    tt++;
    
    // Parameter 'wave_polynomial_order'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wave_polynomial_order");
    tt->descr = tdrpStrDup("Order of the polynomial fit for the wave filter.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wave_polynomial_order - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("FIR FILTERING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'spike_filter_difference_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spike_filter_difference_threshold");
    tt->descr = tdrpStrDup("Threshold for removing spikes in the original data and resetting the value to that form the short filter.");
    tt->help = tdrpStrDup("We apply both the stage-1 and spike filters to the time series of surface velocity. If the absolute difference between the two exceeds this threshold, then the conditioned data is set to the output from the stage-1 filter. If the absolute difference is below this threshold then the original data point is retained. After this step the final filter is applied to the conditioned data to compute the final filtered value.");
    tt->val_offset = (char *) &spike_filter_difference_threshold - &_start_;
    tt->single_val.d = 0.11;
    tt++;
    
    // Parameter 'stage1_filter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("stage1_filter");
    tt->descr = tdrpStrDup("Coefficients for stage-1 FIR filter.");
    tt->help = tdrpStrDup("Initial filtering step. This is normally a 21-point FIR filter.");
    tt->array_offset = (char *) &_stage1_filter - &_start_;
    tt->array_n_offset = (char *) &stage1_filter_n - &_start_;
    tt->is_private = TRUE;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 21;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 0.016977;
      tt->array_vals[1].d = 0.023295;
      tt->array_vals[2].d = 0.0302445;
      tt->array_vals[3].d = 0.0375501;
      tt->array_vals[4].d = 0.0448883;
      tt->array_vals[5].d = 0.0519082;
      tt->array_vals[6].d = 0.0582545;
      tt->array_vals[7].d = 0.0635929;
      tt->array_vals[8].d = 0.0676334;
      tt->array_vals[9].d = 0.0701522;
      tt->array_vals[10].d = 0.0710079;
      tt->array_vals[11].d = 0.0701522;
      tt->array_vals[12].d = 0.0676334;
      tt->array_vals[13].d = 0.0635929;
      tt->array_vals[14].d = 0.0582545;
      tt->array_vals[15].d = 0.0519082;
      tt->array_vals[16].d = 0.0448883;
      tt->array_vals[17].d = 0.0375501;
      tt->array_vals[18].d = 0.0302445;
      tt->array_vals[19].d = 0.023295;
      tt->array_vals[20].d = 0.016977;
    tt++;
    
    // Parameter 'spike_filter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spike_filter");
    tt->descr = tdrpStrDup("Coefficients for spike FIR filter.");
    tt->help = tdrpStrDup("Applying this filter onces is equivalent to applying the stage-1 filter five times in succession on a time series. Normally this will have 101 entries.");
    tt->array_offset = (char *) &_spike_filter - &_start_;
    tt->array_n_offset = (char *) &spike_filter_n - &_start_;
    tt->is_private = TRUE;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 101;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 1.41027e-09;
      tt->array_vals[1].d = 9.67555e-09;
      tt->array_vals[2].d = 3.91146e-08;
      tt->array_vals[3].d = 1.20978e-07;
      tt->array_vals[4].d = 3.15912e-07;
      tt->array_vals[5].d = 7.3214e-07;
      tt->array_vals[6].d = 1.55076e-06;
      tt->array_vals[7].d = 3.05944e-06;
      tt->array_vals[8].d = 5.69573e-06;
      tt->array_vals[9].d = 1.01006e-05;
      tt->array_vals[10].d = 1.71828e-05;
      tt->array_vals[11].d = 2.81927e-05;
      tt->array_vals[12].d = 4.48059e-05;
      tt->array_vals[13].d = 6.92118e-05;
      tt->array_vals[14].d = 0.000104206;
      tt->array_vals[15].d = 0.000153279;
      tt->array_vals[16].d = 0.000220702;
      tt->array_vals[17].d = 0.000311587;
      tt->array_vals[18].d = 0.000431939;
      tt->array_vals[19].d = 0.000588667;
      tt->array_vals[20].d = 0.000789562;
      tt->array_vals[21].d = 0.00104322;
      tt->array_vals[22].d = 0.00135892;
      tt->array_vals[23].d = 0.00174645;
      tt->array_vals[24].d = 0.00221584;
      tt->array_vals[25].d = 0.00277708;
      tt->array_vals[26].d = 0.00343973;
      tt->array_vals[27].d = 0.00421257;
      tt->array_vals[28].d = 0.0051031;
      tt->array_vals[29].d = 0.0061171;
      tt->array_vals[30].d = 0.00725815;
      tt->array_vals[31].d = 0.00852721;
      tt->array_vals[32].d = 0.00992217;
      tt->array_vals[33].d = 0.0114375;
      tt->array_vals[34].d = 0.0130642;
      tt->array_vals[35].d = 0.0147892;
      tt->array_vals[36].d = 0.0165958;
      tt->array_vals[37].d = 0.0184636;
      tt->array_vals[38].d = 0.0203688;
      tt->array_vals[39].d = 0.0222844;
      tt->array_vals[40].d = 0.0241812;
      tt->array_vals[41].d = 0.0260281;
      tt->array_vals[42].d = 0.0277931;
      tt->array_vals[43].d = 0.0294439;
      tt->array_vals[44].d = 0.0309493;
      tt->array_vals[45].d = 0.0322797;
      tt->array_vals[46].d = 0.0334084;
      tt->array_vals[47].d = 0.0343119;
      tt->array_vals[48].d = 0.0349715;
      tt->array_vals[49].d = 0.0353729;
      tt->array_vals[50].d = 0.0355077;
      tt->array_vals[51].d = 0.0353729;
      tt->array_vals[52].d = 0.0349715;
      tt->array_vals[53].d = 0.0343119;
      tt->array_vals[54].d = 0.0334084;
      tt->array_vals[55].d = 0.0322797;
      tt->array_vals[56].d = 0.0309493;
      tt->array_vals[57].d = 0.0294439;
      tt->array_vals[58].d = 0.0277931;
      tt->array_vals[59].d = 0.0260281;
      tt->array_vals[60].d = 0.0241812;
      tt->array_vals[61].d = 0.0222844;
      tt->array_vals[62].d = 0.0203688;
      tt->array_vals[63].d = 0.0184636;
      tt->array_vals[64].d = 0.0165958;
      tt->array_vals[65].d = 0.0147892;
      tt->array_vals[66].d = 0.0130642;
      tt->array_vals[67].d = 0.0114375;
      tt->array_vals[68].d = 0.00992217;
      tt->array_vals[69].d = 0.00852721;
      tt->array_vals[70].d = 0.00725815;
      tt->array_vals[71].d = 0.0061171;
      tt->array_vals[72].d = 0.0051031;
      tt->array_vals[73].d = 0.00421257;
      tt->array_vals[74].d = 0.00343973;
      tt->array_vals[75].d = 0.00277708;
      tt->array_vals[76].d = 0.00221584;
      tt->array_vals[77].d = 0.00174645;
      tt->array_vals[78].d = 0.00135892;
      tt->array_vals[79].d = 0.00104322;
      tt->array_vals[80].d = 0.000789562;
      tt->array_vals[81].d = 0.000588667;
      tt->array_vals[82].d = 0.000431939;
      tt->array_vals[83].d = 0.000311587;
      tt->array_vals[84].d = 0.000220702;
      tt->array_vals[85].d = 0.000153279;
      tt->array_vals[86].d = 0.000104206;
      tt->array_vals[87].d = 6.92118e-05;
      tt->array_vals[88].d = 4.48059e-05;
      tt->array_vals[89].d = 2.81927e-05;
      tt->array_vals[90].d = 1.71828e-05;
      tt->array_vals[91].d = 1.01006e-05;
      tt->array_vals[92].d = 5.69573e-06;
      tt->array_vals[93].d = 3.05944e-06;
      tt->array_vals[94].d = 1.55076e-06;
      tt->array_vals[95].d = 7.3214e-07;
      tt->array_vals[96].d = 3.15912e-07;
      tt->array_vals[97].d = 1.20978e-07;
      tt->array_vals[98].d = 3.91146e-08;
      tt->array_vals[99].d = 9.67555e-09;
      tt->array_vals[100].d = 1.41027e-09;
    tt++;
    
    // Parameter 'final_filter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("final_filter");
    tt->descr = tdrpStrDup("Coefficients for final FIR filter.");
    tt->help = tdrpStrDup("Before applying this filter, we first compute the conditioned time series. We compute the difference between the results of the stage-1 and spike filters - if this difference exceeds spike_filter_difference_threshold we use the spike filter result. Otherwise we use the stage-1 result.");
    tt->array_offset = (char *) &_final_filter - &_start_;
    tt->array_n_offset = (char *) &final_filter_n - &_start_;
    tt->is_private = TRUE;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 41;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 0.000288218;
      tt->array_vals[1].d = 0.000790958;
      tt->array_vals[2].d = 0.00156958;
      tt->array_vals[3].d = 0.00268406;
      tt->array_vals[4].d = 0.00418832;
      tt->array_vals[5].d = 0.0061252;
      tt->array_vals[6].d = 0.00852163;
      tt->array_vals[7].d = 0.0113843;
      tt->array_vals[8].d = 0.0146962;
      tt->array_vals[9].d = 0.0184147;
      tt->array_vals[10].d = 0.0224707;
      tt->array_vals[11].d = 0.0267698;
      tt->array_vals[12].d = 0.0311959;
      tt->array_vals[13].d = 0.035615;
      tt->array_vals[14].d = 0.039882;
      tt->array_vals[15].d = 0.0438477;
      tt->array_vals[16].d = 0.0473667;
      tt->array_vals[17].d = 0.0503056;
      tt->array_vals[18].d = 0.0525504;
      tt->array_vals[19].d = 0.0540136;
      tt->array_vals[20].d = 0.0546387;
      tt->array_vals[21].d = 0.0540136;
      tt->array_vals[22].d = 0.0525504;
      tt->array_vals[23].d = 0.0503056;
      tt->array_vals[24].d = 0.0473667;
      tt->array_vals[25].d = 0.0438477;
      tt->array_vals[26].d = 0.039882;
      tt->array_vals[27].d = 0.035615;
      tt->array_vals[28].d = 0.0311959;
      tt->array_vals[29].d = 0.0267698;
      tt->array_vals[30].d = 0.0224707;
      tt->array_vals[31].d = 0.0184147;
      tt->array_vals[32].d = 0.0146962;
      tt->array_vals[33].d = 0.0113843;
      tt->array_vals[34].d = 0.00852163;
      tt->array_vals[35].d = 0.0061252;
      tt->array_vals[36].d = 0.00418832;
      tt->array_vals[37].d = 0.00268406;
      tt->array_vals[38].d = 0.00156958;
      tt->array_vals[39].d = 0.000790958;
      tt->array_vals[40].d = 0.000288218;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
