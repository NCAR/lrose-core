/**********************************************************************
 * TDRP params for ./StormShapeSim
 **********************************************************************/

//======================================================================
//
// StormShapeSim simulates storm shapes and writes these to a Cartesian 
//   MDV file. It then resamples the Cartesian file using a prescribed 
//   radar scan strategy, and writes the radar-bases simulation to a 
//   CfRadial file.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

//======================================================================
//
// STORM SHAPES.
//
// Set an array of storm shapes for the simulation.
//
//======================================================================
 
///////////// data_set_info ///////////////////////////
//
// Label to be used in output data, and path.
//
//
// Type: string
//

data_set_info = "case1";

///////////// storm_shapes ////////////////////////////
//
// Array of storm shapes.
//
// The shape centroid is specified. This body is an ellipse in (x,y) 
//   cordinates, with the specified z limits. Within the body dbz is 
//   constant. Beyond the body limits the dbz values decrease at the 
//   specified gradient. Below the specified minimum, the dbz values will 
//   be set to missing.
//
//
// Type: struct
//   typedef struct {
//      double centroid_x_km;
//      double centroid_y_km;
//      double body_ellipse_radius_x_km;
//      double body_ellipse_radius_y_km;
//      double body_min_z_km;
//      double body_max_z_km;
//      double body_dbz_at_base;
//      double body_dbz_at_top;
//      double dbz_gradient_horiz;
//      double dbz_gradient_vert;
//   }
//
// 1D array - variable length.
//

storm_shapes = {
  {
    centroid_x_km = -50,
    centroid_y_km = 10,
    body_ellipse_radius_x_km = 20,
    body_ellipse_radius_y_km = 15,
    body_ellipse_rotation_deg = -15,
    body_min_z_km = 4,
    body_max_z_km = 10,
    body_dbz_at_base = 45,
    body_dbz_at_top = 25,
    dbz_gradient_horiz = 3,
    dbz_gradient_vert = 3
  }
  ,
  {
    centroid_x_km = 40,
    centroid_y_km = 50,
    body_ellipse_radius_x_km = 80,
    body_ellipse_radius_y_km = 30,
    body_ellipse_rotation_deg = +20,
    body_min_z_km = 14.5,
    body_max_z_km = 15.5,
    body_dbz_at_base = 20,
    body_dbz_at_top = 20,
    dbz_gradient_horiz = 5,
    dbz_gradient_vert = 30
  }
  ,
  {
    centroid_x_km = 10,
    centroid_y_km = -60,
    body_ellipse_radius_x_km = 15,
    body_ellipse_radius_y_km = 10,
    body_ellipse_rotation_deg = 90,
    body_min_z_km = 3,
    body_max_z_km = 15,
    body_dbz_at_base = 65,
    body_dbz_at_top = 40,
    dbz_gradient_horiz = 3,
    dbz_gradient_vert = 2
  }
};

///////////// min_valid_dbz ///////////////////////////
//
// Minimum valid DBZ in Cartesian DBZ volume.
//
// Values below this will be set to missing.
//
//
// Type: double
//

min_valid_dbz = -30;

//======================================================================
//
// CARTESIAN GRID DETAILS.
//
//======================================================================
 
///////////// cart_grid ///////////////////////////////
//
// Cartesian grid parameters.
//
// For the MDV output file.
//
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      int nz;
//      double minx;
//      double miny;
//      double minz;
//      double dx;
//      double dy;
//      double dz;
//   }
//
//

cart_grid = {
    nx = 800,
    ny = 800,
    nz = 40,
    minx = -199.75,
    miny = -199.75,
    minz = 0.5,
    dx = 0.5,
    dy = 0.5,
    dz = 0.5
};

//======================================================================
//
// Mode for specifying the radar scan strategy.
//
// Read in a scan file, or specify radar and scan parameters.
//
//======================================================================
 
///////////// specify_mode ////////////////////////////
//
// Mode for determining radar parameters.
//

// SPECIFY_FILE: read in a file, and use that volume for computations.
//
// SPECIFY_RADAR_PARAMS: create a volume based on specified parameters 
//   in params file.
//
//
// Type: enum
// Options:
//     SPECIFY_FILE
//     SPECIFY_RADAR_PARAMS
//

specify_mode = SPECIFY_RADAR_PARAMS;

//======================================================================
//
// SPECIFIED INPUT FILE.
//
//======================================================================
 
///////////// specified_file_path /////////////////////
//
// Path for specified file.
//
// Applies to SPECIFY_FILE mode.
//
//
// Type: string
//

specified_file_path = "./template_cfradial_file.nc";

//======================================================================
//
// SPECIFIED RADAR PARAMETERS.
//
// Applies to SPECIFY_RADAR_PARAMS mode.
//
//======================================================================
 
///////////// radar_name //////////////////////////////
//
// Name of radar.
//
//
// Type: string
//

radar_name = "VIRTUAL";

///////////// radar_location //////////////////////////
//
// Radar location.
//
// Note that the altitude is in meters MSL.
//
//
// Type: struct
//   typedef struct {
//      double latitudeDeg;
//      double longitudeDeg;
//      double altitudeKm;
//   }
//
//

radar_location = {
    latitudeDeg = 40,
    longitudeDeg = -105,
    altitudeKm = 0
};

///////////// radar_wavelength_cm /////////////////////
//
// Radar wavelength, cm.
//
//
// Type: double
//

radar_wavelength_cm = 10;

///////////// beam_width_deg //////////////////////////
//
// Radar beamwidth (deg).
//
//
// Type: double
//

beam_width_deg = 1;

///////////// scan_name ///////////////////////////////
//
// Volume coverage pattern.
//
//
// Type: string
//

scan_name = "Unknown";

///////////// gate_spacing_m //////////////////////////
//
// Gate spacing for simulation (m).
//
//
// Type: double
//

gate_spacing_m = 250;

///////////// max_range_km ////////////////////////////
//
// Max range (km).
//
//
// Type: double
//

max_range_km = 225;

///////////// elev_rate_deg_per_sec ///////////////////
//
// Rate of rotation in elevation (deg/s).
//
//
// Type: double
//

elev_rate_deg_per_sec = 3;

///////////// sweeps //////////////////////////////////
//
// Definition of each sweep.
//
// Elevation angle (deg), azimuth rate (deg/sec).
//
//
// Type: struct
//   typedef struct {
//      double elev_deg;
//      double az_rate_deg_per_sec;
//   }
//
// 1D array - variable length.
//

sweeps = {
  {
    elev_deg = 0.5,
    az_rate_deg_per_sec = 11.46
  }
  ,
  {
    elev_deg = 0.5,
    az_rate_deg_per_sec = 17.1
  }
  ,
  {
    elev_deg = 0.9,
    az_rate_deg_per_sec = 13.38
  }
  ,
  {
    elev_deg = 0.9,
    az_rate_deg_per_sec = 17.1
  }
  ,
  {
    elev_deg = 1.3,
    az_rate_deg_per_sec = 13.38
  }
  ,
  {
    elev_deg = 1.3,
    az_rate_deg_per_sec = 17.1
  }
  ,
  {
    elev_deg = 1.8,
    az_rate_deg_per_sec = 13.38
  }
  ,
  {
    elev_deg = 2.4,
    az_rate_deg_per_sec = 18.06
  }
  ,
  {
    elev_deg = 3.1,
    az_rate_deg_per_sec = 18.06
  }
  ,
  {
    elev_deg = 4,
    az_rate_deg_per_sec = 20.52
  }
  ,
  {
    elev_deg = 5.1,
    az_rate_deg_per_sec = 20.52
  }
  ,
  {
    elev_deg = 6.4,
    az_rate_deg_per_sec = 20.52
  }
  ,
  {
    elev_deg = 8,
    az_rate_deg_per_sec = 24.84
  }
  ,
  {
    elev_deg = 10,
    az_rate_deg_per_sec = 25.62
  }
  ,
  {
    elev_deg = 12,
    az_rate_deg_per_sec = 25.62
  }
  ,
  {
    elev_deg = 14,
    az_rate_deg_per_sec = 25.62
  }
  ,
  {
    elev_deg = 16.7,
    az_rate_deg_per_sec = 25.62
  }
  ,
  {
    elev_deg = 19.5,
    az_rate_deg_per_sec = 25.62
  }
};

///////////// reverse_sweep_order_in_vol //////////////
//
// Reverse the order of the sweeps in the volume, but preserve times.
//
// If TRUE, reverse the order in which the sweeps are stored in the 
//   volume. But do not change the times on the rays. This is used for 
//   testing purposes and checking for bugs in the analysis.
//
//
// Type: boolean
//

reverse_sweep_order_in_vol = FALSE;

//======================================================================
//
// WRITING FILES.
//
//======================================================================
 
///////////// cart_data_time //////////////////////////
//
// Time for Cartesian output volume.
//
// The data will be stamped with this time.
//
//
// Type: string
//

cart_data_time = "2022 01 01 00 00 00";

///////////// output_dir_mdv //////////////////////////
//
// Output directory path for Cartesian MDV files.
//
//
// Type: string
//

output_dir_mdv = "$(HOME)/data/StormShapeSim/mdv/orig";

///////////// output_dir_cfradial /////////////////////
//
// Output directory path for polar CfRadial files.
//
// Files will be written to this directory.
//
//
// Type: string
//

output_dir_cfradial = "$(HOME)/data/StormShapeSim/cfradial/resample";

