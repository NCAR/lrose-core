/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program MdvRadarShear
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("MdvRadarShear reads in radial velocity data in MDV polar radar format, computes the shear and writes out shear fields in MDV format.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUG AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Directory for input data.");
    tt->help = tdrpStrDup("This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, the file paths are specified on the command line.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./input/mdv");
    tt++;
    
    // Parameter 'set_elev_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_elev_limits");
    tt->descr = tdrpStrDup("Option to set elevation limits");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_elev_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_elev'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("lower_elev");
    tt->descr = tdrpStrDup("Lower elev limit (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_elev - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'upper_elev'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("upper_elev");
    tt->descr = tdrpStrDup("Upper elev limit (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_elev - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("INPUT FIELD INFORMATION");
    tt->comment_text = tdrpStrDup("Names of input fields in the Dsr queue.");
    tt++;
    
    // Parameter 'DBZ_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("DBZ_field_name");
    tt->descr = tdrpStrDup("Field name for DBZ in the input file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &DBZ_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'SNR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("SNR_field_name");
    tt->descr = tdrpStrDup("Field name for SNR in the input file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &SNR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("SNR");
    tt++;
    
    // Parameter 'VEL_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("VEL_field_name");
    tt->descr = tdrpStrDup("Field name for radial velocity in the input file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &VEL_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("SMOOTHING INPUT FIELDS");
    tt->comment_text = tdrpStrDup("This section gives you the option of smoothing the fields in range by applying a median filter.");
    tt++;
    
    // Parameter 'apply_median_filter_to_DBZ'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_DBZ");
    tt->descr = tdrpStrDup("Option to filter DBZ with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &apply_median_filter_to_DBZ - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'DBZ_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("DBZ_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for DBZ - gates.");
    tt->help = tdrpStrDup("See 'apply_median_filter_to_DBZ'");
    tt->val_offset = (char *) &DBZ_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'apply_median_filter_to_VEL'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_VEL");
    tt->descr = tdrpStrDup("Option to filter VEL with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &apply_median_filter_to_VEL - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'VEL_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("VEL_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for VEL - gates.");
    tt->help = tdrpStrDup("See 'apply_median_filter_to_VEL'");
    tt->val_offset = (char *) &VEL_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'apply_median_filter_to_SNR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_SNR");
    tt->descr = tdrpStrDup("Option to filter SNR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range, and affects PID only.");
    tt->val_offset = (char *) &apply_median_filter_to_SNR - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'SNR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("SNR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for SNR - gates.");
    tt->help = tdrpStrDup("See 'apply_median_filter_to_SNR'");
    tt->val_offset = (char *) &SNR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("CENSORING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'censor_using_thresholds'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("censor_using_thresholds");
    tt->descr = tdrpStrDup("Option to censor the output using set thresholds.");
    tt->help = tdrpStrDup("If TRUE, the thresholding fields will be examined to see if it is within the desired range. Examples are SNR (Signal-to-noise) and NCP (normalized coherent power). If the specified field at a gate falls outside the specified range, all output fields will be set to missing for that gate.");
    tt->val_offset = (char *) &censor_using_thresholds - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'censor_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("censor_field_name");
    tt->descr = tdrpStrDup("Name of field for thresholding");
    tt->help = tdrpStrDup("This is the DSR (input) field name for the thresholding field. If this field is available, it is used for thresholding. If not, thresholding will not be performed.");
    tt->val_offset = (char *) &censor_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("NCP");
    tt++;
    
    // Parameter 'censor_min_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("censor_min_value");
    tt->descr = tdrpStrDup("Minimum threshold - see 'censor_output_using_thresholds'.");
    tt->help = tdrpStrDup("The specified field at a gate must exceed this value for the gate to be accepted.");
    tt->val_offset = (char *) &censor_min_value - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'censor_max_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("censor_max_value");
    tt->descr = tdrpStrDup("Maximum threshold - see 'censor_output_using_thresholds'.");
    tt->help = tdrpStrDup("The specified field at a gate must be less than this value for the gate to be accepted.");
    tt->val_offset = (char *) &censor_max_value - &_start_;
    tt->single_val.d = 1.1;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("COMPUTING SHEAR");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'shear_kernel_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("shear_kernel_size");
    tt->descr = tdrpStrDup("Size of kernel for computing shear.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &shear_kernel_size - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'max_arc_width'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_arc_width");
    tt->descr = tdrpStrDup("Max width of azimuth arc (km).");
    tt->help = tdrpStrDup("This limits the smearing of the data in azimuth at longer ranges.");
    tt->val_offset = (char *) &max_arc_width - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output URL.");
    tt->help = tdrpStrDup("Output MDV data is written to this URL.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("./output/mdv/radar_shear");
    tt++;
    
    // Parameter 'RADIAL_SHEAR_output_field'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("RADIAL_SHEAR_output_field");
    tt->descr = tdrpStrDup("If write is TRUE, RADIAL_SHEAR is included in the output MDV file.");
    tt->help = tdrpStrDup("This is the shear along the radial.");
    tt->val_offset = (char *) &RADIAL_SHEAR_output_field - &_start_;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &RADIAL_SHEAR_output_field.name - (char *) &RADIAL_SHEAR_output_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &RADIAL_SHEAR_output_field.long_name - (char *) &RADIAL_SHEAR_output_field;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &RADIAL_SHEAR_output_field.units - (char *) &RADIAL_SHEAR_output_field;
      tt->struct_def.fields[3].ftype = tdrpStrDup("encoding_type_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &RADIAL_SHEAR_output_field.encoding - (char *) &RADIAL_SHEAR_output_field;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("encoding_type_t");
        tt->struct_def.fields[3].enum_def.nfields = 4;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("ENCODING_ASIS");
        tt->struct_def.fields[3].enum_def.fields[0].val = ENCODING_ASIS;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("ENCODING_INT8");
        tt->struct_def.fields[3].enum_def.fields[1].val = ENCODING_INT8;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("ENCODING_INT16");
        tt->struct_def.fields[3].enum_def.fields[2].val = ENCODING_INT16;
        tt->struct_def.fields[3].enum_def.fields[3].name = tdrpStrDup("ENCODING_FLOAT32");
        tt->struct_def.fields[3].enum_def.fields[3].val = ENCODING_FLOAT32;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("write");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &RADIAL_SHEAR_output_field.write - (char *) &RADIAL_SHEAR_output_field;
    tt->n_struct_vals = 5;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("RADIAL_SHEAR");
      tt->struct_vals[1].s = tdrpStrDup("RADIAL_SHEAR");
      tt->struct_vals[2].s = tdrpStrDup("m/s/km");
      tt->struct_vals[3].e = ENCODING_INT16;
      tt->struct_vals[4].b = pTRUE;
    tt++;
    
    // Parameter 'AZIMUTHAL_SHEAR_output_field'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("AZIMUTHAL_SHEAR_output_field");
    tt->descr = tdrpStrDup("If write is TRUE, AZIMUTHAL_SHEAR is included in the output MDV file.");
    tt->help = tdrpStrDup("This is the shear is radial velocity, but computed in azimuth.");
    tt->val_offset = (char *) &AZIMUTHAL_SHEAR_output_field - &_start_;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &AZIMUTHAL_SHEAR_output_field.name - (char *) &AZIMUTHAL_SHEAR_output_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &AZIMUTHAL_SHEAR_output_field.long_name - (char *) &AZIMUTHAL_SHEAR_output_field;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &AZIMUTHAL_SHEAR_output_field.units - (char *) &AZIMUTHAL_SHEAR_output_field;
      tt->struct_def.fields[3].ftype = tdrpStrDup("encoding_type_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &AZIMUTHAL_SHEAR_output_field.encoding - (char *) &AZIMUTHAL_SHEAR_output_field;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("encoding_type_t");
        tt->struct_def.fields[3].enum_def.nfields = 4;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("ENCODING_ASIS");
        tt->struct_def.fields[3].enum_def.fields[0].val = ENCODING_ASIS;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("ENCODING_INT8");
        tt->struct_def.fields[3].enum_def.fields[1].val = ENCODING_INT8;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("ENCODING_INT16");
        tt->struct_def.fields[3].enum_def.fields[2].val = ENCODING_INT16;
        tt->struct_def.fields[3].enum_def.fields[3].name = tdrpStrDup("ENCODING_FLOAT32");
        tt->struct_def.fields[3].enum_def.fields[3].val = ENCODING_FLOAT32;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("write");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &AZIMUTHAL_SHEAR_output_field.write - (char *) &AZIMUTHAL_SHEAR_output_field;
    tt->n_struct_vals = 5;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("AZIMUTHAL_SHEAR");
      tt->struct_vals[1].s = tdrpStrDup("AZIMUTHAL_SHEAR");
      tt->struct_vals[2].s = tdrpStrDup("m/s/km");
      tt->struct_vals[3].e = ENCODING_INT16;
      tt->struct_vals[4].b = pTRUE;
    tt++;
    
    // Parameter 'MAX_SHEAR_output_field'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("MAX_SHEAR_output_field");
    tt->descr = tdrpStrDup("If write is TRUE, MAX_SHEAR is included in the output MDV file.");
    tt->help = tdrpStrDup("This is the max of RADIAL_SHEAR and AZIMUTHAL_SHEAR.");
    tt->val_offset = (char *) &MAX_SHEAR_output_field - &_start_;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &MAX_SHEAR_output_field.name - (char *) &MAX_SHEAR_output_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &MAX_SHEAR_output_field.long_name - (char *) &MAX_SHEAR_output_field;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &MAX_SHEAR_output_field.units - (char *) &MAX_SHEAR_output_field;
      tt->struct_def.fields[3].ftype = tdrpStrDup("encoding_type_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &MAX_SHEAR_output_field.encoding - (char *) &MAX_SHEAR_output_field;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("encoding_type_t");
        tt->struct_def.fields[3].enum_def.nfields = 4;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("ENCODING_ASIS");
        tt->struct_def.fields[3].enum_def.fields[0].val = ENCODING_ASIS;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("ENCODING_INT8");
        tt->struct_def.fields[3].enum_def.fields[1].val = ENCODING_INT8;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("ENCODING_INT16");
        tt->struct_def.fields[3].enum_def.fields[2].val = ENCODING_INT16;
        tt->struct_def.fields[3].enum_def.fields[3].name = tdrpStrDup("ENCODING_FLOAT32");
        tt->struct_def.fields[3].enum_def.fields[3].val = ENCODING_FLOAT32;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("write");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &MAX_SHEAR_output_field.write - (char *) &MAX_SHEAR_output_field;
    tt->n_struct_vals = 5;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("MAX_SHEAR");
      tt->struct_vals[1].s = tdrpStrDup("MAX_SHEAR");
      tt->struct_vals[2].s = tdrpStrDup("m/s/km");
      tt->struct_vals[3].e = ENCODING_INT16;
      tt->struct_vals[4].b = pTRUE;
    tt++;
    
    // Parameter 'MEAN_VEL_output_field'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("MEAN_VEL_output_field");
    tt->descr = tdrpStrDup("If write is TRUE, MEAN_VEL is included in the output MDV file.");
    tt->help = tdrpStrDup("This is a smoothed velocity.");
    tt->val_offset = (char *) &MEAN_VEL_output_field - &_start_;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &MEAN_VEL_output_field.name - (char *) &MEAN_VEL_output_field;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &MEAN_VEL_output_field.long_name - (char *) &MEAN_VEL_output_field;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &MEAN_VEL_output_field.units - (char *) &MEAN_VEL_output_field;
      tt->struct_def.fields[3].ftype = tdrpStrDup("encoding_type_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &MEAN_VEL_output_field.encoding - (char *) &MEAN_VEL_output_field;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("encoding_type_t");
        tt->struct_def.fields[3].enum_def.nfields = 4;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("ENCODING_ASIS");
        tt->struct_def.fields[3].enum_def.fields[0].val = ENCODING_ASIS;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("ENCODING_INT8");
        tt->struct_def.fields[3].enum_def.fields[1].val = ENCODING_INT8;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("ENCODING_INT16");
        tt->struct_def.fields[3].enum_def.fields[2].val = ENCODING_INT16;
        tt->struct_def.fields[3].enum_def.fields[3].name = tdrpStrDup("ENCODING_FLOAT32");
        tt->struct_def.fields[3].enum_def.fields[3].val = ENCODING_FLOAT32;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("write");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &MEAN_VEL_output_field.write - (char *) &MEAN_VEL_output_field;
    tt->n_struct_vals = 5;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("MEAN_VEL");
      tt->struct_vals[1].s = tdrpStrDup("MEAN_VEL");
      tt->struct_vals[2].s = tdrpStrDup("m/s");
      tt->struct_vals[3].e = ENCODING_INT16;
      tt->struct_vals[4].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("ECHO INPUT FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'echo_input_fields_in_output_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("echo_input_fields_in_output_file");
    tt->descr = tdrpStrDup("Option to copy some of the input fields into the output file.");
    tt->help = tdrpStrDup("If TRUE, the listed fields will be copied to the output MDV file. See 'echo_field_names'");
    tt->val_offset = (char *) &echo_input_fields_in_output_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'echo_field_names'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("echo_field_names");
    tt->descr = tdrpStrDup("List of field names to be copied from the input file to the output file.");
    tt->help = tdrpStrDup("See 'echo_input_fields_in_output_file'");
    tt->array_offset = (char *) &_echo_field_names - &_start_;
    tt->array_n_offset = (char *) &echo_field_names_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("DBZ");
      tt->array_vals[1].s = tdrpStrDup("VEL");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
