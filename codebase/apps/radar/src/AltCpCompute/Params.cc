/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program AltCpCompute
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("AltCpCompute analyses data from tsarchive time series files using the cross-polar technique to determine ZDR bias.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register with the process mapper.");
    tt->help = tdrpStrDup("If true, this application will try to register with procmap once per minute. (If unable to do so, no error occurs.)");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_mode'
    // ctype is '_input_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_mode");
    tt->descr = tdrpStrDup("Input mode - files or time series API, or CfRadial moments.");
    tt->help = tdrpStrDup("If TS_FMQ_INPUT, the application will read the time series from a file message queue and process the pulses as they come in. If TS_FILE_INPUT, the application will process all the files specified on the command line. If CFRADIAL, moments will be read from CfRadial files.");
    tt->val_offset = (char *) &input_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("input_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TS_FILE_INPUT");
      tt->enum_def.fields[0].val = TS_FILE_INPUT;
      tt->enum_def.fields[1].name = tdrpStrDup("TS_FMQ_INPUT");
      tt->enum_def.fields[1].val = TS_FMQ_INPUT;
      tt->enum_def.fields[2].name = tdrpStrDup("CFRADIAL_INPUT");
      tt->enum_def.fields[2].val = CFRADIAL_INPUT;
    tt->single_val.e = TS_FILE_INPUT;
    tt++;
    
    // Parameter 'input_fmq_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_name");
    tt->descr = tdrpStrDup("FMQ name. For TS_FMQ_INPUT only.");
    tt->help = tdrpStrDup("Path to FMQ files. There are 2 files, one with a .buf extension and one with a .stat extention. This path does not include the extensions.");
    tt->val_offset = (char *) &input_fmq_name - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/ts");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("COMPUTING MOMENTS FROM TIME SERIES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'n_samples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_samples");
    tt->descr = tdrpStrDup("Number of pulse samples in a beam.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &n_samples - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'switching_receiver'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("switching_receiver");
    tt->descr = tdrpStrDup("Does the receiver path switch between each pulse.");
    tt->help = tdrpStrDup("In some alternating mode radars, the receiver chain switches between pulses. This is done to create a co-polar and cross-polar receiver system which is more stable for ZDR. If this is set to TRUE, then the receiver is assumed to switch and the data for each channel is gathered accordingly.");
    tt->val_offset = (char *) &switching_receiver - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'invert_hv_flag'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("invert_hv_flag");
    tt->descr = tdrpStrDup("Option to invert H/V flag in pulse data.");
    tt->help = tdrpStrDup("Normally, the HV flag is set to 1 for H, 0 for V. If the flag in the data has the opposite sense, set this to true.");
    tt->val_offset = (char *) &invert_hv_flag - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'nbeams_per_analysis'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("nbeams_per_analysis");
    tt->descr = tdrpStrDup("Number of beams per stats analysis.");
    tt->help = tdrpStrDup("The stats will be computed each time this number of beams is reached. Set to -1 to analyze all input data.");
    tt->val_offset = (char *) &nbeams_per_analysis - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("READING MOMENTS FROM CFRADIAL FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'cfradial_input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &cfradial_input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'cfradial_mode'
    // ctype is '_cfradial_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("cfradial_mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file.  In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &cfradial_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("cfradial_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CFRADIAL_REALTIME");
      tt->enum_def.fields[0].val = CFRADIAL_REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("CFRADIAL_ARCHIVE");
      tt->enum_def.fields[1].val = CFRADIAL_ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("CFRADIAL_FILELIST");
      tt->enum_def.fields[2].val = CFRADIAL_FILELIST;
    tt->single_val.e = CFRADIAL_REALTIME;
    tt++;
    
    // Parameter 'cfradial_max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cfradial_max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &cfradial_max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'cfradial_latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cfradial_latest_data_info_avail");
    tt->descr = tdrpStrDup("Is _latest_data_info file available?");
    tt->help = tdrpStrDup("If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.");
    tt->val_offset = (char *) &cfradial_latest_data_info_avail - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'cfradial_search_recursively'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cfradial_search_recursively");
    tt->descr = tdrpStrDup("Option to recurse to subdirectories while looking for new files.");
    tt->help = tdrpStrDup("If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &cfradial_search_recursively - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'cfradial_max_recursion_depth'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cfradial_max_recursion_depth");
    tt->descr = tdrpStrDup("Maximum depth for recursive directory scan.");
    tt->help = tdrpStrDup("Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.");
    tt->val_offset = (char *) &cfradial_max_recursion_depth - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'cfradial_wait_between_checks'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cfradial_wait_between_checks");
    tt->descr = tdrpStrDup("Sleep time between checking directory for input - secs.");
    tt->help = tdrpStrDup("If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &cfradial_wait_between_checks - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'cfradial_file_quiescence'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cfradial_file_quiescence");
    tt->descr = tdrpStrDup("File quiescence when checking for files - secs.");
    tt->help = tdrpStrDup("This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &cfradial_file_quiescence - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'cfradial_search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &cfradial_search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("nc");
    tt++;
    
    // Parameter 'cfradial_dbmhx_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_dbmhx_field_name");
    tt->descr = tdrpStrDup("Field name for dbm cross-polar H channel.");
    tt->help = tdrpStrDup("This field is not noise-corrected or filtered. Units are in dBm.");
    tt->val_offset = (char *) &cfradial_dbmhx_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBMHX");
    tt++;
    
    // Parameter 'cfradial_dbmvx_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_dbmvx_field_name");
    tt->descr = tdrpStrDup("Field name for dbm cross-polar V channel.");
    tt->help = tdrpStrDup("This field is not noise-corrected or filtered. Units are in dBm.");
    tt->val_offset = (char *) &cfradial_dbmvx_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBMVX");
    tt++;
    
    // Parameter 'cfradial_snrhx_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_snrhx_field_name");
    tt->descr = tdrpStrDup("Field name for snr cross-polar H channel.");
    tt->help = tdrpStrDup("Units are in dB.");
    tt->val_offset = (char *) &cfradial_snrhx_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("SNRHX");
    tt++;
    
    // Parameter 'cfradial_snrvx_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_snrvx_field_name");
    tt->descr = tdrpStrDup("Field name for snr cross-polar V channel.");
    tt->help = tdrpStrDup("Units are in dB.");
    tt->val_offset = (char *) &cfradial_snrvx_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("SNRVX");
    tt++;
    
    // Parameter 'cfradial_cpa_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_cpa_field_name");
    tt->descr = tdrpStrDup("Field name for clutter phase alignment field.");
    tt->help = tdrpStrDup("This can be used to determine clutter likelihood.");
    tt->val_offset = (char *) &cfradial_cpa_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("CPA");
    tt++;
    
    // Parameter 'cfradial_cmd_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_cmd_field_name");
    tt->descr = tdrpStrDup("Field name for clutter mitigation decision field.");
    tt->help = tdrpStrDup("This can be used to determine clutter likelihood.");
    tt->val_offset = (char *) &cfradial_cmd_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("CMD");
    tt++;
    
    // Parameter 'cfradial_rho_vx_hx_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cfradial_rho_vx_hx_field_name");
    tt->descr = tdrpStrDup("Field name for cross-correlation between vx and hx.");
    tt->help = tdrpStrDup("Should be close to 1 in valid gates.");
    tt->val_offset = (char *) &cfradial_rho_vx_hx_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("RHO_VX_HX");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("CALIBRATION XML PATH");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'cal_xml_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cal_xml_file_path");
    tt->descr = tdrpStrDup("Path for XML calibration file.");
    tt->help = tdrpStrDup("At a minimum, the calibration file should contain noiseDbm, receiverGainDbm, dbz0 and radarConstant values for each channel.");
    tt->val_offset = (char *) &cal_xml_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./spol_cal.xml");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("ANALYSIS DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'min_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr");
    tt->descr = tdrpStrDup("Minimum SNR for analysis (dB).");
    tt->help = tdrpStrDup("Gates with SNR below this will be ignored.");
    tt->val_offset = (char *) &min_snr - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'max_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_snr");
    tt->descr = tdrpStrDup("Maximum SNR for analysis (dB).");
    tt->help = tdrpStrDup("Gates with SNR above this will be ignored.");
    tt->val_offset = (char *) &max_snr - &_start_;
    tt->single_val.d = 60;
    tt++;
    
    // Parameter 'min_valid_ratio_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_valid_ratio_db");
    tt->descr = tdrpStrDup("Minimum valid Vx/Hx ratio (dB).");
    tt->help = tdrpStrDup("Sometimes, odd data leads to inappropriate ratios. This puts limits on the ratios to be used in the analysis.");
    tt->val_offset = (char *) &min_valid_ratio_db - &_start_;
    tt->single_val.d = -10;
    tt++;
    
    // Parameter 'max_valid_ratio_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_valid_ratio_db");
    tt->descr = tdrpStrDup("Maximum valid Vx/Hx ratio (dB).");
    tt->help = tdrpStrDup("Sometimes, odd data leads to inappropriate ratios. This puts limits on the ratios to be used in the analysis.");
    tt->val_offset = (char *) &max_valid_ratio_db - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'min_rho_vx_hx'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_rho_vx_hx");
    tt->descr = tdrpStrDup("Minimum RHO_VX_HX.");
    tt->help = tdrpStrDup("Used to limit analysis to above this value. See 'check_rho_vx_hx'.");
    tt->val_offset = (char *) &min_rho_vx_hx - &_start_;
    tt->single_val.d = 0.98;
    tt++;
    
    // Parameter 'max_rho_vx_hx'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_rho_vx_hx");
    tt->descr = tdrpStrDup("Maximum RHO_VX_HX.");
    tt->help = tdrpStrDup("Used to limit the analysis to below this value. See 'check_RHO_VX_HX'.");
    tt->val_offset = (char *) &max_rho_vx_hx - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'min_cpa_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_cpa_for_clutter");
    tt->descr = tdrpStrDup("Minimum CPA for clutter echoes.");
    tt->help = tdrpStrDup("Used to identify likely clutter points for analysis.");
    tt->val_offset = (char *) &min_cpa_for_clutter - &_start_;
    tt->single_val.d = 0.9;
    tt++;
    
    // Parameter 'max_cpa_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_cpa_for_clutter");
    tt->descr = tdrpStrDup("Maximum CPA for clutter echoes.");
    tt->help = tdrpStrDup("Used to identify likely clutter points for analysis.");
    tt->val_offset = (char *) &max_cpa_for_clutter - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'min_cpa_for_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_cpa_for_weather");
    tt->descr = tdrpStrDup("Minimum CPA for weather echoes.");
    tt->help = tdrpStrDup("Used to identify likely weather points for analysis.");
    tt->val_offset = (char *) &min_cpa_for_weather - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'max_cpa_for_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_cpa_for_weather");
    tt->descr = tdrpStrDup("Maximum CPA for weather echoes.");
    tt->help = tdrpStrDup("Used to identify likely weather points for analysis.");
    tt->val_offset = (char *) &max_cpa_for_weather - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'min_cmd_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_cmd_for_clutter");
    tt->descr = tdrpStrDup("Minimum CMD for clutter echoes.");
    tt->help = tdrpStrDup("Used to identify likely clutter points for analysis. Only applies to CfRadial analysis.");
    tt->val_offset = (char *) &min_cmd_for_clutter - &_start_;
    tt->single_val.d = 0.8;
    tt++;
    
    // Parameter 'max_cmd_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_cmd_for_clutter");
    tt->descr = tdrpStrDup("Maximum CMD for clutter echoes.");
    tt->help = tdrpStrDup("Used to identify likely clutter points for analysis. Only applies to CfRadial analysis.");
    tt->val_offset = (char *) &max_cmd_for_clutter - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'min_cmd_for_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_cmd_for_weather");
    tt->descr = tdrpStrDup("Minimum CMD for weather echoes.");
    tt->help = tdrpStrDup("Used to identify likely weather points for analysis. Only applies to CfRadial analysis.");
    tt->val_offset = (char *) &min_cmd_for_weather - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'max_cmd_for_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_cmd_for_weather");
    tt->descr = tdrpStrDup("Maximum CMD for weather echoes.");
    tt->help = tdrpStrDup("Used to identify likely weather points for analysis. Only applies to CfRadial analysis.");
    tt->val_offset = (char *) &max_cmd_for_weather - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'min_range_km_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_range_km_for_clutter");
    tt->descr = tdrpStrDup("Minimum range for clutter analysis (km).");
    tt->help = tdrpStrDup("Ranges less than this will be not be used for clutter analysis.");
    tt->val_offset = (char *) &min_range_km_for_clutter - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'max_range_km_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km_for_clutter");
    tt->descr = tdrpStrDup("Maximum range for clutter analysis (km).");
    tt->help = tdrpStrDup("Ranges greater than this will be not be used for clutter analysis.");
    tt->val_offset = (char *) &max_range_km_for_clutter - &_start_;
    tt->single_val.d = 100;
    tt++;
    
    // Parameter 'min_range_km_for_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_range_km_for_weather");
    tt->descr = tdrpStrDup("Minimum range for weather analysis (km).");
    tt->help = tdrpStrDup("Ranges less than this will be not be used for weather analysis.");
    tt->val_offset = (char *) &min_range_km_for_weather - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'max_range_km_for_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km_for_weather");
    tt->descr = tdrpStrDup("Maximum range for weather analysis (km).");
    tt->help = tdrpStrDup("Ranges greater than this will be not be used for weather analysis.");
    tt->val_offset = (char *) &max_range_km_for_weather - &_start_;
    tt->single_val.d = 100;
    tt++;
    
    // Parameter 'min_elevation_deg_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_elevation_deg_for_clutter");
    tt->descr = tdrpStrDup("Minimum elevation for clutter analysis (deg).");
    tt->help = tdrpStrDup("Elevations less than this will be ignored for clutter analysis.");
    tt->val_offset = (char *) &min_elevation_deg_for_clutter - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'max_elevation_deg_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_elevation_deg_for_clutter");
    tt->descr = tdrpStrDup("Maximum elevation for clutter analysis (deg).");
    tt->help = tdrpStrDup("Elevations greater than this will be ignored for clutter analysis.");
    tt->val_offset = (char *) &max_elevation_deg_for_clutter - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'min_elevation_deg_for_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_elevation_deg_for_weather");
    tt->descr = tdrpStrDup("Minimum elevation for weather analysis (deg).");
    tt->help = tdrpStrDup("Elevations less than this will be ignored for weather analysis.");
    tt->val_offset = (char *) &min_elevation_deg_for_weather - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'max_elevation_deg_for_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_elevation_deg_for_weather");
    tt->descr = tdrpStrDup("Maximum elevation for weather analysis (deg).");
    tt->help = tdrpStrDup("Elevations greater than this will be ignored for weather analysis.");
    tt->val_offset = (char *) &max_elevation_deg_for_weather - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("OUTPUT RESULTS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_results_to_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_results_to_file");
    tt->descr = tdrpStrDup("Option to write the results to a file.");
    tt->help = tdrpStrDup("The file appears in output_dir, and the file name includes the start time for the analysis. If false, results are written to stdout.");
    tt->val_offset = (char *) &write_results_to_file - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'write_metadata_results_to_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_metadata_results_to_file");
    tt->descr = tdrpStrDup("Option to write metadata at the top of the results file.");
    tt->help = tdrpStrDup("If true, the processing metadata will be written to the top of the results file. Each line of metadata will start with the '#' comment character.");
    tt->val_offset = (char *) &write_metadata_results_to_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Dir for output files.");
    tt->help = tdrpStrDup("The results will be written to sub-directories named from the data time.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'file_name_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("file_name_prefix");
    tt->descr = tdrpStrDup("Prefix for output file names.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &file_name_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("cp_results");
    tt++;
    
    // Parameter 'n_pairs_for_time_series_mode'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_pairs_for_time_series_mode");
    tt->descr = tdrpStrDup("Number of pairs for computing results in time series mode.");
    tt->help = tdrpStrDup("We print out results at this frequency.");
    tt->val_offset = (char *) &n_pairs_for_time_series_mode - &_start_;
    tt->single_val.i = 5000;
    tt++;
    
    // Parameter 'min_n_pairs_for_clutter'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_n_pairs_for_clutter");
    tt->descr = tdrpStrDup("Min number of pairs for computing cp ratio in clutter.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &min_n_pairs_for_clutter - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'min_n_pairs_for_weather'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_n_pairs_for_weather");
    tt->descr = tdrpStrDup("Min number of pairs for computing cp ratio in weather.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &min_n_pairs_for_weather - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'column_delimiter_for_output_files'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("column_delimiter_for_output_files");
    tt->descr = tdrpStrDup("Delimiter between data columns in output file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &column_delimiter_for_output_files - &_start_;
    tt->single_val.s = tdrpStrDup(" ");
    tt++;
    
    // Parameter 'write_data_pairs_to_stdout'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_data_pairs_to_stdout");
    tt->descr = tdrpStrDup("Option to write individual hx/vx data pairs to an output file.");
    tt->help = tdrpStrDup("The raw pairs can then be used for generating plots. The file appears in output_dir, and the file name includes the start time for the analysis.");
    tt->val_offset = (char *) &write_data_pairs_to_stdout - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_column_header_for_pair_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_column_header_for_pair_data");
    tt->descr = tdrpStrDup("Option to write columns headers for pair data.");
    tt->help = tdrpStrDup("If true, the first line of output will be a list of column names for the output file.");
    tt->val_offset = (char *) &write_column_header_for_pair_data - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'write_running_results_to_stdout'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_running_results_to_stdout");
    tt->descr = tdrpStrDup("Write running results to stdout.");
    tt->help = tdrpStrDup("If true, we print out the running and global results to stdout.");
    tt->val_offset = (char *) &write_running_results_to_stdout - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("OUTPUT RATIO RESULTS TO SPDB XML");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_ratio_to_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_ratio_to_spdb");
    tt->descr = tdrpStrDup("Option to write out ratio results to SPDB.");
    tt->help = tdrpStrDup("The ratios will be written in XML, stored in SPDB. The data can then be retrieved for plotting or other purposes.");
    tt->val_offset = (char *) &write_ratio_to_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'spdb_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("spdb_output_url");
    tt->descr = tdrpStrDup("URL for SPDB XML.");
    tt->help = tdrpStrDup("For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir");
    tt->val_offset = (char *) &spdb_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("./spdb");
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("RETRIEVING VALUES FROM CFRADIAL XML STATUS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'retrieve_vals_from_xml_status'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("retrieve_vals_from_xml_status");
    tt->descr = tdrpStrDup("Option to retrieve values from XML status block in CfRadial file.");
    tt->help = tdrpStrDup("If TRUE, we will retrieve the status, and add the values to the end of the line written to the ratio file.");
    tt->val_offset = (char *) &retrieve_vals_from_xml_status - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'xml_status_entries'
    // ctype is '_xml_entry_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("xml_status_entries");
    tt->descr = tdrpStrDup("Specify which XML entries to be retrieved.");
    tt->help = tdrpStrDup("\txml_tag_list: list of XML tags used to identify entry. These should be delimited in xml format, using < and >\n\tspecify_label: do you want to use a label instead of the tags to name the value?\n\tlabel: the label to use if specify_label is true\n.");
    tt->array_offset = (char *) &_xml_status_entries - &_start_;
    tt->array_n_offset = (char *) &xml_status_entries_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(xml_entry_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("xml_entry_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xml_tag_list");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_xml_status_entries->xml_tag_list - (char *) _xml_status_entries;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("specify_label");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_xml_status_entries->specify_label - (char *) _xml_status_entries;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("label");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_xml_status_entries->label - (char *) _xml_status_entries;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("<tag1><tag2><tag3>");
      tt->struct_vals[1].b = pTRUE;
      tt->struct_vals[2].s = tdrpStrDup("myLabel");
      tt->struct_vals[3].s = tdrpStrDup("<tag4><tag5>");
      tt->struct_vals[4].b = pFALSE;
      tt->struct_vals[5].s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("RETRIEVING SITE TEMPERATURE FROM SPDB");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_site_temp_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_site_temp_from_spdb");
    tt->descr = tdrpStrDup("Option to read site temperature from SPDB.");
    tt->help = tdrpStrDup("The temperature closest to the radar volume time will be read in.");
    tt->val_offset = (char *) &read_site_temp_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'site_temp_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_spdb_url");
    tt->descr = tdrpStrDup("URL for temperatures from SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://hail:0:pecan/spdb/KSMeso");
    tt++;
    
    // Parameter 'site_temp_station_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_station_name");
    tt->descr = tdrpStrDup("Station name for site temperature.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_station_name - &_start_;
    tt->single_val.s = tdrpStrDup("CRK1");
    tt++;
    
    // Parameter 'site_temp_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("site_temp_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin when finding site temp data (secs).");
    tt->help = tdrpStrDup("We search for the temperature closest in time to the radar volume. This is the search margin on either side of the volume time.");
    tt->val_offset = (char *) &site_temp_search_margin_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("RETRIEVING VERT POINTING RESULTS FROM SPDB");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_vert_point_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_vert_point_from_spdb");
    tt->descr = tdrpStrDup("Option to read vert pointing results from SPDB.");
    tt->help = tdrpStrDup("Vert pointing gives an independent estimate for ZDR correction.");
    tt->val_offset = (char *) &read_vert_point_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'vert_point_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vert_point_spdb_url");
    tt->descr = tdrpStrDup("URL for vert pointing results in SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vert_point_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://hail:0:pecan/spdb/cal/zdr/vert");
    tt++;
    
    // Parameter 'vert_point_radar_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vert_point_radar_name");
    tt->descr = tdrpStrDup("Radar name for vert pointing results.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vert_point_radar_name - &_start_;
    tt->single_val.s = tdrpStrDup("SPOL");
    tt++;
    
    // Parameter 'vert_point_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("vert_point_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin when finding vert pointing results (secs).");
    tt->help = tdrpStrDup("We search for the vert pointing result closest in time to the radar volume. This is the search margin on either side of the volume time. We average the results within this time period.");
    tt->val_offset = (char *) &vert_point_search_margin_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'vert_point_min_valid_count'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("vert_point_min_valid_count");
    tt->descr = tdrpStrDup("Min number of observations for valid vertical pointing results.");
    tt->help = tdrpStrDup("The vertical pointing results can only be trusted if there are sufficient observational points");
    tt->val_offset = (char *) &vert_point_min_valid_count - &_start_;
    tt->single_val.i = 5000;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("RETRIEVING SUNSCAN RESULTS FROM SPDB");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_sunscan_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_sunscan_from_spdb");
    tt->descr = tdrpStrDup("Option to read sun scan results from SPDB.");
    tt->help = tdrpStrDup("Sun scanning, when combined with the CP ratio, gives an independent estimate for ZDR correction.");
    tt->val_offset = (char *) &read_sunscan_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sunscan_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sunscan_spdb_url");
    tt->descr = tdrpStrDup("URL for sun scan results in SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sunscan_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://hail:0:pecan/spdb/spol/suncal/sband");
    tt++;
    
    // Parameter 'sunscan_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sunscan_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin when finding sun scan results (secs).");
    tt->help = tdrpStrDup("We search for the sun scan result closest in time to the radar volume. This is the search margin on either side of the volume time. We average the results within this time period.");
    tt->val_offset = (char *) &sunscan_search_margin_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'sunscan_min_valid_count'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sunscan_min_valid_count");
    tt->descr = tdrpStrDup("Min number of observations for valid sunscan results.");
    tt->help = tdrpStrDup("The sunscan results can only be trusted if there are sufficient observational points");
    tt->val_offset = (char *) &sunscan_min_valid_count - &_start_;
    tt->single_val.i = 5000;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
