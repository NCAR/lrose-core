/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program SpectraScope
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Program name: SpectraScope");
    tt->comment_text = tdrpStrDup("SpectraScope displays radar spectra from SPDB or FMQ.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUG AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'staggered_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("staggered_mode");
    tt->descr = tdrpStrDup("Uses routines in stag_plot.cc, instead of spectra_plot.cc.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &staggered_mode - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("GETTING CLICK-POINT INFO FROM CIDD");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'cidd_shmem_key'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cidd_shmem_key");
    tt->descr = tdrpStrDup("The shared memory key for the CIDD coordinate struct.");
    tt->help = tdrpStrDup("When the user clicks in the CIDD main window, the coordinate struct is updated with the location and time. The time value is used to drive SpectraScope in REALTIME mode.");
    tt->val_offset = (char *) &cidd_shmem_key - &_start_;
    tt->single_val.i = 61500;
    tt++;
    
    // Parameter 'max_search_angle_error'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_search_angle_error");
    tt->descr = tdrpStrDup("Max angular error when searching for spectra close to the click point (deg).");
    tt->help = tdrpStrDup("When the user clicks in CIDD, the (x) location is saved. From this, the elevation, elevation and range of the click point can be determined. The data base is then searched for spectra from a beam close to this. This parameter gives the max angular error allowable in this search.");
    tt->val_offset = (char *) &max_search_angle_error - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_mode'
    // ctype is '_input_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_mode");
    tt->descr = tdrpStrDup("Mode for reading the data");
    tt->help = tdrpStrDup("In SPDB mode, SpectraScope watches the CIDD shared memory for updates of click points from the user. When a new click is detected, a query is made to the SPDB data base for spectra in a time interval ending with the click time. In FMQ mode, SpectraScope reads the latest time series data from an FMQ - File Message Queue. It continually updates as new data is available in the FMQ.");
    tt->val_offset = (char *) &input_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("input_mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("INPUT_SPDB");
      tt->enum_def.fields[0].val = INPUT_SPDB;
      tt->enum_def.fields[1].name = tdrpStrDup("INPUT_FMQ");
      tt->enum_def.fields[1].val = INPUT_FMQ;
    tt->single_val.e = INPUT_SPDB;
    tt++;
    
    // Parameter 'spectra_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("spectra_spdb_url");
    tt->descr = tdrpStrDup("URL for input SPDB data.");
    tt->help = tdrpStrDup("Spectra data is stored in SPDB format at this URL.");
    tt->val_offset = (char *) &spectra_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/spectra");
    tt++;
    
    // Parameter 'search_interval_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("search_interval_secs");
    tt->descr = tdrpStrDup("Length of search interval when reading data (secs).");
    tt->help = tdrpStrDup("The search will end at the end time of the CIDD data, and will start search_interval_secs before that.");
    tt->val_offset = (char *) &search_interval_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'spectra_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("spectra_fmq_url");
    tt->descr = tdrpStrDup("URL for data to be read from File Message Queue.");
    tt->help = tdrpStrDup("This can be on a remote host.");
    tt->val_offset = (char *) &spectra_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmqp:://localhost::fmq/spectra");
    tt++;
    
    // Parameter 'seek_to_start_of_fmq'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("seek_to_start_of_fmq");
    tt->descr = tdrpStrDup("Option to seek to the start of the input FMQ.");
    tt->help = tdrpStrDup("If FALSE, the program will seek to the end of the fmq and only read in new data. If TRUE, it will start reading from the beginning of the FMQ.");
    tt->val_offset = (char *) &seek_to_start_of_fmq - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'fmq_read_delay_msecs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("fmq_read_delay_msecs");
    tt->descr = tdrpStrDup("Delay between reads to the input FMQ (millisecs).");
    tt->help = tdrpStrDup("Delaying the read operation allows you to manage the bandwidth usage. An increase in delay decreases the bandwidth needed. Set to 0 for no delay.");
    tt->val_offset = (char *) &fmq_read_delay_msecs - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("FFT WINDOW");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'window'
    // ctype is '_window_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("window");
    tt->descr = tdrpStrDup("Window to be applied to time series before computing spectra.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window - &_start_;
    tt->enum_def.name = tdrpStrDup("window_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("WINDOW_RECT");
      tt->enum_def.fields[0].val = WINDOW_RECT;
      tt->enum_def.fields[1].name = tdrpStrDup("WINDOW_VONHANN");
      tt->enum_def.fields[1].val = WINDOW_VONHANN;
      tt->enum_def.fields[2].name = tdrpStrDup("WINDOW_BLACKMAN");
      tt->enum_def.fields[2].val = WINDOW_BLACKMAN;
    tt->single_val.e = WINDOW_VONHANN;
    tt++;
    
    // Parameter 'tpss_notch_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("tpss_notch_width");
    tt->descr = tdrpStrDup("Width of notch for computing TPSS.");
    tt->help = tdrpStrDup("TPSS - Time Series Power Periodicity - is computed as the sum-sq-power within a notch around DC divided by the power-sq in the rest of the spectrum of the time series power.");
    tt->val_offset = (char *) &tpss_notch_width - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("WINDOW SIZE AT STARTUP");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'window_x'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_x");
    tt->descr = tdrpStrDup("The startup x location for the main window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_x - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'window_y'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_y");
    tt->descr = tdrpStrDup("The startup y location for the main window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_y - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'window_height'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_height");
    tt->descr = tdrpStrDup("The startup height for the window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_height - &_start_;
    tt->single_val.i = 800;
    tt++;
    
    // Parameter 'window_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_width");
    tt->descr = tdrpStrDup("The startup width for the window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_width - &_start_;
    tt->single_val.i = 600;
    tt++;
    
    // Parameter 'window_border'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("window_border");
    tt->descr = tdrpStrDup("The border width for the main window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window_border - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("MARGINS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'top_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("top_margin");
    tt->descr = tdrpStrDup("Height of top margin (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &top_margin - &_start_;
    tt->single_val.i = 70;
    tt++;
    
    // Parameter 'bottom_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bottom_margin");
    tt->descr = tdrpStrDup("Width of bottom margin (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bottom_margin - &_start_;
    tt->single_val.i = 30;
    tt++;
    
    // Parameter 'left_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("left_margin");
    tt->descr = tdrpStrDup("Width of left margin (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &left_margin - &_start_;
    tt->single_val.i = 50;
    tt++;
    
    // Parameter 'right_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("right_margin");
    tt->descr = tdrpStrDup("Width of right margin (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &right_margin - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'subplot_top_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("subplot_top_margin");
    tt->descr = tdrpStrDup("Height of top margin of each subplot (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &subplot_top_margin - &_start_;
    tt->single_val.i = 30;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("PLOT DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'window_label'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("window_label");
    tt->descr = tdrpStrDup("Label for window border");
    tt->help = tdrpStrDup("This label will normally appear in the top border of the display window.");
    tt->val_offset = (char *) &window_label - &_start_;
    tt->single_val.s = tdrpStrDup("RADAR SPECTRA");
    tt++;
    
    // Parameter 'plot_ascope_power'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_ascope_power");
    tt->descr = tdrpStrDup("Plot the power as a function of range, as in an A-Scope");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_ascope_power - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_location_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_location_text");
    tt->descr = tdrpStrDup("Option to plot text showing elevation, azimuth etc.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_location_text - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_moments_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_moments_text");
    tt->descr = tdrpStrDup("Option to plot text showing moments values.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_moments_text - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_clutter_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_clutter_text");
    tt->descr = tdrpStrDup("Option to plot text showing clutter properties.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_clutter_text - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_power_spectrum'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_power_spectrum");
    tt->descr = tdrpStrDup("Plot power spectrum");
    tt->help = tdrpStrDup("This includes the filtered spectra.");
    tt->val_offset = (char *) &plot_power_spectrum - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'autoscale_power_spectrum'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("autoscale_power_spectrum");
    tt->descr = tdrpStrDup("Compute scale of power spectrum from data.");
    tt->help = tdrpStrDup("If FALSE, power_spec_min_db and power_spec_max_db will be used.");
    tt->val_offset = (char *) &autoscale_power_spectrum - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_power_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_power_time_series");
    tt->descr = tdrpStrDup("Include time series power plot");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_power_time_series - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'autoscale_power_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("autoscale_power_time_series");
    tt->descr = tdrpStrDup("Compute scale of power time series from data.");
    tt->help = tdrpStrDup("If FALSE, ts_power_min_db and ts_power_max_db will be used.");
    tt->val_offset = (char *) &autoscale_power_time_series - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_real_power_spectrum_over_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_real_power_spectrum_over_time_series");
    tt->descr = tdrpStrDup("Include plot of spectrum of real time series power");
    tt->help = tdrpStrDup("This will be plotted in the same panel as the power time series");
    tt->val_offset = (char *) &plot_real_power_spectrum_over_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_adaptive_filtered_spectrum'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_adaptive_filtered_spectrum");
    tt->descr = tdrpStrDup("Include adaptive-filtered spectrum plot");
    tt->help = tdrpStrDup("This will be plotted in the same panel as the power spectrum");
    tt->val_offset = (char *) &plot_adaptive_filtered_spectrum - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_regression_filtered_spectrum'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_regression_filtered_spectrum");
    tt->descr = tdrpStrDup("Include regression-filtered spectrum plot");
    tt->help = tdrpStrDup("This will be plotted in the same panel as the power spectrum");
    tt->val_offset = (char *) &plot_regression_filtered_spectrum - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'regression_polynomial_order'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("regression_polynomial_order");
    tt->descr = tdrpStrDup("Order of polynomial for regression filtering.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &regression_polynomial_order - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'regression_interp_across_notch'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("regression_interp_across_notch");
    tt->descr = tdrpStrDup("For regression filter - should we interpolate across the notch?");
    tt->help = tdrpStrDup("The regression filter applies quite a deep notch around 0 m/s. This option allows you to interpolate across the notch.");
    tt->val_offset = (char *) &regression_interp_across_notch - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_phase_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_phase_time_series");
    tt->descr = tdrpStrDup("Include plot of time series phase");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_phase_time_series - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'autoscale_phase_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("autoscale_phase_time_series");
    tt->descr = tdrpStrDup("Compute scale of phase time series from data.");
    tt->help = tdrpStrDup("If FALSE, -180 and +180 will be used.");
    tt->val_offset = (char *) &autoscale_phase_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_pulse_to_pulse_phase_diff'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_pulse_to_pulse_phase_diff");
    tt->descr = tdrpStrDup("Include pulse-to-pulse phase difference plot");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_pulse_to_pulse_phase_diff - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_cumulative_phase_diff'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_cumulative_phase_diff");
    tt->descr = tdrpStrDup("Include cumulative phase difference plot");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_cumulative_phase_diff - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_fft_phase_diff'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_fft_phase_diff");
    tt->descr = tdrpStrDup("Include plot of fft phase");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_fft_phase_diff - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_iq_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_iq_time_series");
    tt->descr = tdrpStrDup("Include iq time series");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_iq_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_polyfit_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_polyfit_time_series");
    tt->descr = tdrpStrDup("Plot polynolial fit to time series on top of iq time series");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_polyfit_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_residual_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_residual_time_series");
    tt->descr = tdrpStrDup("Plot time series residuals after de-trending and/or polygon fit");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_residual_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_residual_phase'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_residual_phase");
    tt->descr = tdrpStrDup("Plot phase of time series residuals after polygon fit");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_residual_phase - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_order_1_fit_time_series_for_adaptive_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_order_1_fit_time_series_for_adaptive_filter");
    tt->descr = tdrpStrDup("Option to use order-1 polynomial-filtered time series for adaptive clutter filtering");
    tt->help = tdrpStrDup("This takes precedence over the detrended time series option.");
    tt->val_offset = (char *) &use_order_1_fit_time_series_for_adaptive_filter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_detrended_time_series_for_adaptive_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_detrended_time_series_for_adaptive_filter");
    tt->descr = tdrpStrDup("Option to use detrended time series for adaptive clutter filtering");
    tt->help = tdrpStrDup("Only applies if order-1 option is false.");
    tt->val_offset = (char *) &use_detrended_time_series_for_adaptive_filter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_staggered_half_spectra'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_staggered_half_spectra");
    tt->descr = tdrpStrDup("Plot spectrum of each half of the staggered time series.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_staggered_half_spectra - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_iq_phasor'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_iq_phasor");
    tt->descr = tdrpStrDup("Plot phasor diagram of IQ time series.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_iq_phasor - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("DATA Y-SCALE RANGES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'ascope_power_min_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ascope_power_min_db");
    tt->descr = tdrpStrDup("Min value of ascope power (dBm).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_power_min_db - &_start_;
    tt->single_val.d = -120;
    tt++;
    
    // Parameter 'ascope_power_max_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ascope_power_max_db");
    tt->descr = tdrpStrDup("Max value of ascope power (dBm).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_power_max_db - &_start_;
    tt->single_val.d = -30;
    tt++;
    
    // Parameter 'power_spec_min_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("power_spec_min_db");
    tt->descr = tdrpStrDup("Min value of power spectrum power (dBm).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &power_spec_min_db - &_start_;
    tt->single_val.d = -120;
    tt++;
    
    // Parameter 'power_spec_max_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("power_spec_max_db");
    tt->descr = tdrpStrDup("Max value of power spectrum power (dBm).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &power_spec_max_db - &_start_;
    tt->single_val.d = -30;
    tt++;
    
    // Parameter 'ts_power_min_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ts_power_min_db");
    tt->descr = tdrpStrDup("Min value of time series power (dBm).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ts_power_min_db - &_start_;
    tt->single_val.d = -120;
    tt++;
    
    // Parameter 'ts_power_max_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ts_power_max_db");
    tt->descr = tdrpStrDup("Max value of time series power (dBm).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ts_power_max_db - &_start_;
    tt->single_val.d = -30;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("COLORS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'foreground_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("foreground_color");
    tt->descr = tdrpStrDup("Color of the foreground in the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &foreground_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("background_color");
    tt->descr = tdrpStrDup("Color of the background in the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &background_color - &_start_;
    tt->single_val.s = tdrpStrDup("black");
    tt++;
    
    // Parameter 'grid_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("grid_line_color");
    tt->descr = tdrpStrDup("Color for grid lines on plot.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray20");
    tt++;
    
    // Parameter 'ascope_power_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascope_power_color");
    tt->descr = tdrpStrDup("Color of the plot of power in ascope mode.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ascope_power_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray");
    tt++;
    
    // Parameter 'power_spec_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("power_spec_color");
    tt->descr = tdrpStrDup("Color of the plot of power spectrum.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &power_spec_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'adaptive_filtered_spec_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("adaptive_filtered_spec_color");
    tt->descr = tdrpStrDup("Color of the plot of filtered power spectrum.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &adaptive_filtered_spec_color - &_start_;
    tt->single_val.s = tdrpStrDup("pink");
    tt++;
    
    // Parameter 'regression_filtered_spec_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("regression_filtered_spec_color");
    tt->descr = tdrpStrDup("Color of the plot of regression-filtered spectrum.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &regression_filtered_spec_color - &_start_;
    tt->single_val.s = tdrpStrDup("orange");
    tt++;
    
    // Parameter 'ts_power_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ts_power_color");
    tt->descr = tdrpStrDup("Color of the plot of time series power.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ts_power_color - &_start_;
    tt->single_val.s = tdrpStrDup("green");
    tt++;
    
    // Parameter 'power_real_spec_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("power_real_spec_color");
    tt->descr = tdrpStrDup("Color of the plot of spectrum of real power.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &power_real_spec_color - &_start_;
    tt->single_val.s = tdrpStrDup("cyan");
    tt++;
    
    // Parameter 'ts_phase_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ts_phase_color");
    tt->descr = tdrpStrDup("Color of the plot of time series phase.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ts_phase_color - &_start_;
    tt->single_val.s = tdrpStrDup("orange");
    tt++;
    
    // Parameter 'ts_residual_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ts_residual_color");
    tt->descr = tdrpStrDup("Color of the plot of residual time series phase.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ts_residual_color - &_start_;
    tt->single_val.s = tdrpStrDup("brown");
    tt++;
    
    // Parameter 'phase_diff_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("phase_diff_color");
    tt->descr = tdrpStrDup("Color of the plot of pulse-to-pulse phase difference.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &phase_diff_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'cumulative_phase_diff_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cumulative_phase_diff_color");
    tt->descr = tdrpStrDup("Color of the plot of cumulative phase difference.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &cumulative_phase_diff_color - &_start_;
    tt->single_val.s = tdrpStrDup("pink");
    tt++;
    
    // Parameter 'fft_phase_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fft_phase_color");
    tt->descr = tdrpStrDup("Color of the plot of fft phase.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fft_phase_color - &_start_;
    tt->single_val.s = tdrpStrDup("magenta");
    tt++;
    
    // Parameter 'fft_phase_diff_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fft_phase_diff_color");
    tt->descr = tdrpStrDup("Color of the plot of fft phase difference.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fft_phase_diff_color - &_start_;
    tt->single_val.s = tdrpStrDup("green");
    tt++;
    
    // Parameter 'I_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("I_color");
    tt->descr = tdrpStrDup("Color of I time series.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &I_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'I_polynomial_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("I_polynomial_color");
    tt->descr = tdrpStrDup("Color of polynomial fit to I time series.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &I_polynomial_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray");
    tt++;
    
    // Parameter 'Q_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("Q_color");
    tt->descr = tdrpStrDup("Color of Q time series.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &Q_color - &_start_;
    tt->single_val.s = tdrpStrDup("magenta");
    tt++;
    
    // Parameter 'Q_polynomial_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("Q_polynomial_color");
    tt->descr = tdrpStrDup("Color of polynomial fit to Q time series.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &Q_polynomial_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'detrended_ts_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("detrended_ts_color");
    tt->descr = tdrpStrDup("Color of detrended time series color.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &detrended_ts_color - &_start_;
    tt->single_val.s = tdrpStrDup("cyan");
    tt++;
    
    // Parameter 'short_prt_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("short_prt_color");
    tt->descr = tdrpStrDup("Color of short prt spectrum in staggered prt half-spectrum plot.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &short_prt_color - &_start_;
    tt->single_val.s = tdrpStrDup("green");
    tt++;
    
    // Parameter 'long_prt_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("long_prt_color");
    tt->descr = tdrpStrDup("Color of long prt spectrum in staggered prt half-spectrum plot.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &long_prt_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'noise_level_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("noise_level_color");
    tt->descr = tdrpStrDup("Color of line showing noise level.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &noise_level_color - &_start_;
    tt->single_val.s = tdrpStrDup("brown");
    tt++;
    
    // Parameter 'range_line_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("range_line_color");
    tt->descr = tdrpStrDup("Color of line showing current range.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &range_line_color - &_start_;
    tt->single_val.s = tdrpStrDup("blue");
    tt++;
    
    // Parameter 'iq_phasor_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("iq_phasor_color");
    tt->descr = tdrpStrDup("Color of IQ phasor diagram.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &iq_phasor_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("FONTS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("font_name");
    tt->descr = tdrpStrDup("Name of font for the text on the display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &font_name - &_start_;
    tt->single_val.s = tdrpStrDup("6x13");
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("LINES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("plot_line_width");
    tt->descr = tdrpStrDup("The width of the lines used for the plot traces.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &plot_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
