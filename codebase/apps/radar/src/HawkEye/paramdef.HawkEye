/*********************************************************
 * parameter definitions for HawkEye
 *
 * Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * May 2010
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "HawkEye is the engineering display for the HAWK moments data";
  p_text = "This is a C++ application using the QT GUI toolkit.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Print out checks on ray memory allocation.";
  p_help = "If TRUE, the app will keep track of the number of rays allocated and freed, and print out that information every 100 rays.";
} check_ray_alloc;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to register this process with the process mapper (procmap).";
  p_help = "If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.";
} register_with_procmap;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "REALTIME DATA INPUT";
}

typedef enum {
  IWRF_FMQ_INPUT, 
  IWRF_TCP_INPUT, 
  SIMULATED_INPUT, 
  DSR_FMQ_INPUT // deprecated
} input_mode_t;

paramdef enum input_mode_t {
  p_default = IWRF_FMQ_INPUT;
  p_descr = "Method for reading the input data";
  p_help = "\tIWRF_FMQ_INPUT: read IWRF moments from an FMQ.\n\tIWRF_TCP_INPUT: read an IWRF moments stream from a TCP socket.\n\tSIMULATED_INPUT: internally-generated test pattern data.\n\tDSR_FMQ_INPUT: deprecated.";
} input_mode;

paramdef string {
  p_default = "/tmp/fmq/test";
  p_descr = "DSR_FMQ_INPUT or IWRF_FMQ_INPUT mode: input URL for moments data from an FMQ";
  p_help = "Full url is of the form fmqp:://hostname:port:path. Path does not in lude the file extension.";
} input_fmq_url;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to seek to the start of the input FMQ.";
  p_help = "If TRUE, the program will seek to the start of the fmq and read the entire contents at startup. If FALSE, it will read only new data as it arrives.";
} seek_to_start_of_fmq;

paramdef string {
  p_default = "localhost";
  p_descr = "IWRF_TCP_INPUT: name of host running IWRF moments server.";
} input_tcp_host;

paramdef int {
  p_default = 11000;
  p_descr = "IWRF_TCP_INPUT: port for IWRF moments server.";
} input_tcp_port;

paramdef int {
  p_default = 400;
  p_descr = "Size of the internal queue used to store beams.";
  p_help = "The reader runs in a separate thread, and stored the beams in a queue. The main thread then grabs the available beams from the queue as they become available.";
} beam_queue_size;

commentdef {
  p_header = "ARCHIVE MODE";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to begin in archive mode.";
  p_help = "If TRUE, the app will start up and read data from the archive_data_url, at the specified start time. If the start time is not set, the start time will be set to NOW.";
} begin_in_archive_mode;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "Start time for archive mode.";
  p_help = "In archive mode, data retrieval starts at this time.";
} archive_start_time;

paramdef double {
  p_default = 3600;
  p_descr = "Time span in ARCHIVE mode (secs).";
  p_help = "Archive end time = archive_start_time + archive_time_span.";
} archive_time_span_secs;

paramdef string {
  p_default = "/data/cfradial/kddc";
  p_descr = "URL for archive data files.";
  p_help = "This should point to a CfRadial moments data set.";
} archive_data_url;

commentdef {
  p_header = "STATUS TO BE SHOWN IN GUI";
}

typedef struct {

  boolean azimuth;
  boolean elevation;
  boolean fixed_angle;
  boolean volume_number;
  boolean sweep_number;
  boolean n_samples;
  boolean n_gates;
  boolean gate_length;
  boolean pulse_width;
  boolean prf_mode;
  boolean prf;
  boolean nyquist;
  boolean max_range;
  boolean unambiguous_range;
  boolean measured_power_h;
  boolean measured_power_v;
  boolean scan_name;
  boolean scan_mode;
  boolean polarization_mode;
  boolean latitude;
  boolean longitude;
  boolean altitude;
  boolean altitude_rate;
  boolean sun_elevation;
  boolean sun_azimuth;
  boolean speed;
  boolean heading;
  boolean track;

} show_status_t;

paramdef struct show_status_t {

  p_default = {
    azimuth = true,
    elevation = true,
    fixed_angle = true,
    volume_number = false,
    sweep_number = true,
    n_samples = true,
    n_gates = true,
    gate_length = true,
    pulse_width = true,
    prf_mode = true,
    prf = true,
    nyquist = true,
    max_range = true,
    unambiguous_range = true,
    measured_power_h = false,
    measured_power_v = false,
    scan_name = false,
    scan_mode = true,
    polarization_mode = true,
    latitude = true,
    longitude = true,
    altitude = true,
    altitude_rate = false,
    sun_elevation = true,
    sun_azimuth = true,
    speed = false,
    heading = false,
    track = false
  };

  p_descr = "Indicate which status items to show in GUI.";

  p_help = "These items are shown in the left panel in the GUI. Setting an item to false will hide it in the GUI.";

} show_status_in_gui;

commentdef {
  p_header = "FIELDS TO BE DISPLAYED";
}

paramdef string {
  p_default = "../share/color_scales";
  p_descr = "Directory for color scales";
  p_help = "You can set this in 2 ways:\n\n(a) Set to the absolute path\n\n(b)Set as a path relative to the location of the application binary executable.";
} color_scale_dir;

typedef struct {

  string label;
  string raw_name;
  string filtered_name;
  string units;
  string color_map;
  string shortcut;
} field_t;

paramdef struct field_t {
  p_default = {
    {
      label = "DBZ",
      raw_name = "DBZ",
      filtered_name = "",
      units = "dBZ",
      color_map = "dbz.colors",
      shortcut = "1"
    }
    ,
    {
      label = "REF",
      raw_name = "REF",
      filtered_name = "",
      units = "dBZ",
      color_map = "dbz.colors",
      shortcut = "2"
    }
    ,
    {
      label = "VEL",
      raw_name = "VEL",
      filtered_name = "",
      units = "m/s",
      color_map = "vel.colors",
      shortcut = "3"
    }
    ,
    {
      label = "WIDTH",
      raw_name = "WIDTH",
      filtered_name = "",
      units = "m/s",
      color_map = "width.colors",
      shortcut = "4"
    }
    ,
    {
      label = "SW",
      raw_name = "SW",
      filtered_name = "",
      units = "m/s",
      color_map = "width.colors",
      shortcut = "5"
    }
    ,
    {
      label = "ZDR",
      raw_name = "ZDR",
      filtered_name = "",
      units = "dB",
      color_map = "zdr.colors",
      shortcut = "6"
    }
    ,
    {
      label = "PHIDP",
      raw_name = "PHIDP",
      filtered_name = "",
      units = "deg",
      color_map = "phidp.colors",
      shortcut = "7"
    }
    ,
    {
      label = "RHOHV",
      raw_name = "RHOHV",
      filtered_name = "",
      units = "unitless",
      color_map = "rhohv.colors",
      shortcut = "8"
    }
  };
  p_descr = "Fields to be displayed.";
  p_help = "label: appears on the GUI. "
           "raw_name: unfiltered field name. "
           "filtered_name: field with clutter filter applied. "
           "units: units string for color scale. "
           "color_map: name of color map in color_scale_dir. "
           "shortcut: keyboard character for shortcut. "
           "Specified key will select raw field. "
           "Use ALT-key to get filtered field. ";
} fields[];

paramdef double {
  p_default = 2.0;
  p_descr = "Background rendering time period in minutes.";
  p_help = "Any field which is viewed will continue to be rendered in the "
           "background for this number of minutes.";
  p_min = 0.0;
} background_render_mins;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use field label in the display title.";
  p_help = "If TRUE, the label will be used in the title. If FALSE, the raw_name or filtered name will be used.";
} use_field_label_in_title;

commentdef {
  p_header = "INITIAL MAX RANGE";
}

paramdef double {
  p_default = 225.0;
  p_descr = "Max range for the display (km).";
} max_range_km;

commentdef {
  p_header = "DISPLAY TYPE";
}

typedef enum
{
  POLAR_DISPLAY,
  BSCAN_DISPLAY
} display_mode_t;

paramdef enum display_mode_t
{
  p_descr = "Main display mode.";
  p_help =
  "\tPOLAR_DISPLAY - normal PPI and RHI display. "
  "\tBSCAN_DISPLAY - BSCAN mode.\n";
  p_default = POLAR_DISPLAY;
} display_mode;

commentdef {
  p_header = "NAMES AND LABELS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override radar name in the data.";
} override_radar_name;

paramdef string {
  p_default = "SPOL";
  p_descr = "Radar name if overridden.";
} radar_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to display the site name in the left panel.";
} display_site_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override site name in the data.";
} override_site_name;

paramdef string {
  p_default = "MARSHALL";
  p_descr = "Site name if overridden.";
} site_name;

commentdef {
  p_header = "WINDOW DIMENSIONS AND PLOTTING DETAILS";
}

paramdef int {
  p_default = 1050;
  p_descr = "Startup width of main window (pixels).";
} main_window_width;

paramdef int {
  p_default = 635;
  p_descr = "Startup height of main window (pixels).";
} main_window_height;

paramdef int {
  p_default = 0;
  p_descr = "Startup X for main window (pixels).";
} main_window_start_x;

paramdef int {
  p_default = 0;
  p_descr = "Startup Y for main window (pixels).";
} main_window_start_y;

paramdef int {
  p_default = 40;
  p_descr = "Width of color scale (pixels).";
} color_scale_width;

paramdef int {
  p_default = 12;
  p_descr = "Basic font size for labels (pixels).";
  p_help = "Some of the labels are scaled relative to this size.";
} label_font_size;

paramdef string {
  p_default = "black";
  p_descr = "Color of main display background.";
} background_color;

paramdef string {
  p_default = "white";
  p_descr = "Color of grids and range rings.";
} grid_and_range_ring_color;

paramdef int {
  p_default = 8;
  p_descr = "Font size for labels on range rings (pixels).";
} range_ring_label_font_size;

paramdef int {
  p_default = 11;
  p_descr = "Size of cross at click point (pixels).";
  p_help = "Size of cross drawn at click point, to select data.";
} click_cross_size;

commentdef {
  p_header = "PPI MODE DISPLAY";
}

typedef enum
{
  PPI_FULL,
  PPI_AIRBORNE
} ppi_display_type_t;

paramdef enum ppi_display_type_t
{
  p_descr = "Type of display to use for the PPI window.";
  p_help = "\tPPI_FULL - Display the full 360 degrees of the PPI. "
           "This is the default.\n"
           "\tPPI_AIRBORN - Use the airborn radar PPI display. "
           "This display shows just the 180 degrees of radar pointing forward "
           "from the nose of the plane.\n";
  p_default = PPI_FULL;
} ppi_display_type;

paramdef double {
  p_default = 1.0;
  p_descr = "Aspect ratio (width/height) of PPI window.";
  p_descr = "Set to -1 to allow aspect ratio to vary as the main window is resized.";
} ppi_aspect_ratio;

paramdef boolean {
  p_default = false;
  p_descr = "Set PPI grids overlay on at startup.";
} ppi_grids_on_at_startup;

paramdef boolean {
  p_default = true;
  p_descr = "Set PPI range rings overlay on at startup.";
} ppi_range_rings_on_at_startup;

paramdef boolean {
  p_default = true;
  p_descr = "Set PPI azimuth lines overlay on at startup.";
} ppi_azimuth_lines_on_at_startup;

typedef enum {
  LEGEND_TOP_LEFT, LEGEND_TOP_RIGHT, LEGEND_BOTTOM_LEFT, LEGEND_BOTTOM_RIGHT
} legend_pos_t;

paramdef enum legend_pos_t {
  p_default = LEGEND_TOP_LEFT;
  p_descr = "Position of main legend in the PPI plot window";
  p_help = "This include time, field name and elevation angle.";
} ppi_main_legend_pos;

commentdef {
  p_header = "RHI MODE DISPLAY";
}

paramdef int {
  p_default = 500;
  p_descr = "Startup width of RHI window (pixels).";
} rhi_window_width;

paramdef int {
  p_default = 500;
  p_descr = "Startup height of RHI window (pixels).";
} rhi_window_height;

paramdef int {
  p_default = 1100;
  p_descr = "Startup X for RHI window (pixels).";
} rhi_window_start_x;

paramdef int {
  p_default = 0;
  p_descr = "Startup Y for RHI window (pixels).";
} rhi_window_start_y;

paramdef int {
  p_default = 20;
  p_descr = "Height of top margin in RHI mode (pixels).";
  p_help = "Titles go in the top margin.";
} rhi_top_margin;

paramdef int {
  p_default = 20;
  p_descr = "Height of bottom margin in RHI mode (pixels).";
  p_help = "Time scale goes in the bottom margin.";
} rhi_bottom_margin;

paramdef int {
  p_default = 20;
  p_descr = "Width of left margin in RHI mode (pixels).";
  p_help = "Height scale goes in the left margin.";
} rhi_left_margin;

paramdef int {
  p_default = 20;
  p_descr = "Width of right margin in RHI mode (pixels).";
  p_help = "Height scale goes in the right margin.";
} rhi_right_margin;

paramdef int {
  p_default = 8;
  p_descr = "Font size for labels on range rings (pixels).";
} rhi_label_font_size;

paramdef int {
  p_default = 7;
  p_descr = "Length of ticks on axes (pixels).";
} rhi_axis_tick_len;

paramdef int {
  p_default = 7;
  p_descr = "Ideal number of ticks on axes.";
} rhi_n_ticks_ideal;

paramdef int {
  p_default = 5;
  p_descr = "Margin around some text (pixels).";
} rhi_text_margin;

paramdef boolean {
  p_default = false;
  p_descr = "Flag indicating to display full 180 degrees in RHI window. "
            "If set to false, the RHI window will just display 90 degrees "
            "of the RHI.";
} rhi_display_180_degrees;

paramdef double {
  p_default = 1.0;
  p_descr = "Aspect ratio (width/height) of RHI window.";
  p_descr = "Set to -1 to allow aspect ratio to vary as the RHI window is resized.";
} rhi_aspect_ratio;

paramdef double {
  p_default = 25.0;
  p_descr = "Max height of data in RHI window (km).";
  p_descr = "This can be adjusted interactively.";
} rhi_max_height_km;

paramdef int {
  p_default = 40;
  p_descr = "Width of color scale for RHI window (pixels).";
} rhi_color_scale_width;

paramdef boolean {
  p_default = true;
  p_descr = "Set RHI grids overlay on at startup.";
} rhi_grids_on_at_startup;

paramdef boolean {
  p_default = true;
  p_descr = "Set RHI range rings overlay on at startup.";
} rhi_range_rings_on_at_startup;

paramdef boolean {
  p_default = false;
  p_descr = "Set RHI elevation lines overlay on at startup.";
} rhi_elevation_lines_on_at_startup;

paramdef enum legend_pos_t {
  p_default = LEGEND_TOP_LEFT;
  p_descr = "Position of main legend in the RHI plot window";
  p_help = "This include time, field name and elevation angle.";
} rhi_main_legend_pos;

paramdef int {
  p_default = 360;
  p_descr = "Size of the queue for RHI beams.";
  p_help = "After the queue reaches this size, older beams are discarded.";
} rhi_beam_queue_size;

commentdef {
  p_header = "BSCAN TIME LIMITS";
}

paramdef double {
  p_default = 60;
  p_descr = "Number of seconds in BSCAN display.";
  p_help = "In REALTIME mode, when we reach the right-hand side of the display, the existing plot will be moved left to make room for more data.";
} bscan_time_span_secs;

paramdef boolean {
  p_default = false;
  p_descr = "Option to truncate the plot start time to even seconds.";
  p_help = "If true, we truncate the start time to the previous second.";
} bscan_truncate_start_time;

paramdef int {
  p_default = 3;
  p_descr = "Precision of subseconds in time labels.";
  p_help = "Number of decimals of precision in time labels. Set to 0 for times in integer seconds.";
  p_min = 0;
  p_max = 9;
} bscan_subsec_precision;

commentdef {
  p_header = "BSCAN REALTIME CONTROLS";
}

paramdef double {
  p_default = 0.5;
  p_descr = "What fraction of the existing data to save when moving the plot to the left.";
  p_help = "When we reach the right-hand side of the display, we need to move the plot to the left. This is the fraction of the plot that is saved after the move has taken place.";
} bscan_realtime_fraction_saved;

paramdef double {
  p_default = 0.01;
  p_descr = "Min time between incoming beams (secs).";
  p_help = "If beams arrive too fast, we discard some so that the time between the beams is at least this long.";
} bscan_min_secs_between_reading_beams;

paramdef double {
  p_default = 0.0;
  p_descr = "Min time between rendering (secs).";
  p_help = "Setting this higher makes the display less smooth, but prevents the display from taking up too much CPU and/or GPU.";
} bscan_min_secs_between_rendering_beams;

commentdef {
  p_header = "BSCAN RANGE AND ALTITUDE LIMITS";
}

paramdef boolean {
  p_default = true;
  p_descr = "Specify the min and max range when in range mode.";
  p_help = "If false, we will use the start range and max range in the data.";
} bscan_specify_range_limits;

paramdef double {
  p_default = 0;
  p_descr = "Min range to be plotted (km).";
  p_help = "Used if 'bscan_specify_range_limits' is true.";
} bscan_min_range_km;

paramdef double {
  p_default = 25;
  p_descr = "Max range to be plotted (km).";
  p_help = "Used if 'bscan_specify_range_limits' is true.";
} bscan_max_range_km;

paramdef double {
  p_default = -0.5;
  p_descr = "Min altitude plotted (km).";
} bscan_min_altitude_km;

paramdef double {
  p_default = 25;
  p_descr = "Max altitude plotted (km).";
} bscan_max_altitude_km;

paramdef boolean {
  p_default = false;
  p_descr = "Use feet for altitude units?";
  p_descr = "If true, kft (kilofeet) will be used. If false, km will be used.";
} bscan_altitude_in_feet;

paramdef boolean {
  p_default = false;
  p_descr = "Use feet for range units?";
  p_descr = "If true, kft (kilofeet) will be used. If false, km will be used.";
} bscan_range_in_feet;

typedef enum {
  RANGE_AXIS_UP, RANGE_AXIS_DOWN, RANGE_AXIS_ALTITUDE
} range_axis_mode_t;

paramdef enum range_axis_mode_t {
  p_default = RANGE_AXIS_ALTITUDE;
  p_descr = "Options for plotting range in the vertical scale.";
  p_help = "RANGE_AXIS_UP - instrument is at the bottom, range plotted positively upwards. RANGE_AXIS_DOWN: instrument is at the top, range plotted downwards. RANGE_AXIS_ALTITUDE: vertical scale represents the altitude of the gates in earth coordinates.";
} bscan_range_axis_mode;

commentdef {
  p_header = "BSCAN CENSOR DATA BELOW SURFACE";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to censor data below the measured surface";
  p_descr = "If true, and we can identify the surface echo, suppress data below the surface.";
} bscan_censor_data_below_surface;

paramdef string {
  p_default = "DBZ";
  p_descr = "Name of field used to identify the surface from the data.";
  p_help = "The surface will be identified at the gate with the maximum value in this field.";
} bscan_surface_field;

paramdef double {
  p_default = 0.5;
  p_descr = "Minumum range to the surface (km).";
  p_help = "We will search for the surface echo in the gates beyound this range.";
} bscan_min_range_to_surface_km;

paramdef double {
  p_default = 0.2;
  p_descr = "Margin of data plotted beyond the surface (km).";
  p_help = "We will censor the data beyond the surface gate, plus this range margin.";
} bscan_surface_range_margin_km;

paramdef double {
  p_default = 5;
  p_descr = "Maximum value of the surface field, below the measured surface.";
  p_help = "After finding the range to the surface, we inspect the surface_field values below the surface. If we find values that exceed this parameter, we conclude that the surface cannot be reliably found.";
} bscan_max_field_val_below_surface;

commentdef {
  p_header = "BSCAN MARGINS";
}

paramdef int {
  p_default = 40;
  p_descr = "Height of top margin in BSCAN mode (pixels).";
  p_help = "Titles go in the top margin.";
} bscan_top_margin;

paramdef int {
  p_default = 45;
  p_descr = "Height of bottom margin in BSCAN mode (pixels).";
  p_help = "Time scale goes in the bottom margin.";
} bscan_bottom_margin;

paramdef int {
  p_default = 50;
  p_descr = "Width of left margin in BSCAN mode (pixels).";
  p_help = "Height scale goes in the left margin.";
} bscan_left_margin;

paramdef int {
  p_default = 40;
  p_descr = "Width of right margin in BSCAN mode (pixels).";
  p_help = "Height scale goes in the right margin.";
} bscan_right_margin;

paramdef int {
  p_default = 6;
  p_descr = "Length of ticks on axes (pixels).";
} bscan_axis_tick_len;

paramdef int {
  p_default = 10;
  p_descr = "Ideal number of ticks on axes.";
} bscan_n_ticks_ideal;

paramdef int {
  p_default = 5;
  p_descr = "Margin around some text (pixels).";
} bscan_text_margin;

commentdef {
  p_header = "BSCAN TITLES, LABELS AND AXES";
}

paramdef int {
  p_default = 12;
  p_descr = "Font size of center title (pixels).";
} bscan_title_font_size;

paramdef int {
  p_default = 10;
  p_descr = "Font size of axis labels in bscan (pixels).";
} bscan_axis_label_font_size;

paramdef int {
  p_default = 8;
  p_descr = "Font size of axis values (pixels).";
} bscan_axis_values_font_size;

paramdef string {
  p_default = "white";
  p_descr = "Color of axes in bscan.";
} bscan_axes_color;

paramdef string {
  p_default = "gray";
  p_descr = "Color of grid lines on bscan.";
} bscan_grid_color;

paramdef string {
  p_default = "white";
  p_descr = "Color of labels in bscan.";
} bscan_labels_color;

paramdef boolean {
  p_default = true;
  p_descr = "Option to draw grid lines across plot at regular time intervals.";
} bscan_draw_time_grid_lines;

paramdef boolean {
  p_default = true;
  p_descr = "Option to draw grid lines across plot at regular range intervals.";
} bscan_draw_range_grid_lines;

paramdef boolean {
  p_default = true;
  p_descr = "Option to draw a line for the instrument location.";
  p_descr = "Applies to RANGE_AXIS_SCALE_ALTITUDE option only.";
} bscan_draw_instrument_height_line;

paramdef string {
  p_default = "white";
  p_descr = "Color of instrument height line in ALTITUDE plot.";
} bscan_instrument_height_color;

commentdef {
  p_header = "DISTANCE SCALE";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to plot distance as well as time on the time axis.";
  p_help = "If true, extra tick marks will show the distance in km along the time axis, in addition to the time.";
} bscan_add_distance_to_time_axis;

paramdef int {
  p_default = 50;
  p_descr = "Number of segments to be used for computing distance.";
  p_help = "We divide the rays into this number of segments and then compute the distance travelled during each segment using the change in lat/lon position. We keep the number of segments reasonably small to avoid unnecessary CPU usage.";
} bscan_n_segments_for_computing_distance;

commentdef {
  p_header = "BSCAN LEGENDS";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to plot the starting lat/lon position as a legend.";
  p_help = "This helps in geolocating the data from a mobile system.";
} bscan_plot_starting_latlon_as_legend;

paramdef enum legend_pos_t {
  p_default = LEGEND_TOP_LEFT;
  p_descr = "Position of lat/lon legend in plot";
  p_help = "The starting latitude/longitude will be plotted as a legend in the location specified. See 'bscan_plot_starting_latlon_as_legend'.";
} bscan_starting_latlon_legend_pos;

paramdef boolean {
  p_default = true;
  p_descr = "Option to plot the mean track and speed in a legend.";
  p_help = "This helps in geolocating the data from a mobile system.";
} bscan_plot_mean_track_and_speed_as_legend;

paramdef enum legend_pos_t {
  p_default = LEGEND_TOP_RIGHT;
  p_descr = "Position of track/speed legend in plot";
  p_help = "The mean track and speed will be plotted as a legend in the location specified. See 'bscan_plot_track_and_speed_as_legend'.";
} bscan_mean_track_and_speed_legend_pos;

commentdef {
  p_header = "BSCAN DWELL CONTROLS";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Compute dwell from image size and time range.";
  p_help = "If TRUE, we compute the optimal dwell so that there will be approximately 1 dwell for each pixel in the resulting image. If FALSE, the dwell is specified below.";;
} bscan_archive_dwell_auto;

paramdef double {
  p_default = 0.1;
  p_descr = "Specified dwell time for archive mode (secs).";
} bscan_archive_dwell_secs;

typedef enum {
  DWELL_STATS_MEAN = 0,
  DWELL_STATS_MEDIAN = 1,
  DWELL_STATS_MAXIMUM = 2,
  DWELL_STATS_MINIMUM = 3,
  DWELL_STATS_MIDDLE = 4
} bscan_dwell_stats_t;

paramdef enum bscan_dwell_stats_t {
  p_default = DWELL_STATS_MIDDLE;
  p_descr = "Method for computing stats on the dwell.";
  p_help = "Applies to READ_RAYS_IN_INTERVAL mode. MIDDLE refers to the middle ray in the dwell sequence.";
} bscan_dwell_stats;

commentdef {
  p_header = "SAVING IMAGES TO FILE";
  p_text =
    "In creating files for the field catalog, the file name is of the form:\n\n"
    "\tcategory.platform.YYYYMMDDHHmm.product_name.ext\n\n"
    "The following parameters control the output directory, and the construction of the file name";
}

paramdef string {
  p_default = "/tmp/images/HawkEye";
  p_descr = "Output directory for images generated by this app.";
} images_output_dir;

paramdef boolean {
  p_default = true;
  p_descr = "Option to create a subdirectory for each day.";
  p_descr = "If true, a subdirectory named YYYYMMDD will be appended to images_output_dir.";
} images_write_to_day_dir;

paramdef string {
  p_default = "radar";
  p_descr = "Set the category string.";
  p_help = "If empty, no category will be included.";
} images_file_name_category;

paramdef string {
  p_default = "NSF_NCAR_GV_HCR";
  p_descr = "Set the platform string.";
  p_help = "If empty, no platform will be included.";
} images_file_name_platform;

paramdef string {
  p_default = "png";
  p_descr = "Set the extension string. This also governs the file format. It should be 'png', 'jpg', 'gif' etc.";
  p_help = "An extension is always required";
} images_file_name_extension;

paramdef string {
  p_default = ".";
  p_descr = "Set the delimiter between the parts of the file name.";
  p_help = "NOTE: before the extension the delimited is always a period: '.'.";
} images_file_name_delimiter;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the file name includes a time part: YYYYMMDDHHMMSS.";
  p_help = "If FALSE, the time part will be omitted.";
} images_include_time_part_in_file_name;

paramdef boolean {
  p_default = false;
  p_descr = "Normally the time part include the seconds: YYYYMMDDHHMMSS.";
  p_help = "If FALSE, the SS will be excluuded from the time part.";
} images_include_seconds_in_time_part;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the file name includes the field label (product type).";
  p_help = "If FALSE, the field label will be omitted.";
} images_include_field_label_in_file_name;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write latest_data_info files when an image is created.";
  p_descr = "If true, _latest_data_info files will be written to the output directory, and the file write will be registered with the DataMapper.";
} images_write_latest_data_info;

commentdef {
  p_header = "OPTION TO CREATE IMAGES AUTOMATICALLY";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to create images automatically.";
  p_descr = "If true, images will either be created on a schedule, or the images will be created for a single time and the app will then exit.";
} images_auto_create;

typedef enum {
  CREATE_IMAGES_THEN_EXIT,
  CREATE_IMAGES_ON_REALTIME_SCHEDULE,
  CREATE_IMAGES_ON_ARCHIVE_SCHEDULE
} images_creation_mode_t;

paramdef enum images_creation_mode_t {
  p_default = CREATE_IMAGES_THEN_EXIT;
  p_descr = "Mode for controlling auto image creation.";
  p_help = "\n\nCREATE_IMAGES_FROM_GUI: create images interactively using the GUI.\n\nCREATE_IMAGES_THEN_EXIT: for the specified start time and time span, create an output image for every field in the fields array, and then exit.\n\nCREATE_IMAGES_ON_REALTIME_SCHEDULE: wait for the scheduled time, then generate an image for each field.\n\nCREATE_IMAGES_ON_ARCHIVE_SCHEDULE: for each scheduled time between the start and end times, generate an image for each field.";
} images_creation_mode;

paramdef int {
  p_default = 300;
  p_descr = "Interval at which images are created on schedule (secs).";
  p_help = "The application waits until the interval has passed, plus any specified delay, and then creates the images.";
} images_schedule_interval_secs;

paramdef int {
  p_default = 60;
  p_descr = "Delay between scheduled time and image creation (secs).";
  p_help = "In order to ensure that the data has been written, a delay may be provided. This allows for the writing application to complete writing the data before this application tries to access it.";
} images_schedule_delay_secs;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "Start time for image generation in archive mode.";
  p_help = "Image generation starts with a seach at this time, and the proceeds at increments of images_schedule_interval_secs.";
} images_archive_start_time;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "End time for image generation in archive mode.";
  p_help = "Image generation is terminated when the search time exceeds this end time.";
  p_help = "Only applicable for image generation.";
} images_archive_end_time;

paramdef int {
  p_default = 300;
  p_descr = "Time between scans in archive mode (secs).";
  p_help = "Only applies to POLAR (PPI/RHI) mode, not BSCAN mode.";
} images_scan_interval_secs;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to specify the sweep indexes for the image generation.";
  p_help = "If TRUE, only the specified sweeps will be processed.";
} images_set_sweep_index_list;

paramdef int {
  p_default = { 0, 1, 2 };
  p_descr = "List of valid sweep indexes for image generation.";
  p_help = "See 'images_set_sweep_index_list'. Images will only be generated for the specified sweep indexes.";
} images_sweep_index_list[];

commentdef {
  p_header = "SIMULATION MODE";
}

paramdef int {
  p_default = 10;
  p_descr = "Number of milliseconds to sleep between beams in simulated input "
            "mode.";
} sim_sleep_msecs;

paramdef int {
  p_default = 1000;
  p_descr = "Number of gates in simulated data.";
} sim_n_gates;

paramdef double {
  p_default = 0.075;
  p_descr = "Start range in simulated mode (km).";
} sim_start_range_km;

paramdef double {
  p_default = 0.150;
  p_descr = "Gate spacing in simulated mode (km).";
} sim_gate_spacing_km;

