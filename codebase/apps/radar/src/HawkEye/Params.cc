/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program HawkEye
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("HawkEye is the engineering display for the HAWK moments data");
    tt->comment_text = tdrpStrDup("This is a C++ application using the QT GUI toolkit.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'check_ray_alloc'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_ray_alloc");
    tt->descr = tdrpStrDup("Print out checks on ray memory allocation.");
    tt->help = tdrpStrDup("If TRUE, the app will keep track of the number of rays allocated and freed, and print out that information every 100 rays.");
    tt->val_offset = (char *) &check_ray_alloc - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register this process with the process mapper (procmap).");
    tt->help = tdrpStrDup("If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("REALTIME DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_mode'
    // ctype is '_input_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_mode");
    tt->descr = tdrpStrDup("Method for reading the input data");
    tt->help = tdrpStrDup("\tIWRF_FMQ_INPUT: read IWRF moments from an FMQ.\n\tIWRF_TCP_INPUT: read an IWRF moments stream from a TCP socket.\n\tSIMULATED_INPUT: internally-generated test pattern data.\n\tDSR_FMQ_INPUT: deprecated.");
    tt->val_offset = (char *) &input_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("input_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("IWRF_FMQ_INPUT");
      tt->enum_def.fields[0].val = IWRF_FMQ_INPUT;
      tt->enum_def.fields[1].name = tdrpStrDup("IWRF_TCP_INPUT");
      tt->enum_def.fields[1].val = IWRF_TCP_INPUT;
      tt->enum_def.fields[2].name = tdrpStrDup("SIMULATED_INPUT");
      tt->enum_def.fields[2].val = SIMULATED_INPUT;
      tt->enum_def.fields[3].name = tdrpStrDup("DSR_FMQ_INPUT");
      tt->enum_def.fields[3].val = DSR_FMQ_INPUT;
    tt->single_val.e = IWRF_FMQ_INPUT;
    tt++;
    
    // Parameter 'input_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_url");
    tt->descr = tdrpStrDup("DSR_FMQ_INPUT or IWRF_FMQ_INPUT mode: input URL for moments data from an FMQ");
    tt->help = tdrpStrDup("Full url is of the form fmqp:://hostname:port:path. Path does not in lude the file extension.");
    tt->val_offset = (char *) &input_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/test");
    tt++;
    
    // Parameter 'seek_to_start_of_fmq'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("seek_to_start_of_fmq");
    tt->descr = tdrpStrDup("Option to seek to the start of the input FMQ.");
    tt->help = tdrpStrDup("If TRUE, the program will seek to the start of the fmq and read the entire contents at startup. If FALSE, it will read only new data as it arrives.");
    tt->val_offset = (char *) &seek_to_start_of_fmq - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'input_tcp_host'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_tcp_host");
    tt->descr = tdrpStrDup("IWRF_TCP_INPUT: name of host running IWRF moments server.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_tcp_host - &_start_;
    tt->single_val.s = tdrpStrDup("localhost");
    tt++;
    
    // Parameter 'input_tcp_port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("input_tcp_port");
    tt->descr = tdrpStrDup("IWRF_TCP_INPUT: port for IWRF moments server.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_tcp_port - &_start_;
    tt->single_val.i = 11000;
    tt++;
    
    // Parameter 'beam_queue_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("beam_queue_size");
    tt->descr = tdrpStrDup("Size of the internal queue used to store beams.");
    tt->help = tdrpStrDup("The reader runs in a separate thread, and stored the beams in a queue. The main thread then grabs the available beams from the queue as they become available.");
    tt->val_offset = (char *) &beam_queue_size - &_start_;
    tt->single_val.i = 400;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("ARCHIVE MODE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'begin_in_archive_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("begin_in_archive_mode");
    tt->descr = tdrpStrDup("Option to begin in archive mode.");
    tt->help = tdrpStrDup("If TRUE, the app will start up and read data from the archive_data_url, at the specified start time. If the start time is not set, the start time will be set to NOW.");
    tt->val_offset = (char *) &begin_in_archive_mode - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'archive_start_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("archive_start_time");
    tt->descr = tdrpStrDup("Start time for archive mode.");
    tt->help = tdrpStrDup("In archive mode, data retrieval starts at this time.");
    tt->val_offset = (char *) &archive_start_time - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'archive_time_span_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("archive_time_span_secs");
    tt->descr = tdrpStrDup("Time span in ARCHIVE mode (secs).");
    tt->help = tdrpStrDup("Archive end time = archive_start_time + archive_time_span.");
    tt->val_offset = (char *) &archive_time_span_secs - &_start_;
    tt->single_val.d = 3600;
    tt++;
    
    // Parameter 'archive_data_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("archive_data_url");
    tt->descr = tdrpStrDup("URL for archive data files.");
    tt->help = tdrpStrDup("This should point to a CfRadial moments data set.");
    tt->val_offset = (char *) &archive_data_url - &_start_;
    tt->single_val.s = tdrpStrDup("/data/cfradial/kddc");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("STATUS TO BE SHOWN IN GUI");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'show_status_in_gui'
    // ctype is '_show_status_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("show_status_in_gui");
    tt->descr = tdrpStrDup("Indicate which status items to show in GUI.");
    tt->help = tdrpStrDup("These items are shown in the left panel in the GUI. Setting an item to false will hide it in the GUI.");
    tt->val_offset = (char *) &show_status_in_gui - &_start_;
    tt->struct_def.name = tdrpStrDup("show_status_t");
    tt->struct_def.nfields = 28;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("azimuth");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &show_status_in_gui.azimuth - (char *) &show_status_in_gui;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("elevation");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &show_status_in_gui.elevation - (char *) &show_status_in_gui;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("fixed_angle");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &show_status_in_gui.fixed_angle - (char *) &show_status_in_gui;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("volume_number");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &show_status_in_gui.volume_number - (char *) &show_status_in_gui;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("sweep_number");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &show_status_in_gui.sweep_number - (char *) &show_status_in_gui;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("n_samples");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &show_status_in_gui.n_samples - (char *) &show_status_in_gui;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("n_gates");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &show_status_in_gui.n_gates - (char *) &show_status_in_gui;
      tt->struct_def.fields[7].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[7].fname = tdrpStrDup("gate_length");
      tt->struct_def.fields[7].ptype = BOOL_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &show_status_in_gui.gate_length - (char *) &show_status_in_gui;
      tt->struct_def.fields[8].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[8].fname = tdrpStrDup("pulse_width");
      tt->struct_def.fields[8].ptype = BOOL_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &show_status_in_gui.pulse_width - (char *) &show_status_in_gui;
      tt->struct_def.fields[9].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[9].fname = tdrpStrDup("prf_mode");
      tt->struct_def.fields[9].ptype = BOOL_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &show_status_in_gui.prf_mode - (char *) &show_status_in_gui;
      tt->struct_def.fields[10].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[10].fname = tdrpStrDup("prf");
      tt->struct_def.fields[10].ptype = BOOL_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &show_status_in_gui.prf - (char *) &show_status_in_gui;
      tt->struct_def.fields[11].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[11].fname = tdrpStrDup("nyquist");
      tt->struct_def.fields[11].ptype = BOOL_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &show_status_in_gui.nyquist - (char *) &show_status_in_gui;
      tt->struct_def.fields[12].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[12].fname = tdrpStrDup("max_range");
      tt->struct_def.fields[12].ptype = BOOL_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &show_status_in_gui.max_range - (char *) &show_status_in_gui;
      tt->struct_def.fields[13].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[13].fname = tdrpStrDup("unambiguous_range");
      tt->struct_def.fields[13].ptype = BOOL_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &show_status_in_gui.unambiguous_range - (char *) &show_status_in_gui;
      tt->struct_def.fields[14].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[14].fname = tdrpStrDup("measured_power_h");
      tt->struct_def.fields[14].ptype = BOOL_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &show_status_in_gui.measured_power_h - (char *) &show_status_in_gui;
      tt->struct_def.fields[15].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[15].fname = tdrpStrDup("measured_power_v");
      tt->struct_def.fields[15].ptype = BOOL_TYPE;
      tt->struct_def.fields[15].rel_offset = 
        (char *) &show_status_in_gui.measured_power_v - (char *) &show_status_in_gui;
      tt->struct_def.fields[16].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[16].fname = tdrpStrDup("scan_name");
      tt->struct_def.fields[16].ptype = BOOL_TYPE;
      tt->struct_def.fields[16].rel_offset = 
        (char *) &show_status_in_gui.scan_name - (char *) &show_status_in_gui;
      tt->struct_def.fields[17].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[17].fname = tdrpStrDup("scan_mode");
      tt->struct_def.fields[17].ptype = BOOL_TYPE;
      tt->struct_def.fields[17].rel_offset = 
        (char *) &show_status_in_gui.scan_mode - (char *) &show_status_in_gui;
      tt->struct_def.fields[18].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[18].fname = tdrpStrDup("polarization_mode");
      tt->struct_def.fields[18].ptype = BOOL_TYPE;
      tt->struct_def.fields[18].rel_offset = 
        (char *) &show_status_in_gui.polarization_mode - (char *) &show_status_in_gui;
      tt->struct_def.fields[19].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[19].fname = tdrpStrDup("latitude");
      tt->struct_def.fields[19].ptype = BOOL_TYPE;
      tt->struct_def.fields[19].rel_offset = 
        (char *) &show_status_in_gui.latitude - (char *) &show_status_in_gui;
      tt->struct_def.fields[20].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[20].fname = tdrpStrDup("longitude");
      tt->struct_def.fields[20].ptype = BOOL_TYPE;
      tt->struct_def.fields[20].rel_offset = 
        (char *) &show_status_in_gui.longitude - (char *) &show_status_in_gui;
      tt->struct_def.fields[21].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[21].fname = tdrpStrDup("altitude");
      tt->struct_def.fields[21].ptype = BOOL_TYPE;
      tt->struct_def.fields[21].rel_offset = 
        (char *) &show_status_in_gui.altitude - (char *) &show_status_in_gui;
      tt->struct_def.fields[22].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[22].fname = tdrpStrDup("altitude_rate");
      tt->struct_def.fields[22].ptype = BOOL_TYPE;
      tt->struct_def.fields[22].rel_offset = 
        (char *) &show_status_in_gui.altitude_rate - (char *) &show_status_in_gui;
      tt->struct_def.fields[23].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[23].fname = tdrpStrDup("sun_elevation");
      tt->struct_def.fields[23].ptype = BOOL_TYPE;
      tt->struct_def.fields[23].rel_offset = 
        (char *) &show_status_in_gui.sun_elevation - (char *) &show_status_in_gui;
      tt->struct_def.fields[24].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[24].fname = tdrpStrDup("sun_azimuth");
      tt->struct_def.fields[24].ptype = BOOL_TYPE;
      tt->struct_def.fields[24].rel_offset = 
        (char *) &show_status_in_gui.sun_azimuth - (char *) &show_status_in_gui;
      tt->struct_def.fields[25].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[25].fname = tdrpStrDup("speed");
      tt->struct_def.fields[25].ptype = BOOL_TYPE;
      tt->struct_def.fields[25].rel_offset = 
        (char *) &show_status_in_gui.speed - (char *) &show_status_in_gui;
      tt->struct_def.fields[26].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[26].fname = tdrpStrDup("heading");
      tt->struct_def.fields[26].ptype = BOOL_TYPE;
      tt->struct_def.fields[26].rel_offset = 
        (char *) &show_status_in_gui.heading - (char *) &show_status_in_gui;
      tt->struct_def.fields[27].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[27].fname = tdrpStrDup("track");
      tt->struct_def.fields[27].ptype = BOOL_TYPE;
      tt->struct_def.fields[27].rel_offset = 
        (char *) &show_status_in_gui.track - (char *) &show_status_in_gui;
    tt->n_struct_vals = 28;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].b = pTRUE;
      tt->struct_vals[2].b = pTRUE;
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].b = pTRUE;
      tt->struct_vals[5].b = pTRUE;
      tt->struct_vals[6].b = pTRUE;
      tt->struct_vals[7].b = pTRUE;
      tt->struct_vals[8].b = pTRUE;
      tt->struct_vals[9].b = pTRUE;
      tt->struct_vals[10].b = pTRUE;
      tt->struct_vals[11].b = pTRUE;
      tt->struct_vals[12].b = pTRUE;
      tt->struct_vals[13].b = pTRUE;
      tt->struct_vals[14].b = pFALSE;
      tt->struct_vals[15].b = pFALSE;
      tt->struct_vals[16].b = pFALSE;
      tt->struct_vals[17].b = pTRUE;
      tt->struct_vals[18].b = pTRUE;
      tt->struct_vals[19].b = pTRUE;
      tt->struct_vals[20].b = pTRUE;
      tt->struct_vals[21].b = pTRUE;
      tt->struct_vals[22].b = pFALSE;
      tt->struct_vals[23].b = pTRUE;
      tt->struct_vals[24].b = pTRUE;
      tt->struct_vals[25].b = pFALSE;
      tt->struct_vals[26].b = pFALSE;
      tt->struct_vals[27].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("FIELDS TO BE DISPLAYED");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'color_scale_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("color_scale_dir");
    tt->descr = tdrpStrDup("Directory for color scales");
    tt->help = tdrpStrDup("You can set this in 2 ways:\n\n(a) Set to the absolute path\n\n(b)Set as a path relative to the location of the application binary executable.");
    tt->val_offset = (char *) &color_scale_dir - &_start_;
    tt->single_val.s = tdrpStrDup("../share/color_scales");
    tt++;
    
    // Parameter 'fields'
    // ctype is '_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fields");
    tt->descr = tdrpStrDup("Fields to be displayed.");
    tt->help = tdrpStrDup("label: appears on the GUI. raw_name: unfiltered field name. filtered_name: field with clutter filter applied. units: units string for color scale. color_map: name of color map in color_scale_dir. shortcut: keyboard character for shortcut. Specified key will select raw field. Use ALT-key to get filtered field. ");
    tt->array_offset = (char *) &_fields - &_start_;
    tt->array_n_offset = (char *) &fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(field_t);
    tt->array_n = 8;
    tt->struct_def.name = tdrpStrDup("field_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("label");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fields->label - (char *) _fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("raw_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fields->raw_name - (char *) _fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("filtered_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_fields->filtered_name - (char *) _fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("units");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_fields->units - (char *) _fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("color_map");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_fields->color_map - (char *) _fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("string");
      tt->struct_def.fields[5].fname = tdrpStrDup("shortcut");
      tt->struct_def.fields[5].ptype = STRING_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_fields->shortcut - (char *) _fields;
    tt->n_struct_vals = 48;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("DBZ");
      tt->struct_vals[1].s = tdrpStrDup("DBZ");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].s = tdrpStrDup("dBZ");
      tt->struct_vals[4].s = tdrpStrDup("dbz.colors");
      tt->struct_vals[5].s = tdrpStrDup("1");
      tt->struct_vals[6].s = tdrpStrDup("REF");
      tt->struct_vals[7].s = tdrpStrDup("REF");
      tt->struct_vals[8].s = tdrpStrDup("");
      tt->struct_vals[9].s = tdrpStrDup("dBZ");
      tt->struct_vals[10].s = tdrpStrDup("dbz.colors");
      tt->struct_vals[11].s = tdrpStrDup("2");
      tt->struct_vals[12].s = tdrpStrDup("VEL");
      tt->struct_vals[13].s = tdrpStrDup("VEL");
      tt->struct_vals[14].s = tdrpStrDup("");
      tt->struct_vals[15].s = tdrpStrDup("m/s");
      tt->struct_vals[16].s = tdrpStrDup("vel.colors");
      tt->struct_vals[17].s = tdrpStrDup("3");
      tt->struct_vals[18].s = tdrpStrDup("WIDTH");
      tt->struct_vals[19].s = tdrpStrDup("WIDTH");
      tt->struct_vals[20].s = tdrpStrDup("");
      tt->struct_vals[21].s = tdrpStrDup("m/s");
      tt->struct_vals[22].s = tdrpStrDup("width.colors");
      tt->struct_vals[23].s = tdrpStrDup("4");
      tt->struct_vals[24].s = tdrpStrDup("SW");
      tt->struct_vals[25].s = tdrpStrDup("SW");
      tt->struct_vals[26].s = tdrpStrDup("");
      tt->struct_vals[27].s = tdrpStrDup("m/s");
      tt->struct_vals[28].s = tdrpStrDup("width.colors");
      tt->struct_vals[29].s = tdrpStrDup("5");
      tt->struct_vals[30].s = tdrpStrDup("ZDR");
      tt->struct_vals[31].s = tdrpStrDup("ZDR");
      tt->struct_vals[32].s = tdrpStrDup("");
      tt->struct_vals[33].s = tdrpStrDup("dB");
      tt->struct_vals[34].s = tdrpStrDup("zdr.colors");
      tt->struct_vals[35].s = tdrpStrDup("6");
      tt->struct_vals[36].s = tdrpStrDup("PHIDP");
      tt->struct_vals[37].s = tdrpStrDup("PHIDP");
      tt->struct_vals[38].s = tdrpStrDup("");
      tt->struct_vals[39].s = tdrpStrDup("deg");
      tt->struct_vals[40].s = tdrpStrDup("phidp.colors");
      tt->struct_vals[41].s = tdrpStrDup("7");
      tt->struct_vals[42].s = tdrpStrDup("RHOHV");
      tt->struct_vals[43].s = tdrpStrDup("RHOHV");
      tt->struct_vals[44].s = tdrpStrDup("");
      tt->struct_vals[45].s = tdrpStrDup("unitless");
      tt->struct_vals[46].s = tdrpStrDup("rhohv.colors");
      tt->struct_vals[47].s = tdrpStrDup("8");
    tt++;
    
    // Parameter 'background_render_mins'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("background_render_mins");
    tt->descr = tdrpStrDup("Background rendering time period in minutes.");
    tt->help = tdrpStrDup("Any field which is viewed will continue to be rendered in the background for this number of minutes.");
    tt->val_offset = (char *) &background_render_mins - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'use_field_label_in_title'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_field_label_in_title");
    tt->descr = tdrpStrDup("Option to use field label in the display title.");
    tt->help = tdrpStrDup("If TRUE, the label will be used in the title. If FALSE, the raw_name or filtered name will be used.");
    tt->val_offset = (char *) &use_field_label_in_title - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("INITIAL MAX RANGE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km");
    tt->descr = tdrpStrDup("Max range for the display (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_range_km - &_start_;
    tt->single_val.d = 225;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("DISPLAY TYPE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'display_mode'
    // ctype is '_display_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("display_mode");
    tt->descr = tdrpStrDup("Main display mode.");
    tt->help = tdrpStrDup("\tPOLAR_DISPLAY - normal PPI and RHI display. \tBSCAN_DISPLAY - BSCAN mode.\n");
    tt->val_offset = (char *) &display_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("display_mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("POLAR_DISPLAY");
      tt->enum_def.fields[0].val = POLAR_DISPLAY;
      tt->enum_def.fields[1].name = tdrpStrDup("BSCAN_DISPLAY");
      tt->enum_def.fields[1].val = BSCAN_DISPLAY;
    tt->single_val.e = POLAR_DISPLAY;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("NAMES AND LABELS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_radar_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_name");
    tt->descr = tdrpStrDup("Option to override radar name in the data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &override_radar_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radar_name");
    tt->descr = tdrpStrDup("Radar name if overridden.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &radar_name - &_start_;
    tt->single_val.s = tdrpStrDup("SPOL");
    tt++;
    
    // Parameter 'display_site_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("display_site_name");
    tt->descr = tdrpStrDup("Option to display the site name in the left panel.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &display_site_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'override_site_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_site_name");
    tt->descr = tdrpStrDup("Option to override site name in the data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &override_site_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'site_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_name");
    tt->descr = tdrpStrDup("Site name if overridden.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_name - &_start_;
    tt->single_val.s = tdrpStrDup("MARSHALL");
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("WINDOW DIMENSIONS AND PLOTTING DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'main_window_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_width");
    tt->descr = tdrpStrDup("Startup width of main window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_width - &_start_;
    tt->single_val.i = 1050;
    tt++;
    
    // Parameter 'main_window_height'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_height");
    tt->descr = tdrpStrDup("Startup height of main window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_height - &_start_;
    tt->single_val.i = 635;
    tt++;
    
    // Parameter 'main_window_start_x'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_start_x");
    tt->descr = tdrpStrDup("Startup X for main window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_start_x - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'main_window_start_y'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("main_window_start_y");
    tt->descr = tdrpStrDup("Startup Y for main window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &main_window_start_y - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'color_scale_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("color_scale_width");
    tt->descr = tdrpStrDup("Width of color scale (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &color_scale_width - &_start_;
    tt->single_val.i = 40;
    tt++;
    
    // Parameter 'label_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("label_font_size");
    tt->descr = tdrpStrDup("Basic font size for labels (pixels).");
    tt->help = tdrpStrDup("Some of the labels are scaled relative to this size.");
    tt->val_offset = (char *) &label_font_size - &_start_;
    tt->single_val.i = 12;
    tt++;
    
    // Parameter 'background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("background_color");
    tt->descr = tdrpStrDup("Color of main display background.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &background_color - &_start_;
    tt->single_val.s = tdrpStrDup("black");
    tt++;
    
    // Parameter 'grid_and_range_ring_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("grid_and_range_ring_color");
    tt->descr = tdrpStrDup("Color of grids and range rings.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_and_range_ring_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'range_ring_label_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("range_ring_label_font_size");
    tt->descr = tdrpStrDup("Font size for labels on range rings (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &range_ring_label_font_size - &_start_;
    tt->single_val.i = 8;
    tt++;
    
    // Parameter 'click_cross_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("click_cross_size");
    tt->descr = tdrpStrDup("Size of cross at click point (pixels).");
    tt->help = tdrpStrDup("Size of cross drawn at click point, to select data.");
    tt->val_offset = (char *) &click_cross_size - &_start_;
    tt->single_val.i = 11;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("PPI MODE DISPLAY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'ppi_display_type'
    // ctype is '_ppi_display_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("ppi_display_type");
    tt->descr = tdrpStrDup("Type of display to use for the PPI window.");
    tt->help = tdrpStrDup("\tPPI_FULL - Display the full 360 degrees of the PPI. This is the default.\n\tPPI_AIRBORN - Use the airborn radar PPI display. This display shows just the 180 degrees of radar pointing forward from the nose of the plane.\n");
    tt->val_offset = (char *) &ppi_display_type - &_start_;
    tt->enum_def.name = tdrpStrDup("ppi_display_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PPI_FULL");
      tt->enum_def.fields[0].val = PPI_FULL;
      tt->enum_def.fields[1].name = tdrpStrDup("PPI_AIRBORNE");
      tt->enum_def.fields[1].val = PPI_AIRBORNE;
    tt->single_val.e = PPI_FULL;
    tt++;
    
    // Parameter 'ppi_aspect_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ppi_aspect_ratio");
    tt->descr = tdrpStrDup("Aspect ratio (width/height) of PPI window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ppi_aspect_ratio - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'ppi_grids_on_at_startup'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ppi_grids_on_at_startup");
    tt->descr = tdrpStrDup("Set PPI grids overlay on at startup.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ppi_grids_on_at_startup - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ppi_range_rings_on_at_startup'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ppi_range_rings_on_at_startup");
    tt->descr = tdrpStrDup("Set PPI range rings overlay on at startup.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ppi_range_rings_on_at_startup - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'ppi_azimuth_lines_on_at_startup'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ppi_azimuth_lines_on_at_startup");
    tt->descr = tdrpStrDup("Set PPI azimuth lines overlay on at startup.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ppi_azimuth_lines_on_at_startup - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'ppi_main_legend_pos'
    // ctype is '_legend_pos_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("ppi_main_legend_pos");
    tt->descr = tdrpStrDup("Position of main legend in the PPI plot window");
    tt->help = tdrpStrDup("This include time, field name and elevation angle.");
    tt->val_offset = (char *) &ppi_main_legend_pos - &_start_;
    tt->enum_def.name = tdrpStrDup("legend_pos_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LEGEND_TOP_LEFT");
      tt->enum_def.fields[0].val = LEGEND_TOP_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("LEGEND_TOP_RIGHT");
      tt->enum_def.fields[1].val = LEGEND_TOP_RIGHT;
      tt->enum_def.fields[2].name = tdrpStrDup("LEGEND_BOTTOM_LEFT");
      tt->enum_def.fields[2].val = LEGEND_BOTTOM_LEFT;
      tt->enum_def.fields[3].name = tdrpStrDup("LEGEND_BOTTOM_RIGHT");
      tt->enum_def.fields[3].val = LEGEND_BOTTOM_RIGHT;
    tt->single_val.e = LEGEND_TOP_LEFT;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("RHI MODE DISPLAY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'rhi_window_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_window_width");
    tt->descr = tdrpStrDup("Startup width of RHI window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_window_width - &_start_;
    tt->single_val.i = 500;
    tt++;
    
    // Parameter 'rhi_window_height'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_window_height");
    tt->descr = tdrpStrDup("Startup height of RHI window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_window_height - &_start_;
    tt->single_val.i = 500;
    tt++;
    
    // Parameter 'rhi_window_start_x'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_window_start_x");
    tt->descr = tdrpStrDup("Startup X for RHI window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_window_start_x - &_start_;
    tt->single_val.i = 1100;
    tt++;
    
    // Parameter 'rhi_window_start_y'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_window_start_y");
    tt->descr = tdrpStrDup("Startup Y for RHI window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_window_start_y - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'rhi_top_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_top_margin");
    tt->descr = tdrpStrDup("Height of top margin in RHI mode (pixels).");
    tt->help = tdrpStrDup("Titles go in the top margin.");
    tt->val_offset = (char *) &rhi_top_margin - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'rhi_bottom_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_bottom_margin");
    tt->descr = tdrpStrDup("Height of bottom margin in RHI mode (pixels).");
    tt->help = tdrpStrDup("Time scale goes in the bottom margin.");
    tt->val_offset = (char *) &rhi_bottom_margin - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'rhi_left_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_left_margin");
    tt->descr = tdrpStrDup("Width of left margin in RHI mode (pixels).");
    tt->help = tdrpStrDup("Height scale goes in the left margin.");
    tt->val_offset = (char *) &rhi_left_margin - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'rhi_right_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_right_margin");
    tt->descr = tdrpStrDup("Width of right margin in RHI mode (pixels).");
    tt->help = tdrpStrDup("Height scale goes in the right margin.");
    tt->val_offset = (char *) &rhi_right_margin - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'rhi_label_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_label_font_size");
    tt->descr = tdrpStrDup("Font size for labels on range rings (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_label_font_size - &_start_;
    tt->single_val.i = 8;
    tt++;
    
    // Parameter 'rhi_axis_tick_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_axis_tick_len");
    tt->descr = tdrpStrDup("Length of ticks on axes (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_axis_tick_len - &_start_;
    tt->single_val.i = 7;
    tt++;
    
    // Parameter 'rhi_n_ticks_ideal'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_n_ticks_ideal");
    tt->descr = tdrpStrDup("Ideal number of ticks on axes.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_n_ticks_ideal - &_start_;
    tt->single_val.i = 7;
    tt++;
    
    // Parameter 'rhi_text_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_text_margin");
    tt->descr = tdrpStrDup("Margin around some text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_text_margin - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'rhi_display_180_degrees'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("rhi_display_180_degrees");
    tt->descr = tdrpStrDup("Flag indicating to display full 180 degrees in RHI window. If set to false, the RHI window will just display 90 degrees of the RHI.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_display_180_degrees - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rhi_aspect_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rhi_aspect_ratio");
    tt->descr = tdrpStrDup("Aspect ratio (width/height) of RHI window.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_aspect_ratio - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'rhi_max_height_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rhi_max_height_km");
    tt->descr = tdrpStrDup("Max height of data in RHI window (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_max_height_km - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'rhi_color_scale_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_color_scale_width");
    tt->descr = tdrpStrDup("Width of color scale for RHI window (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_color_scale_width - &_start_;
    tt->single_val.i = 40;
    tt++;
    
    // Parameter 'rhi_grids_on_at_startup'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("rhi_grids_on_at_startup");
    tt->descr = tdrpStrDup("Set RHI grids overlay on at startup.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_grids_on_at_startup - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'rhi_range_rings_on_at_startup'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("rhi_range_rings_on_at_startup");
    tt->descr = tdrpStrDup("Set RHI range rings overlay on at startup.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_range_rings_on_at_startup - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'rhi_elevation_lines_on_at_startup'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("rhi_elevation_lines_on_at_startup");
    tt->descr = tdrpStrDup("Set RHI elevation lines overlay on at startup.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhi_elevation_lines_on_at_startup - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rhi_main_legend_pos'
    // ctype is '_legend_pos_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("rhi_main_legend_pos");
    tt->descr = tdrpStrDup("Position of main legend in the RHI plot window");
    tt->help = tdrpStrDup("This include time, field name and elevation angle.");
    tt->val_offset = (char *) &rhi_main_legend_pos - &_start_;
    tt->enum_def.name = tdrpStrDup("legend_pos_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LEGEND_TOP_LEFT");
      tt->enum_def.fields[0].val = LEGEND_TOP_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("LEGEND_TOP_RIGHT");
      tt->enum_def.fields[1].val = LEGEND_TOP_RIGHT;
      tt->enum_def.fields[2].name = tdrpStrDup("LEGEND_BOTTOM_LEFT");
      tt->enum_def.fields[2].val = LEGEND_BOTTOM_LEFT;
      tt->enum_def.fields[3].name = tdrpStrDup("LEGEND_BOTTOM_RIGHT");
      tt->enum_def.fields[3].val = LEGEND_BOTTOM_RIGHT;
    tt->single_val.e = LEGEND_TOP_LEFT;
    tt++;
    
    // Parameter 'rhi_beam_queue_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhi_beam_queue_size");
    tt->descr = tdrpStrDup("Size of the queue for RHI beams.");
    tt->help = tdrpStrDup("After the queue reaches this size, older beams are discarded.");
    tt->val_offset = (char *) &rhi_beam_queue_size - &_start_;
    tt->single_val.i = 360;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("BSCAN TIME LIMITS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'bscan_time_span_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_time_span_secs");
    tt->descr = tdrpStrDup("Number of seconds in BSCAN display.");
    tt->help = tdrpStrDup("In REALTIME mode, when we reach the right-hand side of the display, the existing plot will be moved left to make room for more data.");
    tt->val_offset = (char *) &bscan_time_span_secs - &_start_;
    tt->single_val.d = 60;
    tt++;
    
    // Parameter 'bscan_truncate_start_time'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_truncate_start_time");
    tt->descr = tdrpStrDup("Option to truncate the plot start time to even seconds.");
    tt->help = tdrpStrDup("If true, we truncate the start time to the previous second.");
    tt->val_offset = (char *) &bscan_truncate_start_time - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'bscan_subsec_precision'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_subsec_precision");
    tt->descr = tdrpStrDup("Precision of subseconds in time labels.");
    tt->help = tdrpStrDup("Number of decimals of precision in time labels. Set to 0 for times in integer seconds.");
    tt->val_offset = (char *) &bscan_subsec_precision - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 0;
    tt->max_val.i = 9;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("BSCAN REALTIME CONTROLS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'bscan_realtime_fraction_saved'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_realtime_fraction_saved");
    tt->descr = tdrpStrDup("What fraction of the existing data to save when moving the plot to the left.");
    tt->help = tdrpStrDup("When we reach the right-hand side of the display, we need to move the plot to the left. This is the fraction of the plot that is saved after the move has taken place.");
    tt->val_offset = (char *) &bscan_realtime_fraction_saved - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'bscan_min_secs_between_reading_beams'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_min_secs_between_reading_beams");
    tt->descr = tdrpStrDup("Min time between incoming beams (secs).");
    tt->help = tdrpStrDup("If beams arrive too fast, we discard some so that the time between the beams is at least this long.");
    tt->val_offset = (char *) &bscan_min_secs_between_reading_beams - &_start_;
    tt->single_val.d = 0.01;
    tt++;
    
    // Parameter 'bscan_min_secs_between_rendering_beams'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_min_secs_between_rendering_beams");
    tt->descr = tdrpStrDup("Min time between rendering (secs).");
    tt->help = tdrpStrDup("Setting this higher makes the display less smooth, but prevents the display from taking up too much CPU and/or GPU.");
    tt->val_offset = (char *) &bscan_min_secs_between_rendering_beams - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("BSCAN RANGE AND ALTITUDE LIMITS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'bscan_specify_range_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_specify_range_limits");
    tt->descr = tdrpStrDup("Specify the min and max range when in range mode.");
    tt->help = tdrpStrDup("If false, we will use the start range and max range in the data.");
    tt->val_offset = (char *) &bscan_specify_range_limits - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'bscan_min_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_min_range_km");
    tt->descr = tdrpStrDup("Min range to be plotted (km).");
    tt->help = tdrpStrDup("Used if 'bscan_specify_range_limits' is true.");
    tt->val_offset = (char *) &bscan_min_range_km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'bscan_max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_max_range_km");
    tt->descr = tdrpStrDup("Max range to be plotted (km).");
    tt->help = tdrpStrDup("Used if 'bscan_specify_range_limits' is true.");
    tt->val_offset = (char *) &bscan_max_range_km - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'bscan_min_altitude_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_min_altitude_km");
    tt->descr = tdrpStrDup("Min altitude plotted (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_min_altitude_km - &_start_;
    tt->single_val.d = -0.5;
    tt++;
    
    // Parameter 'bscan_max_altitude_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_max_altitude_km");
    tt->descr = tdrpStrDup("Max altitude plotted (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_max_altitude_km - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'bscan_altitude_in_feet'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_altitude_in_feet");
    tt->descr = tdrpStrDup("Use feet for altitude units?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_altitude_in_feet - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'bscan_range_in_feet'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_range_in_feet");
    tt->descr = tdrpStrDup("Use feet for range units?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_range_in_feet - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'bscan_range_axis_mode'
    // ctype is '_range_axis_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("bscan_range_axis_mode");
    tt->descr = tdrpStrDup("Options for plotting range in the vertical scale.");
    tt->help = tdrpStrDup("RANGE_AXIS_UP - instrument is at the bottom, range plotted positively upwards. RANGE_AXIS_DOWN: instrument is at the top, range plotted downwards. RANGE_AXIS_ALTITUDE: vertical scale represents the altitude of the gates in earth coordinates.");
    tt->val_offset = (char *) &bscan_range_axis_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("range_axis_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("RANGE_AXIS_UP");
      tt->enum_def.fields[0].val = RANGE_AXIS_UP;
      tt->enum_def.fields[1].name = tdrpStrDup("RANGE_AXIS_DOWN");
      tt->enum_def.fields[1].val = RANGE_AXIS_DOWN;
      tt->enum_def.fields[2].name = tdrpStrDup("RANGE_AXIS_ALTITUDE");
      tt->enum_def.fields[2].val = RANGE_AXIS_ALTITUDE;
    tt->single_val.e = RANGE_AXIS_ALTITUDE;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("BSCAN CENSOR DATA BELOW SURFACE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'bscan_censor_data_below_surface'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_censor_data_below_surface");
    tt->descr = tdrpStrDup("Option to censor data below the measured surface");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_censor_data_below_surface - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'bscan_surface_field'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("bscan_surface_field");
    tt->descr = tdrpStrDup("Name of field used to identify the surface from the data.");
    tt->help = tdrpStrDup("The surface will be identified at the gate with the maximum value in this field.");
    tt->val_offset = (char *) &bscan_surface_field - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'bscan_min_range_to_surface_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_min_range_to_surface_km");
    tt->descr = tdrpStrDup("Minumum range to the surface (km).");
    tt->help = tdrpStrDup("We will search for the surface echo in the gates beyound this range.");
    tt->val_offset = (char *) &bscan_min_range_to_surface_km - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'bscan_surface_range_margin_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_surface_range_margin_km");
    tt->descr = tdrpStrDup("Margin of data plotted beyond the surface (km).");
    tt->help = tdrpStrDup("We will censor the data beyond the surface gate, plus this range margin.");
    tt->val_offset = (char *) &bscan_surface_range_margin_km - &_start_;
    tt->single_val.d = 0.2;
    tt++;
    
    // Parameter 'bscan_max_field_val_below_surface'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_max_field_val_below_surface");
    tt->descr = tdrpStrDup("Maximum value of the surface field, below the measured surface.");
    tt->help = tdrpStrDup("After finding the range to the surface, we inspect the surface_field values below the surface. If we find values that exceed this parameter, we conclude that the surface cannot be reliably found.");
    tt->val_offset = (char *) &bscan_max_field_val_below_surface - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'Comment 16'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 16");
    tt->comment_hdr = tdrpStrDup("BSCAN MARGINS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'bscan_top_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_top_margin");
    tt->descr = tdrpStrDup("Height of top margin in BSCAN mode (pixels).");
    tt->help = tdrpStrDup("Titles go in the top margin.");
    tt->val_offset = (char *) &bscan_top_margin - &_start_;
    tt->single_val.i = 40;
    tt++;
    
    // Parameter 'bscan_bottom_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_bottom_margin");
    tt->descr = tdrpStrDup("Height of bottom margin in BSCAN mode (pixels).");
    tt->help = tdrpStrDup("Time scale goes in the bottom margin.");
    tt->val_offset = (char *) &bscan_bottom_margin - &_start_;
    tt->single_val.i = 45;
    tt++;
    
    // Parameter 'bscan_left_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_left_margin");
    tt->descr = tdrpStrDup("Width of left margin in BSCAN mode (pixels).");
    tt->help = tdrpStrDup("Height scale goes in the left margin.");
    tt->val_offset = (char *) &bscan_left_margin - &_start_;
    tt->single_val.i = 50;
    tt++;
    
    // Parameter 'bscan_right_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_right_margin");
    tt->descr = tdrpStrDup("Width of right margin in BSCAN mode (pixels).");
    tt->help = tdrpStrDup("Height scale goes in the right margin.");
    tt->val_offset = (char *) &bscan_right_margin - &_start_;
    tt->single_val.i = 40;
    tt++;
    
    // Parameter 'bscan_axis_tick_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_axis_tick_len");
    tt->descr = tdrpStrDup("Length of ticks on axes (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_axis_tick_len - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'bscan_n_ticks_ideal'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_n_ticks_ideal");
    tt->descr = tdrpStrDup("Ideal number of ticks on axes.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_n_ticks_ideal - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'bscan_text_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_text_margin");
    tt->descr = tdrpStrDup("Margin around some text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_text_margin - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 17'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 17");
    tt->comment_hdr = tdrpStrDup("BSCAN TITLES, LABELS AND AXES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'bscan_title_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_title_font_size");
    tt->descr = tdrpStrDup("Font size of center title (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_title_font_size - &_start_;
    tt->single_val.i = 12;
    tt++;
    
    // Parameter 'bscan_axis_label_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_axis_label_font_size");
    tt->descr = tdrpStrDup("Font size of axis labels in bscan (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_axis_label_font_size - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'bscan_axis_values_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_axis_values_font_size");
    tt->descr = tdrpStrDup("Font size of axis values (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_axis_values_font_size - &_start_;
    tt->single_val.i = 8;
    tt++;
    
    // Parameter 'bscan_axes_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("bscan_axes_color");
    tt->descr = tdrpStrDup("Color of axes in bscan.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_axes_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'bscan_grid_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("bscan_grid_color");
    tt->descr = tdrpStrDup("Color of grid lines on bscan.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_grid_color - &_start_;
    tt->single_val.s = tdrpStrDup("gray");
    tt++;
    
    // Parameter 'bscan_labels_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("bscan_labels_color");
    tt->descr = tdrpStrDup("Color of labels in bscan.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_labels_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'bscan_draw_time_grid_lines'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_draw_time_grid_lines");
    tt->descr = tdrpStrDup("Option to draw grid lines across plot at regular time intervals.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_draw_time_grid_lines - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'bscan_draw_range_grid_lines'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_draw_range_grid_lines");
    tt->descr = tdrpStrDup("Option to draw grid lines across plot at regular range intervals.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_draw_range_grid_lines - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'bscan_draw_instrument_height_line'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_draw_instrument_height_line");
    tt->descr = tdrpStrDup("Option to draw a line for the instrument location.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_draw_instrument_height_line - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'bscan_instrument_height_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("bscan_instrument_height_color");
    tt->descr = tdrpStrDup("Color of instrument height line in ALTITUDE plot.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_instrument_height_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'Comment 18'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 18");
    tt->comment_hdr = tdrpStrDup("DISTANCE SCALE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'bscan_add_distance_to_time_axis'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_add_distance_to_time_axis");
    tt->descr = tdrpStrDup("Option to plot distance as well as time on the time axis.");
    tt->help = tdrpStrDup("If true, extra tick marks will show the distance in km along the time axis, in addition to the time.");
    tt->val_offset = (char *) &bscan_add_distance_to_time_axis - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'bscan_n_segments_for_computing_distance'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("bscan_n_segments_for_computing_distance");
    tt->descr = tdrpStrDup("Number of segments to be used for computing distance.");
    tt->help = tdrpStrDup("We divide the rays into this number of segments and then compute the distance travelled during each segment using the change in lat/lon position. We keep the number of segments reasonably small to avoid unnecessary CPU usage.");
    tt->val_offset = (char *) &bscan_n_segments_for_computing_distance - &_start_;
    tt->single_val.i = 50;
    tt++;
    
    // Parameter 'Comment 19'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 19");
    tt->comment_hdr = tdrpStrDup("BSCAN LEGENDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'bscan_plot_starting_latlon_as_legend'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_plot_starting_latlon_as_legend");
    tt->descr = tdrpStrDup("Option to plot the starting lat/lon position as a legend.");
    tt->help = tdrpStrDup("This helps in geolocating the data from a mobile system.");
    tt->val_offset = (char *) &bscan_plot_starting_latlon_as_legend - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'bscan_starting_latlon_legend_pos'
    // ctype is '_legend_pos_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("bscan_starting_latlon_legend_pos");
    tt->descr = tdrpStrDup("Position of lat/lon legend in plot");
    tt->help = tdrpStrDup("The starting latitude/longitude will be plotted as a legend in the location specified. See 'bscan_plot_starting_latlon_as_legend'.");
    tt->val_offset = (char *) &bscan_starting_latlon_legend_pos - &_start_;
    tt->enum_def.name = tdrpStrDup("legend_pos_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LEGEND_TOP_LEFT");
      tt->enum_def.fields[0].val = LEGEND_TOP_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("LEGEND_TOP_RIGHT");
      tt->enum_def.fields[1].val = LEGEND_TOP_RIGHT;
      tt->enum_def.fields[2].name = tdrpStrDup("LEGEND_BOTTOM_LEFT");
      tt->enum_def.fields[2].val = LEGEND_BOTTOM_LEFT;
      tt->enum_def.fields[3].name = tdrpStrDup("LEGEND_BOTTOM_RIGHT");
      tt->enum_def.fields[3].val = LEGEND_BOTTOM_RIGHT;
    tt->single_val.e = LEGEND_TOP_LEFT;
    tt++;
    
    // Parameter 'bscan_plot_mean_track_and_speed_as_legend'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_plot_mean_track_and_speed_as_legend");
    tt->descr = tdrpStrDup("Option to plot the mean track and speed in a legend.");
    tt->help = tdrpStrDup("This helps in geolocating the data from a mobile system.");
    tt->val_offset = (char *) &bscan_plot_mean_track_and_speed_as_legend - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'bscan_mean_track_and_speed_legend_pos'
    // ctype is '_legend_pos_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("bscan_mean_track_and_speed_legend_pos");
    tt->descr = tdrpStrDup("Position of track/speed legend in plot");
    tt->help = tdrpStrDup("The mean track and speed will be plotted as a legend in the location specified. See 'bscan_plot_track_and_speed_as_legend'.");
    tt->val_offset = (char *) &bscan_mean_track_and_speed_legend_pos - &_start_;
    tt->enum_def.name = tdrpStrDup("legend_pos_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LEGEND_TOP_LEFT");
      tt->enum_def.fields[0].val = LEGEND_TOP_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("LEGEND_TOP_RIGHT");
      tt->enum_def.fields[1].val = LEGEND_TOP_RIGHT;
      tt->enum_def.fields[2].name = tdrpStrDup("LEGEND_BOTTOM_LEFT");
      tt->enum_def.fields[2].val = LEGEND_BOTTOM_LEFT;
      tt->enum_def.fields[3].name = tdrpStrDup("LEGEND_BOTTOM_RIGHT");
      tt->enum_def.fields[3].val = LEGEND_BOTTOM_RIGHT;
    tt->single_val.e = LEGEND_TOP_RIGHT;
    tt++;
    
    // Parameter 'Comment 20'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 20");
    tt->comment_hdr = tdrpStrDup("BSCAN DWELL CONTROLS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'bscan_archive_dwell_auto'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("bscan_archive_dwell_auto");
    tt->descr = tdrpStrDup("Compute dwell from image size and time range.");
    tt->help = tdrpStrDup("If TRUE, we compute the optimal dwell so that there will be approximately 1 dwell for each pixel in the resulting image. If FALSE, the dwell is specified below.");
    tt->val_offset = (char *) &bscan_archive_dwell_auto - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'bscan_archive_dwell_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bscan_archive_dwell_secs");
    tt->descr = tdrpStrDup("Specified dwell time for archive mode (secs).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bscan_archive_dwell_secs - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'bscan_dwell_stats'
    // ctype is '_bscan_dwell_stats_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("bscan_dwell_stats");
    tt->descr = tdrpStrDup("Method for computing stats on the dwell.");
    tt->help = tdrpStrDup("Applies to READ_RAYS_IN_INTERVAL mode. MIDDLE refers to the middle ray in the dwell sequence.");
    tt->val_offset = (char *) &bscan_dwell_stats - &_start_;
    tt->enum_def.name = tdrpStrDup("bscan_dwell_stats_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DWELL_STATS_MEAN");
      tt->enum_def.fields[0].val = DWELL_STATS_MEAN;
      tt->enum_def.fields[1].name = tdrpStrDup("DWELL_STATS_MEDIAN");
      tt->enum_def.fields[1].val = DWELL_STATS_MEDIAN;
      tt->enum_def.fields[2].name = tdrpStrDup("DWELL_STATS_MAXIMUM");
      tt->enum_def.fields[2].val = DWELL_STATS_MAXIMUM;
      tt->enum_def.fields[3].name = tdrpStrDup("DWELL_STATS_MINIMUM");
      tt->enum_def.fields[3].val = DWELL_STATS_MINIMUM;
      tt->enum_def.fields[4].name = tdrpStrDup("DWELL_STATS_MIDDLE");
      tt->enum_def.fields[4].val = DWELL_STATS_MIDDLE;
    tt->single_val.e = DWELL_STATS_MIDDLE;
    tt++;
    
    // Parameter 'Comment 21'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 21");
    tt->comment_hdr = tdrpStrDup("SAVING IMAGES TO FILE");
    tt->comment_text = tdrpStrDup("In creating files for the field catalog, the file name is of the form:\n\n\tcategory.platform.YYYYMMDDHHmm.product_name.ext\n\nThe following parameters control the output directory, and the construction of the file name");
    tt++;
    
    // Parameter 'images_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("images_output_dir");
    tt->descr = tdrpStrDup("Output directory for images generated by this app.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &images_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/images/HawkEye");
    tt++;
    
    // Parameter 'images_write_to_day_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("images_write_to_day_dir");
    tt->descr = tdrpStrDup("Option to create a subdirectory for each day.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &images_write_to_day_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'images_file_name_category'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("images_file_name_category");
    tt->descr = tdrpStrDup("Set the category string.");
    tt->help = tdrpStrDup("If empty, no category will be included.");
    tt->val_offset = (char *) &images_file_name_category - &_start_;
    tt->single_val.s = tdrpStrDup("radar");
    tt++;
    
    // Parameter 'images_file_name_platform'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("images_file_name_platform");
    tt->descr = tdrpStrDup("Set the platform string.");
    tt->help = tdrpStrDup("If empty, no platform will be included.");
    tt->val_offset = (char *) &images_file_name_platform - &_start_;
    tt->single_val.s = tdrpStrDup("NSF_NCAR_GV_HCR");
    tt++;
    
    // Parameter 'images_file_name_extension'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("images_file_name_extension");
    tt->descr = tdrpStrDup("Set the extension string. This also governs the file format. It should be 'png', 'jpg', 'gif' etc.");
    tt->help = tdrpStrDup("An extension is always required");
    tt->val_offset = (char *) &images_file_name_extension - &_start_;
    tt->single_val.s = tdrpStrDup("png");
    tt++;
    
    // Parameter 'images_file_name_delimiter'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("images_file_name_delimiter");
    tt->descr = tdrpStrDup("Set the delimiter between the parts of the file name.");
    tt->help = tdrpStrDup("NOTE: before the extension the delimited is always a period: '.'.");
    tt->val_offset = (char *) &images_file_name_delimiter - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'images_include_time_part_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("images_include_time_part_in_file_name");
    tt->descr = tdrpStrDup("Normally the file name includes a time part: YYYYMMDDHHMMSS.");
    tt->help = tdrpStrDup("If FALSE, the time part will be omitted.");
    tt->val_offset = (char *) &images_include_time_part_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'images_include_seconds_in_time_part'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("images_include_seconds_in_time_part");
    tt->descr = tdrpStrDup("Normally the time part include the seconds: YYYYMMDDHHMMSS.");
    tt->help = tdrpStrDup("If FALSE, the SS will be excluuded from the time part.");
    tt->val_offset = (char *) &images_include_seconds_in_time_part - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'images_include_field_label_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("images_include_field_label_in_file_name");
    tt->descr = tdrpStrDup("Normally the file name includes the field label (product type).");
    tt->help = tdrpStrDup("If FALSE, the field label will be omitted.");
    tt->val_offset = (char *) &images_include_field_label_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'images_write_latest_data_info'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("images_write_latest_data_info");
    tt->descr = tdrpStrDup("Option to write latest_data_info files when an image is created.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &images_write_latest_data_info - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 22'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 22");
    tt->comment_hdr = tdrpStrDup("OPTION TO CREATE IMAGES AUTOMATICALLY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'images_auto_create'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("images_auto_create");
    tt->descr = tdrpStrDup("Option to create images automatically.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &images_auto_create - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'images_creation_mode'
    // ctype is '_images_creation_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("images_creation_mode");
    tt->descr = tdrpStrDup("Mode for controlling auto image creation.");
    tt->help = tdrpStrDup("\n\nCREATE_IMAGES_FROM_GUI: create images interactively using the GUI.\n\nCREATE_IMAGES_THEN_EXIT: for the specified start time and time span, create an output image for every field in the fields array, and then exit.\n\nCREATE_IMAGES_ON_REALTIME_SCHEDULE: wait for the scheduled time, then generate an image for each field.\n\nCREATE_IMAGES_ON_ARCHIVE_SCHEDULE: for each scheduled time between the start and end times, generate an image for each field.");
    tt->val_offset = (char *) &images_creation_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("images_creation_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CREATE_IMAGES_THEN_EXIT");
      tt->enum_def.fields[0].val = CREATE_IMAGES_THEN_EXIT;
      tt->enum_def.fields[1].name = tdrpStrDup("CREATE_IMAGES_ON_REALTIME_SCHEDULE");
      tt->enum_def.fields[1].val = CREATE_IMAGES_ON_REALTIME_SCHEDULE;
      tt->enum_def.fields[2].name = tdrpStrDup("CREATE_IMAGES_ON_ARCHIVE_SCHEDULE");
      tt->enum_def.fields[2].val = CREATE_IMAGES_ON_ARCHIVE_SCHEDULE;
    tt->single_val.e = CREATE_IMAGES_THEN_EXIT;
    tt++;
    
    // Parameter 'images_schedule_interval_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("images_schedule_interval_secs");
    tt->descr = tdrpStrDup("Interval at which images are created on schedule (secs).");
    tt->help = tdrpStrDup("The application waits until the interval has passed, plus any specified delay, and then creates the images.");
    tt->val_offset = (char *) &images_schedule_interval_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'images_schedule_delay_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("images_schedule_delay_secs");
    tt->descr = tdrpStrDup("Delay between scheduled time and image creation (secs).");
    tt->help = tdrpStrDup("In order to ensure that the data has been written, a delay may be provided. This allows for the writing application to complete writing the data before this application tries to access it.");
    tt->val_offset = (char *) &images_schedule_delay_secs - &_start_;
    tt->single_val.i = 60;
    tt++;
    
    // Parameter 'images_archive_start_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("images_archive_start_time");
    tt->descr = tdrpStrDup("Start time for image generation in archive mode.");
    tt->help = tdrpStrDup("Image generation starts with a seach at this time, and the proceeds at increments of images_schedule_interval_secs.");
    tt->val_offset = (char *) &images_archive_start_time - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'images_archive_end_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("images_archive_end_time");
    tt->descr = tdrpStrDup("End time for image generation in archive mode.");
    tt->help = tdrpStrDup("Image generation is terminated when the search time exceeds this end time.");
    tt->val_offset = (char *) &images_archive_end_time - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'images_scan_interval_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("images_scan_interval_secs");
    tt->descr = tdrpStrDup("Time between scans in archive mode (secs).");
    tt->help = tdrpStrDup("Only applies to POLAR (PPI/RHI) mode, not BSCAN mode.");
    tt->val_offset = (char *) &images_scan_interval_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'images_set_sweep_index_list'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("images_set_sweep_index_list");
    tt->descr = tdrpStrDup("Option to specify the sweep indexes for the image generation.");
    tt->help = tdrpStrDup("If TRUE, only the specified sweeps will be processed.");
    tt->val_offset = (char *) &images_set_sweep_index_list - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'images_sweep_index_list'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("images_sweep_index_list");
    tt->descr = tdrpStrDup("List of valid sweep indexes for image generation.");
    tt->help = tdrpStrDup("See 'images_set_sweep_index_list'. Images will only be generated for the specified sweep indexes.");
    tt->array_offset = (char *) &_images_sweep_index_list - &_start_;
    tt->array_n_offset = (char *) &images_sweep_index_list_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].i = 0;
      tt->array_vals[1].i = 1;
      tt->array_vals[2].i = 2;
    tt++;
    
    // Parameter 'Comment 23'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 23");
    tt->comment_hdr = tdrpStrDup("SIMULATION MODE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'sim_sleep_msecs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sim_sleep_msecs");
    tt->descr = tdrpStrDup("Number of milliseconds to sleep between beams in simulated input mode.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sim_sleep_msecs - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'sim_n_gates'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sim_n_gates");
    tt->descr = tdrpStrDup("Number of gates in simulated data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sim_n_gates - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'sim_start_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sim_start_range_km");
    tt->descr = tdrpStrDup("Start range in simulated mode (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sim_start_range_km - &_start_;
    tt->single_val.d = 0.075;
    tt++;
    
    // Parameter 'sim_gate_spacing_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sim_gate_spacing_km");
    tt->descr = tdrpStrDup("Gate spacing in simulated mode (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sim_gate_spacing_km - &_start_;
    tt->single_val.d = 0.15;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
