//////////////////////////////////////////////////////////////////////
// parameter definitions TsStatusMonitor
//
// RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// August 2012
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "TsStatusMonitor reads IWRF time-series data from a file message queue (FMQ). It locates monitoring XML-formatted information in the time series, and writes that information out to SPDB, and in a form suitable for Nagios.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT MODES";
};

typedef enum {
  REALTIME_FMQ, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME_FMQ;
  p_descr = "Operating mode";
  p_help = "In FMQ realtime mode, we open the input_fmq, and read the time series data from the queue. In ARCHIVE mode, we specify a start and end time, and read in the files in this time interval from the input_dir. In FILELIST mode, we move through a list of file names specified on the command line. ";
} mode;

paramdef string {
  p_default = "/tmp/fmq/ts";
  p_descr = "FMQ name. For REALTIME_FMQ input_mode only.";
  p_help = "Path to FMQ files. There are 2 files, one with a .buf extension and one with a .stat extention. This path does not include the extensions.";
} fmq_name;

paramdef int {
  p_default = 60;
  p_descr = "Maximum interval with no data (secs).";
  p_help = "After this time elapses with no data, the status data is considered invalid until the data restarts.";
} data_valid_interval_secs;

paramdef string {
  p_default = "/tmp/time_series";
  p_descr = "Input directory for time series files.";
  p_help = "ARCHIVE mode.";
} archive_data_dir;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "Start time for archive mode.";
  p_help = "In ARCHIVE mode, data retrieval starts at this time.";
} archive_start_time;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "End time for archive mode.";
  p_help = "In ARCHIVE mode, data retrieval ends at this time.";
} archive_end_time;

commentdef {
  p_header = "XML STATUS INPUT";
};

typedef enum {
  XML_ENTRY_BOOLEAN,
  XML_ENTRY_INT,
  XML_ENTRY_DOUBLE,
  XML_ENTRY_STRING
} xml_entry_type_t;

typedef struct {
  string xml_outer_tag;
  string xml_inner_tag;
  xml_entry_type_t entry_type;
  boolean ok_boolean;
  boolean boolean_failure_is_critical;
  double ok_value_lower_limit;
  double ok_value_upper_limit;
  double impaired_value_lower_limit;
  double impaired_value_upper_limit;
  string label;
  string units;
  double graph_min_val;
  double graph_max_val;
  string comment;
  boolean include_in_catalog_stats;
  boolean catalog_omit_if_zero;
  boolean catalog_interpret_as_time;
} xml_entry_t;

paramdef struct xml_entry_t {
  p_default = {
    {
      xml_outer_tag = "HcrTransmitterStatus",
      xml_inner_tag = "SerialConnected",
      entry_type = XML_ENTRY_BOOLEAN,
      ok_boolean = true,
      boolean_failure_is_critical = true,
      ok_value_lower_limit = 0,
      ok_value_upper_limit = 0,
      impaired_value_lower_limit = 0,
      impaired_value_upper_limit = 0,
      label = "",
      units = "",
      graph_min_val = 0,
      graph_max_val = 1,
      comment = "",
      include_in_catalog_stats = true,
      catalog_omit_if_zero = true,
      catalog_interpret_as_time = false
    }
    ,
    {
      xml_outer_tag = "HcrTransmitterStatus",
      xml_inner_tag = "CathodeVoltage",
      entry_type = XML_ENTRY_DOUBLE,
      ok_boolean = true,
      boolean_failure_is_critical = true,
      ok_value_lower_limit = 0,
      ok_value_upper_limit = 10,
      impaired_value_lower_limit = 11,
      impaired_value_upper_limit = 20,
      label = "",
      units = "V",
      graph_min_val = 0,
      graph_max_val = 30,
      comment = "",
      include_in_catalog_stats = true,
      catalog_omit_if_zero = true,
      catalog_interpret_as_time = false
    }
    ,
    {
      xml_outer_tag = "HcrReceiverStatus",
      xml_inner_tag = "PvAftPressure",
      entry_type = XML_ENTRY_DOUBLE,
      ok_boolean = true,
      boolean_failure_is_critical = true,
      ok_value_lower_limit = 10,
      ok_value_upper_limit = 20,
      impaired_value_lower_limit = 5,
      impaired_value_upper_limit = 10,
      label = "",
      units = "psi",
      graph_min_val = 0,
      graph_max_val = 30,
      comment = "",
      include_in_catalog_stats = true,
      catalog_omit_if_zero = true,
      catalog_interpret_as_time = false
    }
  };
  p_descr = "Details of XML entries to process.";
  p_help =
    "\txml_outer_tag: the main tag for the entry\n"
    "\txml_inner_tag: the sub tag for the entry\n"
    "\tentry_type: the type of data stored\n"
    "\tok_boolean: BOOLEAN only: the value for an OK state\n"
    "\tboolean_failure_is_critical: true if FAILURE is critical, false if failure indicates IMPAIRED\n"
    "\tok_value_lower_limit: INT or DOUBLE: the lower limit for an OK state\n"
    "\tok_value_upper_limit: INT or DOUBLE: the upper limit for an OK state\n"
    "\timpaired_value_lower_limit: INT or DOUBLE: the lower limit for an IMPAIRED state\n"
    "\timpaired_value_upper_limit: INT or DOUBLE: the upper limit for an IMPAIRED state\n"
    "\tgraph_min_val: minimum value for history graph\n"
    "\tgraph_max_val: maximim value for history graph\n"
    "\tcomment: if set, appears at end of status line\n"
    "\tinclude_in_catalog_stats: add this entry to the catalog stats\n"
    "\tcatalog_omit_if_zero: do not report in catalog if all values are zero or false\n"
    "\tcatalog_interpret_as_time: treat this value as a time or time string\n"
    ".";
} xml_entries[];

commentdef {
  p_header = "MONITOR TEST PULSE POWER";
  p_text = "If test pulse monitoring is active, an extra XML block will be generate to hold the test pulse powers. The main tag for this block is specified in test_pulse_tag. Within the test pulse block, the following values will the stored, as applicable:\n\tTestPulsePowerHcDb\n\tTestPulsePowerVcDb\n\tTestPulsePowerHxDb\n\tTestPulsePowerVxDb.";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to compute test pulse power and add to monitoring.";
} monitor_test_pulse;

paramdef string {
  p_default = "KaBandTestPulse";
  p_descr = "Tag to delineate test pulse block in output XML.";
} test_pulse_xml_tag;

paramdef double {
  p_default = 145.0;
  p_descr = "Range to test pulse (km).";
  p_help = "We compute the gate number from this range. The power at this gate is averaged over the monitoring interval.";
} test_pulse_range_km;

paramdef int {
  p_default = 5000;
  p_descr = "Number of samples used to compute test pulse power.";
} test_pulse_n_samples;

paramdef boolean {
  p_default = false;
  p_descr = "If this is a dual-polarization system, is it operating in fast alternating mode?";
  p_help = "If true, the HV flag is used to determine which receiver path to use.";
} dual_pol_alternating_mode;

paramdef boolean {
  p_default = false;
  p_descr = "If this is a dual-polarization system, does it have switching receivers?";
  p_help = "If true, then there is a co-pol receiver path and a cross-pol receiver path. If false, there is an H and V receiver path.";
} dual_pol_switching_receivers;

commentdef {
  p_header = "MONITOR GATE 0 VELOCITY";
  p_text = "This is used to make sure the radar is cohering correctly. Only applicable to magnetron radars.";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to monitor the gate 0 velocity - intended for the ka-band.";
} monitor_g0_velocity;

paramdef string {
  p_default = "KaBandG0Velocity";
  p_descr = "Tag to delineate G0 velocity blocki in output XML.";
} g0_velocity_xml_tag;

paramdef double {
  p_default = 0.15;
  p_descr = "Range to test pulse (km).";
  p_help = "We compute the gate number from this range. The velocity at this gate is averaged over the monitoring interval.";
} g0_velocity_range_km;

paramdef int {
  p_default = 1024;
  p_descr = "Number of samples used to compute g0 velocity.";
} g0_velocity_n_samples;

commentdef {
  p_header = "NAGIOS OUTPUT";
};

paramdef boolean {
  p_default = true;
  p_descr = "If true, writes  one file only and then quit.";
} write_to_nagios;

paramdef string {
  p_default = "/tmp/nagios/spol_monitoring";
  p_descr = "File path for NAGIOS data.";
  p_help = "This file is overwritten at regular intervals.";
} nagios_file_path;

paramdef int {
  p_default = 30;
  p_descr = "Interval at which the data is written to NAGIOS (secs).";
} nagios_interval_secs;

paramdef int {
  p_default = 60;
  p_descr = "Length of missing data to generate a warning (secs).";
} nagios_nsecs_missing_for_warning;

paramdef int {
  p_default = 300;
  p_descr = "Length of missing data to generate a critical state (secs).";
} nagios_nsecs_missing_for_critical;

commentdef {
  p_header = "CHECK FOR ANTENNA MOVEMENT";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to only process status if antenna is moving.";
} check_for_moving_antenna;

paramdef string {
  p_default = "AntennaMovement";
  p_descr = "Tag to delineate antenna movement block in output XML.";
} antenna_movement_xml_tag;

paramdef int {
  p_default = 2;
  p_descr = "Minimim time between checks for movement (secs).";
} movement_check_interval;

paramdef double {
  p_default = 0.01;
  p_descr = "Maximum angle change for stationary mode (deg).";
  p_help = "For the antenna to be considered stationary, it must not move by more than this angle in the lockon period.";
} stationary_max_angle_change;

paramdef boolean {
  p_default = false;
  p_descr = "Option to add movement monitoring to nagios.";
} nagios_monitor_antenna_movement;

paramdef int {
  p_default = 30;
  p_descr = "Number of stationary seconds to generate a warning.";
} nagios_antenna_movement_warn_secs;

paramdef int {
  p_default = 60;
  p_descr = "Number of stationary seconds to generate a critical condition.";
} nagios_antenna_movement_crit_secs;

paramdef string {
  p_default = "SBandAntennaMovement";
  p_descr = "Name for antenna movement entry in nagios.";
} nagios_antenna_movement_label;

commentdef {
  p_header = "SPDB OUTPUT";
};

paramdef boolean {
  p_default = false;
  p_descr = "If true, writes status out to SPDB in XML format.";
} write_to_spdb;

paramdef string {
  p_default = "spdbp:://localhost::/tmp/spdb/spol_monitoring";
  p_descr = "URL for SPDB output.";
  p_help = "SPDB data is written to this location.";
} spdb_url;

paramdef int {
  p_default = 10;
  p_descr = "Interval at which the data is written to SPDB (secs).";
} spdb_interval_secs;

paramdef boolean {
  p_default = true;
  p_descr = "If true, compress the SPDB chunks on write.";
} compress_spdb;

typedef enum {
  PUT_OVER, PUT_ADD, PUT_ADD_UNIQUE, PUT_ONCE
} spdb_put_mode_t;

paramdef enum spdb_put_mode_t {
  p_default = PUT_OVER;
  p_descr = "Put mode for SPDB data base.";
  p_help =
  "PUT_OVER - new data will overwrite a previously-stored data for the same time. PUT_ADD: a chunk will be added to the list of chunks stored at a given valid_time. PUT_ADD_UNIQUE: a chunk will be added to the list of data stored at a given valid_time, provided identical data has not already been added. PUT_ONCE: you can only put data for a given time once. Trying to put at the same valid_time again will generate an error. ";
} spdb_put_mode;

commentdef {
  p_header = "STATISTICS OUTPUT TO CATALOG";
};

paramdef boolean {
  p_default = false;
  p_descr = "If true, create text files to send to catalog.";
  p_help = "A tabular style text file is created and sent to the field catalog. This is run on a schedule. The file summarizes the statistics of specified variables over the selected time period.";
} write_stats_files_to_catalog;

paramdef int {
  p_default = 300;
  p_descr = "Interval period over which the stats monitoring is performed (secs).";
  p_help =  "This is the interval over which the monitoring statistics are computed.";
} stats_interval_secs;

paramdef string {
  p_default = "/tmp/hsrl_mon/stats";
  p_descr = "Output directory path.";
  p_help = "Monitoring statistics files will be written to this directory.";
} stats_output_dir;

paramdef boolean {
  p_default = true;
  p_descr = "Option to create a subdirectory for each day.";
  p_descr = "If true, a subdirectory named YYYYMMDD will be appended to stats_output_dir.";
} stats_write_to_day_dir;

paramdef string {
  p_default = "lidar";
  p_descr = "Set the category string.";
  p_help = "If empty, no category will be included.";
} stats_file_name_category;

paramdef string {
  p_default = "NSF_NCAR_GV_HSRL";
  p_descr = "Set the platform string.";
  p_help = "If empty, no platform will be included.";
} stats_file_name_platform;

paramdef string {
  p_default = "txt";
  p_descr = "These are text files, so normally .txt is used.";
  p_help = "An extension is always required";
} stats_file_name_extension;

paramdef string {
  p_default = ".";
  p_descr = "Set the delimiter between the parts of the file name.";
  p_help = "NOTE: the extension the delimited is always a period: '.'.";
} stats_file_name_delimiter;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the file name includes a time part: YYYYMMDDHHMMSS.";
  p_help = "If FALSE, the time part will be omitted.";
} stats_include_time_part_in_file_name;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the time part include the seconds: YYYYMMDDHHMMSS.";
  p_help = "If FALSE, the SS will be excluuded from the time part.";
} stats_include_seconds_in_time_part;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the file name includes the field label (product type).";
  p_help = "If FALSE, the field label will be omitted.";
} stats_include_field_label_in_file_name;

paramdef string {
  p_default = "MonitorStats";
  p_descr = "Field label for stats files.";
} stats_file_field_label;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write latest_data_info files when an image is created.";
  p_descr = "If true, _latest_data_info files will be written to the output directory, and the file write will be registered with the DataMapper.";
} stats_write_latest_data_info;

