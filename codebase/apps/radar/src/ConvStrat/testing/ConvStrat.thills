/**********************************************************************
 * TDRP params for ConvStrat
 **********************************************************************/

//======================================================================
//
// Program name: ConvStrat.
//
// ConvStrat finds convective and stratiform regions within a Cartesian 
//   radar volume.
//
//======================================================================
 
//======================================================================
//
// PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "fdp";

///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// In REALTIME mode, the program waits for a new input file. In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line.
//
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     FILELIST
//

mode = ARCHIVE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_url ///////////////////////////////
//
// URL for input data.
//
// This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, 
//   the file paths are specified on the command line.
//
//
// Type: string
//

input_url = "mdv/radarCart/thills";

///////////// dbz_field_name //////////////////////////
//
// dBZ field name in input MDV files.
//
//
// Type: string
//

dbz_field_name = "DBZH_CLEAN";

//======================================================================
//
// SPECIFYING VERTICAL LEVELS - TEMPERAURE or HEIGHT?.
//
// We need to specify the vertical separation between shallow, mid-level 
//   and high clouds. We use the freezing level to separate warm clouds 
//   and cold clouds. And we use the divergence level to separate the 
//   mid-level clouds from high-level clouds such as anvil. These vertical 
//   limits can be specified as heights MSL (in km), or as temperatures. 
//   If temperatures are used, we read in the temperature profile from a 
//   model.
//
//======================================================================
 
///////////// vert_levels_type ////////////////////////
//
// How we specify the vertical levels.
//
// If temperatures are used, we need to read in the temperature profile 
//   from a model.
//
//
// Type: enum
// Options:
//     VERT_LEVELS_BY_TEMP
//     VERT_LEVELS_BY_HT
//

vert_levels_type = VERT_LEVELS_BY_HT;

///////////// temp_profile_url ////////////////////////
//
// URL for temperature profile data, in MDV/Netcdf-CF format.
//
// We read in the model data that is closest in time to the reflectivity 
//   data.
//
//
// Type: string
//

temp_profile_url = "mdv/model";

///////////// temp_profile_field_name /////////////////
//
// Name of temperature field in the model data. This should be in 
//   degrees C.
//
//
// Type: string
//

temp_profile_field_name = "Temp";

///////////// temp_profile_search_margin //////////////
//
// Search margin for finding the temp profile data (secs).
//
// The temp profile must be within this number of seconds of the dbz 
//   data.
//
//
// Type: int
//

temp_profile_search_margin = 21600;

///////////// freezing_level_ht ///////////////////////
//
// Freezing level height (km).
//
// Used if vert_levels_type = VERT_LEVELS_BY_HT.
//
//
// Type: double
//

freezing_level_ht = 4.5;

///////////// freezing_level_temp /////////////////////
//
// Freezing level temperature (degC).
//
// Used if vert_levels_type = VERT_LEVELS_BY_TEMP.
//
//
// Type: double
//

freezing_level_temp = 0;

///////////// divergence_level_ht /////////////////////
//
// Divergence level height (km).
//
// Convective divergence occurs above this height, forming anvils. Used 
//   if vert_levels_type = VERT_LEVELS_BY_HT.
//
//
// Type: double
//

divergence_level_ht = 8;

///////////// divergence_level_temp ///////////////////
//
// Divergence level temperature (degC).
//
// Convective divergence occurs above this height, forming anvils. Used 
//   if vert_levels_type = VERT_LEVELS_BY_TEMP.
//
//
// Type: double
//

divergence_level_temp = -12;

//======================================================================
//
// ALGORITHM PARAMETERS.
//
//======================================================================
 
///////////// min_valid_height ////////////////////////
//
// Min height used in analysis (km).
//
// Only data at or above this altitude is used.
//
//
// Type: double
//

min_valid_height = 0;

///////////// max_valid_height ////////////////////////
//
// Max height used in analysis (km).
//
// Only data at or below this altitude is used.
//
//
// Type: double
//

max_valid_height = 25;

///////////// min_valid_dbz ///////////////////////////
//
// Minimum reflectivity threshold for this analysis (dBZ).
//
// Reflectivity below this threshold is set to missing.
//
//
// Type: double
//

min_valid_dbz = 10;

///////////// dbz_threshold_for_definite_convection ///
//
// Reflectivity value that indicates definite convection.
//
// If the reflectivity exceeds this value at a point, we assume 
//   convection is definitely active at that point. To use this, we first 
//   compute the column maximum reflectivity. If the column max dbz at a 
//   point exceeds this threshold, then we flag that point as convective.
//
//
// Type: double
//

dbz_threshold_for_definite_convection = 53;

///////////// dbz_for_echo_tops ///////////////////////
//
// Reflectivity for determing echo tops.
//
// Echo tops are defined as the max ht with reflectivity at or above 
//   this value.
//
//
// Type: double
//

dbz_for_echo_tops = 18;

//======================================================================
//
// COMPUTING THE CONVECTIVE RADIUS.
//
// The convective radius is the distance by which identified convection 
//   will be expanded around the convective point. A linear function is 
//   used to compute the radius from the background reflectivity.
//
//======================================================================
 
///////////// background_dbz_radius_km ////////////////
//
// Radius for computing background reflectivity (km).
//
// The background dbz at a point is the mean within this specified 
//   radius of the point.
//
//
// Type: double
//

background_dbz_radius_km = 11;

///////////// conv_radius_function ////////////////////
//
// End points of the linear function to compute the radius from the 
//   background reflectivity.
//
// The radius function varies linearly between the min and max dbz. For 
//   dbz below the min, the min radius applies. For dbz above the max, the 
//   max radius applies.
//
//
// Type: struct
//   typedef struct {
//      double min_dbz;
//      double max_dbz;
//      double min_radius_km;
//      double max_radius_km;
//   }
//
//

conv_radius_function = {
    min_dbz = 22.5,
    max_dbz = 42.5,
    min_radius_km = 1,
    max_radius_km = 5
};

//======================================================================
//
// COMPUTING REFLECTIVITY TEXTURE.
//
//======================================================================
 
///////////// texture_radius_km ///////////////////////
//
// Radius for texture analysis (km).
//
// We determine the reflectivity 'texture' at a point by computing the 
//   standard deviation of the square of the reflectivity, for all grid 
//   points within this radius of the central point. We then compute the 
//   square root of that sdev.
//
//
// Type: double
//

texture_radius_km = 5;

///////////// min_valid_fraction_for_texture //////////
//
// Minimum fraction of surroundingpoints for texture computations.
//
// For a valid computation of texture, we require at least this fraction 
//   of points around the central point to have reflectivity in excess of 
//   min_valid_dbz.
//
//
// Type: double
//

min_valid_fraction_for_texture = 0.25;

///////////// min_texture_for_convection //////////////
//
// Minimum texture for convection at a point.
//
// If the texture at a point exceeds this value, we set the convective 
//   flag at this point. We then expand the convective influence around 
//   the point using a computed radius that depends on the strength of the 
//   background reflectivity.
//
//
// Type: double
//

min_texture_for_convection = 15;

///////////// max_texture_for_stratiform //////////////
//
// Maximum texture for stratiform at a point.
//
// If the texture at a point is less than this value, we set the 
//   stratiform flag at this point.
//
//
// Type: double
//

max_texture_for_stratiform = 11;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Output URL.
//
// Output files are written to this URL.
//
//
// Type: string
//

output_url = "mdv/strat/thills";

///////////// write_partition_field ///////////////////
//
// Option to write out partition field.
//
//
// Type: boolean
//

write_partition_field = TRUE;

///////////// partition_field_name ////////////////////
//
// Name of convective / stratiform partition field.
//
//
// Type: string
//

partition_field_name = "ConvStrat";

///////////// write_convective_dbz ////////////////////
//
// Option to write out convective dbz field.
//
//
// Type: boolean
//

write_convective_dbz = TRUE;

///////////// convective_dbz_field_name ///////////////
//
// Name of convective dbz field.
//
//
// Type: string
//

convective_dbz_field_name = "DbzConv";

///////////// convert_convective_dbz_to_column_max ////
//
// Option to convert convective dbz field to col max before writing.
//
//
// Type: boolean
//

convert_convective_dbz_to_column_max = FALSE;

///////////// write_stratiform_dbz ////////////////////
//
// Option to write out conveective dbz field.
//
//
// Type: boolean
//

write_stratiform_dbz = TRUE;

///////////// stratiform_dbz_field_name ///////////////
//
// Name of convective dbz field.
//
//
// Type: string
//

stratiform_dbz_field_name = "DbzStrat";

///////////// convert_stratiform_dbz_to_column_max ////
//
// Option to convert stratiform dbz field to col max before writing.
//
//
// Type: boolean
//

convert_stratiform_dbz_to_column_max = FALSE;

///////////// write_debug_fields //////////////////////
//
// Option to write out debug fields.
//
// These are the intermediate fields used for the computation: 
//   'FractionActive', 'DbzTexture', 'ColMaxDbz', 'ConvFromColMax', 
//   'ConvFromTexture'.
//
//
// Type: boolean
//

write_debug_fields = FALSE;

