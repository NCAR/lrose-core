//////////////////////////////////////////////////////////////////////
// parameter definitions ConvStrat
//
// Mike Dixon, EOL, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// June 2014
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "Program name: ConvStrat";
  p_text = "ConvStrat finds convective and stratiform regions within a Cartesian radar volume.";
}

commentdef {
  p_header = "PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

typedef enum {
  ARCHIVE, REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line.";
} mode;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = "mdv/input";
  p_descr = "URL for input data.";
  p_help = "This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, the file paths are specified on the command line.";
} input_url;

paramdef string {
  p_default = "DBZ";
  p_descr = "dBZ field name in input MDV files.";
} dbz_field_name;

commentdef {
  p_header = "ALGORITHM PARAMETERS";
}

paramdef double {
  p_default = 0.0;
  p_descr = "Min height used in analysis (km).";	
  p_help = "Only data at or above this altitude is used.";
} min_valid_height;

paramdef double {
  p_default = 25.0;
  p_descr = "Max height used in analysis (km).";	
  p_help = "Only data at or below this altitude is used.";
} max_valid_height;

paramdef double {
  p_default = 10.0;
  p_descr = "Minimum reflectivity threshold for this analysis (dBZ).";
  p_help = "Reflectivity below this threshold is set to missing.";
} min_valid_dbz;

paramdef double {
  p_default = 53;
  p_descr = "Reflectivity value that indicates definite convection.";
  p_help = "If the reflectivity exceeds this value at a point, we assume convection is definitely active at that point. To use this, we first compute the column maximum reflectivity. If the column max dbz at a point exceeds this threshold, then we flag that point as convective.";
} dbz_threshold_for_definite_convection;

commentdef {
  p_header = "COMPUTING THE CONVECTIVE RADIUS";
  p_text = "The convective radius is the distance by which identified convection will be expanded around the convective point. A linear function is used to compute the radius from the background reflectivity";
}

paramdef double {
  p_default = 11.0;
  p_descr = "Radius for computing background reflectivity (km).";
  p_help = "The background dbz at a point is the mean within this specified radius of the point.";
} background_dbz_radius_km;

typedef struct {
  double min_dbz;
  double max_dbz;
  double min_radius_km;
  double max_radius_km;
} conv_radius_function_t;

paramdef struct conv_radius_function_t {
  p_default = { min_dbz = 22.5,
                max_dbz = 42.5,
                min_radius_km = 1.0,
                max_radius_km = 5.0
  };
  p_descr = "End points of the linear function to compute the radius from the background reflectivity.";
  p_help = "The radius function varies linearly between the min and max dbz. For dbz below the min, the min radius applies. For dbz above the max, the max radius applies.";
} conv_radius_function;

commentdef {
  p_header = "COMPUTING REFLECTIVITY TEXTURE";
}

paramdef double {
  p_default = 7.0;
  p_descr = "Radius for texture analysis (km).";
  p_help = "We determine the reflectivity 'texture' at a point by computing the standard deviation of the square of the reflectivity, for all grid points within this radius of the central point. We then compute the square root of that sdev.";
} texture_radius_km;

paramdef double {
  p_default = 0.33;
  p_descr = "Minimum fraction of surroundingpoints for texture computations.";
  p_help = "For a valid computation of texture, we require at least this fraction of points around the central point to have reflectivity in excess of min_valid_dbz.";
} min_valid_fraction_for_texture;

paramdef double {
  p_default = 15.0;
  p_descr = "Minimum texture for convection at a point.";
  p_help = "If the texture at a point exceeds this value, we set the convective flag at this point. We then expand the convective influence around the point using convetive_radius_km.";
} min_texture_for_convection;

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_default = "mdv/stratiform";
  p_descr = "Output URL.";
  p_help = "Output files are written to this URL.";
} output_url;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out partition field.";
} write_partition_field;

paramdef string {
  p_default = "ConvStrat";
  p_descr = "Name of convective / stratiform partition field.";
} partition_field_name;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out convective dbz field.";
} write_convective_dbz;

paramdef string {
  p_default = "DbzConv";
  p_descr = "Name of convective dbz field.";
} convective_dbz_field_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to convert convective dbz field to col max before writing.";
} convert_convective_dbz_to_column_max;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out conveective dbz field.";
} write_stratiform_dbz;

paramdef string {
  p_default = "DbzStrat";
  p_descr = "Name of convective dbz field.";
} stratiform_dbz_field_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to convert stratiform dbz field to col max before writing.";
} convert_stratiform_dbz_to_column_max;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out debug fields.";
  p_help = "These are the intermediate fields used for the computation: 'FractionActive', 'DbzTexture', 'ColMaxDbz', 'ConvFromColMax', 'ConvFromTexture'";
} write_debug_fields;
