//////////////////////////////////////////////////////////////////////
// parameter definitions ConvStrat
//
// Mike Dixon, EOL, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// June 2014
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "Program name: ConvStrat";
  p_text = "ConvStrat finds convective and stratiform regions within a Cartesian radar volume.";
}

commentdef {
  p_header = "PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

typedef enum {
  ARCHIVE, REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line.";
} mode;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = "mdv/input";
  p_descr = "URL for input data.";
  p_help = "This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, the file paths are specified on the command line.";
} input_url;

paramdef string {
  p_default = "DBZ";
  p_descr = "dBZ field name in input MDV files.";
} dbz_field_name;

commentdef {
  p_header = "SPECIFYING VERTICAL LEVELS - TEMPERAURE or HEIGHT?";
  p_text = "We need to specify the vertical separation between shallow, mid-level and high clouds. We use the freezing level to separate warm clouds and cold clouds. And we use the divergence level to separate the mid-level clouds from high-level clouds such as anvil. These vertical limits can be specified as heights MSL (in km), or as temperatures. If temperatures are used, we read in the temperature profile from a model.";
}

typedef enum {
  VERT_LEVELS_BY_TEMP,
  VERT_LEVELS_BY_HT
} vert_levels_type_t;

paramdef enum vert_levels_type_t {
  p_default = VERT_LEVELS_BY_HT;
  p_descr = "How we specify the vertical levels.";
  p_help = "If temperatures are used, we need to read in the temperature profile from a model.";
} vert_levels_type;

paramdef string {
  p_default = "mdv/model";
  p_descr = "URL for temperature profile data, in MDV/Netcdf-CF format.";
  p_help = "We read in the model data that is closest in time to the reflectivity data.";
} temp_profile_url;

paramdef string {
  p_default = "Temp";
  p_descr = "Name of temperature field in the model data. This should be in degrees C.";
} temp_profile_field_name;

paramdef int {
  p_default = 21600;
  p_descr = "Search margin for finding the temp profile data (secs).";	
  p_help = "The temp profile must be within this number of seconds of the dbz data.";
} temp_profile_search_margin;

paramdef double {
  p_default = 4.5;
  p_descr = "Shallow cloud height threshold (km).";	
  p_help = "Shallow cloud tops are below this height. Used if vert_levels_type = VERT_LEVELS_BY_HT.";
} shallow_threshold_ht;

paramdef double {
  p_default = 0.0;
  p_descr = "Shallow cloud temperature threshold (degC).";	
  p_help = "Shallow cloud tops are below this temperature. Used if vert_levels_type = VERT_LEVELS_BY_TEMP.";
} shallow_threshold_temp;

paramdef double {
  p_default = 8.0;
  p_descr = "Deep cloud height threshold (km).";	
  p_help = "Deep clouds extend above this height. Used if vert_levels_type = VERT_LEVELS_BY_HT.";
} deep_threshold_ht;

paramdef double {
  p_default = -12.0;
  p_descr = "Deep cloud temperature threshold (degC).";	
  p_help = "Deep clouds extend above this height. Used if vert_levels_type = VERT_LEVELS_BY_TEMP.";
} deep_threshold_temp;

commentdef {
  p_header = "ALGORITHM PARAMETERS";
}

paramdef double {
  p_default = 0.0;
  p_descr = "Min height used in analysis (km).";	
  p_help = "Only data at or above this altitude is used.";
} min_valid_height;

paramdef double {
  p_default = 25.0;
  p_descr = "Max height used in analysis (km).";	
  p_help = "Only data at or below this altitude is used.";
} max_valid_height;

paramdef double {
  p_default = 10.0;
  p_descr = "Minimum reflectivity threshold for this analysis (dBZ).";
  p_help = "Reflectivity below this threshold is set to missing.";
} min_valid_dbz;

paramdef double {
  p_default = 20.0;
  p_descr = "Min volume of a convective region (km3).";	
  p_help = "Regions of smaller volume will be labeled SMALL.";
} min_valid_volume_for_convective;

paramdef double {
  p_default = 53;
  p_descr = "Reflectivity value that indicates definite convection.";
  p_help = "If the reflectivity exceeds this value at a point, we assume convection is definitely active at that point. To use this, we first compute the column maximum reflectivity. If the column max dbz at a point exceeds this threshold, then we flag that point as convective.";
} dbz_threshold_for_definite_convective;

paramdef double {
  p_default = 18;
  p_descr = "Reflectivity for determing echo tops.";
  p_help = "Echo tops are defined as the max ht with reflectivity at or above this value.";
} dbz_for_echo_tops;

commentdef {
  p_header = "COMPUTING THE CONVECTIVE RADIUS";
  p_text = "The convective radius is the distance by which identified convection will be expanded around the convective point. A linear function is used to compute the radius from the background reflectivity";
}

paramdef double {
  p_default = 11.0;
  p_descr = "Radius for computing background reflectivity (km).";
  p_help = "The background dbz at a point is the mean within this specified radius of the point.";
} background_dbz_radius_km;

typedef struct {
  double min_dbz;
  double max_dbz;
  double min_radius_km;
  double max_radius_km;
} conv_radius_function_t;

paramdef struct conv_radius_function_t {
  p_default = { min_dbz = 22.5,
                max_dbz = 42.5,
                min_radius_km = 1.0,
                max_radius_km = 5.0
  };
  p_descr = "End points of the linear function to compute the radius from the background reflectivity.";
  p_help = "The radius function varies linearly between the min and max dbz. For dbz below the min, the min radius applies. For dbz above the max, the max radius applies.";
} conv_radius_function;

commentdef {
  p_header = "COMPUTING REFLECTIVITY TEXTURE";
}

paramdef double {
  p_default = 7.0;
  p_descr = "Radius for texture analysis (km).";
  p_help = "We determine the reflectivity 'texture' at a point by computing the standard deviation of the square of the reflectivity, for all grid points within this radius of the central point. We then compute the square root of that sdev.";
} texture_radius_km;

paramdef double {
  p_default = 0.33;
  p_descr = "Minimum fraction of surroundingpoints for texture computations.";
  p_help = "For a valid computation of texture, we require at least this fraction of points around the central point to have reflectivity in excess of min_valid_dbz.";
} min_valid_fraction_for_texture;

paramdef double {
  p_default = 15.0;
  p_descr = "Minimum texture for convective at a point.";
  p_help = "If the texture at a point exceeds this value, we set the convective flag at this point. We then expand the convective influence around the point using a computed radius that depends on the strength of the background reflectivity.";
} min_texture_for_convective;

paramdef double {
  p_default = 11.0;
  p_descr = "Maximum texture for stratiform at a point.";
  p_help = "If the texture at a point is less than this value, we set the stratiform flag at this point.";
} max_texture_for_stratiform;

commentdef {
  p_header = "SETTING CONVECTIVE OR STRATIFORM FLAGS BASED ON INTEREST";
  p_text = "If neither is set, we flag the point as MIXED.";
}

paramdef double {
  p_default = 0.5;
  p_descr = "Minimum interest for convective at a point.";
  p_help = "If the interest at a point exceeds this value, we set the convective flag at this point.";
} min_interest_for_convective;

paramdef double {
  p_default = 0.4;
  p_descr = "Maximum interest for stratiform at a point.";
  p_help = "If the interest at a point is less than this value, we set the stratiform flag at this point. If it is above this but less than min_interest_for_convective we flag the point as MIXED.";
} max_interest_for_stratiform;

paramdef int {
  p_default = 3;
  p_descr = "Minimum grid overlap in convective regions.";
  p_help = "A convective region is identified as a series of adjacent 'runs' of grid cells data in the EW direction. When testing for overlap, some minimum number of overlap grids must be used. This is that minimum overlap in grid units.";
} min_overlap_for_convective_clumps;

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_default = "mdv/stratiform";
  p_descr = "Output URL.";
  p_help = "Output files are written to this URL.";
} output_url;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out partition field.";
} write_partition_field;

paramdef string {
  p_default = "ConvStrat";
  p_descr = "Name of convective / stratiform partition field.";
} partition_field_name;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out convective dbz field.";
} write_convective_dbz;

paramdef string {
  p_default = "DbzConv";
  p_descr = "Name of convective dbz field.";
} convective_dbz_field_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to convert convective dbz field to col max before writing.";
} convert_convective_dbz_to_column_max;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out conveective dbz field.";
} write_stratiform_dbz;

paramdef string {
  p_default = "DbzStrat";
  p_descr = "Name of convective dbz field.";
} stratiform_dbz_field_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to convert stratiform dbz field to col max before writing.";
} convert_stratiform_dbz_to_column_max;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out debug fields.";
  p_help = "These are the intermediate fields used for the computation: 'FractionActive', 'DbzTexture', 'ColMaxDbz', 'ConvFromColMax', 'ConvFromTexture'";
} write_debug_fields;
