/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Cov2Mom
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Cov2Mom application");
    tt->comment_text = tdrpStrDup("Cov2Mom reads covariances in an input DsRadar FMQ, computes moments and writes them out to DsRadar queue.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_url");
    tt->descr = tdrpStrDup("Input URL for covariances via DsRadar FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmq/moments");
    tt++;
    
    // Parameter 'seek_to_start_of_input'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("seek_to_start_of_input");
    tt->descr = tdrpStrDup("Option to seek to the start of the input FMQ.");
    tt->help = tdrpStrDup("If TRUE, the program will seek to the start of the fmq and read in data from the entire queue. If FALSE, it will only read new data as it is added to the FMQ.");
    tt->val_offset = (char *) &seek_to_start_of_input - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("INPUT COVARIANCES");
    tt->comment_text = tdrpStrDup("Names of input fields in the Dsr queue.");
    tt++;
    
    // Parameter 'input_fields'
    // ctype is '_input_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("input_fields");
    tt->descr = tdrpStrDup("Indicate which Dsr field name is to be used for each covariance.");
    tt->help = tdrpStrDup("Set the field name for each covariance type. If the covariance is not available in the input field, it will be set to missing.");
    tt->array_offset = (char *) &_input_fields - &_start_;
    tt->array_n_offset = (char *) &input_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(input_field_t);
    tt->array_n = 28;
    tt->struct_def.name = tdrpStrDup("input_field_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("covariance_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_input_fields->id - (char *) _input_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("covariance_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 28;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("LAG0_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[0].val = LAG0_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("LAG0_HX_DB");
        tt->struct_def.fields[0].enum_def.fields[1].val = LAG0_HX_DB;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("LAG0_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[2].val = LAG0_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("LAG0_VX_DB");
        tt->struct_def.fields[0].enum_def.fields[3].val = LAG0_VX_DB;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("LAG0_VCHX_DB");
        tt->struct_def.fields[0].enum_def.fields[4].val = LAG0_VCHX_DB;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("LAG0_VCHX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[5].val = LAG0_VCHX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("LAG0_HCVX_DB");
        tt->struct_def.fields[0].enum_def.fields[6].val = LAG0_HCVX_DB;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("LAG0_HCVX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[7].val = LAG0_HCVX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("LAG0_VXHX_DB");
        tt->struct_def.fields[0].enum_def.fields[8].val = LAG0_VXHX_DB;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("LAG0_VXHX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[9].val = LAG0_VXHX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("LAG1_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[10].val = LAG1_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("LAG1_HC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[11].val = LAG1_HC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("LAG1_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[12].val = LAG1_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("LAG1_VC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[13].val = LAG1_VC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("LAG1_HCVC_DB");
        tt->struct_def.fields[0].enum_def.fields[14].val = LAG1_HCVC_DB;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("LAG1_HCVC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[15].val = LAG1_HCVC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("LAG1_VCHC_DB");
        tt->struct_def.fields[0].enum_def.fields[16].val = LAG1_VCHC_DB;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("LAG1_VCHC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[17].val = LAG1_VCHC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("LAG1_VXHX_DB");
        tt->struct_def.fields[0].enum_def.fields[18].val = LAG1_VXHX_DB;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("LAG1_VXHX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[19].val = LAG1_VXHX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("LAG2_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[20].val = LAG2_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("LAG2_HC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[21].val = LAG2_HC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("LAG2_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[22].val = LAG2_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("LAG2_VC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[23].val = LAG2_VC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("LAG3_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[24].val = LAG3_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[25].name = tdrpStrDup("LAG3_HC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[25].val = LAG3_HC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[26].name = tdrpStrDup("LAG3_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[26].val = LAG3_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[27].name = tdrpStrDup("LAG3_VC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[27].val = LAG3_VC_PHASE;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("dsr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_input_fields->dsr_name - (char *) _input_fields;
    tt->n_struct_vals = 56;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = LAG0_HC_DB;
      tt->struct_vals[1].s = tdrpStrDup("LAG0_HC_DB");
      tt->struct_vals[2].e = LAG0_HX_DB;
      tt->struct_vals[3].s = tdrpStrDup("LAG0_HX_DB");
      tt->struct_vals[4].e = LAG0_VC_DB;
      tt->struct_vals[5].s = tdrpStrDup("LAG0_VC_DB");
      tt->struct_vals[6].e = LAG0_VX_DB;
      tt->struct_vals[7].s = tdrpStrDup("LAG0_VX_DB");
      tt->struct_vals[8].e = LAG0_VCHX_DB;
      tt->struct_vals[9].s = tdrpStrDup("LAG0_VCHX_DB");
      tt->struct_vals[10].e = LAG0_VCHX_PHASE;
      tt->struct_vals[11].s = tdrpStrDup("LAG0_VCHX_PHASE");
      tt->struct_vals[12].e = LAG0_HCVX_DB;
      tt->struct_vals[13].s = tdrpStrDup("LAG0_HCVX_DB");
      tt->struct_vals[14].e = LAG0_HCVX_PHASE;
      tt->struct_vals[15].s = tdrpStrDup("LAG0_HCVX_PHASE");
      tt->struct_vals[16].e = LAG0_VXHX_DB;
      tt->struct_vals[17].s = tdrpStrDup("LAG0_VXHX_DB");
      tt->struct_vals[18].e = LAG0_VXHX_PHASE;
      tt->struct_vals[19].s = tdrpStrDup("LAG0_VXHX_PHASE");
      tt->struct_vals[20].e = LAG1_HC_DB;
      tt->struct_vals[21].s = tdrpStrDup("LAG1_HC_DB");
      tt->struct_vals[22].e = LAG1_HC_PHASE;
      tt->struct_vals[23].s = tdrpStrDup("LAG1_HC_PHASE");
      tt->struct_vals[24].e = LAG1_VC_DB;
      tt->struct_vals[25].s = tdrpStrDup("LAG1_VC_DB");
      tt->struct_vals[26].e = LAG1_VC_PHASE;
      tt->struct_vals[27].s = tdrpStrDup("LAG1_VC_PHASE");
      tt->struct_vals[28].e = LAG1_HCVC_DB;
      tt->struct_vals[29].s = tdrpStrDup("LAG1_HCVC_DB");
      tt->struct_vals[30].e = LAG1_HCVC_PHASE;
      tt->struct_vals[31].s = tdrpStrDup("LAG1_HCVC_PHASE");
      tt->struct_vals[32].e = LAG1_VCHC_DB;
      tt->struct_vals[33].s = tdrpStrDup("LAG1_VCHC_DB");
      tt->struct_vals[34].e = LAG1_VCHC_PHASE;
      tt->struct_vals[35].s = tdrpStrDup("LAG1_VCHC_PHASE");
      tt->struct_vals[36].e = LAG1_VXHX_DB;
      tt->struct_vals[37].s = tdrpStrDup("LAG1_VXHX_DB");
      tt->struct_vals[38].e = LAG1_VXHX_PHASE;
      tt->struct_vals[39].s = tdrpStrDup("LAG1_VXHX_PHASE");
      tt->struct_vals[40].e = LAG2_HC_DB;
      tt->struct_vals[41].s = tdrpStrDup("LAG2_HC_DB");
      tt->struct_vals[42].e = LAG2_HC_PHASE;
      tt->struct_vals[43].s = tdrpStrDup("LAG2_HC_PHASE");
      tt->struct_vals[44].e = LAG2_VC_DB;
      tt->struct_vals[45].s = tdrpStrDup("LAG2_VC_DB");
      tt->struct_vals[46].e = LAG2_VC_PHASE;
      tt->struct_vals[47].s = tdrpStrDup("LAG2_VC_PHASE");
      tt->struct_vals[48].e = LAG3_HC_DB;
      tt->struct_vals[49].s = tdrpStrDup("LAG3_HC_DB");
      tt->struct_vals[50].e = LAG3_HC_PHASE;
      tt->struct_vals[51].s = tdrpStrDup("LAG3_HC_PHASE");
      tt->struct_vals[52].e = LAG3_VC_DB;
      tt->struct_vals[53].s = tdrpStrDup("LAG3_VC_DB");
      tt->struct_vals[54].e = LAG3_VC_PHASE;
      tt->struct_vals[55].s = tdrpStrDup("LAG3_VC_PHASE");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("MOMENTS COMPUTATIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'xmit_rcv_mode'
    // ctype is '_xmit_rcv_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("xmit_rcv_mode");
    tt->descr = tdrpStrDup("Transmit / receive mode.");
    tt->help = tdrpStrDup("This governs the type of moments computation which will be carried out.");
    tt->val_offset = (char *) &xmit_rcv_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("xmit_rcv_mode_t");
    tt->enum_def.nfields = 8;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SP");
      tt->enum_def.fields[0].val = SP;
      tt->enum_def.fields[1].name = tdrpStrDup("DP_ALT_HV_CO_ONLY");
      tt->enum_def.fields[1].val = DP_ALT_HV_CO_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("DP_ALT_HV_CO_CROSS");
      tt->enum_def.fields[2].val = DP_ALT_HV_CO_CROSS;
      tt->enum_def.fields[3].name = tdrpStrDup("DP_ALT_HV_FIXED_HV");
      tt->enum_def.fields[3].val = DP_ALT_HV_FIXED_HV;
      tt->enum_def.fields[4].name = tdrpStrDup("DP_SIM_HV_FIXED_HV");
      tt->enum_def.fields[4].val = DP_SIM_HV_FIXED_HV;
      tt->enum_def.fields[5].name = tdrpStrDup("DP_SIM_HV_SWITCHED_HV");
      tt->enum_def.fields[5].val = DP_SIM_HV_SWITCHED_HV;
      tt->enum_def.fields[6].name = tdrpStrDup("DP_H_ONLY_FIXED_HV");
      tt->enum_def.fields[6].val = DP_H_ONLY_FIXED_HV;
      tt->enum_def.fields[7].name = tdrpStrDup("DP_V_ONLY_FIXED_HV");
      tt->enum_def.fields[7].val = DP_V_ONLY_FIXED_HV;
    tt->single_val.e = SP;
    tt++;
    
    // Parameter 'is_filtered'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("is_filtered");
    tt->descr = tdrpStrDup("Are these filtered covariances?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &is_filtered - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'correct_for_system_phidp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("correct_for_system_phidp");
    tt->descr = tdrpStrDup("Option to correct for system phidp.");
    tt->help = tdrpStrDup("If true, the H and V correlation phases will be corrected by adding/subtracting the system phidp value as appropriate. This avoids premature wrapping of the phased from which phidp and velocity are computed. If false, this correction will not be applied. To find the system phidp, set this to false and compute phidp for vertically-pointing data.");
    tt->val_offset = (char *) &correct_for_system_phidp - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'change_aiq_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_aiq_sign");
    tt->descr = tdrpStrDup("Option to change sign on AIQ field.");
    tt->help = tdrpStrDup("This affects refractt variables. Set to true to change the sign of the computed AIQ field.");
    tt->val_offset = (char *) &change_aiq_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_url");
    tt->descr = tdrpStrDup("Output URL for computed moments via DsRadar FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmq/moments_check");
    tt++;
    
    // Parameter 'output_fmq_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_size");
    tt->descr = tdrpStrDup("Size of output FMQ, in bytes.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &output_fmq_size - &_start_;
    tt->single_val.i = 50000000;
    tt++;
    
    // Parameter 'output_fmq_nslots'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_nslots");
    tt->descr = tdrpStrDup("Number of slots in output FMQ.");
    tt->help = tdrpStrDup("The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.");
    tt->val_offset = (char *) &output_fmq_nslots - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'output_fmq_compress'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_compress");
    tt->descr = tdrpStrDup("FMQ compression option.");
    tt->help = tdrpStrDup("If TRUE FMQ messages are compressed.");
    tt->val_offset = (char *) &output_fmq_compress - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Indicate which fields should be written to the moments FMQ.");
    tt->help = tdrpStrDup("Choose the ID from the list. The name and units can be set however the user prefers. The scale and bias are applied to the floating point value to compute the 8-bit ot 16-bit output value for the FMQ If the output encoding is FL32, the scale and bias are not applicable.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 20;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("output_field_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->id - (char *) _output_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("output_field_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 20;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("NCP");
        tt->struct_def.fields[0].enum_def.fields[0].val = NCP;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("SNR");
        tt->struct_def.fields[0].enum_def.fields[1].val = SNR;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("DBM");
        tt->struct_def.fields[0].enum_def.fields[2].val = DBM;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("DBZ");
        tt->struct_def.fields[0].enum_def.fields[3].val = DBZ;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("VEL");
        tt->struct_def.fields[0].enum_def.fields[4].val = VEL;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("WIDTH");
        tt->struct_def.fields[0].enum_def.fields[5].val = WIDTH;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("ZDR");
        tt->struct_def.fields[0].enum_def.fields[6].val = ZDR;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("LDRH");
        tt->struct_def.fields[0].enum_def.fields[7].val = LDRH;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("LDRV");
        tt->struct_def.fields[0].enum_def.fields[8].val = LDRV;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("RHOHV");
        tt->struct_def.fields[0].enum_def.fields[9].val = RHOHV;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("PHIDP");
        tt->struct_def.fields[0].enum_def.fields[10].val = PHIDP;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("KDP");
        tt->struct_def.fields[0].enum_def.fields[11].val = KDP;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("SNRHC");
        tt->struct_def.fields[0].enum_def.fields[12].val = SNRHC;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("SNRHX");
        tt->struct_def.fields[0].enum_def.fields[13].val = SNRHX;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("SNRVC");
        tt->struct_def.fields[0].enum_def.fields[14].val = SNRVC;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("SNRVX");
        tt->struct_def.fields[0].enum_def.fields[15].val = SNRVX;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("DBMHC");
        tt->struct_def.fields[0].enum_def.fields[16].val = DBMHC;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("DBMHX");
        tt->struct_def.fields[0].enum_def.fields[17].val = DBMHX;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("DBMVC");
        tt->struct_def.fields[0].enum_def.fields[18].val = DBMVC;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("DBMVX");
        tt->struct_def.fields[0].enum_def.fields[19].val = DBMVX;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->units - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("field_encoding_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->encoding - (char *) _output_fields;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("field_encoding_t");
        tt->struct_def.fields[3].enum_def.nfields = 3;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("OUTPUT_INT8");
        tt->struct_def.fields[3].enum_def.fields[0].val = OUTPUT_INT8;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("OUTPUT_INT16");
        tt->struct_def.fields[3].enum_def.fields[1].val = OUTPUT_INT16;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("OUTPUT_FL32");
        tt->struct_def.fields[3].enum_def.fields[2].val = OUTPUT_FL32;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("scale");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->scale - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("bias");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->bias - (char *) _output_fields;
    tt->n_struct_vals = 120;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = NCP;
      tt->struct_vals[1].s = tdrpStrDup("NCP");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].e = OUTPUT_FL32;
      tt->struct_vals[4].d = 0.0001;
      tt->struct_vals[5].d = -0.01;
      tt->struct_vals[6].e = SNR;
      tt->struct_vals[7].s = tdrpStrDup("SNR");
      tt->struct_vals[8].s = tdrpStrDup("dB");
      tt->struct_vals[9].e = OUTPUT_FL32;
      tt->struct_vals[10].d = 0.01;
      tt->struct_vals[11].d = -320;
      tt->struct_vals[12].e = DBM;
      tt->struct_vals[13].s = tdrpStrDup("DBM");
      tt->struct_vals[14].s = tdrpStrDup("dBm");
      tt->struct_vals[15].e = OUTPUT_FL32;
      tt->struct_vals[16].d = 0.01;
      tt->struct_vals[17].d = -320;
      tt->struct_vals[18].e = DBZ;
      tt->struct_vals[19].s = tdrpStrDup("DBZ");
      tt->struct_vals[20].s = tdrpStrDup("dBZ");
      tt->struct_vals[21].e = OUTPUT_FL32;
      tt->struct_vals[22].d = 0.01;
      tt->struct_vals[23].d = -320;
      tt->struct_vals[24].e = VEL;
      tt->struct_vals[25].s = tdrpStrDup("VEL");
      tt->struct_vals[26].s = tdrpStrDup("m/s");
      tt->struct_vals[27].e = OUTPUT_FL32;
      tt->struct_vals[28].d = 0.01;
      tt->struct_vals[29].d = -320;
      tt->struct_vals[30].e = WIDTH;
      tt->struct_vals[31].s = tdrpStrDup("WIDTH");
      tt->struct_vals[32].s = tdrpStrDup("m/s");
      tt->struct_vals[33].e = OUTPUT_FL32;
      tt->struct_vals[34].d = 0.001;
      tt->struct_vals[35].d = -0.01;
      tt->struct_vals[36].e = ZDR;
      tt->struct_vals[37].s = tdrpStrDup("ZDR");
      tt->struct_vals[38].s = tdrpStrDup("dB");
      tt->struct_vals[39].e = OUTPUT_FL32;
      tt->struct_vals[40].d = 0.001;
      tt->struct_vals[41].d = -32;
      tt->struct_vals[42].e = LDRH;
      tt->struct_vals[43].s = tdrpStrDup("LDRH");
      tt->struct_vals[44].s = tdrpStrDup("dB");
      tt->struct_vals[45].e = OUTPUT_FL32;
      tt->struct_vals[46].d = 0.005;
      tt->struct_vals[47].d = -160;
      tt->struct_vals[48].e = LDRV;
      tt->struct_vals[49].s = tdrpStrDup("LDRV");
      tt->struct_vals[50].s = tdrpStrDup("dB");
      tt->struct_vals[51].e = OUTPUT_FL32;
      tt->struct_vals[52].d = 0.005;
      tt->struct_vals[53].d = -160;
      tt->struct_vals[54].e = RHOHV;
      tt->struct_vals[55].s = tdrpStrDup("RHOHV");
      tt->struct_vals[56].s = tdrpStrDup("");
      tt->struct_vals[57].e = OUTPUT_FL32;
      tt->struct_vals[58].d = 0.0001;
      tt->struct_vals[59].d = -1;
      tt->struct_vals[60].e = PHIDP;
      tt->struct_vals[61].s = tdrpStrDup("PHIDP");
      tt->struct_vals[62].s = tdrpStrDup("deg");
      tt->struct_vals[63].e = OUTPUT_FL32;
      tt->struct_vals[64].d = 0.06;
      tt->struct_vals[65].d = -200;
      tt->struct_vals[66].e = KDP;
      tt->struct_vals[67].s = tdrpStrDup("KDP");
      tt->struct_vals[68].s = tdrpStrDup("deg/km");
      tt->struct_vals[69].e = OUTPUT_FL32;
      tt->struct_vals[70].d = 0.001;
      tt->struct_vals[71].d = -32;
      tt->struct_vals[72].e = SNRHC;
      tt->struct_vals[73].s = tdrpStrDup("SNRHC");
      tt->struct_vals[74].s = tdrpStrDup("dB");
      tt->struct_vals[75].e = OUTPUT_FL32;
      tt->struct_vals[76].d = 0.01;
      tt->struct_vals[77].d = -320;
      tt->struct_vals[78].e = SNRHX;
      tt->struct_vals[79].s = tdrpStrDup("SNRHX");
      tt->struct_vals[80].s = tdrpStrDup("dB");
      tt->struct_vals[81].e = OUTPUT_FL32;
      tt->struct_vals[82].d = 0.01;
      tt->struct_vals[83].d = -320;
      tt->struct_vals[84].e = SNRVC;
      tt->struct_vals[85].s = tdrpStrDup("SNRVC");
      tt->struct_vals[86].s = tdrpStrDup("dB");
      tt->struct_vals[87].e = OUTPUT_FL32;
      tt->struct_vals[88].d = 0.01;
      tt->struct_vals[89].d = -320;
      tt->struct_vals[90].e = SNRVX;
      tt->struct_vals[91].s = tdrpStrDup("SNRVX");
      tt->struct_vals[92].s = tdrpStrDup("dB");
      tt->struct_vals[93].e = OUTPUT_FL32;
      tt->struct_vals[94].d = 0.01;
      tt->struct_vals[95].d = -320;
      tt->struct_vals[96].e = DBMHC;
      tt->struct_vals[97].s = tdrpStrDup("DBMHC");
      tt->struct_vals[98].s = tdrpStrDup("dBm");
      tt->struct_vals[99].e = OUTPUT_FL32;
      tt->struct_vals[100].d = 0.01;
      tt->struct_vals[101].d = -320;
      tt->struct_vals[102].e = DBMHX;
      tt->struct_vals[103].s = tdrpStrDup("DBMHX");
      tt->struct_vals[104].s = tdrpStrDup("dBm");
      tt->struct_vals[105].e = OUTPUT_FL32;
      tt->struct_vals[106].d = 0.01;
      tt->struct_vals[107].d = -320;
      tt->struct_vals[108].e = DBMVC;
      tt->struct_vals[109].s = tdrpStrDup("DBMVC");
      tt->struct_vals[110].s = tdrpStrDup("dBm");
      tt->struct_vals[111].e = OUTPUT_FL32;
      tt->struct_vals[112].d = 0.01;
      tt->struct_vals[113].d = -320;
      tt->struct_vals[114].e = DBMVX;
      tt->struct_vals[115].s = tdrpStrDup("DBMVX");
      tt->struct_vals[116].s = tdrpStrDup("dBm");
      tt->struct_vals[117].e = OUTPUT_FL32;
      tt->struct_vals[118].d = 0.01;
      tt->struct_vals[119].d = -320;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
