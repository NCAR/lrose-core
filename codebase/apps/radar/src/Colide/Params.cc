////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Colide");
    tt->comment_text = tdrpStrDup("This program does the COlide algorithm");
    tt++;
    
    // Parameter 'filter'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("filter");
    tt->descr = tdrpStrDup("Filters (sweep) to apply");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_filter - &_start_;
    tt->array_n_offset = (char *) &filter_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 60;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("line_dir = LineDir(DBZ, 12, 5, 30)");
      tt->array_vals[1].s = tdrpStrDup("line_det = LineDet(DBZ, line_dir, 12, 5, 30)");
      tt->array_vals[2].s = tdrpStrDup("shear_dir = ShearDir(VEL, line_det, 12, 5, 30)");
      tt->array_vals[3].s = tdrpStrDup("shear_det = ShearDet(VEL, shear_dir, line_det, 12, 5, 30)");
      tt->array_vals[4].s = tdrpStrDup("raw_comb = maximum(line_det, shear_det)");
      tt->array_vals[5].s = tdrpStrDup("line_ellip_orient = EllipOrient(line_det, 12, 2, 30)");
      tt->array_vals[6].s = tdrpStrDup("line_ellip_orient2 = median(line_ellip_orient, 5, 5, 0, 180, 5)");
      tt->array_vals[7].s = tdrpStrDup("line_ellip = Ellip(line_det, line_ellip_orient, 12, 2, 30)");
      tt->array_vals[8].s = tdrpStrDup("line_ellip_conf = EllipConf(line_det, line_ellip_orient, 12, 2, 30)");
      tt->array_vals[9].s = tdrpStrDup("shear_ellip_orient = EllipOrient(shear_det, 12, 2, 30)");
      tt->array_vals[10].s = tdrpStrDup("shear_ellip_orient2 = median(shear_ellip_orient, 5, 5, 0, 180, 5)");
      tt->array_vals[11].s = tdrpStrDup("shear_ellip = Ellip(shear_det, shear_ellip_orient, 12, 2, 30)");
      tt->array_vals[12].s = tdrpStrDup("shear_ellip_conf = EllipConf(shear_det, shear_ellip_orient, 12, 2, 30)");
      tt->array_vals[13].s = tdrpStrDup("ellip_comb = weighted_average(0, line_ellip, 0.25, shear_ellip, 0.75)");
      tt->array_vals[14].s = tdrpStrDup("ellip_comb_dilate = max_expand(ellip_comb, 1, 1)");
      tt->array_vals[15].s = tdrpStrDup("ellip_orient_comb = weighted_angle_average(0, line_ellip_orient, 0.5, shear_ellip_orient, 0.5)");
      tt->array_vals[16].s = tdrpStrDup("enhanced0 = Enhance(raw_comb, 20, 16, 18, 30)");
      tt->array_vals[17].s = tdrpStrDup("enhanced0_orient = EnhanceDir(raw_comb, 20, 16, 18, 30)");
      tt->array_vals[18].s = tdrpStrDup("enhanced1 = Enhance(raw_comb, 25, 14, 18, 30)");
      tt->array_vals[19].s = tdrpStrDup("enhanced1_orient = EnhanceDir(raw_comb, 25, 14, 18, 30)");
      tt->array_vals[20].s = tdrpStrDup("enhanced_out = weighted_average(0, enhanced0, 0.5, raw_comb, 0.5)");
      tt->array_vals[21].s = tdrpStrDup("ellip_orient = EllipOrient(enhanced0, 12, 2, 30)");
      tt->array_vals[22].s = tdrpStrDup("ellip = Ellip(enhanced0, ellip_orient, 12, 2, 30)");
      tt->array_vals[23].s = tdrpStrDup("ellip_conf = EllipConf(enhanced0, ellip_orient, 12, 2, 30)");
      tt->array_vals[24].s = tdrpStrDup("dilate = max_expand(ellip, 2, 2)");
      tt->array_vals[25].s = tdrpStrDup("line_hotspot = 0");
      tt->array_vals[26].s = tdrpStrDup("line_medium = 0");
      tt->array_vals[27].s = tdrpStrDup("line_full = 0");
      tt->array_vals[28].s = tdrpStrDup("if (line_ellip >= 0.55) then line_hotspot = 1");
      tt->array_vals[29].s = tdrpStrDup("if (line_ellip >= 0.45) then line_medium = 1");
      tt->array_vals[30].s = tdrpStrDup("if (line_ellip >= 0.40) then line_full = 1");
      tt->array_vals[31].s = tdrpStrDup("shear_hotspot = 0");
      tt->array_vals[32].s = tdrpStrDup("shear_medium = 0");
      tt->array_vals[33].s = tdrpStrDup("shear_full = 0");
      tt->array_vals[34].s = tdrpStrDup("if (shear_ellip >= 0.5) then shear_hotspot = 1");
      tt->array_vals[35].s = tdrpStrDup("if (shear_ellip >= 0.4) then shear_medium = 1");
      tt->array_vals[36].s = tdrpStrDup("if (shear_ellip >= 0.35) then shear_full = 1");
      tt->array_vals[37].s = tdrpStrDup("hot = 0");
      tt->array_vals[38].s = tdrpStrDup("medium = 0");
      tt->array_vals[39].s = tdrpStrDup("full = 0");
      tt->array_vals[40].s = tdrpStrDup("if (ellip_comb_dilate >= 0.55) then hot = 1");
      tt->array_vals[41].s = tdrpStrDup("if (ellip_comb_dilate >= 0.42) then medium = 1");
      tt->array_vals[42].s = tdrpStrDup("if (ellip_comb_dilate >= 0.38) then full = 1");
      tt->array_vals[43].s = tdrpStrDup("line_reg = Region(line_hotspot,line_medium,line_full,10,20,0,80,20)");
      tt->array_vals[44].s = tdrpStrDup("shear_reg=Region(shear_hotspot,shear_medium,shear_full,10,20,0,80,20)");
      tt->array_vals[45].s = tdrpStrDup("reg=Region(hot,medium,full,10,20,0,80,20)");
      tt->array_vals[46].s = tdrpStrDup("eocm = median(ellip_orient_comb, 5, 5, 0, 180, 10)");
      tt->array_vals[47].s = tdrpStrDup("omask = mask_missing_to_missing(eocm, reg)");
      tt->array_vals[48].s = tdrpStrDup("ellip_orient_expand = expand_angles_laterally(omask, 15)");
      tt->array_vals[49].s = tdrpStrDup("regComb = RegComb(15, 30, 5, reg, eocm)");
      tt->array_vals[50].s = tdrpStrDup("ecf = ellip_comb");
      tt->array_vals[51].s = tdrpStrDup("if (ecf < 0.4) then ecf = missing");
      tt->array_vals[52].s = tdrpStrDup("ellipD = max_expand(ecf, 5, 5)");
      tt->array_vals[53].s = tdrpStrDup("ellipHist = History(ellipD, 300, 0.9, 600, 0.7, 1000, 0.5, 2000, 0.2)");
      tt->array_vals[54].s = tdrpStrDup("ellipMaxAgeHist = MaxAgeMinutes(ellipD)");
      tt->array_vals[55].s = tdrpStrDup("eof = enhanced_out");
      tt->array_vals[56].s = tdrpStrDup("if (eof < 0.3) then eof = missing");
      tt->array_vals[57].s = tdrpStrDup("expandEof = max_expand(eof, 5, 5)");
      tt->array_vals[58].s = tdrpStrDup("enhHist = History(expandEof, 300, 0.9, 600, 0.7, 1000, 0.5, 2000, 0.2)");
      tt->array_vals[59].s = tdrpStrDup("enhMaxAgeHist = MaxAgeMinutes(expandEof)");
    tt++;
    
    // Parameter 'line_detect_side_fuzzy'
    // ctype is '_Fuzzy_f'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("line_detect_side_fuzzy");
    tt->descr = tdrpStrDup("Line detection side fuzzy function");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_line_detect_side_fuzzy - &_start_;
    tt->array_n_offset = (char *) &line_detect_side_fuzzy_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(Fuzzy_f);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("Fuzzy_f");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_line_detect_side_fuzzy->x - (char *) _line_detect_side_fuzzy;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_line_detect_side_fuzzy->y - (char *) _line_detect_side_fuzzy;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.75;
      tt->struct_vals[1].d = -1;
      tt->struct_vals[2].d = 5.25;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'line_detect_center_fuzzy'
    // ctype is '_Fuzzy_f'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("line_detect_center_fuzzy");
    tt->descr = tdrpStrDup("Line detection center fuzzy function");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_line_detect_center_fuzzy - &_start_;
    tt->array_n_offset = (char *) &line_detect_center_fuzzy_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(Fuzzy_f);
    tt->array_n = 4;
    tt->struct_def.name = tdrpStrDup("Fuzzy_f");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_line_detect_center_fuzzy->x - (char *) _line_detect_center_fuzzy;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_line_detect_center_fuzzy->y - (char *) _line_detect_center_fuzzy;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -10;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 6;
      tt->struct_vals[3].d = 1;
      tt->struct_vals[4].d = 15;
      tt->struct_vals[5].d = 1;
      tt->struct_vals[6].d = 30;
      tt->struct_vals[7].d = 0;
    tt++;
    
    // Parameter 'line_detect_std_fuzzy'
    // ctype is '_Fuzzy_f'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("line_detect_std_fuzzy");
    tt->descr = tdrpStrDup("Line detection std fuzzy function");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_line_detect_std_fuzzy - &_start_;
    tt->array_n_offset = (char *) &line_detect_std_fuzzy_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(Fuzzy_f);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("Fuzzy_f");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_line_detect_std_fuzzy->x - (char *) _line_detect_std_fuzzy;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_line_detect_std_fuzzy->y - (char *) _line_detect_std_fuzzy;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 2;
      tt->struct_vals[1].d = 1.25;
      tt->struct_vals[2].d = 70;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'shear_detect_side_fuzzy'
    // ctype is '_Fuzzy_f'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("shear_detect_side_fuzzy");
    tt->descr = tdrpStrDup("Shear detection side fuzzy function");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_shear_detect_side_fuzzy - &_start_;
    tt->array_n_offset = (char *) &shear_detect_side_fuzzy_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(Fuzzy_f);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("Fuzzy_f");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_shear_detect_side_fuzzy->x - (char *) _shear_detect_side_fuzzy;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_shear_detect_side_fuzzy->y - (char *) _shear_detect_side_fuzzy;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -2.5;
      tt->struct_vals[1].d = -2;
      tt->struct_vals[2].d = -2;
      tt->struct_vals[3].d = -1;
      tt->struct_vals[4].d = 3.5;
      tt->struct_vals[5].d = 1;
    tt++;
    
    // Parameter 'ellip_conf_fuzzy'
    // ctype is '_Fuzzy_f'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ellip_conf_fuzzy");
    tt->descr = tdrpStrDup("Elliptical filter confidence fuzzy function");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_ellip_conf_fuzzy - &_start_;
    tt->array_n_offset = (char *) &ellip_conf_fuzzy_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(Fuzzy_f);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("Fuzzy_f");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_ellip_conf_fuzzy->x - (char *) _ellip_conf_fuzzy;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_ellip_conf_fuzzy->y - (char *) _ellip_conf_fuzzy;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.5;
      tt->struct_vals[3].d = 0.9;
      tt->struct_vals[4].d = 1;
      tt->struct_vals[5].d = 0.1;
    tt++;
    
    // Parameter 'enhance_fuzzy'
    // ctype is '_Fuzzy_f'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("enhance_fuzzy");
    tt->descr = tdrpStrDup("Enhance filter fuzzy function");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_enhance_fuzzy - &_start_;
    tt->array_n_offset = (char *) &enhance_fuzzy_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(Fuzzy_f);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("Fuzzy_f");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_enhance_fuzzy->x - (char *) _enhance_fuzzy;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_enhance_fuzzy->y - (char *) _enhance_fuzzy;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.15;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0.5;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'old_data'
    // ctype is '_Old_data_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("old_data");
    tt->descr = tdrpStrDup("Fields for which we want to get and use older data");
    tt->help = tdrpStrDup("BOOST");
    tt->array_offset = (char *) &_old_data - &_start_;
    tt->array_n_offset = (char *) &old_data_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(Old_data_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("Old_data_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("fieldName");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_old_data->fieldName - (char *) _old_data;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("maxSecondsBack");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_old_data->maxSecondsBack - (char *) _old_data;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("ellipD");
      tt->struct_vals[1].i = 3600;
      tt->struct_vals[2].s = tdrpStrDup("expandEof");
      tt->struct_vals[3].i = 3600;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
