/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Iq2Dsr
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Iq2Dsr reads raw time-series data, computes the moments and writes the contents into a moments FMQ.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA_VERBOSE");
      tt->enum_def.fields[3].val = DEBUG_EXTRA_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'beam_count_for_debug_print'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("beam_count_for_debug_print");
    tt->descr = tdrpStrDup("Interval at which beam data is printed in debug mode.");
    tt->help = tdrpStrDup("We print out beam details in debug mode - this is the number of beams between each print.");
    tt->val_offset = (char *) &beam_count_for_debug_print - &_start_;
    tt->single_val.i = 30;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("THREADING FOR SPEED.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_multiple_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_multiple_threads");
    tt->descr = tdrpStrDup("Option to use multiple threads to improve performance.");
    tt->help = tdrpStrDup("The read, compute and write stages can overlap in time, to improve performance. Also, the compute stage can be split into multiple threads, with each thread working on a discrete number of gates.");
    tt->val_offset = (char *) &use_multiple_threads - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'n_compute_threads'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_compute_threads");
    tt->descr = tdrpStrDup("The number of compute threads.");
    tt->help = tdrpStrDup("The moments are computed in a 'pipe-line' a beam at a time. The pipe line contains the number of compute threads specified.");
    tt->val_offset = (char *) &n_compute_threads - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 8;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("TIME-SERIES DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the files between the start and end times specified on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. In SIMULATE mode, the program moves repeatedly through the file list, creating output files with times set to now. This is useful for simulating an operational radar. In FMQ mode, the program opens the input_fmq, and reads time series data from the queue.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[0].val = FILELIST;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[2].val = REALTIME;
      tt->enum_def.fields[3].name = tdrpStrDup("SIMULATE");
      tt->enum_def.fields[3].val = SIMULATE;
      tt->enum_def.fields[4].name = tdrpStrDup("FMQ");
      tt->enum_def.fields[4].val = FMQ;
    tt->single_val.e = FMQ;
    tt++;
    
    // Parameter 'input_fmq'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq");
    tt->descr = tdrpStrDup("FMQ name for time series data.");
    tt->help = tdrpStrDup("This is used in FMQ mode only.");
    tt->val_offset = (char *) &input_fmq - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/ts");
    tt++;
    
    // Parameter 'position_fmq_at_start'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("position_fmq_at_start");
    tt->descr = tdrpStrDup("Option to position the input FMQ at the start of the queue.");
    tt->help = tdrpStrDup("FMQ mode only. If false, we start reading at the end of the queue. This is the default behavior. If true, we position the read pointer at the start of the queue, and read all data available in the queue before starting to read new data.");
    tt->val_offset = (char *) &position_fmq_at_start - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Dir for input data files.");
    tt->help = tdrpStrDup("This is used in REALTIME and ARCHIVE modes. In FILELIST and SIMULATE modes, the file paths are specified on the command line.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./input");
    tt++;
    
    // Parameter 'use_ldata_info_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_ldata_info_file");
    tt->descr = tdrpStrDup("Option to use _latest_data_info file as input trigger.");
    tt->help = tdrpStrDup("REALTIME mode only. If true, waits on _latest_data_info file. If false, scans the directory for new file.");
    tt->val_offset = (char *) &use_ldata_info_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max valid age of rdata input files in realtime mode (secs)");
    tt->help = tdrpStrDup("This the max valid age for an incoming file. The program will wait for a data file more recent than this age.");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 360;
    tt++;
    
    // Parameter 'invert_hv_flag'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("invert_hv_flag");
    tt->descr = tdrpStrDup("Option to invert the sense of the HV flag in alternating mode.");
    tt->help = tdrpStrDup("In alternating dual-pol mode, the HV flag indicates whether the pulse is horizontally or vertically polarized. Normally 1 indicates H and 0 V. This parameter allows you to invert the sense of the flag, so that 1 is interpreted as V and 0 as H.");
    tt->val_offset = (char *) &invert_hv_flag - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'swap_receiver_channels'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("swap_receiver_channels");
    tt->descr = tdrpStrDup("Option to swap the H and V channels for IQ data from the receiver.");
    tt->help = tdrpStrDup("It is possible that the receiver was incorrectly connected and the channels (H and V for example) are swapped. If this flag is set to TRUE, the channels in the data will be swapped before computing the moments.");
    tt->val_offset = (char *) &swap_receiver_channels - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'cohere_iq_to_burst_phase'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cohere_iq_to_burst_phase");
    tt->descr = tdrpStrDup("Option to cohere the pulse IQ data to the burst phase.");
    tt->help = tdrpStrDup("This is intended for magnetron systems with random phase. If the radar processor has not cohered the IQ data to the burst phase, this can be done as each pulse is read. Set this to TRUE to cohere to burst on read.");
    tt->val_offset = (char *) &cohere_iq_to_burst_phase - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'prt_is_for_previous_interval'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("prt_is_for_previous_interval");
    tt->descr = tdrpStrDup("Does the PRT in the pulse header refer to the previous time interval?.");
    tt->help = tdrpStrDup("If TRUE, the PRT in the pulse header refers to the time from the PREVIOUS pulse to THIS pulse. If FALSE, the PRT in the header refers to the time from THIS pulse to the NEXT pulse.");
    tt->val_offset = (char *) &prt_is_for_previous_interval - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'compute_prt_from_interpulse_periods'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_prt_from_interpulse_periods");
    tt->descr = tdrpStrDup("Compute the PRT values from the inter-pulse time difference?.");
    tt->help = tdrpStrDup("If TRUE, the PRT values will be computed using the time difference between successive pulses. If FALSE, the prt values in the pulse headers will be used.");
    tt->val_offset = (char *) &compute_prt_from_interpulse_periods - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'change_velocity_sign_staggered'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_velocity_sign_staggered");
    tt->descr = tdrpStrDup("Option to change the sign of the velocity in staggered mode.");
    tt->help = tdrpStrDup("If true, the sign of the velocity will be changed only in staggered mode. Both this and the 'change_velocity_sign' parameter in moments_params will be applied, so if both are true they will cancel out.");
    tt->val_offset = (char *) &change_velocity_sign_staggered - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_pulse_width_from_ts_proc'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_pulse_width_from_ts_proc");
    tt->descr = tdrpStrDup("Option to use the pulse width in the ts_processing headers.");
    tt->help = tdrpStrDup("The default mode is to use the pulse width from the pulse headers. However, for some radar systems the pulse width is correct in the ts_processing headers, but not correct in the pulse headers. So this option allows you to override the pulse width in the pulse headers by copying it over from the ts_processing header.");
    tt->val_offset = (char *) &use_pulse_width_from_ts_proc - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'override_primary_prt'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_primary_prt");
    tt->descr = tdrpStrDup("Option to override the prt in the time series.");
    tt->help = tdrpStrDup("If false, we will use the prt in the time series. If true, primary_prt_secs will be used instead.");
    tt->val_offset = (char *) &override_primary_prt - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'primary_prt_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("primary_prt_secs");
    tt->descr = tdrpStrDup("PRT (secs).");
    tt->help = tdrpStrDup("See override_primary_prt.");
    tt->val_offset = (char *) &primary_prt_secs - &_start_;
    tt->single_val.d = 0.001;
    tt++;
    
    // Parameter 'georef_time_margin_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("georef_time_margin_secs");
    tt->descr = tdrpStrDup("Margin for matching platform goeref with pulses (secs).");
    tt->help = tdrpStrDup("The platform georeference objects, if they are included in the data stream, are asynchronous with the pulse objects. Therefore we need to match a georeference object with a pulse object. If the times of the two objects differ by less than this specified margin, the georeference is attached to the pulse. If the time difference exceeds this margin, no georeference is attached to the pulse.");
    tt->val_offset = (char *) &georef_time_margin_secs - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'use_secondary_georeference'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_secondary_georeference");
    tt->descr = tdrpStrDup("If true, use the secondary georeference packet.");
    tt->help = tdrpStrDup("By default, we use the primary georeference packet. And most mobile radars only have one georeference. For those radars that have 2 georef devices, set this to true to use the secondary reference.");
    tt->val_offset = (char *) &use_secondary_georeference - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'check_radar_id'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_radar_id");
    tt->descr = tdrpStrDup("Option to check the radar ID in the time series data stream.");
    tt->help = tdrpStrDup("If TRUE, we will check that the radar_id in the header packet info is either the specified radar_id, or is 0. This allows us to filter out unwanted data from the time series stream. Mostly this is not applicable. However, in some cases time series data from multiple sources is included in a single stream, in which case we need to filter it accordingly.");
    tt->val_offset = (char *) &check_radar_id - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_id'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("radar_id");
    tt->descr = tdrpStrDup("radar_id to be used for filtering incoming data.");
    tt->help = tdrpStrDup("See 'check_radar_id' above.");
    tt->val_offset = (char *) &radar_id - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("COMPUTING THE ANTENNA RATE");
    tt->comment_text = tdrpStrDup("This is required for computing the number of samples in a dwell, and for angle interpolation if set,");
    tt++;
    
    // Parameter 'nsecs_for_antenna_rate'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("nsecs_for_antenna_rate");
    tt->descr = tdrpStrDup("Time for computing antenna rate (sec).");
    tt->help = tdrpStrDup("The rate computed over this time period. If angle interpolation is used, then set this to a larger value than the default. A value of 0.5 is suggested for this case.");
    tt->val_offset = (char *) &nsecs_for_antenna_rate - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("INTERPOLATION OF ANTENNA ANGLES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'interpolate_antenna_angles'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("interpolate_antenna_angles");
    tt->descr = tdrpStrDup("Option to interpolate antenna angles to make sure they vary smoothly.");
    tt->help = tdrpStrDup("Some systems send angles which jump from one value to another and then remain constant for a number of pulses. This option allows you to interpolate these angles so that they vary smoothly from pulse to pulse. In RHI mode the elevation angles are smoothed. In other modes the azimuth angles are smoothed.");
    tt->val_offset = (char *) &interpolate_antenna_angles - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'angle_interp_max_change'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("angle_interp_max_change");
    tt->descr = tdrpStrDup("Maximum change in angle for interpolation (deg).");
    tt->help = tdrpStrDup("See interpolate_antenna_angles. This is the maximum permissable change in angle for interpolation to be performed. If the difference in angle between 2 pulses exceeds this value, interpolation is not performed.");
    tt->val_offset = (char *) &angle_interp_max_change - &_start_;
    tt->single_val.d = 2.5;
    tt++;
    
    // Parameter 'angle_interp_max_queue_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("angle_interp_max_queue_size");
    tt->descr = tdrpStrDup("Maximum queue size for interpolating angles.");
    tt->help = tdrpStrDup("If more than this number of pulses have constant angles, interpolation will not be done.");
    tt->val_offset = (char *) &angle_interp_max_queue_size - &_start_;
    tt->single_val.i = 200;
    tt++;
    
    // Parameter 'angle_interp_adjust_for_latency'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("angle_interp_adjust_for_latency");
    tt->descr = tdrpStrDup("Option to adjust antenna angles for latency in the processing.");
    tt->help = tdrpStrDup("In some systems, the angles are tagged to the IQ pulses late, so that they lag the real angles. Set this to TRUE to adjust for the latency by adjusting the angles for latency multiplied by the angular rate.");
    tt->val_offset = (char *) &angle_interp_adjust_for_latency - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'angle_interp_latency'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("angle_interp_latency");
    tt->descr = tdrpStrDup("Latency of antenna angles (secs).");
    tt->help = tdrpStrDup("See 'adjust_angles_for_latency'.");
    tt->val_offset = (char *) &angle_interp_latency - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'angle_interp_debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("angle_interp_debug");
    tt->descr = tdrpStrDup("Option to turn on debugging for antenna angle interpolation.");
    tt->help = tdrpStrDup("If TRUE, interpolation diagnostics will be printed.");
    tt->val_offset = (char *) &angle_interp_debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("RADAR PARAMETERS");
    tt->comment_text = tdrpStrDup("Some radar parameters may be included in the time series data. This section allows you to optionally override some of those values.");
    tt++;
    
    // Parameter 'platform_type'
    // ctype is '_platform_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("platform_type");
    tt->descr = tdrpStrDup("Set the platform type.");
    tt->help = tdrpStrDup("\tPLATFORM_FIXED  - radar is in a fixed location\n\tPLATFORM_VEHICLE - radar is mounted on a land vehicle\n\tPLATFORM_SHIP - radar is mounted on a ship\n\tPLATFORM_AIRCRAFT_FORE - forward-looking on aircraft\n\tPLATFORM_AIRCRAFT_AFT - backward-looking on aircraft\n\tPLATFORM_AIRCRAFT_TAIL - tail - e.g. ELDORA\n\tPLATFORM_AIRCRAFT_BELLY -  belly radar on aircraft\n\tPLATFORM_AIRCRAFT_ROOF - roof radar on aircraft\n\tPLATFORM_AIRCRAFT_NOSE - radar in nose radome on aircraft\n\tPLATFORM_SATELLITE_ORBIT - orbiting satellite\n\tPLATFORM_SATELLITE_GEOSTAT - geostationary satellite\n");
    tt->val_offset = (char *) &platform_type - &_start_;
    tt->enum_def.name = tdrpStrDup("platform_type_t");
    tt->enum_def.nfields = 12;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PLATFORM_FIXED");
      tt->enum_def.fields[0].val = PLATFORM_FIXED;
      tt->enum_def.fields[1].name = tdrpStrDup("PLATFORM_VEHICLE");
      tt->enum_def.fields[1].val = PLATFORM_VEHICLE;
      tt->enum_def.fields[2].name = tdrpStrDup("PLATFORM_SHIP");
      tt->enum_def.fields[2].val = PLATFORM_SHIP;
      tt->enum_def.fields[3].name = tdrpStrDup("PLATFORM_AIRCRAFT");
      tt->enum_def.fields[3].val = PLATFORM_AIRCRAFT;
      tt->enum_def.fields[4].name = tdrpStrDup("PLATFORM_AIRCRAFT_FORE");
      tt->enum_def.fields[4].val = PLATFORM_AIRCRAFT_FORE;
      tt->enum_def.fields[5].name = tdrpStrDup("PLATFORM_AIRCRAFT_AFT");
      tt->enum_def.fields[5].val = PLATFORM_AIRCRAFT_AFT;
      tt->enum_def.fields[6].name = tdrpStrDup("PLATFORM_AIRCRAFT_TAIL");
      tt->enum_def.fields[6].val = PLATFORM_AIRCRAFT_TAIL;
      tt->enum_def.fields[7].name = tdrpStrDup("PLATFORM_AIRCRAFT_BELLY");
      tt->enum_def.fields[7].val = PLATFORM_AIRCRAFT_BELLY;
      tt->enum_def.fields[8].name = tdrpStrDup("PLATFORM_AIRCRAFT_ROOF");
      tt->enum_def.fields[8].val = PLATFORM_AIRCRAFT_ROOF;
      tt->enum_def.fields[9].name = tdrpStrDup("PLATFORM_AIRCRAFT_NOSE");
      tt->enum_def.fields[9].val = PLATFORM_AIRCRAFT_NOSE;
      tt->enum_def.fields[10].name = tdrpStrDup("PLATFORM_SATELLITE_ORBIT");
      tt->enum_def.fields[10].val = PLATFORM_SATELLITE_ORBIT;
      tt->enum_def.fields[11].name = tdrpStrDup("PLATFORM_SATELLITE_GEOSTAT");
      tt->enum_def.fields[11].val = PLATFORM_SATELLITE_GEOSTAT;
    tt->single_val.e = PLATFORM_FIXED;
    tt++;
    
    // Parameter 'override_primary_axis'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_primary_axis");
    tt->descr = tdrpStrDup("Option to override primary axis on read. If true, the file will be read in, the primary axis will be changed, and then any post-read processing will be performed.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &override_primary_axis - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'primary_axis'
    // ctype is '_primary_axis_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("primary_axis");
    tt->descr = tdrpStrDup("Set the primary axis.");
    tt->help = tdrpStrDup("\tPRIMARY_AXIS_Z - vertical\n\tPRIMARY_AXIS_Y - longitudinal axis of platform\n\tPRIMARY_AXIS_X - lateral axis of platform\n\tPRIMARY_AXIS_Z_PRIME - inverted vertical\n\tPRIMARY_AXIS_Y_PRIME - ELDORA, HRD tail\n\tPRIMARY_AXIS_X_PRIME - translated lateral\n");
    tt->val_offset = (char *) &primary_axis - &_start_;
    tt->enum_def.name = tdrpStrDup("primary_axis_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PRIMARY_AXIS_Z");
      tt->enum_def.fields[0].val = PRIMARY_AXIS_Z;
      tt->enum_def.fields[1].name = tdrpStrDup("PRIMARY_AXIS_Y");
      tt->enum_def.fields[1].val = PRIMARY_AXIS_Y;
      tt->enum_def.fields[2].name = tdrpStrDup("PRIMARY_AXIS_X");
      tt->enum_def.fields[2].val = PRIMARY_AXIS_X;
      tt->enum_def.fields[3].name = tdrpStrDup("PRIMARY_AXIS_Z_PRIME");
      tt->enum_def.fields[3].val = PRIMARY_AXIS_Z_PRIME;
      tt->enum_def.fields[4].name = tdrpStrDup("PRIMARY_AXIS_Y_PRIME");
      tt->enum_def.fields[4].val = PRIMARY_AXIS_Y_PRIME;
      tt->enum_def.fields[5].name = tdrpStrDup("PRIMARY_AXIS_X_PRIME");
      tt->enum_def.fields[5].val = PRIMARY_AXIS_X_PRIME;
    tt->single_val.e = PRIMARY_AXIS_Z;
    tt++;
    
    // Parameter 'override_radar_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_name");
    tt->descr = tdrpStrDup("Option to override the radar name.");
    tt->help = tdrpStrDup("If true, the name in this file will be used. If not, the name in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radar_name");
    tt->descr = tdrpStrDup("Name of the radar.");
    tt->help = tdrpStrDup("See 'override_radar_name'.");
    tt->val_offset = (char *) &radar_name - &_start_;
    tt->single_val.s = tdrpStrDup("SPOL");
    tt++;
    
    // Parameter 'override_radar_location'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_location");
    tt->descr = tdrpStrDup("Option to override the radar location.");
    tt->help = tdrpStrDup("If true, the location in this file will be used. If not, the location in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_location - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_latitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_latitude_deg");
    tt->descr = tdrpStrDup("Radar latitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_latitude_deg - &_start_;
    tt->single_val.d = 39.9321;
    tt++;
    
    // Parameter 'radar_longitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_longitude_deg");
    tt->descr = tdrpStrDup("Radar longitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_longitude_deg - &_start_;
    tt->single_val.d = -105.182;
    tt++;
    
    // Parameter 'radar_altitude_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_altitude_meters");
    tt->descr = tdrpStrDup("Radar altitude msl (meters).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_altitude_meters - &_start_;
    tt->single_val.d = 1742;
    tt++;
    
    // Parameter 'override_gate_geometry'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_gate_geometry");
    tt->descr = tdrpStrDup("Option to override the gate geometry.");
    tt->help = tdrpStrDup("If true, the gate_spacing and start_range in the time series data is overridden by the parameters in this file.");
    tt->val_offset = (char *) &override_gate_geometry - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'gate_spacing_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("gate_spacing_meters");
    tt->descr = tdrpStrDup("Gate spacing (meters).");
    tt->help = tdrpStrDup("See override_gate_geometry.");
    tt->val_offset = (char *) &gate_spacing_meters - &_start_;
    tt->single_val.d = 150;
    tt++;
    
    // Parameter 'start_range_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("start_range_meters");
    tt->descr = tdrpStrDup("Start range (meters).");
    tt->help = tdrpStrDup("See override_gate_geometry.");
    tt->val_offset = (char *) &start_range_meters - &_start_;
    tt->single_val.d = 150;
    tt++;
    
    // Parameter 'override_radar_wavelength'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_wavelength");
    tt->descr = tdrpStrDup("Option to override the radar wavelength.");
    tt->help = tdrpStrDup("If true, the radar wavelength in this file will be used. If not, the wavelength in the time series data will be used if available.");
    tt->val_offset = (char *) &override_radar_wavelength - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_wavelength_cm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_wavelength_cm");
    tt->descr = tdrpStrDup("Radar wavelength (cm).");
    tt->help = tdrpStrDup("See override_radar_wavelength.");
    tt->val_offset = (char *) &radar_wavelength_cm - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'apply_azimuth_offset'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_azimuth_offset");
    tt->descr = tdrpStrDup("Option to apply an offset to the azimuth values.");
    tt->help = tdrpStrDup("If TRUE, this offset will be ADDED to the measured azimuth angles. This is useful, for example, in the case of a mobile platform which is not set up oriented to true north. Suppose you have a truck (like the DOWs) which is oriented off true north. Then if you add in the truck HEADING relative to true north, the measured azimuth angles will be adjusted by the heading, to give azimuth relative to TRUE north.");
    tt->val_offset = (char *) &apply_azimuth_offset - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'azimuth_offset'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("azimuth_offset");
    tt->descr = tdrpStrDup("Azimuth offset (degrees).");
    tt->help = tdrpStrDup("See 'apply_azimuth_offset'. This value will be ADDED to the measured azimuths.");
    tt->val_offset = (char *) &azimuth_offset - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'apply_elevation_offset'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_elevation_offset");
    tt->descr = tdrpStrDup("Option to apply an offset to the elevation values.");
    tt->help = tdrpStrDup("If TRUE, this offset will be ADDED to the measured elevation angles. This is useful to correct for a systematic bias in measured elevation angles.");
    tt->val_offset = (char *) &apply_elevation_offset - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'elevation_offset'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("elevation_offset");
    tt->descr = tdrpStrDup("Elevation offset (degrees).");
    tt->help = tdrpStrDup("See 'apply_elevation_offset'. This value will be ADDED to the measured elevations.");
    tt->val_offset = (char *) &elevation_offset - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'override_scan_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_scan_mode");
    tt->descr = tdrpStrDup("Option to override the scan mode in the time series data.");
    tt->help = tdrpStrDup("Set this to TRUE if the scan_mode is incorrect in the time series, and you can override to a constant scan mode.");
    tt->val_offset = (char *) &override_scan_mode - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'scan_mode_for_override'
    // ctype is '_scan_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("scan_mode_for_override");
    tt->descr = tdrpStrDup("Select the scan mode for override");
    tt->help = tdrpStrDup("See 'override_scan_mode'");
    tt->val_offset = (char *) &scan_mode_for_override - &_start_;
    tt->enum_def.name = tdrpStrDup("scan_mode_t");
    tt->enum_def.nfields = 11;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SCAN_MODE_UNKNOWN");
      tt->enum_def.fields[0].val = SCAN_MODE_UNKNOWN;
      tt->enum_def.fields[1].name = tdrpStrDup("SCAN_MODE_SECTOR");
      tt->enum_def.fields[1].val = SCAN_MODE_SECTOR;
      tt->enum_def.fields[2].name = tdrpStrDup("SCAN_MODE_COPLANE");
      tt->enum_def.fields[2].val = SCAN_MODE_COPLANE;
      tt->enum_def.fields[3].name = tdrpStrDup("SCAN_MODE_RHI");
      tt->enum_def.fields[3].val = SCAN_MODE_RHI;
      tt->enum_def.fields[4].name = tdrpStrDup("SCAN_MODE_VERTICAL_POINTING");
      tt->enum_def.fields[4].val = SCAN_MODE_VERTICAL_POINTING;
      tt->enum_def.fields[5].name = tdrpStrDup("SCAN_MODE_IDLE");
      tt->enum_def.fields[5].val = SCAN_MODE_IDLE;
      tt->enum_def.fields[6].name = tdrpStrDup("SCAN_MODE_SURVEILLANCE");
      tt->enum_def.fields[6].val = SCAN_MODE_SURVEILLANCE;
      tt->enum_def.fields[7].name = tdrpStrDup("SCAN_MODE_SUNSCAN");
      tt->enum_def.fields[7].val = SCAN_MODE_SUNSCAN;
      tt->enum_def.fields[8].name = tdrpStrDup("SCAN_MODE_POINTING");
      tt->enum_def.fields[8].val = SCAN_MODE_POINTING;
      tt->enum_def.fields[9].name = tdrpStrDup("SCAN_MODE_MANUAL_PPI");
      tt->enum_def.fields[9].val = SCAN_MODE_MANUAL_PPI;
      tt->enum_def.fields[10].name = tdrpStrDup("SCAN_MODE_MANUAL_RHI");
      tt->enum_def.fields[10].val = SCAN_MODE_MANUAL_RHI;
    tt->single_val.e = SCAN_MODE_UNKNOWN;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("MOMENTS COMPUTATIONS and BEAM DWELL DEFINITION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'moments_params'
    // ctype is '_moments_params_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("moments_params");
    tt->descr = tdrpStrDup("Moments algorithm parameters.");
    tt->help = tdrpStrDup("Sets the moments algorithm parameters by searching through the list of available options.\n\nSEARCHING FOR CORRECT ENTRY IN LIST: we check 5 possible conditions: (a) scan_mode, (b) prf (pulses per second), (c) antenna rate in degrees/sec, (d) xmit_rcv_mode and (e) scan_name.\nThe specified scan mode is checked against the mode in the incoming data.\nSimilarly for the specified scan name, which is checked against the segment_scan_name in the IWRF time series scan_segment header.\nTo ensure that the data will always be processed, include as the last option a default entry in which none of the checks are performed.\n\nPROCESSING OPTIONS:\n(a) beam_n_samples: number of hits.\n(b) index_the_beams: compute beams indexed on evenly-spaced angles.\n(c) index_resolution: angular resolution of the indexed beams.\n(d) min_antenna_rate_for_indexing (deg/sec): if the antenna rate is less than this value, non-indexed beams will be used.\n(e) window: window to be applied to time series. Note that if the VONHANN or BLACKMAN windows are used, beam_n_samples is automatically adjusted to account for the fact that the window concentrates the power in the central part of the time series. The adjustment corrects beam_n_samples by computing the fraction of the window in which 90% of the power occurs. For the VONHANN window this factor is just below 2.0, and for the BLACKMAN window it is just above 2.0. TUKEY_10 refers to a Tukey window with alpha of 0.1. Similarly TUKEY_20 means alpha is 0.2, etc.\n(f) switching_receiver: DEPRECATED (NO LONGER USED), we assuming a switching receiver for the following modes: DP_ALT_HV_CO_ONLY, DP_ALT_HV_CO_CROSS, DP_SIM_HV_SWITCHED_HV.\n(g) xmit_rcv_mode:  mode for xmit and receive for polarization diversity\n(h) apply_clutter_filter: should we apply clutter filtering?\n(i) apply_sz: apply phase decoding? See PHASE DECODING later in this parameter file.\n\nxmit_rcv_mode options:\n SINGLE_POL: single polarization, H channel.\n SINGLE_POL_V: single polarization, V channel.\n DP_ALT_HV_CO_ONLY: Dual pol, alternating transmission, copolar receiver only (e.g. CP2 S-band)\n DP_ALT_HV_CO_CROSS: Dual pol, alternating transmission, co-polar and cross-polar receivers (e.g. SPOL with Mitch Switch and receiver in switching mode, CHILL)\n DP_ALT_HV_FIXED_HV: Dual pol, alternating transmission, fixed H and V receivers (e.g. SPOL with Mitch Switch and receivers in fixed mode)\n DP_SIM_HV_FIXED_HV: Dual pol, simultaneous transmission, fixed H and V receivers (e.g. NEXRAD upgrade, SPOL with T and receivers in fixed mode)\n DP_SIM_HV_SWITCHED_HV: Dual pol, simultaneous transmission, switching H and V receivers (e.g. SPOL with T and receivers in switching mode)\n DP_H_ONLY_FIXED_HV: Dual pol, H transmission, fixed H and V receivers (e.g. CP2 X band)\n DP_V_ONLY_FIXED_HV: Dual pol, V transmission, fixed H and V receivers\n\nchange_vel_sign: Option to change the sign of the velocity field. For some radars, the signal processing is set up in such a way that the velocity sign is incorrect. Set this flag to TRUE to change the sign.\n\nproc_flags: special processing options, not active yet.\n\nbeam_method:\nSPECIFY_N_SAMPLES:\n  take the next N samples to form the beam;\nSPECIFY_ANGLE:\n  check the scanning angles, use those pulses that traverse the specified angular arc;\nCONSTANT_STEERING_ANGLE:\n  process all pulses with a constant azimuth and elevation - this applies to some electronically-steered radars, where the beam is steered to a fixed angle for a while, and then jumps to a different pointing direction. We use all of the pulses with a constant steering angle to form the beam;\nCONSTANT_PULSE_WIDTH: create beams (dwells) with with constant pulse width. If the pulse width changes we move to a new dwell. Also, optionally specify the pulase width and ignore pulses with a different width.");
    tt->array_offset = (char *) &_moments_params - &_start_;
    tt->array_n_offset = (char *) &moments_params_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(moments_params_t);
    tt->array_n = 4;
    tt->struct_def.name = tdrpStrDup("moments_params_t");
    tt->struct_def.nfields = 23;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("check_scan_mode");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_moments_params->check_scan_mode - (char *) _moments_params;
      tt->struct_def.fields[1].ftype = tdrpStrDup("scan_mode_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("scan_mode");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_moments_params->scan_mode - (char *) _moments_params;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("scan_mode_t");
        tt->struct_def.fields[1].enum_def.nfields = 11;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("SCAN_MODE_UNKNOWN");
        tt->struct_def.fields[1].enum_def.fields[0].val = SCAN_MODE_UNKNOWN;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("SCAN_MODE_SECTOR");
        tt->struct_def.fields[1].enum_def.fields[1].val = SCAN_MODE_SECTOR;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("SCAN_MODE_COPLANE");
        tt->struct_def.fields[1].enum_def.fields[2].val = SCAN_MODE_COPLANE;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("SCAN_MODE_RHI");
        tt->struct_def.fields[1].enum_def.fields[3].val = SCAN_MODE_RHI;
        tt->struct_def.fields[1].enum_def.fields[4].name = tdrpStrDup("SCAN_MODE_VERTICAL_POINTING");
        tt->struct_def.fields[1].enum_def.fields[4].val = SCAN_MODE_VERTICAL_POINTING;
        tt->struct_def.fields[1].enum_def.fields[5].name = tdrpStrDup("SCAN_MODE_IDLE");
        tt->struct_def.fields[1].enum_def.fields[5].val = SCAN_MODE_IDLE;
        tt->struct_def.fields[1].enum_def.fields[6].name = tdrpStrDup("SCAN_MODE_SURVEILLANCE");
        tt->struct_def.fields[1].enum_def.fields[6].val = SCAN_MODE_SURVEILLANCE;
        tt->struct_def.fields[1].enum_def.fields[7].name = tdrpStrDup("SCAN_MODE_SUNSCAN");
        tt->struct_def.fields[1].enum_def.fields[7].val = SCAN_MODE_SUNSCAN;
        tt->struct_def.fields[1].enum_def.fields[8].name = tdrpStrDup("SCAN_MODE_POINTING");
        tt->struct_def.fields[1].enum_def.fields[8].val = SCAN_MODE_POINTING;
        tt->struct_def.fields[1].enum_def.fields[9].name = tdrpStrDup("SCAN_MODE_MANUAL_PPI");
        tt->struct_def.fields[1].enum_def.fields[9].val = SCAN_MODE_MANUAL_PPI;
        tt->struct_def.fields[1].enum_def.fields[10].name = tdrpStrDup("SCAN_MODE_MANUAL_RHI");
        tt->struct_def.fields[1].enum_def.fields[10].val = SCAN_MODE_MANUAL_RHI;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("check_prf");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_moments_params->check_prf - (char *) _moments_params;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("prf_lower_limit");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_moments_params->prf_lower_limit - (char *) _moments_params;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("prf_upper_limit");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_moments_params->prf_upper_limit - (char *) _moments_params;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("check_antenna_rate");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_moments_params->check_antenna_rate - (char *) _moments_params;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("antenna_rate_lower_limit");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_moments_params->antenna_rate_lower_limit - (char *) _moments_params;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("antenna_rate_upper_limit");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_moments_params->antenna_rate_upper_limit - (char *) _moments_params;
      tt->struct_def.fields[8].ftype = tdrpStrDup("beam_method_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("beam_method");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_moments_params->beam_method - (char *) _moments_params;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("beam_method_t");
        tt->struct_def.fields[8].enum_def.nfields = 4;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("BEAM_SPECIFY_N_SAMPLES");
        tt->struct_def.fields[8].enum_def.fields[0].val = BEAM_SPECIFY_N_SAMPLES;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("BEAM_SPECIFY_ANGLE");
        tt->struct_def.fields[8].enum_def.fields[1].val = BEAM_SPECIFY_ANGLE;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("BEAM_CONSTANT_STEERING_ANGLE");
        tt->struct_def.fields[8].enum_def.fields[2].val = BEAM_CONSTANT_STEERING_ANGLE;
        tt->struct_def.fields[8].enum_def.fields[3].name = tdrpStrDup("BEAM_CONSTANT_PULSE_WIDTH");
        tt->struct_def.fields[8].enum_def.fields[3].val = BEAM_CONSTANT_PULSE_WIDTH;
      tt->struct_def.fields[9].ftype = tdrpStrDup("int");
      tt->struct_def.fields[9].fname = tdrpStrDup("beam_n_samples");
      tt->struct_def.fields[9].ptype = INT_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_moments_params->beam_n_samples - (char *) _moments_params;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("beam_angle_deg");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_moments_params->beam_angle_deg - (char *) _moments_params;
      tt->struct_def.fields[11].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[11].fname = tdrpStrDup("index_the_beams");
      tt->struct_def.fields[11].ptype = BOOL_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_moments_params->index_the_beams - (char *) _moments_params;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("indexed_resolution");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_moments_params->indexed_resolution - (char *) _moments_params;
      tt->struct_def.fields[13].ftype = tdrpStrDup("double");
      tt->struct_def.fields[13].fname = tdrpStrDup("min_antenna_rate_for_indexing");
      tt->struct_def.fields[13].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_moments_params->min_antenna_rate_for_indexing - (char *) _moments_params;
      tt->struct_def.fields[14].ftype = tdrpStrDup("window_t");
      tt->struct_def.fields[14].fname = tdrpStrDup("window");
      tt->struct_def.fields[14].ptype = ENUM_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &_moments_params->window - (char *) _moments_params;
        tt->struct_def.fields[14].enum_def.name = tdrpStrDup("window_t");
        tt->struct_def.fields[14].enum_def.nfields = 8;
        tt->struct_def.fields[14].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[14].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[14].enum_def.fields[0].name = tdrpStrDup("WINDOW_RECT");
        tt->struct_def.fields[14].enum_def.fields[0].val = WINDOW_RECT;
        tt->struct_def.fields[14].enum_def.fields[1].name = tdrpStrDup("WINDOW_VONHANN");
        tt->struct_def.fields[14].enum_def.fields[1].val = WINDOW_VONHANN;
        tt->struct_def.fields[14].enum_def.fields[2].name = tdrpStrDup("WINDOW_BLACKMAN");
        tt->struct_def.fields[14].enum_def.fields[2].val = WINDOW_BLACKMAN;
        tt->struct_def.fields[14].enum_def.fields[3].name = tdrpStrDup("WINDOW_BLACKMAN_NUTTALL");
        tt->struct_def.fields[14].enum_def.fields[3].val = WINDOW_BLACKMAN_NUTTALL;
        tt->struct_def.fields[14].enum_def.fields[4].name = tdrpStrDup("WINDOW_TUKEY_10");
        tt->struct_def.fields[14].enum_def.fields[4].val = WINDOW_TUKEY_10;
        tt->struct_def.fields[14].enum_def.fields[5].name = tdrpStrDup("WINDOW_TUKEY_20");
        tt->struct_def.fields[14].enum_def.fields[5].val = WINDOW_TUKEY_20;
        tt->struct_def.fields[14].enum_def.fields[6].name = tdrpStrDup("WINDOW_TUKEY_30");
        tt->struct_def.fields[14].enum_def.fields[6].val = WINDOW_TUKEY_30;
        tt->struct_def.fields[14].enum_def.fields[7].name = tdrpStrDup("WINDOW_TUKEY_50");
        tt->struct_def.fields[14].enum_def.fields[7].val = WINDOW_TUKEY_50;
      tt->struct_def.fields[15].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[15].fname = tdrpStrDup("switching_receiver");
      tt->struct_def.fields[15].ptype = BOOL_TYPE;
      tt->struct_def.fields[15].rel_offset = 
        (char *) &_moments_params->switching_receiver - (char *) _moments_params;
      tt->struct_def.fields[16].ftype = tdrpStrDup("xmit_rcv_mode_t");
      tt->struct_def.fields[16].fname = tdrpStrDup("xmit_rcv_mode");
      tt->struct_def.fields[16].ptype = ENUM_TYPE;
      tt->struct_def.fields[16].rel_offset = 
        (char *) &_moments_params->xmit_rcv_mode - (char *) _moments_params;
        tt->struct_def.fields[16].enum_def.name = tdrpStrDup("xmit_rcv_mode_t");
        tt->struct_def.fields[16].enum_def.nfields = 9;
        tt->struct_def.fields[16].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[16].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[16].enum_def.fields[0].name = tdrpStrDup("SINGLE_POL");
        tt->struct_def.fields[16].enum_def.fields[0].val = SINGLE_POL;
        tt->struct_def.fields[16].enum_def.fields[1].name = tdrpStrDup("DP_ALT_HV_CO_ONLY");
        tt->struct_def.fields[16].enum_def.fields[1].val = DP_ALT_HV_CO_ONLY;
        tt->struct_def.fields[16].enum_def.fields[2].name = tdrpStrDup("DP_ALT_HV_CO_CROSS");
        tt->struct_def.fields[16].enum_def.fields[2].val = DP_ALT_HV_CO_CROSS;
        tt->struct_def.fields[16].enum_def.fields[3].name = tdrpStrDup("DP_ALT_HV_FIXED_HV");
        tt->struct_def.fields[16].enum_def.fields[3].val = DP_ALT_HV_FIXED_HV;
        tt->struct_def.fields[16].enum_def.fields[4].name = tdrpStrDup("DP_SIM_HV_FIXED_HV");
        tt->struct_def.fields[16].enum_def.fields[4].val = DP_SIM_HV_FIXED_HV;
        tt->struct_def.fields[16].enum_def.fields[5].name = tdrpStrDup("DP_SIM_HV_SWITCHED_HV");
        tt->struct_def.fields[16].enum_def.fields[5].val = DP_SIM_HV_SWITCHED_HV;
        tt->struct_def.fields[16].enum_def.fields[6].name = tdrpStrDup("DP_H_ONLY_FIXED_HV");
        tt->struct_def.fields[16].enum_def.fields[6].val = DP_H_ONLY_FIXED_HV;
        tt->struct_def.fields[16].enum_def.fields[7].name = tdrpStrDup("DP_V_ONLY_FIXED_HV");
        tt->struct_def.fields[16].enum_def.fields[7].val = DP_V_ONLY_FIXED_HV;
        tt->struct_def.fields[16].enum_def.fields[8].name = tdrpStrDup("SINGLE_POL_V");
        tt->struct_def.fields[16].enum_def.fields[8].val = SINGLE_POL_V;
      tt->struct_def.fields[17].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[17].fname = tdrpStrDup("apply_clutter_filter");
      tt->struct_def.fields[17].ptype = BOOL_TYPE;
      tt->struct_def.fields[17].rel_offset = 
        (char *) &_moments_params->apply_clutter_filter - (char *) _moments_params;
      tt->struct_def.fields[18].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[18].fname = tdrpStrDup("apply_sz");
      tt->struct_def.fields[18].ptype = BOOL_TYPE;
      tt->struct_def.fields[18].rel_offset = 
        (char *) &_moments_params->apply_sz - (char *) _moments_params;
      tt->struct_def.fields[19].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[19].fname = tdrpStrDup("change_velocity_sign");
      tt->struct_def.fields[19].ptype = BOOL_TYPE;
      tt->struct_def.fields[19].rel_offset = 
        (char *) &_moments_params->change_velocity_sign - (char *) _moments_params;
      tt->struct_def.fields[20].ftype = tdrpStrDup("processing_flags_t");
      tt->struct_def.fields[20].fname = tdrpStrDup("proc_flags");
      tt->struct_def.fields[20].ptype = ENUM_TYPE;
      tt->struct_def.fields[20].rel_offset = 
        (char *) &_moments_params->proc_flags - (char *) _moments_params;
        tt->struct_def.fields[20].enum_def.name = tdrpStrDup("processing_flags_t");
        tt->struct_def.fields[20].enum_def.nfields = 2;
        tt->struct_def.fields[20].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[20].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[20].enum_def.fields[0].name = tdrpStrDup("PROC_FLAGS_NONE");
        tt->struct_def.fields[20].enum_def.fields[0].val = PROC_FLAGS_NONE;
        tt->struct_def.fields[20].enum_def.fields[1].name = tdrpStrDup("PROC_FLAGS_DUAL_PRT");
        tt->struct_def.fields[20].enum_def.fields[1].val = PROC_FLAGS_DUAL_PRT;
      tt->struct_def.fields[21].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[21].fname = tdrpStrDup("check_scan_name");
      tt->struct_def.fields[21].ptype = BOOL_TYPE;
      tt->struct_def.fields[21].rel_offset = 
        (char *) &_moments_params->check_scan_name - (char *) _moments_params;
      tt->struct_def.fields[22].ftype = tdrpStrDup("string");
      tt->struct_def.fields[22].fname = tdrpStrDup("scan_name");
      tt->struct_def.fields[22].ptype = STRING_TYPE;
      tt->struct_def.fields[22].rel_offset = 
        (char *) &_moments_params->scan_name - (char *) _moments_params;
    tt->n_struct_vals = 92;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].e = SCAN_MODE_SURVEILLANCE;
      tt->struct_vals[2].b = pFALSE;
      tt->struct_vals[3].d = 0;
      tt->struct_vals[4].d = 2000;
      tt->struct_vals[5].b = pFALSE;
      tt->struct_vals[6].d = 0;
      tt->struct_vals[7].d = 90;
      tt->struct_vals[8].e = BEAM_SPECIFY_N_SAMPLES;
      tt->struct_vals[9].i = 192;
      tt->struct_vals[10].d = 1;
      tt->struct_vals[11].b = pTRUE;
      tt->struct_vals[12].d = 1;
      tt->struct_vals[13].d = 5;
      tt->struct_vals[14].e = WINDOW_VONHANN;
      tt->struct_vals[15].b = pTRUE;
      tt->struct_vals[16].e = DP_ALT_HV_CO_CROSS;
      tt->struct_vals[17].b = pTRUE;
      tt->struct_vals[18].b = pFALSE;
      tt->struct_vals[19].b = pFALSE;
      tt->struct_vals[20].e = PROC_FLAGS_NONE;
      tt->struct_vals[21].b = pFALSE;
      tt->struct_vals[22].s = tdrpStrDup("not-set");
      tt->struct_vals[23].b = pTRUE;
      tt->struct_vals[24].e = SCAN_MODE_SECTOR;
      tt->struct_vals[25].b = pFALSE;
      tt->struct_vals[26].d = 0;
      tt->struct_vals[27].d = 2000;
      tt->struct_vals[28].b = pFALSE;
      tt->struct_vals[29].d = 0;
      tt->struct_vals[30].d = 90;
      tt->struct_vals[31].e = BEAM_SPECIFY_N_SAMPLES;
      tt->struct_vals[32].i = 192;
      tt->struct_vals[33].d = 1;
      tt->struct_vals[34].b = pTRUE;
      tt->struct_vals[35].d = 0.75;
      tt->struct_vals[36].d = 4;
      tt->struct_vals[37].e = WINDOW_VONHANN;
      tt->struct_vals[38].b = pTRUE;
      tt->struct_vals[39].e = DP_ALT_HV_CO_CROSS;
      tt->struct_vals[40].b = pTRUE;
      tt->struct_vals[41].b = pFALSE;
      tt->struct_vals[42].b = pFALSE;
      tt->struct_vals[43].e = PROC_FLAGS_NONE;
      tt->struct_vals[44].b = pFALSE;
      tt->struct_vals[45].s = tdrpStrDup("not-set");
      tt->struct_vals[46].b = pTRUE;
      tt->struct_vals[47].e = SCAN_MODE_RHI;
      tt->struct_vals[48].b = pFALSE;
      tt->struct_vals[49].d = 0;
      tt->struct_vals[50].d = 2000;
      tt->struct_vals[51].b = pFALSE;
      tt->struct_vals[52].d = 0;
      tt->struct_vals[53].d = 90;
      tt->struct_vals[54].e = BEAM_SPECIFY_N_SAMPLES;
      tt->struct_vals[55].i = 192;
      tt->struct_vals[56].d = 1;
      tt->struct_vals[57].b = pTRUE;
      tt->struct_vals[58].d = 0.5;
      tt->struct_vals[59].d = 3;
      tt->struct_vals[60].e = WINDOW_VONHANN;
      tt->struct_vals[61].b = pTRUE;
      tt->struct_vals[62].e = DP_ALT_HV_CO_CROSS;
      tt->struct_vals[63].b = pTRUE;
      tt->struct_vals[64].b = pFALSE;
      tt->struct_vals[65].b = pFALSE;
      tt->struct_vals[66].e = PROC_FLAGS_NONE;
      tt->struct_vals[67].b = pFALSE;
      tt->struct_vals[68].s = tdrpStrDup("not-set");
      tt->struct_vals[69].b = pFALSE;
      tt->struct_vals[70].e = SCAN_MODE_RHI;
      tt->struct_vals[71].b = pFALSE;
      tt->struct_vals[72].d = 0;
      tt->struct_vals[73].d = 2000;
      tt->struct_vals[74].b = pFALSE;
      tt->struct_vals[75].d = 0;
      tt->struct_vals[76].d = 90;
      tt->struct_vals[77].e = BEAM_SPECIFY_N_SAMPLES;
      tt->struct_vals[78].i = 192;
      tt->struct_vals[79].d = 1;
      tt->struct_vals[80].b = pTRUE;
      tt->struct_vals[81].d = 0.5;
      tt->struct_vals[82].d = 3;
      tt->struct_vals[83].e = WINDOW_VONHANN;
      tt->struct_vals[84].b = pTRUE;
      tt->struct_vals[85].e = DP_ALT_HV_CO_CROSS;
      tt->struct_vals[86].b = pTRUE;
      tt->struct_vals[87].b = pFALSE;
      tt->struct_vals[88].b = pFALSE;
      tt->struct_vals[89].e = PROC_FLAGS_NONE;
      tt->struct_vals[90].b = pFALSE;
      tt->struct_vals[91].s = tdrpStrDup("not-set");
    tt++;
    
    // Parameter 'min_n_samples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_n_samples");
    tt->descr = tdrpStrDup("Min number of samples when computing nsamples in beam_method = BEAM_SPECIFY_ANGLE");
    tt->help = tdrpStrDup("When beam_method is BEAM_SPECIFY_ANGLE, the number of samples is computed from the antenna rate and the requested dwell. However, if the antenna moves too fast, the computed n_samples can become small. This parameter is the lower limits to n_samples.");
    tt->val_offset = (char *) &min_n_samples - &_start_;
    tt->single_val.i = 32;
    tt++;
    
    // Parameter 'max_n_samples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_n_samples");
    tt->descr = tdrpStrDup("Max number of samples when computing nsamples in beam_method = BEAM_SPECIFY_ANGLE");
    tt->help = tdrpStrDup("When beam_method is BEAM_SPECIFY_ANGLE, the number of samples is computed from the antenna rate and the requested dwell. However, when the antenna slows down (say in sector scan) the computed n_samples can become large. This parameter is the upper limits to n_samples.");
    tt->val_offset = (char *) &max_n_samples - &_start_;
    tt->single_val.i = 128;
    tt++;
    
    // Parameter 'specify_pulse_width'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_pulse_width");
    tt->descr = tdrpStrDup("Option to specify the pulse width.");
    tt->help = tdrpStrDup("Only applicable if beam_method = BEAM_CONSTANT_PULSE_WIDTH. See 'fixed_pulse_width_us'. Pulses with different pulse widths are discarded.");
    tt->val_offset = (char *) &specify_pulse_width - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'fixed_pulse_width_us'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("fixed_pulse_width_us");
    tt->descr = tdrpStrDup("Specified pulse width in microseconds.");
    tt->help = tdrpStrDup("See 'specify_pulse_width'. Only applicable if beam_method = BEAM_CONSTANT_PULSE_WIDTH. Pulses with different pulse widths are discarded.");
    tt->val_offset = (char *) &fixed_pulse_width_us - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'control_beam_indexing_from_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("control_beam_indexing_from_time_series");
    tt->descr = tdrpStrDup("Option to control the beam indexing by using information in the time series.");
    tt->help = tdrpStrDup("If true, the beam indexing will be controlled from the time series. In this case the beams_are_indexed flag in the iwrf_ts_processing packet will control the indexing decision, along with specify_dwell_width, indexed_beam_width_deg and indexed_beam_spacing_deg. If this parameter is false, the following will be used from moments_params: index_the_beams, beam_method, beam_angle_deg and indexed_resolition.");
    tt->val_offset = (char *) &control_beam_indexing_from_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'discard_non_indexed_beams'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("discard_non_indexed_beams");
    tt->descr = tdrpStrDup("Option to discard beams that cannot indexed.");
    tt->help = tdrpStrDup("Sometimes, when the antenna moves too slowly, it is not possible to index the beams. In this case we normally revert to non-indexed beams, so that we can at least get some beams from the system. If this parameter is true, we will discard non-indexed beams and only include indexed beams in the output data.");
    tt->val_offset = (char *) &discard_non_indexed_beams - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'control_n_samples_from_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("control_n_samples_from_time_series");
    tt->descr = tdrpStrDup("Option to control n_samples by using the integration_cycle_pulses value in the time series.");
    tt->help = tdrpStrDup("If true, the number of samples will be determined by using the value of integration_cycle_pulses in the time series. If false, the beam_n_samples specified in moments_params will be used.");
    tt->val_offset = (char *) &control_n_samples_from_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'control_xmit_rcv_mode_from_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("control_xmit_rcv_mode_from_time_series");
    tt->descr = tdrpStrDup("Option to control the xmit/rcv mode by using the xmit_rcv_mode value in the time series.");
    tt->help = tdrpStrDup("If true, the moments will be computed according to the xmit_rcv_mode value in the time series. If false, the xmit_rcv_mode in the moments_params will be used.");
    tt->val_offset = (char *) &control_xmit_rcv_mode_from_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'compute_zdr_using_snr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_zdr_using_snr");
    tt->descr = tdrpStrDup("Option to compute ZDR using SNR instead of power.");
    tt->help = tdrpStrDup("If true, we compute ZDR as SNRHC/SNRVC. This method applies the receiver gain, and has the effect of taking into account a difference in noise floor in each channel. The ZDR correction applied must therefore be computed relative to SNR, not power.");
    tt->val_offset = (char *) &compute_zdr_using_snr - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'adjust_dbz_for_measured_xmit_power'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("adjust_dbz_for_measured_xmit_power");
    tt->descr = tdrpStrDup("Option to adjust DBZ based on measured transmitter power.");
    tt->help = tdrpStrDup("If true, and the measured transmitter power is available, the difference between the measured power and calibration power will be used to adjust the computed DBZ fields.");
    tt->val_offset = (char *) &adjust_dbz_for_measured_xmit_power - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'adjust_zdr_for_measured_xmit_power'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("adjust_zdr_for_measured_xmit_power");
    tt->descr = tdrpStrDup("Option to adjust ZDR based on measured transmitter power.");
    tt->help = tdrpStrDup("If true, and the measured transmitter power is available, the difference between the measured power and calibration power will be used to adjust the computed ZDR fields.");
    tt->val_offset = (char *) &adjust_zdr_for_measured_xmit_power - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_measured_xmit_power_dbm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_measured_xmit_power_dbm");
    tt->descr = tdrpStrDup("Min measured xmit power - dBm.");
    tt->help = tdrpStrDup("If the measured power is below this limit, the previous measured value will be used instead.");
    tt->val_offset = (char *) &min_measured_xmit_power_dbm - &_start_;
    tt->single_val.d = 81;
    tt++;
    
    // Parameter 'max_measured_xmit_power_dbm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_measured_xmit_power_dbm");
    tt->descr = tdrpStrDup("Max measured xmit power - dBm.");
    tt->help = tdrpStrDup("If the measured power is above this limit, the previous measured value will be used instead.");
    tt->val_offset = (char *) &max_measured_xmit_power_dbm - &_start_;
    tt->single_val.d = 86;
    tt++;
    
    // Parameter 'check_for_missing_pulses'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_for_missing_pulses");
    tt->descr = tdrpStrDup("Option to check for missing pulses in the time series.");
    tt->help = tdrpStrDup("If missing pulses are found, the beam formed by those pulses will be flagged and a message printed.");
    tt->val_offset = (char *) &check_for_missing_pulses - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'discard_beams_with_missing_pulses'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("discard_beams_with_missing_pulses");
    tt->descr = tdrpStrDup("Option to discard beams with missing pulses in the time series.");
    tt->help = tdrpStrDup("If missing pulses are found, the beam formed by those pulses will be discarded.");
    tt->val_offset = (char *) &discard_beams_with_missing_pulses - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'correct_for_system_phidp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("correct_for_system_phidp");
    tt->descr = tdrpStrDup("Option to correct for system phidp.");
    tt->help = tdrpStrDup("If true, the H and V correlation phases will be corrected by adding/subtracting the system phidp value as appropriate. This avoids premature wrapping of the phased from which phidp and velocity are computed. If false, this correction will not be applied. To find the system phidp, set this to false and compute phidp for vertically-pointing data.");
    tt->val_offset = (char *) &correct_for_system_phidp - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'zdr_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("zdr_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter applied to ZDR field in range (gates).");
    tt->help = tdrpStrDup("Set to 1 if you do not want a median filter applied.");
    tt->val_offset = (char *) &zdr_median_filter_len - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'rhohv_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("rhohv_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter applied to RHOHV field in range (gates).");
    tt->help = tdrpStrDup("Set to 1 if you do not want a median filter applied.");
    tt->val_offset = (char *) &rhohv_median_filter_len - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'staggered_prt_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("staggered_prt_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter applied to unfolding interval for staggered PRT.");
    tt->help = tdrpStrDup("If less than 3, no filtering will be performed.");
    tt->val_offset = (char *) &staggered_prt_median_filter_len - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'compute_velocity_corrected_for_platform_motion'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_velocity_corrected_for_platform_motion");
    tt->descr = tdrpStrDup("Option to compute velocity corrected for platform motion.");
    tt->help = tdrpStrDup("Measured vel can be influenced both by vertical and horizontal platform motinos. If this parameter is true, we use the georeference data to account for platform motion, and correct for velocity accordingly. We compute the correction first for vertical velocity, and then correct for the effects of horizontal veocity.");
    tt->val_offset = (char *) &compute_velocity_corrected_for_platform_motion - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'compute_width_corrected_for_platform_motion'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_width_corrected_for_platform_motion");
    tt->descr = tdrpStrDup("Option to compute width corrected for platform motion.");
    tt->help = tdrpStrDup("For a platform in motion, spectrum width is increased because different parts of the beam observe the platform velocity differently. If this parameter is true, we use the georeference data to correct the spectrum width for platform motion effects. We specify the beam width to be used for this correction, since this may differ somewhat from the nominal beam width.");
    tt->val_offset = (char *) &compute_width_corrected_for_platform_motion - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'width_correction_beamwidth_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("width_correction_beamwidth_deg");
    tt->descr = tdrpStrDup("Beam width to be used for correcting spectrum width for motion (deg).");
    tt->help = tdrpStrDup("This may differ from the nominal radar spectrum width.");
    tt->val_offset = (char *) &width_correction_beamwidth_deg - &_start_;
    tt->single_val.d = 0.69;
    tt++;
    
    // Parameter 'spectrum_width_method'
    // ctype is '_spectrum_width_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("spectrum_width_method");
    tt->descr = tdrpStrDup("Method for computing spectrum width.");
    tt->help = tdrpStrDup("R0R1 is the default. For staggered we use R0Rm in this case. Otherwise we use R1R2 if applicable. For staggered, we use the hybrid if R0R1 is not selected.");
    tt->val_offset = (char *) &spectrum_width_method - &_start_;
    tt->enum_def.name = tdrpStrDup("spectrum_width_method_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("WIDTH_METHOD_R0R1");
      tt->enum_def.fields[0].val = WIDTH_METHOD_R0R1;
      tt->enum_def.fields[1].name = tdrpStrDup("WIDTH_METHOD_R1R2");
      tt->enum_def.fields[1].val = WIDTH_METHOD_R1R2;
      tt->enum_def.fields[2].name = tdrpStrDup("WIDTH_METHOD_HYBRID");
      tt->enum_def.fields[2].val = WIDTH_METHOD_HYBRID;
    tt->single_val.e = WIDTH_METHOD_R0R1;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("RADAR CALIBRATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'startup_cal_file'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("startup_cal_file");
    tt->descr = tdrpStrDup("File name for calibration to be read at startup. Required.");
    tt->help = tdrpStrDup("The startup calibration file is required. The startup cal will be overridden if set_cal_by_pulse_width is true, or if use_cal_from_time_series is true.");
    tt->val_offset = (char *) &startup_cal_file - &_start_;
    tt->single_val.s = tdrpStrDup("./startup_cal.xml");
    tt++;
    
    // Parameter 'set_cal_by_pulse_width'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_cal_by_pulse_width");
    tt->descr = tdrpStrDup("Option to read different cal file depending on the pulse width in the data.");
    tt->help = tdrpStrDup("The calibration changes with pulse width. Therefore, if the radar supports variable pulse widths, you need to specify the location of the calibration files for each pulse width.\nYou can also optionally specify that we use different directories for different XMIT_RCV_MODEs. These are the same as those used in moments_params above.");
    tt->val_offset = (char *) &set_cal_by_pulse_width - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'pulse_width_cals'
    // ctype is '_pulse_width_cal_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("pulse_width_cals");
    tt->descr = tdrpStrDup("Specify the directories in which the calibration files for each pulse width will be stored.");
    tt->help = tdrpStrDup("See 'set_cal_by_pulse_width'. First, the app will determine which of the specified pulse widths best matches the pulse width in the data. The closest available pulse width will be used. The corresponding directory will then be searched. The cal file in that directory which is closest in time to the beam time will be used.\nYou can optionally specify that we check the xmit_rcv_mode and use different cal directories for different modes.\nNOTE - the pulse width is specified in micro-seconds. In addition, (a) if override_cal_zdr_correction is true, and zdr_correction_db != -9999, then the specified zdr_correction_db is applied, and (b) if override_cal_system_phidp is true, and system_phidp_deg != -9999, then the specified system phidp is used.");
    tt->array_offset = (char *) &_pulse_width_cals - &_start_;
    tt->array_n_offset = (char *) &pulse_width_cals_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(pulse_width_cal_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("pulse_width_cal_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("pulse_width_us");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_pulse_width_cals->pulse_width_us - (char *) _pulse_width_cals;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("cal_dir");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_pulse_width_cals->cal_dir - (char *) _pulse_width_cals;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("check_xmit_rcv_mode");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_pulse_width_cals->check_xmit_rcv_mode - (char *) _pulse_width_cals;
      tt->struct_def.fields[3].ftype = tdrpStrDup("xmit_rcv_mode_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("xmit_rcv_mode");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_pulse_width_cals->xmit_rcv_mode - (char *) _pulse_width_cals;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("xmit_rcv_mode_t");
        tt->struct_def.fields[3].enum_def.nfields = 9;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("SINGLE_POL");
        tt->struct_def.fields[3].enum_def.fields[0].val = SINGLE_POL;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("DP_ALT_HV_CO_ONLY");
        tt->struct_def.fields[3].enum_def.fields[1].val = DP_ALT_HV_CO_ONLY;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("DP_ALT_HV_CO_CROSS");
        tt->struct_def.fields[3].enum_def.fields[2].val = DP_ALT_HV_CO_CROSS;
        tt->struct_def.fields[3].enum_def.fields[3].name = tdrpStrDup("DP_ALT_HV_FIXED_HV");
        tt->struct_def.fields[3].enum_def.fields[3].val = DP_ALT_HV_FIXED_HV;
        tt->struct_def.fields[3].enum_def.fields[4].name = tdrpStrDup("DP_SIM_HV_FIXED_HV");
        tt->struct_def.fields[3].enum_def.fields[4].val = DP_SIM_HV_FIXED_HV;
        tt->struct_def.fields[3].enum_def.fields[5].name = tdrpStrDup("DP_SIM_HV_SWITCHED_HV");
        tt->struct_def.fields[3].enum_def.fields[5].val = DP_SIM_HV_SWITCHED_HV;
        tt->struct_def.fields[3].enum_def.fields[6].name = tdrpStrDup("DP_H_ONLY_FIXED_HV");
        tt->struct_def.fields[3].enum_def.fields[6].val = DP_H_ONLY_FIXED_HV;
        tt->struct_def.fields[3].enum_def.fields[7].name = tdrpStrDup("DP_V_ONLY_FIXED_HV");
        tt->struct_def.fields[3].enum_def.fields[7].val = DP_V_ONLY_FIXED_HV;
        tt->struct_def.fields[3].enum_def.fields[8].name = tdrpStrDup("SINGLE_POL_V");
        tt->struct_def.fields[3].enum_def.fields[8].val = SINGLE_POL_V;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("zdr_correction_db");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_pulse_width_cals->zdr_correction_db - (char *) _pulse_width_cals;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("system_phidp_deg");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_pulse_width_cals->system_phidp_deg - (char *) _pulse_width_cals;
    tt->n_struct_vals = 18;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.5;
      tt->struct_vals[1].s = tdrpStrDup("/tmp/cal_pw_0.5");
      tt->struct_vals[2].b = pFALSE;
      tt->struct_vals[3].e = SINGLE_POL;
      tt->struct_vals[4].d = -9999;
      tt->struct_vals[5].d = -9999;
      tt->struct_vals[6].d = 1;
      tt->struct_vals[7].s = tdrpStrDup("/tmp/cal_pw_1.0");
      tt->struct_vals[8].b = pFALSE;
      tt->struct_vals[9].e = SINGLE_POL;
      tt->struct_vals[10].d = -9999;
      tt->struct_vals[11].d = -9999;
      tt->struct_vals[12].d = 2;
      tt->struct_vals[13].s = tdrpStrDup("/tmp/cal_pw_2.0");
      tt->struct_vals[14].b = pFALSE;
      tt->struct_vals[15].e = SINGLE_POL;
      tt->struct_vals[16].d = -9999;
      tt->struct_vals[17].d = -9999;
    tt++;
    
    // Parameter 'cal_recheck_period'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cal_recheck_period");
    tt->descr = tdrpStrDup("Frequency at which to check for new cal (secs).");
    tt->help = tdrpStrDup("The program will scan the calibration directory structure once every period, to check for new calibration files.");
    tt->val_offset = (char *) &cal_recheck_period - &_start_;
    tt->single_val.i = 600;
    tt++;
    
    // Parameter 'use_cal_from_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_cal_from_time_series");
    tt->descr = tdrpStrDup("Option to use cal information from time series data.");
    tt->help = tdrpStrDup("If true, the cal information in the time series data will be used, if available. If false, the cal info in the param file will be used.");
    tt->val_offset = (char *) &use_cal_from_time_series - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'override_cal_dbz_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_cal_dbz_correction");
    tt->descr = tdrpStrDup("Option to override the DBZ correction in the calibration data.");
    tt->help = tdrpStrDup("If true, we will override the DBZ correction in the calibration files. See 'dbz_correction'.");
    tt->val_offset = (char *) &override_cal_dbz_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'dbz_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_correction");
    tt->descr = tdrpStrDup("DBZ correction to be applied to all calibrations (dB).");
    tt->help = tdrpStrDup("See 'override_cal_dbz_correction'.");
    tt->val_offset = (char *) &dbz_correction - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'override_cal_zdr_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_cal_zdr_correction");
    tt->descr = tdrpStrDup("Option to override the ZDR correction in the calibration data.");
    tt->help = tdrpStrDup("If true, the parameter 'zdr_correction_db' will override the zdr correction in the calibration data.");
    tt->val_offset = (char *) &override_cal_zdr_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'zdr_correction_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_correction_db");
    tt->descr = tdrpStrDup("ZDR correction to be applied to all calibrations (dB).");
    tt->help = tdrpStrDup("See 'override_cal_zdr_correction'.");
    tt->val_offset = (char *) &zdr_correction_db - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'threshold_zdr_using_snr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("threshold_zdr_using_snr");
    tt->descr = tdrpStrDup("Option to threshold ZDR using SNR.");
    tt->help = tdrpStrDup("If true, we will only compute ZDR if the SNR in both the H and V co-polar channels exceeds this value. See 'min_snr_db_for_zdr'.");
    tt->val_offset = (char *) &threshold_zdr_using_snr - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_snr_db_for_zdr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_db_for_zdr");
    tt->descr = tdrpStrDup("Min SNR for computing ZDR (dB).");
    tt->help = tdrpStrDup("If the SNR is below this threshold for either the H or V co-polar channels, ZDR will be set to missing. See 'threshold_zdr_using_snr'.");
    tt->val_offset = (char *) &min_snr_db_for_zdr - &_start_;
    tt->single_val.d = -7;
    tt++;
    
    // Parameter 'override_cal_ldr_corrections'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_cal_ldr_corrections");
    tt->descr = tdrpStrDup("Option to override the LDR corrections in the calibration data.");
    tt->help = tdrpStrDup("If true, the parameters 'ldrh_correction_db' and 'ldrv_correction_db' will override the ldr corrections in the calibration data.");
    tt->val_offset = (char *) &override_cal_ldr_corrections - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ldr_correction_db_h'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ldr_correction_db_h");
    tt->descr = tdrpStrDup("LDRH correction to be applied to all calibrations (dB).");
    tt->help = tdrpStrDup("See 'override_cal_ldr_corrections'.");
    tt->val_offset = (char *) &ldr_correction_db_h - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'ldr_correction_db_v'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ldr_correction_db_v");
    tt->descr = tdrpStrDup("LDRV correction to be applied to all calibrations (dB).");
    tt->help = tdrpStrDup("See 'override_cal_ldr_corrections'.");
    tt->val_offset = (char *) &ldr_correction_db_v - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'threshold_ldr_using_snr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("threshold_ldr_using_snr");
    tt->descr = tdrpStrDup("Option to threshold LDR using SNR.");
    tt->help = tdrpStrDup("If true, we will only compute LDR if the SNR in both the co- and cross-polar channels exceeds this value. Since the cross-polar channel is generally the weaker channel, it is the SNR on the cross-polar channel that will be limiting. See 'min_snr_db_for_ldr'.");
    tt->val_offset = (char *) &threshold_ldr_using_snr - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_snr_db_for_ldr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_db_for_ldr");
    tt->descr = tdrpStrDup("Min SNR for computing LDR (dB).");
    tt->help = tdrpStrDup("For LDR, the cross polar channel is the weaker return. Therefore effectively this threshold will be applied to the cross channel. If the SNR is below this threshold for either the co- or cross-polar channels, LDR will be set to missing. See 'threshold_ldr_using_snr'.");
    tt->val_offset = (char *) &min_snr_db_for_ldr - &_start_;
    tt->single_val.d = -7;
    tt++;
    
    // Parameter 'override_cal_system_phidp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_cal_system_phidp");
    tt->descr = tdrpStrDup("Option to override the system PHIDP in the calibration data.");
    tt->help = tdrpStrDup("If true, the parameter 'system_phidp_deg' will override the system phidp in the calibration data.");
    tt->val_offset = (char *) &override_cal_system_phidp - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'system_phidp_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("system_phidp_deg");
    tt->descr = tdrpStrDup("System PHIDP to be applied to all calibrations (deg).");
    tt->help = tdrpStrDup("See 'override_cal_system_phidp'.");
    tt->val_offset = (char *) &system_phidp_deg - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'change_phidp_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_phidp_sign");
    tt->descr = tdrpStrDup("Option to change the sign of PHIDP.");
    tt->help = tdrpStrDup("This should not be necessary - using for testing.");
    tt->val_offset = (char *) &change_phidp_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("CORRECT RECEIVER GAINS BASED ON MEASURED TEMPERATURE IN STATUS XML");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'correct_rx_gains_for_temperature'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("correct_rx_gains_for_temperature");
    tt->descr = tdrpStrDup("Option to correct the calibration receiver gains based on temperature.");
    tt->help = tdrpStrDup("Receiver channel gains can change with temperature and may require correction. If this parameter is TRUE, the gains will be adjusted, using temperature values stored in the status_xml in the time series. IMPORTANT NOTE: this computes the CORRECTION. The correction is then applied to the calibration values read in by Iq2Dsr.");
    tt->val_offset = (char *) &correct_rx_gains_for_temperature - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rx_temp_gain_corrections'
    // ctype is '_rx_temp_gain_correction_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("rx_temp_gain_corrections");
    tt->descr = tdrpStrDup("Correction to be applied to the gain in each receiver channel.");
    tt->help = tdrpStrDup("\n\nThe correction is computed as:\n\n    correction = intercept + temperature * slope. \n\n The tag list allows us to find the temperature in the status xml block in the time series. These should be delimited in xml format, using '<' and '>'. \n\nThe temperature will be searched for in the status_xml section of the time series data. These tags specify how to find the temperature value.\n\nThe status_xml could look something like this:\n\n  <HcrStatus>\n    ....\n    <HcrReceiverStatus>\n      ....\n      <EikTemp>27.4626</EikTemp>\n      ....\n    </HcrReceiverStatus>\n    ....\n  </HcrStatus>\n\nin which case this parameter would be set to:\n\n  <HcrStatus><HcrReceiverStatus><EikTemp>");
    tt->array_offset = (char *) &_rx_temp_gain_corrections - &_start_;
    tt->array_n_offset = (char *) &rx_temp_gain_corrections_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(rx_temp_gain_correction_t);
    tt->array_n = 4;
    tt->struct_def.name = tdrpStrDup("rx_temp_gain_correction_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("rx_channel_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("rx_channel");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_rx_temp_gain_corrections->rx_channel - (char *) _rx_temp_gain_corrections;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("rx_channel_t");
        tt->struct_def.fields[0].enum_def.nfields = 4;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("RX_CHANNEL_HC");
        tt->struct_def.fields[0].enum_def.fields[0].val = RX_CHANNEL_HC;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("RX_CHANNEL_VC");
        tt->struct_def.fields[0].enum_def.fields[1].val = RX_CHANNEL_VC;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("RX_CHANNEL_HX");
        tt->struct_def.fields[0].enum_def.fields[2].val = RX_CHANNEL_HX;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("RX_CHANNEL_VX");
        tt->struct_def.fields[0].enum_def.fields[3].val = RX_CHANNEL_VX;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("slope");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_rx_temp_gain_corrections->slope - (char *) _rx_temp_gain_corrections;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("intercept");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_rx_temp_gain_corrections->intercept - (char *) _rx_temp_gain_corrections;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("temp_tag_list_in_status_xml");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_rx_temp_gain_corrections->temp_tag_list_in_status_xml - (char *) _rx_temp_gain_corrections;
    tt->n_struct_vals = 16;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = RX_CHANNEL_HC;
      tt->struct_vals[1].d = -0.0776;
      tt->struct_vals[2].d = 1.5564;
      tt->struct_vals[3].s = tdrpStrDup("<HcrStatus><HcrReceiverStatus><EikTemp>");
      tt->struct_vals[4].e = RX_CHANNEL_VC;
      tt->struct_vals[5].d = -0.0776;
      tt->struct_vals[6].d = 1.5564;
      tt->struct_vals[7].s = tdrpStrDup("<HcrStatus><HcrReceiverStatus><EikTemp>");
      tt->struct_vals[8].e = RX_CHANNEL_HX;
      tt->struct_vals[9].d = -0.0776;
      tt->struct_vals[10].d = 1.5564;
      tt->struct_vals[11].s = tdrpStrDup("<HcrStatus><HcrReceiverStatus><EikTemp>");
      tt->struct_vals[12].e = RX_CHANNEL_VX;
      tt->struct_vals[13].d = -0.0776;
      tt->struct_vals[14].d = 1.5564;
      tt->struct_vals[15].s = tdrpStrDup("<HcrStatus><HcrReceiverStatus><EikTemp>");
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("FOR HCR, CORRECT RECEIVER GAIN FOR TEMPERATURE USING VALUES FROM SPDB");
    tt->comment_text = tdrpStrDup("Also, optionally correct georeference height.");
    tt++;
    
    // Parameter 'correct_hcr_v_rx_gain_for_temperature'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("correct_hcr_v_rx_gain_for_temperature");
    tt->descr = tdrpStrDup("Option to correct the HCR V-channel receiver gain for temperature.");
    tt->help = tdrpStrDup("Computing the HCR receiver gain correction is complicated. Therefore this is done offline, using the application HcrTempRxGain, and the results are stored as XML in SPDB. Here we retrieve the values from SPDB and apply them to correct the receiver gain.");
    tt->val_offset = (char *) &correct_hcr_v_rx_gain_for_temperature - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'hcr_delta_gain_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hcr_delta_gain_spdb_url");
    tt->descr = tdrpStrDup("URL for HCR gain correction from SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hcr_delta_gain_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("/scr/rain1/rsfdata/projects/socrates/hcr/qc/data/socrates/spdb/tempVsGain");
    tt++;
    
    // Parameter 'hcr_delta_gain_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hcr_delta_gain_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin when finding gain correction data (secs).");
    tt->help = tdrpStrDup("We search for the value closest in time to the beam time. This is the search margin on either side of the search time.");
    tt->val_offset = (char *) &hcr_delta_gain_search_margin_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'hcr_v_rx_delta_gain_tag_list'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hcr_v_rx_delta_gain_tag_list");
    tt->descr = tdrpStrDup("Tag list for HCR V channel gai correction.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hcr_v_rx_delta_gain_tag_list - &_start_;
    tt->single_val.s = tdrpStrDup("<HcrTempGainCorrection><v_delta_gain>");
    tt++;
    
    // Parameter 'correct_altitude_for_egm'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("correct_altitude_for_egm");
    tt->descr = tdrpStrDup("Option to correct the altitude for the geoid.");
    tt->help = tdrpStrDup("This only applies for moving platforms. Altitude from some GPS units is based on the WGS84 ellipsoid. To get altitude relative to MSL, a correction for the geoid based on gravitation strength is required. We use the EGM-2008 geoid table. See: https://earth-info.nga.mil/GandG/wgs84/gravitymod/egm2008/egm08_wgs84.html.");
    tt->val_offset = (char *) &correct_altitude_for_egm - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'egm_2008_geoid_file'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("egm_2008_geoid_file");
    tt->descr = tdrpStrDup("Path to geoid table file.");
    tt->help = tdrpStrDup("Downloads available from https://earth-info.nga.mil/GandG/wgs84/gravitymod. NetCDF file is on the shared drive at HCR->dataProcessing->AltitudeCorrection. The app Egm2Mdv will convert the downloadable file to a netCDF format file.");
    tt->val_offset = (char *) &egm_2008_geoid_file - &_start_;
    tt->single_val.s = tdrpStrDup("./EGM_2008_WGS84_2.5minx2.5min.nc");
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("CORRECT CALIBRATION RECEIVER GAIN USING MEASURED NOISE VALUES");
    tt->comment_text = tdrpStrDup("Noise values are measured using NoiseMon, which computes the noise for gates above a designated height, and checks that rays are not close to the sun or contain significant reflectivity.");
    tt++;
    
    // Parameter 'noise_mon_correct_cal_rx_gain'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_correct_cal_rx_gain");
    tt->descr = tdrpStrDup("Option to correct calibration receiver gains using measured noise values.");
    tt->help = tdrpStrDup("Noise values are measured using NoiseMon.");
    tt->val_offset = (char *) &noise_mon_correct_cal_rx_gain - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'noise_mon_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_spdb_url");
    tt->descr = tdrpStrDup("URL for NoiseMon results in SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &noise_mon_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("$(DATA_DIR)/calibration/spol/noise_mon/sband/spdb");
    tt++;
    
    // Parameter 'noise_mon_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin for finding NoiseMon data (secs).");
    tt->help = tdrpStrDup("We search a time period from the radar time minus the margin to the radar time plus the margin. We compute the mean value within this time range.");
    tt->val_offset = (char *) &noise_mon_search_margin_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'noise_mon_tag_main'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_tag_main");
    tt->descr = tdrpStrDup("XML tag for noise monitoring section.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &noise_mon_tag_main - &_start_;
    tt->single_val.s = tdrpStrDup("NoiseMonitoring");
    tt++;
    
    // Parameter 'noise_mon_tag_list_zdr'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_tag_list_zdr");
    tt->descr = tdrpStrDup("Tag for noise ZDR.");
    tt->help = tdrpStrDup("This tag must exist in the noise monitoring XML.");
    tt->val_offset = (char *) &noise_mon_tag_list_zdr - &_start_;
    tt->single_val.s = tdrpStrDup("<NoiseMonitoring><meanNoiseZdr>");
    tt++;
    
    // Parameter 'noise_mon_tag_list_dbmhc'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_tag_list_dbmhc");
    tt->descr = tdrpStrDup("Tag for noise dbm in H co-polar channel.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &noise_mon_tag_list_dbmhc - &_start_;
    tt->single_val.s = tdrpStrDup("<NoiseMonitoring><meanDbmhc>");
    tt++;
    
    // Parameter 'noise_mon_tag_list_dbmvc'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_tag_list_dbmvc");
    tt->descr = tdrpStrDup("Tag for noise dbm in V co-polar channel.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &noise_mon_tag_list_dbmvc - &_start_;
    tt->single_val.s = tdrpStrDup("<NoiseMonitoring><meanDbmvc>");
    tt++;
    
    // Parameter 'noise_mon_tag_list_site_temp'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_tag_list_site_temp");
    tt->descr = tdrpStrDup("Tag for site temperature.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &noise_mon_tag_list_site_temp - &_start_;
    tt->single_val.s = tdrpStrDup("<SpolStatus><WxStation><tempC>");
    tt++;
    
    // Parameter 'noise_mon_zdrm_corr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_zdrm_corr");
    tt->descr = tdrpStrDup("Correction to estimate ZDRM bias from noise ZDR (dB).");
    tt->help = tdrpStrDup("Separately from this app, we monitor the ZDRM bias, say using vertical pointing scans. We compare the mean ZDRM bias with the mean ZDR as computed from noise. Applying this correction allows us to compute the ZDRM bias to use in the saved calibration.");
    tt->val_offset = (char *) &noise_mon_zdrm_corr - &_start_;
    tt->single_val.d = 0.52;
    tt++;
    
    // Parameter 'noise_mon_mean_site_temp'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_mean_site_temp");
    tt->descr = tdrpStrDup("Mean site temperature for ZDR analysis (C).");
    tt->help = tdrpStrDup("Separately from this app, we determine the dependency of ZDR on site temperature. This is the mean temperature from that analysis. We use this to determine the ZDR bias from temperature.");
    tt->val_offset = (char *) &noise_mon_mean_site_temp - &_start_;
    tt->single_val.d = 27.34;
    tt++;
    
    // Parameter 'noise_mon_zdr_temp_slope'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noise_mon_zdr_temp_slope");
    tt->descr = tdrpStrDup("Slope of ZDR dependency on temperature (dB/C).");
    tt->help = tdrpStrDup("Separately from this app, we determine the dependency of ZDR on site temperature. This is the slope of the ZDR relationship on temperature from that analysis. We use this to determine the ZDR bias from temperature.");
    tt->val_offset = (char *) &noise_mon_zdr_temp_slope - &_start_;
    tt->single_val.d = 0.01296;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("PRECIP-INDUCED ATTENUATION CORRECTION FOR DBZ AND ZDR");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_precip_attenuation_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_precip_attenuation_correction");
    tt->descr = tdrpStrDup("Option to apply precip attenuation correction for DBZ and ZDR.");
    tt->help = tdrpStrDup("The following extra fields will be computed:\n\tDBZ_ATTEN_CORRECTION - correction in dB\n\tZDR_ATTEN_CORRECTION - correction in dB\n\tDBZ_ATTEN_CORRECTED - DBZHC corrected\n\tZDR_ATTEN_CORRECTED - ZDR corrected\n");
    tt->val_offset = (char *) &apply_precip_attenuation_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'specify_coefficients_for_attenuation_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_coefficients_for_attenuation_correction");
    tt->descr = tdrpStrDup("Option to specify the coefficients and exponents - see below.");
    tt->help = tdrpStrDup("If false, the default coefficients will be determined for the radar wavelength.");
    tt->val_offset = (char *) &specify_coefficients_for_attenuation_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'dbz_attenuation_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_attenuation_coefficient");
    tt->descr = tdrpStrDup("Coefficient for computing DBZ attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &dbz_attenuation_coefficient - &_start_;
    tt->single_val.d = 0.017;
    tt++;
    
    // Parameter 'dbz_attenuation_exponent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_attenuation_exponent");
    tt->descr = tdrpStrDup("Exponent for computing DBZ attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &dbz_attenuation_exponent - &_start_;
    tt->single_val.d = 0.84;
    tt++;
    
    // Parameter 'zdr_attenuation_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_attenuation_coefficient");
    tt->descr = tdrpStrDup("Coefficient for computing ZDR attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &zdr_attenuation_coefficient - &_start_;
    tt->single_val.d = 0.017;
    tt++;
    
    // Parameter 'zdr_attenuation_exponent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_attenuation_exponent");
    tt->descr = tdrpStrDup("Exponent for computing ZDR attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &zdr_attenuation_exponent - &_start_;
    tt->single_val.d = 0.84;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("ATMOSPHERIC ATTENUATION CORRECTION METHOD");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'atmos_atten_method'
    // ctype is '_atmos_atten_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("atmos_atten_method");
    tt->descr = tdrpStrDup("Method for computing atmospheric attenuation.");
    tt->help = tdrpStrDup("This is applied to the DBZ fields only.\n\tATMOS_ATTEN_NONE:\n\t\tNo correction is applied\n\tATMOS_ATTEN_CONSTANT:\n\t\tA constant correction in dB/km is applied\n\t\tSee atmos_atten_db_per_km\n\tATMOS_ATTEN_CRPL:\n\t\tUses the method based on the Central Radio Propagation Laboratory\n\t\tmeasurements.\n\t\tSee Doviak and Zrnic, page 44\n");
    tt->val_offset = (char *) &atmos_atten_method - &_start_;
    tt->enum_def.name = tdrpStrDup("atmos_atten_method_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ATMOS_ATTEN_NONE");
      tt->enum_def.fields[0].val = ATMOS_ATTEN_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("ATMOS_ATTEN_CONSTANT");
      tt->enum_def.fields[1].val = ATMOS_ATTEN_CONSTANT;
      tt->enum_def.fields[2].name = tdrpStrDup("ATMOS_ATTEN_CRPL");
      tt->enum_def.fields[2].val = ATMOS_ATTEN_CRPL;
    tt->single_val.e = ATMOS_ATTEN_CRPL;
    tt++;
    
    // Parameter 'atmos_atten_db_per_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("atmos_atten_db_per_km");
    tt->descr = tdrpStrDup("Constant atmospheric attenuation (dB/km).");
    tt->help = tdrpStrDup("DBZ is corrected for this.");
    tt->val_offset = (char *) &atmos_atten_db_per_km - &_start_;
    tt->single_val.d = 0.012;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("CLUTTER FILTERING");
    tt->comment_text = tdrpStrDup("The default clutter filtering method is the Adaptive Filter, with residue correction activated.");
    tt++;
    
    // Parameter 'clutter_filter_type'
    // ctype is '_clutter_filter_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("clutter_filter_type");
    tt->descr = tdrpStrDup("Type of clutter filter to use.");
    tt->help = tdrpStrDup("ADAPTIVE: spectral filter with gaussian interpolation. REGRESSION: polynomial filter with specified interpolation. NOTCH: simple notch filter of specified width. NONE: cancels clutter filtering.");
    tt->val_offset = (char *) &clutter_filter_type - &_start_;
    tt->enum_def.name = tdrpStrDup("clutter_filter_type_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLUTTER_FILTER_ADAPTIVE");
      tt->enum_def.fields[0].val = CLUTTER_FILTER_ADAPTIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("CLUTTER_FILTER_REGRESSION");
      tt->enum_def.fields[1].val = CLUTTER_FILTER_REGRESSION;
      tt->enum_def.fields[2].name = tdrpStrDup("CLUTTER_FILTER_NOTCH");
      tt->enum_def.fields[2].val = CLUTTER_FILTER_NOTCH;
      tt->enum_def.fields[3].name = tdrpStrDup("CLUTTER_FILTER_NONE");
      tt->enum_def.fields[3].val = CLUTTER_FILTER_NONE;
    tt->single_val.e = CLUTTER_FILTER_ADAPTIVE;
    tt++;
    
    // Parameter 'clutter_model_width_in_adaptive_filter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clutter_model_width_in_adaptive_filter");
    tt->descr = tdrpStrDup("Width of clutter, in model used by adaptive filter (m/s).");
    tt->help = tdrpStrDup("The adaptive filter computes a clutter model with the specified width, and uses that model to determing the width of the initial notch.");
    tt->val_offset = (char *) &clutter_model_width_in_adaptive_filter - &_start_;
    tt->single_val.d = 0.75;
    tt++;
    
    // Parameter 'init_notch_width_in_adaptive_filter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("init_notch_width_in_adaptive_filter");
    tt->descr = tdrpStrDup("Width of initial notch in adaptive filter (m/s).");
    tt->help = tdrpStrDup("This is the initial notch width used if the clutter model does not succeed in providing the notch width.");
    tt->val_offset = (char *) &init_notch_width_in_adaptive_filter - &_start_;
    tt->single_val.d = 1.5;
    tt++;
    
    // Parameter 'apply_residue_correction_in_adaptive_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_residue_correction_in_adaptive_filter");
    tt->descr = tdrpStrDup("Option to apply residue correction to adaptive filter.");
    tt->help = tdrpStrDup("At some gates, the spectral noise floor may be high. If this correction is applied, the spectral noise floor will be reduced to the measured noise value.");
    tt->val_offset = (char *) &apply_residue_correction_in_adaptive_filter - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'min_snr_db_for_residue_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_db_for_residue_correction");
    tt->descr = tdrpStrDup("Min SNR for applying the residue correction (dB).");
    tt->help = tdrpStrDup("Spectral residue seems to occur at high powers, when the receiver is close to saturated. This is probably related to increased phase noise. Only apply residue correction if SNR exceeds this value. Otherwise, do not apply a correction.");
    tt->val_offset = (char *) &min_snr_db_for_residue_correction - &_start_;
    tt->single_val.d = 75;
    tt++;
    
    // Parameter 'regression_filter_determine_order_from_cnr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_determine_order_from_cnr");
    tt->descr = tdrpStrDup("Option to determine the polynomial order from the Clutter-to-Noise-Ratio (CNR).");
    tt->help = tdrpStrDup("If TRUE, we compute the CNR from the 3 central spectral points. Then, we compute the order using CNR, antenna speed etc.");
    tt->val_offset = (char *) &regression_filter_determine_order_from_cnr - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'regression_filter_specified_polynomial_order'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_specified_polynomial_order");
    tt->descr = tdrpStrDup("Order of the polynomial fit for the regression filter.");
    tt->help = tdrpStrDup("Used if regression_filter_determine_order_from_cnr is false");
    tt->val_offset = (char *) &regression_filter_specified_polynomial_order - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'regression_filter_clutter_width_factor'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_clutter_width_factor");
    tt->descr = tdrpStrDup("Width factor used when automatically computing polynomial order.");
    tt->help = tdrpStrDup("Applies if regression_filter_determine_order_from_cnr it true. Default is 1. If less than 1, order will decrease. If more than 1, order will increase.");
    tt->val_offset = (char *) &regression_filter_clutter_width_factor - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'regression_filter_cnr_exponent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_cnr_exponent");
    tt->descr = tdrpStrDup("CNR exponent used when automatically computing polynomial order.");
    tt->help = tdrpStrDup("Applies if regression_filter_determine_order_from_cnr it true. Default is 2/3. If less than 2/3, order will decrease. If more than 2/3, order will increase.");
    tt->val_offset = (char *) &regression_filter_cnr_exponent - &_start_;
    tt->single_val.d = 0.666667;
    tt++;
    
    // Parameter 'regression_filter_min_cnr_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_min_cnr_db");
    tt->descr = tdrpStrDup("Min valid CNR - Clutter-to-Noise-Ratio - for applying the filter (dB).");
    tt->help = tdrpStrDup("As a first step, we compute the CNR from the central 3 spectral points. If the CNR is below this threshold, and the CSR is below min_csr (see below) we do not apply the filter at all, and simply return the unfiltered spectrum. This test");
    tt->val_offset = (char *) &regression_filter_min_cnr_db - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'regression_filter_min_csr_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_min_csr_db");
    tt->descr = tdrpStrDup("Min valid CSR - Clutter-to-Signal-Ratio - for applying the filter (dB).");
    tt->help = tdrpStrDup("As a first step, we compute the CSR from the central 3 spectral points. If the CSR is below this threshold, and the CNR is below min_cnr (see above) we do not apply the filter at all, and simply return the unfiltered spectrum.");
    tt->val_offset = (char *) &regression_filter_min_csr_db - &_start_;
    tt->single_val.d = -15;
    tt++;
    
    // Parameter 'regression_filter_notch_interp_method'
    // ctype is '_notch_interp_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("regression_filter_notch_interp_method");
    tt->descr = tdrpStrDup("For the regression filter, option to interpolate power across the notch.");
    tt->help = tdrpStrDup("If NONE, no interpolation is performed. If LINEAR, a linear interpolation is performed across the notch. If GAUSSIAN, an iterative Gaussian interpolation is performed across the notch.");
    tt->val_offset = (char *) &regression_filter_notch_interp_method - &_start_;
    tt->enum_def.name = tdrpStrDup("notch_interp_method_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("INTERP_METHOD_NONE");
      tt->enum_def.fields[0].val = INTERP_METHOD_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("INTERP_METHOD_LINEAR");
      tt->enum_def.fields[1].val = INTERP_METHOD_LINEAR;
      tt->enum_def.fields[2].name = tdrpStrDup("INTERP_METHOD_GAUSSIAN");
      tt->enum_def.fields[2].val = INTERP_METHOD_GAUSSIAN;
    tt->single_val.e = INTERP_METHOD_GAUSSIAN;
    tt++;
    
    // Parameter 'simple_notch_filter_width_mps'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("simple_notch_filter_width_mps");
    tt->descr = tdrpStrDup("Width of simple clutter notch (m/s).");
    tt->help = tdrpStrDup("See use_simple_notch_clutter_filter");
    tt->val_offset = (char *) &simple_notch_filter_width_mps - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'use_h_only_for_alt_mode_clutter_vel'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_h_only_for_alt_mode_clutter_vel");
    tt->descr = tdrpStrDup("Option to use H only pulses for computing clutter velocity in alternating dual pol mode.");
    tt->help = tdrpStrDup("If false, the normal phidp-based method is used everywhere in alternating dual pol mode. If true, the H-only pulses are used to compute velocity where CMD flags a gate as clutter.");
    tt->val_offset = (char *) &use_h_only_for_alt_mode_clutter_vel - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_alt_mode_vel_debug_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_alt_mode_vel_debug_fields");
    tt->descr = tdrpStrDup("Option to write out debug fields for alternating mode velocity.");
    tt->help = tdrpStrDup("If true the following fields are written out: test2=meanConfidence, test3=minVelRun, test4=maxVelRun, test5=unfolded, vel=velAlt, vel_alt_fold_interval, vel_alt_fold_confidence, vel_diff, vel_unfold_interval.");
    tt->val_offset = (char *) &write_alt_mode_vel_debug_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("COMPUTING KDP USING ADAPTIVE FILTER METHOD");
    tt->comment_text = tdrpStrDup("Parameters for computing KDP.");
    tt++;
    
    // Parameter 'KDP_fir_filter_len'
    // ctype is '_fir_filter_len_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("KDP_fir_filter_len");
    tt->descr = tdrpStrDup("Filter length for the FIR filter for PHIDP (gates)");
    tt->help = tdrpStrDup("When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.");
    tt->val_offset = (char *) &KDP_fir_filter_len - &_start_;
    tt->enum_def.name = tdrpStrDup("fir_filter_len_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FIR_LEN_125");
      tt->enum_def.fields[0].val = FIR_LEN_125;
      tt->enum_def.fields[1].name = tdrpStrDup("FIR_LEN_60");
      tt->enum_def.fields[1].val = FIR_LEN_60;
      tt->enum_def.fields[2].name = tdrpStrDup("FIR_LEN_40");
      tt->enum_def.fields[2].val = FIR_LEN_40;
      tt->enum_def.fields[3].name = tdrpStrDup("FIR_LEN_30");
      tt->enum_def.fields[3].val = FIR_LEN_30;
      tt->enum_def.fields[4].name = tdrpStrDup("FIR_LEN_20");
      tt->enum_def.fields[4].val = FIR_LEN_20;
      tt->enum_def.fields[5].name = tdrpStrDup("FIR_LEN_10");
      tt->enum_def.fields[5].val = FIR_LEN_10;
    tt->single_val.e = FIR_LEN_20;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_unfolded'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_unfolded");
    tt->descr = tdrpStrDup("Sets the number of iterations for the initial FIR filter for unfolded PHIDP.");
    tt->help = tdrpStrDup("After unfolding PHIDP, the FIR filter is applied to the unfolded phidp, a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_unfolded - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_conditioned'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_conditioned");
    tt->descr = tdrpStrDup("Sets the number of iterations for the final FIR filter for conditioned PHIDP.");
    tt->help = tdrpStrDup("In order to identify phase shift on backscatter (PSOB), we condition the PHIDP to keep it generally increasing with range. The FIR filter is applied to the conditioned phidp a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_conditioned - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'KDP_use_iterative_filtering'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_use_iterative_filtering");
    tt->descr = tdrpStrDup("Perform iterative filtering to locate backscatter phase shift.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_use_iterative_filtering - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_phidp_difference_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_difference_threshold");
    tt->descr = tdrpStrDup("Difference threshold for the iterative filtering method.");
    tt->help = tdrpStrDup("The FIR filter is applied successively, KDP_n_filt_iterations_conditioned times. After each iteration the result is checked against the original. If the difference is less than this parameter, the original value at that gate is retained. If the difference exceeds this parameter, the new filtered value is retained.");
    tt->val_offset = (char *) &KDP_phidp_difference_threshold - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'KDP_ngates_for_stats'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_ngates_for_stats");
    tt->descr = tdrpStrDup("Number of gates over which the phidp mean, sdev and jitter are computed.");
    tt->help = tdrpStrDup("The mean, sdev and jitter of phidp are computed over a consecutive number of gates in range, centered on the current gate of interest. This parameter is the number of gates over which these statistics are computed.");
    tt->val_offset = (char *) &KDP_ngates_for_stats - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'KDP_phidp_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of phidp in range.");
    tt->help = tdrpStrDup("The sdev of phidp is a good test for valid phidp. The sdev is computed in the circle, so that it takes account of folding if present. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_sdev_max - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'KDP_phidp_jitter_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_jitter_max");
    tt->descr = tdrpStrDup("Sets the threshold for the jitter of phidp in range.");
    tt->help = tdrpStrDup("The jitter of phidp is defined as the mean absolute change in angle between successive phidp measurements in range. It is computed on the circle to take account of folding. If the jitter is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_jitter_max - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'KDP_check_snr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_snr");
    tt->descr = tdrpStrDup("Check the SNR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_snr - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_snr_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking SNR (dB).");
    tt->help = tdrpStrDup("If the SNR drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_snr_threshold - &_start_;
    tt->single_val.d = -6;
    tt++;
    
    // Parameter 'KDP_check_rhohv'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_rhohv");
    tt->descr = tdrpStrDup("Check the RHOHV.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_rhohv - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_rhohv_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_rhohv_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking RHOHV.");
    tt->help = tdrpStrDup("If the RHOHV drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_rhohv_threshold - &_start_;
    tt->single_val.d = 0.95;
    tt++;
    
    // Parameter 'KDP_check_zdr_sdev'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_zdr_sdev");
    tt->descr = tdrpStrDup("Check the standard deviation of ZDR in range?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_zdr_sdev - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_zdr_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_zdr_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of zdr in range.");
    tt->help = tdrpStrDup("The sdev of zdr is a good test for clutter. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_zdr_sdev_max - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'KDP_min_valid_abs_kdp'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_min_valid_abs_kdp");
    tt->descr = tdrpStrDup("Sets the min valid KDP value.");
    tt->help = tdrpStrDup("Values less than this are set to 0.");
    tt->val_offset = (char *) &KDP_min_valid_abs_kdp - &_start_;
    tt->single_val.d = 0.025;
    tt++;
    
    // Parameter 'KDP_debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_debug");
    tt->descr = tdrpStrDup("Option to print debug messages in KDP computation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_write_ray_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_write_ray_files");
    tt->descr = tdrpStrDup("Option to write ray files to debug KDP computation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_write_ray_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_ray_files_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("KDP_ray_files_dir");
    tt->descr = tdrpStrDup("Directory for KDP ray files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_ray_files_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/kdp_ray_files");
    tt++;
    
    // Parameter 'Comment 16'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 16");
    tt->comment_hdr = tdrpStrDup("COMPUTING KDP using Bringi method");
    tt->comment_text = tdrpStrDup("Parameters for computing KDP.");
    tt++;
    
    // Parameter 'KDP_compute_using_hubbert_bringi_method'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_compute_using_hubbert_bringi_method");
    tt->descr = tdrpStrDup("Option to use bringi method for computing KDP.");
    tt->help = tdrpStrDup("If true, KDP will also be computed using the Hubbert-Bringi method");
    tt->val_offset = (char *) &KDP_compute_using_hubbert_bringi_method - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_HB_fir_filter_len'
    // ctype is '_fir_filter_len_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("KDP_HB_fir_filter_len");
    tt->descr = tdrpStrDup("Filter length for the FIR filter for PHIDP (gates)");
    tt->help = tdrpStrDup("When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.");
    tt->val_offset = (char *) &KDP_HB_fir_filter_len - &_start_;
    tt->enum_def.name = tdrpStrDup("fir_filter_len_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FIR_LEN_125");
      tt->enum_def.fields[0].val = FIR_LEN_125;
      tt->enum_def.fields[1].name = tdrpStrDup("FIR_LEN_60");
      tt->enum_def.fields[1].val = FIR_LEN_60;
      tt->enum_def.fields[2].name = tdrpStrDup("FIR_LEN_40");
      tt->enum_def.fields[2].val = FIR_LEN_40;
      tt->enum_def.fields[3].name = tdrpStrDup("FIR_LEN_30");
      tt->enum_def.fields[3].val = FIR_LEN_30;
      tt->enum_def.fields[4].name = tdrpStrDup("FIR_LEN_20");
      tt->enum_def.fields[4].val = FIR_LEN_20;
      tt->enum_def.fields[5].name = tdrpStrDup("FIR_LEN_10");
      tt->enum_def.fields[5].val = FIR_LEN_10;
    tt->single_val.e = FIR_LEN_20;
    tt++;
    
    // Parameter 'KDP_HB_phidp_difference_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_HB_phidp_difference_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for difference of phidp.");
    tt->help = tdrpStrDup("This is used to test the difference between the unfolded phidp value and the filtered phidp value. If the difference exceeds this value, we use the original value instead of the filtered value. Applies to computation of KDP only");
    tt->val_offset = (char *) &KDP_HB_phidp_difference_threshold - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'KDP_HB_phidp_sdev_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_HB_phidp_sdev_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of phidp in range.");
    tt->help = tdrpStrDup("The sdev of phidp is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_HB_phidp_sdev_threshold - &_start_;
    tt->single_val.d = 12;
    tt++;
    
    // Parameter 'KDP_HB_zdr_sdev_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_HB_zdr_sdev_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of zdr in range.");
    tt->help = tdrpStrDup("The sdev of zdr is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_HB_zdr_sdev_threshold - &_start_;
    tt->single_val.d = 1.8;
    tt++;
    
    // Parameter 'KDP_HB_rhohv_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_HB_rhohv_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for rhohv.");
    tt->help = tdrpStrDup("rhohv is a good test for weather. If rhohv is greater than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_HB_rhohv_threshold - &_start_;
    tt->single_val.d = 0.75;
    tt++;
    
    // Parameter 'Comment 17'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 17");
    tt->comment_hdr = tdrpStrDup("NOISE DETECTION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_estimated_noise_for_noise_subtraction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_estimated_noise_for_noise_subtraction");
    tt->descr = tdrpStrDup("Option to correct power for estimated noise.");
    tt->help = tdrpStrDup("We estimate the noise by identifying regions with noise and computing the mean power - see above. If this parameter is set to TRUE, we use the estimated noise instead of teh calibrated noise to compute the noise-subtracted powers.");
    tt->val_offset = (char *) &use_estimated_noise_for_noise_subtraction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_valid_noise_bias_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_valid_noise_bias_db");
    tt->descr = tdrpStrDup("Max valid value for noise bias (dB).");
    tt->help = tdrpStrDup("The estimated noise is only used if the estimated noise bias does not exceed this value. For example, if you do not want to suppress sun spikes, you can set this value to something like 3dB, since sun spikes generally cause a noise increase of 10 dB or more, depending on the wavelength.");
    tt->val_offset = (char *) &max_valid_noise_bias_db - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'noise_ngates_kernel'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("noise_ngates_kernel");
    tt->descr = tdrpStrDup("Number of gates over which the noise detection feature fields are computed.");
    tt->help = tdrpStrDup("To identify noise at a gate, we accumulate the phase change in range for the entire ray. We then assume that the phase change will be linear in a local sense, i.e. within some region around each gate. This parameter specifies the length of the assumed linear region. The phase change error is computed as the mean absolute error between the actual accumulated phase change and the linear fit to the phase change over the local region. NOTE - this number should be odd.");
    tt->val_offset = (char *) &noise_ngates_kernel - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'noise_min_ngates_for_ray_median'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("noise_min_ngates_for_ray_median");
    tt->descr = tdrpStrDup("Min number of gates for computing median noise on a ray.");
    tt->help = tdrpStrDup("In order to compute median noise for a ray, we require noise to be detected at at least this number of gates");
    tt->val_offset = (char *) &noise_min_ngates_for_ray_median - &_start_;
    tt->single_val.i = 30;
    tt++;
    
    // Parameter 'noise_method'
    // ctype is '_noise_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("noise_method");
    tt->descr = tdrpStrDup("Method for computing mean noise.");
    tt->help = tdrpStrDup("\tRAY_BY_RAY: compute noise for each ray individually. \tRUNNING_MEDIAN: store noise values in an array, and compute the mean noise when we have enough data. The noise varies more smoothly than in the RAY_BY_RAY method.");
    tt->val_offset = (char *) &noise_method - &_start_;
    tt->enum_def.name = tdrpStrDup("noise_method_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("NOISE_RAY_BY_RAY");
      tt->enum_def.fields[0].val = NOISE_RAY_BY_RAY;
      tt->enum_def.fields[1].name = tdrpStrDup("NOISE_RUNNING_MEDIAN");
      tt->enum_def.fields[1].val = NOISE_RUNNING_MEDIAN;
    tt->single_val.e = NOISE_RAY_BY_RAY;
    tt++;
    
    // Parameter 'noise_ngates_for_running_median'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("noise_ngates_for_running_median");
    tt->descr = tdrpStrDup("Number of gates used to compute noise running mean.");
    tt->help = tdrpStrDup("When noise is located at a gate, the power values are stored in arrays. When we have accumulated enough gates, the mean is computed.");
    tt->val_offset = (char *) &noise_ngates_for_running_median - &_start_;
    tt->single_val.i = 2500;
    tt++;
    
    // Parameter 'set_equal_noise_bias_in_all_channels'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_equal_noise_bias_in_all_channels");
    tt->descr = tdrpStrDup("Option to force the noise bias to be the same in all channels.");
    tt->help = tdrpStrDup("The H co-polar channel is used as the master, if available, and the noise bias in all channels is set to that for Hc. If Hc is not available, Vc is used.");
    tt->val_offset = (char *) &set_equal_noise_bias_in_all_channels - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 18'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 18");
    tt->comment_hdr = tdrpStrDup("INTEREST MAPS and WEIGHTS for NOISE LOCATION");
    tt->comment_text = tdrpStrDup("Each map should hold at least 2 points. The points should be increasing in value, i.e. the value should increase for each subsequent point. The various interest values are combined using the specified weights in a weighted mean to produce the final interest value.");
    tt++;
    
    // Parameter 'phase_change_error_for_noise_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_noise_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for phase change for noise.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_phase_change_error_for_noise_interest_map - &_start_;
    tt->array_n_offset = (char *) &phase_change_error_for_noise_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_phase_change_error_for_noise_interest_map->value - (char *) _phase_change_error_for_noise_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_phase_change_error_for_noise_interest_map->interest - (char *) _phase_change_error_for_noise_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 35;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 45;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'phase_change_error_for_noise_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_noise_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for phase change error - for noise.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &phase_change_error_for_noise_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'dbm_sdev_for_noise_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_noise_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for sdev of dbm for noise.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_dbm_sdev_for_noise_interest_map - &_start_;
    tt->array_n_offset = (char *) &dbm_sdev_for_noise_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_dbm_sdev_for_noise_interest_map->value - (char *) _dbm_sdev_for_noise_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_dbm_sdev_for_noise_interest_map->interest - (char *) _dbm_sdev_for_noise_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.65;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.75;
      tt->struct_vals[3].d = 0.001;
    tt++;
    
    // Parameter 'dbm_sdev_for_noise_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_noise_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of dbm - for noise.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &dbm_sdev_for_noise_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'ncp_mean_for_noise_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ncp_mean_for_noise_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for mean of ncp for noise.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_ncp_mean_for_noise_interest_map - &_start_;
    tt->array_n_offset = (char *) &ncp_mean_for_noise_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_ncp_mean_for_noise_interest_map->value - (char *) _ncp_mean_for_noise_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_ncp_mean_for_noise_interest_map->interest - (char *) _ncp_mean_for_noise_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.1;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.2;
      tt->struct_vals[3].d = 0.001;
    tt++;
    
    // Parameter 'ncp_mean_for_noise_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ncp_mean_for_noise_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of dbm - for noise.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &ncp_mean_for_noise_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'interest_threshold_for_noise'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("interest_threshold_for_noise");
    tt->descr = tdrpStrDup("Threshold interest value for identifying noise.");
    tt->help = tdrpStrDup("If the fuzzy interest value exceeds this threshold, noise is assumed to exist at that gate.");
    tt->val_offset = (char *) &interest_threshold_for_noise - &_start_;
    tt->single_val.d = 0.51;
    tt++;
    
    // Parameter 'phase_change_error_for_signal_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_signal_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for phase change for signal.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_phase_change_error_for_signal_interest_map - &_start_;
    tt->array_n_offset = (char *) &phase_change_error_for_signal_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_phase_change_error_for_signal_interest_map->value - (char *) _phase_change_error_for_signal_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_phase_change_error_for_signal_interest_map->interest - (char *) _phase_change_error_for_signal_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 10;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 20;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'phase_change_error_for_signal_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_signal_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for phase change error - for signal.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &phase_change_error_for_signal_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'dbm_sdev_for_signal_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_signal_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for sdev of dbm for signal.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_dbm_sdev_for_signal_interest_map - &_start_;
    tt->array_n_offset = (char *) &dbm_sdev_for_signal_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_dbm_sdev_for_signal_interest_map->value - (char *) _dbm_sdev_for_signal_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_dbm_sdev_for_signal_interest_map->interest - (char *) _dbm_sdev_for_signal_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.75;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.85;
      tt->struct_vals[3].d = 0.001;
    tt++;
    
    // Parameter 'dbm_sdev_for_signal_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_signal_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of dbm - for signal.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &dbm_sdev_for_signal_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'interest_threshold_for_signal'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("interest_threshold_for_signal");
    tt->descr = tdrpStrDup("Threshold interest value for identifying signal.");
    tt->help = tdrpStrDup("If the fuzzy interest value exceeds this threshold, signal is assumed to exist at that gate.");
    tt->val_offset = (char *) &interest_threshold_for_signal - &_start_;
    tt->single_val.d = 0.51;
    tt++;
    
    // Parameter 'Comment 19'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 19");
    tt->comment_hdr = tdrpStrDup("CENSORING OUTPUT FIELDS");
    tt->comment_text = tdrpStrDup("You have the option of censoring the output data fields - i.e. setting the fields to missing values - at gates which meet certain criteria. If this is done correctly, it allows you to preserve the valid data and discard the noise, thereby improving compression. This leads to smaller data files.");
    tt++;
    
    // Parameter 'censoring_mode'
    // ctype is '_censoring_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("censoring_mode");
    tt->descr = tdrpStrDup("Control of the censoring operation.");
    tt->help = tdrpStrDup("\tCENSORING_NONE: no censoring performed.\n\tCENSORING_BY_NOISE_FLAG: censor fields for gates with NOISE_FLAG set to true.\n\tCENSORING_BY_SNR_AND_NCP: censoring is performed using thresholds applied to SNR and NCP.");
    tt->val_offset = (char *) &censoring_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("censoring_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CENSORING_NONE");
      tt->enum_def.fields[0].val = CENSORING_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("CENSORING_BY_NOISE_FLAG");
      tt->enum_def.fields[1].val = CENSORING_BY_NOISE_FLAG;
      tt->enum_def.fields[2].name = tdrpStrDup("CENSORING_BY_SNR_AND_NCP");
      tt->enum_def.fields[2].val = CENSORING_BY_SNR_AND_NCP;
    tt->single_val.e = CENSORING_NONE;
    tt++;
    
    // Parameter 'censoring_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("censoring_snr_threshold");
    tt->descr = tdrpStrDup("SNR threshold for censoring (dB).");
    tt->help = tdrpStrDup("Applies to CENSORING_BY_SNR_AND_NCP mode. Censoring is applied if both SNR and NCP are below the specified thresholds.");
    tt->val_offset = (char *) &censoring_snr_threshold - &_start_;
    tt->single_val.d = -1;
    tt++;
    
    // Parameter 'censoring_ncp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("censoring_ncp_threshold");
    tt->descr = tdrpStrDup("NCP threshold for censoring.");
    tt->help = tdrpStrDup("Applies to CENSORING_BY_SNR_AND_NCP mode. Censoring is applied if both SNR and NCP are below the specified thresholds.");
    tt->val_offset = (char *) &censoring_ncp_threshold - &_start_;
    tt->single_val.d = 0.15;
    tt++;
    
    // Parameter 'censoring_min_valid_run'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("censoring_min_valid_run");
    tt->descr = tdrpStrDup("Minimum valid run of non-censored gates.");
    tt->help = tdrpStrDup("Only active if set to 2 or greater. A check is made to remove short runs of noise. Looking along the radial, we compute the number of contiguous gates (a 'run') with uncensored data. For the gates in this run to be accepted the length of the run must exceed censoring_min_valid_run. If the number of gates in a run is less than this, then all gates in the run are censored.");
    tt->val_offset = (char *) &censoring_min_valid_run - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'Comment 20'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 20");
    tt->comment_hdr = tdrpStrDup("REFRACTIVITY FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'change_aiq_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_aiq_sign");
    tt->descr = tdrpStrDup("Option to change sign on AIQ field.");
    tt->help = tdrpStrDup("This affects refractt variables. Set to true to change the sign of the computed AIQ field.");
    tt->val_offset = (char *) &change_aiq_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 21'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 21");
    tt->comment_hdr = tdrpStrDup("PHASE DECODING PROCESSING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'phase_decoding'
    // ctype is '_phase_decoding_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("phase_decoding");
    tt->descr = tdrpStrDup("Control of the phase decoding processing.");
    tt->help = tdrpStrDup("\tPHASE_DECODE_NONE: no phase codes used.\n\tPHASE_DECODE_RANDOM: process for random phase - normally a magnetron transmitter.\n\tPHASE_DECODE_SZ: Generalized SZ phase code processing.\n\tPHASE_DECODE_SZ1: legacy NEXRAD SZ1 phase code processing - only handles 2 trips.");
    tt->val_offset = (char *) &phase_decoding - &_start_;
    tt->enum_def.name = tdrpStrDup("phase_decoding_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PHASE_DECODE_NONE");
      tt->enum_def.fields[0].val = PHASE_DECODE_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("PHASE_DECODE_RANDOM");
      tt->enum_def.fields[1].val = PHASE_DECODE_RANDOM;
      tt->enum_def.fields[2].name = tdrpStrDup("PHASE_DECODE_SZ");
      tt->enum_def.fields[2].val = PHASE_DECODE_SZ;
      tt->enum_def.fields[3].name = tdrpStrDup("PHASE_DECODE_SZ1");
      tt->enum_def.fields[3].val = PHASE_DECODE_SZ1;
    tt->single_val.e = PHASE_DECODE_NONE;
    tt++;
    
    // Parameter 'phase_decoding_ntrips_check'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("phase_decoding_ntrips_check");
    tt->descr = tdrpStrDup("Number of trips to check for signal.");
    tt->help = tdrpStrDup("Any returns in these trips will be adjsuted for.");
    tt->val_offset = (char *) &phase_decoding_ntrips_check - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'phase_decoding_ntrips_save'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("phase_decoding_ntrips_save");
    tt->descr = tdrpStrDup("Number of trips to save after processing.");
    tt->help = tdrpStrDup("Sometimes we choose to discard data from the outer trips, and just save the adjusted data in inner trips.");
    tt->val_offset = (char *) &phase_decoding_ntrips_save - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'phase_decoding_ncp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phase_decoding_ncp_threshold");
    tt->descr = tdrpStrDup("Threshold for Normalized Coherent Power (0 to 1).");
    tt->help = tdrpStrDup("If the NCP for a trip exceeds this value it will be considered for trip processing.");
    tt->val_offset = (char *) &phase_decoding_ncp_threshold - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'phase_decoding_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phase_decoding_snr_threshold");
    tt->descr = tdrpStrDup("Signal-to-noise threshold for phase code processing (dB).");
    tt->help = tdrpStrDup("If the SNR is less than the threshold, no phase code processing is performed.");
    tt->val_offset = (char *) &phase_decoding_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'phase_decoding_notch_width'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phase_decoding_notch_width");
    tt->descr = tdrpStrDup("Notch width as a fraction.");
    tt->help = tdrpStrDup("A notch of this width will be applied in removing trip contamination.");
    tt->val_offset = (char *) &phase_decoding_notch_width - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'sz1_negate_phase_codes'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sz1_negate_phase_codes");
    tt->descr = tdrpStrDup("Option to multiple phase codes by -1.");
    tt->help = tdrpStrDup("In some legacy sz data sets the phase codes are negated. Set this to true for such data cases.");
    tt->val_offset = (char *) &sz1_negate_phase_codes - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sz1_strong_to_weak_power_ratio_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sz1_strong_to_weak_power_ratio_threshold");
    tt->descr = tdrpStrDup("Strong-to-weak power ratio censoring threshold (dB).");
    tt->help = tdrpStrDup("SZ1 decoding only. If the strong to weak trip power ratio is greater than this, we censor the weak trip.");
    tt->val_offset = (char *) &sz1_strong_to_weak_power_ratio_threshold - &_start_;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'sz1_out_of_trip_power_ratio_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sz1_out_of_trip_power_ratio_threshold");
    tt->descr = tdrpStrDup("Ratio of peak power to off-peak replica power (dB).");
    tt->help = tdrpStrDup("SZ1 decoding only. When checking for out-of-trip power after deconvolution, this is the threshold to be used. The power of the spectral peak is compared with the peak for the 6 lowest replicas. If the ratio is less that this for a given number of replicas, it is assumed that out-of-trip power is present. See 'sz_out_of_trip_power_n_replicas'.");
    tt->val_offset = (char *) &sz1_out_of_trip_power_ratio_threshold - &_start_;
    tt->single_val.d = 6;
    tt++;
    
    // Parameter 'sz1_out_of_trip_power_n_replicas'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sz1_out_of_trip_power_n_replicas");
    tt->descr = tdrpStrDup("Number of replicas used for checking for out-of-trip power.");
    tt->help = tdrpStrDup("SZ1 decoding only. When checking for out-of-trip power after deconvolution, this is the number of peaks to check. See 'sz_out_of_trip_power_ratio_threshold'.");
    tt->val_offset = (char *) &sz1_out_of_trip_power_n_replicas - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 1;
    tt->max_val.i = 6;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'sz1_use_regression_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sz1_use_regression_filter");
    tt->descr = tdrpStrDup("Option to use regression filter in SZ decoding.");
    tt->help = tdrpStrDup("If TRUE, a rectangular filter will be applied to SZ decoding.");
    tt->val_offset = (char *) &sz1_use_regression_filter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 22'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 22");
    tt->comment_hdr = tdrpStrDup("CMD - CLUTTER MITIGATION DECISION system");
    tt->comment_text = tdrpStrDup("Option to compute and use CMD fields.");
    tt++;
    
    // Parameter 'cmd_kernel_ngates_tdbz'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cmd_kernel_ngates_tdbz");
    tt->descr = tdrpStrDup("Length of CMD kernel in range for TDBZ (gates).");
    tt->help = tdrpStrDup("TDBZ is computed over a kernel in range.");
    tt->val_offset = (char *) &cmd_kernel_ngates_tdbz - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'cmd_kernel_ngates_spin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cmd_kernel_ngates_spin");
    tt->descr = tdrpStrDup("Length of CMD kernel in range for SPIN (gates).");
    tt->help = tdrpStrDup("SPIN is computed over a kernel in range.");
    tt->val_offset = (char *) &cmd_kernel_ngates_spin - &_start_;
    tt->single_val.i = 11;
    tt++;
    
    // Parameter 'cmd_kernel_ngates_zdr_sdev'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cmd_kernel_ngates_zdr_sdev");
    tt->descr = tdrpStrDup("Length of CMD kernel in range for ZDR sdev (gates).");
    tt->help = tdrpStrDup("sdev_zdr are computed over a kernel in range.");
    tt->val_offset = (char *) &cmd_kernel_ngates_zdr_sdev - &_start_;
    tt->single_val.i = 7;
    tt++;
    
    // Parameter 'cmd_kernel_ngates_phidp_sdev'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cmd_kernel_ngates_phidp_sdev");
    tt->descr = tdrpStrDup("Length of CMD kernel in range for PHIDP sdev (gates).");
    tt->help = tdrpStrDup("sdev_phidp are computed over a kernel in range.");
    tt->val_offset = (char *) &cmd_kernel_ngates_phidp_sdev - &_start_;
    tt->single_val.i = 7;
    tt++;
    
    // Parameter 'cmd_spin_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cmd_spin_dbz_threshold");
    tt->descr = tdrpStrDup("Threshold for computing spin change in the CMD (dBZ).");
    tt->help = tdrpStrDup("The SPIN change variable is computed using the difference in dBZ between adjacent gates. If the difference exceeds this threshold, the change counter is incremented.");
    tt->val_offset = (char *) &cmd_spin_dbz_threshold - &_start_;
    tt->single_val.d = 6.5;
    tt++;
    
    // Parameter 'cmd_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cmd_snr_threshold");
    tt->descr = tdrpStrDup("Signal-to-noise ratio value for CMD (dB).");
    tt->help = tdrpStrDup("Only gates which exceed this snr will be considered for the CMD flag.");
    tt->val_offset = (char *) &cmd_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'cpa_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cpa_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter applied to CPA field in range (gates).");
    tt->help = tdrpStrDup("Set to 1 if you do not want a median filter applied.");
    tt->val_offset = (char *) &cpa_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'cpa_compute_using_alternative'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cpa_compute_using_alternative");
    tt->descr = tdrpStrDup("Option to use alternative method for computing CPA.");
    tt->help = tdrpStrDup("If true, use alternative formulation where we look for the minimum 5-pt running CPA and then compute the CPA values on each side of the minimum. The mean of these two values is returned. This formulation works well for time series in which the CPA value is high, then becomes low for a short period, and then returns to high values for the rest of the series.");
    tt->val_offset = (char *) &cpa_compute_using_alternative - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'cmd_threshold_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cmd_threshold_for_clutter");
    tt->descr = tdrpStrDup("Threshold CMD value for identifying clutter.");
    tt->help = tdrpStrDup("If the CMD value exceeds this threshold, clutter is assumed to exist at that point.");
    tt->val_offset = (char *) &cmd_threshold_for_clutter - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'cmd_check_for_offzero_weather'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cmd_check_for_offzero_weather");
    tt->descr = tdrpStrDup("Option to check for weather well away from zero m/s.");
    tt->help = tdrpStrDup("If true, the off-zero-velocity SNR will be computed after applying a notch of width notch_width_for_offzero_snr. If this exceeds min_snr_for_offzero_weather, cmd_threshold_for_offzero_weather will be used instead of cmd_threshold_for_clutter.");
    tt->val_offset = (char *) &cmd_check_for_offzero_weather - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'cmd_threshold_for_offzero_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cmd_threshold_for_offzero_weather");
    tt->descr = tdrpStrDup("Secondary CMD threshold value to be used if off-zero weather is present.");
    tt->help = tdrpStrDup("This is applied only of the off-zero SNR exceeds min_snr_for_offzero_weather.");
    tt->val_offset = (char *) &cmd_threshold_for_offzero_weather - &_start_;
    tt->single_val.d = 0.2;
    tt++;
    
    // Parameter 'min_snr_for_offzero_weather'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_for_offzero_weather");
    tt->descr = tdrpStrDup("Minimum value for off-zero SNR to identify off-zero weather.");
    tt->help = tdrpStrDup("This is applied only of the off-zero SNR exceeds offzero_snr_threshold.");
    tt->val_offset = (char *) &min_snr_for_offzero_weather - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'notch_width_for_offzero_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("notch_width_for_offzero_snr");
    tt->descr = tdrpStrDup("Notch width for computing off-zero SNR (m/s).");
    tt->help = tdrpStrDup("Off-zero SNR is computed after applying a notch of this width to the spectrum. This needs to be wide enough to ensure that no clutter power is included in the off-zero SNR.");
    tt->val_offset = (char *) &notch_width_for_offzero_snr - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'cmd_check_for_windfarm_clutter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cmd_check_for_windfarm_clutter");
    tt->descr = tdrpStrDup("Option to check for clutter specific to windfarms.");
    tt->help = tdrpStrDup("If true, the spectral snr is computed. This is useful for identifying wind farm clutter. If the spectral SNR values exceeds min_spectral_snr_for_windfarm_clutter, then cmd_threshold_for_windfarm_clutter will be used instead of cmd_threshold_for_clutter.");
    tt->val_offset = (char *) &cmd_check_for_windfarm_clutter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_spectral_snr_for_windfarm_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_spectral_snr_for_windfarm_clutter");
    tt->descr = tdrpStrDup("Min spectral SNR for identification of windfarm clutter (dB).");
    tt->help = tdrpStrDup("See cmd_check_for_windfarm_clutter. If the spectral SNR exceeds this value, it is likely that wind farm clutter is present.");
    tt->val_offset = (char *) &min_spectral_snr_for_windfarm_clutter - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'min_snr_for_windfarm_clutter_check'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_for_windfarm_clutter_check");
    tt->descr = tdrpStrDup("Min SNR for checking for windfarm clutter (dB).");
    tt->help = tdrpStrDup("The windfarm clutter check will only be performed if the SNR for the gate exceeds this value. This test is done to reduce CPU usage.");
    tt->val_offset = (char *) &min_snr_for_windfarm_clutter_check - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'min_cpa_for_windfarm_clutter_check'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_cpa_for_windfarm_clutter_check");
    tt->descr = tdrpStrDup("Min CPA for checking for windfarm clutter.");
    tt->help = tdrpStrDup("The windfarm clutter check will only be performed if the CPA for the gate exceeds this value. This test is done to reduce CPU usage.");
    tt->val_offset = (char *) &min_cpa_for_windfarm_clutter_check - &_start_;
    tt->single_val.d = 0.25;
    tt++;
    
    // Parameter 'apply_db_for_db_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_db_for_db_correction");
    tt->descr = tdrpStrDup("Option to apply legacy NEXRAD db-for-db correction after applying CMD.");
    tt->help = tdrpStrDup("When a significant level of clutter is present, the noise level in the spectral skirts rises. It is not possible to adjust for this directly in the filter. Therefore, an extra correction is needed. If this is set FALSE, the clutter residue is computed from the spectrum. This is the preferred method. If TRUE, the legacy db-for-db correction developed for NEXRAD is used. For every db of power removed by the filter below the db_for_db_threshold, an extra db_for_db is removed. For every db of power removed above the threshold, and extra 1 db is removed.");
    tt->val_offset = (char *) &apply_db_for_db_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'db_for_db_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("db_for_db_ratio");
    tt->descr = tdrpStrDup("Ratio for computing clutter correction when below db_for_db_threshold.");
    tt->help = tdrpStrDup("If the clutter power removed is less than db_for_db_threshold, the db_for_db_corection is the clutter db multiplied by this ratio.");
    tt->val_offset = (char *) &db_for_db_ratio - &_start_;
    tt->single_val.d = 0.2;
    tt++;
    
    // Parameter 'db_for_db_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("db_for_db_threshold");
    tt->descr = tdrpStrDup("Threshold for db_for_db correction.");
    tt->help = tdrpStrDup("If the computed clutter power is less than this threshold, then the db_for_db correction is computed as the db_for_db_ratio multiplied by the clutter power. If the clutter power exceeds this threshold, the correction is 1 db for every db by which the clutter exceeds the threshold.");
    tt->val_offset = (char *) &db_for_db_threshold - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'apply_cmd_speckle_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_cmd_speckle_filter");
    tt->descr = tdrpStrDup("Option to apply speckle filter to CMD flag field.");
    tt->help = tdrpStrDup("\nAfter CMD is run, and the gap filter has been applied, the CMD flag field can still have isolated gates marked as clutter. We refer to these as speckle. These can be point targets - in which case they should be filtered. Or they could be false-alarms, in which case they should be removed from the CMD flag field.\n\nThe speckle filter is designed to remove these gates.\n\nSee cmd_speckle_thresholds.");
    tt->val_offset = (char *) &apply_cmd_speckle_filter - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'cmd_speckle_filter_thresholds'
    // ctype is '_speckle_threshold_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("cmd_speckle_filter_thresholds");
    tt->descr = tdrpStrDup("Thesholds use to test speckle.");
    tt->help = tdrpStrDup("You specify a series of thresholds for speckle of different lengths (in gates). length is the length of the speckle in gates. min_valid_cmd is the cmd threshold for testing those gates. If the cmd at a gate is below the threshold, the CMD_FLAG is set to false. The filter is run once for each specified length, starting at the longest length and moving to the shortest length.");
    tt->array_offset = (char *) &_cmd_speckle_filter_thresholds - &_start_;
    tt->array_n_offset = (char *) &cmd_speckle_filter_thresholds_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(speckle_threshold_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("speckle_threshold_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("length");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_cmd_speckle_filter_thresholds->length - (char *) _cmd_speckle_filter_thresholds;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("min_valid_cmd");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_cmd_speckle_filter_thresholds->min_valid_cmd - (char *) _cmd_speckle_filter_thresholds;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 1;
      tt->struct_vals[1].d = 0.75;
      tt->struct_vals[2].i = 2;
      tt->struct_vals[3].d = 0.65;
      tt->struct_vals[4].i = 3;
      tt->struct_vals[5].d = 0.55;
    tt++;
    
    // Parameter 'apply_cmd_gap_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_cmd_gap_filter");
    tt->descr = tdrpStrDup("Option to apply gap filter to CMD flag field.");
    tt->help = tdrpStrDup("\nAfter CMD is run, the CMD flag field tends to have gaps, which should be filtered, since they are surrounded by filtered gates. The gap infill process is designed to fill the gaps in the flag field.\n\nInitialization:\n\nA template of weights, of length n, is computed with the following values:\n      1, 1/2, 1/3, 1/4, ... 1/n\nwhere n = cmd_gap_filter_len\n\nComputing the forward sum of weights:\n  For each gate at which the flag is not yet set, compute the sum of the (weight * cmd) for each of the previous n gates at which the flag field is set. A weight of 1*cmd applies to the previous gate, (1/2)*cmd applies to the second previous gate, etc.\n\nComputing the reverse sum of weights:\n  For each gate at which the flag is not yet set, compute the sum of the (weight * cmd) for each of the next n gates at which the flag field is set. The weights are used in the reverse sense, i.e 1*cmd applies to the next gate, (1/2)*cmd applies to the second next gate etc.\n\nThe sum-of-weights*cmd is then compared to cmd_gap_filter_threshold\n\nA threshold of 0.35 (the default) will succeed with:\n  a single adjacent flag gate, or\n  2 consecutive gates starting 2 gates away, or\n  3 consecutive gates starting 3 gates away, or\n  4 consecutive gates starting 4 gates away, etc.\n\nThe test will also succeed with a mixture of flagged and unflagged gates at various distances from the test gate.\n\nChecking the sums against the threshold:\n  If both the forward sum and the reverse sum exceed the threshold, then this gate is considered likely to have clutter, and the cmd_flag is set.\n\n");
    tt->val_offset = (char *) &apply_cmd_gap_filter - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'cmd_gap_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cmd_gap_filter_len");
    tt->descr = tdrpStrDup("Number of gates on either side of target gate.");
    tt->help = tdrpStrDup("See apply_cmd_gap_filter");
    tt->val_offset = (char *) &cmd_gap_filter_len - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'cmd_gap_filter_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cmd_gap_filter_threshold");
    tt->descr = tdrpStrDup("Threshold for sum of (weight * cmd) in gap filter.");
    tt->help = tdrpStrDup("If the sum exceeds this value, the gap is filled in. If not, it is left open.");
    tt->val_offset = (char *) &cmd_gap_filter_threshold - &_start_;
    tt->single_val.d = 0.35;
    tt++;
    
    // Parameter 'apply_nexrad_spike_filter_after_cmd'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_nexrad_spike_filter_after_cmd");
    tt->descr = tdrpStrDup("Option to apply spike filter after the CMD.");
    tt->help = tdrpStrDup("If true, the NEXRAD spike filter will be applied to the filtered fields.");
    tt->val_offset = (char *) &apply_nexrad_spike_filter_after_cmd - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 23'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 23");
    tt->comment_hdr = tdrpStrDup("CMD INTEREST MAPS and WEIGHTS");
    tt->comment_text = tdrpStrDup("Each map should hold at least 2 points. The points should be increasing in value, i.e. the value should increase for each subsequent point. The various interest values are combined using the specified weights in a weighted mean to produce the final CMD value.");
    tt++;
    
    // Parameter 'tdbz_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("tdbz_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for TDBZ.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_tdbz_interest_map - &_start_;
    tt->array_n_offset = (char *) &tdbz_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_tdbz_interest_map->value - (char *) _tdbz_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_tdbz_interest_map->interest - (char *) _tdbz_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 20;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 40;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'tdbz_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("tdbz_interest_weight");
    tt->descr = tdrpStrDup("Weight for TDBZ interest.");
    tt->help = tdrpStrDup("Defaults to 0.0 since we normally use the max interest of TDBZ and SPIN instead of TDBZ and SPIN individually.");
    tt->val_offset = (char *) &tdbz_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'spin_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("spin_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for dBZ spin.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_spin_interest_map - &_start_;
    tt->array_n_offset = (char *) &spin_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_spin_interest_map->value - (char *) _spin_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_spin_interest_map->interest - (char *) _spin_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 10;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 25;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'spin_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spin_interest_weight");
    tt->descr = tdrpStrDup("Weight for SPIN interest.");
    tt->help = tdrpStrDup("Defaults to 0.0 since we normally use the max interest of TDBZ and SPIN instead of TDBZ and SPIN individually.");
    tt->val_offset = (char *) &spin_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'max_of_tdbz_and_spin_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_of_tdbz_and_spin_interest_weight");
    tt->descr = tdrpStrDup("Weight for max of TDBZ and SPIN interest.");
    tt->help = tdrpStrDup("A combined interest field is formed by applying the interest maps to TDBZ and SPIN, and taking the maximum of the result. The combined field can then be used as an interest field instead of TDBZ and SPIN individually.");
    tt->val_offset = (char *) &max_of_tdbz_and_spin_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'cpa_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("cpa_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for clutter phase alignment.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_cpa_interest_map - &_start_;
    tt->array_n_offset = (char *) &cpa_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_cpa_interest_map->value - (char *) _cpa_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_cpa_interest_map->interest - (char *) _cpa_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.75;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 0.9;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'cpa_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cpa_interest_weight");
    tt->descr = tdrpStrDup("Weight for clutter phase alignment.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &cpa_interest_weight - &_start_;
    tt->single_val.d = 1.01;
    tt++;
    
    // Parameter 'zdr_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("zdr_sdev_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for zdr.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_zdr_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &zdr_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_zdr_sdev_interest_map->value - (char *) _zdr_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_zdr_sdev_interest_map->interest - (char *) _zdr_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 1.5;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 2.5;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'zdr_sdev_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_sdev_interest_weight");
    tt->descr = tdrpStrDup("Weight for standard deviation of zdr.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_sdev_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'phidp_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("phidp_sdev_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for standard deviation of phidp.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_phidp_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &phidp_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_phidp_sdev_interest_map->value - (char *) _phidp_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_phidp_sdev_interest_map->interest - (char *) _phidp_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 4;
      tt->struct_vals[1].d = -1;
      tt->struct_vals[2].d = 6;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'phidp_sdev_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phidp_sdev_interest_weight");
    tt->descr = tdrpStrDup("Weight for standard deviation of phidp.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &phidp_sdev_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 24'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 24");
    tt->comment_hdr = tdrpStrDup("RHOHV TEST to AUGMENT CMD");
    tt->comment_text = tdrpStrDup("If clutter is present the RHOHV value should increase after application of the clutter filter. We can use a RHOHV test to locate gates at which CMD fails to identify weak clutter. This allows us to improve clutter identification in cases with low clutter-to-noise ratio.");
    tt++;
    
    // Parameter 'apply_rhohv_test_after_cmd'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_rhohv_test_after_cmd");
    tt->descr = tdrpStrDup("Apply the RHOHV test after filtering based on CMD.");
    tt->help = tdrpStrDup("This allows us to identify areas of weak clutter contamination that CMD missed.");
    tt->val_offset = (char *) &apply_rhohv_test_after_cmd - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rhohv_test_min_rhohv'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rhohv_test_min_rhohv");
    tt->descr = tdrpStrDup("Min RHOHV for application of the RHOHV test.");
    tt->help = tdrpStrDup("If RHOHV is less than this, no weather is likely to be present. Therefore do not apply the test to this gate.");
    tt->val_offset = (char *) &rhohv_test_min_rhohv - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'rhohv_test_max_rhohv'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rhohv_test_max_rhohv");
    tt->descr = tdrpStrDup("Max RHOHV for application of the RHOHV test.");
    tt->help = tdrpStrDup("If RHOHV is greater than this, the weather return is highly coherent, so clutter contamination is unlikely.");
    tt->val_offset = (char *) &rhohv_test_max_rhohv - &_start_;
    tt->single_val.d = 0.98;
    tt++;
    
    // Parameter 'rhohv_improvement_factor_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rhohv_improvement_factor_threshold");
    tt->descr = tdrpStrDup("The RHOHV improvment factor is a measure of the change in RHOHV towards 1.0.");
    tt->help = tdrpStrDup("The RHOHV test identifies clutter if the improvement factor exceeds this value.");
    tt->val_offset = (char *) &rhohv_improvement_factor_threshold - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'Comment 25'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 25");
    tt->comment_hdr = tdrpStrDup("SPECTRAL CMD");
    tt->comment_text = tdrpStrDup("You have the option of running the spectral version of CMD, to filter difficult targets such as wind farms. The moments from this step will be stored in variables specifically named for the purpose.");
    tt++;
    
    // Parameter 'run_spectral_cmd'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("run_spectral_cmd");
    tt->descr = tdrpStrDup("Run the spectral-CMD filtering step.");
    tt->help = tdrpStrDup("This computes a version of CMD in the FFT space.");
    tt->val_offset = (char *) &run_spectral_cmd - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'spec_cmd_clutter_filter_type'
    // ctype is '_clutter_filter_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_clutter_filter_type");
    tt->descr = tdrpStrDup("Type of clutter filter to use for spectral CMD.");
    tt->help = tdrpStrDup("ADAPTIVE: spectral filter with gaussian interpolation. REGRESSION: polynomial filter with specified interpolation. NOTCH: simple notch filter of specified width. NONE: cancels clutter filtering.");
    tt->val_offset = (char *) &spec_cmd_clutter_filter_type - &_start_;
    tt->enum_def.name = tdrpStrDup("clutter_filter_type_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLUTTER_FILTER_ADAPTIVE");
      tt->enum_def.fields[0].val = CLUTTER_FILTER_ADAPTIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("CLUTTER_FILTER_REGRESSION");
      tt->enum_def.fields[1].val = CLUTTER_FILTER_REGRESSION;
      tt->enum_def.fields[2].name = tdrpStrDup("CLUTTER_FILTER_NOTCH");
      tt->enum_def.fields[2].val = CLUTTER_FILTER_NOTCH;
      tt->enum_def.fields[3].name = tdrpStrDup("CLUTTER_FILTER_NONE");
      tt->enum_def.fields[3].val = CLUTTER_FILTER_NONE;
    tt->single_val.e = CLUTTER_FILTER_NONE;
    tt++;
    
    // Parameter 'spec_cmd_window_type'
    // ctype is '_window_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_window_type");
    tt->descr = tdrpStrDup("Window to use for spectral CMD.");
    tt->help = tdrpStrDup("VONHANN is recommended.");
    tt->val_offset = (char *) &spec_cmd_window_type - &_start_;
    tt->enum_def.name = tdrpStrDup("window_t");
    tt->enum_def.nfields = 8;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("WINDOW_RECT");
      tt->enum_def.fields[0].val = WINDOW_RECT;
      tt->enum_def.fields[1].name = tdrpStrDup("WINDOW_VONHANN");
      tt->enum_def.fields[1].val = WINDOW_VONHANN;
      tt->enum_def.fields[2].name = tdrpStrDup("WINDOW_BLACKMAN");
      tt->enum_def.fields[2].val = WINDOW_BLACKMAN;
      tt->enum_def.fields[3].name = tdrpStrDup("WINDOW_BLACKMAN_NUTTALL");
      tt->enum_def.fields[3].val = WINDOW_BLACKMAN_NUTTALL;
      tt->enum_def.fields[4].name = tdrpStrDup("WINDOW_TUKEY_10");
      tt->enum_def.fields[4].val = WINDOW_TUKEY_10;
      tt->enum_def.fields[5].name = tdrpStrDup("WINDOW_TUKEY_20");
      tt->enum_def.fields[5].val = WINDOW_TUKEY_20;
      tt->enum_def.fields[6].name = tdrpStrDup("WINDOW_TUKEY_30");
      tt->enum_def.fields[6].val = WINDOW_TUKEY_30;
      tt->enum_def.fields[7].name = tdrpStrDup("WINDOW_TUKEY_50");
      tt->enum_def.fields[7].val = WINDOW_TUKEY_50;
    tt->single_val.e = WINDOW_VONHANN;
    tt++;
    
    // Parameter 'spec_cmd_tdbz_kernel_ngates'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_tdbz_kernel_ngates");
    tt->descr = tdrpStrDup("Kernel size in range for computing TDBZ");
    tt->help = tdrpStrDup("The standard deviation of DBZ-squared is computed over a rectangular kernel, and then the square-root is computed. This is the size of that kernel in range.");
    tt->val_offset = (char *) &spec_cmd_tdbz_kernel_ngates - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'spec_cmd_tdbz_kernel_nsamples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_tdbz_kernel_nsamples");
    tt->descr = tdrpStrDup("Kernel size in samples for computing sdev of TDBZ");
    tt->help = tdrpStrDup("The standard deviation of DBZ-squared is computed over a rectangular kernel, and then the square-root is computed. This is the number of samples in the kernel.");
    tt->val_offset = (char *) &spec_cmd_tdbz_kernel_nsamples - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'spec_cmd_sdev_zdr_kernel_ngates'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_sdev_zdr_kernel_ngates");
    tt->descr = tdrpStrDup("Kernel size in range for computing sdev of zdr");
    tt->help = tdrpStrDup("The standard deviation of ZDR is computed over a rectangular kernel. This is the size of that kernel in range.");
    tt->val_offset = (char *) &spec_cmd_sdev_zdr_kernel_ngates - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'spec_cmd_sdev_zdr_kernel_nsamples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_sdev_zdr_kernel_nsamples");
    tt->descr = tdrpStrDup("Kernel size in samples for computing sdev of zdr");
    tt->help = tdrpStrDup("The standard deviation of ZDR is computed over a rectangular kernel. This is the number of samples in that kernel.");
    tt->val_offset = (char *) &spec_cmd_sdev_zdr_kernel_nsamples - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'spec_cmd_sdev_phidp_kernel_ngates'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_sdev_phidp_kernel_ngates");
    tt->descr = tdrpStrDup("Kernel size in range for computing sdev of phidp");
    tt->help = tdrpStrDup("The standard deviation of PHIDP is computed over a rectangular kernel. This is the size of that kernel in range.");
    tt->val_offset = (char *) &spec_cmd_sdev_phidp_kernel_ngates - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'spec_cmd_sdev_phidp_kernel_nsamples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_sdev_phidp_kernel_nsamples");
    tt->descr = tdrpStrDup("Kernel size in samples for computing sdev of phidp");
    tt->help = tdrpStrDup("The standard deviation of PHIDP is computed over a rectangular kernel. This is the number of samples in that kernel.");
    tt->val_offset = (char *) &spec_cmd_sdev_phidp_kernel_nsamples - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'Comment 26'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 26");
    tt->comment_hdr = tdrpStrDup("SPECTRAL CMD INTEREST MAPS and WEIGHTS");
    tt->comment_text = tdrpStrDup("Each map should hold at least 2 points. The points should be increasing in value, i.e. the value should increase for each subsequent point. The various interest values are combined using the specified weights in a weighted mean to produce the final CMD value.");
    tt++;
    
    // Parameter 'spec_cmd_snr_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_snr_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for SNR in spectral CMD..");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_spec_cmd_snr_interest_map - &_start_;
    tt->array_n_offset = (char *) &spec_cmd_snr_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_spec_cmd_snr_interest_map->value - (char *) _spec_cmd_snr_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_spec_cmd_snr_interest_map->interest - (char *) _spec_cmd_snr_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0.0001;
      tt->struct_vals[2].d = 20;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'spec_cmd_snr_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_snr_interest_weight");
    tt->descr = tdrpStrDup("Weight for SNR interest.");
    tt->help = tdrpStrDup("This weight is used for combining snr interest into the final spectral CMD interest.");
    tt->val_offset = (char *) &spec_cmd_snr_interest_weight - &_start_;
    tt->single_val.d = 1.5;
    tt++;
    
    // Parameter 'spec_cmd_tdbz_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_tdbz_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for TDBZ.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_spec_cmd_tdbz_interest_map - &_start_;
    tt->array_n_offset = (char *) &spec_cmd_tdbz_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_spec_cmd_tdbz_interest_map->value - (char *) _spec_cmd_tdbz_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_spec_cmd_tdbz_interest_map->interest - (char *) _spec_cmd_tdbz_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 30;
      tt->struct_vals[1].d = 0.0001;
      tt->struct_vals[2].d = 40;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'spec_cmd_tdbz_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_tdbz_interest_weight");
    tt->descr = tdrpStrDup("Weight for TDBZ interest.");
    tt->help = tdrpStrDup("This weight is used for combining tdbz interest into the final CMD interest.");
    tt->val_offset = (char *) &spec_cmd_tdbz_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'spec_cmd_zdr_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_zdr_sdev_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for zdr.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_spec_cmd_zdr_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &spec_cmd_zdr_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_spec_cmd_zdr_sdev_interest_map->value - (char *) _spec_cmd_zdr_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_spec_cmd_zdr_sdev_interest_map->interest - (char *) _spec_cmd_zdr_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 3;
      tt->struct_vals[1].d = 0.0001;
      tt->struct_vals[2].d = 4;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'spec_cmd_zdr_sdev_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_zdr_sdev_interest_weight");
    tt->descr = tdrpStrDup("Weight for standard deviation of zdr.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spec_cmd_zdr_sdev_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'spec_cmd_phidp_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_phidp_sdev_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for standard deviation of phidp.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_spec_cmd_phidp_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &spec_cmd_phidp_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_spec_cmd_phidp_sdev_interest_map->value - (char *) _spec_cmd_phidp_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_spec_cmd_phidp_sdev_interest_map->interest - (char *) _spec_cmd_phidp_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 28;
      tt->struct_vals[1].d = 0.0001;
      tt->struct_vals[2].d = 32;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'spec_cmd_phidp_sdev_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_phidp_sdev_interest_weight");
    tt->descr = tdrpStrDup("Weight for standard deviation of phidp.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spec_cmd_phidp_sdev_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'spec_cmd_threshold_for_detection'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_threshold_for_detection");
    tt->descr = tdrpStrDup("Threshold CMD value for detecting clutter.");
    tt->help = tdrpStrDup("This is aimed mainly at wind turbine clutter. If the CMD value exceeds this threshold, clutter is assumed detected at the gate.");
    tt->val_offset = (char *) &spec_cmd_threshold_for_detection - &_start_;
    tt->single_val.d = 0.9;
    tt++;
    
    // Parameter 'spec_cmd_threshold_for_moments'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_threshold_for_moments");
    tt->descr = tdrpStrDup("Threshold CMD value for computing moments.");
    tt->help = tdrpStrDup("Spectral points with CMD in excess of this threshold are set to 0, so that they are not used in the moments calculations.");
    tt->val_offset = (char *) &spec_cmd_threshold_for_moments - &_start_;
    tt->single_val.d = 0.7;
    tt++;
    
    // Parameter 'spec_cmd_fraction_threshold_for_wind_turbine'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spec_cmd_fraction_threshold_for_wind_turbine");
    tt->descr = tdrpStrDup("Threshold of CMD spectral fraction, for wind turbine detection.");
    tt->help = tdrpStrDup("If the fraction of the CMD spectrum in excess of 'spec_cmd_threshold_for_detection' exceeds this, we flag the gate as having a wind turbine gate.");
    tt->val_offset = (char *) &spec_cmd_fraction_threshold_for_wind_turbine - &_start_;
    tt->single_val.d = 0.7;
    tt++;
    
    // Parameter 'Comment 27'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 27");
    tt->comment_hdr = tdrpStrDup("OUTPUT TO MOMENTS FMQ");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_url");
    tt->descr = tdrpStrDup("Output URL for moments data via FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmqp:://localhost::fmq/lirp");
    tt++;
    
    // Parameter 'output_moments_in_radx_format'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_moments_in_radx_format");
    tt->descr = tdrpStrDup("Write output moments in Radx format.");
    tt->help = tdrpStrDup("If TRUE moments are written as Radx messages. If FALSE moments are written as DsRadar messages. ");
    tt->val_offset = (char *) &output_moments_in_radx_format - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_fmq_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_size");
    tt->descr = tdrpStrDup("Size of output FMQ, in bytes.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &output_fmq_size - &_start_;
    tt->single_val.i = 50000000;
    tt++;
    
    // Parameter 'output_fmq_nslots'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_nslots");
    tt->descr = tdrpStrDup("Number of slots in output FMQ.");
    tt->help = tdrpStrDup("The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.");
    tt->val_offset = (char *) &output_fmq_nslots - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'output_fmq_compress'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_compress");
    tt->descr = tdrpStrDup("FMQ compression option.");
    tt->help = tdrpStrDup("If TRUE FMQ messages are compressed.");
    tt->val_offset = (char *) &output_fmq_compress - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'nbeams_for_params_and_calib'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("nbeams_for_params_and_calib");
    tt->descr = tdrpStrDup("Number of beams between sending params and calibration.");
    tt->help = tdrpStrDup("The params and calibration data is sent when the radar operation changes, as well as once every tilt. However, if none of these triggers a change, the params will be sent regardless when this number of beams have been written.");
    tt->val_offset = (char *) &nbeams_for_params_and_calib - &_start_;
    tt->single_val.i = 360;
    tt++;
    
    // Parameter 'write_blocking'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_blocking");
    tt->descr = tdrpStrDup("Option to set up the FMQ as blocking.");
    tt->help = tdrpStrDup("If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ becomes full, Test2Dsr will then block until there is space for more data.");
    tt->val_offset = (char *) &write_blocking - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'beam_wait_msecs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("beam_wait_msecs");
    tt->descr = tdrpStrDup("Wait per beam (milli-secs)");
    tt->help = tdrpStrDup("FILELIST, ARCHIVE and SIMULATE modes only.");
    tt->val_offset = (char *) &beam_wait_msecs - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Indicate which fields should be written to the Dsr FMQ.");
    tt->help = tdrpStrDup("Choose the ID from the list. The name and units can be set however the user prefers. The scale and bias are applied to the floating point value to compute the 16-bit output value for the FMQ. The write_filtered and write_unfiltered flags indicate which fields should be written.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 81;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("field_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->id - (char *) _output_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("field_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 193;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("DBZ");
        tt->struct_def.fields[0].enum_def.fields[0].val = DBZ;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("DBZ_NO_ATMOS_ATTEN");
        tt->struct_def.fields[0].enum_def.fields[1].val = DBZ_NO_ATMOS_ATTEN;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("DBZHC");
        tt->struct_def.fields[0].enum_def.fields[2].val = DBZHC;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("DBZVC");
        tt->struct_def.fields[0].enum_def.fields[3].val = DBZVC;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("DBZHX");
        tt->struct_def.fields[0].enum_def.fields[4].val = DBZHX;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("DBZVX");
        tt->struct_def.fields[0].enum_def.fields[5].val = DBZVX;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("VEL");
        tt->struct_def.fields[0].enum_def.fields[6].val = VEL;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("VEL_ALT");
        tt->struct_def.fields[0].enum_def.fields[7].val = VEL_ALT;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("VEL_HV");
        tt->struct_def.fields[0].enum_def.fields[8].val = VEL_HV;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("VEL_H_ONLY");
        tt->struct_def.fields[0].enum_def.fields[9].val = VEL_H_ONLY;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("VEL_V_ONLY");
        tt->struct_def.fields[0].enum_def.fields[10].val = VEL_V_ONLY;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("VEL_ALT_FOLD_INTERVAL");
        tt->struct_def.fields[0].enum_def.fields[11].val = VEL_ALT_FOLD_INTERVAL;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("VEL_ALT_FOLD_CONFIDENCE");
        tt->struct_def.fields[0].enum_def.fields[12].val = VEL_ALT_FOLD_CONFIDENCE;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("VEL_CORR_VERT");
        tt->struct_def.fields[0].enum_def.fields[13].val = VEL_CORR_VERT;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("VEL_CORR_MOTION");
        tt->struct_def.fields[0].enum_def.fields[14].val = VEL_CORR_MOTION;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("VEL_PRT_SHORT");
        tt->struct_def.fields[0].enum_def.fields[15].val = VEL_PRT_SHORT;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("VEL_PRT_LONG");
        tt->struct_def.fields[0].enum_def.fields[16].val = VEL_PRT_LONG;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("VEL_DIFF");
        tt->struct_def.fields[0].enum_def.fields[17].val = VEL_DIFF;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("VEL_UNFOLD_INTERVAL");
        tt->struct_def.fields[0].enum_def.fields[18].val = VEL_UNFOLD_INTERVAL;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("WIDTH");
        tt->struct_def.fields[0].enum_def.fields[19].val = WIDTH;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("WIDTH_R0R1");
        tt->struct_def.fields[0].enum_def.fields[20].val = WIDTH_R0R1;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("WIDTH_R1R2");
        tt->struct_def.fields[0].enum_def.fields[21].val = WIDTH_R1R2;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("WIDTH_R1R3");
        tt->struct_def.fields[0].enum_def.fields[22].val = WIDTH_R1R3;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("WIDTH_PPLS");
        tt->struct_def.fields[0].enum_def.fields[23].val = WIDTH_PPLS;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("WIDTH_H_ONLY");
        tt->struct_def.fields[0].enum_def.fields[24].val = WIDTH_H_ONLY;
        tt->struct_def.fields[0].enum_def.fields[25].name = tdrpStrDup("WIDTH_V_ONLY");
        tt->struct_def.fields[0].enum_def.fields[25].val = WIDTH_V_ONLY;
        tt->struct_def.fields[0].enum_def.fields[26].name = tdrpStrDup("WIDTH_PRT_LONG");
        tt->struct_def.fields[0].enum_def.fields[26].val = WIDTH_PRT_LONG;
        tt->struct_def.fields[0].enum_def.fields[27].name = tdrpStrDup("WIDTH_PRT_SHORT");
        tt->struct_def.fields[0].enum_def.fields[27].val = WIDTH_PRT_SHORT;
        tt->struct_def.fields[0].enum_def.fields[28].name = tdrpStrDup("WIDTH_CORR_MOTION");
        tt->struct_def.fields[0].enum_def.fields[28].val = WIDTH_CORR_MOTION;
        tt->struct_def.fields[0].enum_def.fields[29].name = tdrpStrDup("NCP");
        tt->struct_def.fields[0].enum_def.fields[29].val = NCP;
        tt->struct_def.fields[0].enum_def.fields[30].name = tdrpStrDup("NCP_H_ONLY");
        tt->struct_def.fields[0].enum_def.fields[30].val = NCP_H_ONLY;
        tt->struct_def.fields[0].enum_def.fields[31].name = tdrpStrDup("NCP_V_ONLY");
        tt->struct_def.fields[0].enum_def.fields[31].val = NCP_V_ONLY;
        tt->struct_def.fields[0].enum_def.fields[32].name = tdrpStrDup("NCP_H_MINUS_V");
        tt->struct_def.fields[0].enum_def.fields[32].val = NCP_H_MINUS_V;
        tt->struct_def.fields[0].enum_def.fields[33].name = tdrpStrDup("NCP_TRIP1");
        tt->struct_def.fields[0].enum_def.fields[33].val = NCP_TRIP1;
        tt->struct_def.fields[0].enum_def.fields[34].name = tdrpStrDup("NCP_TRIP2");
        tt->struct_def.fields[0].enum_def.fields[34].val = NCP_TRIP2;
        tt->struct_def.fields[0].enum_def.fields[35].name = tdrpStrDup("NCP_TRIP3");
        tt->struct_def.fields[0].enum_def.fields[35].val = NCP_TRIP3;
        tt->struct_def.fields[0].enum_def.fields[36].name = tdrpStrDup("NCP_TRIP4");
        tt->struct_def.fields[0].enum_def.fields[36].val = NCP_TRIP4;
        tt->struct_def.fields[0].enum_def.fields[37].name = tdrpStrDup("NCP_PRT_LONG");
        tt->struct_def.fields[0].enum_def.fields[37].val = NCP_PRT_LONG;
        tt->struct_def.fields[0].enum_def.fields[38].name = tdrpStrDup("NCP_PRT_SHORT");
        tt->struct_def.fields[0].enum_def.fields[38].val = NCP_PRT_SHORT;
        tt->struct_def.fields[0].enum_def.fields[39].name = tdrpStrDup("NCP_TRIP_FLAG");
        tt->struct_def.fields[0].enum_def.fields[39].val = NCP_TRIP_FLAG;
        tt->struct_def.fields[0].enum_def.fields[40].name = tdrpStrDup("NOISE_BIAS_DB_HC");
        tt->struct_def.fields[0].enum_def.fields[40].val = NOISE_BIAS_DB_HC;
        tt->struct_def.fields[0].enum_def.fields[41].name = tdrpStrDup("NOISE_BIAS_DB_HX");
        tt->struct_def.fields[0].enum_def.fields[41].val = NOISE_BIAS_DB_HX;
        tt->struct_def.fields[0].enum_def.fields[42].name = tdrpStrDup("NOISE_BIAS_DB_VC");
        tt->struct_def.fields[0].enum_def.fields[42].val = NOISE_BIAS_DB_VC;
        tt->struct_def.fields[0].enum_def.fields[43].name = tdrpStrDup("NOISE_BIAS_DB_VX");
        tt->struct_def.fields[0].enum_def.fields[43].val = NOISE_BIAS_DB_VX;
        tt->struct_def.fields[0].enum_def.fields[44].name = tdrpStrDup("NOISE_FLAG");
        tt->struct_def.fields[0].enum_def.fields[44].val = NOISE_FLAG;
        tt->struct_def.fields[0].enum_def.fields[45].name = tdrpStrDup("SIGNAL_FLAG");
        tt->struct_def.fields[0].enum_def.fields[45].val = SIGNAL_FLAG;
        tt->struct_def.fields[0].enum_def.fields[46].name = tdrpStrDup("NOISE_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[46].val = NOISE_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[47].name = tdrpStrDup("SIGNAL_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[47].val = SIGNAL_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[48].name = tdrpStrDup("NOISE_ACCUM_PHASE_CHANGE");
        tt->struct_def.fields[0].enum_def.fields[48].val = NOISE_ACCUM_PHASE_CHANGE;
        tt->struct_def.fields[0].enum_def.fields[49].name = tdrpStrDup("NOISE_PHASE_CHANGE_ERROR");
        tt->struct_def.fields[0].enum_def.fields[49].val = NOISE_PHASE_CHANGE_ERROR;
        tt->struct_def.fields[0].enum_def.fields[50].name = tdrpStrDup("NOISE_DBM_SDEV");
        tt->struct_def.fields[0].enum_def.fields[50].val = NOISE_DBM_SDEV;
        tt->struct_def.fields[0].enum_def.fields[51].name = tdrpStrDup("NOISE_NCP_MEAN");
        tt->struct_def.fields[0].enum_def.fields[51].val = NOISE_NCP_MEAN;
        tt->struct_def.fields[0].enum_def.fields[52].name = tdrpStrDup("SNR");
        tt->struct_def.fields[0].enum_def.fields[52].val = SNR;
        tt->struct_def.fields[0].enum_def.fields[53].name = tdrpStrDup("SNRHC");
        tt->struct_def.fields[0].enum_def.fields[53].val = SNRHC;
        tt->struct_def.fields[0].enum_def.fields[54].name = tdrpStrDup("SNRHX");
        tt->struct_def.fields[0].enum_def.fields[54].val = SNRHX;
        tt->struct_def.fields[0].enum_def.fields[55].name = tdrpStrDup("SNRVC");
        tt->struct_def.fields[0].enum_def.fields[55].val = SNRVC;
        tt->struct_def.fields[0].enum_def.fields[56].name = tdrpStrDup("SNRVX");
        tt->struct_def.fields[0].enum_def.fields[56].val = SNRVX;
        tt->struct_def.fields[0].enum_def.fields[57].name = tdrpStrDup("DBM");
        tt->struct_def.fields[0].enum_def.fields[57].val = DBM;
        tt->struct_def.fields[0].enum_def.fields[58].name = tdrpStrDup("DBMHC");
        tt->struct_def.fields[0].enum_def.fields[58].val = DBMHC;
        tt->struct_def.fields[0].enum_def.fields[59].name = tdrpStrDup("DBMHX");
        tt->struct_def.fields[0].enum_def.fields[59].val = DBMHX;
        tt->struct_def.fields[0].enum_def.fields[60].name = tdrpStrDup("DBMVC");
        tt->struct_def.fields[0].enum_def.fields[60].val = DBMVC;
        tt->struct_def.fields[0].enum_def.fields[61].name = tdrpStrDup("DBMVX");
        tt->struct_def.fields[0].enum_def.fields[61].val = DBMVX;
        tt->struct_def.fields[0].enum_def.fields[62].name = tdrpStrDup("DBMHC_NS");
        tt->struct_def.fields[0].enum_def.fields[62].val = DBMHC_NS;
        tt->struct_def.fields[0].enum_def.fields[63].name = tdrpStrDup("DBMHX_NS");
        tt->struct_def.fields[0].enum_def.fields[63].val = DBMHX_NS;
        tt->struct_def.fields[0].enum_def.fields[64].name = tdrpStrDup("DBMVC_NS");
        tt->struct_def.fields[0].enum_def.fields[64].val = DBMVC_NS;
        tt->struct_def.fields[0].enum_def.fields[65].name = tdrpStrDup("DBMVX_NS");
        tt->struct_def.fields[0].enum_def.fields[65].val = DBMVX_NS;
        tt->struct_def.fields[0].enum_def.fields[66].name = tdrpStrDup("ZDRM");
        tt->struct_def.fields[0].enum_def.fields[66].val = ZDRM;
        tt->struct_def.fields[0].enum_def.fields[67].name = tdrpStrDup("ZDR");
        tt->struct_def.fields[0].enum_def.fields[67].val = ZDR;
        tt->struct_def.fields[0].enum_def.fields[68].name = tdrpStrDup("ZDR_BIAS");
        tt->struct_def.fields[0].enum_def.fields[68].val = ZDR_BIAS;
        tt->struct_def.fields[0].enum_def.fields[69].name = tdrpStrDup("LDR");
        tt->struct_def.fields[0].enum_def.fields[69].val = LDR;
        tt->struct_def.fields[0].enum_def.fields[70].name = tdrpStrDup("LDRHM");
        tt->struct_def.fields[0].enum_def.fields[70].val = LDRHM;
        tt->struct_def.fields[0].enum_def.fields[71].name = tdrpStrDup("LDRH");
        tt->struct_def.fields[0].enum_def.fields[71].val = LDRH;
        tt->struct_def.fields[0].enum_def.fields[72].name = tdrpStrDup("LDRVM");
        tt->struct_def.fields[0].enum_def.fields[72].val = LDRVM;
        tt->struct_def.fields[0].enum_def.fields[73].name = tdrpStrDup("LDRV");
        tt->struct_def.fields[0].enum_def.fields[73].val = LDRV;
        tt->struct_def.fields[0].enum_def.fields[74].name = tdrpStrDup("LDR_DIFF");
        tt->struct_def.fields[0].enum_def.fields[74].val = LDR_DIFF;
        tt->struct_def.fields[0].enum_def.fields[75].name = tdrpStrDup("LDR_MEAN");
        tt->struct_def.fields[0].enum_def.fields[75].val = LDR_MEAN;
        tt->struct_def.fields[0].enum_def.fields[76].name = tdrpStrDup("RHOHV");
        tt->struct_def.fields[0].enum_def.fields[76].val = RHOHV;
        tt->struct_def.fields[0].enum_def.fields[77].name = tdrpStrDup("RHOHV_NNC");
        tt->struct_def.fields[0].enum_def.fields[77].val = RHOHV_NNC;
        tt->struct_def.fields[0].enum_def.fields[78].name = tdrpStrDup("PHIDP0");
        tt->struct_def.fields[0].enum_def.fields[78].val = PHIDP0;
        tt->struct_def.fields[0].enum_def.fields[79].name = tdrpStrDup("PHIDP");
        tt->struct_def.fields[0].enum_def.fields[79].val = PHIDP;
        tt->struct_def.fields[0].enum_def.fields[80].name = tdrpStrDup("PHIDP_COND");
        tt->struct_def.fields[0].enum_def.fields[80].val = PHIDP_COND;
        tt->struct_def.fields[0].enum_def.fields[81].name = tdrpStrDup("PHIDP_FILT");
        tt->struct_def.fields[0].enum_def.fields[81].val = PHIDP_FILT;
        tt->struct_def.fields[0].enum_def.fields[82].name = tdrpStrDup("PHIDP_SDEV_4KDP");
        tt->struct_def.fields[0].enum_def.fields[82].val = PHIDP_SDEV_4KDP;
        tt->struct_def.fields[0].enum_def.fields[83].name = tdrpStrDup("PHIDP_JITTER_4KDP");
        tt->struct_def.fields[0].enum_def.fields[83].val = PHIDP_JITTER_4KDP;
        tt->struct_def.fields[0].enum_def.fields[84].name = tdrpStrDup("ZDR_SDEV_4KDP");
        tt->struct_def.fields[0].enum_def.fields[84].val = ZDR_SDEV_4KDP;
        tt->struct_def.fields[0].enum_def.fields[85].name = tdrpStrDup("KDP");
        tt->struct_def.fields[0].enum_def.fields[85].val = KDP;
        tt->struct_def.fields[0].enum_def.fields[86].name = tdrpStrDup("PSOB");
        tt->struct_def.fields[0].enum_def.fields[86].val = PSOB;
        tt->struct_def.fields[0].enum_def.fields[87].name = tdrpStrDup("KDP_HB");
        tt->struct_def.fields[0].enum_def.fields[87].val = KDP_HB;
        tt->struct_def.fields[0].enum_def.fields[88].name = tdrpStrDup("RHO_HC_VX");
        tt->struct_def.fields[0].enum_def.fields[88].val = RHO_HC_VX;
        tt->struct_def.fields[0].enum_def.fields[89].name = tdrpStrDup("RHO_VC_HX");
        tt->struct_def.fields[0].enum_def.fields[89].val = RHO_VC_HX;
        tt->struct_def.fields[0].enum_def.fields[90].name = tdrpStrDup("RHO_VX_HX");
        tt->struct_def.fields[0].enum_def.fields[90].val = RHO_VX_HX;
        tt->struct_def.fields[0].enum_def.fields[91].name = tdrpStrDup("RHO_PHIDP");
        tt->struct_def.fields[0].enum_def.fields[91].val = RHO_PHIDP;
        tt->struct_def.fields[0].enum_def.fields[92].name = tdrpStrDup("CPR_MAG");
        tt->struct_def.fields[0].enum_def.fields[92].val = CPR_MAG;
        tt->struct_def.fields[0].enum_def.fields[93].name = tdrpStrDup("CPR_PHASE");
        tt->struct_def.fields[0].enum_def.fields[93].val = CPR_PHASE;
        tt->struct_def.fields[0].enum_def.fields[94].name = tdrpStrDup("CPR_LDR");
        tt->struct_def.fields[0].enum_def.fields[94].val = CPR_LDR;
        tt->struct_def.fields[0].enum_def.fields[95].name = tdrpStrDup("DBZ_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[95].val = DBZ_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[96].name = tdrpStrDup("ZDR_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[96].val = ZDR_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[97].name = tdrpStrDup("DBZ_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[97].val = DBZ_ATTEN_CORRECTED;
        tt->struct_def.fields[0].enum_def.fields[98].name = tdrpStrDup("ZDR_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[98].val = ZDR_ATTEN_CORRECTED;
        tt->struct_def.fields[0].enum_def.fields[99].name = tdrpStrDup("CPA");
        tt->struct_def.fields[0].enum_def.fields[99].val = CPA;
        tt->struct_def.fields[0].enum_def.fields[100].name = tdrpStrDup("TDBZ");
        tt->struct_def.fields[0].enum_def.fields[100].val = TDBZ;
        tt->struct_def.fields[0].enum_def.fields[101].name = tdrpStrDup("SPIN");
        tt->struct_def.fields[0].enum_def.fields[101].val = SPIN;
        tt->struct_def.fields[0].enum_def.fields[102].name = tdrpStrDup("MAX_TDBZ_SPIN");
        tt->struct_def.fields[0].enum_def.fields[102].val = MAX_TDBZ_SPIN;
        tt->struct_def.fields[0].enum_def.fields[103].name = tdrpStrDup("ZDR_SDEV");
        tt->struct_def.fields[0].enum_def.fields[103].val = ZDR_SDEV;
        tt->struct_def.fields[0].enum_def.fields[104].name = tdrpStrDup("PHIDP_SDEV");
        tt->struct_def.fields[0].enum_def.fields[104].val = PHIDP_SDEV;
        tt->struct_def.fields[0].enum_def.fields[105].name = tdrpStrDup("DBZ_DIFF_SQ");
        tt->struct_def.fields[0].enum_def.fields[105].val = DBZ_DIFF_SQ;
        tt->struct_def.fields[0].enum_def.fields[106].name = tdrpStrDup("DBZ_SPIN_CHANGE");
        tt->struct_def.fields[0].enum_def.fields[106].val = DBZ_SPIN_CHANGE;
        tt->struct_def.fields[0].enum_def.fields[107].name = tdrpStrDup("CMD");
        tt->struct_def.fields[0].enum_def.fields[107].val = CMD;
        tt->struct_def.fields[0].enum_def.fields[108].name = tdrpStrDup("CMD_FLAG");
        tt->struct_def.fields[0].enum_def.fields[108].val = CMD_FLAG;
        tt->struct_def.fields[0].enum_def.fields[109].name = tdrpStrDup("TDBZ_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[109].val = TDBZ_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[110].name = tdrpStrDup("SPIN_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[110].val = SPIN_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[111].name = tdrpStrDup("CPA_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[111].val = CPA_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[112].name = tdrpStrDup("ZDR_SDEV_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[112].val = ZDR_SDEV_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[113].name = tdrpStrDup("PHIDP_SDEV_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[113].val = PHIDP_SDEV_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[114].name = tdrpStrDup("CLUT");
        tt->struct_def.fields[0].enum_def.fields[114].val = CLUT;
        tt->struct_def.fields[0].enum_def.fields[115].name = tdrpStrDup("CLUT_2_WX_RATIO");
        tt->struct_def.fields[0].enum_def.fields[115].val = CLUT_2_WX_RATIO;
        tt->struct_def.fields[0].enum_def.fields[116].name = tdrpStrDup("SPECTRAL_NOISE");
        tt->struct_def.fields[0].enum_def.fields[116].val = SPECTRAL_NOISE;
        tt->struct_def.fields[0].enum_def.fields[117].name = tdrpStrDup("SPECTRAL_SNR");
        tt->struct_def.fields[0].enum_def.fields[117].val = SPECTRAL_SNR;
        tt->struct_def.fields[0].enum_def.fields[118].name = tdrpStrDup("REGR_FILT_POLY_ORDER");
        tt->struct_def.fields[0].enum_def.fields[118].val = REGR_FILT_POLY_ORDER;
        tt->struct_def.fields[0].enum_def.fields[119].name = tdrpStrDup("REGR_FILT_CNR_DB");
        tt->struct_def.fields[0].enum_def.fields[119].val = REGR_FILT_CNR_DB;
        tt->struct_def.fields[0].enum_def.fields[120].name = tdrpStrDup("AIQ_HC");
        tt->struct_def.fields[0].enum_def.fields[120].val = AIQ_HC;
        tt->struct_def.fields[0].enum_def.fields[121].name = tdrpStrDup("NIQ_HC");
        tt->struct_def.fields[0].enum_def.fields[121].val = NIQ_HC;
        tt->struct_def.fields[0].enum_def.fields[122].name = tdrpStrDup("AIQ_VC");
        tt->struct_def.fields[0].enum_def.fields[122].val = AIQ_VC;
        tt->struct_def.fields[0].enum_def.fields[123].name = tdrpStrDup("NIQ_VC");
        tt->struct_def.fields[0].enum_def.fields[123].val = NIQ_VC;
        tt->struct_def.fields[0].enum_def.fields[124].name = tdrpStrDup("SZ_TRIP_FLAG");
        tt->struct_def.fields[0].enum_def.fields[124].val = SZ_TRIP_FLAG;
        tt->struct_def.fields[0].enum_def.fields[125].name = tdrpStrDup("SZ_LEAKAGE");
        tt->struct_def.fields[0].enum_def.fields[125].val = SZ_LEAKAGE;
        tt->struct_def.fields[0].enum_def.fields[126].name = tdrpStrDup("CENSORING_FLAG");
        tt->struct_def.fields[0].enum_def.fields[126].val = CENSORING_FLAG;
        tt->struct_def.fields[0].enum_def.fields[127].name = tdrpStrDup("LAG0_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[127].val = LAG0_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[128].name = tdrpStrDup("LAG0_HX_DB");
        tt->struct_def.fields[0].enum_def.fields[128].val = LAG0_HX_DB;
        tt->struct_def.fields[0].enum_def.fields[129].name = tdrpStrDup("LAG0_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[129].val = LAG0_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[130].name = tdrpStrDup("LAG0_VX_DB");
        tt->struct_def.fields[0].enum_def.fields[130].val = LAG0_VX_DB;
        tt->struct_def.fields[0].enum_def.fields[131].name = tdrpStrDup("LAG0_HC_SHORT_DB");
        tt->struct_def.fields[0].enum_def.fields[131].val = LAG0_HC_SHORT_DB;
        tt->struct_def.fields[0].enum_def.fields[132].name = tdrpStrDup("LAG0_VC_SHORT_DB");
        tt->struct_def.fields[0].enum_def.fields[132].val = LAG0_VC_SHORT_DB;
        tt->struct_def.fields[0].enum_def.fields[133].name = tdrpStrDup("LAG0_HC_LONG_DB");
        tt->struct_def.fields[0].enum_def.fields[133].val = LAG0_HC_LONG_DB;
        tt->struct_def.fields[0].enum_def.fields[134].name = tdrpStrDup("LAG0_VC_LONG_DB");
        tt->struct_def.fields[0].enum_def.fields[134].val = LAG0_VC_LONG_DB;
        tt->struct_def.fields[0].enum_def.fields[135].name = tdrpStrDup("LAG0_VCHX_DB");
        tt->struct_def.fields[0].enum_def.fields[135].val = LAG0_VCHX_DB;
        tt->struct_def.fields[0].enum_def.fields[136].name = tdrpStrDup("LAG0_VCHX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[136].val = LAG0_VCHX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[137].name = tdrpStrDup("LAG0_HCVX_DB");
        tt->struct_def.fields[0].enum_def.fields[137].val = LAG0_HCVX_DB;
        tt->struct_def.fields[0].enum_def.fields[138].name = tdrpStrDup("LAG0_HCVX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[138].val = LAG0_HCVX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[139].name = tdrpStrDup("LAG1_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[139].val = LAG1_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[140].name = tdrpStrDup("LAG1_HC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[140].val = LAG1_HC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[141].name = tdrpStrDup("LAG1_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[141].val = LAG1_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[142].name = tdrpStrDup("LAG1_VC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[142].val = LAG1_VC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[143].name = tdrpStrDup("LAG1_HCVC_DB");
        tt->struct_def.fields[0].enum_def.fields[143].val = LAG1_HCVC_DB;
        tt->struct_def.fields[0].enum_def.fields[144].name = tdrpStrDup("LAG1_HCVC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[144].val = LAG1_HCVC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[145].name = tdrpStrDup("LAG1_VCHC_DB");
        tt->struct_def.fields[0].enum_def.fields[145].val = LAG1_VCHC_DB;
        tt->struct_def.fields[0].enum_def.fields[146].name = tdrpStrDup("LAG1_VCHC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[146].val = LAG1_VCHC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[147].name = tdrpStrDup("LAG1_VXHX_DB");
        tt->struct_def.fields[0].enum_def.fields[147].val = LAG1_VXHX_DB;
        tt->struct_def.fields[0].enum_def.fields[148].name = tdrpStrDup("LAG1_VXHX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[148].val = LAG1_VXHX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[149].name = tdrpStrDup("LAG1_HC_LONG_DB");
        tt->struct_def.fields[0].enum_def.fields[149].val = LAG1_HC_LONG_DB;
        tt->struct_def.fields[0].enum_def.fields[150].name = tdrpStrDup("LAG1_HC_LONG_PHASE");
        tt->struct_def.fields[0].enum_def.fields[150].val = LAG1_HC_LONG_PHASE;
        tt->struct_def.fields[0].enum_def.fields[151].name = tdrpStrDup("LAG1_VC_LONG_DB");
        tt->struct_def.fields[0].enum_def.fields[151].val = LAG1_VC_LONG_DB;
        tt->struct_def.fields[0].enum_def.fields[152].name = tdrpStrDup("LAG1_VC_LONG_PHASE");
        tt->struct_def.fields[0].enum_def.fields[152].val = LAG1_VC_LONG_PHASE;
        tt->struct_def.fields[0].enum_def.fields[153].name = tdrpStrDup("LAG1_HC_SHORT_DB");
        tt->struct_def.fields[0].enum_def.fields[153].val = LAG1_HC_SHORT_DB;
        tt->struct_def.fields[0].enum_def.fields[154].name = tdrpStrDup("LAG1_HC_SHORT_PHASE");
        tt->struct_def.fields[0].enum_def.fields[154].val = LAG1_HC_SHORT_PHASE;
        tt->struct_def.fields[0].enum_def.fields[155].name = tdrpStrDup("LAG1_VC_SHORT_DB");
        tt->struct_def.fields[0].enum_def.fields[155].val = LAG1_VC_SHORT_DB;
        tt->struct_def.fields[0].enum_def.fields[156].name = tdrpStrDup("LAG1_VC_SHORT_PHASE");
        tt->struct_def.fields[0].enum_def.fields[156].val = LAG1_VC_SHORT_PHASE;
        tt->struct_def.fields[0].enum_def.fields[157].name = tdrpStrDup("LAG1_HC_LONG_TO_SHORT_DB");
        tt->struct_def.fields[0].enum_def.fields[157].val = LAG1_HC_LONG_TO_SHORT_DB;
        tt->struct_def.fields[0].enum_def.fields[158].name = tdrpStrDup("LAG1_HC_LONG_TO_SHORT_PHASE");
        tt->struct_def.fields[0].enum_def.fields[158].val = LAG1_HC_LONG_TO_SHORT_PHASE;
        tt->struct_def.fields[0].enum_def.fields[159].name = tdrpStrDup("LAG1_VC_LONG_TO_SHORT_DB");
        tt->struct_def.fields[0].enum_def.fields[159].val = LAG1_VC_LONG_TO_SHORT_DB;
        tt->struct_def.fields[0].enum_def.fields[160].name = tdrpStrDup("LAG1_VC_LONG_TO_SHORT_PHASE");
        tt->struct_def.fields[0].enum_def.fields[160].val = LAG1_VC_LONG_TO_SHORT_PHASE;
        tt->struct_def.fields[0].enum_def.fields[161].name = tdrpStrDup("LAG1_HC_SHORT_TO_LONG_DB");
        tt->struct_def.fields[0].enum_def.fields[161].val = LAG1_HC_SHORT_TO_LONG_DB;
        tt->struct_def.fields[0].enum_def.fields[162].name = tdrpStrDup("LAG1_HC_SHORT_TO_LONG_PHASE");
        tt->struct_def.fields[0].enum_def.fields[162].val = LAG1_HC_SHORT_TO_LONG_PHASE;
        tt->struct_def.fields[0].enum_def.fields[163].name = tdrpStrDup("LAG1_VC_SHORT_TO_LONG_DB");
        tt->struct_def.fields[0].enum_def.fields[163].val = LAG1_VC_SHORT_TO_LONG_DB;
        tt->struct_def.fields[0].enum_def.fields[164].name = tdrpStrDup("LAG1_VC_SHORT_TO_LONG_PHASE");
        tt->struct_def.fields[0].enum_def.fields[164].val = LAG1_VC_SHORT_TO_LONG_PHASE;
        tt->struct_def.fields[0].enum_def.fields[165].name = tdrpStrDup("LAG2_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[165].val = LAG2_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[166].name = tdrpStrDup("LAG2_HC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[166].val = LAG2_HC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[167].name = tdrpStrDup("LAG2_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[167].val = LAG2_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[168].name = tdrpStrDup("LAG2_VC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[168].val = LAG2_VC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[169].name = tdrpStrDup("LAG3_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[169].val = LAG3_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[170].name = tdrpStrDup("LAG3_HC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[170].val = LAG3_HC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[171].name = tdrpStrDup("LAG3_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[171].val = LAG3_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[172].name = tdrpStrDup("LAG3_VC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[172].val = LAG3_VC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[173].name = tdrpStrDup("RVVHH0_DB");
        tt->struct_def.fields[0].enum_def.fields[173].val = RVVHH0_DB;
        tt->struct_def.fields[0].enum_def.fields[174].name = tdrpStrDup("RVVHH0_PHASE");
        tt->struct_def.fields[0].enum_def.fields[174].val = RVVHH0_PHASE;
        tt->struct_def.fields[0].enum_def.fields[175].name = tdrpStrDup("RVVHH0_LONG_DB");
        tt->struct_def.fields[0].enum_def.fields[175].val = RVVHH0_LONG_DB;
        tt->struct_def.fields[0].enum_def.fields[176].name = tdrpStrDup("RVVHH0_LONG_PHASE");
        tt->struct_def.fields[0].enum_def.fields[176].val = RVVHH0_LONG_PHASE;
        tt->struct_def.fields[0].enum_def.fields[177].name = tdrpStrDup("RVVHH0_SHORT_DB");
        tt->struct_def.fields[0].enum_def.fields[177].val = RVVHH0_SHORT_DB;
        tt->struct_def.fields[0].enum_def.fields[178].name = tdrpStrDup("RVVHH0_SHORT_PHASE");
        tt->struct_def.fields[0].enum_def.fields[178].val = RVVHH0_SHORT_PHASE;
        tt->struct_def.fields[0].enum_def.fields[179].name = tdrpStrDup("SDEV_VV");
        tt->struct_def.fields[0].enum_def.fields[179].val = SDEV_VV;
        tt->struct_def.fields[0].enum_def.fields[180].name = tdrpStrDup("PRT");
        tt->struct_def.fields[0].enum_def.fields[180].val = PRT;
        tt->struct_def.fields[0].enum_def.fields[181].name = tdrpStrDup("NUM_PULSES");
        tt->struct_def.fields[0].enum_def.fields[181].val = NUM_PULSES;
        tt->struct_def.fields[0].enum_def.fields[182].name = tdrpStrDup("TEST");
        tt->struct_def.fields[0].enum_def.fields[182].val = TEST;
        tt->struct_def.fields[0].enum_def.fields[183].name = tdrpStrDup("TEST0");
        tt->struct_def.fields[0].enum_def.fields[183].val = TEST0;
        tt->struct_def.fields[0].enum_def.fields[184].name = tdrpStrDup("TEST1");
        tt->struct_def.fields[0].enum_def.fields[184].val = TEST1;
        tt->struct_def.fields[0].enum_def.fields[185].name = tdrpStrDup("TEST2");
        tt->struct_def.fields[0].enum_def.fields[185].val = TEST2;
        tt->struct_def.fields[0].enum_def.fields[186].name = tdrpStrDup("TEST3");
        tt->struct_def.fields[0].enum_def.fields[186].val = TEST3;
        tt->struct_def.fields[0].enum_def.fields[187].name = tdrpStrDup("TEST4");
        tt->struct_def.fields[0].enum_def.fields[187].val = TEST4;
        tt->struct_def.fields[0].enum_def.fields[188].name = tdrpStrDup("TEST5");
        tt->struct_def.fields[0].enum_def.fields[188].val = TEST5;
        tt->struct_def.fields[0].enum_def.fields[189].name = tdrpStrDup("TEST6");
        tt->struct_def.fields[0].enum_def.fields[189].val = TEST6;
        tt->struct_def.fields[0].enum_def.fields[190].name = tdrpStrDup("TEST7");
        tt->struct_def.fields[0].enum_def.fields[190].val = TEST7;
        tt->struct_def.fields[0].enum_def.fields[191].name = tdrpStrDup("TEST8");
        tt->struct_def.fields[0].enum_def.fields[191].val = TEST8;
        tt->struct_def.fields[0].enum_def.fields[192].name = tdrpStrDup("TEST9");
        tt->struct_def.fields[0].enum_def.fields[192].val = TEST9;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->units - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("scale");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->scale - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("bias");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->bias - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("write_unfiltered");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->write_unfiltered - (char *) _output_fields;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("write_filtered");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_fields->write_filtered - (char *) _output_fields;
    tt->n_struct_vals = 567;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = NCP;
      tt->struct_vals[1].s = tdrpStrDup("NCP");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].d = 0.0001;
      tt->struct_vals[4].d = -0.01;
      tt->struct_vals[5].b = pTRUE;
      tt->struct_vals[6].b = pFALSE;
      tt->struct_vals[7].e = SNR;
      tt->struct_vals[8].s = tdrpStrDup("SNR");
      tt->struct_vals[9].s = tdrpStrDup("dB");
      tt->struct_vals[10].d = 0.01;
      tt->struct_vals[11].d = -320;
      tt->struct_vals[12].b = pTRUE;
      tt->struct_vals[13].b = pFALSE;
      tt->struct_vals[14].e = DBM;
      tt->struct_vals[15].s = tdrpStrDup("DBM");
      tt->struct_vals[16].s = tdrpStrDup("dBm");
      tt->struct_vals[17].d = 0.01;
      tt->struct_vals[18].d = -320;
      tt->struct_vals[19].b = pTRUE;
      tt->struct_vals[20].b = pFALSE;
      tt->struct_vals[21].e = DBZ;
      tt->struct_vals[22].s = tdrpStrDup("DBZ");
      tt->struct_vals[23].s = tdrpStrDup("dBZ");
      tt->struct_vals[24].d = 0.01;
      tt->struct_vals[25].d = -320;
      tt->struct_vals[26].b = pTRUE;
      tt->struct_vals[27].b = pTRUE;
      tt->struct_vals[28].e = VEL;
      tt->struct_vals[29].s = tdrpStrDup("VEL");
      tt->struct_vals[30].s = tdrpStrDup("m/s");
      tt->struct_vals[31].d = 0.01;
      tt->struct_vals[32].d = -320;
      tt->struct_vals[33].b = pTRUE;
      tt->struct_vals[34].b = pTRUE;
      tt->struct_vals[35].e = WIDTH;
      tt->struct_vals[36].s = tdrpStrDup("WIDTH");
      tt->struct_vals[37].s = tdrpStrDup("m/s");
      tt->struct_vals[38].d = 0.001;
      tt->struct_vals[39].d = -0.01;
      tt->struct_vals[40].b = pTRUE;
      tt->struct_vals[41].b = pTRUE;
      tt->struct_vals[42].e = WIDTH_R0R1;
      tt->struct_vals[43].s = tdrpStrDup("WIDTH_R0R1");
      tt->struct_vals[44].s = tdrpStrDup("m/s");
      tt->struct_vals[45].d = 0.001;
      tt->struct_vals[46].d = -0.01;
      tt->struct_vals[47].b = pTRUE;
      tt->struct_vals[48].b = pTRUE;
      tt->struct_vals[49].e = WIDTH_R1R2;
      tt->struct_vals[50].s = tdrpStrDup("WIDTH_R1R2");
      tt->struct_vals[51].s = tdrpStrDup("m/s");
      tt->struct_vals[52].d = 0.001;
      tt->struct_vals[53].d = -0.01;
      tt->struct_vals[54].b = pTRUE;
      tt->struct_vals[55].b = pTRUE;
      tt->struct_vals[56].e = WIDTH_R1R3;
      tt->struct_vals[57].s = tdrpStrDup("WIDTH_R1R3");
      tt->struct_vals[58].s = tdrpStrDup("m/s");
      tt->struct_vals[59].d = 0.001;
      tt->struct_vals[60].d = -0.01;
      tt->struct_vals[61].b = pTRUE;
      tt->struct_vals[62].b = pTRUE;
      tt->struct_vals[63].e = WIDTH_PPLS;
      tt->struct_vals[64].s = tdrpStrDup("WIDTH_PPLS");
      tt->struct_vals[65].s = tdrpStrDup("m/s");
      tt->struct_vals[66].d = 0.001;
      tt->struct_vals[67].d = -0.01;
      tt->struct_vals[68].b = pTRUE;
      tt->struct_vals[69].b = pTRUE;
      tt->struct_vals[70].e = CLUT;
      tt->struct_vals[71].s = tdrpStrDup("CLUT");
      tt->struct_vals[72].s = tdrpStrDup("dB");
      tt->struct_vals[73].d = 0.01;
      tt->struct_vals[74].d = -320;
      tt->struct_vals[75].b = pTRUE;
      tt->struct_vals[76].b = pFALSE;
      tt->struct_vals[77].e = CLUT_2_WX_RATIO;
      tt->struct_vals[78].s = tdrpStrDup("CLUT_2_WX_RATIO");
      tt->struct_vals[79].s = tdrpStrDup("dB");
      tt->struct_vals[80].d = 0.01;
      tt->struct_vals[81].d = -320;
      tt->struct_vals[82].b = pFALSE;
      tt->struct_vals[83].b = pFALSE;
      tt->struct_vals[84].e = SPECTRAL_NOISE;
      tt->struct_vals[85].s = tdrpStrDup("SPECTRAL_NOISE");
      tt->struct_vals[86].s = tdrpStrDup("dBm");
      tt->struct_vals[87].d = 0.01;
      tt->struct_vals[88].d = -320;
      tt->struct_vals[89].b = pFALSE;
      tt->struct_vals[90].b = pFALSE;
      tt->struct_vals[91].e = SPECTRAL_SNR;
      tt->struct_vals[92].s = tdrpStrDup("SPECTRAL_SNR");
      tt->struct_vals[93].s = tdrpStrDup("dB");
      tt->struct_vals[94].d = 0.01;
      tt->struct_vals[95].d = -320;
      tt->struct_vals[96].b = pFALSE;
      tt->struct_vals[97].b = pFALSE;
      tt->struct_vals[98].e = ZDR;
      tt->struct_vals[99].s = tdrpStrDup("ZDR");
      tt->struct_vals[100].s = tdrpStrDup("dB");
      tt->struct_vals[101].d = 0.001;
      tt->struct_vals[102].d = -32;
      tt->struct_vals[103].b = pFALSE;
      tt->struct_vals[104].b = pFALSE;
      tt->struct_vals[105].e = ZDRM;
      tt->struct_vals[106].s = tdrpStrDup("ZDRM");
      tt->struct_vals[107].s = tdrpStrDup("dB");
      tt->struct_vals[108].d = 0.001;
      tt->struct_vals[109].d = -32;
      tt->struct_vals[110].b = pFALSE;
      tt->struct_vals[111].b = pFALSE;
      tt->struct_vals[112].e = LDRHM;
      tt->struct_vals[113].s = tdrpStrDup("LDRHM");
      tt->struct_vals[114].s = tdrpStrDup("dB");
      tt->struct_vals[115].d = 0.005;
      tt->struct_vals[116].d = -160;
      tt->struct_vals[117].b = pFALSE;
      tt->struct_vals[118].b = pFALSE;
      tt->struct_vals[119].e = LDRH;
      tt->struct_vals[120].s = tdrpStrDup("LDRH");
      tt->struct_vals[121].s = tdrpStrDup("dB");
      tt->struct_vals[122].d = 0.005;
      tt->struct_vals[123].d = -160;
      tt->struct_vals[124].b = pFALSE;
      tt->struct_vals[125].b = pFALSE;
      tt->struct_vals[126].e = LDRVM;
      tt->struct_vals[127].s = tdrpStrDup("LDRVM");
      tt->struct_vals[128].s = tdrpStrDup("dB");
      tt->struct_vals[129].d = 0.005;
      tt->struct_vals[130].d = -160;
      tt->struct_vals[131].b = pFALSE;
      tt->struct_vals[132].b = pFALSE;
      tt->struct_vals[133].e = LDRV;
      tt->struct_vals[134].s = tdrpStrDup("LDRV");
      tt->struct_vals[135].s = tdrpStrDup("dB");
      tt->struct_vals[136].d = 0.005;
      tt->struct_vals[137].d = -160;
      tt->struct_vals[138].b = pFALSE;
      tt->struct_vals[139].b = pFALSE;
      tt->struct_vals[140].e = RHOHV;
      tt->struct_vals[141].s = tdrpStrDup("RHOHV");
      tt->struct_vals[142].s = tdrpStrDup("");
      tt->struct_vals[143].d = 0.0001;
      tt->struct_vals[144].d = -1;
      tt->struct_vals[145].b = pFALSE;
      tt->struct_vals[146].b = pFALSE;
      tt->struct_vals[147].e = PHIDP0;
      tt->struct_vals[148].s = tdrpStrDup("PHIDP0");
      tt->struct_vals[149].s = tdrpStrDup("deg");
      tt->struct_vals[150].d = 0.06;
      tt->struct_vals[151].d = -200;
      tt->struct_vals[152].b = pFALSE;
      tt->struct_vals[153].b = pFALSE;
      tt->struct_vals[154].e = PHIDP;
      tt->struct_vals[155].s = tdrpStrDup("PHIDP");
      tt->struct_vals[156].s = tdrpStrDup("deg");
      tt->struct_vals[157].d = 0.06;
      tt->struct_vals[158].d = -200;
      tt->struct_vals[159].b = pFALSE;
      tt->struct_vals[160].b = pFALSE;
      tt->struct_vals[161].e = KDP;
      tt->struct_vals[162].s = tdrpStrDup("KDP");
      tt->struct_vals[163].s = tdrpStrDup("deg/km");
      tt->struct_vals[164].d = 0.001;
      tt->struct_vals[165].d = -32;
      tt->struct_vals[166].b = pFALSE;
      tt->struct_vals[167].b = pFALSE;
      tt->struct_vals[168].e = SNRHC;
      tt->struct_vals[169].s = tdrpStrDup("SNRHC");
      tt->struct_vals[170].s = tdrpStrDup("dB");
      tt->struct_vals[171].d = 0.01;
      tt->struct_vals[172].d = -320;
      tt->struct_vals[173].b = pFALSE;
      tt->struct_vals[174].b = pFALSE;
      tt->struct_vals[175].e = SNRHX;
      tt->struct_vals[176].s = tdrpStrDup("SNRHX");
      tt->struct_vals[177].s = tdrpStrDup("dB");
      tt->struct_vals[178].d = 0.01;
      tt->struct_vals[179].d = -320;
      tt->struct_vals[180].b = pFALSE;
      tt->struct_vals[181].b = pFALSE;
      tt->struct_vals[182].e = SNRVC;
      tt->struct_vals[183].s = tdrpStrDup("SNRVC");
      tt->struct_vals[184].s = tdrpStrDup("dB");
      tt->struct_vals[185].d = 0.01;
      tt->struct_vals[186].d = -320;
      tt->struct_vals[187].b = pFALSE;
      tt->struct_vals[188].b = pFALSE;
      tt->struct_vals[189].e = SNRVX;
      tt->struct_vals[190].s = tdrpStrDup("SNRVX");
      tt->struct_vals[191].s = tdrpStrDup("dB");
      tt->struct_vals[192].d = 0.01;
      tt->struct_vals[193].d = -320;
      tt->struct_vals[194].b = pFALSE;
      tt->struct_vals[195].b = pFALSE;
      tt->struct_vals[196].e = DBMHC;
      tt->struct_vals[197].s = tdrpStrDup("DBMHC");
      tt->struct_vals[198].s = tdrpStrDup("dBm");
      tt->struct_vals[199].d = 0.01;
      tt->struct_vals[200].d = -320;
      tt->struct_vals[201].b = pFALSE;
      tt->struct_vals[202].b = pFALSE;
      tt->struct_vals[203].e = DBMHX;
      tt->struct_vals[204].s = tdrpStrDup("DBMHX");
      tt->struct_vals[205].s = tdrpStrDup("dBm");
      tt->struct_vals[206].d = 0.01;
      tt->struct_vals[207].d = -320;
      tt->struct_vals[208].b = pFALSE;
      tt->struct_vals[209].b = pFALSE;
      tt->struct_vals[210].e = DBMVC;
      tt->struct_vals[211].s = tdrpStrDup("DBMVC");
      tt->struct_vals[212].s = tdrpStrDup("dBm");
      tt->struct_vals[213].d = 0.01;
      tt->struct_vals[214].d = -320;
      tt->struct_vals[215].b = pFALSE;
      tt->struct_vals[216].b = pFALSE;
      tt->struct_vals[217].e = DBMVX;
      tt->struct_vals[218].s = tdrpStrDup("DBMVX");
      tt->struct_vals[219].s = tdrpStrDup("dBm");
      tt->struct_vals[220].d = 0.01;
      tt->struct_vals[221].d = -320;
      tt->struct_vals[222].b = pFALSE;
      tt->struct_vals[223].b = pFALSE;
      tt->struct_vals[224].e = CPA;
      tt->struct_vals[225].s = tdrpStrDup("CPA");
      tt->struct_vals[226].s = tdrpStrDup("");
      tt->struct_vals[227].d = 0.0001;
      tt->struct_vals[228].d = -1;
      tt->struct_vals[229].b = pFALSE;
      tt->struct_vals[230].b = pFALSE;
      tt->struct_vals[231].e = TDBZ;
      tt->struct_vals[232].s = tdrpStrDup("TDBZ");
      tt->struct_vals[233].s = tdrpStrDup("dBzSq");
      tt->struct_vals[234].d = 0.1;
      tt->struct_vals[235].d = -0.1;
      tt->struct_vals[236].b = pFALSE;
      tt->struct_vals[237].b = pFALSE;
      tt->struct_vals[238].e = SPIN;
      tt->struct_vals[239].s = tdrpStrDup("SPIN");
      tt->struct_vals[240].s = tdrpStrDup("");
      tt->struct_vals[241].d = 0.01;
      tt->struct_vals[242].d = -0.1;
      tt->struct_vals[243].b = pFALSE;
      tt->struct_vals[244].b = pFALSE;
      tt->struct_vals[245].e = MAX_TDBZ_SPIN;
      tt->struct_vals[246].s = tdrpStrDup("MAX_TDBZ_SPIN");
      tt->struct_vals[247].s = tdrpStrDup("");
      tt->struct_vals[248].d = 0.0001;
      tt->struct_vals[249].d = -1;
      tt->struct_vals[250].b = pFALSE;
      tt->struct_vals[251].b = pFALSE;
      tt->struct_vals[252].e = ZDR_SDEV;
      tt->struct_vals[253].s = tdrpStrDup("ZDR_SDEV");
      tt->struct_vals[254].s = tdrpStrDup("dB");
      tt->struct_vals[255].d = 0.001;
      tt->struct_vals[256].d = -32;
      tt->struct_vals[257].b = pFALSE;
      tt->struct_vals[258].b = pFALSE;
      tt->struct_vals[259].e = PHIDP_SDEV;
      tt->struct_vals[260].s = tdrpStrDup("PHIDP_SDEV");
      tt->struct_vals[261].s = tdrpStrDup("deg");
      tt->struct_vals[262].d = 0.02;
      tt->struct_vals[263].d = -640;
      tt->struct_vals[264].b = pFALSE;
      tt->struct_vals[265].b = pFALSE;
      tt->struct_vals[266].e = DBZ_DIFF_SQ;
      tt->struct_vals[267].s = tdrpStrDup("DBZ_DIFF_SQ");
      tt->struct_vals[268].s = tdrpStrDup("dBzSq");
      tt->struct_vals[269].d = 0.01;
      tt->struct_vals[270].d = -320;
      tt->struct_vals[271].b = pFALSE;
      tt->struct_vals[272].b = pFALSE;
      tt->struct_vals[273].e = DBZ_SPIN_CHANGE;
      tt->struct_vals[274].s = tdrpStrDup("DBZ_SPIN_CHANGE");
      tt->struct_vals[275].s = tdrpStrDup("");
      tt->struct_vals[276].d = 0.01;
      tt->struct_vals[277].d = -320;
      tt->struct_vals[278].b = pFALSE;
      tt->struct_vals[279].b = pFALSE;
      tt->struct_vals[280].e = CMD;
      tt->struct_vals[281].s = tdrpStrDup("CMD");
      tt->struct_vals[282].s = tdrpStrDup("");
      tt->struct_vals[283].d = 0.001;
      tt->struct_vals[284].d = -0.01;
      tt->struct_vals[285].b = pFALSE;
      tt->struct_vals[286].b = pFALSE;
      tt->struct_vals[287].e = CMD_FLAG;
      tt->struct_vals[288].s = tdrpStrDup("CMD_FLAG");
      tt->struct_vals[289].s = tdrpStrDup("");
      tt->struct_vals[290].d = 1;
      tt->struct_vals[291].d = -100;
      tt->struct_vals[292].b = pFALSE;
      tt->struct_vals[293].b = pFALSE;
      tt->struct_vals[294].e = AIQ_HC;
      tt->struct_vals[295].s = tdrpStrDup("AIQ_HC");
      tt->struct_vals[296].s = tdrpStrDup("deg");
      tt->struct_vals[297].d = 0.12;
      tt->struct_vals[298].d = -360;
      tt->struct_vals[299].b = pFALSE;
      tt->struct_vals[300].b = pFALSE;
      tt->struct_vals[301].e = NIQ_HC;
      tt->struct_vals[302].s = tdrpStrDup("NIQ_HC");
      tt->struct_vals[303].s = tdrpStrDup("dBm");
      tt->struct_vals[304].d = 0.01;
      tt->struct_vals[305].d = -320;
      tt->struct_vals[306].b = pFALSE;
      tt->struct_vals[307].b = pFALSE;
      tt->struct_vals[308].e = AIQ_VC;
      tt->struct_vals[309].s = tdrpStrDup("AIQ_VC");
      tt->struct_vals[310].s = tdrpStrDup("deg");
      tt->struct_vals[311].d = 0.12;
      tt->struct_vals[312].d = -360;
      tt->struct_vals[313].b = pFALSE;
      tt->struct_vals[314].b = pFALSE;
      tt->struct_vals[315].e = NIQ_VC;
      tt->struct_vals[316].s = tdrpStrDup("NIQ_VC");
      tt->struct_vals[317].s = tdrpStrDup("dBm");
      tt->struct_vals[318].d = 0.01;
      tt->struct_vals[319].d = -320;
      tt->struct_vals[320].b = pFALSE;
      tt->struct_vals[321].b = pFALSE;
      tt->struct_vals[322].e = SZ_TRIP_FLAG;
      tt->struct_vals[323].s = tdrpStrDup("SZ_TRIP_FLAG");
      tt->struct_vals[324].s = tdrpStrDup("");
      tt->struct_vals[325].d = 1;
      tt->struct_vals[326].d = -1000;
      tt->struct_vals[327].b = pFALSE;
      tt->struct_vals[328].b = pFALSE;
      tt->struct_vals[329].e = SZ_LEAKAGE;
      tt->struct_vals[330].s = tdrpStrDup("SZ_LEAKAGE");
      tt->struct_vals[331].s = tdrpStrDup("");
      tt->struct_vals[332].d = 0.0001;
      tt->struct_vals[333].d = -1;
      tt->struct_vals[334].b = pFALSE;
      tt->struct_vals[335].b = pFALSE;
      tt->struct_vals[336].e = CENSORING_FLAG;
      tt->struct_vals[337].s = tdrpStrDup("CENSORING_FLAG");
      tt->struct_vals[338].s = tdrpStrDup("");
      tt->struct_vals[339].d = 1;
      tt->struct_vals[340].d = -1000;
      tt->struct_vals[341].b = pFALSE;
      tt->struct_vals[342].b = pFALSE;
      tt->struct_vals[343].e = LAG0_HC_DB;
      tt->struct_vals[344].s = tdrpStrDup("LAG0_HC_DB");
      tt->struct_vals[345].s = tdrpStrDup("dBm");
      tt->struct_vals[346].d = 0.005;
      tt->struct_vals[347].d = -160;
      tt->struct_vals[348].b = pFALSE;
      tt->struct_vals[349].b = pFALSE;
      tt->struct_vals[350].e = LAG0_HX_DB;
      tt->struct_vals[351].s = tdrpStrDup("LAG0_HX_DB");
      tt->struct_vals[352].s = tdrpStrDup("dBm");
      tt->struct_vals[353].d = 0.005;
      tt->struct_vals[354].d = -160;
      tt->struct_vals[355].b = pFALSE;
      tt->struct_vals[356].b = pFALSE;
      tt->struct_vals[357].e = LAG0_VC_DB;
      tt->struct_vals[358].s = tdrpStrDup("LAG0_VC_DB");
      tt->struct_vals[359].s = tdrpStrDup("dBm");
      tt->struct_vals[360].d = 0.005;
      tt->struct_vals[361].d = -160;
      tt->struct_vals[362].b = pFALSE;
      tt->struct_vals[363].b = pFALSE;
      tt->struct_vals[364].e = LAG0_VX_DB;
      tt->struct_vals[365].s = tdrpStrDup("LAG0_VX_DB");
      tt->struct_vals[366].s = tdrpStrDup("dBm");
      tt->struct_vals[367].d = 0.005;
      tt->struct_vals[368].d = -160;
      tt->struct_vals[369].b = pFALSE;
      tt->struct_vals[370].b = pFALSE;
      tt->struct_vals[371].e = LAG0_HCVX_DB;
      tt->struct_vals[372].s = tdrpStrDup("LAG0_HCVX_DB");
      tt->struct_vals[373].s = tdrpStrDup("dBm");
      tt->struct_vals[374].d = 0.005;
      tt->struct_vals[375].d = -160;
      tt->struct_vals[376].b = pFALSE;
      tt->struct_vals[377].b = pFALSE;
      tt->struct_vals[378].e = LAG0_HCVX_PHASE;
      tt->struct_vals[379].s = tdrpStrDup("LAG0_HCVX_PHASE");
      tt->struct_vals[380].s = tdrpStrDup("deg");
      tt->struct_vals[381].d = 0.006;
      tt->struct_vals[382].d = -190;
      tt->struct_vals[383].b = pFALSE;
      tt->struct_vals[384].b = pFALSE;
      tt->struct_vals[385].e = LAG0_VCHX_DB;
      tt->struct_vals[386].s = tdrpStrDup("LAG0_VCHX_DB");
      tt->struct_vals[387].s = tdrpStrDup("dBm");
      tt->struct_vals[388].d = 0.005;
      tt->struct_vals[389].d = -160;
      tt->struct_vals[390].b = pFALSE;
      tt->struct_vals[391].b = pFALSE;
      tt->struct_vals[392].e = LAG0_VCHX_PHASE;
      tt->struct_vals[393].s = tdrpStrDup("LAG0_VCHX_PHASE");
      tt->struct_vals[394].s = tdrpStrDup("deg");
      tt->struct_vals[395].d = 0.006;
      tt->struct_vals[396].d = -190;
      tt->struct_vals[397].b = pFALSE;
      tt->struct_vals[398].b = pFALSE;
      tt->struct_vals[399].e = LAG1_HC_DB;
      tt->struct_vals[400].s = tdrpStrDup("LAG1_HC_DB");
      tt->struct_vals[401].s = tdrpStrDup("dBm");
      tt->struct_vals[402].d = 0.005;
      tt->struct_vals[403].d = -160;
      tt->struct_vals[404].b = pFALSE;
      tt->struct_vals[405].b = pFALSE;
      tt->struct_vals[406].e = LAG1_HC_PHASE;
      tt->struct_vals[407].s = tdrpStrDup("LAG1_HC_PHASE");
      tt->struct_vals[408].s = tdrpStrDup("deg");
      tt->struct_vals[409].d = 0.006;
      tt->struct_vals[410].d = -190;
      tt->struct_vals[411].b = pFALSE;
      tt->struct_vals[412].b = pFALSE;
      tt->struct_vals[413].e = LAG1_VC_DB;
      tt->struct_vals[414].s = tdrpStrDup("LAG1_VC_DB");
      tt->struct_vals[415].s = tdrpStrDup("dBm");
      tt->struct_vals[416].d = 0.005;
      tt->struct_vals[417].d = -160;
      tt->struct_vals[418].b = pFALSE;
      tt->struct_vals[419].b = pFALSE;
      tt->struct_vals[420].e = LAG1_VC_PHASE;
      tt->struct_vals[421].s = tdrpStrDup("LAG1_VC_PHASE");
      tt->struct_vals[422].s = tdrpStrDup("deg");
      tt->struct_vals[423].d = 0.006;
      tt->struct_vals[424].d = -190;
      tt->struct_vals[425].b = pFALSE;
      tt->struct_vals[426].b = pFALSE;
      tt->struct_vals[427].e = LAG1_HCVC_DB;
      tt->struct_vals[428].s = tdrpStrDup("LAG1_HCVC_DB");
      tt->struct_vals[429].s = tdrpStrDup("dBm");
      tt->struct_vals[430].d = 0.005;
      tt->struct_vals[431].d = -160;
      tt->struct_vals[432].b = pFALSE;
      tt->struct_vals[433].b = pFALSE;
      tt->struct_vals[434].e = LAG1_HCVC_PHASE;
      tt->struct_vals[435].s = tdrpStrDup("LAG1_HCVC_PHASE");
      tt->struct_vals[436].s = tdrpStrDup("deg");
      tt->struct_vals[437].d = 0.006;
      tt->struct_vals[438].d = -190;
      tt->struct_vals[439].b = pFALSE;
      tt->struct_vals[440].b = pFALSE;
      tt->struct_vals[441].e = LAG1_VCHC_DB;
      tt->struct_vals[442].s = tdrpStrDup("LAG1_VCHC_DB");
      tt->struct_vals[443].s = tdrpStrDup("dBm");
      tt->struct_vals[444].d = 0.005;
      tt->struct_vals[445].d = -160;
      tt->struct_vals[446].b = pFALSE;
      tt->struct_vals[447].b = pFALSE;
      tt->struct_vals[448].e = LAG1_VCHC_PHASE;
      tt->struct_vals[449].s = tdrpStrDup("LAG1_VCHC_PHASE");
      tt->struct_vals[450].s = tdrpStrDup("deg");
      tt->struct_vals[451].d = 0.006;
      tt->struct_vals[452].d = -190;
      tt->struct_vals[453].b = pFALSE;
      tt->struct_vals[454].b = pFALSE;
      tt->struct_vals[455].e = LAG1_VXHX_DB;
      tt->struct_vals[456].s = tdrpStrDup("LAG1_VXHX_DB");
      tt->struct_vals[457].s = tdrpStrDup("dBm");
      tt->struct_vals[458].d = 0.005;
      tt->struct_vals[459].d = -160;
      tt->struct_vals[460].b = pFALSE;
      tt->struct_vals[461].b = pFALSE;
      tt->struct_vals[462].e = LAG1_VXHX_PHASE;
      tt->struct_vals[463].s = tdrpStrDup("LAG1_VXHX_PHASE");
      tt->struct_vals[464].s = tdrpStrDup("deg");
      tt->struct_vals[465].d = 0.006;
      tt->struct_vals[466].d = -190;
      tt->struct_vals[467].b = pFALSE;
      tt->struct_vals[468].b = pFALSE;
      tt->struct_vals[469].e = LAG2_HC_DB;
      tt->struct_vals[470].s = tdrpStrDup("LAG2_HC_DB");
      tt->struct_vals[471].s = tdrpStrDup("dBm");
      tt->struct_vals[472].d = 0.005;
      tt->struct_vals[473].d = -160;
      tt->struct_vals[474].b = pFALSE;
      tt->struct_vals[475].b = pFALSE;
      tt->struct_vals[476].e = LAG2_HC_PHASE;
      tt->struct_vals[477].s = tdrpStrDup("LAG2_HC_PHASE");
      tt->struct_vals[478].s = tdrpStrDup("deg");
      tt->struct_vals[479].d = 0.006;
      tt->struct_vals[480].d = -190;
      tt->struct_vals[481].b = pFALSE;
      tt->struct_vals[482].b = pFALSE;
      tt->struct_vals[483].e = LAG2_VC_DB;
      tt->struct_vals[484].s = tdrpStrDup("LAG2_VC_DB");
      tt->struct_vals[485].s = tdrpStrDup("dBm");
      tt->struct_vals[486].d = 0.005;
      tt->struct_vals[487].d = -160;
      tt->struct_vals[488].b = pFALSE;
      tt->struct_vals[489].b = pFALSE;
      tt->struct_vals[490].e = LAG2_VC_PHASE;
      tt->struct_vals[491].s = tdrpStrDup("LAG2_VC_PHASE");
      tt->struct_vals[492].s = tdrpStrDup("deg");
      tt->struct_vals[493].d = 0.006;
      tt->struct_vals[494].d = -190;
      tt->struct_vals[495].b = pFALSE;
      tt->struct_vals[496].b = pFALSE;
      tt->struct_vals[497].e = LAG3_HC_DB;
      tt->struct_vals[498].s = tdrpStrDup("LAG3_HC_DB");
      tt->struct_vals[499].s = tdrpStrDup("dBm");
      tt->struct_vals[500].d = 0.005;
      tt->struct_vals[501].d = -160;
      tt->struct_vals[502].b = pFALSE;
      tt->struct_vals[503].b = pFALSE;
      tt->struct_vals[504].e = LAG3_HC_PHASE;
      tt->struct_vals[505].s = tdrpStrDup("LAG3_HC_PHASE");
      tt->struct_vals[506].s = tdrpStrDup("deg");
      tt->struct_vals[507].d = 0.006;
      tt->struct_vals[508].d = -190;
      tt->struct_vals[509].b = pFALSE;
      tt->struct_vals[510].b = pFALSE;
      tt->struct_vals[511].e = LAG3_VC_DB;
      tt->struct_vals[512].s = tdrpStrDup("LAG3_VC_DB");
      tt->struct_vals[513].s = tdrpStrDup("dBm");
      tt->struct_vals[514].d = 0.005;
      tt->struct_vals[515].d = -160;
      tt->struct_vals[516].b = pFALSE;
      tt->struct_vals[517].b = pFALSE;
      tt->struct_vals[518].e = LAG3_VC_PHASE;
      tt->struct_vals[519].s = tdrpStrDup("LAG3_VC_PHASE");
      tt->struct_vals[520].s = tdrpStrDup("deg");
      tt->struct_vals[521].d = 0.006;
      tt->struct_vals[522].d = -190;
      tt->struct_vals[523].b = pFALSE;
      tt->struct_vals[524].b = pFALSE;
      tt->struct_vals[525].e = RVVHH0_DB;
      tt->struct_vals[526].s = tdrpStrDup("RVVHH0_DB");
      tt->struct_vals[527].s = tdrpStrDup("dBm");
      tt->struct_vals[528].d = 0.005;
      tt->struct_vals[529].d = -160;
      tt->struct_vals[530].b = pFALSE;
      tt->struct_vals[531].b = pFALSE;
      tt->struct_vals[532].e = RVVHH0_PHASE;
      tt->struct_vals[533].s = tdrpStrDup("RVVHH0_PHASE");
      tt->struct_vals[534].s = tdrpStrDup("deg");
      tt->struct_vals[535].d = 0.006;
      tt->struct_vals[536].d = -190;
      tt->struct_vals[537].b = pFALSE;
      tt->struct_vals[538].b = pFALSE;
      tt->struct_vals[539].e = SDEV_VV;
      tt->struct_vals[540].s = tdrpStrDup("SDEV_VV");
      tt->struct_vals[541].s = tdrpStrDup("dBm");
      tt->struct_vals[542].d = 0.01;
      tt->struct_vals[543].d = -320;
      tt->struct_vals[544].b = pFALSE;
      tt->struct_vals[545].b = pFALSE;
      tt->struct_vals[546].e = PRT;
      tt->struct_vals[547].s = tdrpStrDup("PRT");
      tt->struct_vals[548].s = tdrpStrDup("s");
      tt->struct_vals[549].d = 1e-05;
      tt->struct_vals[550].d = 0.00078;
      tt->struct_vals[551].b = pTRUE;
      tt->struct_vals[552].b = pFALSE;
      tt->struct_vals[553].e = NUM_PULSES;
      tt->struct_vals[554].s = tdrpStrDup("NUM_PULSES");
      tt->struct_vals[555].s = tdrpStrDup("");
      tt->struct_vals[556].d = 1;
      tt->struct_vals[557].d = 0;
      tt->struct_vals[558].b = pTRUE;
      tt->struct_vals[559].b = pFALSE;
      tt->struct_vals[560].e = TEST0;
      tt->struct_vals[561].s = tdrpStrDup("TEST0");
      tt->struct_vals[562].s = tdrpStrDup("");
      tt->struct_vals[563].d = 0.01;
      tt->struct_vals[564].d = -320;
      tt->struct_vals[565].b = pFALSE;
      tt->struct_vals[566].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 28'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 28");
    tt->comment_hdr = tdrpStrDup("SWEEP TRANSITIONS");
    tt->comment_text = tdrpStrDup("We can modify the end-of-sweep and start-of-sweep conditions found in the time series.");
    tt++;
    
    // Parameter 'use_sweep_info_from_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_sweep_info_from_time_series");
    tt->descr = tdrpStrDup("Option to read sweep info from time series data.");
    tt->help = tdrpStrDup("If not, we need to guess at the sweep information.");
    tt->val_offset = (char *) &use_sweep_info_from_time_series - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'delay_tilt_start_msg_during_ant_trans'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("delay_tilt_start_msg_during_ant_trans");
    tt->descr = tdrpStrDup("Option to delay start of tilt message if antenna transition from time series data.");
    tt->help = tdrpStrDup("If true, the end-of-sweep condition occurs at the start of the transition, but the start-of-sweep flag is delayed until the transition ends.");
    tt->val_offset = (char *) &delay_tilt_start_msg_during_ant_trans - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_end_of_sweep_when_antenna_changes_direction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_end_of_sweep_when_antenna_changes_direction");
    tt->descr = tdrpStrDup("Option to determine change in sweep from antenna direction change.");
    tt->help = tdrpStrDup("We monitor the antenna movement direction. When this changes, we set the end of sweep flag.");
    tt->val_offset = (char *) &set_end_of_sweep_when_antenna_changes_direction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'required_delta_angle_for_antenna_direction_change'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("required_delta_angle_for_antenna_direction_change");
    tt->descr = tdrpStrDup("The required angle difference for detecting direction change (deg).");
    tt->help = tdrpStrDup("We examine the antenna angles for reversal in motion direction. The antenna must move by at least this amount for deducing the direction.");
    tt->val_offset = (char *) &required_delta_angle_for_antenna_direction_change - &_start_;
    tt->single_val.d = 0.25;
    tt++;
    
    // Parameter 'min_rays_in_sweep_for_antenna_direction_change'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_rays_in_sweep_for_antenna_direction_change");
    tt->descr = tdrpStrDup("Min number of rays in a sweep when finding end of sweep from dirn change.");
    tt->help = tdrpStrDup("If the number of rays is less than this at the time of a direction change, a change in sweep number is not triggered.");
    tt->val_offset = (char *) &min_rays_in_sweep_for_antenna_direction_change - &_start_;
    tt->single_val.i = 45;
    tt++;
    
    // Parameter 'max_sweeps_in_vol_for_antenna_direction_change'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_sweeps_in_vol_for_antenna_direction_change");
    tt->descr = tdrpStrDup("Max number of sweeps in volume when finding end of sweep from dirn change.");
    tt->help = tdrpStrDup("Used to trigger end of volume if sweep number gets too high. Only applies if set_end_of_sweep_when_antenna_changes_direction is true.");
    tt->val_offset = (char *) &max_sweeps_in_vol_for_antenna_direction_change - &_start_;
    tt->single_val.i = 32;
    tt++;
    
    // Parameter 'Comment 29'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 29");
    tt->comment_hdr = tdrpStrDup("VOLUME TRANSITIONS");
    tt->comment_text = tdrpStrDup("We can modify the end-of-volume conditions found in the time series. This section only applies if 'use_volume_info_from_time_series' is set to FALSE.");
    tt++;
    
    // Parameter 'use_volume_info_from_time_series'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_volume_info_from_time_series");
    tt->descr = tdrpStrDup("Option to read volume info from time series data.");
    tt->help = tdrpStrDup("If not, we need to deduce the end of volume conditions. The options that follow only apply if this parameter is set to false.");
    tt->val_offset = (char *) &use_volume_info_from_time_series - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'set_end_of_vol_from_elev_angle'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_end_of_vol_from_elev_angle");
    tt->descr = tdrpStrDup("Option to set the end of vol flag based on elevation angle.");
    tt->help = tdrpStrDup("If true, the program will look for changes in antenna angle to compute the end of volume. Only applies if 'use_volume_info_from_time_series' is false.");
    tt->val_offset = (char *) &set_end_of_vol_from_elev_angle - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'vol_starts_at_bottom'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("vol_starts_at_bottom");
    tt->descr = tdrpStrDup("Flag to indicate that elevation angles increase in the volume.");
    tt->help = tdrpStrDup("If the volume starts at the top, i.e. elevations decrease during the volume, set this to FALSE. Only applies if 'use_volume_info_from_time_series' is false.");
    tt->val_offset = (char *) &vol_starts_at_bottom - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'elev_change_for_end_of_vol'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("elev_change_for_end_of_vol");
    tt->descr = tdrpStrDup("Change in elevation which triggers and end of volume.");
    tt->help = tdrpStrDup("If the elevation angle changes by this amount, and end of volume flag will be set. Only applies if 'use_volume_info_from_time_series' is false.");
    tt->val_offset = (char *) &elev_change_for_end_of_vol - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0.1;
    tt->single_val.d = 1.5;
    tt++;
    
    // Parameter 'min_beams_per_vol'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_beams_per_vol");
    tt->descr = tdrpStrDup("Min number of beams per volume.");
    tt->help = tdrpStrDup("Used to prevent end-of-volume conditions being determined during antenna transition to the start of the next volume. Only used for set_end_of_vol_from_elev_angle.");
    tt->val_offset = (char *) &min_beams_per_vol - &_start_;
    tt->single_val.i = 360;
    tt++;
    
    // Parameter 'set_end_of_vol_on_prf_change'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_end_of_vol_on_prf_change");
    tt->descr = tdrpStrDup("Option to set the end-of-vol flag when the PRF changes.");
    tt->help = tdrpStrDup("Only applies if 'use_volume_info_from_time_series' is false.");
    tt->val_offset = (char *) &set_end_of_vol_on_prf_change - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'set_end_of_vol_on_pulse_width_change'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_end_of_vol_on_pulse_width_change");
    tt->descr = tdrpStrDup("Option to set the end-of-vol flag when the pulse width changes.");
    tt->help = tdrpStrDup("Only applies if 'use_volume_info_from_time_series' is false.");
    tt->val_offset = (char *) &set_end_of_vol_on_pulse_width_change - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 30'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 30");
    tt->comment_hdr = tdrpStrDup("TRANSITION FLAG");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'transition_method'
    // ctype is '_transition_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("transition_method");
    tt->descr = tdrpStrDup("Method for identifying whether a beam occurs during an antenna transition.");
    tt->help = tdrpStrDup("\nSome time series data includes a transition flag, which indicates when the antenna is in transition from one scan strategy to another.\n\n  TRANSITION_FLAG_AT_CENTER: the beam is flagged as in transition if the center pulse of the beam has the transition flag set.\n\n  TRANSITION_FLAG_AT_BOTH_ENDS: the beam is flagged as in transition if both the start and end pulses of the beam have the transition flag set.\n\n  TRANSITION_FLAG_AT_EITHER_END: the beam is flagged as in transition if either the start or end pulses of the beam have the transition flag set.\n\n  TRANSITION_FLAG_MISSING: transition flag is not available.");
    tt->val_offset = (char *) &transition_method - &_start_;
    tt->enum_def.name = tdrpStrDup("transition_method_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TRANSITION_FLAG_AT_CENTER");
      tt->enum_def.fields[0].val = TRANSITION_FLAG_AT_CENTER;
      tt->enum_def.fields[1].name = tdrpStrDup("TRANSITION_FLAG_AT_BOTH_ENDS");
      tt->enum_def.fields[1].val = TRANSITION_FLAG_AT_BOTH_ENDS;
      tt->enum_def.fields[2].name = tdrpStrDup("TRANSITION_FLAG_AT_EITHER_END");
      tt->enum_def.fields[2].val = TRANSITION_FLAG_AT_EITHER_END;
      tt->enum_def.fields[3].name = tdrpStrDup("TRANSITION_FLAG_MISSING");
      tt->enum_def.fields[3].val = TRANSITION_FLAG_MISSING;
    tt->single_val.e = TRANSITION_FLAG_AT_CENTER;
    tt++;
    
    // Parameter 'check_transition_from_fixed_angle_error'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_transition_from_fixed_angle_error");
    tt->descr = tdrpStrDup("Option to check for transitions using the fixed angle error.");
    tt->help = tdrpStrDup("If true, we compute the error between the actual pointing angle and the fixed angle for a ray. If the error exceeds the specified limit, we set the transition flag on the ray.");
    tt->val_offset = (char *) &check_transition_from_fixed_angle_error - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_fixed_angle_error_ppi'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_fixed_angle_error_ppi");
    tt->descr = tdrpStrDup("Maximum permissable error in the pointing angle in PPI mode (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_fixed_angle_error_ppi - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'max_fixed_angle_error_rhi'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_fixed_angle_error_rhi");
    tt->descr = tdrpStrDup("Maximum permissable error in the pointing angle in RHI mode (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_fixed_angle_error_rhi - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'selected_region'
    // ctype is '_selected_region_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("selected_region");
    tt->descr = tdrpStrDup("Region for selected prints and spectra files.");
    tt->help = tdrpStrDup("See do_selected_print and write_spectra_files.");
    tt->val_offset = (char *) &selected_region - &_start_;
    tt->is_private = TRUE;
    tt->struct_def.name = tdrpStrDup("selected_region_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_el");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &selected_region.min_el - (char *) &selected_region;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_el");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &selected_region.max_el - (char *) &selected_region;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("min_az");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &selected_region.min_az - (char *) &selected_region;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("max_az");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &selected_region.max_az - (char *) &selected_region;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("min_range");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &selected_region.min_range - (char *) &selected_region;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("max_range");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &selected_region.max_range - (char *) &selected_region;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].d = 1;
      tt->struct_vals[4].d = 0;
      tt->struct_vals[5].d = 1;
    tt++;
    
    // Parameter 'do_selected_print'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("do_selected_print");
    tt->descr = tdrpStrDup("Option to print info for a selected region.");
    tt->help = tdrpStrDup("If true, debug info for a selected region will be printed to stderr.");
    tt->val_offset = (char *) &do_selected_print - &_start_;
    tt->is_private = TRUE;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'spectra_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("spectra_dir");
    tt->descr = tdrpStrDup("Directory to which spectra are written.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spectra_dir - &_start_;
    tt->is_private = TRUE;
    tt->single_val.s = tdrpStrDup("/tmp/spectra");
    tt++;
    
    // Parameter 'write_individual_spectra_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_individual_spectra_files");
    tt->descr = tdrpStrDup("Option to write individual spectral files.");
    tt->help = tdrpStrDup("If true, ASCII files with the spectra are written to the specified directory, for the selected region. A separate file is written for each spectrum.");
    tt->val_offset = (char *) &write_individual_spectra_files - &_start_;
    tt->is_private = TRUE;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_combined_spectra_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_combined_spectra_file");
    tt->descr = tdrpStrDup("Option to write combined spectra file.");
    tt->help = tdrpStrDup("If true, a single file is written, with one line per spectrum.");
    tt->val_offset = (char *) &write_combined_spectra_file - &_start_;
    tt->is_private = TRUE;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_snr_for_combined_spectra_file'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_for_combined_spectra_file");
    tt->descr = tdrpStrDup("Minimum SNR for writing combined spectra to file (dB).");
    tt->help = tdrpStrDup("The spectrum will only be added if the SNR exceeds this value.");
    tt->val_offset = (char *) &min_snr_for_combined_spectra_file - &_start_;
    tt->is_private = TRUE;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'data_mapper_report_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("data_mapper_report_interval");
    tt->descr = tdrpStrDup("Number of seconds between reports to DataMapper.");
    tt->help = tdrpStrDup("If > 0, the program will register with the DataMapper when the output FMQ is written to. If <= 0, registration will not be performed.");
    tt->val_offset = (char *) &data_mapper_report_interval - &_start_;
    tt->is_private = TRUE;
    tt->single_val.i = 5;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
