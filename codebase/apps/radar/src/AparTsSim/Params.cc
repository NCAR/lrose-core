/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program AparTsSim
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("AparTsSim simulates APAR time series data. It IWRF time series files, converts to APAR TS data, and writes the results to files to a UDP stream. Optionally it reads the UDP stream as a check, and converts to APAR time series.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register with procmap.");
    tt->help = tdrpStrDup("Relevant for testing an operational system. The app will register with the process mapper once per 60 secs.");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("RUN MODES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'run_mode'
    // ctype is '_run_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("run_mode");
    tt->descr = tdrpStrDup("Control write or read processing.");
    tt->help = tdrpStrDup("WRITE_TO_FILE: generates time series files in APAR format.\n\nWRITE_TO_UDP: writes out simulated data to the DREX FPGA, via UDP.\n\nWRITE_TO_FMQ: writes out simulated data to a time series FMQ.\n\nREAD_FROM_UDP: for testing read UDP data stream generated in the WRITE_UDP mode. The reader creates an APAR time series data stream, and writes it out to an FMQ.");
    tt->val_offset = (char *) &run_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("run_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("READ_FROM_UDP");
      tt->enum_def.fields[0].val = READ_FROM_UDP;
      tt->enum_def.fields[1].name = tdrpStrDup("WRITE_TO_FILE");
      tt->enum_def.fields[1].val = WRITE_TO_FILE;
      tt->enum_def.fields[2].name = tdrpStrDup("WRITE_TO_UDP");
      tt->enum_def.fields[2].val = WRITE_TO_UDP;
      tt->enum_def.fields[3].name = tdrpStrDup("WRITE_TO_FMQ");
      tt->enum_def.fields[3].val = WRITE_TO_FMQ;
    tt->single_val.e = WRITE_TO_FILE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("WRITE FILES MODE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Directory for output files.");
    tt->help = tdrpStrDup("For run_mode = WRITE_TO_FILE.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("WRITE UDP MODE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'udp_dest_address'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("udp_dest_address");
    tt->descr = tdrpStrDup("Destination address for UDP.");
    tt->help = tdrpStrDup("For run_mode = WRITE_TO_UDP.");
    tt->val_offset = (char *) &udp_dest_address - &_start_;
    tt->single_val.s = tdrpStrDup("127.0.0.1");
    tt++;
    
    // Parameter 'udp_dest_port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("udp_dest_port");
    tt->descr = tdrpStrDup("Port for destination of UDP data.");
    tt->help = tdrpStrDup("For run_mode = WRITE_TO_UDP.");
    tt->val_offset = (char *) &udp_dest_port - &_start_;
    tt->single_val.i = 6666;
    tt++;
    
    // Parameter 'udp_max_packet_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("udp_max_packet_size");
    tt->descr = tdrpStrDup("Ideal UDP packet size (bytes).");
    tt->help = tdrpStrDup("We will split a pulse into packets that do not exceed this size.");
    tt->val_offset = (char *) &udp_max_packet_size - &_start_;
    tt->single_val.i = 1400;
    tt++;
    
    // Parameter 'udp_n_gates'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("udp_n_gates");
    tt->descr = tdrpStrDup("Number of gates for UDP simulation mode.");
    tt->help = tdrpStrDup("If the input files contain fewer gates than this, the input gates will be sampled multiple times to create the output data.");
    tt->val_offset = (char *) &udp_n_gates - &_start_;
    tt->single_val.i = 2500;
    tt++;
    
    // Parameter 'udp_gate_spacing_m'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("udp_gate_spacing_m");
    tt->descr = tdrpStrDup("Gate spacing of simulated data (m).");
    tt->help = tdrpStrDup("Overrides the gate spacing in the IWRF data.");
    tt->val_offset = (char *) &udp_gate_spacing_m - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'udp_n_channels'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("udp_n_channels");
    tt->descr = tdrpStrDup("Number of channels for UDP simulation mode.");
    tt->help = tdrpStrDup("If this is 1, then that represents the signals from the entire array combined into a single channel.If this is more than 1, each channel represents a single row from the array, which will be combined using beam forming on the FPGA.");
    tt->val_offset = (char *) &udp_n_channels - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'udp_iq_scale_for_si16'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("udp_iq_scale_for_si16");
    tt->descr = tdrpStrDup("Scale factor for converting floats to si16 in IQ data stream.");
    tt->help = tdrpStrDup("This scales the IQ data so that sqrt(I*I + Q*Q) is in Watts.");
    tt->val_offset = (char *) &udp_iq_scale_for_si16 - &_start_;
    tt->single_val.d = 0.0001;
    tt++;
    
    // Parameter 'udp_sim_data_rate'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("udp_sim_data_rate");
    tt->descr = tdrpStrDup("Target simulation data rate (MBytes/sec).");
    tt->help = tdrpStrDup("We use periodic sleeps to achieve the target data rate.");
    tt->val_offset = (char *) &udp_sim_data_rate - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'set_udp_time_to_now'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_udp_time_to_now");
    tt->descr = tdrpStrDup("Set the pulse times to real-time.");
    tt->help = tdrpStrDup("Overwrite the times in the pulse headers with real-time values.");
    tt->val_offset = (char *) &set_udp_time_to_now - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("WRITE FMQ MODE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'fmq_gate_spacing_m'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("fmq_gate_spacing_m");
    tt->descr = tdrpStrDup("Gate spacing of simulated data (m).");
    tt->help = tdrpStrDup("Overrides the gate spacing in the IWRF data.");
    tt->val_offset = (char *) &fmq_gate_spacing_m - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'fmq_sim_data_rate'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("fmq_sim_data_rate");
    tt->descr = tdrpStrDup("Target simulation data rate (MBytes/sec).");
    tt->help = tdrpStrDup("We use periodic sleeps to achieve the target data rate.");
    tt->val_offset = (char *) &fmq_sim_data_rate - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'fmq_set_times_to_now'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("fmq_set_times_to_now");
    tt->descr = tdrpStrDup("Set the pulse times to real-time.");
    tt->help = tdrpStrDup("Overwrite the times in the pulse headers with real-time values.");
    tt->val_offset = (char *) &fmq_set_times_to_now - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("FMQ DETAILS");
    tt->comment_text = tdrpStrDup("Applies to WRITE_TO_FMQ and READ_FROM_UDP modes");
    tt++;
    
    // Parameter 'output_fmq_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_path");
    tt->descr = tdrpStrDup("Path to output FMQ.");
    tt->help = tdrpStrDup("The FMQ consists of 2 files, ??.buf and ??.stat.");
    tt->val_offset = (char *) &output_fmq_path - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/ts");
    tt++;
    
    // Parameter 'output_fmq_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_size");
    tt->descr = tdrpStrDup("Size of output FMQ, in bytes.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer.");
    tt->val_offset = (char *) &output_fmq_size - &_start_;
    tt->single_val.i = 100000000;
    tt++;
    
    // Parameter 'output_fmq_nslots'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_nslots");
    tt->descr = tdrpStrDup("Number of slots in the output FMQ.");
    tt->help = tdrpStrDup("The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.");
    tt->val_offset = (char *) &output_fmq_nslots - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'output_fmq_write_blocking'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_write_blocking");
    tt->descr = tdrpStrDup("Option to block on write.");
    tt->help = tdrpStrDup("If set to true, the write will block until the reader catches up. NOTE: this only works for a single reader.");
    tt->val_offset = (char *) &output_fmq_write_blocking - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'n_pulses_per_message'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_pulses_per_message");
    tt->descr = tdrpStrDup("Number of pulses per output message.");
    tt->help = tdrpStrDup("The actual number will sometimes be 1 less than this, because an info data part may will be written once in a while.");
    tt->val_offset = (char *) &n_pulses_per_message - &_start_;
    tt->single_val.i = 200;
    tt++;
    
    // Parameter 'n_pulses_per_info'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_pulses_per_info");
    tt->descr = tdrpStrDup("How often to write an info part.");
    tt->help = tdrpStrDup("The info part includes data which does not change on a pulse-to-pulse basis.");
    tt->val_offset = (char *) &n_pulses_per_info - &_start_;
    tt->single_val.i = 10000;
    tt++;
    
    // Parameter 'data_mapper_report_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("data_mapper_report_interval");
    tt->descr = tdrpStrDup("Number of seconds between reports to DataMapper.");
    tt->help = tdrpStrDup("If > 0, the program will register with the DataMapper when the output FMQ is written to. If <= 0, registration will not be performed.");
    tt->val_offset = (char *) &data_mapper_report_interval - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("DWELL DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'n_samples_per_visit'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_samples_per_visit");
    tt->descr = tdrpStrDup("Number of samples taken each time we revisit the beam location.");
    tt->help = tdrpStrDup("We take this number of samples for an az/el, then move to sampling for other locations, before coming back to visit this beam again.");
    tt->val_offset = (char *) &n_samples_per_visit - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'n_visits_per_beam'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_visits_per_beam");
    tt->descr = tdrpStrDup("Number of visits for each beam.");
    tt->help = tdrpStrDup("During a dwell, we come back to a specific beam location this number of times.");
    tt->val_offset = (char *) &n_visits_per_beam - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'n_beams_per_dwell'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_beams_per_dwell");
    tt->descr = tdrpStrDup("Number of beams sampled in a dwell.");
    tt->help = tdrpStrDup("During a dwell, we create this number of beams. Then repeat for the next dwell.");
    tt->val_offset = (char *) &n_beams_per_dwell - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'add_cross_pol_sample_at_end_of_visit'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_cross_pol_sample_at_end_of_visit");
    tt->descr = tdrpStrDup("Add 1 cross-pol sample at end of visit.");
    tt->help = tdrpStrDup("APAR can receive in co-polar or cross-polar mode. This option allows us to test the cross-polar mode, by including a cross-polar sample at the end of each visit. This option effectively increases n_samples_per_visit by 1.");
    tt->val_offset = (char *) &add_cross_pol_sample_at_end_of_visit - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("SCAN STRATEGY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'specify_scan_strategy'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_scan_strategy");
    tt->descr = tdrpStrDup("Specify the scan strategy instead of using the angles in the input files.");
    tt->help = tdrpStrDup("This is an option to specify a realistic APAR scan strategy.");
    tt->val_offset = (char *) &specify_scan_strategy - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sim_sweeps'
    // ctype is '_sim_sweep_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sim_sweeps");
    tt->descr = tdrpStrDup("Sweeps to be simulated.");
    tt->help = tdrpStrDup("For RHIs, the min_az and max_az should be the same. For PPIs, the min_el and max_el should be the same. ");
    tt->array_offset = (char *) &_sim_sweeps - &_start_;
    tt->array_n_offset = (char *) &sim_sweeps_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(sim_sweep_t);
    tt->array_n = 4;
    tt->struct_def.name = tdrpStrDup("sim_sweep_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("sweep_type_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("sweep_type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_sim_sweeps->sweep_type - (char *) _sim_sweeps;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("sweep_type_t");
        tt->struct_def.fields[0].enum_def.nfields = 2;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("PPI_SIM");
        tt->struct_def.fields[0].enum_def.fields[0].val = PPI_SIM;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("RHI_SIM");
        tt->struct_def.fields[0].enum_def.fields[1].val = RHI_SIM;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("label");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_sim_sweeps->label - (char *) _sim_sweeps;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("min_az");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_sim_sweeps->min_az - (char *) _sim_sweeps;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("max_az");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_sim_sweeps->max_az - (char *) _sim_sweeps;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("delta_az");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_sim_sweeps->delta_az - (char *) _sim_sweeps;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("min_el");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_sim_sweeps->min_el - (char *) _sim_sweeps;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("max_el");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_sim_sweeps->max_el - (char *) _sim_sweeps;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("delta_el");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_sim_sweeps->delta_el - (char *) _sim_sweeps;
    tt->n_struct_vals = 32;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = RHI_SIM;
      tt->struct_vals[1].s = tdrpStrDup("RHI-fore");
      tt->struct_vals[2].d = -5;
      tt->struct_vals[3].d = -5;
      tt->struct_vals[4].d = 1;
      tt->struct_vals[5].d = -25;
      tt->struct_vals[6].d = 25;
      tt->struct_vals[7].d = 1;
      tt->struct_vals[8].e = RHI_SIM;
      tt->struct_vals[9].s = tdrpStrDup("RHI-aft");
      tt->struct_vals[10].d = -25;
      tt->struct_vals[11].d = -25;
      tt->struct_vals[12].d = 1;
      tt->struct_vals[13].d = -25;
      tt->struct_vals[14].d = 25;
      tt->struct_vals[15].d = 1;
      tt->struct_vals[16].e = RHI_SIM;
      tt->struct_vals[17].s = tdrpStrDup("RHI-dualpol");
      tt->struct_vals[18].d = 0;
      tt->struct_vals[19].d = 0;
      tt->struct_vals[20].d = 1;
      tt->struct_vals[21].d = -25;
      tt->struct_vals[22].d = 25;
      tt->struct_vals[23].d = 1;
      tt->struct_vals[24].e = PPI_SIM;
      tt->struct_vals[25].s = tdrpStrDup("PPI-sur");
      tt->struct_vals[26].d = -45;
      tt->struct_vals[27].d = 45;
      tt->struct_vals[28].d = 1;
      tt->struct_vals[29].d = 0;
      tt->struct_vals[30].d = 0;
      tt->struct_vals[31].d = 1;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
