/**********************************************************************
 * TDRP params for AparTsSim
 **********************************************************************/

//======================================================================
//
// AparTsSim simulates APAR time series data. It IWRF time series files, 
//   converts to APAR TS data, and writes the results to files to a UDP 
//   stream. Optionally it reads the UDP stream as a check, and converts 
//   to APAR time series.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

//======================================================================
//
// SPECIFY APAR TIME-SERIES DETAILS.
//
//======================================================================
 
///////////// n_samples_per_visit /////////////////////
//
// Number of samples taken each time we revisit the beam location.
//
// We take this number of samples for an az/el, then move to sampling 
//   for other locations, before coming back to visit this beam again.
//
//
// Type: int
//

n_samples_per_visit = 5;

///////////// n_visits_per_beam ///////////////////////
//
// Number of visits for each beam.
//
// During a dwell, we come back to a specific beam location this number 
//   of times.
//
//
// Type: int
//

n_visits_per_beam = 6;

///////////// n_beams_per_dwell ///////////////////////
//
// Number of beams sampled in a dwell.
//
// During a dwell, we create this number of beams. Then repeat for the 
//   next dwell.
//
//
// Type: int
//

n_beams_per_dwell = 4;

///////////// add_cross_pol_sample_at_end_of_visit ////
//
// Add 1 cross-pol sample at end of visit.
//
// APAR can receive in co-polar or cross-polar mode. This option allows 
//   us to test the cross-polar mode, by including a cross-polar sample at 
//   the end of each visit. This option effectively increases 
//   n_samples_per_visit by 1.
//
//
// Type: boolean
//

add_cross_pol_sample_at_end_of_visit = TRUE;

//======================================================================
//
// RUN MODES.
//
//======================================================================
 
///////////// run_mode ////////////////////////////////
//
// Control write or read processing.
//
// WRITE_TO_FILE: generates time series files in APAR format.
//
// WRITE_TO_UDP: writes out simulated data to the DREX FPGA, via UDP.
//
// READ_FROM_UDP: for testing read UDP data stream generated in the 
//   WRITE_UDP mode. The reader creates an APAR time series data stream, 
//   and writes it out to an FMQ.
//
//
// Type: enum
// Options:
//     WRITE_TO_FILE
//     WRITE_TO_UDP
//     READ_FROM_UDP
//

run_mode = WRITE_TO_UDP;

//======================================================================
//
// WRITE FILES MODE.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Directory for output files.
//
// For run_mode = WRITE_TO_FILE.
//
//
// Type: string
//

output_dir = "./output";

//======================================================================
//
// WRITE UDP MODE.
//
//======================================================================
 
///////////// udp_source_port /////////////////////////
//
// Port for source of UDP data - i.e. this app.
//
// For run_mode = WRITE_TO_UDP.
//
//
// Type: int
//

udp_source_port = 5555;

///////////// udp_dest_address ////////////////////////
//
// Destination address for UDP.
//
// For run_mode = WRITE_TO_UDP.
//
//
// Type: string
//

// udp_dest_address = "192.168.1.255";
udp_dest_address = "127.0.0.255";

///////////// udp_dest_port ///////////////////////////
//
// Port for destination of UDP data.
//
// For run_mode = WRITE_TO_UDP.
//
//
// Type: int
//

udp_dest_port = 6666;

///////////// udp_max_packet_size /////////////////////
//
// Ideal UDP packet size (bytes).
//
// We will split a pulse into packets that do not exceed this size.
//
//
// Type: int
//

udp_max_packet_size = 1400;

///////////// udp_n_gates /////////////////////////////
//
// Number of gates for UDP simulation mode.
//
// If the input files contain fewer gates than this, the input gates 
//   will be sampled multiple times to create the output data.
//
//
// Type: int
//

udp_n_gates = 2500;

///////////// udp_n_channels //////////////////////////
//
// Number of channels for UDP simulation mode.
//
// If this is 1, then that represents the signals from the entire array 
//   combined into a single channel.If this is more than 1, each channel 
//   represents a single row from the array, which will be combined using 
//   beam forming on the FPGA.
//
//
// Type: int
//

udp_n_channels = 1;

//======================================================================
//
// READ UDP MODE.
//
//======================================================================
 
///////////// output_fmq_path /////////////////////////
//
// Path to output FMQ.
//
// The FMQ consists of 2 files, ??.buf and ??.stat.
//
//
// Type: string
//

output_fmq_path = "/tmp/fmq/ts";

///////////// output_fmq_size /////////////////////////
//
// Size of output FMQ, in bytes.
//
// This is the total size of the output FMQ buffer.
//
//
// Type: int
//

output_fmq_size = 100000000;

///////////// output_fmq_nslots ///////////////////////
//
// Number of slots in the output FMQ.
//
// The number of slots corresponds to the maximum number of messages 
//   which may be written to the buffer before overwrites occur. However, 
//   overwrites may occur sooner if the size is not set large enough.
//
//
// Type: int
//

output_fmq_nslots = 1000;

///////////// output_fmq_blocking /////////////////////
//
// Option to set up the FMQ as blocking.
//
// If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ 
//   becomes full, Test2Dsr will then block until there is space for more 
//   data. This should only be used if there is a single client reading 
//   the FMQ.
//
//
// Type: boolean
//

output_fmq_blocking = FALSE;

///////////// n_pulses_per_message ////////////////////
//
// Number of pulses per output message.
//
// The actual number will sometimes be 1 less than this, because an info 
//   data part may will be written once in a while.
//
//
// Type: int
//

n_pulses_per_message = 200;

///////////// n_pulses_per_info ///////////////////////
//
// How often to write an info part.
//
// The info part includes data which does not change on a pulse-to-pulse 
//   basis.
//
//
// Type: int
//

n_pulses_per_info = 10000;

///////////// write_latest_data_info //////////////////
//
// Option to write latest_data_info for the output FMQ.
//
// If TRUE, latest_data_info will be written for the output FMQ, at the 
//   specified interval.
//
//
// Type: boolean
//

write_latest_data_info = FALSE;

///////////// latest_data_info_interval ///////////////
//
// Number of seconds between writing latest_data_info.
//
// If write_latest_data_info is TRUE, the program will register with the 
//   DataMapper when the output FMQ is written to.
//
//
// Type: int
//

latest_data_info_interval = 5;

///////////// data_mapper_report_interval /////////////
//
// Number of seconds between reports to DataMapper.
//
// If > 0, the program will register with the DataMapper when the output 
//   FMQ is written to. If <= 0, registration will not be performed.
//
//
// Type: int
//

data_mapper_report_interval = 5;

