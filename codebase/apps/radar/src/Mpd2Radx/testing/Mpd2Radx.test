/**********************************************************************
 * TDRP params for ./Mpd2Radx
 **********************************************************************/

//======================================================================
//
// Reads MPD-style Netcdf data files, and converts to a standard 
//   CfRadial.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Program instance for process registration.
//
// This application registers with procmap. This is the instance used 
//   for registration.
//
//
// Type: string
//

instance = "test";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Input directory for searching for files.
//
// Files will be searched for in this directory.
//
//
// Type: string
//

input_dir = ".";

///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// In REALTIME mode, the program waits for a new input file.  In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line. Paths (in ARCHIVE mode, at 
//   least) MUST contain a day-directory above the data file -- 
//   ./data_file.ext will not work as a file path, but 
//   ./yyyymmdd/data_file.ext will.
//
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//     FILELIST
//

mode = ARCHIVE;

//======================================================================
//
// Searching for files in REALTIME mode.
//
//======================================================================
 
///////////// max_realtime_data_age_secs //////////////
//
// Maximum age of realtime data (secs).
//
// REALTIME mode only. Only data less old than this will be used.
//
//
// Type: int
//

max_realtime_data_age_secs = 300;

///////////// latest_data_info_avail //////////////////
//
// Is _latest_data_info file available?.
//
// REALTIME mode only. If TRUE, will watch the latest_data_info file. If 
//   FALSE, will scan the input directory for new files.
//
//
// Type: boolean
//

latest_data_info_avail = TRUE;

///////////// search_recursively //////////////////////
//
// Option to recurse to subdirectories while looking for new files.
//
// REALTIME mode only. If TRUE, all subdirectories with ages less than 
//   max_dir_age will be searched. This may take considerable CPU, so be 
//   careful in its use. Only applies if latest_data_info_avail is FALSE.
//
//
// Type: boolean
//

search_recursively = TRUE;

///////////// max_recursion_depth /////////////////////
//
// Maximum depth for recursive directory scan.
//
// REALTIME mode only. Only applies search_recursively is TRUE. This is 
//   the max depth, below input_dir, to which the recursive directory 
//   search will be carried out. A depth of 0 will search the top-level 
//   directory only. A depth of 1 will search the level below the top 
//   directory, etc.
//
//
// Type: int
//

max_recursion_depth = 5;

///////////// wait_between_checks /////////////////////
//
// Sleep time between checking directory for input - secs.
//
// REALTIME mode only. If a directory is large and files do not arrive 
//   frequently, set this to a higher value to reduce the CPU load from 
//   checking the directory. Only applies if latest_data_info_avail is 
//   FALSE.
//
// Minimum val: 1
//
// Type: int
//

wait_between_checks = 2;

///////////// file_quiescence /////////////////////////
//
// File quiescence when checking for files - secs.
//
// REALTIME mode only. This allows you to make sure that a file coming 
//   from a remote machine is complete before reading it. Only applies if 
//   latest_data_info_avail is FALSE.
//
//
// Type: int
//

file_quiescence = 5;

///////////// search_ext //////////////////////////////
//
// File name extension.
//
// REALTIME mode only. If set, only files with this extension will be 
//   processed.
//
//
// Type: string
//

search_ext = "";

//======================================================================
//
// Converting MPD NetCDF Files.
//
//======================================================================
 
///////////// n_samples_field_name ////////////////////
//
// Field name for n_samples field.
//
// This will be used to fill in n_samples. If empty, it will not be 
//   used.
//
//
// Type: string
//

n_samples_field_name = "WVOnline_LaserShotCount";

///////////// include_qualifier_fields ////////////////
//
// Option to include the qualifier fields.
//
// If true, (time)-based fields will be included as qualifier fields.
//
//
// Type: boolean
//

include_qualifier_fields = TRUE;

///////////// qualifier_fields ////////////////////////
//
// Details of qualifier fields to be included in output data set. 
//   Applies if specify_qualifier_fields is true.
//
// If the output_name is not specified, the input name is used 
//   unchanged. If the standard_name is not specified, the standard name 
//   attribute will be omitted. If units are not specified, the units from 
//   the input file will be used.
//
//
// Type: struct
//   typedef struct {
//      string mpd_name;
//      string output_name;
//      string cf_standard_name;
//      string units;
//   }
//
// 1D array - variable length.
//

qualifier_fields = {
  {
    mpd_name = "Surface_Temperature",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "Surface_Pressure",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "Surface_RelHum",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "HSRLCombined_LaserShotCount",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "HSRLMolecular_LaserShotCount",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "WVOffline_LaserShotCount",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "WVOnline_LaserShotCount",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "HSRLCombined_nRangeBins",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "HSRLMolecular_nRangeBins",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "WVOffline_nRangeBins",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
  ,
  {
    mpd_name = "WVOnline_nRangeBins",
    output_name = "",
    cf_standard_name = "",
    units = ""
  }
};

///////////// mpd_fields //////////////////////////////
//
// Details of fields to be included in output data set.
//
// If the output_name is not specified, the input name is used 
//   unchanged. If the standard_name is not specified, the standard name 
//   attribute will be omitted. If units are not specified, the units from 
//   the input file will be used. If the mask_field_name is specified the 
//   mask field will be read in and used to mask out bad data in the 
//   output field. If the mask field name is empty no mask will be 
//   applied.
//
//
// Type: struct
//   typedef struct {
//      string mpd_name;
//      string output_name;
//      string cf_standard_name;
//      string units;
//      string mask_field_name;
//      output_encoding_t output_encoding;
//        Options:
//          OUTPUT_ENCODING_ASIS
//          OUTPUT_ENCODING_FLOAT64
//          OUTPUT_ENCODING_FLOAT32
//          OUTPUT_ENCODING_INT32
//          OUTPUT_ENCODING_INT16
//   }
//
// 1D array - variable length.
//

mpd_fields = {
  {
    mpd_name = "Absolute_Humidity",
    output_name = "Absolute_Humidity",
    cf_standard_name = "absolute_humidity",
    units = "",
    mask_field_name = "Absolute_Humidity_mask",
    output_encoding = OUTPUT_ENCODING_FLOAT32
  }
  ,
  {
    mpd_name = "Aerosol_Backscatter_Coefficient",
    output_name = "Aerosol_Backscatter_Coefficient",
    cf_standard_name = "aerosol_backscatter_coefficient",
    units = "",
    mask_field_name = "Aerosol_Backscatter_Coefficient_mask",
    output_encoding = OUTPUT_ENCODING_FLOAT32
  }
  ,
  {
    mpd_name = "Backscatter_Ratio",
    output_name = "Backscatter_Ratio",
    cf_standard_name = "backscatter_ratio",
    units = "",
    mask_field_name = "Backscatter_Ratio_mask",
    output_encoding = OUTPUT_ENCODING_FLOAT32
  }
  ,
  {
    mpd_name = "HSRLMolecular_MolecularBackscatter",
    output_name = "HSRLMolecular_MolecularBackscatter",
    cf_standard_name = "molecular_backscatter",
    units = "",
    mask_field_name = "",
    output_encoding = OUTPUT_ENCODING_FLOAT32
  }
};

//======================================================================
//
// READING TEMPERATURE AND PRESSURE PROFILE FROM MODEL FILES.
//
//======================================================================
 
///////////// read_temp_and_pressure_profile_from_model_files 
//
// Option to read temperature and pressure profiles from model files.
//
// The model output has been converted into MDV/NetCDF, with temperature 
//   and pressure fields on constant height vlevels. Vlevel units are km.
//
//
// Type: boolean
//

read_temp_and_pressure_profile_from_model_files = FALSE;

///////////// model_temperature_field_name ////////////
//
// Name of temperature field in model data.
//
//
// Type: string
//

model_temperature_field_name = "TMP";

///////////// temperature_profile_units ///////////////
//
// Units for temperature profile data.
//
//
// Type: enum
// Options:
//     DEGREES_CELCIUS
//     DEGREES_KELVIN
//

temperature_profile_units = DEGREES_CELCIUS;

///////////// model_pressure_field_name ///////////////
//
// Name of pressure field in model data.
//
//
// Type: string
//

model_pressure_field_name = "Pressure";

///////////// pressure_profile_units //////////////////
//
// Units for pressure profile data.
//
//
// Type: enum
// Options:
//     PA
//     HPA
//

pressure_profile_units = HPA;

///////////// model_profile_mdv_data_url //////////////
//
// Location for model data for temp and pressure profile.
//
// Data is in MDV or CF NetCDF format.
//
//
// Type: string
//

model_profile_mdv_data_url = "$(DATA_DIR)/mdv/gfs";

///////////// model_profile_search_margin_secs ////////
//
// The search margin when looking for suitable model data (secs).
//
// If a data file has previously been read, within this search margin, 
//   then that file is used again.
//
//
// Type: int
//

model_profile_search_margin_secs = 7200;

//======================================================================
//
// OUTPUT OPTIONS FOR CfRadial FILES.
//
//======================================================================
 
///////////// instrument_name /////////////////////////
//
// Instrument name.
//
// See override_instrument_name.
//
//
// Type: string
//

instrument_name = "MPD05";

///////////// site_name ///////////////////////////////
//
// Site name.
//
// See override_site_name.
//
//
// Type: string
//

site_name = "CSU";

//======================================================================
//
// WRITING DATA TO OUTPUT DIRECTORY.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Output directory path.
//
// Files will be written to this directory.
//
//
// Type: string
//

output_dir = "$(HOME)/data/mpd/cfradial/mpd05";

///////////// output_filename_mode ////////////////////
//
// Mode for computing output file name.
//
// START_AND_END_TIMES: include both start and end times in file name. 
//   START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: 
//   include only end time in file name. SPECIFY_FILE_NAME: file of this 
//   name will be written to output_dir.
//
//
// Type: enum
// Options:
//     START_AND_END_TIMES
//     START_TIME_ONLY
//     END_TIME_ONLY
//     SPECIFY_FILE_NAME
//

output_filename_mode = START_AND_END_TIMES;

///////////// output_filename_prefix //////////////////
//
// Optional prefix for output filename.
//
// If empty, the standard prefix will be used.
//
//
// Type: string
//

output_filename_prefix = "";

///////////// include_instrument_name_in_file_name ////
//
// Option to include the instrument name in the file name.
//
// Default is true. Only applies to CfRadial files. If true, the 
//   instrument name will be included just before the volume number in the 
//   output file name.
//
//
// Type: boolean
//

include_instrument_name_in_file_name = TRUE;

///////////// include_subsecs_in_file_name ////////////
//
// Option to include sub-seconds in date-time part of file name.
//
// Default is true. Only applies to CfRadial files. If true, the 
//   millisecs of the start and end time will be included in the file 
//   name.
//
//
// Type: boolean
//

include_subsecs_in_file_name = TRUE;

///////////// use_hyphen_in_file_name_datetime_part ///
//
// Option to use a hyphen between date and time in filename.
//
// Default is false. Only applies to CfRadial files. Normally an 
//   underscore is used.
//
//
// Type: boolean
//

use_hyphen_in_file_name_datetime_part = FALSE;

///////////// output_filename /////////////////////////
//
// Name of output file.
//
// Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of 
//   this name will be written to output_dir.
//
//
// Type: string
//

output_filename = "cfradial.test.nc";

///////////// append_day_dir_to_output_dir ////////////
//
// Add the day directory to the output directory.
//
// Path will be output_dir/yyyymmdd/filename.
//
//
// Type: boolean
//

append_day_dir_to_output_dir = TRUE;

///////////// append_year_dir_to_output_dir ///////////
//
// Add the year directory to the output directory.
//
// Path will be output_dir/yyyy/yyyymmdd/filename.
//
//
// Type: boolean
//

append_year_dir_to_output_dir = FALSE;

///////////// write_latest_data_info //////////////////
//
// Option to write out _latest_data_info files.
//
// If true, the _latest_data_info files will be written after the 
//   converted file is written.
//
//
// Type: boolean
//

write_latest_data_info = FALSE;

//======================================================================
//
// OPTION TO OVERRIDE SELECTED GLOBAL ATTRIBUTES.
//
// Applies to CfRadial output files only.
//
//======================================================================
 
///////////// title ///////////////////////////////////
//
// Option to set the title global attribute.
//
// If empty, no effect. If not empty, this string is used to set the 
//   title attribute.
//
//
// Type: string
//

title = "MPD";

///////////// institution /////////////////////////////
//
// Option to set the institution global attribute.
//
// If empty, no effect. If not empty, this string is used to set the 
//   institution attribute.
//
//
// Type: string
//

institution = "NCAR/EOL/RSF";

///////////// references //////////////////////////////
//
// Option to set the references global attribute.
//
// If empty, no effect. If not empty, this string is used to set the 
//   references attribute.
//
//
// Type: string
//

references = "";

///////////// source_override /////////////////////////
//
// Option to override the project global attribute.
//
// If empty, the Project global attribute in the file will be used. If 
//   not empty, this string is used to override the Project attribute.
//
//
// Type: string
//

source_override = "";

///////////// history_override ////////////////////////
//
// Option to override the history global attribute.
//
// If empty, we will use the history attribute in the file. If not 
//   empty, this string is used to override the history attribute.
//
//
// Type: string
//

history_override = "";

///////////// comment_override ////////////////////////
//
// Option to override the comment global attribute.
//
// If empty, the description global attribute will be used. If not 
//   empty, this string is used to override the description attribute.
//
//
// Type: string
//

comment_override = "";

///////////// author //////////////////////////////////
//
// Set the author global attribute.
//
//
// Type: string
//

author = "NCAR/EOL/RSF";

