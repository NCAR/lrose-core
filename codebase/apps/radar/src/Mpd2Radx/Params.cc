/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Mpd2Radx
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Reads MPD-style Netcdf data files, and converts to a standard CfRadial.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file.  In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("Searching for files in REALTIME mode");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("REALTIME mode only. Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_avail");
    tt->descr = tdrpStrDup("Is _latest_data_info file available?");
    tt->help = tdrpStrDup("REALTIME mode only. If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.");
    tt->val_offset = (char *) &latest_data_info_avail - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'search_recursively'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("search_recursively");
    tt->descr = tdrpStrDup("Option to recurse to subdirectories while looking for new files.");
    tt->help = tdrpStrDup("REALTIME mode only. If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &search_recursively - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_recursion_depth'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_recursion_depth");
    tt->descr = tdrpStrDup("Maximum depth for recursive directory scan.");
    tt->help = tdrpStrDup("REALTIME mode only. Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.");
    tt->val_offset = (char *) &max_recursion_depth - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'wait_between_checks'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wait_between_checks");
    tt->descr = tdrpStrDup("Sleep time between checking directory for input - secs.");
    tt->help = tdrpStrDup("REALTIME mode only. If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &wait_between_checks - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'file_quiescence'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("file_quiescence");
    tt->descr = tdrpStrDup("File quiescence when checking for files - secs.");
    tt->help = tdrpStrDup("REALTIME mode only. This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &file_quiescence - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("REALTIME mode only. If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("Converting MPD NetCDF Files");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'n_samples_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("n_samples_field_name");
    tt->descr = tdrpStrDup("Field name for n_samples field.");
    tt->help = tdrpStrDup("This will be used to fill in n_samples. If empty, it will not be used.");
    tt->val_offset = (char *) &n_samples_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("WVOnline_LaserShotCount");
    tt++;
    
    // Parameter 'include_qualifier_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_qualifier_fields");
    tt->descr = tdrpStrDup("Option to include the qualifier fields.");
    tt->help = tdrpStrDup("If true, (time)-based fields will be included as qualifier fields.");
    tt->val_offset = (char *) &include_qualifier_fields - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'qualifier_fields'
    // ctype is '_qual_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("qualifier_fields");
    tt->descr = tdrpStrDup("Details of qualifier fields to be included in output data set. Applies if specify_qualifier_fields is true.");
    tt->help = tdrpStrDup("If the output_name is not specified, the input name is used unchanged. If the standard_name is not specified, the standard name attribute will be omitted. If units are not specified, the units from the input file will be used.");
    tt->array_offset = (char *) &_qualifier_fields - &_start_;
    tt->array_n_offset = (char *) &qualifier_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(qual_field_t);
    tt->array_n = 8;
    tt->struct_def.name = tdrpStrDup("qual_field_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("mpd_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_qualifier_fields->mpd_name - (char *) _qualifier_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_qualifier_fields->output_name - (char *) _qualifier_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("cf_standard_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_qualifier_fields->cf_standard_name - (char *) _qualifier_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("units");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_qualifier_fields->units - (char *) _qualifier_fields;
    tt->n_struct_vals = 32;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("HSRLCombined_LaserShotCount");
      tt->struct_vals[1].s = tdrpStrDup("");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].s = tdrpStrDup("");
      tt->struct_vals[4].s = tdrpStrDup("HSRLMolecular_LaserShotCount");
      tt->struct_vals[5].s = tdrpStrDup("");
      tt->struct_vals[6].s = tdrpStrDup("");
      tt->struct_vals[7].s = tdrpStrDup("");
      tt->struct_vals[8].s = tdrpStrDup("WVOffline_LaserShotCount");
      tt->struct_vals[9].s = tdrpStrDup("");
      tt->struct_vals[10].s = tdrpStrDup("");
      tt->struct_vals[11].s = tdrpStrDup("");
      tt->struct_vals[12].s = tdrpStrDup("WVOnline_LaserShotCount");
      tt->struct_vals[13].s = tdrpStrDup("");
      tt->struct_vals[14].s = tdrpStrDup("");
      tt->struct_vals[15].s = tdrpStrDup("");
      tt->struct_vals[16].s = tdrpStrDup("HSRLCombined_nRangeBins");
      tt->struct_vals[17].s = tdrpStrDup("");
      tt->struct_vals[18].s = tdrpStrDup("");
      tt->struct_vals[19].s = tdrpStrDup("");
      tt->struct_vals[20].s = tdrpStrDup("HSRLMolecular_nRangeBins");
      tt->struct_vals[21].s = tdrpStrDup("");
      tt->struct_vals[22].s = tdrpStrDup("");
      tt->struct_vals[23].s = tdrpStrDup("");
      tt->struct_vals[24].s = tdrpStrDup("WVOffline_nRangeBins");
      tt->struct_vals[25].s = tdrpStrDup("");
      tt->struct_vals[26].s = tdrpStrDup("");
      tt->struct_vals[27].s = tdrpStrDup("");
      tt->struct_vals[28].s = tdrpStrDup("WVOnline_nRangeBins");
      tt->struct_vals[29].s = tdrpStrDup("");
      tt->struct_vals[30].s = tdrpStrDup("");
      tt->struct_vals[31].s = tdrpStrDup("");
    tt++;
    
    // Parameter 'mpd_fields'
    // ctype is '_mpd_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("mpd_fields");
    tt->descr = tdrpStrDup("Details of fields to be included in output data set.");
    tt->help = tdrpStrDup("If the output_name is not specified, the input name is used unchanged. If the standard_name is not specified, the standard name attribute will be omitted. If units are not specified, the units from the input file will be used. If the mask_field_name is specified the mask field will be read in and used to mask out bad data in the output field. If the mask field name is empty no mask will be applied.");
    tt->array_offset = (char *) &_mpd_fields - &_start_;
    tt->array_n_offset = (char *) &mpd_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(mpd_field_t);
    tt->array_n = 4;
    tt->struct_def.name = tdrpStrDup("mpd_field_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("mpd_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_mpd_fields->mpd_name - (char *) _mpd_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_mpd_fields->output_name - (char *) _mpd_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("cf_standard_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_mpd_fields->cf_standard_name - (char *) _mpd_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("units");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_mpd_fields->units - (char *) _mpd_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("mask_field_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_mpd_fields->mask_field_name - (char *) _mpd_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("output_encoding");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_mpd_fields->output_encoding - (char *) _mpd_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[5].enum_def.nfields = 5;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_ASIS");
        tt->struct_def.fields[5].enum_def.fields[0].val = OUTPUT_ENCODING_ASIS;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_FLOAT64");
        tt->struct_def.fields[5].enum_def.fields[1].val = OUTPUT_ENCODING_FLOAT64;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_FLOAT32");
        tt->struct_def.fields[5].enum_def.fields[2].val = OUTPUT_ENCODING_FLOAT32;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
        tt->struct_def.fields[5].enum_def.fields[3].val = OUTPUT_ENCODING_INT32;
        tt->struct_def.fields[5].enum_def.fields[4].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
        tt->struct_def.fields[5].enum_def.fields[4].val = OUTPUT_ENCODING_INT16;
    tt->n_struct_vals = 24;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("Absolute_Humidity");
      tt->struct_vals[1].s = tdrpStrDup("Absolute_Humidity");
      tt->struct_vals[2].s = tdrpStrDup("absolute_humidity");
      tt->struct_vals[3].s = tdrpStrDup("");
      tt->struct_vals[4].s = tdrpStrDup("Absolute_Humidity_mask");
      tt->struct_vals[5].e = OUTPUT_ENCODING_FLOAT32;
      tt->struct_vals[6].s = tdrpStrDup("Aerosol_Backscatter_Coefficient");
      tt->struct_vals[7].s = tdrpStrDup("Aerosol_Backscatter_Coefficient");
      tt->struct_vals[8].s = tdrpStrDup("aerosol_backscatter_coefficient");
      tt->struct_vals[9].s = tdrpStrDup("");
      tt->struct_vals[10].s = tdrpStrDup("Aerosol_Backscatter_Coefficient_mask");
      tt->struct_vals[11].e = OUTPUT_ENCODING_FLOAT32;
      tt->struct_vals[12].s = tdrpStrDup("Backscatter_Ratio");
      tt->struct_vals[13].s = tdrpStrDup("Backscatter_Ratio");
      tt->struct_vals[14].s = tdrpStrDup("backscatter_ratio");
      tt->struct_vals[15].s = tdrpStrDup("");
      tt->struct_vals[16].s = tdrpStrDup("Backscatter_Ratio_mask");
      tt->struct_vals[17].e = OUTPUT_ENCODING_FLOAT32;
      tt->struct_vals[18].s = tdrpStrDup("HSRLMolecular_MolecularBackscatter");
      tt->struct_vals[19].s = tdrpStrDup("HSRLMolecular_MolecularBackscatter");
      tt->struct_vals[20].s = tdrpStrDup("molecular_backscatter");
      tt->struct_vals[21].s = tdrpStrDup("");
      tt->struct_vals[22].s = tdrpStrDup("");
      tt->struct_vals[23].e = OUTPUT_ENCODING_FLOAT32;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("READING TEMPERATURE AND PRESSURE PROFILE FROM MODEL FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_temp_and_pressure_profile_from_model_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_temp_and_pressure_profile_from_model_files");
    tt->descr = tdrpStrDup("Option to read temperature and pressure profiles from model files.");
    tt->help = tdrpStrDup("The model output has been converted into MDV/NetCDF, with temperature and pressure fields on constant height vlevels. Vlevel units are km.");
    tt->val_offset = (char *) &read_temp_and_pressure_profile_from_model_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'model_temperature_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("model_temperature_field_name");
    tt->descr = tdrpStrDup("Name of temperature field in model data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &model_temperature_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("TMP");
    tt++;
    
    // Parameter 'temperature_profile_units'
    // ctype is '_temperature_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("temperature_profile_units");
    tt->descr = tdrpStrDup("Units for temperature profile data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &temperature_profile_units - &_start_;
    tt->enum_def.name = tdrpStrDup("temperature_units_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEGREES_CELCIUS");
      tt->enum_def.fields[0].val = DEGREES_CELCIUS;
      tt->enum_def.fields[1].name = tdrpStrDup("DEGREES_KELVIN");
      tt->enum_def.fields[1].val = DEGREES_KELVIN;
    tt->single_val.e = DEGREES_CELCIUS;
    tt++;
    
    // Parameter 'model_pressure_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("model_pressure_field_name");
    tt->descr = tdrpStrDup("Name of pressure field in model data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &model_pressure_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("Pressure");
    tt++;
    
    // Parameter 'pressure_profile_units'
    // ctype is '_pressure_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("pressure_profile_units");
    tt->descr = tdrpStrDup("Units for pressure profile data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &pressure_profile_units - &_start_;
    tt->enum_def.name = tdrpStrDup("pressure_units_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PA");
      tt->enum_def.fields[0].val = PA;
      tt->enum_def.fields[1].name = tdrpStrDup("HPA");
      tt->enum_def.fields[1].val = HPA;
    tt->single_val.e = HPA;
    tt++;
    
    // Parameter 'model_profile_mdv_data_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("model_profile_mdv_data_url");
    tt->descr = tdrpStrDup("Location for model data for temp and pressure profile.");
    tt->help = tdrpStrDup("Data is in MDV or CF NetCDF format");
    tt->val_offset = (char *) &model_profile_mdv_data_url - &_start_;
    tt->single_val.s = tdrpStrDup("$(DATA_DIR)/mdv/gfs");
    tt++;
    
    // Parameter 'model_profile_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("model_profile_search_margin_secs");
    tt->descr = tdrpStrDup("The search margin when looking for suitable model data (secs).");
    tt->help = tdrpStrDup("If a data file has previously been read, within this search margin, then that file is used again.");
    tt->val_offset = (char *) &model_profile_search_margin_secs - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("OUTPUT OPTIONS FOR CfRadial FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instrument_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instrument_name");
    tt->descr = tdrpStrDup("Instrument name.");
    tt->help = tdrpStrDup("See override_instrument_name.");
    tt->val_offset = (char *) &instrument_name - &_start_;
    tt->single_val.s = tdrpStrDup("unknown");
    tt++;
    
    // Parameter 'site_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_name");
    tt->descr = tdrpStrDup("Site name.");
    tt->help = tdrpStrDup("See override_site_name.");
    tt->val_offset = (char *) &site_name - &_start_;
    tt->single_val.s = tdrpStrDup("unknown");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("WRITING DATA TO OUTPUT DIRECTORY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/mpd_output");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name. SPECIFY_FILE_NAME: file of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
      tt->enum_def.fields[3].name = tdrpStrDup("SPECIFY_FILE_NAME");
      tt->enum_def.fields[3].val = SPECIFY_FILE_NAME;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'output_filename_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename_prefix");
    tt->descr = tdrpStrDup("Optional prefix for output filename.");
    tt->help = tdrpStrDup("If empty, the standard prefix will be used.");
    tt->val_offset = (char *) &output_filename_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'include_instrument_name_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_instrument_name_in_file_name");
    tt->descr = tdrpStrDup("Option to include the instrument name in the file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the instrument name will be included just before the volume number in the output file name.");
    tt->val_offset = (char *) &include_instrument_name_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'include_subsecs_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_subsecs_in_file_name");
    tt->descr = tdrpStrDup("Option to include sub-seconds in date-time part of file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the millisecs of the start and end time will be included in the file name.");
    tt->val_offset = (char *) &include_subsecs_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'use_hyphen_in_file_name_datetime_part'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_hyphen_in_file_name_datetime_part");
    tt->descr = tdrpStrDup("Option to use a hyphen between date and time in filename.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. Normally an underscore is used.");
    tt->val_offset = (char *) &use_hyphen_in_file_name_datetime_part - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename");
    tt->descr = tdrpStrDup("Name of output file.");
    tt->help = tdrpStrDup("Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename - &_start_;
    tt->single_val.s = tdrpStrDup("cfradial.test.nc");
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_latest_data_info'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_latest_data_info");
    tt->descr = tdrpStrDup("Option to write out _latest_data_info files.");
    tt->help = tdrpStrDup("If true, the _latest_data_info files will be written after the converted file is written.");
    tt->val_offset = (char *) &write_latest_data_info - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE SELECTED GLOBAL ATTRIBUTES");
    tt->comment_text = tdrpStrDup("Applies to CfRadial output files only.");
    tt++;
    
    // Parameter 'title'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("title");
    tt->descr = tdrpStrDup("Option to set the title global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to set the title attribute.");
    tt->val_offset = (char *) &title - &_start_;
    tt->single_val.s = tdrpStrDup("MPD");
    tt++;
    
    // Parameter 'institution'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("institution");
    tt->descr = tdrpStrDup("Option to set the institution global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to set the institution attribute.");
    tt->val_offset = (char *) &institution - &_start_;
    tt->single_val.s = tdrpStrDup("NCAR/EOL/RSF");
    tt++;
    
    // Parameter 'references'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("references");
    tt->descr = tdrpStrDup("Option to set the references global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to set the references attribute.");
    tt->val_offset = (char *) &references - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'source_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("source_override");
    tt->descr = tdrpStrDup("Option to override the project global attribute.");
    tt->help = tdrpStrDup("If empty, the Project global attribute in the file will be used. If not empty, this string is used to override the Project attribute.");
    tt->val_offset = (char *) &source_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'history_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("history_override");
    tt->descr = tdrpStrDup("Option to override the history global attribute.");
    tt->help = tdrpStrDup("If empty, we will use the history attribute in the file. If not empty, this string is used to override the history attribute.");
    tt->val_offset = (char *) &history_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'comment_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("comment_override");
    tt->descr = tdrpStrDup("Option to override the comment global attribute.");
    tt->help = tdrpStrDup("If empty, the description global attribute will be used. If not empty, this string is used to override the description attribute.");
    tt->val_offset = (char *) &comment_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'author'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("author");
    tt->descr = tdrpStrDup("Set the author global attribute.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &author - &_start_;
    tt->single_val.s = tdrpStrDup("NCAR/EOL/RSF");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
