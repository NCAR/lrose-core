/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program DsrGrabber
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DsrGrabber program");
    tt->comment_text = tdrpStrDup("DsrGrabber reads an input FMQ containing radar data, and writes out summary data in various ASCII formats.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'monitor_input'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("monitor_input");
    tt->descr = tdrpStrDup("Option to monitor the input data stream.");
    tt->help = tdrpStrDup("If TRUE, a line will be printed to stderr for each beam received.");
    tt->val_offset = (char *) &monitor_input - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'radar_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radar_name");
    tt->descr = tdrpStrDup("Name of radar");
    tt->help = tdrpStrDup("Used in labelling file name.");
    tt->val_offset = (char *) &radar_name - &_start_;
    tt->single_val.s = tdrpStrDup("cp2_s");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_mode'
    // ctype is '_input_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_mode");
    tt->descr = tdrpStrDup("Input mode - files or DsRadar FMQ.");
    tt->help = tdrpStrDup("If FMQ_INPUT, the application will read the beam data from a file message queue. If FILE_INPUT, the application will process beams in a set of files.");
    tt->val_offset = (char *) &input_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("input_mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FILE_INPUT");
      tt->enum_def.fields[0].val = FILE_INPUT;
      tt->enum_def.fields[1].name = tdrpStrDup("FMQ_INPUT");
      tt->enum_def.fields[1].val = FMQ_INPUT;
    tt->single_val.e = FMQ_INPUT;
    tt++;
    
    // Parameter 'input_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_url");
    tt->descr = tdrpStrDup("Input URL for S-band data via FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmq/Iq2Dsr_s");
    tt++;
    
    // Parameter 'seek_to_end_of_input'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("seek_to_end_of_input");
    tt->descr = tdrpStrDup("Option to seek to the end of the input FMQ.");
    tt->help = tdrpStrDup("If TRUE, the program will seek to the end of the fmq and only read in new data. If FALSE, it will start reading from the beginning of the FMQ.");
    tt->val_offset = (char *) &seek_to_end_of_input - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("OUTPUT FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'timestamp'
    // ctype is '_timestamp_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("timestamp");
    tt->descr = tdrpStrDup("Timestamping files");
    tt->help = tdrpStrDup("Timestamp to start, middle or end of volume.");
    tt->val_offset = (char *) &timestamp - &_start_;
    tt->enum_def.name = tdrpStrDup("timestamp_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIMESTAMP_VOL_START");
      tt->enum_def.fields[0].val = TIMESTAMP_VOL_START;
      tt->enum_def.fields[1].name = tdrpStrDup("TIMESTAMP_VOL_MID");
      tt->enum_def.fields[1].val = TIMESTAMP_VOL_MID;
      tt->enum_def.fields[2].name = tdrpStrDup("TIMESTAMP_VOL_END");
      tt->enum_def.fields[2].val = TIMESTAMP_VOL_END;
    tt->single_val.e = TIMESTAMP_VOL_START;
    tt++;
    
    // Parameter 'min_beams_per_vol'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_beams_per_vol");
    tt->descr = tdrpStrDup("Minimum number of beams in a volume.");
    tt->help = tdrpStrDup("If fewer beams are found in a volume, it is ignored.");
    tt->val_offset = (char *) &min_beams_per_vol - &_start_;
    tt->single_val.i = 200;
    tt++;
    
    // Parameter 'max_beams_per_vol'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_beams_per_vol");
    tt->descr = tdrpStrDup("Maximum number of beams in a volume.");
    tt->help = tdrpStrDup("Normally a file is saved at the end of each volume. However, if an end-of-volume flag is not detected, the file will be written when this number of beams has been received.");
    tt->val_offset = (char *) &max_beams_per_vol - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("STATS DETAILS");
    tt->comment_text = tdrpStrDup("Stats are computed over a range of gates, for specified fields.");
    tt++;
    
    // Parameter 'start_gate'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("start_gate");
    tt->descr = tdrpStrDup("Start gate for analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &start_gate - &_start_;
    tt->single_val.i = 50;
    tt++;
    
    // Parameter 'n_gates'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_gates");
    tt->descr = tdrpStrDup("Number of gates for analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &n_gates - &_start_;
    tt->single_val.i = 500;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("FIELD INFORMATION");
    tt->comment_text = tdrpStrDup("Translate fields from DSR input to UDP output.");
    tt++;
    
    // Parameter 'stats_fields'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("stats_fields");
    tt->descr = tdrpStrDup("Array of fields for which stats are computed.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_stats_fields - &_start_;
    tt->array_n_offset = (char *) &stats_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("DBMHC");
      tt->array_vals[1].s = tdrpStrDup("DBMVC");
    tt++;
    
    // Parameter 'compute_differences'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_differences");
    tt->descr = tdrpStrDup("Option to compute a difference field.");
    tt->help = tdrpStrDup("At least 2 fields must be defined in stats_fields.");
    tt->val_offset = (char *) &compute_differences - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'first_field_for_diff'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("first_field_for_diff");
    tt->descr = tdrpStrDup("Field name for first field in computing diff.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &first_field_for_diff - &_start_;
    tt->single_val.s = tdrpStrDup("DBMHC");
    tt++;
    
    // Parameter 'second_field_for_diff'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("second_field_for_diff");
    tt->descr = tdrpStrDup("Field name for second field in computing diff.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &second_field_for_diff - &_start_;
    tt->single_val.s = tdrpStrDup("DBMVC");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("BEAMS OUTPUT FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_beam_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_beam_files");
    tt->descr = tdrpStrDup("Option to write beams line-by-line to a beam file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_beam_files - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'beams_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("beams_output_dir");
    tt->descr = tdrpStrDup("Output directory for beams files.");
    tt->help = tdrpStrDup("Output file names will be time stamped.");
    tt->val_offset = (char *) &beams_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output/beams");
    tt++;
    
    // Parameter 'write_nlines_at_start_of_beam_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_nlines_at_start_of_beam_files");
    tt->descr = tdrpStrDup("Option to write the number of lines at the start of each beams file.");
    tt->help = tdrpStrDup("See beams_nlines_label.");
    tt->val_offset = (char *) &write_nlines_at_start_of_beam_files - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'beams_nlines_label'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("beams_nlines_label");
    tt->descr = tdrpStrDup("Label at start of beam file, showing number of lines in the file.");
    tt->help = tdrpStrDup("See write_nlines_at_start_of_beam_files.");
    tt->val_offset = (char *) &beams_nlines_label - &_start_;
    tt->single_val.s = tdrpStrDup("npoints = ");
    tt++;
    
    // Parameter 'beam_file_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("beam_file_ext");
    tt->descr = tdrpStrDup("File name extension for beam files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &beam_file_ext - &_start_;
    tt->single_val.s = tdrpStrDup("beams");
    tt++;
    
    // Parameter 'write_ldata_info_for_beam_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_ldata_info_for_beam_files");
    tt->descr = tdrpStrDup("Option to write _latest_data_info for beam files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_ldata_info_for_beam_files - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("GRID OUTPUT FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_grid_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_grid_files");
    tt->descr = tdrpStrDup("Option to write regular grid files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_grid_files - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'grid_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("grid_output_dir");
    tt->descr = tdrpStrDup("Output directory for grid files.");
    tt->help = tdrpStrDup("Output file names will be time stamped.");
    tt->val_offset = (char *) &grid_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output/grid");
    tt++;
    
    // Parameter 'grid_file_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("grid_file_ext");
    tt->descr = tdrpStrDup("File name extension for grid files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_file_ext - &_start_;
    tt->single_val.s = tdrpStrDup("grid");
    tt++;
    
    // Parameter 'write_dimensions_at_start_of_grid_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_dimensions_at_start_of_grid_files");
    tt->descr = tdrpStrDup("Option to write the number of elevations and azimuths at the start of each grid file.");
    tt->help = tdrpStrDup("See beams_nlines_label.");
    tt->val_offset = (char *) &write_dimensions_at_start_of_grid_files - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'grid_azimuths_label'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("grid_azimuths_label");
    tt->descr = tdrpStrDup("Label for azimuths at start of grid file.");
    tt->help = tdrpStrDup("Followed by 'min_az delta_az n_az'.");
    tt->val_offset = (char *) &grid_azimuths_label - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'grid_elevations_label'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("grid_elevations_label");
    tt->descr = tdrpStrDup("Label for elevation at start of grid file.");
    tt->help = tdrpStrDup("Followed by 'min_el delta_el n_el'.");
    tt->val_offset = (char *) &grid_elevations_label - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'sunprops_label'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sunprops_label");
    tt->descr = tdrpStrDup("Label for sunprops at start of grid file.");
    tt->help = tdrpStrDup("Followed by 'az_offset el_offset max_power quadratic_fit_power'.");
    tt->val_offset = (char *) &sunprops_label - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("GRID INFORMATION");
    tt->comment_text = tdrpStrDup("Applies to regular grid output option.");
    tt++;
    
    // Parameter 'grid_min_el'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_min_el");
    tt->descr = tdrpStrDup("Min elevation for regular grid (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_min_el - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_max_el'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_max_el");
    tt->descr = tdrpStrDup("Max elevation for regular grid (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_max_el - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'grid_min_az'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_min_az");
    tt->descr = tdrpStrDup("Min azimuth for regular grid (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_min_az - &_start_;
    tt->single_val.d = -20;
    tt++;
    
    // Parameter 'grid_max_az'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_max_az");
    tt->descr = tdrpStrDup("Max azimuth for regular grid (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_max_az - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'grid_delta_el'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_delta_el");
    tt->descr = tdrpStrDup("Delta elevation for regular grid (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_delta_el - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'grid_delta_az'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_delta_az");
    tt->descr = tdrpStrDup("Delta azimuth for regular grid (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &grid_delta_az - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'grid_el_max_diff'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_el_max_diff");
    tt->descr = tdrpStrDup("Max error for interpolating onto grid in elevation (deg).");
    tt->help = tdrpStrDup("We perform bi-linear interpolation onto the regular grid. This is the max difference, in elevation, for a point to be used in determining the interpolated value at  a grid location.");
    tt->val_offset = (char *) &grid_el_max_diff - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'grid_az_max_diff'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_az_max_diff");
    tt->descr = tdrpStrDup("Max error for interpolating onto grid in azimuth (deg).");
    tt->help = tdrpStrDup("We perform bi-linear interpolation onto the regular grid. This is the max difference, in azimuth, for a point to be used in determining the interpolated value at  a grid location.");
    tt->val_offset = (char *) &grid_az_max_diff - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'write_ldata_info_for_grid_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_ldata_info_for_grid_files");
    tt->descr = tdrpStrDup("Option to write _latest_data_info for grid files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_ldata_info_for_grid_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("SUNSCAN mode");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'compute_sun_relative_angles'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_sun_relative_angles");
    tt->descr = tdrpStrDup("Option to compute az/el angles relative to the sun position.");
    tt->help = tdrpStrDup("If TRUE, the application computes the sun position for the beam time, and then computes the az and el relative to the sun position.");
    tt->val_offset = (char *) &compute_sun_relative_angles - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'only_save_when_close_to_sun'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("only_save_when_close_to_sun");
    tt->descr = tdrpStrDup("Option to only save data when close to the sun.");
    tt->help = tdrpStrDup("If TRUE, the program will only consider beams which are close in angle to the sun.");
    tt->val_offset = (char *) &only_save_when_close_to_sun - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_sun_az_error'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_sun_az_error");
    tt->descr = tdrpStrDup("Max az error relative to the sun (deg).");
    tt->help = tdrpStrDup("See only_save_when_close_to_sun.");
    tt->val_offset = (char *) &max_sun_az_error - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'max_sun_el_error'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_sun_el_error");
    tt->descr = tdrpStrDup("Max el error relative to the sun (deg).");
    tt->help = tdrpStrDup("See only_save_when_close_to_sun.");
    tt->val_offset = (char *) &max_sun_el_error - &_start_;
    tt->single_val.d = 1.5;
    tt++;
    
    // Parameter 'compute_sun_properties'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_sun_properties");
    tt->descr = tdrpStrDup("Option to compute sun properties.");
    tt->help = tdrpStrDup("The following sun properties are computed for each field: (a) max power, (b) max power from parabolic fit, (c) offsets of measured centroid relative to theoretical sun position.");
    tt->val_offset = (char *) &compute_sun_properties - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sun_edge_below_peak_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sun_edge_below_peak_db");
    tt->descr = tdrpStrDup("Power of sun edge relative to the peak (dB).");
    tt->help = tdrpStrDup("The sun position is computed using the power at each point. Only powers within this margin of the peak power are used in the computation of the centroid.");
    tt->val_offset = (char *) &sun_edge_below_peak_db - &_start_;
    tt->single_val.d = 8;
    tt++;
    
    // Parameter 'write_sunprops_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_sunprops_files");
    tt->descr = tdrpStrDup("Option to write files with sun properties.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_sunprops_files - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sunprops_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sunprops_output_dir");
    tt->descr = tdrpStrDup("Output directory for sun properties files.");
    tt->help = tdrpStrDup("Output file names will be time stamped.");
    tt->val_offset = (char *) &sunprops_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output/sunprops");
    tt++;
    
    // Parameter 'sunprops_file_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sunprops_file_ext");
    tt->descr = tdrpStrDup("File name extension for sun properties files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sunprops_file_ext - &_start_;
    tt->single_val.s = tdrpStrDup("sunprops");
    tt++;
    
    // Parameter 'write_ldata_info_for_sunprops_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_ldata_info_for_sunprops_files");
    tt->descr = tdrpStrDup("Option to write _latest_data_info for sunprop files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_ldata_info_for_sunprops_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("RADAR LOCATION");
    tt->comment_text = tdrpStrDup("Used for computing sun position.");
    tt++;
    
    // Parameter 'radar_lat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_lat");
    tt->descr = tdrpStrDup("Latiitude of radar location (deg).");
    tt->help = tdrpStrDup("North is positive, South is negative.");
    tt->val_offset = (char *) &radar_lat - &_start_;
    tt->single_val.d = 39.9502;
    tt++;
    
    // Parameter 'radar_lon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_lon");
    tt->descr = tdrpStrDup("Longitude of radar location (deg).");
    tt->help = tdrpStrDup("East is positive, West is negative.");
    tt->val_offset = (char *) &radar_lon - &_start_;
    tt->single_val.d = -105.195;
    tt++;
    
    // Parameter 'radar_alt_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_alt_km");
    tt->descr = tdrpStrDup("Altitude of radar (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &radar_alt_km - &_start_;
    tt->single_val.d = 1.742;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
