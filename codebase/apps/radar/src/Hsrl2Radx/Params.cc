/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Hsrl2Radx
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Reads UW HSRL data files in CfRadial format, with range in ht MSL, and converts to a standard CfRadial, with range measured from the instrument instead of MSL.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME_FMQ, the program reads raw rays from an FMQ and writes output to an FMQ.  In REALTIME_FILE mode, the program waits for a new input file.  In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME_FMQ");
      tt->enum_def.fields[0].val = REALTIME_FMQ;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME_FILE");
      tt->enum_def.fields[1].val = REALTIME_FILE;
      tt->enum_def.fields[2].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[2].val = ARCHIVE;
      tt->enum_def.fields[3].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[3].val = FILELIST;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'input_fmq_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_path");
    tt->descr = tdrpStrDup("Path to input FMQ.");
    tt->help = tdrpStrDup("REATIME_FMQ mode only. The FMQ consists of 2 files, ??.buf and ??.stat. Specify only the root, not the extensions.");
    tt->val_offset = (char *) &input_fmq_path - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/hsrl_raw");
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("REALTIME_FILE mode only. Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_avail");
    tt->descr = tdrpStrDup("Is _latest_data_info file available?");
    tt->help = tdrpStrDup("REALTIME_FILE mode only. If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.");
    tt->val_offset = (char *) &latest_data_info_avail - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'search_recursively'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("search_recursively");
    tt->descr = tdrpStrDup("Option to recurse to subdirectories while looking for new files.");
    tt->help = tdrpStrDup("REALTIME_FILE mode only. If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &search_recursively - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_recursion_depth'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_recursion_depth");
    tt->descr = tdrpStrDup("Maximum depth for recursive directory scan.");
    tt->help = tdrpStrDup("REALTIME_FILE mode only. Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.");
    tt->val_offset = (char *) &max_recursion_depth - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'wait_between_checks'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wait_between_checks");
    tt->descr = tdrpStrDup("Sleep time between checking directory for input - secs.");
    tt->help = tdrpStrDup("REALTIME_FILE mode only. If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &wait_between_checks - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'file_quiescence'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("file_quiescence");
    tt->descr = tdrpStrDup("File quiescence when checking for files - secs.");
    tt->help = tdrpStrDup("REALTIME_FILE mode only. This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &file_quiescence - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("REALTIME_FILE mode only. If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE GATE GEOMETRY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_start_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_start_range");
    tt->descr = tdrpStrDup("Option to override the start range.");
    tt->help = tdrpStrDup("If true, the specified start range in this file will be used. If not, the start range in the data file will be used.");
    tt->val_offset = (char *) &override_start_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'start_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("start_range_km");
    tt->descr = tdrpStrDup("Specified start range (km).");
    tt->help = tdrpStrDup("See override_start_range.");
    tt->val_offset = (char *) &start_range_km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'override_gate_spacing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_gate_spacing");
    tt->descr = tdrpStrDup("Option to override the gate spacing.");
    tt->help = tdrpStrDup("If true, the specified gate spacing in this file will be used. If not, the gate spacing in the data file will be used.");
    tt->val_offset = (char *) &override_gate_spacing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'gate_spacing_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("gate_spacing_km");
    tt->descr = tdrpStrDup("Specified gate spacing (km).");
    tt->help = tdrpStrDup("See override_gate_spacing.");
    tt->val_offset = (char *) &gate_spacing_km - &_start_;
    tt->single_val.d = 0.0075;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("OPTION TO READ GEOREF DATA FROM AIRCRAFT SYSTEM");
    tt->comment_text = tdrpStrDup("If the georef data is available, it will be read in by AcGeoref2Spdb, and stored in an SPDB data base. We read it in from that location.");
    tt++;
    
    // Parameter 'read_georef_data_from_aircraft_system'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_georef_data_from_aircraft_system");
    tt->descr = tdrpStrDup("Option to override the instrument location.");
    tt->help = tdrpStrDup("If true, the location in this file will be used. If not, the location in the time series data will be used.");
    tt->val_offset = (char *) &read_georef_data_from_aircraft_system - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'georef_data_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("georef_data_spdb_url");
    tt->descr = tdrpStrDup("SPDB url for aircraft georef data.");
    tt->help = tdrpStrDup("Can take the form of a local directory path, or a full url of the form:\n\n\t'spdbp:://hostname::dir_path'\n\nIf the dir_path starts with '.' or '/', it specifies a relative or absolute path respectively. If not, it specifies a path relative to '$DATA_DIR'.");
    tt->val_offset = (char *) &georef_data_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/spdb/ac_georef/raf_1hz");
    tt++;
    
    // Parameter 'georef_data_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("georef_data_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin for finding georeference data (secs).");
    tt->help = tdrpStrDup("If no data is found within this time margin, we do not set the location.");
    tt->val_offset = (char *) &georef_data_search_margin_secs - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'correct_elevation_angle_for_roll'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("correct_elevation_angle_for_roll");
    tt->descr = tdrpStrDup("Option to correct the elevation angle for the aircraft roll angle.");
    tt->help = tdrpStrDup("If true, we adjust the elevation angle by subtracting the roll angle.");
    tt->val_offset = (char *) &correct_elevation_angle_for_roll - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("FIXED LOCATION PARAMETERS");
    tt->comment_text = tdrpStrDup("If not read from aircraft, need to set the instrument location from the config file.");
    tt++;
    
    // Parameter 'instrument_latitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("instrument_latitude_deg");
    tt->descr = tdrpStrDup("Instrument latitude (deg).");
    tt->help = tdrpStrDup("Applies if read_georef_data_from_aircraft_system is false.");
    tt->val_offset = (char *) &instrument_latitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'instrument_longitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("instrument_longitude_deg");
    tt->descr = tdrpStrDup("Instrument longitude (deg).");
    tt->help = tdrpStrDup("Applies if read_georef_data_from_aircraft_system is false.");
    tt->val_offset = (char *) &instrument_longitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'instrument_altitude_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("instrument_altitude_meters");
    tt->descr = tdrpStrDup("Instrument altitude (meters).");
    tt->help = tdrpStrDup("Applies if read_georef_data_from_aircraft_system is false.");
    tt->val_offset = (char *) &instrument_altitude_meters - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("OPTION TO SET RANGE RELATIVE TO INSTRUMENT - MSL CfRadial files only");
    tt->comment_text = tdrpStrDup("This applies to python-generated CfRadial files relative to MSL only");
    tt++;
    
    // Parameter 'set_range_relative_to_instrument'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_range_relative_to_instrument");
    tt->descr = tdrpStrDup("Option to convert from ht in MSL to range relative to instrument.");
    tt->help = tdrpStrDup("The HSRL CfRadial files have range stored in height MSL rather than range from the instrument. This option allows you to convert to distance from the instrument.");
    tt->val_offset = (char *) &set_range_relative_to_instrument - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'telescope_direction_is_up'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("telescope_direction_is_up");
    tt->descr = tdrpStrDup("Integer value for telescope direction is up.");
    tt->help = tdrpStrDup("This value indicates the telescope is pointing up. If the telescope_direction value is not equal to this value it is pointing down.");
    tt->val_offset = (char *) &telescope_direction_is_up - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("READING RAW NetCDF DATA FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'combine_bins_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("combine_bins_on_read");
    tt->descr = tdrpStrDup("Option to combine range gates on read.");
    tt->help = tdrpStrDup("If true, the specified number of range gates will be combined on read to create mean values with lower noisiness.");
    tt->val_offset = (char *) &combine_bins_on_read - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'n_bins_per_gate'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_bins_per_gate");
    tt->descr = tdrpStrDup("Number of bins to combine into a single gate.");
    tt->help = tdrpStrDup("In range, we will combine this number of gates to produce a data set with lower spatial resolution but less noiry data.");
    tt->val_offset = (char *) &n_bins_per_gate - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'raw_bin_start_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("raw_bin_start_range_km");
    tt->descr = tdrpStrDup("Start range to first bin (km).");
    tt->help = tdrpStrDup("Takes into account dead zone caused by digitizer starting before the pulse.");
    tt->val_offset = (char *) &raw_bin_start_range_km - &_start_;
    tt->single_val.d = -0.3;
    tt++;
    
    // Parameter 'raw_bin_spacing_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("raw_bin_spacing_km");
    tt->descr = tdrpStrDup("Spacing of raw bins (km).");
    tt->help = tdrpStrDup("The distance between the ray bins in km.");
    tt->val_offset = (char *) &raw_bin_spacing_km - &_start_;
    tt->single_val.d = 0.0075;
    tt++;
    
    // Parameter 'combined_hi_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("combined_hi_field_name");
    tt->descr = tdrpStrDup("Name of combined_hi field in netCDF file.");
    tt->help = tdrpStrDup("This name is also used for the field read in from the instrument raw FMQ in real-time");
    tt->val_offset = (char *) &combined_hi_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("combined_hi");
    tt++;
    
    // Parameter 'combined_lo_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("combined_lo_field_name");
    tt->descr = tdrpStrDup("Name of combined_lo field in netCDF file.");
    tt->help = tdrpStrDup("This name is also used for the field read in from the instrument raw FMQ in real-time");
    tt->val_offset = (char *) &combined_lo_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("combined_lo");
    tt++;
    
    // Parameter 'molecular_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("molecular_field_name");
    tt->descr = tdrpStrDup("Name of molecular field in netCDF file.");
    tt->help = tdrpStrDup("This name is also used for the field read in from the instrument raw FMQ in real-time");
    tt->val_offset = (char *) &molecular_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("molecular");
    tt++;
    
    // Parameter 'cross_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cross_field_name");
    tt->descr = tdrpStrDup("Name of cross field in netCDF file.");
    tt->help = tdrpStrDup("This name is also used for the field read in from the instrument raw FMQ in real-time");
    tt->val_offset = (char *) &cross_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("cross");
    tt++;
    
    // Parameter 'baseline_calibration_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("baseline_calibration_path");
    tt->descr = tdrpStrDup("location of baseline calibration file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &baseline_calibration_path - &_start_;
    tt->single_val.s = tdrpStrDup("/h/eol/brads/git/hsrl_configuration/projDir/calfiles/baseline_correction_20150601T0000.blc");
    tt++;
    
    // Parameter 'diff_default_geofile_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("diff_default_geofile_path");
    tt->descr = tdrpStrDup("location of diff_default_geofile calibration file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &diff_default_geofile_path - &_start_;
    tt->single_val.s = tdrpStrDup("/h/eol/brads/git/hsrl_configuration/projDir/calfiles/diff_default_geofile_20120201T0000.geo");
    tt++;
    
    // Parameter 'geofile_default_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("geofile_default_path");
    tt->descr = tdrpStrDup("location of geofile_default calibration file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &geofile_default_path - &_start_;
    tt->single_val.s = tdrpStrDup("/h/eol/brads/git/hsrl_configuration/projDir/calfiles/geofile_default_20150601T0000.geo");
    tt++;
    
    // Parameter 'afterpulse_default_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("afterpulse_default_path");
    tt->descr = tdrpStrDup("location of afterpulse_default calibration file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &afterpulse_default_path - &_start_;
    tt->single_val.s = tdrpStrDup("/h/eol/brads/git/hsrl_configuration/projDir/calfiles/afterpulse_default_20061001T0000.ap");
    tt++;
    
    // Parameter 'calvals_gvhsrl_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("calvals_gvhsrl_path");
    tt->descr = tdrpStrDup("location of calvals_gvhsrl calibration file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &calvals_gvhsrl_path - &_start_;
    tt->single_val.s = tdrpStrDup("/h/eol/brads/git/hsrl_configuration/projDir/calfiles/calvals_gvhsrl.txt");
    tt++;
    
    // Parameter 'combined_hi_dead_time_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("combined_hi_dead_time_name");
    tt->descr = tdrpStrDup("Name of combined_hi_dead_time field in CalVals file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &combined_hi_dead_time_name - &_start_;
    tt->single_val.s = tdrpStrDup("combined_hi_dead_time");
    tt++;
    
    // Parameter 'combined_lo_dead_time_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("combined_lo_dead_time_name");
    tt->descr = tdrpStrDup("Name of combined_lo_dead_time field in CalVals file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &combined_lo_dead_time_name - &_start_;
    tt->single_val.s = tdrpStrDup("combined_lo_dead_time");
    tt++;
    
    // Parameter 'cross_pol_dead_time_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cross_pol_dead_time_name");
    tt->descr = tdrpStrDup("Name of cross_pol_dead_time field in CalVals file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &cross_pol_dead_time_name - &_start_;
    tt->single_val.s = tdrpStrDup("cross_pol_dead_time");
    tt++;
    
    // Parameter 'molecular_dead_time_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("molecular_dead_time_name");
    tt->descr = tdrpStrDup("Name of molecular_dead_time field in CalVals file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &molecular_dead_time_name - &_start_;
    tt->single_val.s = tdrpStrDup("molecular_dead_time");
    tt++;
    
    // Parameter 'molecular_count_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("molecular_count_median_filter_len");
    tt->descr = tdrpStrDup("The molecular counts field is filtered using a median filter.");
    tt->help = tdrpStrDup("This is done prior to computing the background subtraction. Set the length to 1 for no filtering.");
    tt->val_offset = (char *) &molecular_count_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'bin_width_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("bin_width_name");
    tt->descr = tdrpStrDup("Name of binWidth field in CalVals file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &bin_width_name - &_start_;
    tt->single_val.s = tdrpStrDup("binwidth");
    tt++;
    
    // Parameter 'scan_adjustment_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("scan_adjustment_name");
    tt->descr = tdrpStrDup("Name of coefficient field in CalVals file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &scan_adjustment_name - &_start_;
    tt->single_val.s = tdrpStrDup("i2_scan_adjustment");
    tt++;
    
    // Parameter 'molecular_gain_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("molecular_gain_name");
    tt->descr = tdrpStrDup("Name of molecular gain in CalVals file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &molecular_gain_name - &_start_;
    tt->single_val.s = tdrpStrDup("molecular_gain");
    tt++;
    
    // Parameter 'ngates_for_background_correction'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ngates_for_background_correction");
    tt->descr = tdrpStrDup("The background correction uses data from the end of each ray.");
    tt->help = tdrpStrDup("This is the number of gates used to compute the background value. We compute the median value for these gates.");
    tt->val_offset = (char *) &ngates_for_background_correction - &_start_;
    tt->single_val.i = 100;
    tt++;
    
    // Parameter 'nrays_for_background_correction'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("nrays_for_background_correction");
    tt->descr = tdrpStrDup("The number of rays for computing the background correction.");
    tt->help = tdrpStrDup("We compute the minimum of the median values from the last n gates.");
    tt->val_offset = (char *) &nrays_for_background_correction - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'optical_depth_reference_range_m'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("optical_depth_reference_range_m");
    tt->descr = tdrpStrDup("Range to gate for the reference optical depth.");
    tt->help = tdrpStrDup("We use this to calibrate the optical depth. We compute a running mean of the measured optical depth for this range, and then adjust the measured values relative to the reference value.");
    tt->val_offset = (char *) &optical_depth_reference_range_m - &_start_;
    tt->single_val.d = 100;
    tt++;
    
    // Parameter 'optical_depth_n_reference_obs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("optical_depth_n_reference_obs");
    tt->descr = tdrpStrDup("Number of observations for computing the reference optical depth.");
    tt->help = tdrpStrDup("We compute a running mean to determine the reference optical depth.");
    tt->val_offset = (char *) &optical_depth_n_reference_obs - &_start_;
    tt->single_val.i = 50;
    tt++;
    
    // Parameter 'optical_depth_reference_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("optical_depth_reference_value");
    tt->descr = tdrpStrDup("Optical depth at the reference range.");
    tt->help = tdrpStrDup("See optical_depth_reference_range_m.");
    tt->val_offset = (char *) &optical_depth_reference_value - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'optical_depth_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("optical_depth_median_filter_len");
    tt->descr = tdrpStrDup("The optical depth field is filtered using a median filter.");
    tt->help = tdrpStrDup("This is done prior to computing the extinction coefficient. Set the length to 1 for no filtering.");
    tt->val_offset = (char *) &optical_depth_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'rate_censoring_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rate_censoring_threshold");
    tt->descr = tdrpStrDup("Threshold the rate fields below this value.");
    tt->help = tdrpStrDup("This helps to remove the noise from the system.");
    tt->val_offset = (char *) &rate_censoring_threshold - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'apply_speckle_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_speckle_filter");
    tt->descr = tdrpStrDup("Option to apply a speckle filter to the output data.");
    tt->help = tdrpStrDup("If the length of the good data, between gates with missing values, is less than this, the data in between is set to missing.");
    tt->val_offset = (char *) &apply_speckle_filter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'speckle_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("speckle_filter_len");
    tt->descr = tdrpStrDup("The length of the speckle filter.");
    tt->help = tdrpStrDup("If the length of the good data, between missing values, is less than this, the data is set to missing.");
    tt->val_offset = (char *) &speckle_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("READING NetCDF Files produced by Matt Haymann");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mhayman_combine_bins_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("mhayman_combine_bins_on_read");
    tt->descr = tdrpStrDup("Option to combine range gates on read.");
    tt->help = tdrpStrDup("If true, the specified number of range gates will be combined on read to create mean values with lower noisiness.");
    tt->val_offset = (char *) &mhayman_combine_bins_on_read - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'mhayman_n_bins_per_gate'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("mhayman_n_bins_per_gate");
    tt->descr = tdrpStrDup("Number of bins to combine into a single gate.");
    tt->help = tdrpStrDup("In range, we will combine this number of gates to produce a data set with lower spatial resolution but less noiry data.");
    tt->val_offset = (char *) &mhayman_n_bins_per_gate - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'mhayman_specify_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("mhayman_specify_fields");
    tt->descr = tdrpStrDup("Option to specify the fields to be handled.");
    tt->help = tdrpStrDup("If false, the app will try to identify the field in the data and read them all in as best it can.");
    tt->val_offset = (char *) &mhayman_specify_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'mhayman_fields'
    // ctype is '_mhayman_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("mhayman_fields");
    tt->descr = tdrpStrDup("Details of fields to be included in output data set.");
    tt->help = tdrpStrDup("If the output_name is not specified, the input name is used unchanged. If the standard_name is not specified, the standard name attribute will be omitted.");
    tt->array_offset = (char *) &_mhayman_fields - &_start_;
    tt->array_n_offset = (char *) &mhayman_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(mhayman_field_t);
    tt->array_n = 14;
    tt->struct_def.name = tdrpStrDup("mhayman_field_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_mhayman_fields->field_name - (char *) _mhayman_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("apply_mask");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_mhayman_fields->apply_mask - (char *) _mhayman_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("mask_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_mhayman_fields->mask_name - (char *) _mhayman_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("mask_valid_value");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_mhayman_fields->mask_valid_value - (char *) _mhayman_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("output_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_mhayman_fields->output_name - (char *) _mhayman_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("string");
      tt->struct_def.fields[5].fname = tdrpStrDup("cf_standard_name");
      tt->struct_def.fields[5].ptype = STRING_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_mhayman_fields->cf_standard_name - (char *) _mhayman_fields;
    tt->n_struct_vals = 84;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("Aerosol_Backscatter_Coefficient");
      tt->struct_vals[1].b = pTRUE;
      tt->struct_vals[2].s = tdrpStrDup("Aerosol_Backscatter_Coefficient_mask");
      tt->struct_vals[3].i = 0;
      tt->struct_vals[4].s = tdrpStrDup("");
      tt->struct_vals[5].s = tdrpStrDup("lidar_backscatter_coefficient");
      tt->struct_vals[6].s = tdrpStrDup("Backscatter_Ratio");
      tt->struct_vals[7].b = pTRUE;
      tt->struct_vals[8].s = tdrpStrDup("Backscatter_Ratio_mask");
      tt->struct_vals[9].i = 0;
      tt->struct_vals[10].s = tdrpStrDup("");
      tt->struct_vals[11].s = tdrpStrDup("lidar_backscatter_ratio");
      tt->struct_vals[12].s = tdrpStrDup("Particle_Depolarization");
      tt->struct_vals[13].b = pTRUE;
      tt->struct_vals[14].s = tdrpStrDup("Particle_Depolarization_mask");
      tt->struct_vals[15].i = 0;
      tt->struct_vals[16].s = tdrpStrDup("");
      tt->struct_vals[17].s = tdrpStrDup("lidar_particle_depolarization_ratio");
      tt->struct_vals[18].s = tdrpStrDup("Volume_Depolarization");
      tt->struct_vals[19].b = pTRUE;
      tt->struct_vals[20].s = tdrpStrDup("Volume_Depolarization_mask");
      tt->struct_vals[21].i = 0;
      tt->struct_vals[22].s = tdrpStrDup("");
      tt->struct_vals[23].s = tdrpStrDup("lidar_volume_depolarization_ratio");
      tt->struct_vals[24].s = tdrpStrDup("Molecular_Backscatter_Coefficient");
      tt->struct_vals[25].b = pFALSE;
      tt->struct_vals[26].s = tdrpStrDup("");
      tt->struct_vals[27].i = 0;
      tt->struct_vals[28].s = tdrpStrDup("");
      tt->struct_vals[29].s = tdrpStrDup("lidar_molecular_backscatter_coefficient");
      tt->struct_vals[30].s = tdrpStrDup("Merged_Combined_Channel");
      tt->struct_vals[31].b = pTRUE;
      tt->struct_vals[32].s = tdrpStrDup("Merged_Combined_Channel_mask");
      tt->struct_vals[33].i = 0;
      tt->struct_vals[34].s = tdrpStrDup("Combined_Counts");
      tt->struct_vals[35].s = tdrpStrDup("lidar_copolar_combined_backscatter_photon_count");
      tt->struct_vals[36].s = tdrpStrDup("Raw_High_Gain_Total_Backscatter_Channel");
      tt->struct_vals[37].b = pFALSE;
      tt->struct_vals[38].s = tdrpStrDup("");
      tt->struct_vals[39].i = 0;
      tt->struct_vals[40].s = tdrpStrDup("High_Counts");
      tt->struct_vals[41].s = tdrpStrDup("");
      tt->struct_vals[42].s = tdrpStrDup("Raw_Low_Gain_Total_Backscatter_Channel");
      tt->struct_vals[43].b = pFALSE;
      tt->struct_vals[44].s = tdrpStrDup("");
      tt->struct_vals[45].i = 0;
      tt->struct_vals[46].s = tdrpStrDup("Low_Counts");
      tt->struct_vals[47].s = tdrpStrDup("");
      tt->struct_vals[48].s = tdrpStrDup("Raw_Molecular_Backscatter_Channel");
      tt->struct_vals[49].b = pFALSE;
      tt->struct_vals[50].s = tdrpStrDup("");
      tt->struct_vals[51].i = 0;
      tt->struct_vals[52].s = tdrpStrDup("Molecular_Counts");
      tt->struct_vals[53].s = tdrpStrDup("");
      tt->struct_vals[54].s = tdrpStrDup("Raw_Cross_Polarization_Channel");
      tt->struct_vals[55].b = pFALSE;
      tt->struct_vals[56].s = tdrpStrDup("");
      tt->struct_vals[57].i = 0;
      tt->struct_vals[58].s = tdrpStrDup("Cross_Polar_Counts");
      tt->struct_vals[59].s = tdrpStrDup("");
      tt->struct_vals[60].s = tdrpStrDup("Optical_Depth");
      tt->struct_vals[61].b = pFALSE;
      tt->struct_vals[62].s = tdrpStrDup("");
      tt->struct_vals[63].i = 0;
      tt->struct_vals[64].s = tdrpStrDup("");
      tt->struct_vals[65].s = tdrpStrDup("lidar_optical_depth");
      tt->struct_vals[66].s = tdrpStrDup("Aerosol_Extinction_Coefficient");
      tt->struct_vals[67].b = pTRUE;
      tt->struct_vals[68].s = tdrpStrDup("Aerosol_Extinction_Coefficient_mask");
      tt->struct_vals[69].i = 0;
      tt->struct_vals[70].s = tdrpStrDup("");
      tt->struct_vals[71].s = tdrpStrDup("lidar_aerosol_extinction_coefficient");
      tt->struct_vals[72].s = tdrpStrDup("Temperature");
      tt->struct_vals[73].b = pFALSE;
      tt->struct_vals[74].s = tdrpStrDup("");
      tt->struct_vals[75].i = 0;
      tt->struct_vals[76].s = tdrpStrDup("");
      tt->struct_vals[77].s = tdrpStrDup("air_temperature");
      tt->struct_vals[78].s = tdrpStrDup("Pressure");
      tt->struct_vals[79].b = pFALSE;
      tt->struct_vals[80].s = tdrpStrDup("");
      tt->struct_vals[81].i = 0;
      tt->struct_vals[82].s = tdrpStrDup("");
      tt->struct_vals[83].s = tdrpStrDup("air_pressure");
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("COMPUTING DERIVED FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'combined_high_count_threshold_for_backscat_coeff'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("combined_high_count_threshold_for_backscat_coeff");
    tt->descr = tdrpStrDup("SNR threshold for backscatter coefficient (counts).");
    tt->help = tdrpStrDup("If the combined high count is less than this, the backscatter coefficient is set to missing.");
    tt->val_offset = (char *) &combined_high_count_threshold_for_backscat_coeff - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'combined_high_count_threshold_for_vol_depol_ratio'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("combined_high_count_threshold_for_vol_depol_ratio");
    tt->descr = tdrpStrDup("SNR threshold for volume depolarization ratio (counts).");
    tt->help = tdrpStrDup("If the combined high count is less than this, the volume depolarization ratio is set to missing.");
    tt->val_offset = (char *) &combined_high_count_threshold_for_vol_depol_ratio - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("READING TEMPERATURE AND PRESSURE PROFILE FROM MODEL FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_temp_and_pressure_profile_from_model_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_temp_and_pressure_profile_from_model_files");
    tt->descr = tdrpStrDup("Option to read temperature and pressure profiles from model files.");
    tt->help = tdrpStrDup("The model output has been converted into MDV/NetCDF, with temperature and pressure fields on constant height vlevels. Vlevel units are km.");
    tt->val_offset = (char *) &read_temp_and_pressure_profile_from_model_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'model_temperature_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("model_temperature_field_name");
    tt->descr = tdrpStrDup("Name of temperature field in model data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &model_temperature_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("TMP");
    tt++;
    
    // Parameter 'temperature_profile_units'
    // ctype is '_temperature_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("temperature_profile_units");
    tt->descr = tdrpStrDup("Units for temperature profile data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &temperature_profile_units - &_start_;
    tt->enum_def.name = tdrpStrDup("temperature_units_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEGREES_CELCIUS");
      tt->enum_def.fields[0].val = DEGREES_CELCIUS;
      tt->enum_def.fields[1].name = tdrpStrDup("DEGREES_KELVIN");
      tt->enum_def.fields[1].val = DEGREES_KELVIN;
    tt->single_val.e = DEGREES_CELCIUS;
    tt++;
    
    // Parameter 'model_pressure_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("model_pressure_field_name");
    tt->descr = tdrpStrDup("Name of pressure field in model data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &model_pressure_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("Pressure");
    tt++;
    
    // Parameter 'pressure_profile_units'
    // ctype is '_pressure_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("pressure_profile_units");
    tt->descr = tdrpStrDup("Units for pressure profile data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &pressure_profile_units - &_start_;
    tt->enum_def.name = tdrpStrDup("pressure_units_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PA");
      tt->enum_def.fields[0].val = PA;
      tt->enum_def.fields[1].name = tdrpStrDup("HPA");
      tt->enum_def.fields[1].val = HPA;
    tt->single_val.e = HPA;
    tt++;
    
    // Parameter 'model_profile_mdv_data_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("model_profile_mdv_data_url");
    tt->descr = tdrpStrDup("Location for model data for temp and pressure profile.");
    tt->help = tdrpStrDup("Data is in MDV or CF NetCDF format");
    tt->val_offset = (char *) &model_profile_mdv_data_url - &_start_;
    tt->single_val.s = tdrpStrDup("$(DATA_DIR)/mdv/gfs");
    tt++;
    
    // Parameter 'model_profile_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("model_profile_search_margin_secs");
    tt->descr = tdrpStrDup("The search margin when looking for suitable model data (secs).");
    tt->help = tdrpStrDup("If a data file has previously been read, within this search margin, then that file is used again.");
    tt->val_offset = (char *) &model_profile_search_margin_secs - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("OUTPUT OPTIONS FOR CfRadial FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'compression_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("compression_level");
    tt->descr = tdrpStrDup("Compression level for output, if compressed.");
    tt->help = tdrpStrDup("Applies to netCDF only. Dorade compression is run-length encoding, and has not options..");
    tt->val_offset = (char *) &compression_level - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'override_instrument_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_instrument_name");
    tt->descr = tdrpStrDup("Option to override the instrument name.");
    tt->help = tdrpStrDup("If true, the name provided will be used.");
    tt->val_offset = (char *) &override_instrument_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instrument_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instrument_name");
    tt->descr = tdrpStrDup("Instrument name.");
    tt->help = tdrpStrDup("See override_instrument_name.");
    tt->val_offset = (char *) &instrument_name - &_start_;
    tt->single_val.s = tdrpStrDup("unknown");
    tt++;
    
    // Parameter 'override_site_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_site_name");
    tt->descr = tdrpStrDup("Option to override the site name.");
    tt->help = tdrpStrDup("If true, the name provided will be used.");
    tt->val_offset = (char *) &override_site_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'site_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_name");
    tt->descr = tdrpStrDup("Site name.");
    tt->help = tdrpStrDup("See override_site_name.");
    tt->val_offset = (char *) &site_name - &_start_;
    tt->single_val.s = tdrpStrDup("unknown");
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("OUTPUT DIRECTORY AND FILE NAME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name. SPECIFY_FILE_NAME: file of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
      tt->enum_def.fields[3].name = tdrpStrDup("SPECIFY_FILE_NAME");
      tt->enum_def.fields[3].val = SPECIFY_FILE_NAME;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'output_filename_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename_prefix");
    tt->descr = tdrpStrDup("Optional prefix for output filename.");
    tt->help = tdrpStrDup("If empty, the standard prefix will be used.");
    tt->val_offset = (char *) &output_filename_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'include_instrument_name_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_instrument_name_in_file_name");
    tt->descr = tdrpStrDup("Option to include the instrument name in the file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the instrument name will be included just before the volume number in the output file name.");
    tt->val_offset = (char *) &include_instrument_name_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'include_subsecs_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_subsecs_in_file_name");
    tt->descr = tdrpStrDup("Option to include sub-seconds in date-time part of file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the millisecs of the start and end time will be included in the file name.");
    tt->val_offset = (char *) &include_subsecs_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'use_hyphen_in_file_name_datetime_part'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_hyphen_in_file_name_datetime_part");
    tt->descr = tdrpStrDup("Option to use a hyphen between date and time in filename.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. Normally an underscore is used.");
    tt->val_offset = (char *) &use_hyphen_in_file_name_datetime_part - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename");
    tt->descr = tdrpStrDup("Name of output file.");
    tt->help = tdrpStrDup("Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename - &_start_;
    tt->single_val.s = tdrpStrDup("cfradial.test.nc");
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_latest_data_info'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_latest_data_info");
    tt->descr = tdrpStrDup("Option to write out _latest_data_info files.");
    tt->help = tdrpStrDup("If true, the _latest_data_info files will be written after the converted file is written.");
    tt->val_offset = (char *) &write_latest_data_info - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE SELECTED GLOBAL ATTRIBUTES");
    tt->comment_text = tdrpStrDup("Applies to CfRadial output files only.");
    tt++;
    
    // Parameter 'version_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("version_override");
    tt->descr = tdrpStrDup("Option to override the version global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the version attribute.");
    tt->val_offset = (char *) &version_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'title_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("title_override");
    tt->descr = tdrpStrDup("Option to override the title global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the title attribute.");
    tt->val_offset = (char *) &title_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'institution_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("institution_override");
    tt->descr = tdrpStrDup("Option to override the institution global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the institution attribute.");
    tt->val_offset = (char *) &institution_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'references_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("references_override");
    tt->descr = tdrpStrDup("Option to override the references global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the references attribute.");
    tt->val_offset = (char *) &references_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'source_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("source_override");
    tt->descr = tdrpStrDup("Option to override the source global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the source attribute.");
    tt->val_offset = (char *) &source_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'history_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("history_override");
    tt->descr = tdrpStrDup("Option to override the history global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the history attribute.");
    tt->val_offset = (char *) &history_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'comment_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("comment_override");
    tt->descr = tdrpStrDup("Option to override the comment global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the comment attribute.");
    tt->val_offset = (char *) &comment_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'author_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("author_override");
    tt->descr = tdrpStrDup("Option to override the author global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the author attribute.");
    tt->val_offset = (char *) &author_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("OUTPUT FMQ DETAILS");
    tt->comment_text = tdrpStrDup("REALTIME_FMQ mode only");
    tt++;
    
    // Parameter 'output_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_url");
    tt->descr = tdrpStrDup("URL for output FMQ.");
    tt->help = tdrpStrDup("The FMQ consists of 2 files, ??.buf and ??.stat.");
    tt->val_offset = (char *) &output_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmqp:://localhost::/tmp/fmq/hsrl_moments");
    tt++;
    
    // Parameter 'output_fmq_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_size");
    tt->descr = tdrpStrDup("Size of output FMQ, in bytes.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer.");
    tt->val_offset = (char *) &output_fmq_size - &_start_;
    tt->single_val.i = 10000000;
    tt++;
    
    // Parameter 'output_fmq_nslots'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_nslots");
    tt->descr = tdrpStrDup("Number of slots in the output FMQ.");
    tt->help = tdrpStrDup("The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.");
    tt->val_offset = (char *) &output_fmq_nslots - &_start_;
    tt->single_val.i = 500;
    tt++;
    
    // Parameter 'output_fmq_compress'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_compress");
    tt->descr = tdrpStrDup("Option to compress the FMQ data on write.");
    tt->help = tdrpStrDup("This helps to keep the size of the queue entries small. Should only be used for remote FMQs over slow networks.");
    tt->val_offset = (char *) &output_fmq_compress - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'nrays_for_params'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("nrays_for_params");
    tt->descr = tdrpStrDup("Number of rays between sending params.");
    tt->help = tdrpStrDup("The params will be sent when this number of rays have been written.");
    tt->val_offset = (char *) &nrays_for_params - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'write_blocking'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_blocking");
    tt->descr = tdrpStrDup("Option to set up the FMQ as blocking.");
    tt->help = tdrpStrDup("If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ becomes full, Test2Dsr will then block until there is space for more data.");
    tt->val_offset = (char *) &write_blocking - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'data_mapper_report_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("data_mapper_report_interval");
    tt->descr = tdrpStrDup("Number of seconds between reports to DataMapper.");
    tt->help = tdrpStrDup("If > 0, the program will register with the DataMapper when the output FMQ is written to. If <= 0, registration will not be performed.");
    tt->val_offset = (char *) &data_mapper_report_interval - &_start_;
    tt->is_private = TRUE;
    tt->single_val.i = 5;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
