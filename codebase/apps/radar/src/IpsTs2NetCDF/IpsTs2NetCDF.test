/**********************************************************************
 * TDRP params for IpsTs2NetCDF
 **********************************************************************/

//======================================================================
//
// IpsTs2NetCDF reads radar time series data in IPS format, and writes 
//   files in netCDF format.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// reg_with_procmap ////////////////////////
//
// Register with procmap.
//
//
// Type: boolean
//

reg_with_procmap = FALSE;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "test";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_mode //////////////////////////////
//
// Input mode - files or time series API.
//
// If TS_FMQ_INPUT, the application will read the time series from a 
//   file message queue and process the pulses as they come in. If 
//   TS_FILE_INPUT, the application will process all the files specified 
//   on the command line.
//
//
// Type: enum
// Options:
//     TS_FILE_INPUT
//     TS_FMQ_INPUT
//     TS_TCP_INPUT
//

input_mode = TS_FILE_INPUT;

///////////// input_fmq_name //////////////////////////
//
// FMQ name. For TS_FMQ_INPUT only.
//
// Path to FMQ files. There are 2 files, one with a .buf extension and 
//   one with a .stat extention. This path does not include the 
//   extensions.
//
//
// Type: string
//

input_fmq_name = "/tmp/fmq/ts";

///////////// seek_to_end_of_input ////////////////////
//
// Option to seek to the end of the input FMQ.
//
// If TRUE, the program will seek to the end of the fmq and only read in 
//   new data. If FALSE, it will start reading from the beginning of the 
//   FMQ.
//
//
// Type: boolean
//

seek_to_end_of_input = TRUE;

///////////// tcp_server_host /////////////////////////
//
// Name of host for TCP server. For TS_TCP_INPUT only.
//
//
// Type: string
//

tcp_server_host = "localhost";

///////////// tcp_server_port /////////////////////////
//
// Port for TCP server. For TS_TCP_INPUT only.
//
//
// Type: int
//

tcp_server_port = 12000;

//======================================================================
//
// OVERRIDE CALIBRATION.
//
//======================================================================
 
///////////// override_radar_cal //////////////////////
//
// If true, read in calibration from xml file.
//
//
// Type: boolean
//

override_radar_cal = FALSE;

///////////// radar_cal_xml_file_path /////////////////
//
// Path of radar calibration file.
//
// See 'override_radar_calib.
//
//
// Type: string
//

radar_cal_xml_file_path = "/tmp/radar_cal.xml";

//======================================================================
//
// TRIGGERING WRITING OF OUTPUT FILE.
//
//======================================================================
 
///////////// output_trigger //////////////////////////
//
// Decision in when to trigger writing a file.
//
// END_OF_INPUT_FILE: write one output file for each input file. 
//   END_OF_SWEEP: write a file when the sweep number changes. 
//   END_OF_VOLUME: write a file when the sweep number resets to 0.
//
//
// Type: enum
// Options:
//     END_OF_INPUT_FILE
//     END_OF_SWEEP
//     END_OF_VOLUME
//

output_trigger = END_OF_INPUT_FILE;

///////////// max_pulses_per_file /////////////////////
//
// Maximum number of pulses per output file.
//
// Once this maximum is exceeded, the current file will be closed and a 
//   new one started.
//
//
// Type: int
//

max_pulses_per_file = 250000;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Path of output directory.
//
// Files are saved to this directory.
//
//
// Type: string
//

output_dir = "/tmp/ips_ts/netcdf";

///////////// preserve_file_name //////////////////////
//
// If true, use the same file name for output.
//
// Applies only to TS_FILE_INPUT. An '.nc' extension will be appended to 
//   the file name.
//
//
// Type: boolean
//

preserve_file_name = TRUE;

///////////// one_file_only ///////////////////////////
//
// If true, write one file only and then quit.
//
//
// Type: boolean
//

one_file_only = FALSE;

