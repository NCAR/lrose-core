//////////////////////////////////////////////////////////////////////
// parameter definitions EccoStats
//
// Mike Dixon, EOL, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// July 2024
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "Program name: EccoStats";
  p_text = "EccoStats computes statistics from the Ecco output files. See the Ecco app for details.";
}

commentdef {
  p_header = "PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

typedef enum {
  ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In ARCHIVE mode, the app moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line.";
} mode;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = "/scr/cirrus2/rsfdata/projects/nexrad-mrms/ecco_conus_terrain";
  p_descr = "Directory for input data.";
  p_help = "This is used in ARCHIVE mode only. In FILELIST mode, the file paths are specified on the command line.";
} input_dir;

paramdef string {
  p_default = "EchoTypeComp";
  p_descr = "Field name for 2D composite of Ecco type.";
} ecco_type_comp_field_name;

paramdef string {
  p_default = "ConvectivityComp";
  p_descr = "Field name for 2D composite of convectivity.";
  p_help = "Set to empty if you do not want to copy the terrain height grid to the output files.";
} convectivity_comp_field_name;

paramdef string {
  p_default = "TerrainHt";
  p_descr = "Field name for terrain height.";
} terrain_height_field_name;

paramdef string {
  p_default = "WaterFlag";
  p_descr = "Field name for water flag.";
  p_help = "Set to empty if you do not want to copy the water flag to the output files.";
} water_flag_field_name;

commentdef {
  p_header = "CLIMATOLOGY DETAILS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to specify the month for the climatology.";
  p_help = "Only data files within this month range will be included in the analysis. If min_month exceeds max_month, then the range wraps from 12 back to 1.";
} set_month_range;

paramdef int {
  p_default = 1;
  p_min = 1;
  p_max = 12;
  p_descr = "Min month to be analyzed.";
  p_help = "This is 1-based. January is 1, December is 12.";
} min_month;

paramdef int {
  p_default = 1;
  p_min = 1;
  p_max = 12;
  p_descr = "Max month to be analyzed.";
  p_help = "This is 1-based. January is 1, December is 12.";
} max_month;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to aggregate the statistics over a block of grid cells.";
  p_help = "If true, the grid cell stats will be aggregated over a block of grid cells, making the output grid smaller and the number of observations larger per output grid cell.";
} aggregate_grid_cells;

paramdef int {
  p_default = 10;
  p_descr = "Number of y cells to aggregate.";
} aggregate_ny;

paramdef int {
  p_default = 10;
  p_descr = "Number of x cells to aggregate.";
} aggregate_nx;

commentdef {
  p_header = "DATA OUTPUT";
  p_text = "\n"
    "  The partition field has the following values:\n"
    "    CATEGORY_MISSING = 0\n"
    "    CATEGORY_STRATIFORM_LOW = 14\n"
    "    CATEGORY_STRATIFORM = 15\n"
    "    CATEGORY_STRATIFORM_MID = 16\n"
    "    CATEGORY_STRATIFORM_HIGH = 18\n"
    "    CATEGORY_MIXED = 25\n"
    "    CATEGORY_CONVECTIVE_ELEVATED = 32\n"
    "    CATEGORY_CONVECTIVE_SHALLOW = 34\n"
    "    CATEGORY_CONVECTIVE = 35\n"
    "    CATEGORY_CONVECTIVE_MID = 36\n"
    "    CATEGORY_CONVECTIVE_DEEP = 38";
}

paramdef string {
  p_default = "/scr/cirrus2/rsfdata/projects/nexrad-mrms/ecco_stats";
  p_descr = "Stats directory.";
  p_help = "Stats files are written to this directory.";
} stats_dir;

paramdef string {
  p_default = "Ecco climatology.";
  p_descr = "String for file metadata header.";
  p_help = "Information on the data set";
} stats_data_set_info;

paramdef string {
  p_default = "Computed by EccoStats app.";
  p_descr = "String for file metadata header.";
  p_help = "Source of the data set";
} stats_data_set_source;

commentdef {
  p_header = "CREATE COVERAGE FIELD FOR MRMS GRID";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to create coverage field field for MRMS data grid.";
  p_help = "If true, read the MRMS 3D reflectivity MDV files, compute the coverage and write files to a separate directory.";
} compute_mrms_coverage;

paramdef string {
  p_default = "/scr/cirrus2/rsfdata/projects/nexrad-mrms/mdv";
  p_descr = "Directory for MRMS 3D grid of reflectivity.";
  p_help = "This is in MDV NetCDF format";
} mrms_dbz_mdv_dir;

paramdef string {
  p_default = "DBZ";
  p_descr = "dBZ field name in MRMS MDV files.";
} mrms_dbz_field_name;

paramdef string {
  p_default = "/scr/cirrus2/rsfdata/projects/nexrad-mrms/mdv/coverage";
  p_descr = "Directory for writing out MRMS coverage files.";
  p_help = "This is in MDV NetCDF format";
} coverage_dir;

paramdef string {
  p_default = "CoverageMinHt";
  p_descr = "Name of min coverage height field in output files.";
  p_help = "This is the minimum height of the radar coverage.";
} coverage_min_ht_field_name;

paramdef string {
  p_default = "CoverageMaxHt";
  p_descr = "Name of max coverage height field in output files.";
  p_help = "This is the maximum height of the radar coverage.";
} coverage_max_ht_field_name;

paramdef string {
  p_default = "CoverageHtFrac";
  p_descr = "Name of coverage height fraction in output files.";
  p_help = "The height fraction is computed as the fraction of the column, from the terrain height to the top of the Cartesian grid, that is covered by the radar data.";
} coverage_ht_fraction_field_name;

commentdef {
  p_header = "CENSOR BASED ON COVERAGE FIELD";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to censor the analysis based on the radar coverage - see above.";
  p_help = "If true, for each (x, y) location, we only accumulate the statistics if the coverage height fraction meets the threshold. This helps to remove areas in which there is inadequate coverage to allow for valid results from the Ecco algorithm.";
} censor_based_on_radar_coverage;

paramdef double {
  p_default = 0.8;
  p_descr = "Minimum fraction of height coverage for stats to be valid.";
  p_help = "We only accumulate the counts for a column if the coverage height fraction exceeds this threshold.";
} radar_coverage_min_ht_fraction;

commentdef {
  p_header = "CENSOR USING TITAN STORM TRACKS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use Titan tracks to mask data for use in climatology.";
  p_help = "Ecco sometimes identifies small spurious regions that contaminate the climatology. We can run Titan on the Ecco output, and then using the Titan output to select only significant storms. This helps to mask out non-storm data.";
} censor_using_titan;

paramdef string {
  p_default = "${HOME}/data/titan";
  p_descr = "Directory for titan data.";
  p_help = "This directory will contain the titan storm and track files.";
} titan_data_dir;

paramdef int {
  p_default = 1800;
  p_descr = "Minimum duration of titan track for it to be valid for climatology.";
  p_help = "We only use tracks that meet or exceed this overall duration.";
} min_titan_track_duration_secs;

paramdef int {
  p_default = 100;
  p_descr = "Minimum volume of storm for it to be valid for climatology.";
  p_help = "We only use titan storms that meet or exceed this volume. This test is applied at each scan time.";
} min_titan_storm_volume_km3;

commentdef {
  p_header = "WRITE HOUR-OF-DAY SUMMARIES TO SEPARATE FILES";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to write files, for each hour of the day, to separate time-stamped files.";
  p_help = "If true, summaries for each hour of the day are written to separate files, from which we can make movie loops.";
} write_hour_of_day_stats;

paramdef string {
  p_default = "/scr/cirrus2/rsfdata/projects/nexrad-mrms/ecco_stats_hourly";
  p_descr = "Hour of day stats directory.";
  p_help = "Hour of dat stats files are written to this directory.";
} hour_of_day_stats_dir;


