//////////////////////////////////////////////////////////////////////
// parameter definitions JamesDealias
//
// RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// May 2006
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_text = "JamesDealias reads input radar data from fmq, dealiases the
 data, and writes it to an fmq";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;
  
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_descr = "Input URL for DsRadar data via FMQ";
  p_default = {"fmqp:://localhost::./fmq.dsRadar"};
} input_fmq_url;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to seek to the end of the input FMQ.";
  p_help = "If TRUE, the program will seek to the end of the fmq and only read in new data. If FALSE, it will start reading from the beginning of the FMQ.";
} seek_to_end_of_input;

typedef enum {
  END_OF_VOL_FLAG, LAST_TILT_IN_VOL
} end_of_vol_decision_t;
  
paramdef enum end_of_vol_decision_t {
  p_default = END_OF_VOL_FLAG;
  p_descr = "Decision type for end-of-volume.";
  p_help = "If END_OF_VOL_FLAG, the end-of-volume flag in the data will be used to trigger the end of volume. If LAST_TILT_IN_VOL, the end of the tilt number given by 'last_tilt_in_vol' will be used  to trigger the end-of-volume.";
} end_of_vol_decision;

paramdef int {
  p_descr = "The tilt number used to end the volume.";
  p_help = "Only applies if 'end_of_vol_decision' is set to LAST_TILT_IN_VOL.";
  p_default = 0;
} last_tilt_in_vol;


paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to delete repeated tilts in volume";
  p_help = "If TRUE, the program will use option specified in parameter.";
} delete_repeat_tilts;

typedef enum {
  KEEP_RECENT_TILT, KEEP_PREV_TILT
} repeated_tilt_decision_t;

paramdef enum repeated_tilt_decision_t {
  p_default =  KEEP_RECENT_TILT;
  p_descr = "Decision type for deleting sequential tilts with repeated target elevation";
  p_help = "Used if delete_repeat_tilts is true.";
} delete_tilt_decision;

paramdef int {
  p_default = -1;
  p_descr = "Option for padding the number of gates in the beam data so that "
            "a constant beam geometry is processed.";
  p_help = "Set to a positive number to activate padding.";
} input_num_gates;

paramdef string {
  p_default = { "DBZ", "VEL" };
  p_descr = "Expected fields. Dealiaser will not initialize without these fields. All beams will be discarded until these fields are present\n";
} required_fields[];
 
commentdef {
  p_header = "RADAR PARAMETERS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override radar location.";
  p_help = "If TRUE, the program will use location specified in the 'radar_location' parameter.";
} override_radar_location;

typedef struct {
  double latitude;
  double longitude;
  double altitude;
} radar_location_t;

paramdef struct radar_location_t {
  p_default = { 0.0, 0.0, 0.0 };
  p_descr = "Radar location if override is set true.";
  p_help = "The radar_location is only used if 'override_radar_location' is set true. Otherwise the information in the input data stream is used.";
} radar_location;


commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_default = {"fmqp:://localhost::./fmq.dsRadarOut"};
  p_descr = "URL for output fmq.";
} output_fmq_url;

paramdef long {
  p_default = {30000000};
  p_descr = "Size of output FMQ, in bytes.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).";
} output_fmq_size;
 
paramdef long {
  p_default = {7200};
  p_descr = "Number of slots in output FMQ.";
  p_help = "The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.";
} output_fmq_nslots;

paramdef boolean {
  p_default = {FALSE};
  p_descr = "FMQ compression option.";
  p_help = "If TRUE FMQ messages are compressed.";
} output_fmq_compress;


commentdef {
  p_header = "Dealiasing Parameters ";
}
 
paramdef int {
  p_default = 375;
  p_descr = "Maximum number of rays in a sweep.";
  p_help = "Used by FourDD to allocate memory for RSL structs.";
} max_rays;

paramdef int {
  p_default = 1024;
  p_descr = "Maximum number of bins per ray.";
  p_help = "Used by FourDD to allocate memory for RSL structs.";
} max_bins;
	

paramdef  int {
  p_default = 6;
  p_descr = "Unfolding using windowing";
  p_help = "After initial dealiasing and spatial dealiasing are complete, there often remain radar gates that cannot be dealiased. Before resorting to the VAD, a windowing loop is used in unfoldVolume to scan through the sweep and use area averaging to dealias these isolated gates. PROXIMITY specifies the size of the window, which is (PROXIMITY * 2 + 1 gates) X (PROXIMITY * 2 +1 gates) in azimuth and range. This value should be large enough to find a sufficient number of good gates, but not too large (because it makes the code less efficient and could introduce errors).";
} proximity;


paramdef  float {
  p_default = .25;
  p_help = "This parameter is the fraction of the Nyquist velocity used to determine if initial dealiasing of a particular gate was successful in the first spatial and temporal dealiasing pass through the data.";
} comp_thresh;

paramdef  float {
  p_default = .49;
  p_descr = "This parameter is the fraction of the Nyquist velocity used to determine if the dealiasing of a particular gate using vad data was successful. This is used if the gate was not dealiased using comp_thresh.";
  p_help = " NOTE: comp_thresh should be less than comp_thresh2. Both comp_thresh and comp_thresh2 must be between 0.2 & 1.0! Experience shows that values below 0.5 are better for preventing errors from occurring. Experience also shows that values less than about 0.2 make the algorithm less efficient and less effective.";
} comp_thresh2;

paramdef float {
  p_default = .4;
  p_descr = "This parameter is the fraction of the Nyquist velocity used to compare a gate to its neighbor or an averaged value of a window of neighbors and determine if it is aliased. This is used in the passes that unfold the data based on spatial continuity";
} thresh;

paramdef  int {
  p_default = 5;
  p_descr = "Number of good values required within unfolding window to unfold the current bin.";
  p_help = "This parameter specifies the minumum number of gates successfully dealiased during initial and spatial dealiasing located within the window (of size (PROXIMITY*2+1) X (PROXIMITY*2+1)) to consider adequate for dealiasing a particular gate the windowing procedure.";
} min_good;


paramdef float {
  p_default = .8;
  p_descr = "Fraction of the Nyquist velocity to use as a standard deviation threshold when windowing.";
  p_help = "This parameter prevents very noisy data from being used for dealiasing during the windowing routine. The lower this value, the stricter the algorithm will be about allowing bad data to come into play during windowing. (Check use in windowing routine)";
} std_thresh;
	
paramdef float {
  p_default = 0.0;
  p_descr = "All radial velocity bins with dbz values less than
 low_dbz will be deleted if prep is set to true.";
  p_help = "";
} low_dbz;


paramdef float {
  p_default = 80.0;
  p_descr = "All bins with dbz values greater than high_dbz will be
 deleted if prep is set to true.";
  p_help = "This parameter should be greater than 75 dBZ.";
} high_dbz;

paramdef boolean {
  p_default = false;
  p_descr = "If true, all radial velocity bins with dbz values missing will be deleted";
  p_help = "";
} no_dbz_rm_rv;


paramdef  int {
  p_default = 0;
  p_descr = "The first del_num_bins velocity bins will be deleted along
 each ray(should be between 0 and 5).";
  p_help = "";
} del_num_bins;


paramdef float {
  p_default = 1.0;
  p_descr = "If absolute value of the radial velocity gate is less than this value, it will not be used as a PRELIM gate.";
  p_help = "This parameter is a wind speed (in m/s) and should be between 0.0 m/s and about 0.1 * Nyquist velocity. Typically, noise gates in the radial velocity field are close to 0 m/s. This parameter specifies a range of small radial velocities (between +/- CKVAL) which the algorithm will ignore as possible noise during the first dealiasing passes. Then, in subsequent passes, the algorithm sets CKVAL to zero in order to properly examine these gates.";
} ck_val ;

paramdef  int {
  p_default = -1;
  p_descr = "Sign convention: if SIGN=-1, negative radial velocity is towards the radar, if SIGN=1 positive value towards radar.";
  p_help = "";
} sign;

paramdef  int {
  p_default = 10;
  p_descr = "This is the upper bound on the number of times 2Vn will be added or subtracted to a given velocity value in attempt to dealias it";
  p_help = "Should be four or greater and probably less than or equal to 10";
} max_count;

paramdef float {
  p_default = .05;
  p_descr = "Maximum vertical shear allowed in input sounding";
  p_help = "This limits how much variability in the wind with height will be allowed in the VAD or sounding. Should be greater than about 0.01 and less than about 0.1. ";
} max_shear ;

paramdef boolean {
  p_default = false;
  p_descr = "Prep volume before unfolding. Velocity gates with DBZ >  high_dbz and lower that low_dbz will be automatically deleted.";
  p_help = "";
} prep ;

paramdef boolean {
  p_default = false;
  p_descr = "Use Bergen and Albers filter";
  p_help = "";
} filt ;

paramdef boolean {
  p_default = false;
  p_descr = "Output sounding or vad volume velocities INSTEAD OF dealiased velocties.";
  p_help = "A debug tool.";
} output_soundVol ;

paramdef float{
  p_default = 0;
  p_descr = "Missing velocity value.";
  p_help = "This is the encoded Range value of velocity.";
} missing_vel ;

paramdef boolean{
  p_default = false;
  p_descr = "If strict_first_pass is true, a gate in which a dealias
attempt has been made will have to be within comp_thresh*NyqVelocity
of the relevant above, previous, sounding values in order to be
considered properly dealiased";
} strict_first_pass ;

commentdef {
  p_header = "SOUNDING URL";
};

paramdef string {
  p_descr = "URL for sounding data.";
  p_default = {"spdbp:://localhost::./spdb"};
} sounding_url;

paramdef float {

  p_descr = "Time (in minutes) to search back for a sounding. "
            "Default is 1/2 hour; max is 24 hours.";
  p_help = "This value is overridden by DsSpdbServer when using "
           "a hybrid sounding database with search criteria.";
  p_min = 0;
  p_max = 1440;
  p_default = 30;

} sounding_look_back;


paramdef float {
  p_descr = "Minimum altitude (in km) used from the sounding to calculate average wind";
  p_min = 0.0;
  p_max = 10.0;
  p_default = 0.0 ;
} wind_alt_min;

paramdef float {
  p_descr = "Maximum altitude (in km) used from the sounding to
calculate average wind";
  p_min =  0.0 ;
  p_max =  10.0 ;
  p_default =  5.0 ;
} wind_alt_max;   

paramdef float {
  p_descr = "Horizontal component of wind dir/speed (in m/s)";
  p_help = "Used only when no sounding wind data are available.";
  p_min = -1000.0;
  p_max = 1000.0;
  p_default = 0.0;
} avg_wind_u;

paramdef float {
  p_descr = "Vertical component of wind dir/speed (in m/s)";
  p_help = "Used only when no sounding wind data are available.";
  p_min = -1000.0;
  p_max = 1000.0;
  p_default = 0.0;
} avg_wind_v;

paramdef float {
  p_descr = "the range of dbz values used for scale/biasing (dBZ)";
  p_help = "this is used only when input data is floating point";
  p_default = {-32, 80};
} dbz_range[2];

paramdef float {
  p_descr = "the range of vel values used for scale/biasing (m/s)";
  p_help = "this is used only when input data is floating point";
  p_default = {-80, 80};
} vel_range[2];
