//////////////////////////////////////////////////////////////////////
// parameter definitions JamesDealias
//
// RAP, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// May 2006
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_text = "RadxDealias reads input radar data from a file, dealiases the
 velocity data, and writes the results to a file.  The output file contains
 a new field that contains the unfolded velocity. The unfolded velocity
 field has the same name with _UNF appended. ";
}

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file.  "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in ARCHIVE mode, at least) MUST contain a "
           "day-directory above the data file -- ./data_file.ext will not "
           "work as a file path, but ./yyyymmdd/data_file.ext will.";
} mode;

commentdef {
  p_header = "OUTPUT DIRECTORY AND FILE NAME";
}

paramdef string {
  p_default = "./dealiased_output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY,
  SPECIFY_FILE_NAME
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name. SPECIFY_FILE_NAME: file of this name will be written to output_dir.";
} output_filename_mode;

paramdef string {
  p_default = "";
  p_descr = "Optional prefix for output filename.";
  p_help = "If empty, the standard prefix will be used. Only applies to CfRadial files. Standard prefix is 'cfrad.'";
} output_filename_prefix;

paramdef string {
  p_default = "cfradial.test.nc";
  p_descr = "Name of output file.";
  p_help = "Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.";
} output_filename;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;
  
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef boolean {
  p_default = false;
  p_descr = "Output sounding or vad volume velocities INSTEAD OF dealiased velocties.";
  p_help = "A debug tool.";
} output_soundVol ;

commentdef {
  p_header = "PROCESS CONTROL";
}

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef string {
  p_default = { "DBZ", "VEL" };
  p_descr = "Expected fields. Dealiaser will not initialize without these fields. All beams will be discarded until these fields are present\n";
} required_fields[];
 
paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to delete repeated tilts in volume";
  p_help = "If TRUE, the program will use option specified in parameter.";
} delete_repeat_tilts;

typedef enum {
  KEEP_RECENT_TILT, KEEP_PREV_TILT
} repeated_tilt_decision_t;

paramdef enum repeated_tilt_decision_t {
  p_default =  KEEP_RECENT_TILT;
  p_descr = "Decision type for deleting sequential tilts with repeated target elevation";
  p_help = "Used if delete_repeat_tilts is true.";
} delete_tilt_decision;

commentdef {
  p_header = "RADAR PARAMETERS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override radar location.";
  p_help = "If TRUE, the program will use location specified in the 'radar_location' parameter.";
} override_radar_location;

typedef struct {
  double latitude;
  double longitude;
  double altitude;
} radar_location_t;

paramdef struct radar_location_t {
  p_default = { 0.0, 0.0, 0.0 };
  p_descr = "Radar location if override is set true.";
  p_help = "The radar_location is only used if 'override_radar_location' is set true. Otherwise the information in the input data stream is used.";
} radar_location;

commentdef {
  p_header = "Dealiasing Parameters ";
}
 
paramdef  float {
  p_default = 0.0;
  p_help = "Nyquist velocity to override value in data file.";
} nyquist_mps;

paramdef  int {
  p_default = 6;
  p_descr = "Unfolding using windowing";
  p_help = "After initial dealiasing and spatial dealiasing are complete, there often remain radar gates that cannot be dealiased. Before resorting to the VAD, a windowing loop is used in unfoldVolume to scan through the sweep and use area averaging to dealias these isolated gates. PROXIMITY specifies the size of the window, which is (PROXIMITY * 2 + 1 gates) X (PROXIMITY * 2 +1 gates) in azimuth and range. This value should be large enough to find a sufficient number of good gates, but not too large (because it makes the code less efficient and could introduce errors).";
} proximity;


paramdef  float {
  p_default = .25;
  p_help = "This parameter is the fraction of the Nyquist velocity used to determine if initial dealiasing of a particular gate was successful in the first spatial and temporal dealiasing pass through the data.";
} comp_thresh;

paramdef  float {
  p_default = .49;
  p_descr = "This parameter is the fraction of the Nyquist velocity used to determine if the dealiasing of a particular gate using vad data was successful. This is used if the gate was not dealiased using comp_thresh.";
  p_help = " NOTE: comp_thresh should be less than comp_thresh2. Both comp_thresh and comp_thresh2 must be between 0.2 & 1.0! Experience shows that values below 0.5 are better for preventing errors from occurring. Experience also shows that values less than about 0.2 make the algorithm less efficient and less effective.";
} comp_thresh2;

paramdef float {
  p_default = .4;
  p_descr = "This parameter is the fraction of the Nyquist velocity used to compare a gate to its neighbor or an averaged value of a window of neighbors and determine if it is aliased. This is used in the passes that unfold the data based on spatial continuity";
} thresh;

paramdef  int {
  p_default = 5;
  p_descr = "Number of good values required within unfolding window to unfold the current bin.";
  p_help = "This parameter specifies the minumum number of gates successfully dealiased during initial and spatial dealiasing located within the window (of size (PROXIMITY*2+1) X (PROXIMITY*2+1)) to consider adequate for dealiasing a particular gate in the windowing procedure.";
} min_good;


paramdef float {
  p_default = .8;
  p_descr = "Fraction of the Nyquist velocity to use as a standard deviation threshold when windowing.";
  p_help = "This parameter prevents very noisy data from being used for dealiasing during the windowing routine. The lower this value, the stricter the algorithm will be about allowing bad data to come into play during windowing. (Check use in windowing routine)";
} std_thresh;


commentdef {
  p_header = "PREP VOLUME BEFORE UNFOLDING";
}

paramdef boolean {
  p_default = false;
  p_descr = "Prep volume before unfolding. Velocity gates with DBZ >  high_dbz and lower that low_dbz will be automatically deleted.";
  p_help = "";
} prep ;

paramdef float {
  p_default = 0.0;
  p_descr = "All radial velocity bins with dbz values less than
 low_dbz will be deleted if prep is set to true.";
  p_help = "";
} low_dbz;


paramdef float {
  p_default = 80.0;
  p_descr = "All bins with dbz values greater than high_dbz will be
 deleted if prep is set to true.";
  p_help = "This parameter should be greater than 75 dBZ.";
} high_dbz;


commentdef {
  p_header = "PRUNING";
}

paramdef boolean {
  p_default = false;
  p_descr = "If true, all radial velocity bins with dbz values missing will be deleted";
  p_help = "";
} no_dbz_rm_rv;


paramdef  int {
  p_default = 0;
  p_descr = "The first del_num_bins velocity bins will be deleted along
 each ray(should be between 0 and 5).";
  p_help = "";
} del_num_bins;


paramdef float {
  p_default = 1.0;
  p_descr = "If absolute value of the radial velocity gate is less than this value, it will not be used as a PRELIM gate.";
  p_help = "This parameter is a wind speed (in m/s) and should be between 0.0 m/s and about 0.1 * Nyquist velocity. Typically, noise gates in the radial velocity field are close to 0 m/s. This parameter specifies a range of small radial velocities (between +/- CKVAL) which the algorithm will ignore as possible noise during the first dealiasing passes. Then, in subsequent passes, the algorithm sets CKVAL to zero in order to properly examine these gates.";
} ck_val ;

paramdef  int {
  p_default = -1;
  p_descr = "Sign convention: if SIGN=-1, negative radial velocity is towards the radar, if SIGN=1 positive value towards radar.";
  p_help = "";
} sign;

paramdef  int {
  p_default = 10;
  p_descr = "This is the upper bound on the number of times 2Vn will be added or subtracted to a given velocity value in attempt to dealias it";
  p_help = "Should be four or greater and probably less than or equal to 10";
} max_count;

paramdef float {
  p_default = .05;
  p_descr = "Maximum vertical shear allowed in input sounding";
  p_help = "This limits how much variability in the wind with height will be allowed in the VAD or sounding. Should be greater than about 0.01 and less than about 0.1. ";
} max_shear ;

paramdef boolean {
  p_default = false;
  p_descr = "Use Bergen and Albers filter";
  p_help = "";
} filt ;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the missing values for field data";
  p_help = "See following parameter options.";
} override_missing_field_values;

paramdef float{
  p_default = 0;
  p_descr = "Missing value for velocity field data.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} velocity_field_missing_value;

paramdef boolean{
  p_default = false;
  p_descr = "If strict_first_pass is true, a gate in which a dealias
attempt has been made will have to be within comp_thresh*NyqVelocity
of the relevant above, previous, sounding values in order to be
considered properly dealiased";
} strict_first_pass ;

commentdef {
  p_header = "SOUNDING URL";
};

paramdef string {
  p_descr = "URL for sounding data.";
  p_default = {"spdbp:://localhost::./spdb"};
} sounding_url;

paramdef float {

  p_descr = "Time (in minutes) to search back for a sounding. "
            "Default is 1/2 hour; max is 24 hours.";
  p_help = "This value is overridden by DsSpdbServer when using "
           "a hybrid sounding database with search criteria.";
  p_min = 0;
  p_max = 1440;
  p_default = 30;

} sounding_look_back;

paramdef string {
  p_default = "";
  p_descr = "Name of sounding location.";
  p_help = "If set, we request a profile just for that sounding. If empty, all soundings in the data base are considered valid.";
} sounding_location_name;

paramdef float {
  p_descr = "Minimum altitude (in km) used from the sounding to calculate average wind";
  p_min = 0.0;
  p_max = 10.0;
  p_default = 0.0 ;
} wind_alt_min;

paramdef float {
  p_descr = "Maximum altitude (in km) used from the sounding to
calculate average wind";
  p_min =  0.0 ;
  p_max =  10.0 ;
  p_default =  5.0 ;
} wind_alt_max;   

paramdef float {
  p_descr = "Horizontal component of wind dir/speed (in m/s)";
  p_help = "Used only when no sounding wind data are available.";
  p_min = -1000.0;
  p_max = 1000.0;
  p_default = 0.0;
} avg_wind_u;

paramdef float {
  p_descr = "Vertical component of wind dir/speed (in m/s)";
  p_help = "Used only when no sounding wind data are available.";
  p_min = -1000.0;
  p_max = 1000.0;
  p_default = 0.0;
} avg_wind_v;

paramdef float {
  p_descr = "Maximum amount ray angles can vary between successive volumes (in degrees)";
  p_help = "Ray azimuth and elevation angles must be about the same between successive volumes.";
  p_min = 0.0001;
  p_max = 10.0;
  p_default = 0.10;
} angle_variance;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is _latest_data_info file available?";
  p_help = "If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.";
} latest_data_info_avail;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to recurse to subdirectories while looking for new files.";
  p_help = "If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE."; 
} search_recursively;

paramdef int {
  p_default = 5;
  p_descr = "Maximum depth for recursive directory scan.";
  p_help = "Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.";
} max_recursion_depth;

paramdef int {
  p_default = 2;
  p_min = 1;
  p_descr = "Sleep time between checking directory for input - secs.";
  p_help = "If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.";
} wait_between_checks;

paramdef int {
  p_default = 5;
  p_descr = "File quiescence when checking for files - secs.";
  p_help = "This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.";
} file_quiescence;

paramdef string {
  p_default = "";
  p_descr = "File name extension.";
  p_help = "If set, only files with this extension will be processed.";
} search_ext;
