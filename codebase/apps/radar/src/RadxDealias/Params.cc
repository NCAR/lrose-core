/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxDealias
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("");
    tt->comment_text = tdrpStrDup("RadxDealias reads input radar data from a file, dealiases the velocity data, and writes the results to a file.  The output file contains a new field that contains the unfolded velocity. The unfolded velocity field has the same name with _UNF appended. ");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file.  In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("OUTPUT DIRECTORY AND FILE NAME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./dealiased_output");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name. SPECIFY_FILE_NAME: file of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
      tt->enum_def.fields[3].name = tdrpStrDup("SPECIFY_FILE_NAME");
      tt->enum_def.fields[3].val = SPECIFY_FILE_NAME;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'output_filename_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename_prefix");
    tt->descr = tdrpStrDup("Optional prefix for output filename.");
    tt->help = tdrpStrDup("If empty, the standard prefix will be used. Only applies to CfRadial files. Standard prefix is 'cfrad.'");
    tt->val_offset = (char *) &output_filename_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename");
    tt->descr = tdrpStrDup("Name of output file.");
    tt->help = tdrpStrDup("Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename - &_start_;
    tt->single_val.s = tdrpStrDup("cfradial.test.nc");
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'output_soundVol'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_soundVol");
    tt->descr = tdrpStrDup("Output sounding or vad volume velocities INSTEAD OF dealiased velocties.");
    tt->help = tdrpStrDup("A debug tool.");
    tt->val_offset = (char *) &output_soundVol - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'required_fields'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("required_fields");
    tt->descr = tdrpStrDup("Expected fields. Dealiaser will not initialize without these fields. All beams will be discarded until these fields are present\n");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_required_fields - &_start_;
    tt->array_n_offset = (char *) &required_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("DBZ");
      tt->array_vals[1].s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'delete_repeat_tilts'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("delete_repeat_tilts");
    tt->descr = tdrpStrDup("Option to delete repeated tilts in volume");
    tt->help = tdrpStrDup("If TRUE, the program will use option specified in parameter.");
    tt->val_offset = (char *) &delete_repeat_tilts - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'delete_tilt_decision'
    // ctype is '_repeated_tilt_decision_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("delete_tilt_decision");
    tt->descr = tdrpStrDup("Decision type for deleting sequential tilts with repeated target elevation");
    tt->help = tdrpStrDup("Used if delete_repeat_tilts is true.");
    tt->val_offset = (char *) &delete_tilt_decision - &_start_;
    tt->enum_def.name = tdrpStrDup("repeated_tilt_decision_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("KEEP_RECENT_TILT");
      tt->enum_def.fields[0].val = KEEP_RECENT_TILT;
      tt->enum_def.fields[1].name = tdrpStrDup("KEEP_PREV_TILT");
      tt->enum_def.fields[1].val = KEEP_PREV_TILT;
    tt->single_val.e = KEEP_RECENT_TILT;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("RADAR PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_radar_location'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_location");
    tt->descr = tdrpStrDup("Option to override radar location.");
    tt->help = tdrpStrDup("If TRUE, the program will use location specified in the 'radar_location' parameter.");
    tt->val_offset = (char *) &override_radar_location - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_location'
    // ctype is '_radar_location_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("radar_location");
    tt->descr = tdrpStrDup("Radar location if override is set true.");
    tt->help = tdrpStrDup("The radar_location is only used if 'override_radar_location' is set true. Otherwise the information in the input data stream is used.");
    tt->val_offset = (char *) &radar_location - &_start_;
    tt->struct_def.name = tdrpStrDup("radar_location_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("latitude");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &radar_location.latitude - (char *) &radar_location;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("longitude");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &radar_location.longitude - (char *) &radar_location;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("altitude");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &radar_location.altitude - (char *) &radar_location;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("Dealiasing Parameters ");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'nyquist_mps'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("nyquist_mps");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("Nyquist velocity to override value in data file.");
    tt->val_offset = (char *) &nyquist_mps - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'proximity'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("proximity");
    tt->descr = tdrpStrDup("Unfolding using windowing");
    tt->help = tdrpStrDup("After initial dealiasing and spatial dealiasing are complete, there often remain radar gates that cannot be dealiased. Before resorting to the VAD, a windowing loop is used in unfoldVolume to scan through the sweep and use area averaging to dealias these isolated gates. PROXIMITY specifies the size of the window, which is (PROXIMITY * 2 + 1 gates) X (PROXIMITY * 2 +1 gates) in azimuth and range. This value should be large enough to find a sufficient number of good gates, but not too large (because it makes the code less efficient and could introduce errors).");
    tt->val_offset = (char *) &proximity - &_start_;
    tt->single_val.i = 6;
    tt++;
    
    // Parameter 'comp_thresh'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("comp_thresh");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("This parameter is the fraction of the Nyquist velocity used to determine if initial dealiasing of a particular gate was successful in the first spatial and temporal dealiasing pass through the data.");
    tt->val_offset = (char *) &comp_thresh - &_start_;
    tt->single_val.f = 0.25;
    tt++;
    
    // Parameter 'comp_thresh2'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("comp_thresh2");
    tt->descr = tdrpStrDup("This parameter is the fraction of the Nyquist velocity used to determine if the dealiasing of a particular gate using vad data was successful. This is used if the gate was not dealiased using comp_thresh.");
    tt->help = tdrpStrDup(" NOTE: comp_thresh should be less than comp_thresh2. Both comp_thresh and comp_thresh2 must be between 0.2 & 1.0! Experience shows that values below 0.5 are better for preventing errors from occurring. Experience also shows that values less than about 0.2 make the algorithm less efficient and less effective.");
    tt->val_offset = (char *) &comp_thresh2 - &_start_;
    tt->single_val.f = 0.49;
    tt++;
    
    // Parameter 'thresh'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("thresh");
    tt->descr = tdrpStrDup("This parameter is the fraction of the Nyquist velocity used to compare a gate to its neighbor or an averaged value of a window of neighbors and determine if it is aliased. This is used in the passes that unfold the data based on spatial continuity");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &thresh - &_start_;
    tt->single_val.f = 0.4;
    tt++;
    
    // Parameter 'min_good'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_good");
    tt->descr = tdrpStrDup("Number of good values required within unfolding window to unfold the current bin.");
    tt->help = tdrpStrDup("This parameter specifies the minumum number of gates successfully dealiased during initial and spatial dealiasing located within the window (of size (PROXIMITY*2+1) X (PROXIMITY*2+1)) to consider adequate for dealiasing a particular gate in the windowing procedure.");
    tt->val_offset = (char *) &min_good - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'std_thresh'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("std_thresh");
    tt->descr = tdrpStrDup("Fraction of the Nyquist velocity to use as a standard deviation threshold when windowing.");
    tt->help = tdrpStrDup("This parameter prevents very noisy data from being used for dealiasing during the windowing routine. The lower this value, the stricter the algorithm will be about allowing bad data to come into play during windowing. (Check use in windowing routine)");
    tt->val_offset = (char *) &std_thresh - &_start_;
    tt->single_val.f = 0.8;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("PREP VOLUME BEFORE UNFOLDING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'prep'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("prep");
    tt->descr = tdrpStrDup("Prep volume before unfolding. Velocity gates with DBZ >  high_dbz and lower that low_dbz will be automatically deleted.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &prep - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'low_dbz'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("low_dbz");
    tt->descr = tdrpStrDup("All radial velocity bins with dbz values less than low_dbz will be deleted if prep is set to true.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &low_dbz - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'high_dbz'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("high_dbz");
    tt->descr = tdrpStrDup("All bins with dbz values greater than high_dbz will be deleted if prep is set to true.");
    tt->help = tdrpStrDup("This parameter should be greater than 75 dBZ.");
    tt->val_offset = (char *) &high_dbz - &_start_;
    tt->single_val.f = 80;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("PRUNING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'no_dbz_rm_rv'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_dbz_rm_rv");
    tt->descr = tdrpStrDup("If true, all radial velocity bins with dbz values missing will be deleted");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &no_dbz_rm_rv - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'del_num_bins'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("del_num_bins");
    tt->descr = tdrpStrDup("The first del_num_bins velocity bins will be deleted along each ray(should be between 0 and 5).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &del_num_bins - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'ck_val'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("ck_val");
    tt->descr = tdrpStrDup("If absolute value of the radial velocity gate is less than this value, it will not be used as a PRELIM gate.");
    tt->help = tdrpStrDup("This parameter is a wind speed (in m/s) and should be between 0.0 m/s and about 0.1 * Nyquist velocity. Typically, noise gates in the radial velocity field are close to 0 m/s. This parameter specifies a range of small radial velocities (between +/- CKVAL) which the algorithm will ignore as possible noise during the first dealiasing passes. Then, in subsequent passes, the algorithm sets CKVAL to zero in order to properly examine these gates.");
    tt->val_offset = (char *) &ck_val - &_start_;
    tt->single_val.f = 1;
    tt++;
    
    // Parameter 'sign'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sign");
    tt->descr = tdrpStrDup("Sign convention: if SIGN=-1, negative radial velocity is towards the radar, if SIGN=1 positive value towards radar.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sign - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'max_count'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_count");
    tt->descr = tdrpStrDup("This is the upper bound on the number of times 2Vn will be added or subtracted to a given velocity value in attempt to dealias it");
    tt->help = tdrpStrDup("Should be four or greater and probably less than or equal to 10");
    tt->val_offset = (char *) &max_count - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'max_shear'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("max_shear");
    tt->descr = tdrpStrDup("Maximum vertical shear allowed in input sounding");
    tt->help = tdrpStrDup("This limits how much variability in the wind with height will be allowed in the VAD or sounding. Should be greater than about 0.01 and less than about 0.1. ");
    tt->val_offset = (char *) &max_shear - &_start_;
    tt->single_val.f = 0.05;
    tt++;
    
    // Parameter 'filt'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("filt");
    tt->descr = tdrpStrDup("Use Bergen and Albers filter");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &filt - &_start_;
    tt->single_val.b = pFALSE;
    tt++;

    // Parameter 'override_missing_field_values'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_missing_field_values");
    tt->descr = tdrpStrDup("Option to override the missing values for field data");
    tt->help = tdrpStrDup("See following parameter options.");
    tt->val_offset = (char *) &override_missing_field_values - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'velocity_field_missing_value'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("missing_vel");
    tt->descr = tdrpStrDup("Missing value for velocity field data.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &velocity_field_missing_value - &_start_;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'strict_first_pass'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("strict_first_pass");
    tt->descr = tdrpStrDup("If strict_first_pass is true, a gate in which a dealiasattempt has been made will have to be within comp_thresh*NyqVelocityof the relevant above, previous, sounding values in order to beconsidered properly dealiased");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &strict_first_pass - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("SOUNDING URL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'sounding_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_url");
    tt->descr = tdrpStrDup("URL for sounding data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sounding_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::./spdb");
    tt++;
    
    // Parameter 'sounding_look_back'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("sounding_look_back");
    tt->descr = tdrpStrDup("Time (in minutes) to search back for a sounding. Default is 1/2 hour; max is 24 hours.");
    tt->help = tdrpStrDup("This value is overridden by DsSpdbServer when using a hybrid sounding database with search criteria.");
    tt->val_offset = (char *) &sounding_look_back - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = 0;
    tt->max_val.f = 1440;
    tt->single_val.f = 30;
    tt++;
    
    // Parameter 'sounding_location_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_location_name");
    tt->descr = tdrpStrDup("Name of sounding location.");
    tt->help = tdrpStrDup("If set, we request a profile just for that sounding. If empty, all soundings in the data base are considered valid.");
    tt->val_offset = (char *) &sounding_location_name - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'wind_alt_min'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("wind_alt_min");
    tt->descr = tdrpStrDup("Minimum altitude (in km) used from the sounding to calculate average wind");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_alt_min - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = 0;
    tt->max_val.f = 10;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'wind_alt_max'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("wind_alt_max");
    tt->descr = tdrpStrDup("Maximum altitude (in km) used from the sounding tocalculate average wind");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_alt_max - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = 0;
    tt->max_val.f = 10;
    tt->single_val.f = 5;
    tt++;
    
    // Parameter 'avg_wind_u'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("avg_wind_u");
    tt->descr = tdrpStrDup("Horizontal component of wind dir/speed (in m/s)");
    tt->help = tdrpStrDup("Used only when no sounding wind data are available.");
    tt->val_offset = (char *) &avg_wind_u - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = -1000;
    tt->max_val.f = 1000;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'avg_wind_v'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("avg_wind_v");
    tt->descr = tdrpStrDup("Vertical component of wind dir/speed (in m/s)");
    tt->help = tdrpStrDup("Used only when no sounding wind data are available.");
    tt->val_offset = (char *) &avg_wind_v - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = -1000;
    tt->max_val.f = 1000;
    tt->single_val.f = 0;
    tt++;
    
    // Parameter 'angle_variance'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("angle_variance");
    tt->descr = tdrpStrDup("Maximum amount ray angles can vary between successive volumes (in degrees)");
    tt->help = tdrpStrDup("Ray azimuth and elevation angles must be about the same between successive volumes.");
    tt->val_offset = (char *) &angle_variance - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.f = 0.0001;
    tt->max_val.f = 10;
    tt->single_val.f = 0.1;
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_avail");
    tt->descr = tdrpStrDup("Is _latest_data_info file available?");
    tt->help = tdrpStrDup("If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.");
    tt->val_offset = (char *) &latest_data_info_avail - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'search_recursively'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("search_recursively");
    tt->descr = tdrpStrDup("Option to recurse to subdirectories while looking for new files.");
    tt->help = tdrpStrDup("If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &search_recursively - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_recursion_depth'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_recursion_depth");
    tt->descr = tdrpStrDup("Maximum depth for recursive directory scan.");
    tt->help = tdrpStrDup("Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.");
    tt->val_offset = (char *) &max_recursion_depth - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'wait_between_checks'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wait_between_checks");
    tt->descr = tdrpStrDup("Sleep time between checking directory for input - secs.");
    tt->help = tdrpStrDup("If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &wait_between_checks - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'file_quiescence'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("file_quiescence");
    tt->descr = tdrpStrDup("File quiescence when checking for files - secs.");
    tt->help = tdrpStrDup("This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &file_quiescence - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
