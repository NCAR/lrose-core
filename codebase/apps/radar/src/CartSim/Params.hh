/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.hh
//
// TDRP header file for 'Params' class.
//
// Code for program CartSim
//
// This header file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.hh
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @class Params
 *
 * @author automatically generated
 *
 */

#ifndef Params_hh
#define Params_hh

#include <tdrp/tdrp.h>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>

using namespace std;

// Class definition

class Params {

public:

  // enum typedefs

  typedef enum {
    MDV = 0,
    CFRADIAL = 1
  } Format_t;

  typedef enum {
    RADIAL_VEL = 0,
    VX = 1,
    VY = 2,
    VZ = 3,
    DBZ = 4,
    SNR = 5,
    SW = 6,
    CLUTTER = 7
  } Field_t;

  // struct typedefs

  typedef struct {
    int endpoint_index;
    double radius_km;
    double zmax_km;
    double magnitude_knots;
    double dbz_core;
    double xmotion_knots;
    double ymotion_knots;
    tdrp_bool_t gain;
    int minutes_to_intensity_fuzzy_index;
    int minutes_to_size_fuzzy_index;
    double start_minutes;
    double lifetime_minutes;
  } Microburst_t;

  typedef struct {
    int endpoint_index;
    double radius_km;
    double min_z_km;
    double xmotion_knots;
    double ymotion_knots;
    double zmotion_knots;
    tdrp_bool_t override;
    double noise;
    int km_from_center_to_dbz_fuzzy_index;
    int minutes_to_intensity_fuzzy_index;
    int minutes_to_size_fuzzy_index;
    double start_minutes;
    double lifetime_minutes;
  } Storm_t;

  typedef struct {
    double x_km;
    double y_km;
    double z_km;
    double radius_km;
    double noise;
    double sw;
    double xmotion_knots;
    double ymotion_knots;
    double zmotion_knots;
    int minutes_to_intensity_fuzzy_index;
    int minutes_to_size_fuzzy_index;
    double start_minutes;
    double lifetime_minutes;
  } Turbulence_t;

  typedef struct {
    int endpts_index;
    double thin_line_z_km;
    double thin_line_x_km;
    double thin_line_r_km;
    double z1_km;
    double z2_km;
    double z3_km;
    double x1_km;
    double x2_km;
    double xb_km;
    double wbehind_knots;
    double thin_line_dbz;
    double xmotion_knots;
    double ymotion_knots;
    double side_decay;
    tdrp_bool_t wave;
    int minutes_to_intensity_fuzzy_index;
    double start_minutes;
    double lifetime_minutes;
  } GustFront_t;

  typedef struct {
    double angle0_degrees;
    double angle1_degrees;
    double xvel_knots;
    double yvel_knots;
    double zvel_knots;
    double dbz;
    double noise;
    double clutter;
    double start_minutes;
    double lifetime_minutes;
  } DeviantRay_t;

  typedef struct {
    double theta_degrees;
    double phi_degrees;
    double r_km;
    double dtheta_degrees;
    double dphi_degrees;
    double dr_km;
    double dbz;
    double xvel_knots;
    double yvel_knots;
    double zvel_knots;
    double noise;
    double clutter;
    double start_minutes;
    double lifetime_minutes;
  } PolarSpeck_t;

  typedef struct {
    double x_km;
    double y_km;
    double z_km;
    double dx_km;
    double dy_km;
    double dz_km;
    double dbz;
    double xvel_knots;
    double yvel_knots;
    double zvel_knots;
    double noise;
    double clutter;
    double start_minutes;
    double lifetime_minutes;
  } CartesianSpeck_t;

  typedef struct {
    double x_km;
    double y_km;
    double z_km;
    double radius_km;
    double noise;
    double xvel_knots;
    double yvel_knots;
    double zvel_knots;
    double xmotion_knots;
    double ymotion_knots;
    double zmotion_knots;
    double start_minutes;
    double lifetime_minutes;
  } VelCircle_t;

  typedef struct {
    double theta_degrees;
    double phi_degrees;
    double r_km;
    double dtheta_degrees;
    double dphi_degrees;
    double dr_km;
    double dbz;
    double vel;
    tdrp_bool_t values_random;
    double clutter;
    double percent;
    double percent_correct;
    double start_minutes;
    double lifetime_minutes;
  } ClutterRegion_t;

  typedef struct {
    double x;
    double y;
  } Xy_t;

  ///////////////////////////
  // Member functions
  //

  ////////////////////////////////////////////
  // Default constructor
  //

  Params ();

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params (const Params&);

  ////////////////////////////////////////////
  // Destructor
  //

  virtual ~Params ();

  ////////////////////////////////////////////
  // Assignment
  //

  void operator=(const Params&);

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadFromArgs(int argc, char **argv,
                   char **override_list,
                   char **params_path_p,
                   bool defer_exit = false);

  bool exitDeferred() { return (_exitDeferred); }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadApplyArgs(const char *params_path,
                    int argc, char **argv,
                    char **override_list,
                    bool defer_exit = false);

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  static bool isArgValid(const char *arg);

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  static int isArgValidN(const char *arg);

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int load(const char *param_file_path,
           char **override_list,
           int expand_env, int debug);

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadFromBuf(const char *param_source_str,
                  char **override_list,
                  const char *inbuf, int inlen,
                  int start_line_num,
                  int expand_env, int debug);

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadDefaults(int expand_env);

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void sync() const;

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void print(FILE *out, tdrp_print_mode_t mode = PRINT_NORM);

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int checkAllSet(FILE *out);

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int checkIsSet(const char *param_name);

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int arrayRealloc(const char *param_name,
                   int new_array_n);

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int array2DRealloc(const char *param_name,
                     int new_array_n1,
                     int new_array_n2);

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void freeAll(void);

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  static void usage(ostream &out);

  ///////////////////////////
  // Data Members
  //

  char _start_; // start of data region
                // needed for zeroing out data
                // and computing offsets

  int num_threads;

  tdrp_bool_t thread_debug;

  Format_t format;

  char* template_url;

  char* template_url_field;

  int *_template_time;
  int template_time_n;

  tdrp_bool_t change_grid;

  double *_vlevel_range;
  int vlevel_range_n;

  double *_azimuth_range;
  int azimuth_range_n;

  char* output_url;

  Field_t *_fields;
  int fields_n;

  int *_start_time;
  int start_time_n;

  double simulation_length_minutes;

  double simulation_step_minutes;

  Microburst_t *_microburst;
  int microburst_n;

  Storm_t *_storm;
  int storm_n;

  Turbulence_t *_turbulence;
  int turbulence_n;

  GustFront_t *_gust_front;
  int gust_front_n;

  DeviantRay_t *_deviant_ray;
  int deviant_ray_n;

  PolarSpeck_t *_polar_speck;
  int polar_speck_n;

  CartesianSpeck_t *_cartesian_speck;
  int cartesian_speck_n;

  VelCircle_t *_vel_circle;
  int vel_circle_n;

  ClutterRegion_t *_clutter_region;
  int clutter_region_n;

  double *_ambient_vel_knots;
  int ambient_vel_knots_n;

  double ambient_dbz;

  double ambient_noise;

  double ambient_sw;

  double ambient_snr;

  double ambient_clutter;

  Xy_t *_utilda;
  int utilda_n;

  Xy_t *_stilda;
  int stilda_n;

  Xy_t *_wtilda;
  int wtilda_n;

  Xy_t *_wrmax;
  int wrmax_n;

  Xy_t *_fuzzy0;
  int fuzzy0_n;

  Xy_t *_fuzzy1;
  int fuzzy1_n;

  Xy_t *_fuzzy2;
  int fuzzy2_n;

  Xy_t *_fuzzy3;
  int fuzzy3_n;

  Xy_t *_fuzzy4;
  int fuzzy4_n;

  Xy_t *_fuzzy5;
  int fuzzy5_n;

  Xy_t *_fuzzy6;
  int fuzzy6_n;

  Xy_t *_fuzzy7;
  int fuzzy7_n;

  Xy_t *_fuzzy8;
  int fuzzy8_n;

  Xy_t *_fuzzy9;
  int fuzzy9_n;

  Xy_t *_fuzzy10;
  int fuzzy10_n;

  Xy_t *_fuzzy11;
  int fuzzy11_n;

  Xy_t *_endpoint0;
  int endpoint0_n;

  Xy_t *_endpoint1;
  int endpoint1_n;

  Xy_t *_endpoint2;
  int endpoint2_n;

  Xy_t *_endpoint3;
  int endpoint3_n;

  Xy_t *_endpoint4;
  int endpoint4_n;

  Xy_t *_endpoint5;
  int endpoint5_n;

  Xy_t *_endpoint6;
  int endpoint6_n;

  Xy_t *_endpoint7;
  int endpoint7_n;

  Xy_t *_endpoint8;
  int endpoint8_n;

  Xy_t *_endpoint9;
  int endpoint9_n;

  Xy_t *_endpoint10;
  int endpoint10_n;

  Xy_t *_endpoint11;
  int endpoint11_n;

  char _end_; // end of data region
              // needed for zeroing out data

private:

  void _init();

  mutable TDRPtable _table[61];

  const char *_className;

  bool _exitDeferred;

};

#endif

