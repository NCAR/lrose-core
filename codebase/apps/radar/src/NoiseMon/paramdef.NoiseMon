//////////////////////////////////////////////////////////////////////
// parameter definitions for NoiseMon
//
// EOL, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// Sept 2022
//
//////////////////////////////////////////////////////////////////////

commentdef {
  p_header = "NoiseMon analyses data from time series files to estimate the noise power in each channel.";
  p_text = "Reading moments from CfRadial files is also an option.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL.";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef boolean {
  p_default = false;
  p_descr = "Option to register with the process mapper.";
  p_help = "If true, this application will try to register with procmap once per minute. (If unable to do so, no error occurs.)";
} register_with_procmap;

commentdef {
  p_header = "DATA INPUT";
};

typedef enum {
  RADX_MOMENTS_INPUT, DSR_MOMENTS_INPUT, TS_FILE_INPUT, TS_FMQ_INPUT
} input_mode_t;

paramdef enum input_mode_t {
  p_default = TS_FILE_INPUT;
  p_descr = "Input mode - files or time series API.";
  p_help = "RADX_MOMENTS_INPUT: read CfRadial files. DSR_MOMENTS_INPUT: read moments data from FMQ in DSR format. TS_FMQ_INPUT: read time series from a file message queue and process the pulses as they come in. TS_FILE_INPUT: read time series from files.";
} input_mode;

commentdef {
  p_header = "REALTIME - DSR_MOMENTS_INPUT, TS_FMQ_INPUT";
};

paramdef string {
  p_default = "/tmp/fmq/ts";
  p_descr = "FMQ name. For DSR_MOMENTS_INPUT and TS_FMQ_INPUT.";
  p_help = "Path to FMQ files. There are 2 files, one with a .buf extension and one with a .stat extention. This path does not include the extensions.";
} input_fmq_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to seek to the start of the input FMQ.";
  p_help = "Applies to DSR_MOMENTS_INPUT and TS_FMQ_INPUT. If TRUE, the program will seek to the start of the fmq and read in data from the entire queue. If FALSE, it will only read new data as it is added to the FMQ.";
} seek_to_start_of_input;

commentdef {
  p_header = "ARCHIVE - RADX_MOMENTS_INPUT, TS_FILE_INPUT";
};

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files between start_time and end_time.";
  p_help = "RADX_MOMENTS_INPUT, TS_FILE_INPUT: files will be searched for in this directory. This is ignored if the list of files is  specified on the command line using the -f option.";
} input_dir;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "Set the start time for ARCHIVE mode analysis.";
  p_help = " Applies to RADX_MOMENTS_INPUT and TS_FILE_INPUT. Format is 'yyyy mm dd hh mm ss'.";
} start_time;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "Set the end time for ARCHIVE mode analysis.";
  p_help = " Applies to RADX_MOMENTS_INPUT and TS_FILE_INPUT. Format is 'yyyy mm dd hh mm ss'.";
} end_time;

commentdef {
  p_header = "COMPUTING MOMENTS FROM TIME SERIES";
  p_text = "TS_FILE_INPUT and TS_FMQ_INPUT modes";
};

paramdef int {
  p_default = 64;
  p_descr = "Number of pulse samples in a beam.";
} n_samples;

paramdef boolean {
  p_default = false;
  p_descr = "Option to invert H/V flag in pulse data.";
  p_help = "Normally, the HV flag is set to 1 for H, 0 for V. If the flag in the data has the opposite sense, set this to true.";
} invert_hv_flag;

paramdef string {
  p_default = "./spol_cal.xml";
  p_descr = "Path for XML calibration file.";
  p_help = "At a minimum, the calibration file should contain noiseDbm, receiverGainDbm, dbz0 and radarConstant values for each channel.";
} cal_xml_file_path;

commentdef {
  p_header = "READING MOMENTS FROM FMQ";
  p_text = "DSR_MOMENTS_INPUT mode only.";
};

paramdef double {
  p_default = 88.0;
  p_descr = "Minimum elevation angle (deg).";
  p_help = "Beams below this elevation angle will be ignored.";
} min_elevation;

typedef enum {

  DBMHC,
  DBMVC,
  DBMHX,
  DBMVX,
  DBZ

} moments_id_t;

typedef struct {

  moments_id_t id;
  string moments_name;
    
} input_field_t;

paramdef struct input_field_t {
  p_default = {
    { DBMHC, "DBMHC" },
    { DBMVC, "DBMVC" },
    { DBMHX, "missing" },
    { DBMVX, "missing" },
    { DBZ, "DBZ" }
  };
  p_descr = "Lookup table for field names in moments.";
  p_help = "Applies to RADX_MOMENTS_INPUT and DSR_MOMENTS_INPUT.";
} input_fields[];

commentdef {
  p_header = "AVOIDING THE SUN";
  p_text = "We want to avoid rays with angles close to the sun, since these will have elevated white noise.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to avoid rays close to the sun.";
  p_help = "If true we will not include angles within 'sun_avoidance_angle_margin_deg' of the sun.";
} avoid_the_sun;

paramdef double {
  p_default = 3.0;
  p_descr = "Angular margin for avoiding the sun (deg).";
  p_help = "We only consider rays that are outside this margin relative to the sun.";
} sun_avoidance_angle_margin_deg;

commentdef {
  p_header = "AVOIDING STRONG ECHO";
  p_text = "We want to avoid rays with strong echo, since this raises the noise floor with thermal emissions.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to avoid rays with strong echo.";
  p_help = "If true we will not include rays with strong echo.";
} avoid_strong_echo;

paramdef double {
  p_default = 35.0;
  p_descr = "Threshold for considering echo at a gate as strong (dBZ).";
  p_help = "In computing the strong echo sum, we only include gates with reflectivity in excess of this threshold.";
} strong_echo_dbz_threshold;

paramdef double {
  p_default = 250.0;
  p_descr = "Upper limit of reflectivity sum (dBZ).";
  p_help = "We add up the reflectivity at all gates with values in excess of 'strong_echo_dbz_threshold'. If the sum exceeds this max, we discard the ray.";
} strong_echo_dbz_sum_max;

commentdef {
  p_header = "COMPUTING STATISTICS";
};

paramdef int {
  p_default = 300;
  p_descr = "Time interval for statistics (s).";
  p_help = "The statistics are computed at this interval, achored at the top of the hour. The interval should divide into 3600 without a remainder.";
} stats_interval_secs;

paramdef double {
  p_default = 5.0;
  p_descr = "Minimum elevation angle for noise (deg).";
  p_help = "This should be high enough to clear all terrain, because terrain adds thermal noise to the returned signal.";
} min_elevation_deg;

paramdef double {
  p_default = 25.0;
  p_descr = "Minimum height for noise (km).";
  p_help = "This should be above all likely weather echoes.";
} min_height_km;

paramdef double {
  p_default = 100.0;
  p_descr = "Minimum range for estimating noise (km).";
  p_help = "This should be beyond any likely side-lobe echo from ground clutter.";
} min_range_km;

paramdef double {
  p_default = 140.0;
  p_descr = "Maximum range for estimating noise (km).";
  p_help = "This is important if there is a test pulse in the data at long range. If so, set this just short of the test pulse range.";
} max_range_km;

paramdef double {
  p_default = 2000;
  p_descr = "Min number of valid points for stats.";
  p_help = "A valid point is a range gate that satisfies the thresholds below.";
} min_valid_count;

paramdef double {
  p_default = -70.0;
  p_descr = "Maximum valid noise power (dBm).";
  p_help = "If either H or V noise power exceeds this, the point is discarded.";
} max_valid_noise_power_dbm;

commentdef {
  p_header = "OUTPUT STATISTICS";
};

paramdef boolean {
  p_default = true;
  p_descr = "Option to write statistics to a text file.";
  p_help = "If true, stats for the entire run will be writted to a text file.";
} write_stats_to_text_file;

paramdef string {
  p_default = "./output/text";
  p_descr = "Dir for output text files.";
  p_help = "The results will be written to sub-directories named from the data time.";
} text_output_dir;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out stats results to SPDB.";
  p_help = "The results will be written in XML, stored in SPDB. The data can then be retrieved for plotting or other purposes.";
} write_stats_to_spdb;

paramdef string {
  p_default = "./output/spdb";
  p_descr = "URL for SPDB XML.";
  p_help = "For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir";
} spdb_output_url;

paramdef string {
  p_default = "SPOL";
  p_descr = "Radar name for tagging SPDB output data.";
  p_help = "This is used to set the data_type in SPDB.";
} radar_name;

