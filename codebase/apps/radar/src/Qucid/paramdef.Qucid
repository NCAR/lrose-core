/*********************************************************
 * parameter definitions for Qucid
 *
 * Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * May 2010
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "Qucid is an integrating display for weather data products.";
  p_text = "This is a C++ application using the QT GUI toolkit. It is based on the legacy CIDD app.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Print out checks on ray memory allocation.";
  p_help = "If TRUE, the app will keep track of the number of rays allocated and freed, and print out that information every 100 rays.";
} check_ray_alloc;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to register this process with the process mapper (procmap).";
  p_help = "If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.";
} register_with_procmap;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "REALTIME DATA INPUT";
}

typedef enum {
  IWRF_FMQ_INPUT, 
  IWRF_TCP_INPUT, 
  SIMULATED_INPUT, 
  DSR_FMQ_INPUT // deprecated
} input_mode_t;

paramdef enum input_mode_t {
  p_default = IWRF_FMQ_INPUT;
  p_descr = "Method for reading the input data";
  p_help = "\tIWRF_FMQ_INPUT: read IWRF moments from an FMQ.\n\tIWRF_TCP_INPUT: read an IWRF moments stream from a TCP socket.\n\tSIMULATED_INPUT: internally-generated test pattern data.\n\tDSR_FMQ_INPUT: deprecated.";
} input_mode;

paramdef string {
  p_default = "/tmp/fmq/test";
  p_descr = "DSR_FMQ_INPUT or IWRF_FMQ_INPUT mode: input URL for moments data from an FMQ";
  p_help = "Full url is of the form fmqp:://hostname:port:path. Path does not in lude the file extension.";
} input_fmq_url;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to seek to the start of the input FMQ.";
  p_help = "If TRUE, the program will seek to the start of the fmq and read the entire contents at startup. If FALSE, it will read only new data as it arrives.";
} seek_to_start_of_fmq;

paramdef string {
  p_default = "localhost";
  p_descr = "IWRF_TCP_INPUT: name of host running IWRF moments server.";
} input_tcp_host;

paramdef int {
  p_default = 11000;
  p_descr = "IWRF_TCP_INPUT: port for IWRF moments server.";
} input_tcp_port;

paramdef int {
  p_default = 400;
  p_descr = "Size of the internal queue used to store beams.";
  p_help = "The reader runs in a separate thread, and stored the beams in a queue. The main thread then grabs the available beams from the queue as they become available.";
} beam_queue_size;

commentdef {
  p_header = "ARCHIVE MODE";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to begin in archive mode.";
  p_help = "If TRUE, the app will start up and read data from the archive_data_url, at the specified start time. If the start time is not set, the start time will be set to NOW.";
} begin_in_archive_mode;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "Start time for archive mode.";
  p_help = "In archive mode, data retrieval starts at this time.";
} archive_start_time;

paramdef double {
  p_default = 3600;
  p_descr = "Time span in ARCHIVE mode (secs).";
  p_help = "Archive end time = archive_start_time + archive_time_span.";
} archive_time_span_secs;

paramdef string {
  p_default = ".";
  p_descr = "URL for archive data files.";
  p_help = "This should point to a CfRadial moments data set.";
} archive_data_url;

commentdef {
  p_header = "STATUS TO BE SHOWN IN GUI";
}

typedef struct {

  boolean azimuth;
  boolean elevation;
  boolean fixed_angle;
  boolean volume_number;
  boolean sweep_number;
  boolean n_samples;
  boolean n_gates;
  boolean gate_length;
  boolean pulse_width;
  boolean prf_mode;
  boolean prf;
  boolean nyquist;
  boolean max_range;
  boolean unambiguous_range;
  boolean measured_power_h;
  boolean measured_power_v;
  boolean scan_name;
  boolean scan_mode;
  boolean polarization_mode;
  boolean latitude;
  boolean longitude;
  boolean altitude;
  boolean altitude_rate;
  boolean sun_elevation;
  boolean sun_azimuth;
  boolean speed;
  boolean heading;
  boolean track;

} show_status_t;

paramdef struct show_status_t {

  p_default = {
    azimuth = true,
    elevation = true,
    fixed_angle = true,
    volume_number = false,
    sweep_number = true,
    n_samples = true,
    n_gates = true,
    gate_length = true,
    pulse_width = true,
    prf_mode = true,
    prf = true,
    nyquist = true,
    max_range = true,
    unambiguous_range = true,
    measured_power_h = false,
    measured_power_v = false,
    scan_name = false,
    scan_mode = true,
    polarization_mode = true,
    latitude = true,
    longitude = true,
    altitude = true,
    altitude_rate = false,
    sun_elevation = true,
    sun_azimuth = true,
    speed = false,
    heading = false,
    track = false
  };

  p_descr = "Indicate which status items to show in GUI.";

  p_help = "These items are shown in the left panel in the GUI. Setting an item to false will hide it in the GUI.";

} show_status_in_gui;

commentdef {
  p_header = "FIELDS TO BE DISPLAYED";
}

paramdef string {
  p_default = "$(HOME)/git/lrose-displays/color_scales";
  p_descr = "Directory for color scales";
  p_help = "You can set this in 2 ways:\n\n(a) Set to the absolute path\n\n(b)Set as a path relative to the location of the application binary executable.";
} color_scale_dir;

typedef enum {
  POLYGONS,
  FILLED_CONTOURS,
  DYNAMIC_CONTOURS,
  LINE_CONTOURS
} render_mode_t;

typedef struct {
  string button_label;
  string legend_label;
  string url;
  string field_name;
  string color_map;
  string units;
  double contour_low;
  double contour_high;
  double contour_interval;
  render_mode_t render_mode;
  boolean display_in_menu;
  boolean background_render;
} field_t;

paramdef struct field_t {
  p_default = {
    {
      button_label = "DBZ_F",
      legend_label = "DBZ_F",
      url = "mdvp:://front.eol.ucar.edu:8080:dynamo/cfradial/orig/moments/sband/sur",
      field_name = "DBZ_F",
      color_map = "dbz.colors",
      units = "dBZ",
      contour_low = -5,
      contour_high = 80,
      contour_interval = 5,
      render_mode = POLYGONS,
      display_in_menu = true,
      background_render = false
    }
    ,
    {
      button_label = "VEL_F",
      legend_label = "VEL_F",
      url = "mdvp:://front.eol.ucar.edu:8080:dynamo/cfradial/orig/moments/sband/sur",
      field_name = "VEL_F",
      color_map = "vel.colors",
      units = "m/s",
      contour_low = -5,
      contour_high = 80,
      contour_interval = 5,
      render_mode = POLYGONS,
      display_in_menu = true,
      background_render = false
    }
  };
  p_descr = "Fields to be displayed.";
  p_help =
    "/nbutton_label: appears on the GUI. "
    "/nlegend_label: appears in the plot. "
    "/nurl: location of data or data server. "
    "/nfield_name: name in the file. "
    "/ncolor_map: name of color map in color_scale_dir. "
    "/nunits: units to appear on the display. "
    "/ncontour_low: contour rendering lower limit. "
    "/ncontour_high: contour rendering upper limit. "
    "/ncontour_interval: contour rendering interval. "
    "/nrender_mode:"
    "/n  cart: Rectangle/polygon fills of gridded data."
    "/n  cont: false color filled contours."
    "/n  lcont: line contours."
    "/n  dcont: dynamic contours, auto switching between cart and cont."
    "/n         uses dynamic_contour_treshold.";
} fields[];

paramdef double {
  p_default = 2.0;
  p_descr = "Background rendering time period in minutes.";
  p_help = "Any field which is viewed will continue to be rendered in the "
           "background for this number of minutes.";
  p_min = 0.0;
} background_render_mins;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use field label in the display title.";
  p_help = "If TRUE, the label will be used in the title. If FALSE, the raw_name or filtered name will be used.";
} use_field_label_in_title;

commentdef {
  p_header = "SET MAX RANGE";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set the max range to be used for plotting.";
  p_help = "If FALSE, the max range of the data will be used. If TRUE, max_range_km will override the max range in the data.";
} set_max_range;

paramdef double {
  p_default = 225.0;
  p_descr = "Max range for the display (km).";
} max_range_km;

commentdef {
  p_header = "DISPLAY TYPE";
}

typedef enum
{
  POLAR_DISPLAY,
  BSCAN_DISPLAY
} display_mode_t;

paramdef enum display_mode_t
{
  p_descr = "Main display mode.";
  p_help =
  "\tPOLAR_DISPLAY - normal HORIZ and VERT display. "
  "\tBSCAN_DISPLAY - BSCAN mode.\n";
  p_default = POLAR_DISPLAY;
} display_mode;

commentdef {
  p_header = "NAMES AND LABELS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override radar name in the data.";
} override_radar_name;

paramdef string {
  p_default = "SPOL";
  p_descr = "Radar name if overridden.";
} radar_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to display the site name in the left panel.";
} display_site_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override site name in the data.";
} override_site_name;

paramdef string {
  p_default = "MARSHALL";
  p_descr = "Site name if overridden.";
} site_name;

commentdef {
  p_header = "WINDOW DIMENSIONS AND PLOTTING DETAILS";
}

paramdef int {
  p_default = 1100;
  p_descr = "Startup width of main window (pixels).";
} main_window_width;

paramdef int {
  p_default = 635;
  p_descr = "Startup height of main window (pixels).";
} main_window_height;

paramdef int {
  p_default = 0;
  p_descr = "Startup X for main window (pixels).";
} main_window_start_x;

paramdef int {
  p_default = 0;
  p_descr = "Startup Y for main window (pixels).";
} main_window_start_y;

paramdef int {
  p_default = 40;
  p_descr = "Width of color scale (pixels).";
} color_scale_width;

paramdef int {
  p_default = 12;
  p_descr = "Basic font size for labels (pixels).";
  p_help = "Some of the labels are scaled relative to this size.";
} label_font_size;

paramdef string {
  p_default = "black";
  p_descr = "Color of main display background.";
} background_color2;

paramdef string {
  p_default = "yellow";
  p_descr = "Color of text annotation in main display.";
} text_color;

paramdef string {
  p_default = "white";
  p_descr = "Color of grids and range rings.";
} grid_and_range_ring_color;

paramdef int {
  p_default = 8;
  p_descr = "Font size for labels on range rings (pixels).";
} range_ring_label_font_size;

paramdef string {
  p_default = "cyan";
  p_descr = "Color of cross at click point.";
} click_cross_color;

paramdef int {
  p_default = 11;
  p_descr = "Size of cross at click point (pixels).";
  p_help = "Size of cross drawn at click point, to select data.";
} click_cross_size;

paramdef int {
  p_default = 1;
  p_descr = "Line width for click cross.";
} click_cross_line_width;

commentdef {
  p_header = "HORIZ MODE DISPLAY";
}

typedef enum
{
  HORIZ_FULL,
  HORIZ_AIRBORNE
} horiz_display_type_t;

paramdef enum horiz_display_type_t
{
  p_descr = "Type of display to use for the HORIZ window.";
  p_help = "\tHORIZ_FULL - Display the full 360 degrees of the HORIZ. "
           "This is the default.\n"
           "\tHORIZ_AIRBORN - Use the airborn radar HORIZ display. "
           "This display shows just the 180 degrees of radar pointing forward "
           "from the nose of the plane.\n";
  p_default = HORIZ_FULL;
} horiz_display_type;

paramdef double {
  p_default = 1.0;
  p_descr = "Aspect ratio (width/height) of HORIZ window.";
  p_descr = "Set to -1 to allow aspect ratio to vary as the main window is resized.";
} horiz_aspect_ratio;

paramdef boolean {
  p_default = false;
  p_descr = "Set HORIZ grids overlay on at startup.";
} horiz_grids_on_at_startup;

paramdef boolean {
  p_default = true;
  p_descr = "Set HORIZ range rings overlay on at startup.";
} horiz_range_rings_on_at_startup;

paramdef boolean {
  p_default = true;
  p_descr = "Set HORIZ azimuth lines overlay on at startup.";
} horiz_azimuth_lines_on_at_startup;

typedef enum {
  LEGEND_TOP_LEFT, LEGEND_TOP_RIGHT, LEGEND_BOTTOM_LEFT, LEGEND_BOTTOM_RIGHT
} legend_pos_t;

paramdef enum legend_pos_t {
  p_default = LEGEND_TOP_LEFT;
  p_descr = "Position of main legend in the HORIZ plot window";
  p_help = "This include time, field name and elevation angle.";
} horiz_main_legend_pos;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the azimuth beam width for rendering.";
  p_help = "Normally Qucid determines the azimuth rendering beam width automatically. You can override this and specifcally set the azimuth beam width for rendering.";
} horiz_override_rendering_beam_width;

paramdef double {
  p_default = 1.0;
  p_descr = "Rendering beam width, if override is active.";
  p_help = "See 'horiz_override_rendering_beam_width'";
} horiz_rendering_beam_width;

commentdef {
  p_header = "VERT MODE DISPLAY";
}

paramdef int {
  p_default = 500;
  p_descr = "Startup width of VERT window (pixels).";
} vert_window_width;

paramdef int {
  p_default = 500;
  p_descr = "Startup height of VERT window (pixels).";
} vert_window_height;

paramdef int {
  p_default = 1100;
  p_descr = "Startup X for VERT window (pixels).";
} vert_window_start_x;

paramdef int {
  p_default = 0;
  p_descr = "Startup Y for VERT window (pixels).";
} vert_window_start_y;

paramdef int {
  p_default = 20;
  p_descr = "Height of top margin in VERT mode (pixels).";
  p_help = "Titles go in the top margin.";
} vert_top_margin2;

paramdef int {
  p_default = 20;
  p_descr = "Height of bottom margin in VERT mode (pixels).";
  p_help = "Time scale goes in the bottom margin.";
} vert_bottom_margin;

paramdef int {
  p_default = 20;
  p_descr = "Width of left margin in VERT mode (pixels).";
  p_help = "Height scale goes in the left margin.";
} vert_left_margin2;

paramdef int {
  p_default = 20;
  p_descr = "Width of right margin in VERT mode (pixels).";
  p_help = "Height scale goes in the right margin.";
} vert_right_margin2;

paramdef int {
  p_default = 8;
  p_descr = "Font size for labels on range rings (pixels).";
} vert_label_font_size;

paramdef int {
  p_default = 7;
  p_descr = "Length of ticks on axes (pixels).";
} vert_axis_tick_len;

paramdef int {
  p_default = 7;
  p_descr = "Ideal number of ticks on axes.";
} vert_n_ticks_ideal;

paramdef int {
  p_default = 5;
  p_descr = "Margin around some text (pixels).";
} vert_text_margin;

paramdef boolean {
  p_default = false;
  p_descr = "Flag indicating to display full 180 degrees in VERT window. "
            "If set to false, the VERT window will just display 90 degrees "
            "of the VERT.";
} vert_display_180_degrees;

paramdef double {
  p_default = 1.0;
  p_descr = "Aspect ratio (width/height) of VERT window.";
  p_descr = "Set to -1 to allow aspect ratio to vary as the VERT window is resized.";
} vert_aspect_ratio;

paramdef double {
  p_default = 25.0;
  p_descr = "Max height of data in VERT window (km).";
  p_descr = "This can be adjusted interactively.";
} vert_max_height_km;

paramdef int {
  p_default = 40;
  p_descr = "Width of color scale for VERT window (pixels).";
} vert_color_scale_width;

paramdef boolean {
  p_default = true;
  p_descr = "Set VERT grids overlay on at startup.";
} vert_grids_on_at_startup;

paramdef boolean {
  p_default = true;
  p_descr = "Set VERT range rings overlay on at startup.";
} vert_range_rings_on_at_startup;

paramdef boolean {
  p_default = false;
  p_descr = "Set VERT elevation lines overlay on at startup.";
} vert_elevation_lines_on_at_startup;

paramdef enum legend_pos_t {
  p_default = LEGEND_TOP_LEFT;
  p_descr = "Position of main legend in the VERT plot window";
  p_help = "This include time, field name and elevation angle.";
} vert_main_legend_pos;

paramdef int {
  p_default = 360;
  p_descr = "Size of the queue for VERT beams.";
  p_help = "After the queue reaches this size, older beams are discarded.";
} vert_beam_queue_size;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the azimuth beam width for rendering.";
  p_help = "Normally Qucid determines the azimuth rendering beam width automatically. You can override this and specifcally set the azimuth beam width for rendering.";
} vert_override_rendering_beam_width;

paramdef double {
  p_default = 1.0;
  p_descr = "Rendering beam width, if override is active.";
  p_help = "See 'vert_override_rendering_beam_width'";
} vert_rendering_beam_width;

commentdef {
  p_header = "BSCAN TIME LIMITS";
}

paramdef double {
  p_default = 60;
  p_descr = "Number of seconds in BSCAN display.";
  p_help = "In REALTIME mode, when we reach the right-hand side of the display, the existing plot will be moved left to make room for more data.";
} bscan_time_span_secs;

paramdef boolean {
  p_default = false;
  p_descr = "Option to truncate the plot start time to even seconds.";
  p_help = "If true, we truncate the start time to the previous second.";
} bscan_truncate_start_time;

paramdef int {
  p_default = 3;
  p_descr = "Precision of subseconds in time labels.";
  p_help = "Number of decimals of precision in time labels. Set to 0 for times in integer seconds.";
  p_min = 0;
  p_max = 9;
} bscan_subsec_precision;

commentdef {
  p_header = "BSCAN REALTIME CONTROLS";
}

paramdef double {
  p_default = 0.5;
  p_descr = "What fraction of the existing data to save when moving the plot to the left.";
  p_help = "When we reach the right-hand side of the display, we need to move the plot to the left. This is the fraction of the plot that is saved after the move has taken place.";
} bscan_realtime_fraction_saved;

paramdef double {
  p_default = 0.01;
  p_descr = "Min time between incoming beams (secs).";
  p_help = "If beams arrive too fast, we discard some so that the time between the beams is at least this long.";
} bscan_min_secs_between_reading_beams;

paramdef double {
  p_default = 0.0;
  p_descr = "Min time between rendering (secs).";
  p_help = "Setting this higher makes the display less smooth, but prevents the display from taking up too much CPU and/or GPU.";
} bscan_min_secs_between_rendering_beams;

commentdef {
  p_header = "BSCAN RANGE AND ALTITUDE LIMITS";
}

paramdef boolean {
  p_default = true;
  p_descr = "Specify the min and max range when in range mode.";
  p_help = "If false, we will use the start range and max range in the data.";
} bscan_specify_range_limits;

paramdef double {
  p_default = 0;
  p_descr = "Min range to be plotted (km).";
  p_help = "Used if 'bscan_specify_range_limits' is true.";
} bscan_min_range_km;

paramdef double {
  p_default = 25;
  p_descr = "Max range to be plotted (km).";
  p_help = "Used if 'bscan_specify_range_limits' is true.";
} bscan_max_range_km;

paramdef double {
  p_default = -0.5;
  p_descr = "Min altitude plotted (km).";
} bscan_min_altitude_km;

paramdef double {
  p_default = 25;
  p_descr = "Max altitude plotted (km).";
} bscan_max_altitude_km;

paramdef boolean {
  p_default = false;
  p_descr = "Use feet for altitude units?";
  p_descr = "If true, kft (kilofeet) will be used. If false, km will be used.";
} bscan_altitude_in_feet;

paramdef boolean {
  p_default = false;
  p_descr = "Use feet for range units?";
  p_descr = "If true, kft (kilofeet) will be used. If false, km will be used.";
} bscan_range_in_feet;

typedef enum {
  RANGE_AXIS_UP, RANGE_AXIS_DOWN, RANGE_AXIS_ALTITUDE
} range_axis_mode_t;

paramdef enum range_axis_mode_t {
  p_default = RANGE_AXIS_ALTITUDE;
  p_descr = "Options for plotting range in the vertical scale.";
  p_help = "RANGE_AXIS_UP - instrument is at the bottom, range plotted positively upwards. RANGE_AXIS_DOWN: instrument is at the top, range plotted downwards. RANGE_AXIS_ALTITUDE: vertical scale represents the altitude of the gates in earth coordinates.";
} bscan_range_axis_mode;

commentdef {
  p_header = "BSCAN ANGLE LIMITS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Specify the min and max elevation angle.";
  p_help = "If true, only beams within the specified limits will be plotted.";
} bscan_specify_elevation_limits;

paramdef double {
  p_default = 89;
  p_descr = "Min elevation angle to be plotted (deg).";
  p_help = "Used if 'bscan_specify_elevation_limits' is true.";
} bscan_min_elevation_deg;

paramdef double {
  p_default = 91;
  p_descr = "Max elevation angle to be plotted (deg).";
  p_help = "Used if 'bscan_specify_elevation_limits' is true.";
} bscan_max_elevation_deg;

paramdef boolean {
  p_default = false;
  p_descr = "Specify the min and max azimuth angle.";
  p_help = "If true, only beams within the specified limits will be plotted.";
} bscan_specify_azimuth_limits;

paramdef double {
  p_default = 89;
  p_descr = "Min azimuth angle to be plotted (deg).";
  p_help = "Used if 'bscan_specify_azimuth_limits' is true.";
} bscan_min_azimuth_deg;

paramdef double {
  p_default = 91;
  p_descr = "Max azimuth angle to be plotted (deg).";
  p_help = "Used if 'bscan_specify_azimuth_limits' is true.";
} bscan_max_azimuth_deg;

commentdef {
  p_header = "BSCAN CENSOR DATA BELOW SURFACE";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to censor data below the measured surface";
  p_descr = "If true, and we can identify the surface echo, suppress data below the surface.";
} bscan_censor_data_below_surface;

paramdef string {
  p_default = "DBZ";
  p_descr = "Name of field used to identify the surface from the data.";
  p_help = "The surface will be identified at the gate with the maximum value in this field.";
} bscan_surface_field;

paramdef double {
  p_default = 0.5;
  p_descr = "Minumum range to the surface (km).";
  p_help = "We will search for the surface echo in the gates beyound this range.";
} bscan_min_range_to_surface_km;

paramdef double {
  p_default = 0.2;
  p_descr = "Margin of data plotted beyond the surface (km).";
  p_help = "We will censor the data beyond the surface gate, plus this range margin.";
} bscan_surface_range_margin_km;

paramdef double {
  p_default = 5;
  p_descr = "Maximum value of the surface field, below the measured surface.";
  p_help = "After finding the range to the surface, we inspect the surface_field values below the surface. If we find values that exceed this parameter, we conclude that the surface cannot be reliably found.";
} bscan_max_field_val_below_surface;

commentdef {
  p_header = "BSCAN MARGINS";
}

paramdef int {
  p_default = 40;
  p_descr = "Height of top margin in BSCAN mode (pixels).";
  p_help = "Titles go in the top margin.";
} bscan_top_margin;

paramdef int {
  p_default = 45;
  p_descr = "Height of bottom margin in BSCAN mode (pixels).";
  p_help = "Time scale goes in the bottom margin.";
} bscan_bottom_margin;

paramdef int {
  p_default = 50;
  p_descr = "Width of left margin in BSCAN mode (pixels).";
  p_help = "Height scale goes in the left margin.";
} bscan_left_margin;

paramdef int {
  p_default = 40;
  p_descr = "Width of right margin in BSCAN mode (pixels).";
  p_help = "Height scale goes in the right margin.";
} bscan_right_margin;

paramdef int {
  p_default = 6;
  p_descr = "Length of ticks on axes (pixels).";
} bscan_axis_tick_len;

paramdef int {
  p_default = 10;
  p_descr = "Ideal number of ticks on axes.";
} bscan_n_ticks_ideal;

paramdef int {
  p_default = 5;
  p_descr = "Margin around some text (pixels).";
} bscan_text_margin;

commentdef {
  p_header = "BSCAN TITLES, LABELS AND AXES";
}

paramdef int {
  p_default = 12;
  p_descr = "Font size of center title (pixels).";
} bscan_title_font_size;

paramdef int {
  p_default = 10;
  p_descr = "Font size of axis labels in bscan (pixels).";
} bscan_axis_label_font_size;

paramdef int {
  p_default = 8;
  p_descr = "Font size of axis values (pixels).";
} bscan_axis_values_font_size;

paramdef string {
  p_default = "white";
  p_descr = "Color of axes in bscan.";
} bscan_axes_color;

paramdef string {
  p_default = "gray";
  p_descr = "Color of grid lines on bscan.";
} bscan_grid_color;

paramdef string {
  p_default = "white";
  p_descr = "Color of labels in bscan.";
} bscan_labels_color;

paramdef boolean {
  p_default = true;
  p_descr = "Option to draw grid lines across plot at regular time intervals.";
} bscan_draw_time_grid_lines;

paramdef boolean {
  p_default = true;
  p_descr = "Option to draw grid lines across plot at regular range intervals.";
} bscan_draw_range_grid_lines;

paramdef boolean {
  p_default = true;
  p_descr = "Option to draw a line for the instrument location.";
  p_descr = "Applies to RANGE_AXIS_SCALE_ALTITUDE option only.";
} bscan_draw_instrument_height_line;

paramdef string {
  p_default = "white";
  p_descr = "Color of instrument height line in ALTITUDE plot.";
} bscan_instrument_height_color;

commentdef {
  p_header = "DISTANCE SCALE";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to plot distance as well as time on the time axis.";
  p_help = "If true, extra tick marks will show the distance in km along the time axis, in addition to the time.";
} bscan_add_distance_to_time_axis;

paramdef int {
  p_default = 50;
  p_descr = "Number of segments to be used for computing distance.";
  p_help = "We divide the rays into this number of segments and then compute the distance travelled during each segment using the change in lat/lon position. We keep the number of segments reasonably small to avoid unnecessary CPU usage.";
} bscan_n_segments_for_computing_distance;

commentdef {
  p_header = "BSCAN LEGENDS";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to plot the starting lat/lon position as a legend.";
  p_help = "This helps in geolocating the data from a mobile system.";
} bscan_plot_starting_latlon_as_legend;

paramdef enum legend_pos_t {
  p_default = LEGEND_TOP_LEFT;
  p_descr = "Position of lat/lon legend in plot";
  p_help = "The starting latitude/longitude will be plotted as a legend in the location specified. See 'bscan_plot_starting_latlon_as_legend'.";
} bscan_starting_latlon_legend_pos;

paramdef boolean {
  p_default = true;
  p_descr = "Option to plot the mean track and speed in a legend.";
  p_help = "This helps in geolocating the data from a mobile system.";
} bscan_plot_mean_track_and_speed_as_legend;

paramdef enum legend_pos_t {
  p_default = LEGEND_TOP_RIGHT;
  p_descr = "Position of track/speed legend in plot";
  p_help = "The mean track and speed will be plotted as a legend in the location specified. See 'bscan_plot_track_and_speed_as_legend'.";
} bscan_mean_track_and_speed_legend_pos;

commentdef {
  p_header = "BSCAN DWELL CONTROLS";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Compute dwell from image size and time range.";
  p_help = "If TRUE, we compute the optimal dwell so that there will be approximately 1 dwell for each pixel in the resulting image. If FALSE, the dwell is specified below.";;
} bscan_archive_dwell_auto;

paramdef double {
  p_default = 0.1;
  p_descr = "Specified dwell time for archive mode (secs).";
} bscan_archive_dwell_secs;

typedef enum {
  DWELL_STATS_MEAN = 0,
  DWELL_STATS_MEDIAN = 1,
  DWELL_STATS_MAXIMUM = 2,
  DWELL_STATS_MINIMUM = 3,
  DWELL_STATS_MIDDLE = 4
} bscan_dwell_stats_t;

paramdef enum bscan_dwell_stats_t {
  p_default = DWELL_STATS_MIDDLE;
  p_descr = "Method for computing stats on the dwell.";
  p_help = "Applies to READ_RAYS_IN_INTERVAL mode. MIDDLE refers to the middle ray in the dwell sequence.";
} bscan_dwell_stats;

commentdef {
  p_header = "SAVING IMAGES TO FILE";
  p_text =
    "In creating files for the field catalog, the file name is of the form:\n\n"
    "\tcategory.platform.YYYYMMDDHHmm.product_name.ext\n\n"
    "The following parameters control the output directory, and the construction of the file name";
}

paramdef string {
  p_default = "/tmp/images/Qucid";
  p_descr = "Output directory for images generated by this app.";
} images_output_dir;

paramdef boolean {
  p_default = true;
  p_descr = "Option to create a subdirectory for each day.";
  p_descr = "If true, a subdirectory named YYYYMMDD will be appended to images_output_dir.";
} images_write_to_day_dir;

paramdef string {
  p_default = "radar";
  p_descr = "Set the category string.";
  p_help = "If empty, no category will be included.";
} images_file_name_category;

paramdef string {
  p_default = "NSF_NCAR_GV_HCR";
  p_descr = "Set the platform string.";
  p_help = "If empty, no platform will be included.";
} images_file_name_platform;

paramdef string {
  p_default = "png";
  p_descr = "Set the extension string. This also governs the file format. It should be 'png', 'jpg', 'gif' etc.";
  p_help = "An extension is always required";
} images_file_name_extension;

paramdef string {
  p_default = ".";
  p_descr = "Set the delimiter between the parts of the file name.";
  p_help = "NOTE: before the extension the delimited is always a period: '.'.";
} images_file_name_delimiter;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the file name includes a time part: YYYYMMDDHHMMSS.";
  p_help = "If FALSE, the time part will be omitted.";
} images_include_time_part_in_file_name;

paramdef boolean {
  p_default = false;
  p_descr = "Normally the time part include the seconds: YYYYMMDDHHMMSS.";
  p_help = "If FALSE, the SS will be excluuded from the time part.";
} images_include_seconds_in_time_part;

paramdef boolean {
  p_default = true;
  p_descr = "Normally the file name includes the field label (product type).";
  p_help = "If FALSE, the field label will be omitted.";
} images_include_field_label_in_file_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to include the scan type in the image file name.";
  p_help = "If TRUE, the scan type will be added to the image file name.";
} images_include_scan_type_in_file_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to include the scan Id in the image file name.";
  p_help = "If TRUE, the scan Id will be added to the image file name.";} images_include_scan_id_in_file_name;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write latest_data_info files when an image is created.";
  p_descr = "If true, _latest_data_info files will be written to the output directory, and the file write will be registered with the DataMapper.";
} images_write_latest_data_info;

commentdef {
  p_header = "OPTION TO CREATE IMAGES AUTOMATICALLY";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to create images automatically.";
  p_descr = "If true, images will either be created on a schedule, or the images will be created for a single time and the app will then exit.";
} images_auto_create;

typedef enum {
  CREATE_IMAGES_THEN_EXIT,
  CREATE_IMAGES_ON_REALTIME_SCHEDULE,
  CREATE_IMAGES_ON_ARCHIVE_SCHEDULE
} images_creation_mode_t;

paramdef enum images_creation_mode_t {
  p_default = CREATE_IMAGES_THEN_EXIT;
  p_descr = "Mode for controlling auto image creation.";
  p_help = "\n\nCREATE_IMAGES_FROM_GUI: create images interactively using the GUI.\n\nCREATE_IMAGES_THEN_EXIT: for the specified start time and time span, create an output image for every field in the fields array, and then exit.\n\nCREATE_IMAGES_ON_REALTIME_SCHEDULE: wait for the scheduled time, then generate an image for each field.\n\nCREATE_IMAGES_ON_ARCHIVE_SCHEDULE: for each scheduled time between the start and end times, generate an image for each field.";
} images_creation_mode;

paramdef int {
  p_default = 300;
  p_descr = "Interval at which images are created on schedule (secs).";
  p_help = "The application waits until the interval has passed, plus any specified delay, and then creates the images.";
} images_schedule_interval_secs;

paramdef int {
  p_default = 60;
  p_descr = "Delay between scheduled time and image creation (secs).";
  p_help = "In order to ensure that the data has been written, a delay may be provided. This allows for the writing application to complete writing the data before this application tries to access it.";
} images_schedule_delay_secs;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "Start time for image generation in archive mode.";
  p_help = "Image generation starts with a seach at this time, and the proceeds at increments of images_schedule_interval_secs.";
} images_archive_start_time;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "End time for image generation in archive mode.";
  p_help = "Image generation is terminated when the search time exceeds this end time.";
  p_help = "Only applicable for image generation.";
} images_archive_end_time;

paramdef int {
  p_default = 300;
  p_descr = "Time between scans in archive mode (secs).";
  p_help = "Only applies to POLAR (HORIZ/VERT) mode, not BSCAN mode.";
} images_scan_interval_secs;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to specify the sweep indexes for the image generation.";
  p_help = "If TRUE, only the specified sweeps will be processed.";
} images_set_sweep_index_list;

paramdef int {
  p_default = { 0, 1, 2 };
  p_descr = "List of valid sweep indexes for image generation.";
  p_help = "See 'images_set_sweep_index_list'. Images will only be generated for the specified sweep indexes.";
} images_sweep_index_list[];

commentdef {
  p_header = "SIMULATION MODE";
}

paramdef int {
  p_default = 10;
  p_descr = "Number of milliseconds to sleep between beams in simulated input "
            "mode.";
} sim_sleep_msecs;

paramdef int {
  p_default = 1000;
  p_descr = "Number of gates in simulated data.";
} sim_n_gates;

paramdef double {
  p_default = 0.075;
  p_descr = "Start range in simulated mode (km).";
} sim_start_range_km;

paramdef double {
  p_default = 0.150;
  p_descr = "Gate spacing in simulated mode (km).";
} sim_gate_spacing_km;

commentdef {
  p_header = "CLICK POINT DATA MESSAGING";
  p_text = "Writing the click point location to an FMQ in XML format.";
}

paramdef string {
  p_default = "/tmp/fmq/click_point";
  p_descr = "URL for click point URL.";
  p_help = "The details of the latest click point are written to an FMQ. The format is XML. You can view the FMQ using FmqMon -mode ASCII_PRINT.";
} click_point_fmq_url;

//////////////////////////////////////////////////////////
// paramdef.Cidd_gui: Parameter definitions for gui configuration

commentdef {
  p_header = "CIDD GUI Configuration Parameters";
};

typedef struct {
  char* id_label;
  char* grid_list;
} gui_field_set_t;

paramdef struct gui_field_set_t {
  p_descr = " Groups Grids into Sets";
  p_help = " Each Entry needs:\n"
  "ID_Label  List\n"
  "\tList - Space Delimited list of grid legend names match strings.\n"
  "\tIf a group is \"ON\", then any grid whose legend label contains any "
  " of the match strings in the group list becomes active.\n"
   "\n";
  p_default = {
  };
} gui_field_list[];

//////////////////////////////////////////////////////////
// paramdef.Cidd_Draw: Parameter definitions for Human Drawn
// Products

commentdef {
  p_header = "Draw/Export Parameters";
};

typedef struct {
  char* id_label;
  char* url;
  double valid_minutes;
  int default_id_no;
  char* default_label;
} dexport_t;

paramdef struct dexport_t {
  p_default = { {"Boundry",   "/tmp/cidd.fmq",      60, 0, "A"},
                {"Boundry-b",   "/tmp/cidd.fmq",      60, 0, "B"} };
  p_descr = "Human Drawn Products for Export Parameters.";
  p_help = 
  " Each Entry needs:\n"
  "ID_Label FMQ_URL Valid_Minutes Default_ID_no"
  "    ID_LABEL - This is used to designate Product types\n"
  "    FMQ_URL: example: fmqp:://host::dir/file \n"
   "   Valid_Minutes: How many minutes the product is valid by default\n"
   "   Default_ID_no: Default Data Type (Enumerated ID)\n"
   "   Default_label: Test to place into Label field by default\n"
   "\n";
} dexport_info[];

/////////////////////////////////////////////////////////////////////////
// paramdef.CIDD_syprods
//
// This file contains the TDRP parameter definitions for CIDD
//

ccommentdef {
  p_header = "CIDD's TDRP parameters for product rendering.";
}

typedef enum {
  SYMPROD_DEBUG_OFF, SYMPROD_DEBUG_NORM, SYMPROD_DEBUG_VERBOSE
} symprod_debug_t;

paramdef enum symprod_debug_t
{
  p_default = SYMPROD_DEBUG_OFF;
  p_help = "Debug option.\n"
           "If set, debug messages will be printed appropriately.\n";
} symprod_debug;

paramdef boolean { 
  p_descr = "Gather Data Frame by Frame, Otherwise by loop span";
  p_help = "Gathers Products valid for the current frame only - Speeds up"
           " gathering of large data sets, like METAR data" ;
  p_default = FALSE;
} symprod_short_requests;

paramdef boolean { 
  p_descr = "Request data using GZIP compression";
  p_help = "If true, symprod data will be GZIP compressed by the server.";
  p_default = FALSE;
} symprod_gzip_requests;

typedef enum {
  RENDER_ALL,             // Do no temporal clipping
  RENDER_ALL_VALID,       // Render all Valid in frame
  RENDER_VALID_IN_LAST_FRAME,   // Render all Valid in the last movie frame 
  RENDER_LATEST_IN_FRAME, // Render the latest product of like data_types (ID) valid in the frame.
  RENDER_LATEST_IN_LOOP,  // Render the latest product of like data_types (ID) valid in the movie loop.
  RENDER_FIRST_BEFORE_FRAME_TIME,// Render the latest product before the end of frame time
  RENDER_FIRST_BEFORE_DATA_TIME,// Render the latest product before the data time in each frame 
  RENDER_FIRST_AFTER_DATA_TIME, // Render the earliest product after the data time in each frame 
  RENDER_ALL_BEFORE_DATA_TIME,  // Render all valid products before the data time in each frame 
  RENDER_ALL_AFTER_DATA_TIME,   // Render all valid products after the data time in each frame 
  RENDER_GET_VALID, // Render only those returned with an SPDB GetValid() call
  RENDER_GET_VALID_AT_FRAME_TIME // Render products which have not expired at the frame time
} symprod_render_type_t;

typedef struct {
  string menu_label;
  string url;
  int data_type;
  symprod_render_type_t render_type;
  boolean on_by_default;
  double minutes_allow_before;
  double minutes_allow_after;
  double text_off_threshold;
  boolean request_data_on_zoom;
  boolean request_data_on_vert_change;
} symprod_prod_info_t;

paramdef struct symprod_prod_info_t {

  p_descr = "Product Source and Rendering Information Array";
  
  p_help =
  "The fields in the structure are as follows:\n"
  "\n"
  "  menu_label: label to be used for the product in menu.\n"
  "\n"
  "  url: for retrieving the data.\n"
  "    example: spdbp:transform_executable:[param_file]//host.dom:[port]:dir1/dir2\n"
  "\n"
  "  data_type: used when querying the SPDB data server\n"
  "    (set to 0 to retrieve all data).\n"
  "\n"
  "  render_type: Select how temporal clipping is done:\n"
  "    RENDER_ALL: Do no temporal clipping.\n"
  "    RENDER_ALL_VALID: Render all Valid in frame\n"
  "    RENDER_VALID_IN_LAST_FRAME: Render all Valid in the last frame\n"
  "    RENDER_LATEST_IN_FRAME: Render the latest product of like data_types (ID)  in the frame.\n"
  "    RENDER_LATEST_IN_LOOP:  Render the latest product of like data_types (ID)  valid in the movie loop.\n"
  "    RENDER_FIRST_BEFORE_FRAME_TIME:  Render the latest product of like data_types (ID) before the end of frame time\n"
  "    RENDER_FIRST_BEFORE_DATA_TIME:   Render the latest product of like data_types (ID  before the data time in each frame.\n"
  "    RENDER_FIRST_AFTER_DATA_TIME:    Render the earliest product after the data time in each frame.\n"
  "    RENDER_ALL_BEFORE_DATA_TIME:     Render all valid products before the data time in each frame.\n"
  "    RENDER_ALL_AFTER_DATA_TIME:      Render all valid products after the data time in each frame.\n"
  "    RENDER_GET_VALID:      Render all valid products returned with a GetValid Spdb call.\n"
  "    RENDER_GET_VALID_AT_FRAME_TIME:  Render products which have not expired at the frame time\n"
  "\n"
  "Note: all comparisons are less than or equal or greater than or equal\n"
  "\n"
  "  on_by_default: True or False\n"
  "\n"
  "  minutes_allow_before: Stretch the frame time this many minutes - prior\n"
  "  minutes_allow_after: Stretch the frame time this many minutes - after\n"
  "\n"
  "  text_off_threshold: Threshold where text disappears. Use the function:\n"
  "      log10(scaling_constant/km_distance_across_screen ) + 1.0\n"
  "      Use 0.0 to disable the off feature. (always displayed)\n"
  "\n"
  "  request_data_on_zoom: Flag indicating whether to request new data for\n"
  "      this product whenever the user changes the zoom.  Normally, this\n"
  "      should be set to false for efficiency reasons.  If the products\n"
  "      to be rendered would change with a zoom change then this should be\n"
  "      set to true.\n"
  "\n"
  "  request_data_on_vert_change: Flag indicating whether to request new data\n"
  "      for this product whenever the user changes the currently displayed\n"
  "      vertical level.  Normally, this should be set to false for efficiency\n"
  "      reasons.  If the products to be rendered would change with a zoom\n"
  "      change then this should be set to true.\n"
  "\n";
  
  p_default = {
    {
      menu_label = "RHI-ticks",
      url = "spdbp:Rhi2Symprod://localhost::spdb/rhi",
      data_type = 0,
      render_type = RENDER_ALL_VALID,
      on_by_default = FALSE,
      minutes_allow_before = 20.0,
      minutes_allow_after = 10.0,
      text_off_threshold = 0.4,
      request_data_on_zoom = false,
      request_data_on_vert_change = false
    }
  };

} symprod_prod_info[];

//////////////////////////////////////////////////////////
// paramdef.Cidd_terrain: Parameter definitions for
// Terrain Data

commentdef {
  p_header = "Terrain Parameters";
  p_comment = "Note: Terrain Fields must be on the same projection as the Display";
};

paramdef string {
  p_default = "Terrain";
  p_descr = "Label used for legends";
} terrain_id_label ;

paramdef string {
  p_default = "";
  p_descr = "Used to located gridded terrain data";
  p_help = "Terrain_URL \n"
    " Note example URL:\n"
    "  mdvp::static//venus::mdv/terrain&Elevation\n"
    " Field name follows the Ampersand. Use #N for field number override "
    "  Use caret: ^ as a substitute for spaces in field names";
    "\n";
} terrain_url;

paramdef double {
  p_default = 0.03280834;
  p_descr = "Conversion from terrain units to local coords";
  p_help = "Choose a scaler which converts plane height values\n"
           "Default is Hecto-feet (FL) per meter";
} terrain_height_scaler;

paramdef string {
  p_default = "mdvp:://tempest:0:topo/relief/mdv&RGBA";
  p_descr = "Used to located gridded land use data";
  p_help = "Land Use URL \n"
    " Note URL is of the form mdvp::[param_file]//host.dom::dir/dir&field_name\n"
    " Field name follows the Ampersand. Use #N for field number override "
    "  Use caret: ^ as a substitute for spaces in field names";
    "\n";
} landuse_url;

paramdef string {
  p_default = "terrain.colors";
  p_descr = "Color lookup table for Land use";
  p_help = "Land Use colorscale file name\n"
    " Note: CIDD looks in the colorscale dir, then in the current dir for this file"; 
} landuse_colorscale;

typedef enum {
   TERRAIN_RENDER_FILLED_CONT = 1, TERRAIN_RENDER_RECTANGLES, TERRAIN_RENDER_DYNAMIC_CONTOURS
} terrain_render_type_t;

paramdef enum terrain_render_type_t {
  p_default = TERRAIN_RENDER_RECTANGLES;
  p_descr = "Land Use rendering style";
  p_help = "Use Contours only for continious data like elevation";
} land_use_render_method;

paramdef boolean {
  p_default = false;
  p_descr = "Default Display state of Land Use/ Basemap";
} landuse_active;

paramdef string {
  p_default = "sienna";
  p_descr = "Earth's skin color";
} earth_color1;

paramdef string {
  p_default = "red4";
  p_descr = "Earth's core color";
} earth_color2;

/////////////////////////////////////////////////////////////////////////
// paramdef.CIDD_images
//
// This file contains the TDRP parameter definitions for handling some
// of the CIDD image generation options.

ccommentdef {
  p_header = "CIDD's TDRP parameters for image generation.";
}

typedef enum {
  IMAGE_DEBUG_OFF, IMAGE_DEBUG_NORM, IMAGE_DEBUG_VERBOSE
} image_debug_t;

paramdef enum image_debug_t
{
  p_default = IMAGE_DEBUG_OFF;
  p_help = "Debug option.\n"
           "If set, debug messages will be printed appropriately.\n";
} image_debug;

paramdef boolean { 
  p_descr = "Generate images for specified vertical sections.";
  p_help = "If TRUE, and CIDD is in html_mode, it will generate vertical section images in addition to the normal plan view images.";
  p_default = FALSE;
} generate_vsection_images;

paramdef boolean { 
  p_descr = "The specified waypts are in latlon degree units.";
  p_help = "If TRUE, the waypts are specified in lat/lon degrees. If FALSE, they are specified in (xkm, ykm) units in the current projection.";
  p_default = FALSE;
} image_vsection_waypts_in_latlon;

typedef struct {
  string vsection_label;
  int n_waypts;
  string waypt_locs;
} image_vsection_spec_t;

paramdef struct image_vsection_spec_t {

  p_descr = "Vertical section information array";
  
  p_help =
  "The fields in the structure are as follows:\n"
  "\n"
  "  vsection_label: label to be used for the specified vertical section.\n"
  "\n"
  "  n_waypts: number of waypts for specifying the vert section.\n"
  "            Normally this is 2 - for a single vertical section segment.\n"
  "\n"
  "  waypt_locs: location of way points. This is a string with pairs of points in it, with the following format: (x, y) (x, y) ..... (x, y)\n"
  "\n";
  
  p_default = {
    {
      vsection_label = "RHI-north",
      n_waypts = 2,
      waypt_locs = "(0, 0) (0, 150)"
    }
  };

} image_vsection_spec[];

//////////////////////////////////////////////////////////
// paramdef.Cidd_routes: Parameter definitions for 
// Predefined route wind, etc support

commentdef {
  p_header = "Route Winds Parameters";
};

typedef enum {
  ROUTE_DEBUG_OFF, ROUTE_DEBUG_NORM, ROUTE_DEBUG_VERBOSE
} route_debug_t;

paramdef enum route_debug_t
{
  p_default = ROUTE_DEBUG_OFF;
  p_help = "Set to DEBUG_NORM or DEBUG_VERBOSE for diagnostic output";
} route_debug; 

paramdef int {
  p_default = 13;
  p_descr = " Maximum height in Pixels of labels";
} route_font_height;

paramdef int {
  p_default = 1;
  p_descr = "Default state of the add_waypoints_labels";
  p_help = "0 = off, 1 = on";
} route_add_waypoints_labels;

paramdef int {
  p_default = 1;
  p_descr = "Default state of the add_wind_text labels";
  p_help = "0 = off, 1 = on";
} route_add_wind_text;

typedef enum {
  REGULAR_INTERVALS, EQUAL_DIVISIONS
} route_label_style_t; 

paramdef enum route_label_style_t
{
    p_default = REGULAR_INTERVALS;
    p_help = "Set to REGULAR_INTERVALS or EQUAL_DIVISIONS";
} route_label_style;

paramdef double {
    p_default = 55.6;
    p_help =  "Used if label_style is set to REGULAR_INTERVALS";
    p_descr = "Distance in km between winds labels";
} route_label_interval;

paramdef int {
  p_default = 10;
  p_min = 2;
  p_max = 100;
  p_descr = "number of route wind labels to plot along the route.";
  p_help = "Typically this should be set between 5 and 20";
} route_num_route_labels; 

paramdef int {
  p_default = 3;
  p_min = 1;
  p_max = 20;
  p_descr = "Width in pixels of the route winds track";
} route_track_line_width;

paramdef string {
  p_default = "mdvp::zoom_mds//neptune::mdv/mm5&U"; 
  p_descr = "U Wind Componet";
  p_help = " URL's take the form  mdvp::[paramfile]//host.dom::dir/dir&fieldname\n";
} route_u_url;

paramdef string {
  p_default = "mdvp::zoom_mds//neptune::mdv/mm5&V"; 
  p_descr = "v Wind Componet";
} route_v_url;

paramdef string {
  p_default = "mdvp::d3_d4//neptune::mdv/mm5&Turb";
  p_descr = "Turbulence Index";
} route_turb_url;

paramdef double {
  p_default = 0.25;
  p_descr = "Value at which the turbulence is considered Low";
} route_turb_low_thresh;

paramdef double {
  p_default = 0.50;
  p_descr = "Value at which the turbulence is considered Moderate";
} route_turb_mod_thresh;

paramdef double {
  p_default = 0.75;
  p_descr = "Value at which the turbulence is considered High";
} route_turb_hi_thresh;

paramdef string {
  p_default = "mdvp::d3_d4//neptune::mdv/mm5&Icing";
  p_descr = "Icing Index";
} route_icing_url;

paramdef double {
  p_default = 0.25;
  p_descr = "Value at which the icing is considered Light";
} route_icing_low_thresh;

paramdef double {
  p_default = 0.50;
  p_descr = "Value at which the icing is considered Moderate";
} route_icing_mod_thresh;

paramdef double {
  p_default = 0.75;
  p_descr = "Value at which the icing is considered Heavy";
} route_icing_hi_thresh;

paramdef string {
  p_default = {
  "A-1 8 "
  "BULAN 27.0917 124.0000 "
  "OSTAR 26.3317 123.0000 "
  "SHARK 25.8333 122.3583 "
  "ANNNA 25.5717 122.0217 "
  "APU 25.1767 121.5233 "
  "HLG 24.6400 120.7833 "
  "MKG 23.5583 119.6283 "
  "ELATO 22.3333 117.5000 ",

  "M-750 12 "
  "MOLKA 26.6583 124.0000 "
  "MORSU 25.9100 123.0000 "
  "LEKOS 25.5100 122.4717 "
  "ROBIN 25.4200 122.2083 "
  "NOKAS 25.1317 121.9917 "
  "SANAS 24.8967 121.6917 "
  "PILOX 24.4150 121.0250 "
  "ANLOT 23.9417 120.5233 "
  "TOROX 23.3533 119.9083 "
  "RENOT 22.5683 118.5117 "
  "DADON 22.2767 118.0033 "
  "ENVAR 21.9917 117.5000 ",

  "G-581 7 "
  "IGURU 23.9500 124.0000 "
  "TULTO 23.3233 123.0000 "
  "HCN 21.9283 120.8433 "
  "PARPA 22.0150 120.1683 "
  "CYRUS 22.2167 118.5317 "
  "DADON 22.2767 118.0033 "
  "ELATO 22.3333 117.5000 ",

  "B-591 9 "
  "APU 25.1767 121.5233 "
  "SANAS 24.8967 121.6917 "
  "TINHO 24.3533 122.0283 "
  "TITUS 23.8283 121.8517 "
  "TACLE 22.9933 121.5867 "
  "GID 22.6733 121.4867 "
  "TUNNY 22.3600 121.2150 "
  "HCN 21.9283 120.8433 "
  "DOREX 21.0000 120.7833 ",

  "R-583 5 "
  "BORDO 26.0167 124.0000 "
  "KIKIT 25.8817 123.5917 "
  "PABSO 25.6517 122.8750 "
  "LEKOS 25.5100 122.4717 "
  "APU 25.1767 121.5233 ",

  "G-86 3 "
  "HCN 21.9283 120.8433 "
  "ANDRE 21.7783 120.1683 "
  "KAPLI 21.1667 117.5000 ",

  "B-576 3 "
  "SALMI 28.3150 124.0000 "
  "BERBA 27.0783 123.0000 "
  "APU 25.1767 121.5233 "
  };
   p_descr = " Route path strings - Format of each string is"
      "ROUTE_LABEL NPOINTS  ID_String Lat Lon ID_String LAT Lon ...\n";
   p_help = "ROUTE_LABEL will be used in the menu, \n"
      "NPoints = Number of way points in route \n"
      "  Followed by NPoint triplets of the following:\n"
      "ID_string -> usually a Airport or VOR \n"
      "Lat Lon :  decimal degrees\n";
      "\n";
      "Note: Make sure white space separates the fields!\n";
} route_paths[];

commentdef {
  p_header = "<MAIN>";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Basic debug flag.";
  p_help = "General informational messages - Initialization messages.";
} debug_flag;

paramdef boolean {
  p_default = FALSE;
  p_descr = "More verbose debug flag.";
  p_help = "Data flow related messages.";
} debug1_flag;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Verbose diagnostics.";
  p_help = "Developer debugging information.";
} debug2_flag;

paramdef string {
  p_default = "20:00 5/25/2000";
  p_descr = "Startup time for the display data.";
  p_help = "If set, start up cidd in archival mode. Starting at the indicated time. Enter HH:MM MM/DD/YY format time string. System will startup using field 0, requesting data closest to the demo time. The movie frame will be centered on the time after applying temporal rounding.";
} demo_time;

paramdef int {
  p_default = 300;
  p_descr = "Set times to the nearest value divisible by the number of seconds.";
  p_help = "";
} temporal_rounding;

paramdef string {
  p_default = "regular";
  p_descr = "Options are 'regular', 'daily' or 'yearly'";
  p_help = "Users can do this interactively by entering '1 yr' or '1 day' in the movie control panel interval text widget. CIDD will recognize these special 'intervals' and will do the right thing.";
} climo_mode;

paramdef int {
  p_default = 365;
  p_descr = "Maximum number of days over which to request time lists.";
  p_help = "If the epoch exceeds this number of days, then no time list requests will be made. Time lists requests spanning many years can take too long.";
} max_time_list_span;

commentdef {
  p_header = "Movie loops";
}

paramdef int {
  p_default = 12;
  p_descr = "This determines how many movie frames are in the loop at startup.";
  p_help = "Setting this high will cause the X server to hog memory.";
} starting_movie_frames;

paramdef double {
  p_default = 10;
  p_descr = "Minutes per movie frame on startup.";
  p_help = "The display will automatically update every this interval, throwing away its oldest movie frame and creating and drawing a new one.";
} time_interval;

paramdef double {
  p_default = 10;
  p_descr = "Span in minutes a frame covers in Climo mode.";
  p_help = "The time_interval will be either '1 day' or '1 year'";
} frame_span;

paramdef double {
  p_default = 24;
  p_descr = "This parameter sets the maximum number of hours in the future a user can select from the quick forecast menu";
  p_help = "See SHOW_FORECAST_MENU menu bar button";
} forecast_interval;

paramdef double {
  p_default = 0;
  p_descr = "The maximum number of hours in the PAST a user can selectfrom the quick forecast menu";
  p_help = "See SHOW_PAST_MENU menu bar button.";
} past_interval;

paramdef double {
  p_default = 1;
  p_descr = "When a Forecast hour is chosen, magnify the time interval by this factor.";
  p_help = "This adjusts the frame time_interval to be more appropriate for forecast (model) data, which is often output on a more coarse time interval. When 'Now' is selected the magnification is undone.";
} movie_magnify_factor;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Used to reject 'out of date' data.";
  p_help = "Set this param to TRUE to check and reject for rendering any data that falls outside the movie frame interval + the slop/stretch_factor.";
} check_data_times;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Set this parameter to TRUE when displaying data on dissimilar grid projection and stripes or other artifacts are rendered.";
  p_help = "Each polygon will be checked to make sure it will render correctly. This slows down the rendering a bit so it is FALSE by default.";
} check_clipping;

paramdef double {
  p_default = 6.0;
  p_descr = "Sets the allowable time error for data to appear in movie frames.";
  p_help = "(times the time_interval) (6 min * 6 = 36 minutes before or after the beginning or end of the movie frame times.";
} stretch_factor;

paramdef int {
  p_default = 0;
  p_descr = "Sets whether we request data closest to the midpoint of a movie frame (0) or the end (1).";
  p_help = "0= Midpoint requests(Closest_to), 1 = End point requests (First_before). Typically, real-time operation should operate as 1 (End point requests). Choose mode 0 if you want to enter a time and have data the data at that time appear, regardless of how wide the movie frame interval is.";
} gather_data_mode;

paramdef int {
  p_default = 100;
  p_descr = "Number of milliseconds between checks for images needing redrawn.";
  p_help = "Set this lower on faster hardware - Recommended 50-250. This sets the ultimate speed of the movie looping.";
} redraw_interval;

paramdef int {
  p_default = 120;
  p_descr = "Number of seconds between data update requests.";
  p_help = "The display will check the Data Mapper for new data every interval in real-time mode. At every interval we will check for updates to each grid and product. If no datamap_host is set, the data is assumed to be old and will be reloaded every interval. Set this wisely. Values of 10-900 are typical. Default=120 Setting this below 3 seconds is not advised.  interacts with the Data Mapper Host parameter: cidd.datamap_host:";
} update_interval;

paramdef string {
  p_default = "localhost";
  p_descr = "DataMapper Host";
  p_help = "Host on which the DataMapper app is running.";
} datamap_host;

paramdef int {
  p_default = 30;
  p_descr = "Number of seconds to wait for data to come in before giving up.";
  p_help = "On very slow networks this may need to go as high as 180 seconds.";
} data_timeout_secs;

paramdef int {
  p_default = 30;
  p_descr = "Length of time to wait before killing simple external commands.";
  p_help = "Used When running single image convert scripts and driving Browsers to web pages.";
} simple_command_timeout_secs;

paramdef int {
  p_default = 180;
  p_descr = "Length of time to wait before killing complex external commands.";
  p_help = "Used when spawning animation building script.";
} complex_command_timeout_secs;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Determine whether to start with movie looping on.";
  p_help = "Set to TRUE to start up in movie-on mode, FALSE = off";
} movie_on;

paramdef int {
  p_default = 3000;
  p_descr = "Set the delay at the end of the movie loop in (msec).";
  p_help = "";
} movie_delay;

paramdef int {
  p_default = 75;
  p_descr = "Set the speed of the movie loop (msec per frame).";
  p_help = "";
} movie_speed_msec;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Forces reload of all data every time the movie frames rotate one old frame out and generate a new frame.";
  p_help = "If TRUE, this will slow down data gathering for movie rendering.";
} reset_frames;

paramdef int {
  p_default = 24;
  p_descr = "Gather model run times within these number of hours from the end of the movie loop.";
  p_help = "More hours means more Model runs will appear in the menu.";
} model_run_list_hours;

paramdef int {
  p_default = 0;
  p_descr = "After this period of inactivity, the display will reset itself to a known starting point";
  p_help = "Set this <= 0 to essentially turn off.";
} idle_reset_seconds;

commentdef {
  p_header = "Image generation";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Set this to TRUE to activate automatic HTML output mode.";
  p_help = "Note: image_dir MUST be set.";
} html_mode;

paramdef boolean {
  p_default = FALSE;
  p_descr = "After this period of inactivity, the display will reset itself to a known starting point.";
  p_help = "Set this to FALSE to essentially turn off.";
} run_once_and_exit;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Set transparency of generated images.";
  p_help = "If FALSE, the normal background color is used. Set to TRUE for transparent background.";
} transparent_images;

paramdef string {
  p_default = "/tmp/image_dir";
  p_descr = "Directory for output image plots.";
  p_help = "";
} image_dir;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Save images to subdirs based on date.";
  p_help = "";
} save_images_to_day_subdir;

paramdef string {
  p_default = "png";
  p_descr = "Sets the output image type.";
  p_help = "In latest version, only png type is available.";
} image_ext;

paramdef string {
  p_default = "CP";
  p_descr = "The prefix for the horiz (plan view) image file names.";
  p_help = "";
} image_horiz_prefix;

paramdef string {
  p_default = "CV";
  p_descr = "The prefix for the vert image file names";
  p_help = "";
} image_vert_prefix;

paramdef string {
  p_default = "_";
  p_descr = "The separator used in the image file names.";
  p_help = "";
} image_name_separator;

commentdef {
  p_header = "The HTML MODE Output file name is built from parts.";
  p_text = "Some of these are optional - see related parameters below. 'Prefix' + Frame_number + legend_name + zoom_level + [button_name] + [height] + frame_time + [data_generation_time] + [data_valid_time] + .'cidd.image_ext'";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Adds height to the output file name.";
  p_help = "";
} add_height_to_filename;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Adds frame time to the output file name.";
  p_help = "";
} add_frame_time_to_filename;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Adds GUI button label to the output file name.";
  p_help = "";
} add_button_name_to_filename;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Adds frame number to the output file name.";
  p_help = "";
} add_frame_num_to_filename;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Adds model gen time to the output file name.";
  p_help = "";
} add_gen_time_to_filename;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Adds data valid time to the output file name.";
  p_help = "";
} add_valid_time_to_filename;

commentdef {
  p_header = "Separate Horizontal and Vertical Image save resources.";
  p_text = "NOTE: we append the image name to the command string before executing.This allows the script to pull the name off the command line. It is often useful to place a 'rm' as the last command to remove the image after printing, conversion, etc.";
}

paramdef string {
  p_default = "/tmp/cidd_horiz_image_dir";
  p_descr = "Image directory for horiz images.";
  p_help = "Note - this is initially set to image_dir";
} horiz_image_dir;

paramdef string {
  p_default = "cidd_horiz_view.png";
  p_descr = "The default file name until reset by the user.";
  p_help = "Appends other info automatically.";
} horiz_image_fname;

paramdef string {
  p_default = "convert_image.csh";
  p_descr = "Command to be run after image is created.";
  p_help = "Note that this is initially set to 'image_convert_script'.";
} horiz_image_command;

paramdef string {
  p_default = "/tmp/cidd_vert_image_dir";
  p_descr = "Image directory for vert images.";
  p_help = "Note - this is initially set to image_dir";
} vert_image_dir;

paramdef string {
  p_default = "cidd_vert_view.png";
  p_descr = "The default file name until reset by the user.";
  p_help = "Appends other info automatically.";
} vert_image_fname;

paramdef string {
  p_default = "convert_image.csh";
  p_descr = "Command to be run after image is created.";
  p_help = "Note that this is initially set to 'image_convert_script'.";
} vert_image_command;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Output an imagename.xml file which contains geo referencing information.";
  p_help = "If use_latlon_in_geo_xml is true, then the georeferencing information will be given in latitude/longitude values.";
} output_geo_xml;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Georef info is in lat/lon projection.";
  p_help = "For a lat/lon projection, information is always given in latitude/longitude. Otherwise projection information will be used.";
} use_latlon_in_geo_xml;

paramdef string {
  p_default = "%H%M";
  p_descr = "Set the format for the time fields in the names of output xwd images.";
  p_help = "See strftime(3) for options.  Default is: %H%M.";
} movieframe_time_format;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} movieframe_time_mode;

paramdef string {
  p_default = "convert_image.csh";
  p_descr = "This script will be exec'd if set whenever an html_mode image is output.";
  p_help = "The full path name of the xwd image will be sent as the script argument. Setting horiz_image_command or cidd.horiz_image_command will override this and allow separate scripts to be called for horiz and vert images.";
} image_convert_script;

paramdef string {
  p_default = "do_print.csh";
  p_descr = "This script will be exec'd if set whenever a print command is issued.";
  p_help = "The full path name of the xwd image will be sent as the script argument.";
} print_script;

paramdef string {
  p_default = "make_anim.csh";
  p_descr = "When the user selects the OutputLoop button, this script will be exec'd after the last image in a loop has been written.";
  p_help = "The arguments will be a list of each output file in the series. CIDD will prepend the cidd.image_dir to each file name which takes the form: cidd_field_name_zoom_name.xwd.";
} series_convert_script;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Request data from MDV servers be compressed.";
  p_help = "When a remote URL is used, the server can compress the data for transmission. This makes sense for slow remote connections.";
} request_compressed_data;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Use gzip-style compression for remote data access.";
  p_help = "See 'request_compressed_data'.";
} request_gzip_vol_compression;

paramdef string {
  p_default = "CARTESIAN";
  p_descr = "Sets the projection for the plan view.";
  p_help = "Current valid choices are: CARTESIAN, LAT_LON, LAMBERT,  POLAR_STEREO, STEREOGRAPHIC, MERCATOR. Mercator is relative to the longitude origin.";
} projection_type;

paramdef double {
  p_default = 20;
  p_descr = "Standard latitude 1.";
  p_help = "For LAMBERT projection. Ignored otherwise.";
} lambert_lat1;

paramdef double {
  p_default = 60;
  p_descr = "Standard latitude 2.";
  p_help = "For LAMBERT projection. Ignored otherwise.";
} lambert_lat2;

paramdef double {
  p_default = 90;
  p_descr = "Tangent latitude.";
  p_help = "For POLAR_STEREO, set to 90. For OBLIQUE_STEREO, set to 60.";
} tangent_lat;

paramdef double {
  p_default = 0;
  p_descr = "Tangent longitude.";
  p_help = "Applies to POLAR_STEREO and OBLIQUE_STEREO.";
} tangent_lon;

paramdef double {
  p_default = 1;
  p_descr = "Central scale factor.";
  p_help = "Applies to STEREO projections.";
} central_scale;

paramdef double {
  p_default = 0;
  p_descr = "Amount grids are rotated clockwise to true north";
  p_help = "Applies to CARTESIAN (FLAT) projection.";
} north_angle;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Diagnostic mode used to ignore the Elevation angle on polar data (radars, etc).";
  p_help = "Set to FALSE to display all polar grids as if the elevation were always 0.0 degrees. This allows one to view radial data near 90 degrees elevation.";
} use_cosine;

paramdef int {
  p_default = 1;
  p_descr = "See use_cosine.";
  p_help = "";
} use_cosine_correction;

paramdef double {
  p_default = 0.5395932;
  p_descr = "Set the scale factor and label for Range rings and Distance scales.";
  p_help = "";
} scale_units_per_km;

paramdef string {
  p_default = "km";
  p_descr = "Set the units labels.";
  p_help = "km, nm, deg";
} scale_units_label;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Request the outer domain established by domain_limit params.";
  p_help = "i.e. do not clip the data on request.";
} always_get_full_domain;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Request the whole earth or Hemisphere, centered on the origin.";
  p_help = "";
} do_not_clip_on_mdv_request;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Do not decimate on MDV request, get all points from MDV server.";
  p_help = "";
} do_not_decimate_on_mdv_request;

paramdef double {
  p_default = 5;
  p_descr = "Minimum distance to zoom into to in KM.";
  p_help = "Won't allow the user to define custom zooms small than this size (along the longest edge).";
} min_zoom_threshold;

paramdef double {
  p_default = 1;
  p_descr = "Set the aspect ratio of the domain for the display.";
  p_help = "Cidd will preserve this aspect ratio for all zooms. Ratio is Width/Height. If set <= 0.0, CIDD will compute the aspect ratio based on the extent of the first domain. Note CIDD now applies a correction to LAT_LON projections to expand the Y coords, making them appear to be equi-distant in Latitude and Longitude. Based on the cos(average latitude of the current view).";
} aspect_ratio;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Enable the status window.";
  p_help = "If FALSE, no status window is displayed.";
} enable_status_window;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Report clicks in the status window.";
  p_help = "By default distance are in km and bearings in deg T.";
} report_clicks_in_status_window;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Report click position in degrees magnetic and nautical miles.";
  p_help = "By default distance are in km and bearings in deg T.";
} report_clicks_in_degM_and_nm;

paramdef double {
  p_default = 0;
  p_descr = "Set the magnetic variation for the display location.";
  p_help = "Variation is true minus magnetic.";
} magnetic_variation_deg;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Enable the single middle button click to save image feature.";
  p_help = "Warning - will allow users shell access, or to write to other dirs.";
} enable_save_image_panel;

commentdef {
  p_header = "The Outer most domain.";
  p_text = "Overlays are clipped to this domain and pan/moves cannot exceed these edge limits. Note: CIDD does not pan on the outermost domain.\n\nNote: for Lat/Lon Domains, Choose 0-360, -90+90. to get whole earth.\n\nOne can also choose Longitude range -180 to 180, -90 to 270, etc.\nFor whole earth views, aspect ration 1.0,  set the outer most domain to -180 to 180 and -180 to 180. Otherwise, set the aspect ratio to 2.0 and use -180 to 180 and -90 to 90.";
}

paramdef double {
  p_default = -10000;
  p_descr = "Minimum X for outer domain.";
  p_help = "";
} domain_limit_min_x;

paramdef double {
  p_default = 10000;
  p_descr = "Maximum X for outer domain.";
  p_help = "";
} domain_limit_max_x;

paramdef double {
  p_default = -10000;
  p_descr = "Minimum Y for outer domain.";
  p_help = "";
} domain_limit_min_y;

paramdef double {
  p_default = 10000;
  p_descr = "Maximum Y for outer domain.";
  p_help = "";
} domain_limit_max_y;

paramdef double {
  p_default = 0;
  p_descr = "The longitude of the center of the display. Internal range rings are relative to this point.";
  p_help = "";
} origin_latitude;

paramdef double {
  p_default = 0;
  p_descr = "The latitude of the center of the display. Internal range rings are relative to this point.";
  p_help = "";
} origin_longitude;

paramdef double {
  p_default = 0;
  p_descr = "On startup and each time the reset button is pressed, the display will indicate a click at this point, as if the user had clicked.";
  p_help = "";
} reset_click_latitude;

paramdef double {
  p_default = 0;
  p_descr = "On startup and each time the reset button is pressed, the display will indicate a click at this point, as if the user had clicked.";
  p_help = "";
} reset_click_longitude;

paramdef int {
  p_default = 1;
  p_descr = "Select the data field/page to start on.";
  p_help = "For the horizontal view.";
} planview_start_page;

paramdef int {
  p_default = 1;
  p_descr = "Select the data field/page to start on.";
  p_help = "For the vertical (cross section) view.";
} xsect_start_page;

paramdef int {
  p_default = 1;
  p_descr = "The number of zoom levels.";
  p_help = "";
} num_zoom_levels;

paramdef int {
  p_default = 1;
  p_descr = "Zoom level on which to start.";
  p_help = "";
} start_zoom_level;

paramdef boolean {
  p_default = FALSE;
  p_descr = "The units of the zoom limits are in deg lat/lon.";
  p_help = "";
} zoom_limits_in_latlon;

paramdef int {
  p_default = 1;
  p_descr = "The number of Cached images for zooms.";
  p_help = "";
} num_cache_zooms;

commentdef {
  p_header = "Vertical Range and Resolution - Establishes a vertical coordinate system for the cross sectional imagery.";
  p_text = " All data must map into this range for it to be visible.\n\tmin_ht is value nearest the ground - Plotted at the bottom.\n\tmax_ht is the value furtherest from the ground - Plotted at the top.\n\nUnits are ignored and no inter conversions or re-mappings are performed.\n\nReturned cross sections are are often km, but could be sigma, pressure or degrees elevation.\n\nExamples:\n\tSigma : min_ht = 1.0, max_ht = 0.0, ht_interval = .1\n\tPressure : min_ht = 1100.0, max_ht = 100.0, ht_interval = -100\n\tRadial Radar:  min_ht = 0.0 max_ht = 25.0, ht_interval = 1.0";
}

paramdef double {
  p_default = 0;
  p_descr = "Minimum ht of cross section.";
  p_help = "";
} min_ht;

paramdef double {
  p_default = 30;
  p_descr = "Maximum ht of cross section.";
  p_help = "";
} max_ht;

paramdef double {
  p_default = 0;
  p_descr = "Starting height of horizontal view.";
  p_help = "";
} start_ht;

commentdef {
  p_header = "Finding the resources for maps/overlays, surface stations.";
  p_text = "";
}

paramdef string {
  p_default = "$(HOME)/maps";
  p_descr = "Directory for maps/overlays.";
  p_help = "";
} map_file_subdir;

paramdef double {
  p_default = 50;
  p_descr = "Station locator features.";
  p_help = "Maximum allowed  Distance in km between request point and station.";
} locator_margin_km;

paramdef string {
  p_default = "http://www.rap.ucar.edu/maps/Taiwan_stations.dat";
  p_descr = "Full Path File name or http URL to a station data file.";
  p_help = "The format of each line is:  ID, LAT, LON, ALT(m), TYPE.";
} station_loc_url;

paramdef string {
  p_default = "/tmp/remoteUI";
  p_descr = "FMQ Type URL for Receiving Remote commands.";
  p_help = "";
} remote_ui_url;

commentdef {
  p_header = "Server access.";
  p_text = "";
}

paramdef string {
  p_default = "http://www.rap.ucar.edu/DsServerTunnel.";
  p_descr = "Tunnel for all DsServer (mdvp,spdbp,etc) Protocols.";
  p_help = "USE THIS TO CROSS A FIREWALL ON THE SERVER END OF THE CHAI. Set this to the special http tunnel that resides in the same local network as the  data server hosts. This allows 'tunneling' the MDV and Spdb data protocols through a host, running apache:httpd that is visible from the Internet or intranet. Note: a special  'Apache::Mod_perl' extension (The tunnel - it's similar to a cgi mechanism) must be installed on the http server for this to work.";
} http_tunnel_url;

paramdef string {
  p_default = "http://webcache.ucar.edu:3128/";
  p_descr = "USE THIS TO CROSS A FIREWALL AT THE Client/CIDD End of the Chain.";
  p_help = "# Set this to the url of a http forwarding proxy to pass http requests through the proxy. This is usually the same as the HTTP proxy URL in your browser. Note. If you need the data to flow through the proxy the http_tunnel_url must be enabled.\n\n";
} http_proxy_url;

commentdef {
  p_header = "Another view of the possible Service Topologies.";
  p_text = "All Local - No Firewalls - Standard Setup\n--------- Local Lan --------------\nCIDD<--- MDVP --->DsMdvServer\n\nData Services Behind a firewall\n----- Internet ----|Firewall|------ Local Lan ----------------\nCIDD<---HTTP--->DsServer Tunnel<---MDVP--->DsMdvServer\n\nBoth Client and Data Services behind Firewalls\n---Local Lan ---|Firewall|--Internet----|Firewall|--------Local Lan ----------\nCIDD<---HTTP--->Http Proxy<---HTTP--->DsServer Tunnel<---MDVP--->DsMdvServer";
}

commentdef {
  p_header = "Setting colors.";
  p_text = "";
}

paramdef string {
  p_default = "white";
  p_descr = "Legends, scales.";
  p_help = "";
} foreground_color;

paramdef string {
  p_default = "black";
  p_descr = "Background of images.";
  p_help = "";
} background_color;

paramdef string {
  p_default = "black";
  p_descr = "Background of margins.";
  p_help = "";
} margin_color;

paramdef string {
  p_default = "transparent";
  p_descr = "Render values outside the data range of the color scale.";
  p_help = "";
} out_of_range_color;

paramdef string {
  p_default = "yellow";
  p_descr = "Color of the cross section reference line.";
  p_help = "";
} route_path_color;

paramdef string {
  p_default = "pink";
  p_descr = "Text in the time axis margins.";
  p_help = "";
} time_axis_color;

paramdef string {
  p_default = "gray50";
  p_descr = "A solid rectangle showing the movie frame extent.";
  p_help = "";
} time_frame_color;

paramdef string {
  p_default = "pink";
  p_descr = "The text in the height selector margin.";
  p_help = "";
} height_axis_color;

paramdef string {
  p_default = "gray50";
  p_descr = "A solid rectangle showing the height extent of the data plane.";
  p_help = "";
} height_indicator_color;

paramdef string {
  p_default = "grey";
  p_descr = "Range rings and azimuth lines.";
  p_help = "";
} range_ring_color;

paramdef string {
  p_default = "transparent";
  p_descr = "Set to 'transparent' to avoid having these plotted. ";
  p_help = "Otherwise, these data will be plotted in the indicated color.";
} missing_data_color;

paramdef string {
  p_default = "transparent";
  p_descr = "Set to 'transparent' to avoid having these plotted. ";
  p_help = "Otherwise, these data will be plotted in the indicated color.";
} bad_data_color;

paramdef string {
  p_default = "orange";
  p_descr = "Time Control (Movie) Pop-up Colors.";
  p_help = "";
} epoch_indicator_color;

paramdef string {
  p_default = "red";
  p_descr = "Color of current time tick.";
  p_help = "";
} now_time_color;

paramdef string {
  p_default = "yellow";
  p_descr = "Color of time ticks.";
  p_help = "";
} time_tick_color;

paramdef string {
  p_default = "red";
  p_descr = "Color of mark showing latest click location.";
  p_help = "";
} latest_click_mark_color;

paramdef string {
  p_default = "yellow";
  p_descr = "Color of mark showing latest click of remote client.";
  p_help = "";
} latest_client_mark_color;

commentdef {
  p_header = "Mode flags.";
  p_text = "";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Show the height selector in the right margin.";
  p_help = "oggle for displaying the height Selector in Right Margin. Note Right Margin should be at least 50 pixels wide.";
} show_height_sel;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Show data status messages at top of image.";
  p_help = "There will be one line of status for each field in the stack. This is probably not necessary in situations where all data is small and local.";
} show_data_messages;

paramdef int {
  p_default = 0;
  p_descr = "Sets the format for output of Lat, Lon's.";
  p_help = "0= Decimal Degrees, 1 = deg min' sec'.";
} latlon_mode;

paramdef string {
  p_default = "%m/%d/%y %H:%M:%S";
  p_descr = "Set the format for the time strings.";
  p_help = "See 'man strftime' for format options. Can add additional text as part of the Time string.";
} label_time_format;

paramdef string {
  p_default = "%H:%M %m/%d/%Y";
  p_descr = "Set the format for the time string in the movie start time text field of the movie pop-up window.";
  p_help = "This is set separately from the general time string because you generally don't want any extra text and want to display things in an order that allows for easier entry.";
} moviestart_time_format;

paramdef string {
  p_default = "%H:%M";
  p_descr = "Set the format for the time strings in the frame range text fields.";
  p_help = "";
} frame_range_time_format;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Plot a Legend for each Grid overlay.";
  p_help = "";
} layer_legends_on;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Plot a Legend for each Contour overlay.";
  p_help = "";
} cont_legends_on;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Plot a Legend for each Wind overlay.";
  p_help = "";
} wind_legends_on;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Switch to turn off all data labels on the display.";
  p_help = "";
} display_labels;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Switch to turn on/off Height, Route and Wind Scale reference lines.";
  p_help = "";
} display_ref_lines;

commentdef {
  p_header = "Window sizes.";
  p_text = "Window width and height is specified in pixels.";
}

paramdef int {
  p_default = 0;
  p_descr = "Startup position of main window, relative to top-left of screen (pixels).";
  p_help = "The main display window will start at this location.";
} horiz_default_x_pos;

paramdef int {
  p_default = 0;
  p_descr = "Startup position of main window, relative to top-left of screen (pixels).";
  p_help = "The main display window will start at this location.";
} horiz_default_y_pos;

paramdef int {
  p_default = 800;
  p_descr = "Default width of main window (pixels).";
  p_help = "Height of main window at startup.";
} horiz_default_width;

paramdef int {
  p_default = 600;
  p_descr = "Default height of main window (pixels).";
  p_help = "Width of main window at startup.";
} horiz_default_height;

paramdef int {
  p_default = 600;
  p_descr = "Minimum width of main window (pixels).";
  p_help = "The user cannot shrink the main window smaller than this.";
} horiz_min_width;

paramdef int {
  p_default = 400;
  p_descr = "Minimum height of main window (pixels).";
  p_help = "The user cannot shrink the main window smaller than this.";
} horiz_min_height;

commentdef {
  p_header = "Margin details.";
  p_text = "Margins are specified in pixels.";
}

paramdef int {
  p_default = 1;
  p_descr = "TOP Margin styles.";
  p_help = " 1 (Default): Places a distance scale in the top Margin. 2: Place a Frame number and Time - Used often for HTML output. 3: None -  Used often to place the Data label";
} top_margin_render_style;

paramdef int {
  p_default = 1;
  p_descr = "Bottom Margin Styles.";
  p_help = "1 - Distance Scale. 2 - Time Scale.";
} bot_margin_render_style;

paramdef int {
  p_default = 20;
  p_descr = "Height of top margin (pixels).";
  p_help = "Size of top margin for main window.";
} horiz_top_margin;

paramdef int {
  p_default = 20;
  p_descr = "Height of bottom margin (pixels).";
  p_help = "Size of bottom margin for main window.";
} horiz_bot_margin;

paramdef int {
  p_default = 20;
  p_descr = "Width of left margin (pixels).";
  p_help = "Size of left margin for main window.";
} horiz_left_margin;

paramdef int {
  p_default = 80;
  p_descr = "Width of right margin (pixels).";
  p_help = "Size of right margin for main window.";
} horiz_right_margin;

commentdef {
  p_header = "Legends displayed within the plot window.";
  p_text = "A legend can be displayed for each data layer.";
}

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} horiz_legends_start_x;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} horiz_legends_start_y;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} horiz_legends_delta_y;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} vert_default_x_pos;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} vert_default_y_pos;

paramdef int {
  p_default = 400;
  p_descr = "";
  p_help = "";
} vert_default_height;

paramdef int {
  p_default = 600;
  p_descr = "";
  p_help = "";
} vert_default_width;

paramdef int {
  p_default = 400;
  p_descr = "";
  p_help = "";
} vert_min_height;

paramdef int {
  p_default = 600;
  p_descr = "";
  p_help = "";
} vert_min_width;

paramdef int {
  p_default = 20;
  p_descr = "";
  p_help = "";
} vert_top_margin;

paramdef int {
  p_default = 20;
  p_descr = "";
  p_help = "";
} vert_bot_margin;

paramdef int {
  p_default = 20;
  p_descr = "";
  p_help = "";
} vert_left_margin;

paramdef int {
  p_default = 80;
  p_descr = "";
  p_help = "";
} vert_right_margin;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} vert_legends_start_x;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} vert_legends_start_y;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} vert_legends_delta_y;

paramdef double {
  p_default = -1;
  p_descr = "";
  p_help = "";
} range_ring_spacing;

paramdef double {
  p_default = 1000;
  p_descr = "";
  p_help = "";
} max_ring_range;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} range_ring_follows_data;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} range_ring_for_radar_only;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} domain_follows_data;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} range_rings;

paramdef int {
  p_default = 50;
  p_descr = "";
  p_help = "";
} range_ring_x_space;

paramdef int {
  p_default = 15;
  p_descr = "";
  p_help = "";
} range_ring_y_space;

paramdef boolean {
  p_default = TRUE;
  p_descr = "";
  p_help = "";
} range_ring_labels;

paramdef double {
  p_default = 30;
  p_descr = "";
  p_help = "";
} azmith_interval;

paramdef double {
  p_default = 200;
  p_descr = "";
  p_help = "";
} azmith_radius;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} azmith_lines;

paramdef boolean {
  p_default = TRUE;
  p_descr = "";
  p_help = "";
} all_winds_on;

paramdef int {
  p_default = 33;
  p_descr = "";
  p_help = "";
} barb_shaft_len;

paramdef int {
  p_default = 20;
  p_descr = "";
  p_help = "";
} ideal_x_vectors;

paramdef int {
  p_default = 20;
  p_descr = "";
  p_help = "";
} ideal_y_vectors;

paramdef int {
  p_default = 5;
  p_descr = "";
  p_help = "";
} wind_head_size;

paramdef double {
  p_default = 45;
  p_descr = "";
  p_help = "";
} wind_head_angle;

paramdef int {
  p_default = 3;
  p_descr = "";
  p_help = "";
} wind_scaler;

paramdef double {
  p_default = 10;
  p_descr = "";
  p_help = "";
} wind_time_scale_interval;

paramdef string {
  p_default = "arrow";
  p_descr = "";
  p_help = "";
} wind_marker_type;

paramdef double {
  p_default = 10;
  p_descr = "";
  p_help = "";
} wind_w_scale_factor;

paramdef double {
  p_default = 1;
  p_descr = "";
  p_help = "";
} wind_units_scale_factor;

paramdef double {
  p_default = 10;
  p_descr = "";
  p_help = "";
} wind_reference_speed;

paramdef string {
  p_default = "m/sec";
  p_descr = "";
  p_help = "";
} wind_units_label;

paramdef boolean {
  p_default = TRUE;
  p_descr = "";
  p_help = "";
} label_contours;

paramdef int {
  p_default = 1;
  p_descr = "";
  p_help = "";
} contour_line_width;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} smooth_contours;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} use_alt_contours;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} add_noise;

paramdef double {
  p_default = 0;
  p_descr = "";
  p_help = "";
} special_contour_value;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} map_bad_to_min_value;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} map_missing_to_min_value;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} draw_main_on_top;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} mark_latest_click_location;

paramdef int {
  p_default = 11;
  p_descr = "";
  p_help = "";
} latest_click_mark_size;

paramdef int {
  p_default = 1;
  p_descr = "";
  p_help = "";
} num_fonts;

paramdef int {
  p_default = 1;
  p_descr = "";
  p_help = "";
} font_display_mode;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} show_clock;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} draw_clock_local;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} use_local_timestamps;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} num_field_menu_cols;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} wsddm_mode;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} one_click_rhi;

paramdef double {
  p_default = 6;
  p_descr = "";
  p_help = "";
} rotate_coarse_adjust;

paramdef double {
  p_default = 2;
  p_descr = "";
  p_help = "";
} rotate_medium_adjust;

paramdef double {
  p_default = 0.5;
  p_descr = "";
  p_help = "";
} rotate_fine_adjust;

paramdef boolean {
  p_default = TRUE;
  p_descr = "";
  p_help = "";
} disable_pick_mode;

paramdef boolean {
  p_default = TRUE;
  p_descr = "";
  p_help = "";
} replace_underscores;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} close_popups;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} clip_overlay_fields;

paramdef string {
  p_default = "Qucid";
  p_descr = "";
  p_help = "";
} horiz_frame_label;

paramdef string {
  p_default = "NO DATA FOUND (in this area at the selected time)";
  p_descr = "";
  p_help = "";
} no_data_message;

paramdef string {
  p_default = "";
  p_descr = "";
  p_help = "";
} status_info_file;

paramdef string {
  p_default = "";
  p_descr = "";
  p_help = "";
} help_command;

paramdef string {
  p_default = "";
  p_descr = "";
  p_help = "";
} bookmark_command;

paramdef int {
  p_default = 0;
  p_descr = "";
  p_help = "";
} num_bookmarks;

paramdef double {
  p_default = 0.8;
  p_descr = "";
  p_help = "";
} image_inten;

paramdef int {
  p_default = 32;
  p_descr = "";
  p_help = "";
} inten_levels;

paramdef double {
  p_default = 1;
  p_descr = "";
  p_help = "";
} data_inten;

paramdef int {
  p_default = 120000;
  p_descr = "";
  p_help = "";
} image_fill_threshold;

paramdef int {
  p_default = 160000;
  p_descr = "";
  p_help = "";
} dynamic_contour_threshold;

paramdef int {
  p_default = 63500;
  p_descr = "";
  p_help = "";
} coord_key;

paramdef boolean {
  p_default = TRUE;
  p_descr = "";
  p_help = "";
} products_on;

paramdef int {
  p_default = 1;
  p_descr = "";
  p_help = "";
} product_line_width;

paramdef int {
  p_default = 1;
  p_descr = "";
  p_help = "";
} product_font_size;

paramdef double {
  p_default = 300;
  p_descr = "";
  p_help = "";
} scale_constant;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} wind_mode;

paramdef boolean {
  p_default = FALSE;
  p_descr = "";
  p_help = "";
} click_posn_rel_to_origin;

commentdef {
  p_header = "</MAIN>";
}

