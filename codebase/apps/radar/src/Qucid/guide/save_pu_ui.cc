// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
/*
 * save_pu_ui.c - User interface object initialization functions.
 * This file was generated by `gxv' from `save_pu.G'.
 * DO NOT EDIT BY HAND.
 */

#include <stdio.h>
#include <sys/param.h>
#include <sys/types.h>
#include <xview/xview.h>
#include <xview/canvas.h>
#include <xview/panel.h>
#include <xview/scrollbar.h>
#include <xview/svrimage.h>
#include <xview/termsw.h>
#include <xview/text.h>
#include <xview/tty.h>
#include <xview/xv_xrect.h>
#include <devguide/gcm.h>
#include "save_pu_ui.h"

/*
 * Initialize an instance of object `save_im_pu'.
 */
save_pu_save_im_pu_objects *
save_pu_save_im_pu_objects_initialize(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	if (!ip && !(ip = (save_pu_save_im_pu_objects *) calloc(1, sizeof (save_pu_save_im_pu_objects))))
		return (save_pu_save_im_pu_objects *) NULL;
	if (!ip->save_im_pu)
		ip->save_im_pu = save_pu_save_im_pu_save_im_pu_create(ip, owner);
	if (!ip->save_cp)
		ip->save_cp = save_pu_save_im_pu_save_cp_create(ip, ip->save_im_pu);
	if (!ip->fname_tx)
		ip->fname_tx = save_pu_save_im_pu_fname_tx_create(ip, ip->save_cp);
	if (!ip->dir_tx)
		ip->dir_tx = save_pu_save_im_pu_dir_tx_create(ip, ip->save_cp);
	if (!ip->cmd_tx)
		ip->cmd_tx = save_pu_save_im_pu_cmd_tx_create(ip, ip->save_cp);
	if (!ip->gen_name_bt)
		ip->gen_name_bt = save_pu_save_im_pu_gen_name_bt_create(ip, ip->save_cp);
	if (!ip->cancel_bt)
		ip->cancel_bt = save_pu_save_im_pu_cancel_bt_create(ip, ip->save_cp);
	if (!ip->save_pu_msg)
		ip->save_pu_msg = save_pu_save_im_pu_save_pu_msg_create(ip, ip->save_cp);
	if (!ip->save_bt)
		ip->save_bt = save_pu_save_im_pu_save_bt_create(ip, ip->save_cp);
	return ip;
}

/*
 * Create object `save_im_pu' in the specified instance.
 */
Xv_opaque
save_pu_save_im_pu_save_im_pu_create(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, FRAME_CMD,
		XV_KEY_DATA, INSTANCE, ip,
		XV_WIDTH, 496,
		XV_HEIGHT, 90,
		XV_LABEL, "Save/Print  Image",
		XV_SHOW, FALSE,
		FRAME_SHOW_FOOTER, FALSE,
		FRAME_SHOW_RESIZE_CORNER, FALSE,
		FRAME_CMD_PUSHPIN_IN, TRUE,
		NULL);
	xv_set(xv_get(obj, FRAME_CMD_PANEL), WIN_SHOW, FALSE, NULL);
	return obj;
}

/*
 * Create object `save_cp' in the specified instance.
 */
Xv_opaque
save_pu_save_im_pu_save_cp_create(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 0,
		XV_Y, 0,
		XV_WIDTH, WIN_EXTEND_TO_EDGE,
		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
		WIN_BORDER, FALSE,
		NULL);
	gcm_initialize_colors(obj, "Gray", NULL);
	return obj;
}

/*
 * Create object `fname_tx' in the specified instance.
 */
Xv_opaque
save_pu_save_im_pu_fname_tx_create(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	extern Panel_setting	set_fname_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TEXT,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 4,
		XV_Y, 6,
		PANEL_VALUE_DISPLAY_LENGTH, 54,
		PANEL_VALUE_STORED_LENGTH, 120,
		PANEL_LABEL_STRING, "Name:",
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_READ_ONLY, FALSE,
		PANEL_NOTIFY_PROC, set_fname_proc,
		NULL);
	return obj;
}

/*
 * Create object `dir_tx' in the specified instance.
 */
Xv_opaque
save_pu_save_im_pu_dir_tx_create(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	extern Panel_setting	set_dir_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TEXT,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 4,
		XV_Y, 24,
		PANEL_VALUE_DISPLAY_LENGTH, 50,
		PANEL_VALUE_STORED_LENGTH, 256,
		PANEL_LABEL_STRING, "Image Dir:",
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_READ_ONLY, FALSE,
		PANEL_NOTIFY_PROC, set_dir_proc,
		NULL);
	return obj;
}

/*
 * Create object `cmd_tx' in the specified instance.
 */
Xv_opaque
save_pu_save_im_pu_cmd_tx_create(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	extern Panel_setting	set_command_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TEXT,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 2,
		XV_Y, 42,
		PANEL_VALUE_DISPLAY_LENGTH, 40,
		PANEL_VALUE_STORED_LENGTH, 256,
		PANEL_LABEL_STRING, "Post Processing Script:",
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_READ_ONLY, FALSE,
		PANEL_NOTIFY_PROC, set_command_proc,
		NULL);
	return obj;
}

/*
 * Create object `gen_name_bt' in the specified instance.
 */
Xv_opaque
save_pu_save_im_pu_gen_name_bt_create(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	extern void		gen_fname_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_BUTTON,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 4,
		XV_Y, 60,
		PANEL_LABEL_STRING, "Generate Name",
		PANEL_NOTIFY_PROC, gen_fname_proc,
		NULL);
	return obj;
}

/*
 * Create object `cancel_bt' in the specified instance.
 */
Xv_opaque
save_pu_save_im_pu_cancel_bt_create(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	extern void		cancel_save_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_BUTTON,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 120,
		XV_Y, 60,
		PANEL_LABEL_STRING, "Cancel",
		PANEL_NOTIFY_PROC, cancel_save_proc,
		NULL);
	return obj;
}

/*
 * Create object `save_pu_msg' in the specified instance.
 */
Xv_opaque
save_pu_save_im_pu_save_pu_msg_create(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 182,
		XV_Y, 64,
		PANEL_LABEL_STRING, "Window Information goes here",
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

/*
 * Create object `save_bt' in the specified instance.
 */
Xv_opaque
save_pu_save_im_pu_save_bt_create(save_pu_save_im_pu_objects *ip, Xv_opaque owner)
{
	extern void		save_image_proc(Panel_item, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_BUTTON,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 440,
		XV_Y, 64,
		PANEL_LABEL_STRING, "Save",
		PANEL_NOTIFY_PROC, save_image_proc,
		NULL);
	return obj;
}

