// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
/*
 * data_pu_ui.c - User interface object initialization functions.
 * This file was generated by `gxv' from `data_pu.G'.
 * DO NOT EDIT BY HAND.
 */

#include <stdio.h>
#include <sys/param.h>
#include <sys/types.h>
#include <xview/xview.h>
#include <xview/canvas.h>
#include <xview/panel.h>
#include <xview/scrollbar.h>
#include <xview/svrimage.h>
#include <xview/termsw.h>
#include <xview/text.h>
#include <xview/tty.h>
#include <xview/xv_xrect.h>
#include <devguide/gcm.h>
#include "data_pu_ui.h"

/*
 * Initialize an instance of object `data_pu'.
 */
data_pu_data_pu_objects *
data_pu_data_pu_objects_initialize(data_pu_data_pu_objects *ip, Xv_opaque owner)
{
	if (!ip && !(ip = (data_pu_data_pu_objects *) calloc(1, sizeof (data_pu_data_pu_objects))))
		return (data_pu_data_pu_objects *) NULL;
	if (!ip->data_pu)
		ip->data_pu = data_pu_data_pu_data_pu_create(ip, owner);
	if (!ip->data_pu_cp)
		ip->data_pu_cp = data_pu_data_pu_data_pu_cp_create(ip, ip->data_pu);
	if (!ip->group_list)
		ip->group_list = data_pu_data_pu_group_list_create(ip, ip->data_pu_cp);
	if (!ip->data_st)
		ip->data_st = data_pu_data_pu_data_st_create(ip, ip->data_pu_cp);
	return ip;
}

/*
 * Create object `data_pu' in the specified instance.
 */
Xv_opaque
data_pu_data_pu_data_pu_create(data_pu_data_pu_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, FRAME_CMD,
		XV_KEY_DATA, INSTANCE, ip,
		XV_WIDTH, 191,
		XV_HEIGHT, 158,
		XV_LABEL, "DATA",
		XV_SHOW, FALSE,
		FRAME_SHOW_FOOTER, FALSE,
		FRAME_SHOW_RESIZE_CORNER, FALSE,
		FRAME_CMD_PUSHPIN_IN, TRUE,
		NULL);
	xv_set(xv_get(obj, FRAME_CMD_PANEL), WIN_SHOW, FALSE, NULL);
	return obj;
}

/*
 * Create object `data_pu_cp' in the specified instance.
 */
Xv_opaque
data_pu_data_pu_data_pu_cp_create(data_pu_data_pu_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 0,
		XV_Y, 0,
		XV_WIDTH, WIN_EXTEND_TO_EDGE,
		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
		WIN_BORDER, FALSE,
		NULL);
	gcm_initialize_colors(obj, "Gray", NULL);
	return obj;
}

/*
 * Create object `group_list' in the specified instance.
 */
Xv_opaque
data_pu_data_pu_group_list_create(data_pu_data_pu_objects *ip, Xv_opaque owner)
{
	extern int		set_group_proc(Panel_item, const char *, Xv_opaque, Panel_list_op, Event *, int);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_LIST,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 0,
		XV_Y, 4,
		PANEL_LIST_WIDTH, 150,
		PANEL_LIST_DISPLAY_ROWS, 5,
		PANEL_LABEL_STRING, "Data Groups",
		PANEL_LAYOUT, PANEL_VERTICAL,
		PANEL_READ_ONLY, FALSE,
		PANEL_CHOOSE_ONE, FALSE,
		PANEL_CHOOSE_NONE, TRUE,
		XV_SHOW, FALSE,
		PANEL_NOTIFY_PROC, set_group_proc,
		NULL);
	return obj;
}

/*
 * Create object `data_st' in the specified instance.
 */
Xv_opaque
data_pu_data_pu_data_st_create(data_pu_data_pu_objects *ip, Xv_opaque owner)
{
	extern void		set_data_proc(Panel_item, int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_CHOICE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 4,
		XV_Y, 106,
		PANEL_CHOICE_NCOLS, 1,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_CHOOSE_NONE, FALSE,
		PANEL_NOTIFY_PROC, set_data_proc,
		NULL);
	return obj;
}

