// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
/*
 * h_win_ui.c - User interface object initialization functions.
 * This file was generated by `gxv' from `h_win.G'.
 * DO NOT EDIT BY HAND.
 */

#include <stdio.h>
#include <sys/param.h>
#include <sys/types.h>
#include <xview/xview.h>
#include <xview/canvas.h>
#include <xview/panel.h>
#include <xview/scrollbar.h>
#include <xview/svrimage.h>
#include <xview/termsw.h>
#include <xview/text.h>
#include <xview/tty.h>
#include <xview/xv_xrect.h>
#include <devguide/gcm.h>
#include "h_win_ui.h"

/*
 * Initialize an instance of object `horiz_bw'.
 */
h_win_horiz_bw_objects *
h_win_horiz_bw_objects_initialize(h_win_horiz_bw_objects *ip, Xv_opaque owner)
{
	if (!ip && !(ip = (h_win_horiz_bw_objects *) calloc(1, sizeof (h_win_horiz_bw_objects))))
		return (h_win_horiz_bw_objects *) NULL;
	if (!ip->horiz_bw)
		ip->horiz_bw = h_win_horiz_bw_horiz_bw_create(ip, owner);
	if (!ip->cp)
		ip->cp = h_win_horiz_bw_cp_create(ip, ip->horiz_bw);
	if (!ip->main_st)
		ip->main_st = h_win_horiz_bw_main_st_create(ip, ip->cp);
	if (!ip->im_cache_st)
		ip->im_cache_st = h_win_horiz_bw_im_cache_st_create(ip, ip->cp);
	if (!ip->movie_frame_msg)
		ip->movie_frame_msg = h_win_horiz_bw_movie_frame_msg_create(ip, ip->cp);
	if (!ip->cur_ht_msg)
		ip->cur_ht_msg = h_win_horiz_bw_cur_ht_msg_create(ip, ip->cp);
	if (!ip->cur_time_msg)
		ip->cur_time_msg = h_win_horiz_bw_cur_time_msg_create(ip, ip->cp);
	if (!ip->canvas1)
		ip->canvas1 = h_win_horiz_bw_canvas1_create(ip, ip->horiz_bw);
	return ip;
}

/*
 * Create object `horiz_bw' in the specified instance.
 */
Xv_opaque
h_win_horiz_bw_horiz_bw_create(h_win_horiz_bw_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	Xv_opaque		horiz_bw_image;
	static unsigned short	horiz_bw_bits[] = {
#include "cidd.icon"
	};
	
	horiz_bw_image = xv_create(XV_NULL, SERVER_IMAGE,
		SERVER_IMAGE_DEPTH, 1,
		SERVER_IMAGE_BITS, horiz_bw_bits,
		XV_WIDTH, 64,
		XV_HEIGHT, 64,
		NULL);
	obj = xv_create(owner, FRAME,
		XV_KEY_DATA, INSTANCE, ip,
		XV_WIDTH, 554,
		XV_HEIGHT, 489,
		XV_LABEL, "Configurable Interactive Data Display (CIDD)",
		FRAME_SHOW_FOOTER, FALSE,
		FRAME_SHOW_RESIZE_CORNER, TRUE,
		FRAME_ICON, xv_create(XV_NULL, ICON,
			ICON_IMAGE, horiz_bw_image,
			NULL),
		NULL);
	return obj;
}

/*
 * Create object `cp' in the specified instance.
 */
Xv_opaque
h_win_horiz_bw_cp_create(h_win_horiz_bw_objects *ip, Xv_opaque owner)
{
	extern Notify_value	h_pan_event_proc(Xv_window, Event *, Notify_arg, Notify_event_type);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 0,
		XV_Y, 0,
		XV_WIDTH, WIN_EXTEND_TO_EDGE,
		XV_HEIGHT, 52,
		WIN_BORDER, FALSE,
		NULL);
	gcm_initialize_colors(obj, "Gray", NULL);
	xv_set(obj, WIN_CONSUME_EVENTS,
		WIN_MOUSE_BUTTONS,
		LOC_MOVE,
		LOC_DRAG,
		LOC_WINENTER,
		LOC_WINEXIT,
		WIN_ASCII_EVENTS,
		WIN_LEFT_KEYS,
		WIN_RIGHT_KEYS,
		WIN_TOP_KEYS,
		NULL, NULL);
	notify_interpose_event_func(obj,
		(Notify_func) h_pan_event_proc, NOTIFY_SAFE);
	return obj;
}

/*
 * Create object `main_st' in the specified instance.
 */
Xv_opaque
h_win_horiz_bw_main_st_create(h_win_horiz_bw_objects *ip, Xv_opaque owner)
{
	extern void		main_st_proc(Panel_item, unsigned int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_TOGGLE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 2,
		XV_Y, 4,
		PANEL_CHOICE_NROWS, 1,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_NOTIFY_PROC, main_st_proc,
		PANEL_CHOICE_STRING, 0, "Loop",
		PANEL_VALUE, 0,
		NULL);
	return obj;
}

/*
 * Create object `im_cache_st' in the specified instance.
 */
Xv_opaque
h_win_horiz_bw_im_cache_st_create(h_win_horiz_bw_objects *ip, Xv_opaque owner)
{
	extern void		im_cache_proc(Panel_item, int, Event *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_CHOICE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 470,
		XV_Y, 26,
		PANEL_CHOICE_NROWS, 1,
		PANEL_LAYOUT, PANEL_HORIZONTAL,
		PANEL_ITEM_COLOR, gcm_color_index("Black"),
		PANEL_CHOOSE_NONE, FALSE,
		PANEL_NOTIFY_PROC, im_cache_proc,
		PANEL_CHOICE_STRINGS,
			" ",
			" ",
			" ",
			" ",
			NULL,
		NULL);
	return obj;
}

/*
 * Create object `movie_frame_msg' in the specified instance.
 */
Xv_opaque
h_win_horiz_bw_movie_frame_msg_create(h_win_horiz_bw_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 10,
		XV_Y, 32,
		PANEL_LABEL_STRING, "Frame: ",
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

/*
 * Create object `cur_ht_msg' in the specified instance.
 */
Xv_opaque
h_win_horiz_bw_cur_ht_msg_create(h_win_horiz_bw_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 130,
		XV_Y, 32,
		PANEL_LABEL_STRING, "Height Msg",
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

/*
 * Create object `cur_time_msg' in the specified instance.
 */
Xv_opaque
h_win_horiz_bw_cur_time_msg_create(h_win_horiz_bw_objects *ip, Xv_opaque owner)
{
	Xv_opaque	obj;
	
	obj = xv_create(owner, PANEL_MESSAGE,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 380,
		XV_Y, 32,
		PANEL_LABEL_STRING, "Time",
		PANEL_LABEL_BOLD, TRUE,
		NULL);
	return obj;
}

/*
 * Create object `canvas1' in the specified instance.
 */
Xv_opaque
h_win_horiz_bw_canvas1_create(h_win_horiz_bw_objects *ip, Xv_opaque owner)
{
	extern Notify_value	can_event_proc(Xv_window, Event *, Notify_arg, Notify_event_type);
	extern void	can_repaint(Canvas, Xv_window, Display *, Window, Xv_xrectlist *);
	Xv_opaque	obj;
	
	obj = xv_create(owner, CANVAS,
		XV_KEY_DATA, INSTANCE, ip,
		XV_X, 0,
		XV_Y, (int)xv_get(ip->cp, XV_Y) +
		      (int)xv_get(ip->cp, XV_HEIGHT),
		XV_WIDTH, WIN_EXTEND_TO_EDGE,
		XV_HEIGHT, WIN_EXTEND_TO_EDGE,
		CANVAS_REPAINT_PROC, can_repaint,
		CANVAS_X_PAINT_WINDOW, TRUE,
		NULL);
	gcm_initialize_colors(obj, "Black", NULL);
	xv_set(canvas_paint_window(obj), WIN_CONSUME_EVENTS,
		WIN_MOUSE_BUTTONS,
		LOC_MOVE,
		LOC_DRAG,
		LOC_WINENTER,
		LOC_WINEXIT,
		WIN_ASCII_EVENTS,
		WIN_LEFT_KEYS,
		WIN_RIGHT_KEYS,
		WIN_TOP_KEYS,
		NULL, NULL);
	notify_interpose_event_func(canvas_paint_window(obj),
		(Notify_func) can_event_proc, NOTIFY_SAFE);
	/*
	 * This line is here for backwards compatibility. It will be
	 * removed for the next release.
	 */
	xv_set(canvas_paint_window(obj), XV_KEY_DATA, INSTANCE, ip, NULL);
	return obj;
}

