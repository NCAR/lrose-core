/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program TsPrint
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("TsPrint reads radar time series data from an FMQ, and prints in various ways.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'reg_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("reg_with_procmap");
    tt->descr = tdrpStrDup("Register with procmap.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &reg_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("RUN mode");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'run_mode'
    // ctype is '_run_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("run_mode");
    tt->descr = tdrpStrDup("Run mode");
    tt->help = tdrpStrDup("PRINT_MODE: print power, averaged over a number of gates, data to the screen, a line at a time.\n\nASCOPE_MODE: print data for a range of gates to the screen.\n\nCAL_MODE: average the powers for a number of gates, and write out in a file suitable for calibration.\n\nSERVER_MODE: listen on a port, and when a connection is established read an incoming set of commands in XML, average power over gates, and respond to the client in XML.\n\nMAX_POWER_MODE: compute the max power at any range within the specified gate limits, and print out the max power and range at which it occurs most often.\n\n\n\nMAX_POWER_SERVER_MODE: compute max power stats, write results to socket.");
    tt->val_offset = (char *) &run_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("run_mode_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PRINT_MODE");
      tt->enum_def.fields[0].val = PRINT_MODE;
      tt->enum_def.fields[1].name = tdrpStrDup("ASCOPE_MODE");
      tt->enum_def.fields[1].val = ASCOPE_MODE;
      tt->enum_def.fields[2].name = tdrpStrDup("CAL_MODE");
      tt->enum_def.fields[2].val = CAL_MODE;
      tt->enum_def.fields[3].name = tdrpStrDup("SERVER_MODE");
      tt->enum_def.fields[3].val = SERVER_MODE;
      tt->enum_def.fields[4].name = tdrpStrDup("MAX_POWER_MODE");
      tt->enum_def.fields[4].val = MAX_POWER_MODE;
      tt->enum_def.fields[5].name = tdrpStrDup("MAX_POWER_SERVER_MODE");
      tt->enum_def.fields[5].val = MAX_POWER_SERVER_MODE;
    tt->single_val.e = PRINT_MODE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("PRINT DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'label_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("label_interval");
    tt->descr = tdrpStrDup("Labels will be printed at this number of lines.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &label_interval - &_start_;
    tt->single_val.i = 30;
    tt++;
    
    // Parameter 'once_only'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("once_only");
    tt->descr = tdrpStrDup("Just write one data set, then quit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &once_only - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_meta_headers'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_meta_headers");
    tt->descr = tdrpStrDup("Print meta-data headers, but not the pulse headers.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &print_meta_headers - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_all_headers'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_all_headers");
    tt->descr = tdrpStrDup("Print all meta-data headers and pulse headers.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &print_all_headers - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_all_pulses'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_all_pulses");
    tt->descr = tdrpStrDup("Print all pulses as they are read.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &print_all_pulses - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_info_on_change'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_info_on_change");
    tt->descr = tdrpStrDup("Print ops info in full whenever it changes changes.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &print_info_on_change - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_prt_details'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_prt_details");
    tt->descr = tdrpStrDup("Print the PRT for each pulse, along with the difference from the previous pulse.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &print_prt_details - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_packing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_packing");
    tt->descr = tdrpStrDup("Print type of packing used for IQ data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &print_packing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_hv_flag'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_hv_flag");
    tt->descr = tdrpStrDup("Print HV flag for each pulse, comma-delimited.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &print_hv_flag - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_iq_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_iq_data");
    tt->descr = tdrpStrDup("Print IQ data.");
    tt->help = tdrpStrDup("Uses the stored packing, unless print_iq_data_as_floats is true, in which case it prints it as floats.");
    tt->val_offset = (char *) &print_iq_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_burst_iq'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_burst_iq");
    tt->descr = tdrpStrDup("Print IQ data from burst.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &print_burst_iq - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_missing_pulses'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_missing_pulses");
    tt->descr = tdrpStrDup("Print warning if pulses are missing.");
    tt->help = tdrpStrDup("Check the sequence numbers for gaps. If a gap is found, a warning is printed.");
    tt->val_offset = (char *) &print_missing_pulses - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_format'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_format");
    tt->descr = tdrpStrDup("Print out the data structure format.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &print_format - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_radial_velocity'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_radial_velocity");
    tt->descr = tdrpStrDup("Print radial velocity if available");
    tt->help = tdrpStrDup("Only applies to MAX_POWER_MODE");
    tt->val_offset = (char *) &print_radial_velocity - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_lat_lon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_lat_lon");
    tt->descr = tdrpStrDup("Print lat/lon if available");
    tt->help = tdrpStrDup("Only applies to MAX_POWER_MODE");
    tt->val_offset = (char *) &print_lat_lon - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'print_altitude'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_altitude");
    tt->descr = tdrpStrDup("Print altitude if available");
    tt->help = tdrpStrDup("Only applies to MAX_POWER_MODE");
    tt->val_offset = (char *) &print_altitude - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'check_angle_change'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_angle_change");
    tt->descr = tdrpStrDup("Check that angles do not change by more than a specified amount from pulse to pulse.");
    tt->help = tdrpStrDup("If the elevation or azimuth change exceeds this, a warning will be printed.");
    tt->val_offset = (char *) &check_angle_change - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_angle_change'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_angle_change");
    tt->descr = tdrpStrDup("Max valid angle change between pulses (deg).");
    tt->help = tdrpStrDup("See 'check_angle_change'.");
    tt->val_offset = (char *) &max_angle_change - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_mode'
    // ctype is '_input_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_mode");
    tt->descr = tdrpStrDup("Input mode - files or time series API.");
    tt->help = tdrpStrDup("If TS_FMQ_INPUT, the application will read the time series from a file message queue and process the pulses as they come in. If TS_FILE_INPUT, the application will process all the files specified on the command line.");
    tt->val_offset = (char *) &input_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("input_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TS_FILE_INPUT");
      tt->enum_def.fields[0].val = TS_FILE_INPUT;
      tt->enum_def.fields[1].name = tdrpStrDup("TS_FMQ_INPUT");
      tt->enum_def.fields[1].val = TS_FMQ_INPUT;
      tt->enum_def.fields[2].name = tdrpStrDup("TS_TCP_INPUT");
      tt->enum_def.fields[2].val = TS_TCP_INPUT;
    tt->single_val.e = TS_FILE_INPUT;
    tt++;
    
    // Parameter 'input_fmq_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_name");
    tt->descr = tdrpStrDup("FMQ name. For TS_FMQ_INPUT only.");
    tt->help = tdrpStrDup("Path to FMQ files. There are 2 files, one with a .buf extension and one with a .stat extention. This path does not include the extensions.");
    tt->val_offset = (char *) &input_fmq_name - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/ts");
    tt++;
    
    // Parameter 'seek_to_end_of_input'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("seek_to_end_of_input");
    tt->descr = tdrpStrDup("Option to seek to the end of the input FMQ.");
    tt->help = tdrpStrDup("If TRUE, the program will seek to the end of the fmq and only read in new data. If FALSE, it will start reading from the beginning of the FMQ.");
    tt->val_offset = (char *) &seek_to_end_of_input - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'tcp_server_host'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("tcp_server_host");
    tt->descr = tdrpStrDup("Name of host for TCP server. For TS_TCP_INPUT only.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &tcp_server_host - &_start_;
    tt->single_val.s = tdrpStrDup("localhost");
    tt++;
    
    // Parameter 'tcp_server_port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("tcp_server_port");
    tt->descr = tdrpStrDup("Port for TCP server. For TS_TCP_INPUT only.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &tcp_server_port - &_start_;
    tt->single_val.i = 12000;
    tt++;
    
    // Parameter 'dual_channel'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("dual_channel");
    tt->descr = tdrpStrDup("Handle dual channels.");
    tt->help = tdrpStrDup("Normally, only a single channel is used.");
    tt->val_offset = (char *) &dual_channel - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'fast_alternating'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("fast_alternating");
    tt->descr = tdrpStrDup("Radar is in fast-alternating mode.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &fast_alternating - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'invert_hv_flag'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("invert_hv_flag");
    tt->descr = tdrpStrDup("Option to invert H/V flag in pulse data.");
    tt->help = tdrpStrDup("Normally, the HV flag is set to 1 for H, 0 for V. If the flag in the data has the opposite sense, set this to true.");
    tt->val_offset = (char *) &invert_hv_flag - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rvp8_legacy_unpacking'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("rvp8_legacy_unpacking");
    tt->descr = tdrpStrDup("RVP8 TsArchive data is in legacy 11-bit mantissa packing.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rvp8_legacy_unpacking - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'cohere_iq_to_burst_phase'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("cohere_iq_to_burst_phase");
    tt->descr = tdrpStrDup("Option to cohere the pulse IQ data to the burst phase.");
    tt->help = tdrpStrDup("This is intended for magnetron systems with random phase. If the radar processor has not cohered the IQ data to the burst phase, this can be done as each pulse is read. Set this to TRUE to cohere to burst on read.");
    tt->val_offset = (char *) &cohere_iq_to_burst_phase - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'check_radar_id'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_radar_id");
    tt->descr = tdrpStrDup("Option to check the radar ID in the time series data stream.");
    tt->help = tdrpStrDup("If TRUE, we will check that the radar_id in the header packet info is either the specified radar_id, or is 0. This allows us to filter out unwanted data from the time series stream. Mostly this is not applicable. However, in some cases time series data from multiple sources is included in a single stream, in which case we need to filter it accordingly.");
    tt->val_offset = (char *) &check_radar_id - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_id'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("radar_id");
    tt->descr = tdrpStrDup("radar_id to be used for filtering incoming data.");
    tt->help = tdrpStrDup("See 'check_radar_id' above.");
    tt->val_offset = (char *) &radar_id - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'use_secondary_georeference'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_secondary_georeference");
    tt->descr = tdrpStrDup("If true, use the secondary georeference packet.");
    tt->help = tdrpStrDup("By default, we use the primary georeference packet. And most mobile radars only have one georeference. For those radars that have 2 georef devices, set this to true to use the secondary reference.");
    tt->val_offset = (char *) &use_secondary_georeference - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("SAMPLING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'n_samples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_samples");
    tt->descr = tdrpStrDup("Number of pulse samples in a beam.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &n_samples - &_start_;
    tt->single_val.i = 128;
    tt++;
    
    // Parameter 'start_gate'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("start_gate");
    tt->descr = tdrpStrDup("Start gate for analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &start_gate - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'n_gates'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_gates");
    tt->descr = tdrpStrDup("Number of gates for analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &n_gates - &_start_;
    tt->single_val.i = 2048;
    tt++;
    
    // Parameter 'distance_units'
    // ctype is '_distance_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("distance_units");
    tt->descr = tdrpStrDup("Units for displaying distance.");
    tt->help = tdrpStrDup("In MAX_POWER mode, the distance to the max power gate for each channel is printed out. This can be either in feet or meters.");
    tt->val_offset = (char *) &distance_units - &_start_;
    tt->enum_def.name = tdrpStrDup("distance_units_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DISTANCE_IN_METERS");
      tt->enum_def.fields[0].val = DISTANCE_IN_METERS;
      tt->enum_def.fields[1].name = tdrpStrDup("DISTANCE_IN_FEET");
      tt->enum_def.fields[1].val = DISTANCE_IN_FEET;
    tt->single_val.e = DISTANCE_IN_METERS;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("CALIBRATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_calibration'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_calibration");
    tt->descr = tdrpStrDup("Option to apply calibration to compute powers.");
    tt->help = tdrpStrDup("Normally the powers are simply computed as I**2 + Q**2 - i.e. the power at the digitizer. If this param is set to TRUE, then the receiver gain from the calibration file will be subtracted from the powers, to give the powers detected by the LNAs.");
    tt->val_offset = (char *) &apply_calibration - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'cal_xml_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cal_xml_file_path");
    tt->descr = tdrpStrDup("Path for calibration file - see apply_calibration above.");
    tt->help = tdrpStrDup("This file will be read in and the gain values applied to compute the powers,m if apply_calibration is TRUE.");
    tt->val_offset = (char *) &cal_xml_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("calibration.xml");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("TESTING the PACKING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'change_packing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_packing");
    tt->descr = tdrpStrDup("Changing the packing for testing purposes.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &change_packing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'packing_type'
    // ctype is '_packing_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("packing_type");
    tt->descr = tdrpStrDup("Packing of the IQ data for test printing");
    tt->help = tdrpStrDup("FL32: 32-bit floating point. COUNTS_UI16: scaled unsigned 16-bit integers, as is typical of IQ data directly from an A2D. SCALED_SI16: scaled signed 16-bit integers. DBM_PHASE_SI16: signed 16-bit integers representing power in dBM and phase in deg. SIGMET_SI16: Sigmet 16-bit floating point packing as in the RVP8.");
    tt->val_offset = (char *) &packing_type - &_start_;
    tt->enum_def.name = tdrpStrDup("packing_type_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PACKING_FL32");
      tt->enum_def.fields[0].val = PACKING_FL32;
      tt->enum_def.fields[1].name = tdrpStrDup("PACKING_SCALED_SI16");
      tt->enum_def.fields[1].val = PACKING_SCALED_SI16;
      tt->enum_def.fields[2].name = tdrpStrDup("PACKING_DBM_PHASE_SI16");
      tt->enum_def.fields[2].val = PACKING_DBM_PHASE_SI16;
      tt->enum_def.fields[3].name = tdrpStrDup("PACKING_SIGMET_FL16");
      tt->enum_def.fields[3].val = PACKING_SIGMET_FL16;
    tt->single_val.e = PACKING_FL32;
    tt++;
    
    // Parameter 'packing_scale'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("packing_scale");
    tt->descr = tdrpStrDup("Scaling factor for packed IQ data.");
    tt->help = tdrpStrDup("This applies to the following packing types: COUNTS_UI16, SCALED_SI16, DBM_PHASE_SI16.\n\nFor COUNTS_UI16: volts = scaled unsigned_int * scale + offset.\n\nFor SCALED_SI16: volts = scaled signed_int * scale + offset.\n\nFor DBM_PHASE_SI16: dbm = scaled signed_int * scale + offset.\n\n");
    tt->val_offset = (char *) &packing_scale - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'packing_offset'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("packing_offset");
    tt->descr = tdrpStrDup("Offset for packed IQ data.");
    tt->help = tdrpStrDup("See test_scale.");
    tt->val_offset = (char *) &packing_offset - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("SERVER MODE");
    tt->comment_text = tdrpStrDup("In server mode, the application listens for connections from clients. A client, once connected, passed in a set of commands in XML format. TsPrint computes results based on the commands, and returns the result also in XML mode.");
    tt++;
    
    // Parameter 'server_port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("server_port");
    tt->descr = tdrpStrDup("Port for listening in server mode.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &server_port - &_start_;
    tt->single_val.i = 13000;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("SERVER MODE XML COMMANDS");
    tt->comment_text = tdrpStrDup("The following lists the XML commands to be sent to TsPrint in server mode:\n  \n  <TsPrintCommands>\n    <nSamples>1000</nSamples>\n    <startGate>50</startGate>\n    <nGates>500</nGates>\n    <dualChannel>true</dualChannel>\n    <fastAlternating>true</fastAlternating>\n    <labviewRequest>true</labviewRequest>\n  </TsPrintCommands>\n  \n  nSamples: the number of pulses (samples) to be averaged\n  startGate: the starting gate for averaging\n  nGates: the number of gates to be averaged\n  dualChannel: true if 2 channels, false otherwise\n  fastAlternating: true in dual-pol fast alternating mode, false otherwise\n  labviewReqyest: true if result to be sent in XML suitable for labview, false otherwise\n\n");
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("XML RESULT - NORMAL MODE");
    tt->comment_text = tdrpStrDup("The following is an example of the XML result in normal (non-labview) mode:\n  \n  <TsPrintResponse>\n    <success>true</success>\n    <time>2010-05-17T17:00:40</time>\n    <msecs>863</msecs>\n    <prf>1000</prf>\n    <nSamples>1000</nSamples>\n    <startGate>50</startGate>\n    <nGates>500</nGates>\n    <el>0</el>\n    <az>360</az>\n    <dbm0>-76.8903</dbm0>\n    <dbm1>-77.5489</dbm1>\n    <dbmHc>-76.9409</dbmHc>\n    <dbmHx>-77.6356</dbmHx>\n    <dbmVc>-76.8403</dbmVc>\n    <dbmVx>-77.4638</dbmVx>\n    <corr01H>0.00378701</corr01H>\n    <arg01H>-12.0024</arg01H>\n    <corr01V>0.0010595</corr01V>\n    <arg01V>58.3829</arg01V>\n  </TsPrintResponse>\n\n");
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("XML RESULT - LABVIEW MODE");
    tt->comment_text = tdrpStrDup("The following is an example of the XML result in normal (non-labview) mode:\n  \n  <Cluster>\n    <Name>RVP8_power</Name>\n    <NumElts>10</NumElts>\n    <Boolean>\n      <Name>success</Name>\n      <Val>1</Val>\n    </Boolean>\n    <DBL>\n      <Name>time</Name>\n      <Val>3.3569173307e+09</Val>\n    </DBL>\n    <DBL>\n      <Name>el</Name>\n      <Val>0</Val>\n    </DBL>\n    <DBL>\n      <Name>az</Name>\n      <Val>360</Val>\n    </DBL>\n    <DBL>\n      <Name>dbm0</Name>\n      <Val>-76.8911</Val>\n    </DBL>\n    <DBL>\n      <Name>dbm1</Name>\n      <Val>-77.5407</Val>\n    </DBL>\n    <DBL>\n      <Name>dbmHc</Name>\n      <Val>-76.9401</Val>\n    </DBL>\n    <DBL>\n      <Name>dbmHx</Name>\n      <Val>-77.6436</Val>\n    </DBL>\n    <DBL>\n      <Name>dbmVc</Name>\n      <Val>-76.8426</Val>\n    </DBL>\n    <DBL>\n      <Name>dbmVx</Name>\n      <Val>-77.4402</Val>\n    </DBL>\n  </Cluster>\n\n");
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("ADDING COLUMNS FROM STATUS XML");
    tt->comment_text = tdrpStrDup("If activated, this section allows you to add extra columns to the output, by parsing the status xml.");
    tt++;
    
    // Parameter 'add_cols_from_status_xml'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_cols_from_status_xml");
    tt->descr = tdrpStrDup("Add columns using data from status xml messages in the time series.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &add_cols_from_status_xml - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'xml_entries_for_extra_cols'
    // ctype is '_status_xml_entry_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("xml_entries_for_extra_cols");
    tt->descr = tdrpStrDup("Details of XML entries to be added as columns to the printout.");
    tt->help = tdrpStrDup("\txml_tag_list: list of tags, from outer to inner, for identifying the entry.\n\tcol_label: column label\n.");
    tt->array_offset = (char *) &_xml_entries_for_extra_cols - &_start_;
    tt->array_n_offset = (char *) &xml_entries_for_extra_cols_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(status_xml_entry_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("status_xml_entry_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("xml_tag_list");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_xml_entries_for_extra_cols->xml_tag_list - (char *) _xml_entries_for_extra_cols;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("col_label");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_xml_entries_for_extra_cols->col_label - (char *) _xml_entries_for_extra_cols;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("<HcrStatus><HcrReceiverStatus><VLnaTemp>");
      tt->struct_vals[1].s = tdrpStrDup("VLnaTemp");
      tt->struct_vals[2].s = tdrpStrDup("<HcrStatus><HcrReceiverStatus><HLnaTemp>");
      tt->struct_vals[3].s = tdrpStrDup("HLnaTemp");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
