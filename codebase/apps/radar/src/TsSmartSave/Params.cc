/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program TsSmartSave
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("TsSmartSave reads raw time-series data from a file message queue (FMQ). It saves the time series data out in files. It has the capability of saving out to different sub-directories based on the antenna position. For example, sun calibrations and vertically-pointing data may be saves to separate directories.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register with the process mapper.");
    tt->help = tdrpStrDup("If true, this application will try to register with procmap once per minute. (If unable to do so, no error occurs.)");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'exit_after_specified_period'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("exit_after_specified_period");
    tt->descr = tdrpStrDup("Option to exit after a specified time period.");
    tt->help = tdrpStrDup("If true, the application will exit after 'run_period_secs' has elapsed.");
    tt->val_offset = (char *) &exit_after_specified_period - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'run_period_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("run_period_secs");
    tt->descr = tdrpStrDup("Run period (secs).");
    tt->help = tdrpStrDup("If exit_after_specified_period is true, the application will exit after this number of seconds.");
    tt->val_offset = (char *) &run_period_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT - from file message queue (FMQ)");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'fmq_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fmq_name");
    tt->descr = tdrpStrDup("FMQ name. For FMQ input_mode only.");
    tt->help = tdrpStrDup("Path to FMQ files. There are 2 files, one with a .buf extension and one with a .stat extention. This path does not include the extensions.");
    tt->val_offset = (char *) &fmq_name - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/ts");
    tt++;
    
    // Parameter 'filter_antenna_transitions'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("filter_antenna_transitions");
    tt->descr = tdrpStrDup("Option to remove pulses for which the antenna transition flag is set.");
    tt->help = tdrpStrDup("If true, transition pulses will not be stored in the file.");
    tt->val_offset = (char *) &filter_antenna_transitions - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_fixed_angle_for_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_fixed_angle_for_file_name");
    tt->descr = tdrpStrDup("Option to use the fixed angle (el or az) to compute the file name.");
    tt->help = tdrpStrDup("If false, the actual measured angle will be used.");
    tt->val_offset = (char *) &use_fixed_angle_for_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'add_scan_mode_to_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_scan_mode_to_file_name");
    tt->descr = tdrpStrDup("Option to add a string indicating the scan mode to the file name.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &add_scan_mode_to_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("OUTPUT FILE FORMAT and PACKING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_format'
    // ctype is '_output_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_format");
    tt->descr = tdrpStrDup("Format of the output files");
    tt->help = tdrpStrDup("IWRF: stream of binary structs and IQ data following the IWRF (CSU-CHILL/NCAR Integrated Weather Radar Facility) format. TSACHIVE: Sigmet time series archive format");
    tt->val_offset = (char *) &output_format - &_start_;
    tt->enum_def.name = tdrpStrDup("output_format_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FORMAT_IWRF");
      tt->enum_def.fields[0].val = FORMAT_IWRF;
      tt->enum_def.fields[1].name = tdrpStrDup("FORMAT_TSARCHIVE");
      tt->enum_def.fields[1].val = FORMAT_TSARCHIVE;
    tt->single_val.e = FORMAT_IWRF;
    tt++;
    
    // Parameter 'output_packing'
    // ctype is '_output_packing_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_packing");
    tt->descr = tdrpStrDup("Packing of the IQ data in the output files");
    tt->help = tdrpStrDup("ASIS: as it was read. FL32: 32-bit floating point. SCALED_SI16: scaled signed 16-bit integers. DBM_PHASE_SI16: signed 16-bit integers representing power in dBM and phase in deg. SIGMET_SI16: Sigmet 16-bit floating point packing as in the RVP8.");
    tt->val_offset = (char *) &output_packing - &_start_;
    tt->enum_def.name = tdrpStrDup("output_packing_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PACKING_ASIS");
      tt->enum_def.fields[0].val = PACKING_ASIS;
      tt->enum_def.fields[1].name = tdrpStrDup("PACKING_FL32");
      tt->enum_def.fields[1].val = PACKING_FL32;
      tt->enum_def.fields[2].name = tdrpStrDup("PACKING_SCALED_SI16");
      tt->enum_def.fields[2].val = PACKING_SCALED_SI16;
      tt->enum_def.fields[3].name = tdrpStrDup("PACKING_DBM_PHASE_SI16");
      tt->enum_def.fields[3].val = PACKING_DBM_PHASE_SI16;
      tt->enum_def.fields[4].name = tdrpStrDup("PACKING_SIGMET_FL16");
      tt->enum_def.fields[4].val = PACKING_SIGMET_FL16;
    tt->single_val.e = PACKING_ASIS;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("NORMAL SCAN OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'save_normal_scan_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_normal_scan_data");
    tt->descr = tdrpStrDup("Option to save normal scan data.");
    tt->help = tdrpStrDup("Normal scans are those which do not fall into the other categories - sunscan, vert pointing etc. Normal scans are typically PPIs and RHIs.");
    tt->val_offset = (char *) &save_normal_scan_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'one_file_only'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("one_file_only");
    tt->descr = tdrpStrDup("If true, write one file only and then quit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &one_file_only - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'normal_ignore_idle_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("normal_ignore_idle_mode");
    tt->descr = tdrpStrDup("If true, do not save files when scan mode is 'IDLE'.");
    tt->help = tdrpStrDup("Only applies to 'normal' save mode.");
    tt->val_offset = (char *) &normal_ignore_idle_mode - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'normal_ignore_stationary_antenna'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("normal_ignore_stationary_antenna");
    tt->descr = tdrpStrDup("If true, do not save files when antenna is stationary.");
    tt->help = tdrpStrDup("Only applies to 'normal' save mode.");
    tt->val_offset = (char *) &normal_ignore_stationary_antenna - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'save_scans_in_sectors'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_scans_in_sectors");
    tt->descr = tdrpStrDup("Option to save scans out in sectors to limit the file size.");
    tt->help = tdrpStrDup("If false, each fixed angle will be in a single file. If true, the angular change will be limited per file. See max_sector_size.");
    tt->val_offset = (char *) &save_scans_in_sectors - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_sector_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_sector_size");
    tt->descr = tdrpStrDup("Maximum sector size per output file (degrees).");
    tt->help = tdrpStrDup("Once this maximum is exceeded, the current file will be closed and a new one started.");
    tt->val_offset = (char *) &max_sector_size - &_start_;
    tt->single_val.i = 90;
    tt++;
    
    // Parameter 'max_pulses_per_file'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_pulses_per_file");
    tt->descr = tdrpStrDup("Maximum number of pulses per output file.");
    tt->help = tdrpStrDup("Once this maximum is exceeded, the current file will be closed and a new one started.");
    tt->val_offset = (char *) &max_pulses_per_file - &_start_;
    tt->single_val.i = 50000;
    tt++;
    
    // Parameter 'normal_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("normal_output_dir");
    tt->descr = tdrpStrDup("Normal mode output directory path.");
    tt->help = tdrpStrDup("Files are written to this directory, unless a special condition applies, in which case an alternative directory may be used. See VERTICALLY-POINTING and SUN-SCAN sections below.");
    tt->val_offset = (char *) &normal_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./tsarchive/save");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("VERTICALLY-POINTING DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'save_vert_pointing_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_vert_pointing_data");
    tt->descr = tdrpStrDup("Option to save vertically-pointing data to a separate directory.");
    tt->help = tdrpStrDup("If true, vertically-pointing data will be saved to a separate subdirectory. See also 'min_elev_for_vert_pointing_data'.");
    tt->val_offset = (char *) &save_vert_pointing_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'check_for_vert_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_for_vert_mode");
    tt->descr = tdrpStrDup("Option to check for VERT scanning mode before saving time series data.");
    tt->help = tdrpStrDup("If true, vertically-pointing data will only be saved in VERT scan mode.");
    tt->val_offset = (char *) &check_for_vert_mode - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_elev_for_vert_pointing'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_elev_for_vert_pointing");
    tt->descr = tdrpStrDup("Minimum elevation angle for vert pointing data (deg).");
    tt->help = tdrpStrDup("If the elevation angle exceeds this min value, and is less than the max (see below), for at least the lockon period (see below), the radar will be assumed to be in vertically-pointing mode.");
    tt->val_offset = (char *) &min_elev_for_vert_pointing - &_start_;
    tt->single_val.d = 88;
    tt++;
    
    // Parameter 'max_elev_for_vert_pointing'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_elev_for_vert_pointing");
    tt->descr = tdrpStrDup("Maximum elevation angle for vert pointing data (deg).");
    tt->help = tdrpStrDup("See 'min_elev_for_vert_pointing' above.");
    tt->val_offset = (char *) &max_elev_for_vert_pointing - &_start_;
    tt->single_val.d = 92;
    tt++;
    
    // Parameter 'vert_pointing_lockon_period'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("vert_pointing_lockon_period");
    tt->descr = tdrpStrDup("Minimim lockon period for determing vert pointing mode (secs).");
    tt->help = tdrpStrDup("In order to enter vert pointing mode, the antenna elevation must exceed 'min_elev_for_vert_pointing_data' and be less than 'max_elev_for_vert_pointing' for a continuous period exceeding this number of seconds. This prevents interpreting vert pointing mode when the antenna scans through vertical during normal scanning operations.");
    tt->val_offset = (char *) &vert_pointing_lockon_period - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'vert_pointing_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vert_pointing_output_dir");
    tt->descr = tdrpStrDup("Vertically pointing data output directory path.");
    tt->help = tdrpStrDup("Files are written to this directory when the radar is in vertically-pointing mode.");
    tt->val_offset = (char *) &vert_pointing_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./tsarchive/vert");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("SUN-SCAN DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'save_sun_scan_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_sun_scan_data");
    tt->descr = tdrpStrDup("Option to save sun-scan calibtation data to a separate directory.");
    tt->help = tdrpStrDup("If true, sun-scan data will be saved to a separate subdirectory.");
    tt->val_offset = (char *) &save_sun_scan_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'check_for_sun_scan_sector_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_for_sun_scan_sector_mode");
    tt->descr = tdrpStrDup("Option to check for SECT scanning mode before saving time series data.");
    tt->help = tdrpStrDup("If true, sunscan data will only be saved in SECT scan mode.");
    tt->val_offset = (char *) &check_for_sun_scan_sector_mode - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sun_scan_pointing_margin'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sun_scan_pointing_margin");
    tt->descr = tdrpStrDup("Pointing margin to determine when radar is in sun-scan mode (deg).");
    tt->help = tdrpStrDup("If both the azimuth and elevation angles are within this margin of the current sun angle for more than sun_scan_lockon_time, the radar will be assumed to be in sun-scan mode.");
    tt->val_offset = (char *) &sun_scan_pointing_margin - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'sun_scan_lockon_period'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sun_scan_lockon_period");
    tt->descr = tdrpStrDup("Minimim lockon period for determing sun-scan mode (secs).");
    tt->help = tdrpStrDup("In order to enter sun-scan mode, the antenna must point with 'sun_scan_pointing_margin' of the sun for a continuous period exceeding this number of seconds. This prevents interpreting sun-scan mode when the antenna scans across the sun during normal scanning operations.");
    tt->val_offset = (char *) &sun_scan_lockon_period - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'sun_scan_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sun_scan_output_dir");
    tt->descr = tdrpStrDup("Sun-scan data output directory path.");
    tt->help = tdrpStrDup("Files are written to this directory when the radar is in sun-scan mode.");
    tt->val_offset = (char *) &sun_scan_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./tsarchive/sunscan");
    tt++;
    
    // Parameter 'radar_latitude'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_latitude");
    tt->descr = tdrpStrDup("Latiitude of radar location (deg).");
    tt->help = tdrpStrDup("North is positive, South is negative.");
    tt->val_offset = (char *) &radar_latitude - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'radar_longitude'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_longitude");
    tt->descr = tdrpStrDup("Longitude of radar location (deg).");
    tt->help = tdrpStrDup("East is positive, West is negative.");
    tt->val_offset = (char *) &radar_longitude - &_start_;
    tt->single_val.d = -105;
    tt++;
    
    // Parameter 'radar_altitude_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_altitude_km");
    tt->descr = tdrpStrDup("MSL altitde of radar (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &radar_altitude_km - &_start_;
    tt->single_val.d = 1.704;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("FLAG FILE OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'save_when_flag_file_exists'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_when_flag_file_exists");
    tt->descr = tdrpStrDup("Option to save data when a flag file exists.");
    tt->help = tdrpStrDup("A user, or other process, can create a flag file of a given name. If this file exists, the program will save out data accordingly.");
    tt->val_offset = (char *) &save_when_flag_file_exists - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'flag_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("flag_file_path");
    tt->descr = tdrpStrDup("Path for flag file.");
    tt->help = tdrpStrDup("If this file exists, data will be written out to the flag_file_output_dir.");
    tt->val_offset = (char *) &flag_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./TsSmartSave.flag");
    tt++;
    
    // Parameter 'flag_file_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("flag_file_output_dir");
    tt->descr = tdrpStrDup("Directory for flagged data to be saved to.");
    tt->help = tdrpStrDup("Files are written to this directory if the flag file exists.");
    tt->val_offset = (char *) &flag_file_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./tsarchive/flagged");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("STATIONARY MODE OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'save_stationary_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_stationary_data");
    tt->descr = tdrpStrDup("Option to save data when the antenna is in stationary mode - i.e. stationary.");
    tt->help = tdrpStrDup("This mode also checks the flag file. If the flag file does not exist, the stationary data will not be saved.");
    tt->val_offset = (char *) &save_stationary_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'stationary_lockon_period'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("stationary_lockon_period");
    tt->descr = tdrpStrDup("Minimim staionary time for determing stationary mode (secs).");
    tt->help = tdrpStrDup("In order to enter stationary mode, the antenna must be stationay for this number of seconds.");
    tt->val_offset = (char *) &stationary_lockon_period - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'stationary_max_angle_change'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("stationary_max_angle_change");
    tt->descr = tdrpStrDup("Maximum angle change for stationary mode (deg).");
    tt->help = tdrpStrDup("For the antenna to be considered stationary, it must not move by more than this angle in the lockon period.");
    tt->val_offset = (char *) &stationary_max_angle_change - &_start_;
    tt->single_val.d = 0.01;
    tt++;
    
    // Parameter 'stationary_output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("stationary_output_dir");
    tt->descr = tdrpStrDup("Vertically stationary data output directory path.");
    tt->help = tdrpStrDup("Files are written to this directory when the radar is in vertically-stationary mode.");
    tt->val_offset = (char *) &stationary_output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./tsarchive/stationary");
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("WRITING LATEST DATA INFO TO PROXY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_ldata_info_to_proxy_path'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_ldata_info_to_proxy_path");
    tt->descr = tdrpStrDup("Option to write to the LdataInfo at a proxy location.");
    tt->help = tdrpStrDup("TsSmartSave always writes to the LdataInfo with the path of the actual file location. If this option is set, it will in addition write the LdataInfo with a proxy location, irrespective of the scan mode. This allows us to watch for updates at the proxy location, instead of the individual locations for different scan modes.");
    tt->val_offset = (char *) &write_ldata_info_to_proxy_path - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ldata_info_proxy_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ldata_info_proxy_path");
    tt->descr = tdrpStrDup("Directory for ldata info proxy location.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ldata_info_proxy_path - &_start_;
    tt->single_val.s = tdrpStrDup("./tsarchive/proxy");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
