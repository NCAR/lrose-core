/*********************************************************
 * parameter definitions for HcrShortLongCombine
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Aug 2023
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "Combines 100Hz HCR moments stream containing both long and short pulses, and optionally long and short PRTs. Groups the long and short pulses into dwells (normally 10Hz). We write out the individual fields (i.e. long and short) and combined fields. The long pulse rays have a longer PRT than the short pulse rays. This allows us to unfold the velocity field using the staggered-PRT technique. If both long and short PRT data are present, the velocity field is unfolded into a final velocity field.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to register this process with the process mapper (procmap).";
  p_help = "If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.";
} register_with_procmap;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

typedef enum {
  REALTIME, ARCHIVE
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = "\n\nREALTIME: we read data from two moments FMQ, combine the dwells and write to an output queue. \n\nARCHIVE: we read the moments data from CfRadial files, between the start and end times set on the command line.\n\nIn both REALTIME and ARCHIVE mode, we write the resulting moments to an output FMQ.";
} mode;

paramdef string {
  p_default = "fmqp:://localhost::/tmp/fmq/input_short";
  p_descr = "FMQ from which to read the short pulse moments stream.";
  p_help = "REALTIME mode only.";
} input_fmq_url_short;

paramdef string {
  p_default = "fmqp:://localhost::/tmp/fmq/input_long";
  p_descr = "FMQ from which to read the long pulse moments stream.";
  p_help = "REALTIME mode only.";
} input_fmq_url_long;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to seek to the end of the input FMQ.";
  p_help = "REALTIME mode only. If TRUE, the program will seek to the end of the fmq and only read in new data. If FALSE, it will start reading from the beginning of the FMQ.";
} seek_to_end_of_input_fmq;

paramdef string {
  p_default = "$(DATA_DIR)/cfradial/moments/100hz_short";
  p_descr = "Input directory short.";
  p_help = "ARCHIVE mode only. Directory for short pulse files.";
} input_dir_short;

paramdef string {
  p_default = "$(DATA_DIR)/cfradial/moments/100hz_long";
  p_descr = "Input directory long.";
  p_help = "ARCHIVE mode only. Directory for long pulse files.";
} input_dir_long;

commentdef {
  p_header = "LIMIT RANGE?";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to set the max range for any ray.";
} set_max_range;

paramdef double {
  p_default = 9999;
  p_descr = "Specified maximim range - km.";
  p_help = "Gates beyond this range are removed.";
} max_range_km;

commentdef {
  p_header = "SET THE COMBINED DWELL DETAILS";
  p_text = "Normally we combine the high-rate moments data (say at 100 hz) into lower-rate dwells, say at 10 hz.";
}

paramdef double {
  p_default = 0.1;
  p_descr = "Specify the output dwell length (secs).";
  p_help = "Dwells from the input data will be combined to form dwells covering the specified time.";
} dwell_length_secs;

typedef enum {
  DWELL_STATS_MEAN = 0,
  DWELL_STATS_MEDIAN = 1,
  DWELL_STATS_MAXIMUM = 2,
  DWELL_STATS_MINIMUM = 3,
  DWELL_STATS_MIDDLE = 4,
  DWELL_STATS_DISCRETE_MODE = 5
} dwell_stats_method_t;

paramdef enum dwell_stats_method_t {
  p_default = DWELL_STATS_MEAN;
  p_descr = "Method for computing stats on the dwell.";
  p_help = "MIDDLE refers to the middle ray in the dwell sequence. The DISCRETE_MODE computes applies only to discrete (integer) fields, and returns the most common entry in a discrete data set.";
} dwell_stats_method;

paramdef double {
  p_default = 0.25;
  p_min = 0.0;
  p_max = 1.0;
  p_descr = "Specify the max fraction of the dwell that can have missing data.";
  p_help = "We compute how much of the dwell is missing for each field. If the fraction exceeds this parameter, the combined value will be set to missing.";
} dwell_stats_max_fraction_missing;

commentdef {
  p_header = "OPTION TO SET STATS METHOD FOR INDIVIDUAL FIELDS.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Set the stats method for individual fields.";
  p_help = "The global stats method is set by the 'dwell_stats_method' parameter. If 'set_stats_method_for_individual_fields' is true, we can set the stats method on particular fields. Fields not specified here will use the global parameter.";
} set_stats_method_for_individual_fields;

typedef struct {
  string field_name; 
  dwell_stats_method_t stats_method;
} stats_method_field_t;

paramdef struct stats_method_field_t {
  p_default = {
    { "FLAG", DWELL_STATS_MEDIAN},
    { "ANTENNA_FLAG", DWELL_STATS_MIDDLE}
  };
  p_descr = "Stats methods for individual fields.";
  p_help = "Applies if 'set_stats_method_for_individual_fields' is true. The global stats method is set by the 'dwell_stats_method' parameter. Fields not specified here will use the global parameter.";
} stats_method_fields[];

commentdef {
  p_header = "FIELD NAMES for combination";
  p_text = "The long pulse rays have a longer PRT than the short pulse rays. This allows us to unfold the velocity field using the staggered-PRT technique. If both long and short PRT data are present, the velocity field is unfolded into a final velocity field.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to unfold the velocity field.";
  p_help = "If false, the short vel will be copied to the unfolded field. The vel_unfolded field will be added to the output data set.";
} perform_velocity_unfolding;

paramdef string {
  p_default = "VEL";
  p_descr = "This is the name for the velocity field in the input data.";
  p_help = "The field name must be the same for the short- and long-prt rays.";
} input_vel_field_name;

paramdef string {
  p_default = "_short";
  p_descr = "This suffix is added to the input fields for short-prt moments.";
  p_help = "For each incoming short-pulse field, we add this suffix to the incoming field name.";
} suffix_to_add_for_short_pulse_fields;

paramdef string {
  p_default = "_long";
  p_descr = "This suffix is added to the input fields for long-prt moments.";
  p_help = "For each incoming long-pulse field, we add this suffix to the incoming field name.";
} suffix_to_add_for_long_pulse_fields;

paramdef string {
  p_default = "VEL_unfold";
  p_descr = "Name for the unfolded velocity.";
  p_help = "This is an output field, computed by unfolding the dual-prt vel fields.";
} vel_unfolded_field_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to correct the estimated velocity corrected for vertical platform motion.";
  p_help = "For an airborne platform, we measure the vertical velocity of the platform using an INS system. We can optionally correct the measured velocity for the plaform vertical motion. This correction is applied AFTER the unfolding computation.";
} correct_velocity_for_platform_vertical_motion;

// commentdef {
//   p_header = "OPTION TO SPECIFY OUTPUT FIELD NAMES AND ENCODING";
// }

// paramdef boolean {
//   p_default = false;
//   p_descr = "Set the field names and output encoding";
//   p_help = "If false, all fields will be used.";
// } set_output_fields;

// typedef enum {
//   OUTPUT_ENCODING_ASIS,
//   OUTPUT_ENCODING_FLOAT32,
//   OUTPUT_ENCODING_INT32,
//   OUTPUT_ENCODING_INT16,
//   OUTPUT_ENCODING_INT08
// } output_encoding_t;

// typedef enum {
//   SCALING_DYNAMIC,
//   SCALING_SPECIFIED
// } output_scaling_t;

// typedef struct {
//   string input_field_name; 
//   string output_field_name; 
//   string long_name; 
//   string standard_name; 
//   string output_units;
//   output_encoding_t encoding;
//   output_scaling_t output_scaling;
//   double output_scale;
//   double output_offset;
// } output_field_t;

// paramdef struct output_field_t {
//   p_default = {
//     { "DBZ",
//       "DBZ",
//       "reflectivity",
//       "equivalent_reflectivity_factor",
//       "dBZ",
//       OUTPUT_ENCODING_ASIS,
//       SCALING_DYNAMIC, 0.01, 0.0
//     },
//     { "VEL", 
//       "VEL", 
//       "radial_velocity",
//       "radial_velocity_of_scatterers_away_from_instrument",
//       "m/s", 
//       OUTPUT_ENCODING_ASIS,
//       SCALING_DYNAMIC, 0.01, 0.0
//     }
//   };
//   p_descr = "Output field details.";
//   p_help = "Set the details for the output fields. The output_field_name is the ndtCDF variable name. Set the long name to a more descriptive name. Set the standard name to the CF standard name for this field. If the long name or standard name are empty, the existing names are used. If SCALING_SPECIFIED, then the scale and offset is used.";
// } output_fields[];

// paramdef boolean {
//   p_default = false;
//   p_descr = "Option to exclude fields in the specified list.";
//   p_help = "If true, the specified fields will be excluded. This may be easier than specifiying all of the fields to be included, if that list is very long.";
// } exclude_specified_fields;

// paramdef string {
//   p_default = { "DBZ", "VEL" };
//   p_descr = "List of fields to be excluded.";
//   p_help = "List the names to be excluded";
// } excluded_fields[];

// commentdef {
//   p_header = "OPTION TO SPECIFY OUTPUT ENCODING FOR ALL FIELDS";
// }

// paramdef boolean {
//   p_default = false;
//   p_descr = "Option to set output encoding for all fields";
// } set_output_encoding_for_all_fields;

// paramdef enum output_encoding_t {
//   p_default = OUTPUT_ENCODING_ASIS;
//   p_descr = "Output encoding for all fields, if requested.";
// } output_encoding;

commentdef {
  p_header = "OUTPUT FMQ";
}

paramdef string {
  p_default = "fmqp:://localhost::/tmp/fmq/output";
  p_descr = "FMQ to which the combined dwells are written.";
  p_help = "FMQ mode only.";
} output_fmq_url;

paramdef boolean {
  p_default = false;
  p_descr = "Option to compress the output fmq.";
  p_help = "The default is for no compression.";
} output_fmq_compress;

paramdef int {
  p_default = 5000;
  p_descr = "Number of slots in output FMQ.";
} output_fmq_n_slots;

paramdef int {
  p_default = 100000000;
  p_descr = "Size of buffer in output FMQ.";
} output_fmq_buf_size;

paramdef boolean {
  p_default = false;
  p_descr = "Option to block on write when the radar queue fills up.";
  p_help = "If false, the program writes data to the output queue without regard to whether the reader is keeping up. This mode should usually be used in realtime, to avoid holding things up if a client becomes slow. If true, the program will not overwrite data in the queue which has not been read by the reader. This is recommended for ARCHIVE and FILELIST mode. In this mode there should be only one reader. If you need to service more than one reader, use Fmq2Fmq in write blocking mode with multiple output urls to multiplex the queue.";
} output_fmq_write_blocking;

paramdef int {
  p_default = 5;
  p_descr = "Number of seconds between reports to DataMapper.";
  p_help = "If > 0, the program will register with the DataMapper when the output FMQs are written to. If <= 0, registration will not be performed.";
} output_fmq_data_mapper_report_interval;

