/**********************************************************************
 * TDRP params for ./HcrShortLongCombine
 **********************************************************************/

//======================================================================
//
// Combines 100Hz HCR moments stream containing both long and short 
//   pulses, and optionally long and short PRTs. Groups the long and short 
//   pulses into dwells (normally 10Hz). We write out the individual 
//   fields (i.e. long and short) and combined fields. The long pulse rays 
//   have a longer PRT than the short pulse rays. This allows us to unfold 
//   the velocity field using the staggered-PRT technique. If both long 
//   and short PRT data are present, the velocity field is unfolded into a 
//   final velocity field.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA

debug = DEBUG_OFF;

///////////// register_with_procmap ///////////////////
//
// Option to register this process with the process mapper (procmap).
//
// If TRUE, every minute this process will register a heartbeat with 
//   procmap. If the process hangs, it will be restared by the 
//   auto_restarter.
//
// Type: boolean

register_with_procmap = FALSE;

///////////// instance ////////////////////////////////
//
// Program instance for process registration.
//
// This application registers with procmap. This is the instance used 
//   for registration.
//
// Type: string

instance = "test";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
//

//
// REALTIME: we read data from two moments FMQ, combine the dwells and 
//   write to an output queue. 
//
// ARCHIVE: we read the moments data from CfRadial files, between the 
//   start and end times set on the command line.
//
// In both REALTIME and ARCHIVE mode, we write the resulting moments to 
//   an output FMQ.
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE

mode = ARCHIVE;

///////////// input_fmq_url_short /////////////////////
//
// FMQ from which to read the short pulse moments stream.
//
// REALTIME mode only.
//
// Type: string

input_fmq_url_short = "/tmp/fmq/moments/100hz.shortPulse/shmem_20140";

///////////// input_fmq_url_long //////////////////////
//
// FMQ from which to read the long pulse moments stream.
//
// REALTIME mode only.
//
// Type: string

input_fmq_url_long = "/tmp/fmq/moments/100hz.longPulse/shmem_20120";

///////////// seek_to_end_of_input_fmq ////////////////
//
// Option to seek to the end of the input FMQ.
//
// REALTIME mode only. If TRUE, the program will seek to the end of the 
//   fmq and only read in new data. If FALSE, it will start reading from 
//   the beginning of the FMQ.
//
// Type: boolean

seek_to_end_of_input_fmq = TRUE;

///////////// input_dir_short /////////////////////////
//
// Input directory short.
//
// ARCHIVE mode only. Directory for short pulse files.
//
// Type: string

input_dir_short = "$(HOME)/data/meow/cfradial/moments/100hz_short";

///////////// input_dir_long //////////////////////////
//
// Input directory long.
//
// ARCHIVE mode only. Directory for long pulse files.
//
// Type: string

input_dir_long = "$(HOME)/data/meow/cfradial/moments/100hz_long";

//======================================================================
//
// OVERRIDE PLATFORM TYPE?.
//
//======================================================================
 
///////////// override_platform_type //////////////////
//
// Option to override platform type on read. If true, the file will be 
//   read in, the platform type will be changed, and then any post-read 
//   processing will be performed.
//
// 	PLATFORM_FIXED  - radar is in a fixed location
// 	PLATFORM_VEHICLE -  radar is mounted on a land vehicle
// 	PLATFORM_SHIP - radar is mounted on a ship
// 	PLATFORM_AIRCRAFT_FORE - forward-looking on aircraft
// 	PLATFORM_AIRCRAFT_AFT - backward-looking on aircraft
// 	PLATFORM_AIRCRAFT_TAIL - tail - e.g. ELDORA
// 	PLATFORM_AIRCRAFT_BELLY -  belly radar on aircraft
// 	PLATFORM_AIRCRAFT_ROOF - roof radar on aircraft
// 	PLATFORM_AIRCRAFT_NOSE - radar in nose radome on aircraft
// 	PLATFORM_SATELLITE_ORBIT - orbiting satellite
// 	PLATFORM_SATELLITE_GEOSTAT - geostationary satellite.
//
// Type: boolean

override_platform_type = FALSE;

///////////// platform_type ///////////////////////////
//
// Platform type.
//
// See override_platform_type.
//
// Type: enum
// Options:
//     PLATFORM_FIXED
//     PLATFORM_VEHICLE
//     PLATFORM_SHIP
//     PLATFORM_AIRCRAFT_FORE
//     PLATFORM_AIRCRAFT_AFT
//     PLATFORM_AIRCRAFT_TAIL
//     PLATFORM_AIRCRAFT_BELLY
//     PLATFORM_AIRCRAFT_ROOF
//     PLATFORM_AIRCRAFT_NOSE
//     PLATFORM_SATELLITE_ORBIT
//     PLATFORM_SATELLITE_GEOSTAT

platform_type = PLATFORM_AIRCRAFT_FORE;

//======================================================================
//
// OVERRIDE PRIMARY AXIS?.
//
//======================================================================
 
///////////// override_primary_axis ///////////////////
//
// Option to override primary axis on read. If true, the file will be 
//   read in, the primary axis will be changed, and then any post-read 
//   processing will be performed.
//
// 	PRIMARY_AXIS_Z - vertical
// 	PRIMARY_AXIS_Y - longitudinal axis of platform
// 	PRIMARY_AXIS_X - lateral axis of platform
// 	PRIMARY_AXIS_Z_PRIME - inverted vertical
// 	PRIMARY_AXIS_Y_PRIME - ELDORA, HRD tail
// 	PRIMARY_AXIS_X_PRIME - translated lateral.
//
// Type: boolean

override_primary_axis = FALSE;

///////////// primary_axis ////////////////////////////
//
// Platform type.
//
// See override_primary_axis.
//
// Type: enum
// Options:
//     PRIMARY_AXIS_Z
//     PRIMARY_AXIS_Y
//     PRIMARY_AXIS_X
//     PRIMARY_AXIS_Z_PRIME
//     PRIMARY_AXIS_Y_PRIME
//     PRIMARY_AXIS_X_PRIME

primary_axis = PRIMARY_AXIS_Y_PRIME;

//======================================================================
//
// OVERRIDE SWEEP MODE?.
//
//======================================================================
 
///////////// override_sweep_mode /////////////////////
//
// Option to override the sweep modes in the data.
//
// If TRUE, the mode for all sweeps is set to sweep_mode.
//
// Type: boolean

override_sweep_mode = TRUE;

///////////// sweep_mode //////////////////////////////
//
// Sweep mode for all sweeps.
//
// See override_sweep_mode.
//
// Type: enum
// Options:
//     SWEEP_MODE_SECTOR
//     SWEEP_MODE_RHI
//     SWEEP_MODE_VERTICAL_POINTING
//     SWEEP_MODE_AZIMUTH_SURVEILLANCE
//     SWEEP_MODE_ELEVATION_SURVEILLANCE
//     SWEEP_MODE_SUNSCAN
//     SWEEP_MODE_POINTING
//     SWEEP_MODE_SUNSCAN_RHI
//     SWEEP_MODE_ELECTRONIC_STEERING

sweep_mode = SWEEP_MODE_VERTICAL_POINTING;

///////////// set_max_range ///////////////////////////
//
// Option to set the max range for any ray.
//
// Type: boolean

set_max_range = FALSE;

///////////// max_range_km ////////////////////////////
//
// Specified maximim range - km.
//
// Gates beyond this range are removed.
//
// Type: double

max_range_km = 9999;

//======================================================================
//
// SET THE COMBINED DWELL DETAILS.
//
// Normally we combine the high-rate moments data (say at 100 hz) into 
//   lower-rate dwells, say at 10 hz.
//
//======================================================================
 
///////////// dwell_length_secs ///////////////////////
//
// Specify the output dwell length (secs).
//
// Dwells from the input data will be combined to form dwells covering 
//   the specified time.
//
// Type: double

dwell_length_secs = 0.1;

///////////// dwell_stats_method //////////////////////
//
// Method for computing stats on the dwell.
//
// MIDDLE refers to the middle ray in the dwell sequence. The 
//   DISCRETE_MODE computes applies only to discrete (integer) fields, and 
//   returns the most common entry in a discrete data set.
//
// Type: enum
// Options:
//     DWELL_STATS_MEAN
//     DWELL_STATS_MEDIAN
//     DWELL_STATS_MAXIMUM
//     DWELL_STATS_MINIMUM
//     DWELL_STATS_MIDDLE
//     DWELL_STATS_DISCRETE_MODE

dwell_stats_method = DWELL_STATS_MEAN;

///////////// dwell_stats_max_fraction_missing ////////
//
// Specify the max fraction of the dwell that can have missing data.
//
// We compute how much of the dwell is missing for each field. If the 
//   fraction exceeds this parameter, the combined value will be set to 
//   missing.
//
// Minimum val: 0
// Maximum val: 1
//
// Type: double

dwell_stats_max_fraction_missing = 0.25;

//======================================================================
//
// OPTION TO SET STATS METHOD FOR INDIVIDUAL FIELDS.
//
//======================================================================
 
///////////// set_stats_method_for_individual_fields //
//
// Set the stats method for individual fields.
//
// The global stats method is set by the 'dwell_stats_method' parameter. 
//   If 'set_stats_method_for_individual_fields' is true, we can set the 
//   stats method on particular fields. Fields not specified here will use 
//   the global parameter.
//
// Type: boolean

set_stats_method_for_individual_fields = FALSE;

///////////// stats_method_fields /////////////////////
//
// Stats methods for individual fields.
//
// Applies if 'set_stats_method_for_individual_fields' is true. The 
//   global stats method is set by the 'dwell_stats_method' parameter. 
//   Fields not specified here will use the global parameter.
//
// Type: struct
//   typedef struct {
//      string field_name;
//      dwell_stats_method_t stats_method;
//        Options:
//          DWELL_STATS_MEAN
//          DWELL_STATS_MEDIAN
//          DWELL_STATS_MAXIMUM
//          DWELL_STATS_MINIMUM
//          DWELL_STATS_MIDDLE
//          DWELL_STATS_DISCRETE_MODE
//   }
//
// 1D array - variable length.

stats_method_fields = {
  {
    field_name = "FLAG",
    stats_method = DWELL_STATS_MEDIAN
  }
  ,
  {
    field_name = "ANTENNA_FLAG",
    stats_method = DWELL_STATS_MIDDLE
  }
};

//======================================================================
//
// FIELD NAMES for combination.
//
// The long pulse rays have a longer PRT than the short pulse rays. This 
//   allows us to unfold the velocity field using the staggered-PRT 
//   technique. If both long and short PRT data are present, the velocity 
//   field is unfolded into a final velocity field.
//
//======================================================================
 
///////////// perform_velocity_unfolding //////////////
//
// Option to unfold the velocity field.
//
// If false, the short vel will be copied to the unfolded field. The 
//   vel_unfolded field will be added to the output data set.
//
// Type: boolean

perform_velocity_unfolding = TRUE;

///////////// input_vel_field_name ////////////////////
//
// This is the name for the velocity field in the input data.
//
// The field name must be the same for the short- and long-prt rays.
//
// Type: string

input_vel_field_name = "VEL";

///////////// suffix_to_add_for_short_pulse_fields ////
//
// This suffix is added to the input fields for short-prt moments.
//
// For each incoming short-pulse field, we add this suffix to the 
//   incoming field name.
//
// Type: string

suffix_to_add_for_short_pulse_fields = "_short";

///////////// suffix_to_add_for_long_pulse_fields /////
//
// This suffix is added to the input fields for long-prt moments.
//
// For each incoming long-pulse field, we add this suffix to the 
//   incoming field name.
//
// Type: string

suffix_to_add_for_long_pulse_fields = "_long";

///////////// vel_unfolded_field_name /////////////////
//
// Name for the unfolded velocity.
//
// This is an output field, computed by unfolding the dual-prt vel 
//   fields.
//
// Type: string

vel_unfolded_field_name = "VEL_unfold";

///////////// correct_velocity_for_platform_vertical_motion 
//
// Option to correct the estimated velocity corrected for vertical 
//   platform motion.
//
// For an airborne platform, we measure the vertical velocity of the 
//   platform using an INS system. We can optionally correct the measured 
//   velocity for the plaform vertical motion. This correction is applied 
//   AFTER the unfolding computation.
//
// Type: boolean

correct_velocity_for_platform_vertical_motion = FALSE;

//======================================================================
//
// OUTPUT FMQ.
//
//======================================================================
 
///////////// output_fmq_url //////////////////////////
//
// FMQ to which the combined dwells are written.
//
// FMQ mode only.
//
// Type: string

output_fmq_url = "fmqp:://localhost::/tmp/fmq/moments/100hz.combined";

///////////// output_fmq_compress /////////////////////
//
// Option to compress the output fmq.
//
// The default is for no compression.
//
// Type: boolean

output_fmq_compress = FALSE;

///////////// output_fmq_n_slots //////////////////////
//
// Number of slots in output FMQ.
//
// Type: int

output_fmq_n_slots = 5000;

///////////// output_fmq_buf_size /////////////////////
//
// Size of buffer in output FMQ.
//
// Type: int

output_fmq_buf_size = 100000000;

///////////// output_fmq_write_blocking ///////////////
//
// Option to block on write when the radar queue fills up.
//
// If false, the program writes data to the output queue without regard 
//   to whether the reader is keeping up. This mode should usually be used 
//   in realtime, to avoid holding things up if a client becomes slow. If 
//   true, the program will not overwrite data in the queue which has not 
//   been read by the reader. This is recommended for ARCHIVE and FILELIST 
//   mode. In this mode there should be only one reader. If you need to 
//   service more than one reader, use Fmq2Fmq in write blocking mode with 
//   multiple output urls to multiplex the queue.
//
// Type: boolean

output_fmq_write_blocking = FALSE;

///////////// output_fmq_data_mapper_report_interval //
//
// Number of seconds between reports to DataMapper.
//
// If > 0, the program will register with the DataMapper when the output 
//   FMQs are written to. If <= 0, registration will not be performed.
//
// Type: int

output_fmq_data_mapper_report_interval = 5;

