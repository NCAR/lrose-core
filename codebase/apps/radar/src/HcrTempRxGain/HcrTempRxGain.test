/**********************************************************************
 * TDRP params for HcrTempRxGain
 **********************************************************************/

//======================================================================
//
// HcrTempRxGain reads in HCR monitoring data from SPDB, computes the 
//   gain correction from the temperatures, and writes out the results to 
//   SPDB. The HCR monitoring data is generated by TsStatusMonitor, which 
//   reads in time series and writes out the status XML to SPDB.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

//======================================================================
//
// RUN MODE.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
//

//
// REALTIME: trigger based on a time interval.  
//
// ARCHIVE: process data between start time and end time.
//
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//

mode = ARCHIVE;

///////////// instance ////////////////////////////////
//
// Program instance for process registration.
//
// In REALTIME mode, this application registers with procmap. This is 
//   the instance used for registration.
//
//
// Type: string
//

instance = "socrates";

//======================================================================
//
// DATA INPUT.
//
// Input is status metadata in XML, stored by time in SPDB.
//
//======================================================================
 
///////////// input_spdb_url //////////////////////////
//
// Input URL for monitoring data in SPDB. This is in XML format.
//
//
// Type: string
//

input_spdb_url = "spdbp:://localhost:0:/scr/rain1/rsfdata/projects/socrates/hcr/spdb/monitor/qc";

///////////// realtime_wait_interval_secs /////////////
//
// REALTIME mode - interval between processing (secs).
//
// The app wakes up at this interval and processes the latest data.
//
//
// Type: int
//

realtime_wait_interval_secs = 1;

///////////// archive_start_time //////////////////////
//
// Start time for archive mode.
//
// In ARCHIVE mode, data retrieval starts at this time.
//
//
// Type: string
//

archive_start_time = "2018 01 15 00 00 00";

///////////// archive_end_time ////////////////////////
//
// End time for archive mode.
//
// In ARCHIVE mode, data retrieval ends at this time.
//
//
// Type: string
//

archive_end_time = "2018 02 25 00 00 00";

///////////// archive_processing_interval_secs ////////
//
// ARCHIVE mode - time span for processing data (secs).
//
// In archive mode, we read in this length of data at a time, and 
//   process it as a block. This value can be changed to optimize 
//   efficiency.
//
//
// Type: int
//

archive_processing_interval_secs = 900;

//======================================================================
//
// DATA OUTPUT.
//
// Output is gain correction in XML, stored by time in SPDB.
//
//======================================================================
 
///////////// output_spdb_url /////////////////////////
//
// Output URL for gain correction data in SPDB. This is in XML format.
//
//
// Type: string
//

output_spdb_url = "spdbp:://localhost:0:/tmp/hcr/spdb/gain_correction";

//======================================================================
//
// PROCESSING DETAILS.
//
//======================================================================
 
///////////// lna_temperature_tag /////////////////////
//
// Tag for LNA temp in XML.
//
// The LNA is temperature controlled, but the temperature oscillates as 
//   the heater cycles on and off.
//
//
// Type: string
//

lna_temperature_tag = "VLnaTemp";

///////////// pod_temperature_tags ////////////////////
//
// Tags for POD temperatures.
//
// The pod temperature is computed as the mean of these temperatures.
//
//
// Type: string
// 1D array - variable length.
//

pod_temperature_tags = {
 "EikTemp",
 "PolarizationSwitchTemp",
 "RfDetectorTemp",
 "NoiseSourceTemp"
};

///////////// lna_gain_per_temp_slope /////////////////
//
// Slope of LNA gain against LNA temperature (dB/degC).
//
// We use this slope, and the difference between the measured 
//   temperature and calibrated temperature, to estimate the LNA gain 
//   change from the temperature.
//
//
// Type: double
//

lna_gain_per_temp_slope = 0.16436;

///////////// lna_reference_temperature_C /////////////
//
// Reference temperature for the LNA (degC).
//
// This is the estimated LNA temperature during the calibration in the 
//   lab. The LNA gain change is dependent on the difference between this 
//   reference temperature and the measured temperature during operations.
//
//
// Type: double
//

lna_reference_temperature_C = 29.739;

///////////// rx_gain_per_temp_slope //////////////////
//
// Slope of receiver gain against POD temperature (dB/degC).
//
// We use this slope, and the difference between the measured 
//   temperature and calibrated temperature, to estimate the receiver gain 
//   change from the temperature.
//
//
// Type: double
//

rx_gain_per_temp_slope = -0.1085;

///////////// pod_reference_temperature_C /////////////
//
// Reference temperature for the POD (degC).
//
// This is the estimated POD temperature during the calibration in the 
//   lab. The receiver gain change is dependent on the difference between 
//   this reference temperature and the measured temperature during 
//   operations.
//
//
// Type: double
//

pod_reference_temperature_C = 19.39;

///////////// lna_temperature_time_lag_secs ///////////
//
// Time lag between the LNA power curve and the LNA temperature curve 
//   (secs).
//
// A positive number means that the measured temperature lags the 
//   measured power in a noise source calibration. A negative number means 
//   that the power lags the temperature.
//
//
// Type: int
//

lna_temperature_time_lag_secs = -7;

///////////// temperature_smoothing_interval_secs /////
//
// Interval over which temperatures are smoothed before use (secs).
//
// We compute the mean for each temperature, over this interval, 
//   centered on the time of interest.
//
//
// Type: int
//

temperature_smoothing_interval_secs = 10;

///////////// ocean_scan_reflectivity_bias ////////////
//
// Reflectivity bias as estimated from the ocean scans (dB).
//
// This is bias in reflectivity, as estimated from the ocean-surface 
//   scans. The reflectivity must be reduced by this amount.
//
//
// Type: double
//

ocean_scan_reflectivity_bias = 2.386;

