/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program TsCalAuto
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("TsCalAuto analyses radar calibration data.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register with the process mapper.");
    tt->help = tdrpStrDup("If true, this application will try to register with procmap once per minute. (If unable to do so, no error occurs.)");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("TIME SERIES - INPUT DATA");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_fmq_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_path");
    tt->descr = tdrpStrDup("Path to time series FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_fmq_path - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/fmq/ts");
    tt++;
    
    // Parameter 'n_samples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_samples");
    tt->descr = tdrpStrDup("Number of pulse samples to average for cal data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &n_samples - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'start_gate'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("start_gate");
    tt->descr = tdrpStrDup("Gate number for start of averaging.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &start_gate - &_start_;
    tt->single_val.i = 50;
    tt++;
    
    // Parameter 'n_gates'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_gates");
    tt->descr = tdrpStrDup("Number of gates for averaging.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &n_gates - &_start_;
    tt->single_val.i = 200;
    tt++;
    
    // Parameter 'fast_alternating_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("fast_alternating_mode");
    tt->descr = tdrpStrDup("Is the radar running in dual-pol fast alternating mode?");
    tt->help = tdrpStrDup("If not, set to FALSE.");
    tt->val_offset = (char *) &fast_alternating_mode - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'switching_receivers'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("switching_receivers");
    tt->descr = tdrpStrDup("Does the system have switching receivers?");
    tt->help = tdrpStrDup("If the receiver path switched every pulse, i.e. to operate in co-polar and x-polar mode, set this to true.");
    tt->val_offset = (char *) &switching_receivers - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'check_radar_id'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_radar_id");
    tt->descr = tdrpStrDup("Option to check the radar ID in the time series data stream.");
    tt->help = tdrpStrDup("If TRUE, we will check that the radar_id in the header packet info is either the specified radar_id, or is 0. This allows us to filter out unwanted data from the time series stream. Mostly this is not applicable. However, in some cases time series data from multiple sources is included in a single stream, in which case we need to filter it accordingly.");
    tt->val_offset = (char *) &check_radar_id - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_id'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("radar_id");
    tt->descr = tdrpStrDup("radar_id to be used for filtering incoming data.");
    tt->help = tdrpStrDup("See 'check_radar_id' above.");
    tt->val_offset = (char *) &radar_id - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("SIGNAL GENERATOR CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'siggen_tcp_port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("siggen_tcp_port");
    tt->descr = tdrpStrDup("TCP port for SIGGEN");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &siggen_tcp_port - &_start_;
    tt->single_val.i = 5025;
    tt++;
    
    // Parameter 'siggen_ip_address'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("siggen_ip_address");
    tt->descr = tdrpStrDup("IP address for SIGGEN");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &siggen_ip_address - &_start_;
    tt->single_val.s = tdrpStrDup("sig");
    tt++;
    
    // Parameter 'siggen_max_power'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("siggen_max_power");
    tt->descr = tdrpStrDup("Max power for siggen signal (dBm)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &siggen_max_power - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'siggen_min_power'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("siggen_min_power");
    tt->descr = tdrpStrDup("Min power for siggen signal (dBm)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &siggen_min_power - &_start_;
    tt->single_val.d = -130;
    tt++;
    
    // Parameter 'siggen_delta_power'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("siggen_delta_power");
    tt->descr = tdrpStrDup("Power step for siggen (dBm)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &siggen_delta_power - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'siggen_specify_power_sequence'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("siggen_specify_power_sequence");
    tt->descr = tdrpStrDup("Option to specify the power sequence to use in the cal.");
    tt->help = tdrpStrDup("If true, the siggen_power_sequence will be used. If false, the power will start at siggen_max_power and decrease to siggen_min_power, in steps of siggen_delta_power.");
    tt->val_offset = (char *) &siggen_specify_power_sequence - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'siggen_power_sequence'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("siggen_power_sequence");
    tt->descr = tdrpStrDup("Min power for siggen signal (dBm)");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_siggen_power_sequence - &_start_;
    tt->array_n_offset = (char *) &siggen_power_sequence_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 27;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 0;
      tt->array_vals[1].d = -5;
      tt->array_vals[2].d = -10;
      tt->array_vals[3].d = -15;
      tt->array_vals[4].d = -20;
      tt->array_vals[5].d = -25;
      tt->array_vals[6].d = -30;
      tt->array_vals[7].d = -35;
      tt->array_vals[8].d = -40;
      tt->array_vals[9].d = -45;
      tt->array_vals[10].d = -50;
      tt->array_vals[11].d = -55;
      tt->array_vals[12].d = -60;
      tt->array_vals[13].d = -65;
      tt->array_vals[14].d = -70;
      tt->array_vals[15].d = -75;
      tt->array_vals[16].d = -80;
      tt->array_vals[17].d = -85;
      tt->array_vals[18].d = -90;
      tt->array_vals[19].d = -95;
      tt->array_vals[20].d = -100;
      tt->array_vals[21].d = -105;
      tt->array_vals[22].d = -110;
      tt->array_vals[23].d = -115;
      tt->array_vals[24].d = -120;
      tt->array_vals[25].d = -125;
      tt->array_vals[26].d = -130;
    tt++;
    
    // Parameter 'set_sig_freq'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_sig_freq");
    tt->descr = tdrpStrDup("Switch to set the Frequency on the sig gen before starting.");
    tt->help = tdrpStrDup("If the Test Pulse Manager is on, you probably don't want to reset it.");
    tt->val_offset = (char *) &set_sig_freq - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'siggen_frequency'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("siggen_frequency");
    tt->descr = tdrpStrDup("Siggen frequency (GHz)");
    tt->help = tdrpStrDup("This should match the radar's frequency.");
    tt->val_offset = (char *) &siggen_frequency - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'siggen_cmd_delay'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("siggen_cmd_delay");
    tt->descr = tdrpStrDup("Siggen command delay (msec)");
    tt->help = tdrpStrDup("Delay this ammount after each command to give the siggen time to stabilize a power change.");
    tt->val_offset = (char *) &siggen_cmd_delay - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'use_manual_siggen_control'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_manual_siggen_control");
    tt->descr = tdrpStrDup("Option to manually set the siggen.");
    tt->help = tdrpStrDup("Use for testing etc.");
    tt->val_offset = (char *) &use_manual_siggen_control - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'suspend_test_pulse'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("suspend_test_pulse");
    tt->descr = tdrpStrDup("Option to suspend the test pulse while the calibration is running.");
    tt->help = tdrpStrDup("See TestPulse_pid_file.");
    tt->val_offset = (char *) &suspend_test_pulse - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'TestPulse_pid_file'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("TestPulse_pid_file");
    tt->descr = tdrpStrDup("File containing the process ID of the TestPulse Utility program");
    tt->help = tdrpStrDup("On Startup, this program suspends the operation of TestPulse by sending it a SIGUSR1. After Finishing, it restores TestPulse operation by sending it a SIGUSR2");
    tt->val_offset = (char *) &TestPulse_pid_file - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/TestPulse.pid");
    tt++;
    
    // Parameter 'reset_siggen_power_after_cal'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("reset_siggen_power_after_cal");
    tt->descr = tdrpStrDup("Option to reset the siggen power after the cal is completed.");
    tt->help = tdrpStrDup("If set, after the cal the siggen will be set to the specified power and the RF will be turned on.");
    tt->val_offset = (char *) &reset_siggen_power_after_cal - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'siggen_power_val_after_cal'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("siggen_power_val_after_cal");
    tt->descr = tdrpStrDup("Siggen power after calibration complete (dBm)");
    tt->help = tdrpStrDup("See 'reset_siggen_power_after_cal'.");
    tt->val_offset = (char *) &siggen_power_val_after_cal - &_start_;
    tt->single_val.d = -50;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("CALIBRATION PROCEDURE PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'radarName'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("radarName");
    tt->descr = tdrpStrDup("Radar name");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &radarName - &_start_;
    tt->single_val.s = tdrpStrDup("Unknown");
    tt++;
    
    // Parameter 'radar_frequency'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_frequency");
    tt->descr = tdrpStrDup("Radar frequency (GHz)");
    tt->help = tdrpStrDup("If this is negative, the siggen_frequency will be used.");
    tt->val_offset = (char *) &radar_frequency - &_start_;
    tt->single_val.d = -9999;
    tt++;
    
    // Parameter 'k_squared'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("k_squared");
    tt->descr = tdrpStrDup("Constant related to complex index of refraction, for water, at this frequency");
    tt->help = tdrpStrDup("Suggested values are:\n\tS-band: 0.93\n\tC-band: 0.93\n\tX-band: 0.92\n\tKu-band: 0.90\n\tKa-band: 0.88\n\tW-band: 0.84\n");
    tt->val_offset = (char *) &k_squared - &_start_;
    tt->single_val.d = 0.93;
    tt++;
    
    // Parameter 'xmitPowerDbmH'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("xmitPowerDbmH");
    tt->descr = tdrpStrDup("Transmitter peak power H (dBm)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &xmitPowerDbmH - &_start_;
    tt->single_val.d = 80;
    tt++;
    
    // Parameter 'xmitPowerDbmV'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("xmitPowerDbmV");
    tt->descr = tdrpStrDup("Transmitter peak power V (dBm)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &xmitPowerDbmV - &_start_;
    tt->single_val.d = 80;
    tt++;
    
    // Parameter 'pulseWidthUs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("pulseWidthUs");
    tt->descr = tdrpStrDup("Transmit pulse width (micro_secs)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &pulseWidthUs - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'beamWidthDegH'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("beamWidthDegH");
    tt->descr = tdrpStrDup("Antenna 3dB beam width H (deg)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &beamWidthDegH - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'beamWidthDegV'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("beamWidthDegV");
    tt->descr = tdrpStrDup("Antenna 3dB beam width V (deg)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &beamWidthDegV - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'antGainDbH'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("antGainDbH");
    tt->descr = tdrpStrDup("Antenna gain H (dB)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &antGainDbH - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'antGainDbV'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("antGainDbV");
    tt->descr = tdrpStrDup("Antenna gain V (dB)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &antGainDbV - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'twoWayWaveguideLossDbH'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("twoWayWaveguideLossDbH");
    tt->descr = tdrpStrDup("2-way waveguide loss H (dB)");
    tt->help = tdrpStrDup("This is the loss from the measurement plane to the feed-horn and back. Sometimes it is set to 0 and the loss is incorporated in the antenna gain.");
    tt->val_offset = (char *) &twoWayWaveguideLossDbH - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'twoWayWaveguideLossDbV'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("twoWayWaveguideLossDbV");
    tt->descr = tdrpStrDup("2-way waveguide loss V (dB)");
    tt->help = tdrpStrDup("This is the loss from the measurement plane to the feed-horn and back. Sometimes it is set to 0 and the loss is incorporated in the antenna gain.");
    tt->val_offset = (char *) &twoWayWaveguideLossDbV - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'twoWayRadomeLossDbH'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("twoWayRadomeLossDbH");
    tt->descr = tdrpStrDup("2-way loss through the radome - H.");
    tt->help = tdrpStrDup("Set to 0 if no radome.");
    tt->val_offset = (char *) &twoWayRadomeLossDbH - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'twoWayRadomeLossDbV'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("twoWayRadomeLossDbV");
    tt->descr = tdrpStrDup("2-way loss through the radome - V.");
    tt->help = tdrpStrDup("Set to 0 if no radome.");
    tt->val_offset = (char *) &twoWayRadomeLossDbV - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'receiverMismatchLossDb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("receiverMismatchLossDb");
    tt->descr = tdrpStrDup("Receiver mismatch loss - (dB)");
    tt->help = tdrpStrDup("This is the loss which results from the fact that the receiver bandwidth is not exactly the same as the pulse width. The calibration procedure is carries out with a CW signal, so the redeiver bandwidth is not a factor. However, during operations, the receiver loses some power because of the bandwidth mismatch. This loss must be taken into account.");
    tt->val_offset = (char *) &receiverMismatchLossDb - &_start_;
    tt->single_val.d = 0.6;
    tt++;
    
    // Parameter 'noiseSourcePowerDbmH'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noiseSourcePowerDbmH");
    tt->descr = tdrpStrDup("Noise source power - H (dBm)");
    tt->help = tdrpStrDup("Some operational calibrations are computed with a calbrated noise source of known power.");
    tt->val_offset = (char *) &noiseSourcePowerDbmH - &_start_;
    tt->single_val.d = -40;
    tt++;
    
    // Parameter 'noiseSourcePowerDbmV'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noiseSourcePowerDbmV");
    tt->descr = tdrpStrDup("Noise source power - V (dBm)");
    tt->help = tdrpStrDup("Some operational calibrations are computed with a calbrated noise source of known power.");
    tt->val_offset = (char *) &noiseSourcePowerDbmV - &_start_;
    tt->single_val.d = -40;
    tt++;
    
    // Parameter 'powerMeasLossDbH'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("powerMeasLossDbH");
    tt->descr = tdrpStrDup("Power measurement loss - H (dBm).");
    tt->help = tdrpStrDup("This is the power loss from the signal generator to the waveguide coupler.");
    tt->val_offset = (char *) &powerMeasLossDbH - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'powerMeasLossDbV'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("powerMeasLossDbV");
    tt->descr = tdrpStrDup("Power measurement loss - V (dBm).");
    tt->help = tdrpStrDup("This is the power loss from the signal generator to the waveguide coupler.");
    tt->val_offset = (char *) &powerMeasLossDbV - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'couplerForwardLossDbH'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("couplerForwardLossDbH");
    tt->descr = tdrpStrDup("Coupler loss - H (dB)");
    tt->help = tdrpStrDup("This is the power loss in the directional coupler itself.");
    tt->val_offset = (char *) &couplerForwardLossDbH - &_start_;
    tt->single_val.d = 37;
    tt++;
    
    // Parameter 'couplerForwardLossDbV'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("couplerForwardLossDbV");
    tt->descr = tdrpStrDup("Coupler loss - V (dB)");
    tt->help = tdrpStrDup("This is the power loss in the directional coupler itself.");
    tt->val_offset = (char *) &couplerForwardLossDbV - &_start_;
    tt->single_val.d = 37;
    tt++;
    
    // Parameter 'systemPhidpDeg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("systemPhidpDeg");
    tt->descr = tdrpStrDup("System PHIDP (deg)");
    tt->help = tdrpStrDup("This is the approximate PHIDP value in the meteorlogical echo closest to the radar. Compute PHIDP is corrected using this value, so that the computed PHIDP closest to the radar is set to a value which minimizes the chance of folding.");
    tt->val_offset = (char *) &systemPhidpDeg - &_start_;
    tt->single_val.d = -70;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("ANALYSIS PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'linear_region_min_power'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("linear_region_min_power");
    tt->descr = tdrpStrDup("power value at lower end of linear region (dBm).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &linear_region_min_power - &_start_;
    tt->single_val.d = -80;
    tt++;
    
    // Parameter 'linear_region_max_power'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("linear_region_max_power");
    tt->descr = tdrpStrDup("power value at upper end of linear region (dBm).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &linear_region_max_power - &_start_;
    tt->single_val.d = -20;
    tt++;
    
    // Parameter 'noise_region_max_power'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noise_region_max_power");
    tt->descr = tdrpStrDup("power value at upper end of noise region (dBm).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &noise_region_max_power - &_start_;
    tt->single_val.d = -110;
    tt++;
    
    // Parameter 'snr_for_mds'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("snr_for_mds");
    tt->descr = tdrpStrDup("SNR for minimum detectable signal (dB).");
    tt->help = tdrpStrDup("The minimum detectable signal is generally well below the noise. This is the SNR value for the MDS.");
    tt->val_offset = (char *) &snr_for_mds - &_start_;
    tt->single_val.d = -6;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("OUTPUT RESULTS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Dir for output files.");
    tt->help = tdrpStrDup("The results will be written to sub-directories named from the cal time.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'output_file_label'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_file_label");
    tt->descr = tdrpStrDup("Label imbedded in the file name.");
    tt->help = tdrpStrDup("Ignored if empty");
    tt->val_offset = (char *) &output_file_label - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_script'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("plot_script");
    tt->descr = tdrpStrDup("If set, program will call script passing the output file names as the first argument");
    tt->help = tdrpStrDup("Typically, this script generates a plot and saves the output");
    tt->val_offset = (char *) &plot_script - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("REPROCESSING OPTIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_data_in_alt_column_order'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_data_in_alt_column_order");
    tt->descr = tdrpStrDup("Option to read data file with alternative column order.");
    tt->help = tdrpStrDup("TsCalAuto writes out the power data in the following order: hc, vc, hx, vx. Some systems, such as the SPOL ATE, writes out the data in hc, hx, vc, vx. If you set this option to true, the latter column order will be used to read in previously-stored data.");
    tt->val_offset = (char *) &read_data_in_alt_column_order - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
