/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.hh
//
// TDRP header file for 'Params' class.
//
// Code for program AparTs2Moments
//
// This header file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.hh
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @class Params
 *
 * @author automatically generated
 *
 */

#ifndef Params_hh
#define Params_hh

#include <tdrp/tdrp.h>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>

using namespace std;

// Class definition

class Params {

public:

  // enum typedefs

  typedef enum {
    DEBUG_OFF = 0,
    DEBUG_NORM = 1,
    DEBUG_VERBOSE = 2,
    DEBUG_EXTRA = 3
  } debug_t;

  typedef enum {
    FILELIST = 0,
    ARCHIVE = 1,
    REALTIME = 2,
    SIMULATE = 3,
    FMQ = 4
  } mode_t;

  typedef enum {
    WIDTH_METHOD_R0R1 = 0,
    WIDTH_METHOD_R1R2 = 1,
    WIDTH_METHOD_HYBRID = 2
  } spectrum_width_method_t;

  typedef enum {
    SINGLE_POL = 0,
    DP_ALT_HV_CO_ONLY = 1,
    DP_ALT_HV_CO_CROSS = 2,
    DP_ALT_HV_FIXED_HV = 3,
    DP_SIM_HV_FIXED_HV = 4,
    DP_SIM_HV_SWITCHED_HV = 5,
    DP_H_ONLY_FIXED_HV = 6,
    DP_V_ONLY_FIXED_HV = 7,
    SINGLE_POL_V = 10
  } xmit_rcv_mode_t;

  typedef enum {
    ATMOS_ATTEN_NONE = 0,
    ATMOS_ATTEN_CONSTANT = 1,
    ATMOS_ATTEN_CRPL = 2
  } atmos_atten_method_t;

  typedef enum {
    FIR_LEN_125 = 0,
    FIR_LEN_60 = 1,
    FIR_LEN_40 = 2,
    FIR_LEN_30 = 3,
    FIR_LEN_20 = 4,
    FIR_LEN_10 = 5
  } fir_filter_len_t;

  typedef enum {
    DBZ = 0,
    DBZ_NO_ATMOS_ATTEN = 1,
    DBZHC = 2,
    DBZVC = 3,
    DBZHX = 4,
    DBZVX = 5,
    VEL = 6,
    VEL_ALT = 7,
    VEL_HV = 8,
    VEL_H_ONLY = 9,
    VEL_V_ONLY = 10,
    VEL_ALT_FOLD_INTERVAL = 11,
    VEL_ALT_FOLD_CONFIDENCE = 12,
    VEL_CORRECTED = 13,
    VEL_PRT_SHORT = 14,
    VEL_PRT_LONG = 15,
    VEL_DIFF = 16,
    VEL_UNFOLD_INTERVAL = 17,
    WIDTH = 18,
    WIDTH_R0R1 = 19,
    WIDTH_R1R2 = 20,
    WIDTH_R1R3 = 21,
    WIDTH_PPLS = 22,
    WIDTH_H_ONLY = 23,
    WIDTH_V_ONLY = 24,
    WIDTH_PRT_LONG = 25,
    WIDTH_PRT_SHORT = 26,
    NCP = 27,
    NCP_H_ONLY = 28,
    NCP_V_ONLY = 29,
    NCP_H_MINUS_V = 30,
    NCP_PRT_LONG = 31,
    NCP_PRT_SHORT = 32,
    NCP_TRIP_FLAG = 33,
    NOISE_BIAS_DB_HC = 34,
    NOISE_BIAS_DB_HX = 35,
    NOISE_BIAS_DB_VC = 36,
    NOISE_BIAS_DB_VX = 37,
    SNR = 38,
    SNRHC = 39,
    SNRHX = 40,
    SNRVC = 41,
    SNRVX = 42,
    DBM = 43,
    DBMHC = 44,
    DBMHX = 45,
    DBMVC = 46,
    DBMVX = 47,
    DBMHC_NS = 48,
    DBMHX_NS = 49,
    DBMVC_NS = 50,
    DBMVX_NS = 51,
    ZDRM = 52,
    ZDR = 53,
    ZDR_BIAS = 54,
    LDR = 55,
    LDRHM = 56,
    LDRH = 57,
    LDRVM = 58,
    LDRV = 59,
    LDR_DIFF = 60,
    LDR_MEAN = 61,
    RHOHV = 62,
    RHOHV_NNC = 63,
    PHIDP0 = 64,
    PHIDP = 65,
    PHIDP_COND = 66,
    PHIDP_FILT = 67,
    PHIDP_SDEV_4KDP = 68,
    PHIDP_JITTER_4KDP = 69,
    ZDR_SDEV_4KDP = 70,
    KDP = 71,
    PSOB = 72,
    KDP_HB = 73,
    RHO_HC_VX = 74,
    RHO_VC_HX = 75,
    RHO_VX_HX = 76,
    RHO_PHIDP = 77,
    DBZ_ATTEN_CORRECTION = 78,
    ZDR_ATTEN_CORRECTION = 79,
    DBZ_ATTEN_CORRECTED = 80,
    ZDR_ATTEN_CORRECTED = 81,
    LAG0_HC_DB = 82,
    LAG0_HX_DB = 83,
    LAG0_VC_DB = 84,
    LAG0_VX_DB = 85,
    LAG0_HC_SHORT_DB = 86,
    LAG0_VC_SHORT_DB = 87,
    LAG0_HC_LONG_DB = 88,
    LAG0_VC_LONG_DB = 89,
    LAG0_VCHX_DB = 90,
    LAG0_VCHX_PHASE = 91,
    LAG0_HCVX_DB = 92,
    LAG0_HCVX_PHASE = 93,
    LAG1_HC_DB = 94,
    LAG1_HC_PHASE = 95,
    LAG1_VC_DB = 96,
    LAG1_VC_PHASE = 97,
    LAG1_HCVC_DB = 98,
    LAG1_HCVC_PHASE = 99,
    LAG1_VCHC_DB = 100,
    LAG1_VCHC_PHASE = 101,
    LAG1_VXHX_DB = 102,
    LAG1_VXHX_PHASE = 103,
    LAG1_HC_LONG_DB = 104,
    LAG1_HC_LONG_PHASE = 105,
    LAG1_VC_LONG_DB = 106,
    LAG1_VC_LONG_PHASE = 107,
    LAG1_HC_SHORT_DB = 108,
    LAG1_HC_SHORT_PHASE = 109,
    LAG1_VC_SHORT_DB = 110,
    LAG1_VC_SHORT_PHASE = 111,
    LAG1_HC_LONG_TO_SHORT_DB = 112,
    LAG1_HC_LONG_TO_SHORT_PHASE = 113,
    LAG1_VC_LONG_TO_SHORT_DB = 114,
    LAG1_VC_LONG_TO_SHORT_PHASE = 115,
    LAG1_HC_SHORT_TO_LONG_DB = 116,
    LAG1_HC_SHORT_TO_LONG_PHASE = 117,
    LAG1_VC_SHORT_TO_LONG_DB = 118,
    LAG1_VC_SHORT_TO_LONG_PHASE = 119,
    LAG2_HC_DB = 120,
    LAG2_HC_PHASE = 121,
    LAG2_VC_DB = 122,
    LAG2_VC_PHASE = 123,
    LAG3_HC_DB = 124,
    LAG3_HC_PHASE = 125,
    LAG3_VC_DB = 126,
    LAG3_VC_PHASE = 127,
    RVVHH0_DB = 128,
    RVVHH0_PHASE = 129,
    RVVHH0_LONG_DB = 130,
    RVVHH0_LONG_PHASE = 131,
    RVVHH0_SHORT_DB = 132,
    RVVHH0_SHORT_PHASE = 133,
    SDEV_VV = 134,
    PRT = 135,
    NUM_PULSES = 136,
    TEST = 137,
    TEST2 = 138,
    TEST3 = 139,
    TEST4 = 140,
    TEST5 = 141
  } field_id_t;

  // struct typedefs

  typedef struct {
    double pulse_width_us;
    char* cal_dir;
    double zdr_correction_db;
    double system_phidp_deg;
  } pulse_width_cal_t;

  typedef struct {
    field_id_t id;
    char* name;
    char* units;
    double scale;
    double bias;
  } output_field_t;

  ///////////////////////////
  // Member functions
  //

  ////////////////////////////////////////////
  // Default constructor
  //

  Params ();

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params (const Params&);

  ////////////////////////////////////////////
  // Destructor
  //

  ~Params ();

  ////////////////////////////////////////////
  // Assignment
  //

  void operator=(const Params&);

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadFromArgs(int argc, char **argv,
                   char **override_list,
                   char **params_path_p,
                   bool defer_exit = false);

  bool exitDeferred() { return (_exitDeferred); }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadApplyArgs(const char *params_path,
                    int argc, char **argv,
                    char **override_list,
                    bool defer_exit = false);

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  static bool isArgValid(const char *arg);

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  static int isArgValidN(const char *arg);

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int load(const char *param_file_path,
           char **override_list,
           int expand_env, int debug);

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadFromBuf(const char *param_source_str,
                  char **override_list,
                  const char *inbuf, int inlen,
                  int start_line_num,
                  int expand_env, int debug);

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadDefaults(int expand_env);

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void sync() const;

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void print(FILE *out, tdrp_print_mode_t mode = PRINT_NORM);

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int checkAllSet(FILE *out);

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int checkIsSet(const char *param_name);

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int arrayRealloc(const char *param_name,
                   int new_array_n);

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int array2DRealloc(const char *param_name,
                     int new_array_n1,
                     int new_array_n2);

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void freeAll(void);

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  static void usage(ostream &out);

  ///////////////////////////
  // Data Members
  //

  char _start_; // start of data region
                // needed for zeroing out data
                // and computing offsets

  debug_t debug;

  int beam_count_for_debug_print;

  char* instance;

  tdrp_bool_t use_multiple_threads;

  int n_compute_threads;

  mode_t mode;

  char* input_fmq;

  tdrp_bool_t position_fmq_at_start;

  char* input_dir;

  tdrp_bool_t use_ldata_info_file;

  int max_realtime_valid_age;

  int max_pulses_per_dwell;

  tdrp_bool_t invert_hv_flag;

  tdrp_bool_t change_velocity_sign;

  tdrp_bool_t change_velocity_sign_staggered;

  double georef_time_margin_secs;

  tdrp_bool_t use_secondary_georeference;

  tdrp_bool_t check_radar_id;

  int radar_id;

  tdrp_bool_t override_radar_name;

  char* radar_name;

  tdrp_bool_t override_radar_location;

  double radar_latitude_deg;

  double radar_longitude_deg;

  double radar_altitude_meters;

  tdrp_bool_t override_gate_geometry;

  double gate_spacing_meters;

  double start_range_meters;

  tdrp_bool_t override_radar_wavelength;

  double radar_wavelength_cm;

  tdrp_bool_t compute_zdr_using_snr;

  tdrp_bool_t check_for_missing_pulses;

  tdrp_bool_t correct_for_system_phidp;

  int zdr_median_filter_len;

  int rhohv_median_filter_len;

  int staggered_prt_median_filter_len;

  spectrum_width_method_t spectrum_width_method;

  char* startup_cal_file;

  tdrp_bool_t set_cal_by_pulse_width;

  pulse_width_cal_t *_pulse_width_cals;
  int pulse_width_cals_n;

  int cal_recheck_period;

  tdrp_bool_t use_cal_from_time_series;

  tdrp_bool_t override_cal_dbz_correction;

  double dbz_correction;

  tdrp_bool_t override_cal_zdr_correction;

  double zdr_correction_db;

  tdrp_bool_t threshold_zdr_using_snr;

  double min_snr_db_for_zdr;

  tdrp_bool_t override_cal_ldr_corrections;

  double ldr_correction_db_h;

  double ldr_correction_db_v;

  tdrp_bool_t threshold_ldr_using_snr;

  double min_snr_db_for_ldr;

  tdrp_bool_t override_cal_system_phidp;

  double system_phidp_deg;

  tdrp_bool_t change_phidp_sign;

  tdrp_bool_t apply_precip_attenuation_correction;

  tdrp_bool_t specify_coefficients_for_attenuation_correction;

  double dbz_attenuation_coefficient;

  double dbz_attenuation_exponent;

  double zdr_attenuation_coefficient;

  double zdr_attenuation_exponent;

  atmos_atten_method_t atmos_atten_method;

  double atmos_atten_db_per_km;

  fir_filter_len_t KDP_fir_filter_len;

  int KDP_n_filt_iterations_unfolded;

  int KDP_n_filt_iterations_conditioned;

  tdrp_bool_t KDP_use_iterative_filtering;

  double KDP_phidp_difference_threshold;

  int KDP_ngates_for_stats;

  double KDP_phidp_sdev_max;

  double KDP_phidp_jitter_max;

  tdrp_bool_t KDP_check_snr;

  double KDP_snr_threshold;

  tdrp_bool_t KDP_check_rhohv;

  double KDP_rhohv_threshold;

  tdrp_bool_t KDP_check_zdr_sdev;

  double KDP_zdr_sdev_max;

  double KDP_min_valid_abs_kdp;

  tdrp_bool_t KDP_debug;

  tdrp_bool_t KDP_write_ray_files;

  char* KDP_ray_files_dir;

  char* output_fmq_url;

  int output_fmq_size;

  int output_fmq_nslots;

  tdrp_bool_t output_fmq_compress;

  int nbeams_for_params_and_calib;

  tdrp_bool_t write_blocking;

  int beam_wait_msecs;

  output_field_t *_output_fields;
  int output_fields_n;

  int data_mapper_report_interval;

  char _end_; // end of data region
              // needed for zeroing out data

private:

  void _init();

  mutable TDRPtable _table[103];

  const char *_className;

  bool _exitDeferred;

};

#endif

