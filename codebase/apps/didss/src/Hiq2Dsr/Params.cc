/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Hiq2Dsr
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Hiq2Dsr PARAMETER FILE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROGRAM MODES OF OPERATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'debug_hiq'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_hiq");
    tt->descr = tdrpStrDup("Debug option for reading the HiQ messages");
    tt->help = tdrpStrDup("If set, verbose debug messages will be printed when any HiQ data is read in. These messages are very verbose so only use this option when debugging a problem with the HiQ interface.");
    tt->val_offset = (char *) &debug_hiq - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'debug_hiq_summary'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_hiq_summary");
    tt->descr = tdrpStrDup("Debug option for reading the HiQ messages");
    tt->help = tdrpStrDup("If set, summary debug messages will be printed when any HiQ data is read in. These messages include the elevation angle, azimuth angle and time values from the received header.");
    tt->val_offset = (char *) &debug_hiq_summary - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Instance");
    tt->help = tdrpStrDup("Used for process registration");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_type'
    // ctype is '_input_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_type");
    tt->descr = tdrpStrDup("Input type");
    tt->help = tdrpStrDup("Specifies where the HiQ data is coming from:\n\tRAP_ARCHIVE_FILE - The HiQ data will be read from a list of files created earlier by Hiq2Dsr. These input files must be in the same format as the files created by Hiq2Dsr when file archiving, either to a single file or to multiple files, is turned on. To specify the input files, either use the input_files parameter below or use the -if command line option. Also, the input_msgs_per_sec indicates the number of input messages to process per second. This is used to slow the file ingest down to be closer to realtime. For our setup in the UAE, the beam data is split into 3 messages per beam. \tUDP - The HiQ data is coming over a UDP port. For UDP input, the port parameter must be specified. The test HiQ system used port number 21010 for UDP connections.");
    tt->val_offset = (char *) &input_type - &_start_;
    tt->enum_def.name = tdrpStrDup("input_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("RAP_ARCHIVE_FILE");
      tt->enum_def.fields[0].val = RAP_ARCHIVE_FILE;
      tt->enum_def.fields[1].name = tdrpStrDup("UDP");
      tt->enum_def.fields[1].val = UDP;
    tt->single_val.e = UDP;
    tt++;
    
    // Parameter 'port'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("UDP port for beam data packets");
    tt->help = tdrpStrDup("Used only if input_type is set to UDP");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.l = 21010;
    tt++;
    
    // Parameter 'input_files'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_files");
    tt->descr = tdrpStrDup("List of input files to use when input_type is set to RAP_ARCHIVE_FILE.");
    tt->help = tdrpStrDup("Used only if input_type is set to RAP_ARCHIVE_FILE and overridden by the -if command line argument.");
    tt->array_offset = (char *) &_input_files - &_start_;
    tt->array_n_offset = (char *) &input_files_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("file1");
      tt->array_vals[1].s = tdrpStrDup("file2");
    tt++;
    
    // Parameter 'input_msgs_per_sec'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("input_msgs_per_sec");
    tt->descr = tdrpStrDup("Number of messages processed from the input file per second");
    tt->help = tdrpStrDup("Used only if input_type is set to RAP_ARCHIVE_FILE.");
    tt->val_offset = (char *) &input_msgs_per_sec - &_start_;
    tt->single_val.l = 60;
    tt++;
    
    // Parameter 'msg_type'
    // ctype is '_msg_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("msg_type");
    tt->descr = tdrpStrDup("Type of messages that will be received from the HiQ");
    tt->help = tdrpStrDup("\tEOL_HIQ_MSGS - The HiQ is sending the messages used in the original processor as designed by NCAR/EOL.\n\tARC_HIQ_MSGS - The HiQ is sending the messages designed by ARC in 2008\n");
    tt->val_offset = (char *) &msg_type - &_start_;
    tt->enum_def.name = tdrpStrDup("msg_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("EOL_HIQ_MSGS");
      tt->enum_def.fields[0].val = EOL_HIQ_MSGS;
      tt->enum_def.fields[1].name = tdrpStrDup("ARC_HIQ_MSGS");
      tt->enum_def.fields[1].val = ARC_HIQ_MSGS;
    tt->single_val.e = EOL_HIQ_MSGS;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("RADAR INFORMATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'radar_id'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("radar_id");
    tt->descr = tdrpStrDup("Radar ID.");
    tt->help = tdrpStrDup("Project specified ID for the radar");
    tt->val_offset = (char *) &radar_id - &_start_;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'get_tilt_num_from_header'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("get_tilt_num_from_header");
    tt->descr = tdrpStrDup("Flag indicating where to get tilt number from");
    tt->help = tdrpStrDup("If set to true, the tilt number will be taken from the HiQ beam header. If set to false, the tilt number will be determined based on the scan strategy given below.\nUsed only if msg_type is set to EOL_HIQ_MSGS.\n");
    tt->val_offset = (char *) &get_tilt_num_from_header - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'get_vol_num_from_header'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("get_vol_num_from_header");
    tt->descr = tdrpStrDup("Flag indicating where to get volume number from");
    tt->help = tdrpStrDup("If set to true, the volume number will be taken from the HiQ beam header. If set to false, the volume number will be determined based on the scan strategy and end-of-volume information given below.Used only if msg_type is set to EOL_HIQ_MSGS.\n");
    tt->val_offset = (char *) &get_vol_num_from_header - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'get_beam_time_from_header'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("get_beam_time_from_header");
    tt->descr = tdrpStrDup("Flag indicating where to get the beam time from");
    tt->help = tdrpStrDup("If set to true, the beam time will be taken from the HiQ beam header. If set to false, the beam time will be set to the current system time on the host where Hiq2Dsr is running.");
    tt->val_offset = (char *) &get_beam_time_from_header - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'scan_strategy'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("scan_strategy");
    tt->descr = tdrpStrDup("Scan strategy");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_scan_strategy - &_start_;
    tt->array_n_offset = (char *) &scan_strategy_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 10;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 1;
      tt->array_vals[1].d = 2;
      tt->array_vals[2].d = 3;
      tt->array_vals[3].d = 4;
      tt->array_vals[4].d = 5;
      tt->array_vals[5].d = 6;
      tt->array_vals[6].d = 7;
      tt->array_vals[7].d = 8;
      tt->array_vals[8].d = 9;
      tt->array_vals[9].d = 10;
    tt++;
    
    // Parameter 'max_diff_from_scan'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_diff_from_scan");
    tt->descr = tdrpStrDup("Maximum allowable difference in target elevation from scan strategy");
    tt->help = tdrpStrDup("This is used to prevent data from coming through that is not associated witht the scan strategy we are expecting");
    tt->val_offset = (char *) &max_diff_from_scan - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'max_legal_elev_drop'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_legal_elev_drop");
    tt->descr = tdrpStrDup("When elevation angle drops by this much from the previous beam, the current beam will not be written");
    tt->help = tdrpStrDup("This is used to prevent data from coming through as the antenna drops down for a new volume");
    tt->val_offset = (char *) &max_legal_elev_drop - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'use_elev_median_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_elev_median_filter");
    tt->descr = tdrpStrDup("Flag indicating whether to use a median filter on the elevation angles.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &use_elev_median_filter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_az_median_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_az_median_filter");
    tt->descr = tdrpStrDup("Flag indicating whether to use a median filter on the azimuth angles.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &use_az_median_filter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'median_filter_beams_before'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("median_filter_beams_before");
    tt->descr = tdrpStrDup("Number of beams to look at before the current beam when using the median filter.");
    tt->help = tdrpStrDup("Used only if use_elev_median_filter and/or use_az_median_filter is true.");
    tt->val_offset = (char *) &median_filter_beams_before - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 0;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'median_filter_beams_after'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("median_filter_beams_after");
    tt->descr = tdrpStrDup("Number of beams to look at after the current beam when using the median filter.");
    tt->help = tdrpStrDup("Used only if use_elev_median_filter and/or use_az_median_filter is true.");
    tt->val_offset = (char *) &median_filter_beams_after - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 0;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'override_origin_mode'
    // ctype is '_override_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("override_origin_mode");
    tt->descr = tdrpStrDup("Manage the Origin of the radar using this ");
    tt->help = tdrpStrDup("Specifies where the HiQ data is coming from:\n");
    tt->val_offset = (char *) &override_origin_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("override_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("USE_HEADER_ORIGIN");
      tt->enum_def.fields[0].val = USE_HEADER_ORIGIN;
      tt->enum_def.fields[1].name = tdrpStrDup("USE_STATIC_OVERRIDE");
      tt->enum_def.fields[1].val = USE_STATIC_OVERRIDE;
      tt->enum_def.fields[2].name = tdrpStrDup("USE_DYNAMIC_OVERRIDE");
      tt->enum_def.fields[2].val = USE_DYNAMIC_OVERRIDE;
    tt->single_val.e = USE_HEADER_ORIGIN;
    tt++;
    
    // Parameter 'dynamic_origin_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dynamic_origin_filename");
    tt->descr = tdrpStrDup("Name of the Dynamic file which updates the origin.");
    tt->help = tdrpStrDup("ARC ntpd mods leave this output in /var/log/locations");
    tt->val_offset = (char *) &dynamic_origin_filename - &_start_;
    tt->single_val.s = tdrpStrDup("/var/log/locations");
    tt++;
    
    // Parameter 'dynamic_heading_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dynamic_heading_filename");
    tt->descr = tdrpStrDup("Name of the Dynamic file which updates the Heading of the mOBILE PLATFORM.");
    tt->help = tdrpStrDup("ARC php leaves this in /var/log/headings");
    tt->val_offset = (char *) &dynamic_heading_filename - &_start_;
    tt->single_val.s = tdrpStrDup("/var/log/headings");
    tt++;
    
    // Parameter 'use_dynamic_heading'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_dynamic_heading");
    tt->descr = tdrpStrDup("If enabled, the beam azimuths are adjusted by this value in header");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &use_dynamic_heading - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_location'
    // ctype is '_radar_location_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("radar_location");
    tt->descr = tdrpStrDup("Radar location");
    tt->help = tdrpStrDup("Used if override_origin_mode is USE_STATIC_OVERRIDE Lat and lon in degrees. Alt in km");
    tt->val_offset = (char *) &radar_location - &_start_;
    tt->struct_def.name = tdrpStrDup("radar_location_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("latitude");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &radar_location.latitude - (char *) &radar_location;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("longitude");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &radar_location.longitude - (char *) &radar_location;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("altitude");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &radar_location.altitude - (char *) &radar_location;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0;
    tt++;
    
    // Parameter 'dbz_scaling_info'
    // ctype is '_scaling_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dbz_scaling_info");
    tt->descr = tdrpStrDup("Scale and bias for reflectivity data");
    tt->help = tdrpStrDup("The reflectivity fields are calculated as floats, and then scaled using these values before they are output to the dsRadar FMQ.");
    tt->val_offset = (char *) &dbz_scaling_info - &_start_;
    tt->struct_def.name = tdrpStrDup("scaling_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &dbz_scaling_info.scale - (char *) &dbz_scaling_info;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &dbz_scaling_info.bias - (char *) &dbz_scaling_info;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.5;
      tt->struct_vals[1].d = -32;
    tt++;
    
    // Parameter 'vel_scaling_info'
    // ctype is '_scaling_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("vel_scaling_info");
    tt->descr = tdrpStrDup("Scale and bias for velocity data");
    tt->help = tdrpStrDup("The velocity field is calculated as a float, and then scaled using these values before it is output to the dsRadar FMQ.");
    tt->val_offset = (char *) &vel_scaling_info - &_start_;
    tt->struct_def.name = tdrpStrDup("scaling_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &vel_scaling_info.scale - (char *) &vel_scaling_info;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &vel_scaling_info.bias - (char *) &vel_scaling_info;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.5;
      tt->struct_vals[1].d = -63.5;
    tt++;
    
    // Parameter 'sw_scaling_info'
    // ctype is '_scaling_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sw_scaling_info");
    tt->descr = tdrpStrDup("Scale and bias for spectrum width data");
    tt->help = tdrpStrDup("The spectrum width field is calculated as a float, and then scaled using these values before it is output to the dsRadar FMQ.");
    tt->val_offset = (char *) &sw_scaling_info - &_start_;
    tt->struct_def.name = tdrpStrDup("scaling_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &sw_scaling_info.scale - (char *) &sw_scaling_info;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &sw_scaling_info.bias - (char *) &sw_scaling_info;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.5;
      tt->struct_vals[1].d = -63.5;
    tt++;
    
    // Parameter 'ncp_scaling_info'
    // ctype is '_scaling_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ncp_scaling_info");
    tt->descr = tdrpStrDup("Scale and bias for NCP data");
    tt->help = tdrpStrDup("The NCP field is calculated as a float, and then scaled using these values before it is output to the dsRadar FMQ.");
    tt->val_offset = (char *) &ncp_scaling_info - &_start_;
    tt->struct_def.name = tdrpStrDup("scaling_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &ncp_scaling_info.scale - (char *) &ncp_scaling_info;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &ncp_scaling_info.bias - (char *) &ncp_scaling_info;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.004;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'power_scaling_info'
    // ctype is '_scaling_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("power_scaling_info");
    tt->descr = tdrpStrDup("Scale and bias for power data");
    tt->help = tdrpStrDup("The power field is calculated as a float, and then scaled using these values before it is output to the dsRadar FMQ.");
    tt->val_offset = (char *) &power_scaling_info - &_start_;
    tt->struct_def.name = tdrpStrDup("scaling_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &power_scaling_info.scale - (char *) &power_scaling_info;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &power_scaling_info.bias - (char *) &power_scaling_info;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.004;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'scan_type_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("scan_type_name");
    tt->descr = tdrpStrDup("Scan type name");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &scan_type_name - &_start_;
    tt->single_val.s = tdrpStrDup("Default");
    tt++;
    
    // Parameter 'eov_trigger_mode'
    // ctype is '_eov_trigger_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("eov_trigger_mode");
    tt->descr = tdrpStrDup("Type of end-of-volume trigger.");
    tt->help = tdrpStrDup("Determines when and end-of-volume will be triggered in the data. \tEOV_TRIGGER_BY_ANGLE_DROP: An end-of-volume will be triggered when a beam is received whose elevation angle is less than the the maximum elevation received for that volume so far by an amount greater than or equal to the amount specified in the end_of_volume_trigger parameter.\n\tEOV_TRIGGER_BY_END_TILT: An end-of-volume will be triggered when a beam is received whose elevation angle is not equal to the end_of_volume_trigger angle after receiving one or more beams whose elevation is equal to this angle.  Note that all elevations are mapped to the nearest scan strategy elevation before any comparisons are done.\n\tEOV_TRIGGER_BY_START_TILT: An end-of-volume will be triggered when a beam is received whose elevation angle is equal to the end_of_volume_trigger angle after receiving one or more beams whose elevation is not equal to this angle.  Note that all elevations are mapped to the nearest scan strategy elevation before any comparisons are done.");
    tt->val_offset = (char *) &eov_trigger_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("eov_trigger_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("EOV_TRIGGER_BY_ANGLE_DROP");
      tt->enum_def.fields[0].val = EOV_TRIGGER_BY_ANGLE_DROP;
      tt->enum_def.fields[1].name = tdrpStrDup("EOV_TRIGGER_BY_END_TILT");
      tt->enum_def.fields[1].val = EOV_TRIGGER_BY_END_TILT;
      tt->enum_def.fields[2].name = tdrpStrDup("EOV_TRIGGER_BY_START_TILT");
      tt->enum_def.fields[2].val = EOV_TRIGGER_BY_START_TILT;
    tt->single_val.e = EOV_TRIGGER_BY_ANGLE_DROP;
    tt++;
    
    // Parameter 'end_of_volume_trigger'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("end_of_volume_trigger");
    tt->descr = tdrpStrDup("Elevation angle used to trigger an end-of-volume.");
    tt->help = tdrpStrDup("See the comment for the eov_trigger_mode parameter to see how this is used.");
    tt->val_offset = (char *) &end_of_volume_trigger - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_url");
    tt->descr = tdrpStrDup("Output URL for DsRadar data via FMQ");
    tt->help = tdrpStrDup("The following fields are written to the output FMQ:\n\t\"DBZ\" - reflectivity in dBZ\n\t\"VEL\" - velocity in m/s\n\t\"SPW\" - spectral width in m/s\n\t\"COH DBZ\" - coherent reflectivity in dBZ\n\t\"NCP\" - NCP without units\n\t\"POWER\" - power in dB\n");
    tt->val_offset = (char *) &output_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmqp:://localhost::./fmq.dsRadar");
    tt++;
    
    // Parameter 'output_fmq_size'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_size");
    tt->descr = tdrpStrDup("Size of output FMQ, in bytes.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &output_fmq_size - &_start_;
    tt->single_val.l = 2000000;
    tt++;
    
    // Parameter 'output_fmq_nslots'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_nslots");
    tt->descr = tdrpStrDup("Number of slots in output FMQ.");
    tt->help = tdrpStrDup("The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.");
    tt->val_offset = (char *) &output_fmq_nslots - &_start_;
    tt->single_val.l = 3600;
    tt++;
    
    // Parameter 'output_fmq_compress'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_compress");
    tt->descr = tdrpStrDup("FMQ compression option.");
    tt->help = tdrpStrDup("If TRUE FMQ messages are compressed.");
    tt->val_offset = (char *) &output_fmq_compress - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_type'
    // ctype is '_output_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_type");
    tt->descr = tdrpStrDup("Type of output to produce");
    tt->help = tdrpStrDup("\tOUTPUT_SIMPLE - Output all beams as received (except for any cleaning up that might be done like running the median filter on the elevation angles) with just the addition of end of volume flags. No end of tilt flags are generated in this mode. This mode can be used when the output is going either directly to Dsr2Vol or through only simple filters before Dsr2Vol. It cannot be used if ApRemoval is downstream from Hiq2Dsr.\n\tOUTPUT_SCAN_STRATEGY - Output only beams the match the included scan strategy. This version of output is harder to tune and could remove beams that should be kept. However, this output is required if ApRemoval is run downstream from this process since ApRemoval is very particular about its input.\nUsed only if msg_type is set to EOL_HIQ_MSGS. I'm assuming that the tilt num and vol num fields are being set in the new ARC messages.");
    tt->val_offset = (char *) &output_type - &_start_;
    tt->enum_def.name = tdrpStrDup("output_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_SIMPLE");
      tt->enum_def.fields[0].val = OUTPUT_SIMPLE;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_SCAN_STRATEGY");
      tt->enum_def.fields[1].val = OUTPUT_SCAN_STRATEGY;
    tt->single_val.e = OUTPUT_SCAN_STRATEGY;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("ARCHIVE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'archive_fmq'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("archive_fmq");
    tt->descr = tdrpStrDup("Use archive fmq");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &archive_fmq - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'archive_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("archive_fmq_url");
    tt->descr = tdrpStrDup("Archive URL for raw Enterprise data via FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &archive_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmqp:://localhost::./fmq.eecArchive");
    tt++;
    
    // Parameter 'archive_fmq_size'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("archive_fmq_size");
    tt->descr = tdrpStrDup("Size of archive FMQ, in bytes.");
    tt->help = tdrpStrDup("This is the total size of the archive FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &archive_fmq_size - &_start_;
    tt->single_val.l = 2000000;
    tt++;
    
    // Parameter 'archive_fmq_nslots'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("archive_fmq_nslots");
    tt->descr = tdrpStrDup("Number of slots in archive FMQ.");
    tt->help = tdrpStrDup("The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.");
    tt->val_offset = (char *) &archive_fmq_nslots - &_start_;
    tt->single_val.l = 3600;
    tt++;
    
    // Parameter 'archive_fmq_compress'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("archive_fmq_compress");
    tt->descr = tdrpStrDup("FMQ compression option.");
    tt->help = tdrpStrDup("If TRUE FMQ messages are compressed.");
    tt->val_offset = (char *) &archive_fmq_compress - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'archive_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("archive_file");
    tt->descr = tdrpStrDup("If TRUE, an archive file will be created.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &archive_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'archive_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("archive_file_path");
    tt->descr = tdrpStrDup("Archive file path");
    tt->help = tdrpStrDup("If archive_file is set to TRUE, the raw HiQ messages will be written to this file as they are received. When a message is received, first the number of bytes in the message will be written to the output file as an ui16 in the native byte ordering. Then the bytes of the message will be written to the file just as they were received.");
    tt->val_offset = (char *) &archive_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./hiq_data_file");
    tt++;
    
    // Parameter 'archive_mult_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("archive_mult_file");
    tt->descr = tdrpStrDup("If TRUE, an archive directory will be created.");
    tt->help = tdrpStrDup("With this option, the raw HiQ data will be written out to a set of files in the directory given in the archive_mult_file_dir parameter in the same format as that used for the archive_file option. With this option, an hours worth of the raw HiQ messages will be written to a file in the given directory. The file naming is based on the time the message is read by Hiq2Dsr and a new file will be created each hour. The files will be named YYYYMMDD/HH0000.hiq where the time in the file name is the starting time for that hour of messages.");
    tt->val_offset = (char *) &archive_mult_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'archive_mult_file_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("archive_mult_file_dir");
    tt->descr = tdrpStrDup("Directory for the output files when archive_mult_file is TRUE.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &archive_mult_file_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./hiq_data_dir");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("DIAGNOSTICS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'print_summary'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_summary");
    tt->descr = tdrpStrDup("Print summary");
    tt->help = tdrpStrDup("If TRUE, summary information will be printed");
    tt->val_offset = (char *) &print_summary - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'summary_interval'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("summary_interval");
    tt->descr = tdrpStrDup("Print summary interval");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &summary_interval - &_start_;
    tt->single_val.l = 360;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
