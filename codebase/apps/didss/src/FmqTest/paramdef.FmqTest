/*********************************************************
 * parameter definitions for FmqTest
 *
 * Mike Dixon, EOL, NCAR
 * P.O.Box 3000, Boulder, CO, USA, 80307-3000
 *
 * October 2021
 */

commentdef {
  p_header = "FmqTest program";
  p_text = "FmqTest reads data from an input file, and writes the contents to an FMQ at a specified rate.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;
  
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "/tmp/fmq_input";
  p_descr = "Path for input file.";
} input_file_path;

paramdef int {
  p_default = 1;
  p_descr = "Number of times to write the file contents to the FMQ.";
  p_help = "If negative, the number of writes is unlimited.";
} write_count;

paramdef int {
  p_default = 1000;
  p_descr = "Sleep time between writes (msecs).";
  p_help = "We will insert a sleep of this length between the writes.";
} write_sleep_msecs;

commentdef {
  p_header = "DATA OUTPUT.";
}

paramdef string {
  p_default = "fmq_output";
  p_descr = "URLs for output FMQ.";
} output_fmq_url;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Compress on output.";
  p_help = "If TRUE, GZIP compression will be used.";
} output_compress;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option for blocking write on output.";
  p_help = "If set, the output fmqs will activate blocking on write. This means that if any of the output readers gets behind the entire program will block untils that reader catches up. So be careful using this mode.";
} write_blocking;

paramdef int {
  p_default = 1000;
  p_descr = "Number of slots in output FMQ.";
} output_n_slots;

paramdef int {
  p_default = 10000000;
  p_descr = "Size of buffer in output FMQ.";
} output_buf_size;

paramdef int {
  p_default = -1;
  p_descr = "Number of seconds between registration with the DataMapper.";
  p_help = "If > 0, the program will register with the DataMapper when the output FMQs are written to. If <= 0, registration will not be performed.";
} data_mapper_reg_interval;


