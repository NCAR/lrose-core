/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program LdataMultWatcher
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("LdataMultWatcher program");
    tt->comment_text = tdrpStrDup("LdataMultWatcher watches for _latest_data_info in multiple directories. The application will optionally call scripts when new data arrives in each directory, or when data is late.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'procmap_register_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("procmap_register_interval");
    tt->descr = tdrpStrDup("Register interval for procmap - secs");
    tt->help = tdrpStrDup("If the script takes longer than 60 secs to complete, you will need to set this to a higher value to avoid the process being killed and restarted by the auto_restarter.");
    tt->val_offset = (char *) &procmap_register_interval - &_start_;
    tt->single_val.i = 60;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA SET DETAILS");
    tt->comment_text = tdrpStrDup("For each individual data set, you can set whether to call the new_data and/or late_data scripts.\nThe new_data_script_name is called as new data arrives. The late_data_script is called when it has been data_late_secs since the last data arrived.\nBy default, the scripts are called with the following command line args, in no particular order:\n  -debug ?: set if params.debug is not DEBUG_OFF\n  -valid_utime ?: unix_time\n  -valid_time ?: yyyy,mm,dd,hh,mm,ss\n  -is_forecast ?: true/false\n  -forecast_lead_secs ?: - for forecasts\n  -gen_utime ?: unix_time - for forecasts\n  -gen_time ?: yyyy,mm,dd,hh,mm,ss - for forecasts\n  -rap_data_dir ?: RAP_DATA_DIR environment variable\n  -abs_dir_path ?: input_dir relative to /\n  -rel_dir ?: input_dir relative to RAP_DATA_DIR\n  -rel_data_path ?: input file relative to input_dir\n  -file_ext ?: extention of input file\n  -data_type ?: data type of input file - for DataMapper\n  -user_info1 ?: set by upstream app\n  -user_info2 ?: set by upstream app\n  -writer ?: which app wrote the data\n  -late_data_secs ?: - for late_data_script\n\nThe arguments included can be controlled using the 'script_args' parameter below.\n\nThese args will be followed by any trailing arguments specified by 'trailing_args' in the data set details below.\n\n");
    tt++;
    
    // Parameter 'data_sets'
    // ctype is '_data_set_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("data_sets");
    tt->descr = tdrpStrDup("List of data set details.");
    tt->help = tdrpStrDup("\nFor each data set to be watched, set the parameters in this array.\n\nTo call a script when new data arrives set 'call_new_data_script' to TRUE, and specify the 'new_data_script_name'.\n\nTo call a script when data has not arrived in the last 'late_data_secs' set 'call_late_data_script' to TRUE and specify the 'late_data_script_name'.\n\nYou can also specify a list of extra arguments to be appended to the main argument list, using the 'trailing_args' parameter. This is, by default, a comma-delimited list. You can change the delimit character using 'trailing_args_delimiter' parameter.");
    tt->array_offset = (char *) &_data_sets - &_start_;
    tt->array_n_offset = (char *) &data_sets_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(data_set_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("data_set_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_dir");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_data_sets->input_dir - (char *) _data_sets;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("call_new_data_script");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_data_sets->call_new_data_script - (char *) _data_sets;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("new_data_script_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_data_sets->new_data_script_name - (char *) _data_sets;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("call_late_data_script");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_data_sets->call_late_data_script - (char *) _data_sets;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("late_data_script_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_data_sets->late_data_script_name - (char *) _data_sets;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("late_data_secs");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_data_sets->late_data_secs - (char *) _data_sets;
      tt->struct_def.fields[6].ftype = tdrpStrDup("string");
      tt->struct_def.fields[6].fname = tdrpStrDup("trailing_args");
      tt->struct_def.fields[6].ptype = STRING_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_data_sets->trailing_args - (char *) _data_sets;
    tt->n_struct_vals = 7;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("/tmp");
      tt->struct_vals[1].b = pTRUE;
      tt->struct_vals[2].s = tdrpStrDup("test_script");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("test_script");
      tt->struct_vals[5].i = 3600;
      tt->struct_vals[6].s = tdrpStrDup("");
    tt++;
    
    // Parameter 'trailing_args_delimiter'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("trailing_args_delimiter");
    tt->descr = tdrpStrDup("Delimiting character for 'trailing_args'.");
    tt->help = tdrpStrDup("You can use the 'trailing_args' parameter above to specify arguments to be appended to the standard list of arguments used to call a script. Normally this is a comma-delimited list. Use this parameter to override the standard comma-delimiting character.");
    tt->val_offset = (char *) &trailing_args_delimiter - &_start_;
    tt->single_val.s = tdrpStrDup(",");
    tt++;
    
    // Parameter 'specify_script_args'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_script_args");
    tt->descr = tdrpStrDup("Option to specify the arguments used to call the script.");
    tt->help = tdrpStrDup("If TRUE, only those arguments specified in the list will be used. If FALSE, all args will be used. This does not affect the trailing_args.");
    tt->val_offset = (char *) &specify_script_args - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'script_args'
    // ctype is '_script_args_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("script_args");
    tt->descr = tdrpStrDup("List of options to include on the script command line.");
    tt->help = tdrpStrDup("Only used if 'specify_script_args is TRUE.");
    tt->array_offset = (char *) &_script_args - &_start_;
    tt->array_n_offset = (char *) &script_args_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(script_args_t);
    tt->array_n = 18;
    tt->enum_def.name = tdrpStrDup("script_args_t");
    tt->enum_def.nfields = 18;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARG_VALID_UTIME");
      tt->enum_def.fields[0].val = ARG_VALID_UTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARG_VALID_TIME");
      tt->enum_def.fields[1].val = ARG_VALID_TIME;
      tt->enum_def.fields[2].name = tdrpStrDup("ARG_IS_FORECAST");
      tt->enum_def.fields[2].val = ARG_IS_FORECAST;
      tt->enum_def.fields[3].name = tdrpStrDup("ARG_FORECAST_LEAD_SECS");
      tt->enum_def.fields[3].val = ARG_FORECAST_LEAD_SECS;
      tt->enum_def.fields[4].name = tdrpStrDup("ARG_GEN_UTIME");
      tt->enum_def.fields[4].val = ARG_GEN_UTIME;
      tt->enum_def.fields[5].name = tdrpStrDup("ARG_GEN_TIME");
      tt->enum_def.fields[5].val = ARG_GEN_TIME;
      tt->enum_def.fields[6].name = tdrpStrDup("ARG_RAP_DATA_DIR");
      tt->enum_def.fields[6].val = ARG_RAP_DATA_DIR;
      tt->enum_def.fields[7].name = tdrpStrDup("ARG_ABS_DIR_PATH");
      tt->enum_def.fields[7].val = ARG_ABS_DIR_PATH;
      tt->enum_def.fields[8].name = tdrpStrDup("ARG_REL_DIR");
      tt->enum_def.fields[8].val = ARG_REL_DIR;
      tt->enum_def.fields[9].name = tdrpStrDup("ARG_REL_DATA_PATH");
      tt->enum_def.fields[9].val = ARG_REL_DATA_PATH;
      tt->enum_def.fields[10].name = tdrpStrDup("ARG_FILE_EXT");
      tt->enum_def.fields[10].val = ARG_FILE_EXT;
      tt->enum_def.fields[11].name = tdrpStrDup("ARG_DATA_TYPE");
      tt->enum_def.fields[11].val = ARG_DATA_TYPE;
      tt->enum_def.fields[12].name = tdrpStrDup("ARG_USER_INFO1");
      tt->enum_def.fields[12].val = ARG_USER_INFO1;
      tt->enum_def.fields[13].name = tdrpStrDup("ARG_USER_INFO2");
      tt->enum_def.fields[13].val = ARG_USER_INFO2;
      tt->enum_def.fields[14].name = tdrpStrDup("ARG_WRITER");
      tt->enum_def.fields[14].val = ARG_WRITER;
      tt->enum_def.fields[15].name = tdrpStrDup("ARG_DATA_LATE_SECS");
      tt->enum_def.fields[15].val = ARG_DATA_LATE_SECS;
      tt->enum_def.fields[16].name = tdrpStrDup("ARG_DEBUG");
      tt->enum_def.fields[16].val = ARG_DEBUG;
      tt->enum_def.fields[17].name = tdrpStrDup("ARG_VERBOSE");
      tt->enum_def.fields[17].val = ARG_VERBOSE;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].e = ARG_VALID_UTIME;
      tt->array_vals[1].e = ARG_VALID_TIME;
      tt->array_vals[2].e = ARG_IS_FORECAST;
      tt->array_vals[3].e = ARG_FORECAST_LEAD_SECS;
      tt->array_vals[4].e = ARG_GEN_UTIME;
      tt->array_vals[5].e = ARG_GEN_TIME;
      tt->array_vals[6].e = ARG_RAP_DATA_DIR;
      tt->array_vals[7].e = ARG_ABS_DIR_PATH;
      tt->array_vals[8].e = ARG_REL_DIR;
      tt->array_vals[9].e = ARG_REL_DATA_PATH;
      tt->array_vals[10].e = ARG_FILE_EXT;
      tt->array_vals[11].e = ARG_DATA_TYPE;
      tt->array_vals[12].e = ARG_USER_INFO1;
      tt->array_vals[13].e = ARG_USER_INFO2;
      tt->array_vals[14].e = ARG_WRITER;
      tt->array_vals[15].e = ARG_DATA_LATE_SECS;
      tt->array_vals[16].e = ARG_DEBUG;
      tt->array_vals[17].e = ARG_VERBOSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("LATEST DATA INFO HANDLING DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Maximum age for files, realtime mode, seconds");
    tt->help = tdrpStrDup("Default is 15 minutes.");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->single_val.i = 900;
    tt++;
    
    // Parameter 'read_ldata_fmq_from_start'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_ldata_fmq_from_start");
    tt->descr = tdrpStrDup("Option to read FMQ for latest_data_info from start.");
    tt->help = tdrpStrDup("If TRUE, the all of the entries in the FMQ will be read, from the start. This is useful for archive mode, or for debugging what is in an FMQ.");
    tt->val_offset = (char *) &read_ldata_fmq_from_start - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'save_read_state'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_read_state");
    tt->descr = tdrpStrDup("Option to save read state.");
    tt->help = tdrpStrDup("If TRUE, each time a read is successful, a _latest_read_info XML file will be written to a tmp directory, so that read state can be maintained in case the application crashes");
    tt->val_offset = (char *) &save_read_state - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("SCRIPT EXECUTION DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'generate_double_dash_args'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("generate_double_dash_args");
    tt->descr = tdrpStrDup("Generate arguments with '--' prefix instead of '-'.");
    tt->help = tdrpStrDup("For example, generate '--valid_utime' instead of '-valid_utime'.");
    tt->val_offset = (char *) &generate_double_dash_args - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'run_script_in_background'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("run_script_in_background");
    tt->descr = tdrpStrDup("Option to run script in background.");
    tt->help = tdrpStrDup("If TRUE, the script will be run in the background. Therefore, the system call will return immediately. If FALSE, LdataMultWatcher will register with procmap while waiting for the script to complete.");
    tt->val_offset = (char *) &run_script_in_background - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'terminate_script_if_hung'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("terminate_script_if_hung");
    tt->descr = tdrpStrDup("Option to terminate script if it hangs.");
    tt->help = tdrpStrDup("If TRUE, the script will be killed if it does not return within 'script_max_run_secs'.");
    tt->val_offset = (char *) &terminate_script_if_hung - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'script_max_run_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("script_max_run_secs");
    tt->descr = tdrpStrDup("Max time allowed for script - secs.");
    tt->help = tdrpStrDup("If 'terminate_script_if_hung' is TRUE, the script will be killed if it does not complete withing this number of secs.");
    tt->val_offset = (char *) &script_max_run_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'sleep_after_script'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sleep_after_script");
    tt->descr = tdrpStrDup("Option to have LdataMultWatcher sleep after the script returns.");
    tt->help = tdrpStrDup("If TRUE, LdataMultWatcher will sleep for script_sleep_time milliseconds.  This options is ignored if the script is run in the background.");
    tt->val_offset = (char *) &sleep_after_script - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'script_sleep_time'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("script_sleep_time");
    tt->descr = tdrpStrDup("Time to sleep after a script run in the foreground completes - millisec.");
    tt->help = tdrpStrDup("Only used if sleep_after_script is TRUE.");
    tt->val_offset = (char *) &script_sleep_time - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
