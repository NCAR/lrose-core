/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.hh
//
// TDRP header file for 'Params' class.
//
// Code for program Dsr2Vol
//
// This header file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.hh
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @class Params
 *
 * @author automatically generated
 *
 */

#ifndef Params_hh
#define Params_hh

#include <tdrp/tdrp.h>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>

using namespace std;

// Class definition

class Params {

public:

  // enum typedefs

  typedef enum {
    DEBUG_OFF = 0,
    DEBUG_NORM = 1,
    DEBUG_VERBOSE = 2,
    DEBUG_EXTRA = 3
  } debug_t;

  typedef enum {
    END_OF_VOL_FLAG = 0,
    CHANGE_IN_VOL_NUM = 1,
    LAST_TILT_IN_VOL = 2,
    AUTOMATIC = 3,
    END_OF_VOL_NONE = 4,
    DECREASE_IN_ELEV = 5
  } end_of_vol_decision_t;

  typedef enum {
    NO_COMPRESSION = 0,
    RLE_COMPRESSION = 1,
    LZO_COMPRESSION = 2,
    ZLIB_COMPRESSION = 3,
    BZIP_COMPRESSION = 4,
    GZIP_COMPRESSION = 5
  } compression_t;

  typedef enum {
    ENCODING_INT8 = 0,
    ENCODING_INT16 = 1,
    ENCODING_FLOAT32 = 2
  } encoding_t;

  // struct typedefs

  typedef struct {
    double latitude;
    double longitude;
    double altitude;
  } radar_location_t;

  typedef struct {
    char* dsr_name;
    char* output_name;
    char* output_units;
    char* transform;
    tdrp_bool_t is_dbz;
    tdrp_bool_t interp_db_as_power;
    tdrp_bool_t is_vel;
    tdrp_bool_t allow_interp;
    encoding_t encoding;
  } output_field_t;

  typedef struct {
    int nxy;
    double dxy;
    int nz;
    double minz;
    double dz;
    tdrp_bool_t interpolate;
    char* mdv_url;
    double max_range;
  } cart_file_t;

  typedef struct {
    int nxy;
    double dxy;
    double min_elev;
    double max_elev;
    tdrp_bool_t interpolate;
    char* mdv_url;
    double min_ht;
    double max_ht;
    double max_range;
  } ppi_file_t;

  typedef struct {
    double max_range;
    double min_elev;
    double max_elev;
    char* mdv_url;
  } polar_file_t;

  typedef struct {
    double oversampling_ratio;
    tdrp_bool_t interp_in_elevation;
    char* mdv_url;
  } rhi_file_t;

  ///////////////////////////
  // Member functions
  //

  ////////////////////////////////////////////
  // Default constructor
  //

  Params ();

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params (const Params&);

  ////////////////////////////////////////////
  // Destructor
  //

  ~Params ();

  ////////////////////////////////////////////
  // Assignment
  //

  void operator=(const Params&);

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadFromArgs(int argc, char **argv,
                   char **override_list,
                   char **params_path_p,
                   bool defer_exit = false);

  bool exitDeferred() { return (_exitDeferred); }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadApplyArgs(const char *params_path,
                    int argc, char **argv,
                    char **override_list,
                    bool defer_exit = false);

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  static bool isArgValid(const char *arg);

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int load(const char *param_file_path,
           char **override_list,
           int expand_env, int debug);

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadFromBuf(const char *param_source_str,
                  char **override_list,
                  const char *inbuf, int inlen,
                  int start_line_num,
                  int expand_env, int debug);

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int loadDefaults(int expand_env);

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void sync() const;

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void print(FILE *out, tdrp_print_mode_t mode = PRINT_NORM);

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int checkAllSet(FILE *out);

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int checkIsSet(const char *param_name);

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int arrayRealloc(const char *param_name,
                   int new_array_n);

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int array2DRealloc(const char *param_name,
                     int new_array_n1,
                     int new_array_n2);

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void freeAll(void);

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  static void usage(ostream &out);

  ///////////////////////////
  // Data Members
  //

  char _start_; // start of data region
                // needed for zeroing out data
                // and computing offsets

  debug_t debug;

  char* instance;

  char* input_fmq_url;

  tdrp_bool_t seek_to_end_of_input;

  end_of_vol_decision_t end_of_vol_decision;

  int last_tilt_in_vol;

  int min_elevation_decrease;

  tdrp_bool_t write_end_of_vol_when_data_stops;

  int nsecs_no_data_for_end_of_vol;

  int nbeams_overlap_per_vol;

  int min_beams_in_vol;

  int max_beams_in_vol;

  tdrp_bool_t use_input_scan_mode;

  tdrp_bool_t use_input_tilt_numbers;

  tdrp_bool_t use_target_elev;

  double elev_hist_resolution;

  int elev_hist_search_width;

  double elev_hist_start;

  double elev_hist_end;

  tdrp_bool_t specify_elev_delta;

  double elev_delta;

  tdrp_bool_t check_min_beams_in_tilt;

  int min_beams_in_tilt;

  tdrp_bool_t check_min_fraction_in_tilt;

  double min_fraction_in_tilt;

  tdrp_bool_t filter_output_using_thresholds;

  char* threshold_field_name;

  double threshold_min_value;

  double threshold_max_value;

  tdrp_bool_t check_sn;

  char* snr_field_name;

  double sn_threshold;

  double noise_dbz_at_100km;

  int filtering_min_valid_run;

  tdrp_bool_t bridge_missing_in_azimuth;

  tdrp_bool_t bridge_missing_in_elevation;

  tdrp_bool_t check_antenna_moving;

  double min_angle_change;

  tdrp_bool_t remove_test_pulse;

  int ngates_test_pulse;

  double delta_az;

  double az_correction;

  tdrp_bool_t override_radar_location;

  radar_location_t radar_location;

  tdrp_bool_t override_beam_width;

  double beam_width;

  char* radar_description;

  tdrp_bool_t filter_gate_spacing;

  double keep_gate_spacing;

  tdrp_bool_t filter_start_range;

  double keep_start_range;

  tdrp_bool_t filter_prf;

  double min_prf;

  double max_prf;

  tdrp_bool_t filter_elev;

  double min_elev;

  double max_elev;

  tdrp_bool_t filter_antenna_transitions;

  int min_nvalid_for_interp;

  compression_t output_compression;

  output_field_t *_output_fields;
  int output_fields_n;

  tdrp_bool_t output_coverage_field;

  tdrp_bool_t override_missing_dbz_for_interp;

  tdrp_bool_t override_nyquist;

  double nyquist_velocity;

  tdrp_bool_t output_cart_files;

  cart_file_t *_cart_files;
  int cart_files_n;

  tdrp_bool_t output_ppi_files;

  ppi_file_t *_ppi_files;
  int ppi_files_n;

  tdrp_bool_t output_polar_files;

  polar_file_t *_polar_files;
  int polar_files_n;

  tdrp_bool_t trim_polar_sectors;

  tdrp_bool_t separate_sector_files;

  char* sector_subdirectory;

  char* surveillance_subdirectory;

  double min_fraction_for_surveillance;

  tdrp_bool_t separate_vert_files;

  char* vert_subdirectory;

  double min_elevation_for_vert_files;

  double min_vert_fraction_for_vert_files;

  tdrp_bool_t output_rhi_files;

  rhi_file_t *_rhi_files;
  int rhi_files_n;

  double rhi_az_hist_resolution;

  int rhi_az_hist_search_width;

  tdrp_bool_t check_min_beams_in_rhi;

  int min_beams_in_rhi;

  tdrp_bool_t check_min_fraction_in_rhi;

  double min_fraction_in_rhi;

  tdrp_bool_t output_rhi_cart_files;

  cart_file_t *_rhi_cart_files;
  int rhi_cart_files_n;

  double rhi_cart_delta_az;

  tdrp_bool_t write_master_ldata_info;

  char* master_ldata_info_url;

  tdrp_bool_t auto_mid_time;

  int age_at_end_of_volume;

  int max_vol_duration;

  char* data_set_info;

  char* data_set_source;

  tdrp_bool_t set_end_of_vol_from_elev_change;

  tdrp_bool_t vol_starts_at_bottom;

  double elev_change_for_end_of_vol;

  tdrp_bool_t set_end_of_vol_on_prf_change;

  int nbeams_history;

  double el_accuracy;

  double az_accuracy;

  double min_az_change_ppi;

  double min_el_change_rhi;

  int max_az_change_per_tilt;

  int min_beams_per_ppi_vol;

  int min_beams_per_rhi_vol;

  tdrp_bool_t debug_auto_detection;

  char _end_; // end of data region
              // needed for zeroing out data

private:

  void _init();

  mutable TDRPtable _table[134];

  const char *_className;

  bool _exitDeferred;

};

#endif

