/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program InputWatcher
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("InputWatcher program");
    tt->comment_text = tdrpStrDup("InputWatcher watches for new data arriving in a directory. It optionally registers the latest time with the DataMapper, optionally copies the file to a file named with the modify time, and optionally runs a script.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("INPUT DATA");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Directory for input data.");
    tt->help = tdrpStrDup("This directory is watched for new files. NOTE: if the directory does not start with a . or /, it will be relative to $DATA_DIR or $RAP_DATA_DIR.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./input");
    tt++;
    
    // Parameter 'wait_between_checks'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wait_between_checks");
    tt->descr = tdrpStrDup("Sleep time between checking directory for input - secs.");
    tt->help = tdrpStrDup("If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory.");
    tt->val_offset = (char *) &wait_between_checks - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'file_quiescence'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("file_quiescence");
    tt->descr = tdrpStrDup("File quiescence when checking for files - secs.");
    tt->help = tdrpStrDup("This allows you to make sure that a file coming from a remote machine is complete before reading it.");
    tt->val_offset = (char *) &file_quiescence - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'max_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_valid_age");
    tt->descr = tdrpStrDup("Maximum valid age for files, seconds");
    tt->help = tdrpStrDup("Default is 900 secs (15 minutes).");
    tt->val_offset = (char *) &max_valid_age - &_start_;
    tt->single_val.i = 900;
    tt++;
    
    // Parameter 'latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_avail");
    tt->descr = tdrpStrDup("Is _latest_data_info file available?");
    tt->help = tdrpStrDup("If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.");
    tt->val_offset = (char *) &latest_data_info_avail - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'latest_file_only'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_file_only");
    tt->descr = tdrpStrDup("Option to only use the latest file.");
    tt->help = tdrpStrDup("If TRUE, processes only the latest file on startup. If FALSE, processes all files within the max_valid_age. This only applies to startup, when a number of files could be available for processing.");
    tt->val_offset = (char *) &latest_file_only - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'skip_to_latest_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("skip_to_latest_file");
    tt->descr = tdrpStrDup("Option to skip past files that have been queued.");
    tt->help = tdrpStrDup("If TRUE, processes only the latest file available when the queued list is queried. This allows the process to skip intermediate files and catch up if it is falling behind. Normally this would be FALSE to prevent missing data, but there are circumstance in which it is preferable to miss data and catch up.");
    tt->val_offset = (char *) &skip_to_latest_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'search_recursively'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("search_recursively");
    tt->descr = tdrpStrDup("Option to recurse to subdirectories while looking for new files.");
    tt->help = tdrpStrDup("If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use.");
    tt->val_offset = (char *) &search_recursively - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_dir_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_dir_age");
    tt->descr = tdrpStrDup("Maximum age of directory for recursive search.");
    tt->help = tdrpStrDup("Only applies search_recursively is TRUE. If set to -1, no age test is used and all directories will be scanned.");
    tt->val_offset = (char *) &max_dir_age - &_start_;
    tt->single_val.i = 900;
    tt++;
    
    // Parameter 'max_recursion_depth'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_recursion_depth");
    tt->descr = tdrpStrDup("Maximum depth for recursive directory scan.");
    tt->help = tdrpStrDup("Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.");
    tt->val_offset = (char *) &max_recursion_depth - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'follow_links'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("follow_links");
    tt->descr = tdrpStrDup("Follow directory and file links.");
    tt->help = tdrpStrDup("If FALSE, we will not consider files or directories that are symbolic links.");
    tt->val_offset = (char *) &follow_links - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'use_inotify'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_inotify");
    tt->descr = tdrpStrDup("Option to use inotify in realtime mode without latest_data_info.");
    tt->help = tdrpStrDup("If TRUE, uses inotify instead of scanning the directory for new files. This is more efficient.");
    tt->val_offset = (char *) &use_inotify - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed. This can be a comma-delimited list of extensions.");
    tt->val_offset = (char *) &search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'search_substr'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_substr");
    tt->descr = tdrpStrDup("File name sub-string.");
    tt->help = tdrpStrDup("If set, only files with names containing this sub-string will be processed.");
    tt->val_offset = (char *) &search_substr - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'save_latest_read_time'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_latest_read_time");
    tt->descr = tdrpStrDup("Option to save latest time for each read.");
    tt->help = tdrpStrDup("If TRUE, the latest read info will be saved out in a file to preserve state in case the application dies. On restart, the latest read info will be read in to re-initialize the application, so that data already read will not be read again.");
    tt->val_offset = (char *) &save_latest_read_time - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ignore_hidden'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ignore_hidden");
    tt->descr = tdrpStrDup("Option to ignore hidden files.");
    tt->help = tdrpStrDup("If TRUE, all hidden files will be ignored. This is useful when monitoring directories where files are bring copied using the approach of copying as a hidden file, then moving file to is working name.");
    tt->val_offset = (char *) &ignore_hidden - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("CALL SCRIPT WHEN NEW DATA ARRIVES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'script_style'
    // ctype is '_script_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("script_style");
    tt->descr = tdrpStrDup("Type of script to call.");
    tt->help = tdrpStrDup("\tSCRIPT_WITH_ORDERED_ARGS - Call a script with an ordered list of arguments.\n\tSCRIPT_WITH_COMMAND_LINE_OPTIONS - Precedes each argument with a '-arg' style command line argument, so that order is not longer important, and extra args can be added without causing problems for client scripts.\n\tSCRIPT_WITH_COMMAND_LINE_OPTIONS_DOUBLE_DASH - Same as SCRIPT_WITH_COMMAND_LINE_OPTIONS except that the the args are preceded by a double-dash rather than a single dash for use with languages like Python.\n");
    tt->val_offset = (char *) &script_style - &_start_;
    tt->enum_def.name = tdrpStrDup("script_style_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SCRIPT_WITH_ORDERED_ARGS");
      tt->enum_def.fields[0].val = SCRIPT_WITH_ORDERED_ARGS;
      tt->enum_def.fields[1].name = tdrpStrDup("SCRIPT_WITH_COMMAND_LINE_OPTIONS");
      tt->enum_def.fields[1].val = SCRIPT_WITH_COMMAND_LINE_OPTIONS;
      tt->enum_def.fields[2].name = tdrpStrDup("SCRIPT_WITH_COMMAND_LINE_OPTIONS_DOUBLE_DASH");
      tt->enum_def.fields[2].val = SCRIPT_WITH_COMMAND_LINE_OPTIONS_DOUBLE_DASH;
    tt->single_val.e = SCRIPT_WITH_COMMAND_LINE_OPTIONS;
    tt++;
    
    // Parameter 'call_data_arrived_script'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("call_data_arrived_script");
    tt->descr = tdrpStrDup("Option to spawn a script when a new file is detected.");
    tt->help = tdrpStrDup("If TRUE, the script 'data_arrived_script' will be called. The arguments will depend on the script_style parameter.\n\nFor SCRIPT_WITH_ORDERED_ARGS, the args are in the following order:\n  input_file_path, file_modify_time.\n\nFor SCRIPT_WITH_COMMAND_LINE_OPTIONS, the following command line args will be included, in no particular order:\n  -input_file_path\n  -file_modify_time\nand each arg will be followed by its respective value.\n\n\nFor SCRIPT_WITH_COMMAND_LINE_OPTIONS_DOUBLE_DASH, the following command line args will be included, in no particular order:\n  --input_file_path\n  --file_modify_time\nand each arg will be followed by its respective value.\n\n");
    tt->val_offset = (char *) &call_data_arrived_script - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'data_arrived_script'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_arrived_script");
    tt->descr = tdrpStrDup("Name of script to call if call_script is true");
    tt->help = tdrpStrDup("The script will be called with the args specified in the 'call_data_arrived_script parameter'.");
    tt->val_offset = (char *) &data_arrived_script - &_start_;
    tt->single_val.s = tdrpStrDup("test_script.pl");
    tt++;
    
    // Parameter 'include_arrived_script_args'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_arrived_script_args");
    tt->descr = tdrpStrDup("Option include arguments to the data_arrived_script.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &include_arrived_script_args - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'arrived_script_args'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("arrived_script_args");
    tt->descr = tdrpStrDup("Array of strings that will make up the list of arguments to be called with script");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_arrived_script_args - &_start_;
    tt->array_n_offset = (char *) &arrived_script_args_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'run_script_in_background'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("run_script_in_background");
    tt->descr = tdrpStrDup("Option to run script in background.");
    tt->help = tdrpStrDup("If TRUE, the script will be run in the background. Therefore, the system call will return immediately. If FALSE, InputWatcher will register with procmap while waiting for the script to complete.");
    tt->val_offset = (char *) &run_script_in_background - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'terminate_script_if_hung'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("terminate_script_if_hung");
    tt->descr = tdrpStrDup("Option to terminate script if it hangs.");
    tt->help = tdrpStrDup("If TRUE, the script will be killed if it does not return within 'script_max_run_secs'.");
    tt->val_offset = (char *) &terminate_script_if_hung - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'script_max_run_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("script_max_run_secs");
    tt->descr = tdrpStrDup("Max time allowed for script - secs.");
    tt->help = tdrpStrDup("If 'terminate_script_if_hung' is TRUE, the script will be killed if it does not complete withing this number of secs.");
    tt->val_offset = (char *) &script_max_run_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'procmap_register_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("procmap_register_interval");
    tt->descr = tdrpStrDup("Register interval for procmap - secs");
    tt->help = tdrpStrDup("If the script takes longer than 60 secs to complete, you will need to set this to a higher value to avoid the process being killed and restarted by the auto_restarter.");
    tt->val_offset = (char *) &procmap_register_interval - &_start_;
    tt->single_val.i = 60;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("CALL SCRIPT WHEN DATA IS LATE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'call_data_late_script'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("call_data_late_script");
    tt->descr = tdrpStrDup("Option to spawn a script when data is late.");
    tt->help = tdrpStrDup("If TRUE, the script 'data_late_script' will be called when data has not arrived within the last 'data_late_secs'. The call to the script will be repeated every 'data_late_secs' until data arrives.\nThe arguments will depend on the script_style parameter.\n\nFor SCRIPT_WITH_ORDERED_ARGS, the args are in the following order:\n  input_dir, data_late_secs, unix_time.\n\nFor SCRIPT_WITH_COMMAND_LINE_OPTIONS, the following command line args will be included, in no particular order:\n  -input_dir\n  -data_late_secs\n  -unix_time\nand each arg will be followed by its respective value.\n\n");
    tt->val_offset = (char *) &call_data_late_script - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'data_late_script'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_late_script");
    tt->descr = tdrpStrDup("Name of script to call if call_data_late_script is true");
    tt->help = tdrpStrDup("The script will be called with the args specified in the 'call_data_late_script' parameter.");
    tt->val_offset = (char *) &data_late_script - &_start_;
    tt->single_val.s = tdrpStrDup("test_script");
    tt++;
    
    // Parameter 'include_late_script_args'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_late_script_args");
    tt->descr = tdrpStrDup("Option include arguments to the data_late_script.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &include_late_script_args - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'late_script_args'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("late_script_args");
    tt->descr = tdrpStrDup("Array of strings that will make up the list of arguments to be called with data late script");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_late_script_args - &_start_;
    tt->array_n_offset = (char *) &late_script_args_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'data_late_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("data_late_secs");
    tt->descr = tdrpStrDup("Max data interval before it is considered late - secs.");
    tt->help = tdrpStrDup("If data has not arrived within this interval, and call_data_late_script is true, the data late script is called.");
    tt->val_offset = (char *) &data_late_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("COPY THE FILE, OPTIONALLY TO TIME-STAMPED FILE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'copy_to_time_stamped_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("copy_to_time_stamped_file");
    tt->descr = tdrpStrDup("Option to copy to a file with name based on the time.");
    tt->help = tdrpStrDup("If TRUE, the file will be copied to a file, in the directory 'output_dir', with the path based on the file modify time. The path will be: 'copy_dir/yyyymmdd/hhmmss.copy_ext'. This option takes precedence over copy_using_original_name.");
    tt->val_offset = (char *) &copy_to_time_stamped_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'copy_using_original_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("copy_using_original_name");
    tt->descr = tdrpStrDup("Option to make a copy of the file using its original name.");
    tt->help = tdrpStrDup("If TRUE, the file will be copied to a directory 'copy_dir/yyyymmdd/original_file_name', i.e. preserving the original file name. 'copy_to_time_stamped_file' takes precedence, and overrides this option.");
    tt->val_offset = (char *) &copy_using_original_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'append_date_time_to_original_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_date_time_to_original_name");
    tt->descr = tdrpStrDup("Option to append the date and time to the original name.");
    tt->help = tdrpStrDup("If TRUE, yyyymmdd_hhmmss will be appended to the original file name. This helps to keep forecast data unique, if applicable.");
    tt->val_offset = (char *) &append_date_time_to_original_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'without_date_directory'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("without_date_directory");
    tt->descr = tdrpStrDup("Option to remove yyyymmdd directory when copy_using_original_name is set to true.");
    tt->help = tdrpStrDup("If TRUE, the file will be copied to a directory 'copy_dir/original_file_name'.");
    tt->val_offset = (char *) &without_date_directory - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'copy_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("copy_dir");
    tt->descr = tdrpStrDup("Output directory for file copies.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &copy_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'copy_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("copy_prefix");
    tt->descr = tdrpStrDup("Prefix for file name of copy.");
    tt->help = tdrpStrDup("If empty, no prefix will be added.");
    tt->val_offset = (char *) &copy_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'copy_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("copy_ext");
    tt->descr = tdrpStrDup("File extension of file copy.");
    tt->help = tdrpStrDup("If empty, no extension will be added.");
    tt->val_offset = (char *) &copy_ext - &_start_;
    tt->single_val.s = tdrpStrDup("copy");
    tt++;
    
    // Parameter 'add_day_to_filename'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_day_to_filename");
    tt->descr = tdrpStrDup("Option to add the day into the file name.");
    tt->help = tdrpStrDup("If TRUE, he path will be: 'copy_dir/yyyymmdd/yyyymmdd_hhmmss.copy_ext'.");
    tt->val_offset = (char *) &add_day_to_filename - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remove_after_copy'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_after_copy");
    tt->descr = tdrpStrDup("Option to remove the file after the copy is complete.");
    tt->help = tdrpStrDup("It is not wise to use this if you are also calling a script which uses the file, since it could be removed before the script reads it.");
    tt->val_offset = (char *) &remove_after_copy - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'uncompress_after_copy'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("uncompress_after_copy");
    tt->descr = tdrpStrDup("Uncompress a compressed file after the copy, if required.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &uncompress_after_copy - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("WRITE LATEST_DATA_INFO FILE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_latest_data_info_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_latest_data_info_file");
    tt->descr = tdrpStrDup("Option to write _latest_data_info file when new data arrives.");
    tt->help = tdrpStrDup("If TRUE, when a new data arrives, a _latest_data_info file will be written into the directory. This will be automatically set to FALSE if latest_data_info_avail is TRUE.");
    tt->val_offset = (char *) &write_latest_data_info_file - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'data_type'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_type");
    tt->descr = tdrpStrDup("Set the data type.");
    tt->help = tdrpStrDup("If not set, the DIDSS system will attempt to determine the data type from the file path.");
    tt->val_offset = (char *) &data_type - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_latest_data_info_to_proxy_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_latest_data_info_to_proxy_dir");
    tt->descr = tdrpStrDup("Option to write _latest_data_info file to a proxy directory.");
    tt->help = tdrpStrDup("Normally the _latest_data_info is written to the data directory. However, it is possible that the input directory is write-protected. In such cases, you need to write the _latest_data_info to a proxy directory. The _latest_data_info files will point to the data directory.");
    tt->val_offset = (char *) &write_latest_data_info_to_proxy_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'latest_data_info_proxy_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_proxy_dir");
    tt->descr = tdrpStrDup("Proxy directory for _latest_data_info.");
    tt->help = tdrpStrDup("See 'write_latest_data_info_to_proxy_dir'.");
    tt->val_offset = (char *) &latest_data_info_proxy_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./proxy");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("REGISTER WITH DATA_MAPPER");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'register_with_datamapper'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_datamapper");
    tt->descr = tdrpStrDup("Option to register the data set with the DataMapper.");
    tt->help = tdrpStrDup("If TRUE, when a new data arrives, that info will be used to register with the DataMapper on the local machine. Not needed if write_latest_data_info_file is set to TRUE because when the latest_data_info is written the DataMapper will be notified. Uses the data_type, if set.");
    tt->val_offset = (char *) &register_with_datamapper - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
