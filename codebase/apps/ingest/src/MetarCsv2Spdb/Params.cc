/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program MetarCsv2Spdb
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Program MetarCsv2Spdb");
    tt->comment_text = tdrpStrDup("This program reads metar data from ascii input and stores it in spdb data base.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance for procmap.");
    tt->help = tdrpStrDup("This program uses this instance when registering with the process mapper.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operational mode: (REALTIME, ARCHIVE, FILELIST, or STDIN)");
    tt->help = tdrpStrDup("Realtime mode - waits for new data; archive mode runs on single file");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
      tt->enum_def.fields[3].name = tdrpStrDup("STDIN");
      tt->enum_def.fields[3].val = STDIN;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Path for directory to the input files.");
    tt->help = tdrpStrDup("If possible, the file names should include date/time information. Acceptable options are: yyyymmdd/hhmmss*, *yyyymmdd?hhmmss*, *yyyymmddhhmmss*, *yyyymmddhhmm*, *yyyymddhh*, *yyyymmdd?hhmm, *yyyymmdd?hh, *yyyymmdd*");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("raw/metars");
    tt++;
    
    // Parameter 'latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_avail");
    tt->descr = tdrpStrDup("Set to true if there is a latest_data_info file available in the input directory.");
    tt->help = tdrpStrDup("REALTIME mode only.");
    tt->val_offset = (char *) &latest_data_info_avail - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max valid age of rdata input files in realtime mode (secs)");
    tt->help = tdrpStrDup("This the max valid age for an incoming file. The program will wait for a data file more recent than this age.");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'expire_seconds'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("expire_seconds");
    tt->descr = tdrpStrDup("Expire time in seconds for each metar");
    tt->help = tdrpStrDup("This value will be added to the metar time to determine the expire time for the metar");
    tt->val_offset = (char *) &expire_seconds - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DECODERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'decoded_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("decoded_spdb_url");
    tt->descr = tdrpStrDup("Spdb URL for decoded metar data.");
    tt->help = tdrpStrDup("The name of the URL which will be used as the destination for the SPDB data. If the dir does not start with / or ., it is relative to $DATA_DIR.  Leave an empty string to not write decoded METARs to SPDB.");
    tt->val_offset = (char *) &decoded_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/metar");
    tt++;
    
    // Parameter 'ascii_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascii_spdb_url");
    tt->descr = tdrpStrDup("Spdb URL for ASCII metar data.");
    tt->help = tdrpStrDup("The name of the URL which will be used as the destination for the ASCII SPDB data. If the dir does not start with / or ., it is relative to $DATA_DIR.  Leave an empty string to not write ASCII METARs to SPDB.");
    tt->val_offset = (char *) &ascii_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_compression'
    // ctype is '_compression_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_compression");
    tt->descr = tdrpStrDup("Option to compress the chunks in the SPDB output.");
    tt->help = tdrpStrDup("Set desired output compression. Compression should only be done for data in which the individual chunks are large.");
    tt->val_offset = (char *) &output_compression - &_start_;
    tt->enum_def.name = tdrpStrDup("compression_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("COMPRESSION_NONE");
      tt->enum_def.fields[0].val = COMPRESSION_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("COMPRESSION_GZIP");
      tt->enum_def.fields[1].val = COMPRESSION_GZIP;
      tt->enum_def.fields[2].name = tdrpStrDup("COMPRESSION_BZIP2");
      tt->enum_def.fields[2].val = COMPRESSION_BZIP2;
    tt->single_val.e = COMPRESSION_NONE;
    tt++;
    
    // Parameter 'expire_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("expire_secs");
    tt->descr = tdrpStrDup("Data expire period - seconds");
    tt->help = tdrpStrDup("In the SPDB data base, the data is set as expired after this period.");
    tt->val_offset = (char *) &expire_secs - &_start_;
    tt->single_val.i = 21600;
    tt++;
    
    // Parameter 'field_names'
    // ctype is '_field_names_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("field_names");
    tt->descr = tdrpStrDup("Names of CSV fields");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &field_names - &_start_;
    tt->struct_def.name = tdrpStrDup("field_names_t");
    tt->struct_def.nfields = 100;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("icao_n");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &field_names.icao_n - (char *) &field_names;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("icao_i");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &field_names.icao_i - (char *) &field_names;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("lat_n");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &field_names.lat_n - (char *) &field_names;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("lat_i");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &field_names.lat_i - (char *) &field_names;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("lon_n");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &field_names.lon_n - (char *) &field_names;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("lon_i");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &field_names.lon_i - (char *) &field_names;
      tt->struct_def.fields[6].ftype = tdrpStrDup("string");
      tt->struct_def.fields[6].fname = tdrpStrDup("altitude_n");
      tt->struct_def.fields[6].ptype = STRING_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &field_names.altitude_n - (char *) &field_names;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("altitude_i");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &field_names.altitude_i - (char *) &field_names;
      tt->struct_def.fields[8].ftype = tdrpStrDup("string");
      tt->struct_def.fields[8].fname = tdrpStrDup("obs_time_n");
      tt->struct_def.fields[8].ptype = STRING_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &field_names.obs_time_n - (char *) &field_names;
      tt->struct_def.fields[9].ftype = tdrpStrDup("int");
      tt->struct_def.fields[9].fname = tdrpStrDup("obs_time_i");
      tt->struct_def.fields[9].ptype = INT_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &field_names.obs_time_i - (char *) &field_names;
      tt->struct_def.fields[10].ftype = tdrpStrDup("string");
      tt->struct_def.fields[10].fname = tdrpStrDup("report_time_n");
      tt->struct_def.fields[10].ptype = STRING_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &field_names.report_time_n - (char *) &field_names;
      tt->struct_def.fields[11].ftype = tdrpStrDup("int");
      tt->struct_def.fields[11].fname = tdrpStrDup("report_time_i");
      tt->struct_def.fields[11].ptype = INT_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &field_names.report_time_i - (char *) &field_names;
      tt->struct_def.fields[12].ftype = tdrpStrDup("string");
      tt->struct_def.fields[12].fname = tdrpStrDup("surface_temp_n");
      tt->struct_def.fields[12].ptype = STRING_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &field_names.surface_temp_n - (char *) &field_names;
      tt->struct_def.fields[13].ftype = tdrpStrDup("int");
      tt->struct_def.fields[13].fname = tdrpStrDup("surface_temp_i");
      tt->struct_def.fields[13].ptype = INT_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &field_names.surface_temp_i - (char *) &field_names;
      tt->struct_def.fields[14].ftype = tdrpStrDup("string");
      tt->struct_def.fields[14].fname = tdrpStrDup("dew_pt_temp_n");
      tt->struct_def.fields[14].ptype = STRING_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &field_names.dew_pt_temp_n - (char *) &field_names;
      tt->struct_def.fields[15].ftype = tdrpStrDup("int");
      tt->struct_def.fields[15].fname = tdrpStrDup("dew_pt_temp_i");
      tt->struct_def.fields[15].ptype = INT_TYPE;
      tt->struct_def.fields[15].rel_offset = 
        (char *) &field_names.dew_pt_temp_i - (char *) &field_names;
      tt->struct_def.fields[16].ftype = tdrpStrDup("string");
      tt->struct_def.fields[16].fname = tdrpStrDup("wind_dir_n");
      tt->struct_def.fields[16].ptype = STRING_TYPE;
      tt->struct_def.fields[16].rel_offset = 
        (char *) &field_names.wind_dir_n - (char *) &field_names;
      tt->struct_def.fields[17].ftype = tdrpStrDup("int");
      tt->struct_def.fields[17].fname = tdrpStrDup("wind_dir_i");
      tt->struct_def.fields[17].ptype = INT_TYPE;
      tt->struct_def.fields[17].rel_offset = 
        (char *) &field_names.wind_dir_i - (char *) &field_names;
      tt->struct_def.fields[18].ftype = tdrpStrDup("string");
      tt->struct_def.fields[18].fname = tdrpStrDup("wind_speed_n");
      tt->struct_def.fields[18].ptype = STRING_TYPE;
      tt->struct_def.fields[18].rel_offset = 
        (char *) &field_names.wind_speed_n - (char *) &field_names;
      tt->struct_def.fields[19].ftype = tdrpStrDup("int");
      tt->struct_def.fields[19].fname = tdrpStrDup("wind_speed_i");
      tt->struct_def.fields[19].ptype = INT_TYPE;
      tt->struct_def.fields[19].rel_offset = 
        (char *) &field_names.wind_speed_i - (char *) &field_names;
      tt->struct_def.fields[20].ftype = tdrpStrDup("string");
      tt->struct_def.fields[20].fname = tdrpStrDup("wind_gust_n");
      tt->struct_def.fields[20].ptype = STRING_TYPE;
      tt->struct_def.fields[20].rel_offset = 
        (char *) &field_names.wind_gust_n - (char *) &field_names;
      tt->struct_def.fields[21].ftype = tdrpStrDup("int");
      tt->struct_def.fields[21].fname = tdrpStrDup("wind_gust_i");
      tt->struct_def.fields[21].ptype = INT_TYPE;
      tt->struct_def.fields[21].rel_offset = 
        (char *) &field_names.wind_gust_i - (char *) &field_names;
      tt->struct_def.fields[22].ftype = tdrpStrDup("string");
      tt->struct_def.fields[22].fname = tdrpStrDup("horiz_visibility_n");
      tt->struct_def.fields[22].ptype = STRING_TYPE;
      tt->struct_def.fields[22].rel_offset = 
        (char *) &field_names.horiz_visibility_n - (char *) &field_names;
      tt->struct_def.fields[23].ftype = tdrpStrDup("int");
      tt->struct_def.fields[23].fname = tdrpStrDup("horiz_visibility_i");
      tt->struct_def.fields[23].ptype = INT_TYPE;
      tt->struct_def.fields[23].rel_offset = 
        (char *) &field_names.horiz_visibility_i - (char *) &field_names;
      tt->struct_def.fields[24].ftype = tdrpStrDup("string");
      tt->struct_def.fields[24].fname = tdrpStrDup("altimeter_n");
      tt->struct_def.fields[24].ptype = STRING_TYPE;
      tt->struct_def.fields[24].rel_offset = 
        (char *) &field_names.altimeter_n - (char *) &field_names;
      tt->struct_def.fields[25].ftype = tdrpStrDup("int");
      tt->struct_def.fields[25].fname = tdrpStrDup("altimeter_i");
      tt->struct_def.fields[25].ptype = INT_TYPE;
      tt->struct_def.fields[25].rel_offset = 
        (char *) &field_names.altimeter_i - (char *) &field_names;
      tt->struct_def.fields[26].ftype = tdrpStrDup("string");
      tt->struct_def.fields[26].fname = tdrpStrDup("sea_lvl_pressure_n");
      tt->struct_def.fields[26].ptype = STRING_TYPE;
      tt->struct_def.fields[26].rel_offset = 
        (char *) &field_names.sea_lvl_pressure_n - (char *) &field_names;
      tt->struct_def.fields[27].ftype = tdrpStrDup("int");
      tt->struct_def.fields[27].fname = tdrpStrDup("sea_lvl_pressure_i");
      tt->struct_def.fields[27].ptype = INT_TYPE;
      tt->struct_def.fields[27].rel_offset = 
        (char *) &field_names.sea_lvl_pressure_i - (char *) &field_names;
      tt->struct_def.fields[28].ftype = tdrpStrDup("string");
      tt->struct_def.fields[28].fname = tdrpStrDup("qc_field_n");
      tt->struct_def.fields[28].ptype = STRING_TYPE;
      tt->struct_def.fields[28].rel_offset = 
        (char *) &field_names.qc_field_n - (char *) &field_names;
      tt->struct_def.fields[29].ftype = tdrpStrDup("int");
      tt->struct_def.fields[29].fname = tdrpStrDup("qc_field_i");
      tt->struct_def.fields[29].ptype = INT_TYPE;
      tt->struct_def.fields[29].rel_offset = 
        (char *) &field_names.qc_field_i - (char *) &field_names;
      tt->struct_def.fields[30].ftype = tdrpStrDup("string");
      tt->struct_def.fields[30].fname = tdrpStrDup("corrected_n");
      tt->struct_def.fields[30].ptype = STRING_TYPE;
      tt->struct_def.fields[30].rel_offset = 
        (char *) &field_names.corrected_n - (char *) &field_names;
      tt->struct_def.fields[31].ftype = tdrpStrDup("int");
      tt->struct_def.fields[31].fname = tdrpStrDup("corrected_i");
      tt->struct_def.fields[31].ptype = INT_TYPE;
      tt->struct_def.fields[31].rel_offset = 
        (char *) &field_names.corrected_i - (char *) &field_names;
      tt->struct_def.fields[32].ftype = tdrpStrDup("string");
      tt->struct_def.fields[32].fname = tdrpStrDup("auto_n");
      tt->struct_def.fields[32].ptype = STRING_TYPE;
      tt->struct_def.fields[32].rel_offset = 
        (char *) &field_names.auto_n - (char *) &field_names;
      tt->struct_def.fields[33].ftype = tdrpStrDup("int");
      tt->struct_def.fields[33].fname = tdrpStrDup("auto_i");
      tt->struct_def.fields[33].ptype = INT_TYPE;
      tt->struct_def.fields[33].rel_offset = 
        (char *) &field_names.auto_i - (char *) &field_names;
      tt->struct_def.fields[34].ftype = tdrpStrDup("string");
      tt->struct_def.fields[34].fname = tdrpStrDup("auto_station_n");
      tt->struct_def.fields[34].ptype = STRING_TYPE;
      tt->struct_def.fields[34].rel_offset = 
        (char *) &field_names.auto_station_n - (char *) &field_names;
      tt->struct_def.fields[35].ftype = tdrpStrDup("int");
      tt->struct_def.fields[35].fname = tdrpStrDup("auto_station_i");
      tt->struct_def.fields[35].ptype = INT_TYPE;
      tt->struct_def.fields[35].rel_offset = 
        (char *) &field_names.auto_station_i - (char *) &field_names;
      tt->struct_def.fields[36].ftype = tdrpStrDup("string");
      tt->struct_def.fields[36].fname = tdrpStrDup("maintenance_n");
      tt->struct_def.fields[36].ptype = STRING_TYPE;
      tt->struct_def.fields[36].rel_offset = 
        (char *) &field_names.maintenance_n - (char *) &field_names;
      tt->struct_def.fields[37].ftype = tdrpStrDup("int");
      tt->struct_def.fields[37].fname = tdrpStrDup("maintenance_i");
      tt->struct_def.fields[37].ptype = INT_TYPE;
      tt->struct_def.fields[37].rel_offset = 
        (char *) &field_names.maintenance_i - (char *) &field_names;
      tt->struct_def.fields[38].ftype = tdrpStrDup("string");
      tt->struct_def.fields[38].fname = tdrpStrDup("no_signal_n");
      tt->struct_def.fields[38].ptype = STRING_TYPE;
      tt->struct_def.fields[38].rel_offset = 
        (char *) &field_names.no_signal_n - (char *) &field_names;
      tt->struct_def.fields[39].ftype = tdrpStrDup("int");
      tt->struct_def.fields[39].fname = tdrpStrDup("no_signal_i");
      tt->struct_def.fields[39].ptype = INT_TYPE;
      tt->struct_def.fields[39].rel_offset = 
        (char *) &field_names.no_signal_i - (char *) &field_names;
      tt->struct_def.fields[40].ftype = tdrpStrDup("string");
      tt->struct_def.fields[40].fname = tdrpStrDup("lightning_off_n");
      tt->struct_def.fields[40].ptype = STRING_TYPE;
      tt->struct_def.fields[40].rel_offset = 
        (char *) &field_names.lightning_off_n - (char *) &field_names;
      tt->struct_def.fields[41].ftype = tdrpStrDup("int");
      tt->struct_def.fields[41].fname = tdrpStrDup("lightning_off_i");
      tt->struct_def.fields[41].ptype = INT_TYPE;
      tt->struct_def.fields[41].rel_offset = 
        (char *) &field_names.lightning_off_i - (char *) &field_names;
      tt->struct_def.fields[42].ftype = tdrpStrDup("string");
      tt->struct_def.fields[42].fname = tdrpStrDup("freezing_rain_off_n");
      tt->struct_def.fields[42].ptype = STRING_TYPE;
      tt->struct_def.fields[42].rel_offset = 
        (char *) &field_names.freezing_rain_off_n - (char *) &field_names;
      tt->struct_def.fields[43].ftype = tdrpStrDup("int");
      tt->struct_def.fields[43].fname = tdrpStrDup("freezing_rain_off_i");
      tt->struct_def.fields[43].ptype = INT_TYPE;
      tt->struct_def.fields[43].rel_offset = 
        (char *) &field_names.freezing_rain_off_i - (char *) &field_names;
      tt->struct_def.fields[44].ftype = tdrpStrDup("string");
      tt->struct_def.fields[44].fname = tdrpStrDup("present_weather_off_n");
      tt->struct_def.fields[44].ptype = STRING_TYPE;
      tt->struct_def.fields[44].rel_offset = 
        (char *) &field_names.present_weather_off_n - (char *) &field_names;
      tt->struct_def.fields[45].ftype = tdrpStrDup("int");
      tt->struct_def.fields[45].fname = tdrpStrDup("present_weather_off_i");
      tt->struct_def.fields[45].ptype = INT_TYPE;
      tt->struct_def.fields[45].rel_offset = 
        (char *) &field_names.present_weather_off_i - (char *) &field_names;
      tt->struct_def.fields[46].ftype = tdrpStrDup("string");
      tt->struct_def.fields[46].fname = tdrpStrDup("present_weather_n");
      tt->struct_def.fields[46].ptype = STRING_TYPE;
      tt->struct_def.fields[46].rel_offset = 
        (char *) &field_names.present_weather_n - (char *) &field_names;
      tt->struct_def.fields[47].ftype = tdrpStrDup("int");
      tt->struct_def.fields[47].fname = tdrpStrDup("present_weather_i");
      tt->struct_def.fields[47].ptype = INT_TYPE;
      tt->struct_def.fields[47].rel_offset = 
        (char *) &field_names.present_weather_i - (char *) &field_names;
      tt->struct_def.fields[48].ftype = tdrpStrDup("string");
      tt->struct_def.fields[48].fname = tdrpStrDup("cloud_coverage1_n");
      tt->struct_def.fields[48].ptype = STRING_TYPE;
      tt->struct_def.fields[48].rel_offset = 
        (char *) &field_names.cloud_coverage1_n - (char *) &field_names;
      tt->struct_def.fields[49].ftype = tdrpStrDup("int");
      tt->struct_def.fields[49].fname = tdrpStrDup("cloud_coverage1_i");
      tt->struct_def.fields[49].ptype = INT_TYPE;
      tt->struct_def.fields[49].rel_offset = 
        (char *) &field_names.cloud_coverage1_i - (char *) &field_names;
      tt->struct_def.fields[50].ftype = tdrpStrDup("string");
      tt->struct_def.fields[50].fname = tdrpStrDup("cloud_coverage2_n");
      tt->struct_def.fields[50].ptype = STRING_TYPE;
      tt->struct_def.fields[50].rel_offset = 
        (char *) &field_names.cloud_coverage2_n - (char *) &field_names;
      tt->struct_def.fields[51].ftype = tdrpStrDup("int");
      tt->struct_def.fields[51].fname = tdrpStrDup("cloud_coverage2_i");
      tt->struct_def.fields[51].ptype = INT_TYPE;
      tt->struct_def.fields[51].rel_offset = 
        (char *) &field_names.cloud_coverage2_i - (char *) &field_names;
      tt->struct_def.fields[52].ftype = tdrpStrDup("string");
      tt->struct_def.fields[52].fname = tdrpStrDup("cloud_coverage3_n");
      tt->struct_def.fields[52].ptype = STRING_TYPE;
      tt->struct_def.fields[52].rel_offset = 
        (char *) &field_names.cloud_coverage3_n - (char *) &field_names;
      tt->struct_def.fields[53].ftype = tdrpStrDup("int");
      tt->struct_def.fields[53].fname = tdrpStrDup("cloud_coverage3_i");
      tt->struct_def.fields[53].ptype = INT_TYPE;
      tt->struct_def.fields[53].rel_offset = 
        (char *) &field_names.cloud_coverage3_i - (char *) &field_names;
      tt->struct_def.fields[54].ftype = tdrpStrDup("string");
      tt->struct_def.fields[54].fname = tdrpStrDup("cloud_coverage4_n");
      tt->struct_def.fields[54].ptype = STRING_TYPE;
      tt->struct_def.fields[54].rel_offset = 
        (char *) &field_names.cloud_coverage4_n - (char *) &field_names;
      tt->struct_def.fields[55].ftype = tdrpStrDup("int");
      tt->struct_def.fields[55].fname = tdrpStrDup("cloud_coverage4_i");
      tt->struct_def.fields[55].ptype = INT_TYPE;
      tt->struct_def.fields[55].rel_offset = 
        (char *) &field_names.cloud_coverage4_i - (char *) &field_names;
      tt->struct_def.fields[56].ftype = tdrpStrDup("string");
      tt->struct_def.fields[56].fname = tdrpStrDup("cloud_coverage5_n");
      tt->struct_def.fields[56].ptype = STRING_TYPE;
      tt->struct_def.fields[56].rel_offset = 
        (char *) &field_names.cloud_coverage5_n - (char *) &field_names;
      tt->struct_def.fields[57].ftype = tdrpStrDup("int");
      tt->struct_def.fields[57].fname = tdrpStrDup("cloud_coverage5_i");
      tt->struct_def.fields[57].ptype = INT_TYPE;
      tt->struct_def.fields[57].rel_offset = 
        (char *) &field_names.cloud_coverage5_i - (char *) &field_names;
      tt->struct_def.fields[58].ftype = tdrpStrDup("string");
      tt->struct_def.fields[58].fname = tdrpStrDup("cloud_coverage6_n");
      tt->struct_def.fields[58].ptype = STRING_TYPE;
      tt->struct_def.fields[58].rel_offset = 
        (char *) &field_names.cloud_coverage6_n - (char *) &field_names;
      tt->struct_def.fields[59].ftype = tdrpStrDup("int");
      tt->struct_def.fields[59].fname = tdrpStrDup("cloud_coverage6_i");
      tt->struct_def.fields[59].ptype = INT_TYPE;
      tt->struct_def.fields[59].rel_offset = 
        (char *) &field_names.cloud_coverage6_i - (char *) &field_names;
      tt->struct_def.fields[60].ftype = tdrpStrDup("string");
      tt->struct_def.fields[60].fname = tdrpStrDup("cloud_base1_n");
      tt->struct_def.fields[60].ptype = STRING_TYPE;
      tt->struct_def.fields[60].rel_offset = 
        (char *) &field_names.cloud_base1_n - (char *) &field_names;
      tt->struct_def.fields[61].ftype = tdrpStrDup("int");
      tt->struct_def.fields[61].fname = tdrpStrDup("cloud_base1_i");
      tt->struct_def.fields[61].ptype = INT_TYPE;
      tt->struct_def.fields[61].rel_offset = 
        (char *) &field_names.cloud_base1_i - (char *) &field_names;
      tt->struct_def.fields[62].ftype = tdrpStrDup("string");
      tt->struct_def.fields[62].fname = tdrpStrDup("cloud_base2_n");
      tt->struct_def.fields[62].ptype = STRING_TYPE;
      tt->struct_def.fields[62].rel_offset = 
        (char *) &field_names.cloud_base2_n - (char *) &field_names;
      tt->struct_def.fields[63].ftype = tdrpStrDup("int");
      tt->struct_def.fields[63].fname = tdrpStrDup("cloud_base2_i");
      tt->struct_def.fields[63].ptype = INT_TYPE;
      tt->struct_def.fields[63].rel_offset = 
        (char *) &field_names.cloud_base2_i - (char *) &field_names;
      tt->struct_def.fields[64].ftype = tdrpStrDup("string");
      tt->struct_def.fields[64].fname = tdrpStrDup("cloud_base3_n");
      tt->struct_def.fields[64].ptype = STRING_TYPE;
      tt->struct_def.fields[64].rel_offset = 
        (char *) &field_names.cloud_base3_n - (char *) &field_names;
      tt->struct_def.fields[65].ftype = tdrpStrDup("int");
      tt->struct_def.fields[65].fname = tdrpStrDup("cloud_base3_i");
      tt->struct_def.fields[65].ptype = INT_TYPE;
      tt->struct_def.fields[65].rel_offset = 
        (char *) &field_names.cloud_base3_i - (char *) &field_names;
      tt->struct_def.fields[66].ftype = tdrpStrDup("string");
      tt->struct_def.fields[66].fname = tdrpStrDup("cloud_base4_n");
      tt->struct_def.fields[66].ptype = STRING_TYPE;
      tt->struct_def.fields[66].rel_offset = 
        (char *) &field_names.cloud_base4_n - (char *) &field_names;
      tt->struct_def.fields[67].ftype = tdrpStrDup("int");
      tt->struct_def.fields[67].fname = tdrpStrDup("cloud_base4_i");
      tt->struct_def.fields[67].ptype = INT_TYPE;
      tt->struct_def.fields[67].rel_offset = 
        (char *) &field_names.cloud_base4_i - (char *) &field_names;
      tt->struct_def.fields[68].ftype = tdrpStrDup("string");
      tt->struct_def.fields[68].fname = tdrpStrDup("cloud_base5_n");
      tt->struct_def.fields[68].ptype = STRING_TYPE;
      tt->struct_def.fields[68].rel_offset = 
        (char *) &field_names.cloud_base5_n - (char *) &field_names;
      tt->struct_def.fields[69].ftype = tdrpStrDup("int");
      tt->struct_def.fields[69].fname = tdrpStrDup("cloud_base5_i");
      tt->struct_def.fields[69].ptype = INT_TYPE;
      tt->struct_def.fields[69].rel_offset = 
        (char *) &field_names.cloud_base5_i - (char *) &field_names;
      tt->struct_def.fields[70].ftype = tdrpStrDup("string");
      tt->struct_def.fields[70].fname = tdrpStrDup("cloud_base6_n");
      tt->struct_def.fields[70].ptype = STRING_TYPE;
      tt->struct_def.fields[70].rel_offset = 
        (char *) &field_names.cloud_base6_n - (char *) &field_names;
      tt->struct_def.fields[71].ftype = tdrpStrDup("int");
      tt->struct_def.fields[71].fname = tdrpStrDup("cloud_base6_i");
      tt->struct_def.fields[71].ptype = INT_TYPE;
      tt->struct_def.fields[71].rel_offset = 
        (char *) &field_names.cloud_base6_i - (char *) &field_names;
      tt->struct_def.fields[72].ftype = tdrpStrDup("string");
      tt->struct_def.fields[72].fname = tdrpStrDup("pressure_tendency_n");
      tt->struct_def.fields[72].ptype = STRING_TYPE;
      tt->struct_def.fields[72].rel_offset = 
        (char *) &field_names.pressure_tendency_n - (char *) &field_names;
      tt->struct_def.fields[73].ftype = tdrpStrDup("int");
      tt->struct_def.fields[73].fname = tdrpStrDup("pressure_tendency_i");
      tt->struct_def.fields[73].ptype = INT_TYPE;
      tt->struct_def.fields[73].rel_offset = 
        (char *) &field_names.pressure_tendency_i - (char *) &field_names;
      tt->struct_def.fields[74].ftype = tdrpStrDup("string");
      tt->struct_def.fields[74].fname = tdrpStrDup("maxT_n");
      tt->struct_def.fields[74].ptype = STRING_TYPE;
      tt->struct_def.fields[74].rel_offset = 
        (char *) &field_names.maxT_n - (char *) &field_names;
      tt->struct_def.fields[75].ftype = tdrpStrDup("int");
      tt->struct_def.fields[75].fname = tdrpStrDup("maxT_i");
      tt->struct_def.fields[75].ptype = INT_TYPE;
      tt->struct_def.fields[75].rel_offset = 
        (char *) &field_names.maxT_i - (char *) &field_names;
      tt->struct_def.fields[76].ftype = tdrpStrDup("string");
      tt->struct_def.fields[76].fname = tdrpStrDup("minT_n");
      tt->struct_def.fields[76].ptype = STRING_TYPE;
      tt->struct_def.fields[76].rel_offset = 
        (char *) &field_names.minT_n - (char *) &field_names;
      tt->struct_def.fields[77].ftype = tdrpStrDup("int");
      tt->struct_def.fields[77].fname = tdrpStrDup("minT_i");
      tt->struct_def.fields[77].ptype = INT_TYPE;
      tt->struct_def.fields[77].rel_offset = 
        (char *) &field_names.minT_i - (char *) &field_names;
      tt->struct_def.fields[78].ftype = tdrpStrDup("string");
      tt->struct_def.fields[78].fname = tdrpStrDup("maxT24hr_n");
      tt->struct_def.fields[78].ptype = STRING_TYPE;
      tt->struct_def.fields[78].rel_offset = 
        (char *) &field_names.maxT24hr_n - (char *) &field_names;
      tt->struct_def.fields[79].ftype = tdrpStrDup("int");
      tt->struct_def.fields[79].fname = tdrpStrDup("maxT24hr_i");
      tt->struct_def.fields[79].ptype = INT_TYPE;
      tt->struct_def.fields[79].rel_offset = 
        (char *) &field_names.maxT24hr_i - (char *) &field_names;
      tt->struct_def.fields[80].ftype = tdrpStrDup("string");
      tt->struct_def.fields[80].fname = tdrpStrDup("minT24hr_n");
      tt->struct_def.fields[80].ptype = STRING_TYPE;
      tt->struct_def.fields[80].rel_offset = 
        (char *) &field_names.minT24hr_n - (char *) &field_names;
      tt->struct_def.fields[81].ftype = tdrpStrDup("int");
      tt->struct_def.fields[81].fname = tdrpStrDup("minT24hr_i");
      tt->struct_def.fields[81].ptype = INT_TYPE;
      tt->struct_def.fields[81].rel_offset = 
        (char *) &field_names.minT24hr_i - (char *) &field_names;
      tt->struct_def.fields[82].ftype = tdrpStrDup("string");
      tt->struct_def.fields[82].fname = tdrpStrDup("precip_n");
      tt->struct_def.fields[82].ptype = STRING_TYPE;
      tt->struct_def.fields[82].rel_offset = 
        (char *) &field_names.precip_n - (char *) &field_names;
      tt->struct_def.fields[83].ftype = tdrpStrDup("int");
      tt->struct_def.fields[83].fname = tdrpStrDup("precip_i");
      tt->struct_def.fields[83].ptype = INT_TYPE;
      tt->struct_def.fields[83].rel_offset = 
        (char *) &field_names.precip_i - (char *) &field_names;
      tt->struct_def.fields[84].ftype = tdrpStrDup("string");
      tt->struct_def.fields[84].fname = tdrpStrDup("precip3hr_n");
      tt->struct_def.fields[84].ptype = STRING_TYPE;
      tt->struct_def.fields[84].rel_offset = 
        (char *) &field_names.precip3hr_n - (char *) &field_names;
      tt->struct_def.fields[85].ftype = tdrpStrDup("int");
      tt->struct_def.fields[85].fname = tdrpStrDup("precip3hr_i");
      tt->struct_def.fields[85].ptype = INT_TYPE;
      tt->struct_def.fields[85].rel_offset = 
        (char *) &field_names.precip3hr_i - (char *) &field_names;
      tt->struct_def.fields[86].ftype = tdrpStrDup("string");
      tt->struct_def.fields[86].fname = tdrpStrDup("precip6hr_n");
      tt->struct_def.fields[86].ptype = STRING_TYPE;
      tt->struct_def.fields[86].rel_offset = 
        (char *) &field_names.precip6hr_n - (char *) &field_names;
      tt->struct_def.fields[87].ftype = tdrpStrDup("int");
      tt->struct_def.fields[87].fname = tdrpStrDup("precip6hr_i");
      tt->struct_def.fields[87].ptype = INT_TYPE;
      tt->struct_def.fields[87].rel_offset = 
        (char *) &field_names.precip6hr_i - (char *) &field_names;
      tt->struct_def.fields[88].ftype = tdrpStrDup("string");
      tt->struct_def.fields[88].fname = tdrpStrDup("precip24hr_n");
      tt->struct_def.fields[88].ptype = STRING_TYPE;
      tt->struct_def.fields[88].rel_offset = 
        (char *) &field_names.precip24hr_n - (char *) &field_names;
      tt->struct_def.fields[89].ftype = tdrpStrDup("int");
      tt->struct_def.fields[89].fname = tdrpStrDup("precip24hr_i");
      tt->struct_def.fields[89].ptype = INT_TYPE;
      tt->struct_def.fields[89].rel_offset = 
        (char *) &field_names.precip24hr_i - (char *) &field_names;
      tt->struct_def.fields[90].ftype = tdrpStrDup("string");
      tt->struct_def.fields[90].fname = tdrpStrDup("snow_n");
      tt->struct_def.fields[90].ptype = STRING_TYPE;
      tt->struct_def.fields[90].rel_offset = 
        (char *) &field_names.snow_n - (char *) &field_names;
      tt->struct_def.fields[91].ftype = tdrpStrDup("int");
      tt->struct_def.fields[91].fname = tdrpStrDup("snow_i");
      tt->struct_def.fields[91].ptype = INT_TYPE;
      tt->struct_def.fields[91].rel_offset = 
        (char *) &field_names.snow_i - (char *) &field_names;
      tt->struct_def.fields[92].ftype = tdrpStrDup("string");
      tt->struct_def.fields[92].fname = tdrpStrDup("vertical_visibility_n");
      tt->struct_def.fields[92].ptype = STRING_TYPE;
      tt->struct_def.fields[92].rel_offset = 
        (char *) &field_names.vertical_visibility_n - (char *) &field_names;
      tt->struct_def.fields[93].ftype = tdrpStrDup("int");
      tt->struct_def.fields[93].fname = tdrpStrDup("vertical_visibility_i");
      tt->struct_def.fields[93].ptype = INT_TYPE;
      tt->struct_def.fields[93].rel_offset = 
        (char *) &field_names.vertical_visibility_i - (char *) &field_names;
      tt->struct_def.fields[94].ftype = tdrpStrDup("string");
      tt->struct_def.fields[94].fname = tdrpStrDup("ceiling_low_n");
      tt->struct_def.fields[94].ptype = STRING_TYPE;
      tt->struct_def.fields[94].rel_offset = 
        (char *) &field_names.ceiling_low_n - (char *) &field_names;
      tt->struct_def.fields[95].ftype = tdrpStrDup("int");
      tt->struct_def.fields[95].fname = tdrpStrDup("ceiling_low_i");
      tt->struct_def.fields[95].ptype = INT_TYPE;
      tt->struct_def.fields[95].rel_offset = 
        (char *) &field_names.ceiling_low_i - (char *) &field_names;
      tt->struct_def.fields[96].ftype = tdrpStrDup("string");
      tt->struct_def.fields[96].fname = tdrpStrDup("metar_type_n");
      tt->struct_def.fields[96].ptype = STRING_TYPE;
      tt->struct_def.fields[96].rel_offset = 
        (char *) &field_names.metar_type_n - (char *) &field_names;
      tt->struct_def.fields[97].ftype = tdrpStrDup("int");
      tt->struct_def.fields[97].fname = tdrpStrDup("metar_type_i");
      tt->struct_def.fields[97].ptype = INT_TYPE;
      tt->struct_def.fields[97].rel_offset = 
        (char *) &field_names.metar_type_i - (char *) &field_names;
      tt->struct_def.fields[98].ftype = tdrpStrDup("string");
      tt->struct_def.fields[98].fname = tdrpStrDup("raw_n");
      tt->struct_def.fields[98].ptype = STRING_TYPE;
      tt->struct_def.fields[98].rel_offset = 
        (char *) &field_names.raw_n - (char *) &field_names;
      tt->struct_def.fields[99].ftype = tdrpStrDup("int");
      tt->struct_def.fields[99].fname = tdrpStrDup("raw_i");
      tt->struct_def.fields[99].ptype = INT_TYPE;
      tt->struct_def.fields[99].rel_offset = 
        (char *) &field_names.raw_i - (char *) &field_names;
    tt->n_struct_vals = 100;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("icaoId");
      tt->struct_vals[1].i = -1;
      tt->struct_vals[2].s = tdrpStrDup("latitude");
      tt->struct_vals[3].i = -1;
      tt->struct_vals[4].s = tdrpStrDup("longitude");
      tt->struct_vals[5].i = -1;
      tt->struct_vals[6].s = tdrpStrDup("altitude_m");
      tt->struct_vals[7].i = -1;
      tt->struct_vals[8].s = tdrpStrDup("observationTime");
      tt->struct_vals[9].i = -1;
      tt->struct_vals[10].s = tdrpStrDup("timeReportReceived");
      tt->struct_vals[11].i = -1;
      tt->struct_vals[12].s = tdrpStrDup("surfaceTemperature(C)");
      tt->struct_vals[13].i = -1;
      tt->struct_vals[14].s = tdrpStrDup("dewpointTemperature(C)");
      tt->struct_vals[15].i = -1;
      tt->struct_vals[16].s = tdrpStrDup("windDirection(deg)");
      tt->struct_vals[17].i = -1;
      tt->struct_vals[18].s = tdrpStrDup("windSpeed(kts)");
      tt->struct_vals[19].i = -1;
      tt->struct_vals[20].s = tdrpStrDup("windGust(kts)");
      tt->struct_vals[21].i = -1;
      tt->struct_vals[22].s = tdrpStrDup("horizontalVisibility(mi)");
      tt->struct_vals[23].i = -1;
      tt->struct_vals[24].s = tdrpStrDup("altimeter(in)");
      tt->struct_vals[25].i = -1;
      tt->struct_vals[26].s = tdrpStrDup("seaLevelPressure(hPa)");
      tt->struct_vals[27].i = -1;
      tt->struct_vals[28].s = tdrpStrDup("qcField");
      tt->struct_vals[29].i = -1;
      tt->struct_vals[30].s = tdrpStrDup("");
      tt->struct_vals[31].i = -1;
      tt->struct_vals[32].s = tdrpStrDup("");
      tt->struct_vals[33].i = -1;
      tt->struct_vals[34].s = tdrpStrDup("");
      tt->struct_vals[35].i = -1;
      tt->struct_vals[36].s = tdrpStrDup("");
      tt->struct_vals[37].i = -1;
      tt->struct_vals[38].s = tdrpStrDup("");
      tt->struct_vals[39].i = -1;
      tt->struct_vals[40].s = tdrpStrDup("");
      tt->struct_vals[41].i = -1;
      tt->struct_vals[42].s = tdrpStrDup("");
      tt->struct_vals[43].i = -1;
      tt->struct_vals[44].s = tdrpStrDup("");
      tt->struct_vals[45].i = -1;
      tt->struct_vals[46].s = tdrpStrDup("presentWeather");
      tt->struct_vals[47].i = -1;
      tt->struct_vals[48].s = tdrpStrDup("cloudCoverage1");
      tt->struct_vals[49].i = -1;
      tt->struct_vals[50].s = tdrpStrDup("cloudCoverage2");
      tt->struct_vals[51].i = -1;
      tt->struct_vals[52].s = tdrpStrDup("cloudCoverage3");
      tt->struct_vals[53].i = -1;
      tt->struct_vals[54].s = tdrpStrDup("cloudCoverage4");
      tt->struct_vals[55].i = -1;
      tt->struct_vals[56].s = tdrpStrDup("cloudCoverage5");
      tt->struct_vals[57].i = -1;
      tt->struct_vals[58].s = tdrpStrDup("cloudCoverage6");
      tt->struct_vals[59].i = -1;
      tt->struct_vals[60].s = tdrpStrDup("cloudBase1(ft AGL)");
      tt->struct_vals[61].i = -1;
      tt->struct_vals[62].s = tdrpStrDup("cloudBase2(ft AGL)");
      tt->struct_vals[63].i = -1;
      tt->struct_vals[64].s = tdrpStrDup("cloudBase3(ft AGL)");
      tt->struct_vals[65].i = -1;
      tt->struct_vals[66].s = tdrpStrDup("cloudBase4(ft AGL)");
      tt->struct_vals[67].i = -1;
      tt->struct_vals[68].s = tdrpStrDup("cloudBase5(ft AGL)");
      tt->struct_vals[69].i = -1;
      tt->struct_vals[70].s = tdrpStrDup("cloudBase6(ft AGL)");
      tt->struct_vals[71].i = -1;
      tt->struct_vals[72].s = tdrpStrDup("pressureTendency(1/10 hPa)");
      tt->struct_vals[73].i = -1;
      tt->struct_vals[74].s = tdrpStrDup("maximumT(C)");
      tt->struct_vals[75].i = -1;
      tt->struct_vals[76].s = tdrpStrDup("minmumT(C)");
      tt->struct_vals[77].i = -1;
      tt->struct_vals[78].s = tdrpStrDup("maximumTemperature24hr(C)");
      tt->struct_vals[79].i = -1;
      tt->struct_vals[80].s = tdrpStrDup("minimumTemperature24hr(C)");
      tt->struct_vals[81].i = -1;
      tt->struct_vals[82].s = tdrpStrDup("precipitation(in)");
      tt->struct_vals[83].i = -1;
      tt->struct_vals[84].s = tdrpStrDup("precipitation3hr(in)");
      tt->struct_vals[85].i = -1;
      tt->struct_vals[86].s = tdrpStrDup("precipitation6hr(in)");
      tt->struct_vals[87].i = -1;
      tt->struct_vals[88].s = tdrpStrDup("precipitation24hr(in)");
      tt->struct_vals[89].i = -1;
      tt->struct_vals[90].s = tdrpStrDup("snow(in)");
      tt->struct_vals[91].i = -1;
      tt->struct_vals[92].s = tdrpStrDup("verticalVisibility(ft)");
      tt->struct_vals[93].i = -1;
      tt->struct_vals[94].s = tdrpStrDup("ceilingLow(ft AGL)");
      tt->struct_vals[95].i = -1;
      tt->struct_vals[96].s = tdrpStrDup("metarType");
      tt->struct_vals[97].i = -1;
      tt->struct_vals[98].s = tdrpStrDup("rawText");
      tt->struct_vals[99].i = -1;
    tt++;
    
    // Parameter 'rejectedStations'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("rejectedStations");
    tt->descr = tdrpStrDup("List of rejected station IDs");
    tt->help = tdrpStrDup("If a station is on this list, it is not stored.");
    tt->array_offset = (char *) &_rejectedStations - &_start_;
    tt->array_n_offset = (char *) &rejectedStations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("FAKE");
      tt->array_vals[1].s = tdrpStrDup("K123");
      tt->array_vals[2].s = tdrpStrDup("K789");
    tt++;
    
    // Parameter 'acceptedStations'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("acceptedStations");
    tt->descr = tdrpStrDup("List of accepted station IDs");
    tt->help = tdrpStrDup("If a station is on this list, it is stored.");
    tt->array_offset = (char *) &_acceptedStations - &_start_;
    tt->array_n_offset = (char *) &acceptedStations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("FAKE");
      tt->array_vals[1].s = tdrpStrDup("K123");
      tt->array_vals[2].s = tdrpStrDup("K789");
    tt++;
    
    // Parameter 'output_report_type'
    // ctype is '_output_report_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_report_type");
    tt->descr = tdrpStrDup("Type of station report to put in the output SPDB database");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_report_type - &_start_;
    tt->enum_def.name = tdrpStrDup("output_report_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REPORT_PLUS_METAR_XML");
      tt->enum_def.fields[0].val = REPORT_PLUS_METAR_XML;
      tt->enum_def.fields[1].name = tdrpStrDup("REPORT_PLUS_FULL_XML");
      tt->enum_def.fields[1].val = REPORT_PLUS_FULL_XML;
      tt->enum_def.fields[2].name = tdrpStrDup("XML_ONLY");
      tt->enum_def.fields[2].val = XML_ONLY;
    tt->single_val.e = REPORT_PLUS_FULL_XML;
    tt++;
    
    // Parameter 'altitude_conversions'
    // ctype is '_unit_conversion_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("altitude_conversions");
    tt->descr = tdrpStrDup("The altitude fields are first multiplied by the scale and then the result is added to the bias");
    tt->help = tdrpStrDup("This is used for altitude, ice/turb/cloud top1/base1/top2/base2");
    tt->val_offset = (char *) &altitude_conversions - &_start_;
    tt->struct_def.name = tdrpStrDup("unit_conversion_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &altitude_conversions.scale - (char *) &altitude_conversions;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &altitude_conversions.bias - (char *) &altitude_conversions;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 100;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // Parameter 'temperature_conversion'
    // ctype is '_unit_conversion_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("temperature_conversion");
    tt->descr = tdrpStrDup("The temperature field is first multiplied by the scale and the result is added to the bias");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &temperature_conversion - &_start_;
    tt->struct_def.name = tdrpStrDup("unit_conversion_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &temperature_conversion.scale - (char *) &temperature_conversion;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &temperature_conversion.bias - (char *) &temperature_conversion;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 1;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // Parameter 'wind_speed_conversion'
    // ctype is '_unit_conversion_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_speed_conversion");
    tt->descr = tdrpStrDup("The wind speed field is first multiplied by the scale and the result is added to the bias");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_speed_conversion - &_start_;
    tt->struct_def.name = tdrpStrDup("unit_conversion_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &wind_speed_conversion.scale - (char *) &wind_speed_conversion;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &wind_speed_conversion.bias - (char *) &wind_speed_conversion;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 1;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // Parameter 'wind_gust_conversion'
    // ctype is '_unit_conversion_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_gust_conversion");
    tt->descr = tdrpStrDup("The wind gust field is first multiplied by the scale and the result is added to the bias");
    tt->help = tdrpStrDup("Default is knots to m/s");
    tt->val_offset = (char *) &wind_gust_conversion - &_start_;
    tt->struct_def.name = tdrpStrDup("unit_conversion_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &wind_gust_conversion.scale - (char *) &wind_gust_conversion;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &wind_gust_conversion.bias - (char *) &wind_gust_conversion;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 0.514444;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // Parameter 'visibility_conversion'
    // ctype is '_unit_conversion_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("visibility_conversion");
    tt->descr = tdrpStrDup("The visibility field is first multiplied by the scale and the result is added to the bias");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &visibility_conversion - &_start_;
    tt->struct_def.name = tdrpStrDup("unit_conversion_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &visibility_conversion.scale - (char *) &visibility_conversion;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &visibility_conversion.bias - (char *) &visibility_conversion;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 1;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // Parameter 'cloud_coverage_conversion'
    // ctype is '_unit_conversion_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("cloud_coverage_conversion");
    tt->descr = tdrpStrDup("The cloud coverage field is first multiplied by the scale and the result is added to the bias");
    tt->help = tdrpStrDup("Default scale is feet to km");
    tt->val_offset = (char *) &cloud_coverage_conversion - &_start_;
    tt->struct_def.name = tdrpStrDup("unit_conversion_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &cloud_coverage_conversion.scale - (char *) &cloud_coverage_conversion;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &cloud_coverage_conversion.bias - (char *) &cloud_coverage_conversion;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 0.0003048;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // Parameter 'precip_conversion'
    // ctype is '_unit_conversion_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("precip_conversion");
    tt->descr = tdrpStrDup("The precipitation field is first multiplied by the scale and the result is added to the bias");
    tt->help = tdrpStrDup("Default scale is inches to mm");
    tt->val_offset = (char *) &precip_conversion - &_start_;
    tt->struct_def.name = tdrpStrDup("unit_conversion_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &precip_conversion.scale - (char *) &precip_conversion;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &precip_conversion.bias - (char *) &precip_conversion;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 25.4;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // Parameter 'pressure_conversion'
    // ctype is '_unit_conversion_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("pressure_conversion");
    tt->descr = tdrpStrDup("The pressure field is first multiplied by the scale and the result is added to the bias");
    tt->help = tdrpStrDup("Default scale is 1/10 hPa to mbar");
    tt->val_offset = (char *) &pressure_conversion - &_start_;
    tt->struct_def.name = tdrpStrDup("unit_conversion_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &pressure_conversion.scale - (char *) &pressure_conversion;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &pressure_conversion.bias - (char *) &pressure_conversion;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 0.1;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // Parameter 'pressure_sea_conversion'
    // ctype is '_unit_conversion_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("pressure_sea_conversion");
    tt->descr = tdrpStrDup("The pressure field is first multiplied by the scale and the result is added to the bias");
    tt->help = tdrpStrDup("Default scale is hPa to mbar");
    tt->val_offset = (char *) &pressure_sea_conversion - &_start_;
    tt->struct_def.name = tdrpStrDup("unit_conversion_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("scale");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &pressure_sea_conversion.scale - (char *) &pressure_sea_conversion;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("bias");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &pressure_sea_conversion.bias - (char *) &pressure_sea_conversion;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = 1;
      tt->struct_vals[1].f = 0;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
