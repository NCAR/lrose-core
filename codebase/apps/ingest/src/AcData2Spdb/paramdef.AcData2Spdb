/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/*********************************************************
 * parameter definitions for AcData2Spdb
 *
 * Mike Dixon, RAP, NCXAR, Boulder, CO, USA, 80307-3000
 *
 * Nov 2011
 */

commentdef {
  p_header = "AcData2Spdb reads aircraft data from an ASCII string and stores it in Spdb";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

typedef enum {
  REALTIME, ARCHIVE, FILELIST, SERIAL, TCP, SIM
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = "\tREALTIME: files are read and processed as they arrive in the input_dir. \n\tARCHIVE: files between the start and end times are read in and processed. \n\tFILELIST: files listed on the command line are read in and processed. \n\tSERIAL: the aircraft data is read in from the serial connection. \n\tTCP: reads data from a TCP server. \n\tSIM: aircraft data is generated for simulation putposes.";
} mode;

commentdef {
  p_header = "FILE-BASED MODES";
  p_test = "For REALTIME, ARCHIVE and FILELIST modes";
}

paramdef string {
  p_default = "./raw/acdata";
  p_descr = "Input directory";
  p_help = "Directory where input data files can be found.";
} input_dir;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Set to true if there is a latest_data_info file available in the input directory.";
  p_help = "REALTIME mode only.";
} latest_data_info_avail;

paramdef int {
  p_default = 3600;
  p_min = 1;
  p_descr = "Max valid age of rdata input files in realtime mode (secs)";
  p_help = "This the max valid age for an incoming file. The program will wait for a data file more recent than this age.";
} max_realtime_valid_age;

paramdef boolean {
  p_default = FALSE;
  p_descr = "When set, only checks input_dir for subdirs of the form YYYYMMDD";
  p_help = "Only in REALTIME mode with latest_data_info_avail FALSE.";
} strict_dir_scan;

paramdef string {
  p_default = "";
  p_descr = "Input filename match sub-string";
  p_help = "If not empty, file names must contain this string to be processed";
} file_name_substr;

commentdef {
  p_header = "SERIAL TTY MODE";
}

paramdef string {
  p_default = "/dev/ttyS1";
  p_descr = "Name of input serial port device.";
  p_help = "Normally /dev/ttyS0 (COM1) or /dev/ttyS1 (COM2). Check that you set the permissions on the serial device to rw-rw-rw-, (666), so that we have read-write permissions for the port.";
} input_device;

typedef enum {
  BAUD_300,
  BAUD_1200,
  BAUD_2400,
  BAUD_4800,
  BAUD_9600,
  BAUD_19200,
  BAUD_38400
} baud_rate_t;

paramdef enum baud_rate_t
{
  p_default = BAUD_9600;
  p_descr = "Baud rate";
  p_help = "Baud rate for incoming serial data port";
} baud_rate;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag for 7-bit data";
  p_help = "Set TRUE for 7-bit data, FALSE for 8-bit data.";
} data_is_7_bit;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag for two stop bits";
  p_help = "If TRUE, 2 stop bits. If FALSE, 1 stop bit.";
} two_stop_bits;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag for enabling parity checking.";
  p_help = "If TRUE, parity generation is enabled for outgoing characters, and checking enabled for incoming characters. If FALSE, parity generation and checking is off.";
} enable_parity;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag for parity type.";
  p_help = "If TRUE, odd parity. If FALSE, even parity. Only applies if enableParity is TRUE.";
} odd_parity;

commentdef {
  p_header = "TCP MODE";
}

paramdef string {
  p_default = "192.168.1.1";
  p_descr = "Name of TCP server host.";
  p_help = "For connection TCP. The name of the host for the TCP server.";
} tcp_server_host_name;

paramdef int {
  p_default = 2003;
  p_descr = "TCP server port number.";
  p_help = "For connection TCP. The number of the port for the TCP server.";
} tcp_server_port;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to send TCP handshake sequence to the server to trigger the data flow.";
  p_help = "If true, a sequence of bytes will be sent to the server to trigger the data flow. See 'tcp_handshape_bytes'.";
} send_tcp_handshake;

paramdef int {
  p_default = { 13, 10 };
  p_descr = "List of bytes to be sent to server for handshaking.";
  p_help = "This array of decimal integers is interpreted as a sequence of individual bytes which are to be sent to the server to trigger the data flow.";
} tcp_handshake_bytes[];

commentdef {
  p_header = "SIMULATION MODE";
}

typedef struct {
  string callsign;
  double start_lat;
  double start_lon;
  double altitude;
  double speed;
  boolean right_burn;
  boolean left_burn;
  double ejectable_interval;
  int burn_in_place_interval;
  int n_bip_at_a_time;
} sim_aircraft_t;

paramdef struct sim_aircraft_t {

  p_default =
  {
    { "JRA", -27.43, 28.87, 9500, 150, TRUE, TRUE, -1, -1, 0},
    { "JRB", -28.57, 28.86, 10500, 250, FALSE, FALSE, 10, -1, 0},
    { "CAN", -28.19, 27.76, 11500, 150, FALSE, FALSE, -1, 60, 2}
  };

  p_descr = "Details of aircraft for SIM mode.";
  
  p_help = "The test aircraft have a starting location, speed (knots) and altitude (ft). They wander randomly around. If they go further that 100 km from their starting location they are brought back to the start. right_burn and left_burn indicate whether the burners should be on or off. ejectable_interval indicates the time beteen ejectable flares - set to -1 for no ejectables. burn_in_place_interval indicates the time between starting burn_in_place flares - set to -1 for no burn_in_place flares. n_bip_at_a_time indictes the number of burn_in_place flares to start at a time.";

} sim_aircraft[];

commentdef {
  p_header = "INPUT FORMAT";
  p_text = "The original system used a fixed-length preformatted string. The newer system uses a comma-delimited string. The program automatically determines which type of input string is being used.";
}

typedef enum {
  AUTOMATIC_FORMAT,
  COMMA_DELIMITED_FORMAT,
  LONG_FIXED_STRING_FORMAT,
  WMI_LONG_STRING_FORMAT,
  WMI_STRING_FORMAT,
  SEA_M300_FORMAT,
  CSV_GPS_FORMAT,
  POLCAST2_FORMAT,
  NOAA_AIRCRAFT_FORMAT,
  NOAA_SHIP_FORMAT,
  IWG1_FORMAT
} input_format_t;

paramdef enum input_format_t {
  p_default = AUTOMATIC_FORMAT;
  p_descr = "Data input format";
  p_help =
  "\n"
  "AUTOMATIC_FORMAT\n"
  "----------------\n"
  "  The program automatically determine the data format.\n"
  "  This can only be done if the data is in one of the following "
  "formats:\n"
  "\t\tCOMMA_DELIMITED_FORMAT\n"
  "\t\tLONG_FIXED_STRING_FORMAT\n"
  "\t\tWMI_LONG_STRING_FORMAT\n"
  "\t\tWMI_STRING_FORMAT\n"
  "\n"
  "\n"
  "COMMA_DELIMITED_FORMAT\n"
  "----------------------\n"
  "  The fields in the data are delimited by commas.\n"
  "  The line begins with the following fields:\n"
  "\t\tcall sign\n"
  "\t\tyear\n"
  "\t\tmonth\n"
  "\t\tday\n"
  "\t\thour\n"
  "\t\tminute\n"
  "\t\tsecond\n"
  "\t\tlatitude\n"
  "\t\tlongitude\n"
  "\t\taltitude\n"
  "These fields are followed by the optional fields "
  "specified in the optional_field_names parameter.\n"
  "\n"
  "LONG_FIXED_STRING_FORMAT\n"
  "------------------------\n"
  "  The data is in a white-space delimited format.\n"
  "  The fields appear in the following order:\n"
  "\t\thour\n"
  "\t\tminute\n"
  "\t\tsecond\n"
  "\t\tpressure\n"
  "\t\ttemperature\n"
  "\t\tdew point\n"
  "\t\twind speed\n"
  "\t\twind direction\n"
  "\t\tlongitude\n"
  "\t\tlatitude\n"
  "\t\taltitude\n"
  "\t\tking lwc\n"
  "\t\tfssp conc\n"
  "\t\trosemount volts\n"
  "Since the call sign isn't specified in the data, the first "
  "call sign in the callsigns parameter is used as the call sign "
  "for this data. "
  "If the callsigns parameter is empty, the resulting AC position "
  "record won't have a call sign associated with it.\n"
  "\n"
  "WMI_LONG_STRING_FORMAT\n"
  "----------------------\n"
  "  The data is in the WMI long string format.\n"
  "  In this format, the data is all in a long line with no delimiters "
  "with the following fields:\n"
  "\t\tcall sign\n"
  "\t\tlatitude * 10000\n"
  "\t\tlongitude * 10000\n"
  "\t\ttas\n"
  "\t\tGPS altitude * 100\n"
  "\t\tpressure altitude\n"
  "\t\ttdry * 10\n"
  "\t\tlwjw * 100\n"
  "\t\tdew point * 10\n"
  "\t\tfssp\n"
  "\t\tburn in place\n"
  "\t\tnumber of burn in place\n"
  "\t\tejectable\n"
  "\t\tnumber of ejectable\n"
  "\t\tleft burn\n"
  "\t\tright burn\n"
  "\t\tice hopper\n"
  "\t\tGPS time string\n"
  "\t\tGPS var\n"
  "\t\tGPS error\n"
  "\t\tGPS warn\n"
  "\n"
  "WMI_STRING_FORMAT\n"
  "-----------------\n"
  "  The data is received in the old WMI string format. "
  "  In this format, the data is all in a long line with no delimiters "
  "with the following fields:\n"
  "\t\tcall sign\n"
  "\t\tlatitude\n"
  "\t\tlongitude\n"
  "\t\ttas\n"
  "\t\tGPS altitude\n"
  "\t\tpressure altitude\n"
  "\t\ttdry\n"
  "\t\tlwjw\n"
  "\t\t???\n"
  "\t\tnumber of burn in place\n"
  "\t\tnumber of ejectable\n"
  "\t\tright burn\n"
  "\t\tleft burn\n"
  "\t\t???\n"
  "\t\tburn in place\n"
  "\t\tejectable\n"
  "\t\tGPS hour\n"
  "\t\tGPS minute\n"
  "\t\tGPS second\n"
  "\t\tGPS var\n"
  "\t\tGPS error\n"
  "\t\tairnav warn\n"
  "\n"
  "SEA_M300_FORMAT\n"
  "---------------\n"
  "  This data is in white-space delimited files and contains the \n"
  "  following fields:\n"
  "\t\ttime in hh:mm:ss format\n"
  "\t\tdate in m/dd/yyyy format\n"
  "\t\tlatitude\n"
  "\t\tlongitude\n"
  "\t\taltitude in feet\n"
  "\t\taltitude in meters\n"
  "\t\ttemperature\n"
  "\t\trelative humidity\n"
  "\t\tCN concentration\n"
  "\t\tCCN concentration\n"
  "\t\tCCNSS\n"
  "\t\tCCN flag\n"
  "\t\tPCASP\n"
  "\t\tP1 - P15\n"
  "\t\tSPPRng\n"
  "\t\tSPP\n"
  "\t\tSPPLWC\n"
  "\t\tKPLWC\n"
  "\t\tmean dia\n"
  "\t\tMVD\n"
  "\t\tEffRad\n"
  "\t\tstandard deviation\n"
  "\t\tdisp\n"
  "\t\t2DCshad\n"
  "\t\t2DPshad\n"
  "\t\tS1 - S20\n"
  "\n"
  "POLCAST2_FORMAT\n"
  "---------------\n"
  "  This data is in white-space\n"
  "  delimited files and contains the following fields:\n"
  "\t\ttail number\n"
  "\t\tyear\n"
  "\t\tmonth\n"
  "\t\tday\n"
  "\t\thour\n"
  "\t\tminute\n"
  "\t\tsecond\n"
  "\t\tlatitude (deg)\n"
  "\t\tlongitude (deg)\n"
  "\t\taltitude (m)\n"
  "\t\tground speed (knots)\n"
  "\t\tflare voltage (volts)\n"
  "\n"
  "NOAA_AIRCRAFT_FORMAT\n"
  "--------------------\n"
  "  This data is in comma-delimited files and contains the following fields:\n"
  "\t\ttail number\n"
  "\t\ttime (yyyymmddThhmmss)\n"
  "\t\tlatitude (deg)\n"
  "\t\tlongitude (deg)\n"
  "\t\taltitude (m)\n"
  "  These fields may be followed by optional fields. See below for details.\n"
  "\n"
  "NOAA_SHIP_FORMAT\n"
  "----------------\n"
  "  This data is in comma-delimited files and contains the following fields:\n"
  "\t\tdate (yyyymmdd)\n"
  "\t\ttime (hhmm)\n"
  "\t\tlatitude (deg) - always positive\n"
  "\t\themisphere - 'N' or 'S'\n"
  "\t\tlongitude (deg) - always positive\n"
  "\t\themisphere - 'E' or 'W'\n"
  "\n"
  "IWG1_FORMAT\n"
  "----------------\n"
  "  This data is in comma-delimited files and contains the following fields:\n"
  "  0  Date/Time UTC  ISO-8601 formatted date and time\n"
  "  1  Lat degree_N (dec) -90 to 90 Platform Latitude\n"
  "  2  Lon degree_E (dec) -180 to 179.9999 Platform Longitude\n"
  "  3  GPS_MSL_Alt m  GPS Altitude, Mean Sea Level (MSL)\n"
  "  4  WGS_84_Alt m  WGS 84 Geoid Altitude\n"
  "  5  Press_Alt feet  Pressure Altitude\n"
  "  6  Radar_Alt feet Zero or greater Radar Altimeter Altitude\n"
  "  7  Grnd_Spd m/s  Ground Speed\n"
  "  8  True_Airspeed m/s  True Airspeed\n"
  "  9  Indicated_Airspeed knots  Indicated Airspeed\n"
  " 10  Mach_Number   Aircraft Mach Number\n"
  " 11  Vert_Velocity m/s [3] Aircraft Vertical Velocity\n"
  " 12  True_Hdg degrees_true 0 to 359.9999 True Heading\n"
  " 13  Track degrees_true 0 to 359.9999 Track Angle\n"
  " 14  Drift degrees  Drift Angle\n"
  " 15  Pitch degrees -90 to 90 [1] Pitch\n"
  " 16  Roll degrees -90 to 90 [2] Roll\n"
  " 17  Side_slip degrees  Side Slip Angle\n"
  " 18  Angle_of_Attack degrees -90 to 90 [1] Angle of Attack\n"
  " 19  Ambient_Temp degrees_C  Ambient Temperature\n"
  " 20  Dew_Point degrees_C  Dew Point\n"
  " 21  Total_Temp degrees_C  Total Temperature\n"
  " 22  Static_Press mbar  Static Pressure\n"
  " 23  Dynamic_Press mbar  Dynamic Pressure (total minus static)\n"
  " 24  Cabin_Pressure mbar  Cabin Pressure / Altitude\n"
  " 25  Wind_Speed m/s Zero or greater Wind Speed\n"
  " 26  Wind_Dir degrees_true 0 to 359.9999 Wind Direction\n"
  " 27  Vert_Wind_Spd m/s [3] Vertical Wind Speed\n"
  " 28  Solar_Zenith degrees  Solar Zenith Angle\n"
  " 29  Sun_Elev_AC degrees  Sun Elevation from Aircraft\n"
  " 30  Sun_Az_Grd degrees_true 0 to 359.9999 Sun Azimuth from Ground\n"
  " 31  Sun_Az_AC degrees_true 0 to 359.9999 Sun Azimuth from Aircraft\n"
  "\n"
  "-------------------------------------------------------------\n"
  ".";
} input_format;

commentdef {
  p_header = "OPTIONAL FIELDS";
  p_text = "For some of the formats, optional fields may be available.";
}

typedef enum {
  PRESSURE_HPA,
  GS_KTS,
  TAS_KTS,
  TEMP_C,
  DEW_PT_C,
  RH_PERCENT,
  LW_G_PER_M3,
  ROSEMOUNT_TOTAL_TEMP_C,
  FSSP_CONC_G_PER_M3,
  FLARE_BURN_L_FLAG,
  FLARE_BURN_R_FLAG,
  FLARE_BURN_IN_PLACE_FLAG,
  FLARE_EJECTABLE_FLAG,
  FLARE_N_BURN_IN_PLACE,
  FLARE_N_EJECTABLE,
  ERROR_FLAGS
} field_type_t;

typedef struct {
  field_type_t field_type;
  int field_pos;
} optional_field_t;

paramdef struct optional_field_t {
  p_default = { 
    { GS_KTS, 10 },
    { TAS_KTS, 11 },
    { TEMP_C, 12 },
    { DEW_PT_C, 13 }
  };
  p_descr = "Array of optional fields for COMMA_DELIMITED_FORMAT.";
  p_help = "The field_pos is 0-based, and refers to the position from the start of the line. The comma-delimited format has 10 fixed fields: callsign, year, month, day, hour, min, sec, lat, lon, alt. These are followed by optional fields. This array specifies the optional field list. The starting field_pos for the optional fields is 10.";
} comma_delimited_optional_fields[];

paramdef struct optional_field_t {
  p_default = {
    { GS_KTS, 8 },
    { TAS_KTS, 9 },
    { RH_PERCENT, 64 }
  };
  p_descr = "Array of optional fields for NOAA_AIRCRAFT_FORMAT.";
  p_help = "Used for NOAA_AIRCRAFT_FORMAT only. This format has 5 fixed fields: callsign, yyyymmddThhmmss, lat, lon, alt. These are followed by any optional fields. This array specifies the optional field list. The starting field_pos for the optional fields is 5.";
} noaa_aircraft_optional_fields[];

commentdef {
  p_header = "DATA QUALITY";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Change the latitude sign";
  p_help = "Use if southern latitudes are positive.";
} change_lat_sign;

paramdef int {
  p_default = 240;
  p_descr = "Nominal burn time for burn-in-place flares (secs).";
  p_help = "It is assumed that all burn-in-place flares will burn for this length of time. The program will keep track of how many flares are burning on each aircraft, and store that number in SPDB.";
} burn_in_place_time;

commentdef {
  p_header = "OVERRIDE CALLSIGN";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override the callsign in the data.";
  p_help = "If TRUE, the callsign in the data, if set, will be overridden by the 'callsign' parameter below.";
} override_callsign;

paramdef string {
  p_default = "REVELLE";
  p_descr = "Callsign to be used for override";
  p_help = "See 'override_callsign'";
} callsign;

commentdef {
  p_header = "CHECK CALLSIGNS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to check callsigns.";
  p_help = "If TRUE, only aircraft in the callsigns array are stored. If FALSE, data from all aircraft is stored.";
} check_callsigns;

paramdef string {
  p_default = {"UND"};
  p_descr = "Callsign array";
  p_help = "Array of valid callsigns";
} valid_callsigns[];

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef int {
  p_default = 2;
  p_descr = "Interval at which the data is written to the data base (secs)";
  p_help = "This prevents extremely rapid updates to the data base.";
} output_interval;

paramdef string {
  p_default = "/tmp/spdb/ac_posn";
  p_descr = "Output SPDB URL.";
  p_help = "This is the path to the output data directory. You can use full URL sytnax and optionally put the data to a remote machine.";
} output_url;

paramdef int {
  p_default = 120;
  p_min = 1;
  p_descr = "Valid period (secs)";
  p_help = "Time period over which the aircraft position is considered valid.";
} valid_period;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to output ASCII to separate SPDB data base.";
  p_help = "If TRUE, the incoming data strings will be stored as ASCII in a separate SPDB dir.";
} output_ascii;

paramdef string {
  p_default = "/tmp/spdb/ascii_ac_posn";
  p_descr = "ASCII SPDB URL.";
  p_help = "Use if 'output_ascii' is TRUE.";
} ascii_url;

commentdef {
  p_header = "ECHO DATA LINES";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to echo incoming data string.";
  p_help = "If TRUE, the incoming strings are echoed to stdout.";
} echo;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to add new line to echo output.";
  p_help = "If FALSE, carriage return is used instead of new line.";
} new_line_on_echo;

