/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
 ** Copyright (c) 1995, UCAR
 ** University Corporation for Atmospheric Research(UCAR)
 ** National Center for Atmospheric Research(NCAR)
 ** Research Applications Program(RAP)
 ** P.O.Box 3000, Boulder, Colorado, 80307-3000, USA
 ** All rights reserved. Licenced use only.
 ** Do not copy or distribute without authorization
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

// RCS info
//   $Author: dixon $
//   $Locker:  $
//   $Date: 2016/03/07 01:23:09 $
//   $Id: ihopNcarSfcCdf2Spdb.ccHardCodedLatLonAlt,v 1.2 2016/03/07 01:23:09 dixon Exp $
//   $Revision: 1.2 $
//   $State: Exp $
//
 
/**-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**/
/*********************************************************************
 * ihopNcarSfcCdf2Spdb: ihopNcarSfcCdf2Spdb program object.
 *
 * RAP, NCAR, Boulder CO
 *
 * July 2003
 *
 * Kay Levesque
 *
 *********************************************************************/

#include <iostream>
#include <string>

#include <os_config.h>

//#include <netcdf/netcdfcpp.h>
#include <netcdfcpp.h>
#include <rapformats/station_reports.h>
#include <rapmath/math_macros.h>
#include <Spdb/DsSpdb.hh>
#include <Spdb/Product_defines.hh>
#include <toolsa/file_io.h>
#include <toolsa/pmu.h>
#include <toolsa/procmap.h>
#include <toolsa/str.h>
#include <toolsa/umisc.h>

#include "InputVariable.hh"
#include "MultiplierConverter.hh"
#include "KtoCTempConverter.hh"
#include "ihopNcarSfcCdf2Spdb.hh"
#include "Params.hh"


// Global variables

ihopNcarSfcCdf2Spdb *ihopNcarSfcCdf2Spdb::_instance = (ihopNcarSfcCdf2Spdb *)NULL;


/*********************************************************************
 * Constructor
 */

ihopNcarSfcCdf2Spdb::ihopNcarSfcCdf2Spdb(int argc, char **argv):
  _inputVar_lat(0),
  _inputVar_lon(0),
  _inputVar_alt(0),
  _inputVar_temp(0),
  _inputVar_dew_point(0),
  _inputVar_relhum(0),
  _inputVar_windspd(0),
  _inputVar_winddir(0),
  _inputVar_windgust(0),
  _inputVar_pres(0),
  _inputVar_liquid_accum(0),
  _inputVar_visibility(0)
{
  static const string method_name = "ihopNcarSfcCdf2Spdb::ihopNcarSfcCdf2Spdb()";
  
  // Make sure the singleton wasn't already created.

  assert(_instance == (ihopNcarSfcCdf2Spdb *)NULL);
  
  // Initialize the okay flag.

  okay = true;
  
  // Set the singleton instance pointer

  _instance = this;

  // Set the program name.

  path_parts_t progname_parts;
  
  uparse_path(argv[0], &progname_parts);
  _progName = STRdup(progname_parts.base);
  
  // Display ucopyright message.

  ucopyright(_progName);

  // Get the command line arguments.

  _args = new Args(argc, argv, _progName);
  
  // Get TDRP parameters.

  _params = new Params();
  char *params_path = (char *) "unknown";
  
  if (_params->loadFromArgs(argc, argv,
			    _args->override.list,
			    &params_path))
  {
    cerr << "ERROR: " << method_name << endl;
    cerr << "Problem with TDRP parameters in file: " << params_path << endl;
    
    okay = false;
    
    return;
  }
}


/*********************************************************************
 * Destructor
 */

ihopNcarSfcCdf2Spdb::~ihopNcarSfcCdf2Spdb()
{
  // Unregister process

  PMU_auto_unregister();

  // Free contained objects

  delete _params;
  delete _args;

  delete _inputVar_lat;
  delete _inputVar_lon;
  delete _inputVar_alt;
  delete _inputVar_temp;
  delete _inputVar_dew_point;
  delete _inputVar_relhum;
  delete _inputVar_windspd;
  delete _inputVar_winddir;
  delete _inputVar_windgust;
  delete _inputVar_pres;
  delete _inputVar_liquid_accum;
  delete _inputVar_visibility;

  // Free included strings

  STRfree(_progName);
}


/*********************************************************************
 * Inst() - Retrieve the singleton instance of this class.
 */

ihopNcarSfcCdf2Spdb *ihopNcarSfcCdf2Spdb::Inst(int argc, char **argv)
{
  if (_instance == (ihopNcarSfcCdf2Spdb *)NULL)
    new ihopNcarSfcCdf2Spdb(argc, argv);
  
  return(_instance);
}

ihopNcarSfcCdf2Spdb *ihopNcarSfcCdf2Spdb::Inst()
{
  assert(_instance != (ihopNcarSfcCdf2Spdb *)NULL);
  
  return(_instance);
}


/*********************************************************************
 * init() - Initialize the local data.
 *
 * Returns true if the initialization was successful, false otherwise.
 */

bool ihopNcarSfcCdf2Spdb::init()
{
  static const string method_name = "ihopNcarSfcCdf2Spdb::init()";

  //Because netCDF files may use different variable names, these variable names
  //must be passed in via the _params
  //use ncdump on the netCDF file to see the variable names

  //call _initInputVariable on each one

  if (_params->latitude.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_lat, _params->latitude);

  if (_params->longitude.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_lon, _params->longitude);

  if (_params->altitude.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_alt, _params->altitude);

  if (_params->temperature.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_temp, _params->temperature);

  if (_params->dewpoint.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_dew_point, _params->dewpoint);

  if (_params->relHumidity.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_relhum, _params->relHumidity);

  if (_params->windSpeed.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_windspd, _params->windSpeed);

  if (_params->windDir.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_winddir, _params->windDir);

  if (_params->windGust.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_windgust, _params->windGust);

  if (_params->pressure.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_pres, _params->pressure);

  if (_params->liquidAccum.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_liquid_accum, _params->liquidAccum);

  if (_params->visibility.variable_name[0] != '\0')
    _initInputVariable(&_inputVar_visibility, _params->visibility);

  // initialize process registration

  if (_args->isRealtime())
    PMU_auto_init(_progName, _params->instance,
		  PROCMAP_REGISTER_INTERVAL);

  return true;
}


/*********************************************************************
 * run() - run the program.
 */

void ihopNcarSfcCdf2Spdb::run()
{
  static const string method_name = "ihopNcarSfcCdf2Spdb::run()";
  
  if (_args->isRealtime())
  {
    cerr << "REALTIME mode not yet implemented..." << endl;
  }
  else
  {
    // Process the files specified on the command line

    while (true)
    {
      const string file_name = _args->nextFile();
      
      if (file_name == "")
	break;
      cerr << "About to process: <" << file_name << ">" << endl;
      
      _processData(file_name);
    } /* endwhile - still files to process */
    
  }
  
}


/**********************************************************************
 *              Private Methods
 **********************************************************************/


/*********************************************************************
 * _processData() - Process data in the given file
 *
 * Returns true on success, false on failure.
 */

bool ihopNcarSfcCdf2Spdb::_processData(const string& file_name)
{
  static const string method_name = "ihopNcarSfcCdf2Spdb::_processData()";
  
  if (_params->debug >= Params::DEBUG_NORM)
    cerr << "*** Processing file <" << file_name << ">" << endl;

  //create a netCDF file object

  NcFile netCDFfile(file_name.c_str());

  //check to ensure the file is valid
  
  if (!netCDFfile.is_valid())
    {
      cerr << "*** NcFile object is invalid for file: " << file_name << endl;
      exit(-1);
    }

  //call the InputVariable's init() method, passing the netCDF file name
  //if unsuccessful, let the user know and exit.


  //problem here. Not dropping into if statements.

  if (_inputVar_lat != 0)
    {
      if (!_inputVar_lat->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_lat->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_lon)
    {
      if (!_inputVar_lon->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_lon->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_alt)
    {
      if (!_inputVar_alt->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_alt->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_temp)
    {
      if (!_inputVar_temp->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_temp->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_dew_point)
    {
      if (!_inputVar_dew_point->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_dew_point->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_relhum)
    {
      if (!_inputVar_relhum->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_relhum->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_windspd)
    {
      if (!_inputVar_windspd->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_windspd->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_winddir)
    {
      if (!_inputVar_winddir->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_winddir->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_windgust)
    {
      if (!_inputVar_windgust->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_windgust->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_pres)
    {
      if (!_inputVar_pres->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_pres->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_liquid_accum)
    {
      if (!_inputVar_liquid_accum->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_liquid_accum->getVariableName() << endl;
	  return false;
	}
    }
  if (_inputVar_visibility)
    {
      if (!_inputVar_visibility->init(netCDFfile))
	{
	  cerr << "Error: init() failed on: " 
	       << _inputVar_visibility->getVariableName() << endl;
	  return false;
	}
    }

  // will use the number of time offsets as the number of data readings in the file

  NcVar *offsetVar = netCDFfile.get_var(_params->timeOffset);
  int numRecs = offsetVar->num_vals();

  for (int i = 0; i < numRecs; ++i)
    {
      //create a station_report object and fill it out

      station_report_t netCDF_station;
      netCDF_station.msg_id = STATION_REPORT;

      // add the offset to the base time to determine each reading's time

      netCDF_station.time = (netCDFfile.get_var(_params->observationTime)->as_int(0)) + (netCDFfile.get_var(_params->timeOffset)->as_int(i));
      netCDF_station.accum_start_time = 0;
      netCDF_station.weather_type = 0;

      // this dataset is from one station and so the file only contains 1 lat/lon/alt value

      //      if (_inputVar_lat)
      //netCDF_station.lat = _inputVar_lat->getValue(0);
      //else netCDF_station.lat = STATION_NAN;
      //if (_inputVar_lon)
      //	netCDF_station.lon = _inputVar_lon->getValue(0);
      //else netCDF_station.lon = STATION_NAN;
      //if (_inputVar_alt)
      //	netCDF_station.alt = _inputVar_alt->getValue(0);
      //else netCDF_station.alt = STATION_NAN;

      //needed to hardcode lat/lon/alt as per CODIAC data readme file
      //values in file are incorrect

      netCDF_station.lat = 36.5722;
      netCDF_station.lon = -100.7551;
      netCDF_station.alt = 883.3;

      if (_inputVar_temp)
	netCDF_station.temp = _inputVar_temp->getValue(i);
      else netCDF_station.temp = STATION_NAN;
      if (_inputVar_dew_point)
	netCDF_station.dew_point = _inputVar_dew_point->getValue(i);
      else netCDF_station.dew_point = STATION_NAN;
      if (_inputVar_relhum)
	netCDF_station.relhum = _inputVar_relhum->getValue(i);
      else netCDF_station.relhum = STATION_NAN;
      if (_inputVar_windspd)
	netCDF_station.windspd = _inputVar_windspd->getValue(i);
      else netCDF_station.windspd = STATION_NAN;
      if (_inputVar_winddir)
	netCDF_station.winddir = _inputVar_winddir->getValue(i);
      else netCDF_station.winddir = STATION_NAN;
      if (_inputVar_windgust)
	netCDF_station.windgust = _inputVar_windgust->getValue(i);
      else netCDF_station.windgust = STATION_NAN;
      if (_inputVar_pres)
	netCDF_station.pres = _inputVar_pres->getValue(i);
      else netCDF_station.pres = STATION_NAN;
      if (_inputVar_liquid_accum)
	netCDF_station.liquid_accum = _inputVar_liquid_accum->getValue(i);
      else netCDF_station.liquid_accum = STATION_NAN;
      if (_inputVar_visibility)
	netCDF_station.visibility = _inputVar_visibility->getValue(i);
      else netCDF_station.visibility = STATION_NAN;

      netCDF_station.precip_rate = STATION_NAN;
      netCDF_station.rvr = STATION_NAN;
      netCDF_station.ceiling = STATION_NAN;
      netCDF_station.shared.station.liquid_accum2 = STATION_NAN;
      netCDF_station.shared.station.Spare1 = STATION_NAN;
      netCDF_station.shared.station.Spare2 = STATION_NAN;

      // no station name; set to null

      netCDF_station.station_label[0] = '\0';

      if (_params->debug >= Params::DEBUG_VERBOSE)
	{
	cerr << "Current index (i) is: <" << i << ">" << endl;
	cerr << "Total number of values is: <" << numRecs << ">" << endl << endl;
	print_station_report(stderr, "", &netCDF_station);
	}
      
      //let the user know if the station record cannot be written to the database
      if (!_writeToDatabase(netCDF_station))
      	{
      	  cerr << "ERROR: " << method_name << endl;
      	  cerr << "Error writing station record to database" << endl;
      	  cerr << "*** Skipping record" << endl;
      	  continue;
      	}
    }
  
  return true;
}


/*********************************************************************
 * _writeToDatabase() - Write the given record to the SPDB database.
 *
 * Returns true on success, false on failure.
 */

bool ihopNcarSfcCdf2Spdb::_writeToDatabase(station_report_t& station)
{
  DsSpdb spdb;
  
  time_t valid_time = station.time;
  time_t expire_time = valid_time + _params->spdb_expire_secs;

  //swapping to big-endian
  station_report_to_be(&station);

  spdb.setPutMode(Spdb::putModeAdd);
  
  if (spdb.put(_params->output_spdb_url,
	       SPDB_STATION_REPORT_ID,
	       SPDB_STATION_REPORT_LABEL,
	       Spdb::hash4CharsToInt32(station.station_label),
	       valid_time,
	       expire_time,
	       sizeof(station_report_t),
	       &station) != 0)
    return false;

  //swapping back from big-endian
  station_report_from_be(&station);
  
  return true;
}

/*********************************************************************
 * _initInputVariable() - initialize an input variable from the param file
 *
 * 
 */

void ihopNcarSfcCdf2Spdb::_initInputVariable(InputVariable **inputVar, 
					   const Params::input_variable_t &param_input) const
{
  *inputVar = new InputVariable;

  //set the debug level of the InputVariable object to match the ihopNcarSfcCdf2Spdb one

  (*inputVar)->setDebug(_params->debug >= Params::DEBUG_VERBOSE);

  (*inputVar)->setVariableName(param_input.variable_name);
 
  (*inputVar)->setMissingValueAttName(param_input.missing_value_attr_name);
 
  //need a Converter object to handle any necessary units conversion

  Converter *converter;

  //different Converters convert differently...

  switch (param_input.convert_type)
    {
    case Params::MULTIPLIER:
      converter = new MultiplierConverter(param_input.multiplier_value);
      break;
    case Params::NO_MULTIPLIER:
      converter = new Converter();
      break;
    case Params::KELVIN_TO_C:
      converter = new KtoCTempConverter();
      break;
    }

  (*inputVar)->setConverter(converter);

}

