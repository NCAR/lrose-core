/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program madis2Spdb
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("This is a small ingester for the netCDF formatted MADIS surface station data. Not all the fields are decoded, but the major ones are (precip type is not). The station IDs seem to be up to six characters in length, so a non- standard hashing is used to get the dataType.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'verbose'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("verbose");
    tt->descr = tdrpStrDup("Verbose debug option");
    tt->help = tdrpStrDup("If set, verbose debug messages will be printed appropriately");
    tt->val_offset = (char *) &verbose - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_op_mode'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Program may be run in two modes, archive and realtime. In realtime mode, the conversion is performed for each input file as it becomes available. In archive mode, the file list is obtained from the command line.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("op_mode");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'InDir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("InDir");
    tt->descr = tdrpStrDup("Input directory.");
    tt->help = tdrpStrDup("Directory path for input data files.");
    tt->val_offset = (char *) &InDir - &_start_;
    tt->single_val.s = tdrpStrDup("./");
    tt++;
    
    // Parameter 'latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_avail");
    tt->descr = tdrpStrDup("_latest_data_info file exists in InDir.");
    tt->help = tdrpStrDup("If true, the _latest_data_info file will be monitored for new data. If false, InDir will be scanned for new files.");
    tt->val_offset = (char *) &latest_data_info_avail - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max age of input data");
    tt->help = tdrpStrDup("For realtime only - max age of input data for it to be valid");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'inputDataCompressed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("inputDataCompressed");
    tt->descr = tdrpStrDup("Option to uncompress input data.");
    tt->help = tdrpStrDup("Use this if inpu data are gzipped.");
    tt->val_offset = (char *) &inputDataCompressed - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'fileExtension'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fileExtension");
    tt->descr = tdrpStrDup("Input file extension.");
    tt->help = tdrpStrDup("If string is NULL, all extensions are valid.");
    tt->val_offset = (char *) &fileExtension - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output url, of form spdbp:://host.domain:[port]:dir/dir ");
    tt->help = tdrpStrDup("Data are written here.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::./spdb/surface");
    tt++;
    
    // Parameter 'output_to_provider_subdirs'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_to_provider_subdirs");
    tt->descr = tdrpStrDup("Flag indicating that the output should be divided based on provider.");
    tt->help = tdrpStrDup("If true, the output will be put in subdirectories of the output_url. These subdirectories will be named using the provider name.");
    tt->val_offset = (char *) &output_to_provider_subdirs - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'outputDataCompressed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("outputDataCompressed");
    tt->descr = tdrpStrDup("Option to compress input data when finished with it.");
    tt->help = tdrpStrDup("netCDF data tend to compress well.");
    tt->val_offset = (char *) &outputDataCompressed - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Expiry'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("Expiry");
    tt->descr = tdrpStrDup("How long the data are valid, seconds.");
    tt->help = tdrpStrDup("Depends on input frequency. Given that these data can come in very quickly, having them age off a display system equally quickly can avoid a lot of clutter.");
    tt->val_offset = (char *) &Expiry - &_start_;
    tt->single_val.l = 900;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("ALGORITHM PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'applyLatLonLimits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("applyLatLonLimits");
    tt->descr = tdrpStrDup("Option to apply lat/lon limits.");
    tt->help = tdrpStrDup("May help reduce data volume.");
    tt->val_offset = (char *) &applyLatLonLimits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'latLonLimits'
    // ctype is '_limit_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("latLonLimits");
    tt->descr = tdrpStrDup("Lat/lon limits.");
    tt->help = tdrpStrDup("Relevant only if applyLatLonLimits is TRUE.");
    tt->val_offset = (char *) &latLonLimits - &_start_;
    tt->struct_def.name = tdrpStrDup("limit_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("minLat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &latLonLimits.minLat - (char *) &latLonLimits;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("minLon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &latLonLimits.minLon - (char *) &latLonLimits;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("maxLat");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &latLonLimits.maxLat - (char *) &latLonLimits;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("maxLon");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &latLonLimits.maxLon - (char *) &latLonLimits;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -90;
      tt->struct_vals[1].d = -180;
      tt->struct_vals[2].d = 90;
      tt->struct_vals[3].d = 180;
    tt++;
    
    // Parameter 'applyDataProviderLimits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("applyDataProviderLimits");
    tt->descr = tdrpStrDup("Option to only accept certain data providers.");
    tt->help = tdrpStrDup("May help reduce data volume.");
    tt->val_offset = (char *) &applyDataProviderLimits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'dataProviders'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dataProviders");
    tt->descr = tdrpStrDup("List of data providers to accept. These are printed if the program is run in debug mode, which may be a good way to ascertain what the strings are set to.");
    tt->help = tdrpStrDup("Only relevant if applyDataProviderLimits is TRUE");
    tt->array_offset = (char *) &_dataProviders - &_start_;
    tt->array_n_offset = (char *) &dataProviders_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 11;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("UDFCD");
      tt->array_vals[1].s = tdrpStrDup("LSU-JSU");
      tt->array_vals[2].s = tdrpStrDup("WT-Meso");
      tt->array_vals[3].s = tdrpStrDup("FL-Meso");
      tt->array_vals[4].s = tdrpStrDup("WXforYou");
      tt->array_vals[5].s = tdrpStrDup("APRSWXNET");
      tt->array_vals[6].s = tdrpStrDup("OK-Meso");
      tt->array_vals[7].s = tdrpStrDup("MesoWest");
      tt->array_vals[8].s = tdrpStrDup("IEM");
      tt->array_vals[9].s = tdrpStrDup("RAWS");
      tt->array_vals[10].s = tdrpStrDup("WT-Meso");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("NETCDF FILE DESCRIPTION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'latitude_var'
    // ctype is '_nc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("latitude_var");
    tt->descr = tdrpStrDup("Information about the latitude variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\n");
    tt->val_offset = (char *) &latitude_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_var_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &latitude_var.var_name - (char *) &latitude_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &latitude_var.fill_value_name - (char *) &latitude_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &latitude_var.missing_value_name - (char *) &latitude_var;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("latitude");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'longitude_var'
    // ctype is '_nc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("longitude_var");
    tt->descr = tdrpStrDup("Information about the longitude variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\n");
    tt->val_offset = (char *) &longitude_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_var_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &longitude_var.var_name - (char *) &longitude_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &longitude_var.fill_value_name - (char *) &longitude_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &longitude_var.missing_value_name - (char *) &longitude_var;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("longitude");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'elevation_var'
    // ctype is '_nc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("elevation_var");
    tt->descr = tdrpStrDup("Information about the elevation variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\n");
    tt->val_offset = (char *) &elevation_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_var_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &elevation_var.var_name - (char *) &elevation_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &elevation_var.fill_value_name - (char *) &elevation_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &elevation_var.missing_value_name - (char *) &elevation_var;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("elevation");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'obs_time_var'
    // ctype is '_nc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("obs_time_var");
    tt->descr = tdrpStrDup("Information about the observation time variable in the netCDF file. This variable must be stored as doubles in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\n");
    tt->val_offset = (char *) &obs_time_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_var_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &obs_time_var.var_name - (char *) &obs_time_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &obs_time_var.fill_value_name - (char *) &obs_time_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &obs_time_var.missing_value_name - (char *) &obs_time_var;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("observationTime");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'temperature_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("temperature_var");
    tt->descr = tdrpStrDup("Information about the temperature variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file. The data for this variable is set to missing anywhere the QC variable value is non-zero.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the temperature variable is assumed to be stored in kelvins in the netCDF file.\n");
    tt->val_offset = (char *) &temperature_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &temperature_var.var_name - (char *) &temperature_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &temperature_var.qc_var_name - (char *) &temperature_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &temperature_var.fill_value_name - (char *) &temperature_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &temperature_var.missing_value_name - (char *) &temperature_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("temperature");
      tt->struct_vals[1].s = tdrpStrDup("temperatureQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'dewpoint_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dewpoint_var");
    tt->descr = tdrpStrDup("Information about the dewpoint variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file.\nThe data for this variable is set to missing anywhere the QC variable value is non-zero.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the dewpoint variable is assumed to be stored in kelvins in the netCDF file.\n");
    tt->val_offset = (char *) &dewpoint_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &dewpoint_var.var_name - (char *) &dewpoint_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &dewpoint_var.qc_var_name - (char *) &dewpoint_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &dewpoint_var.fill_value_name - (char *) &dewpoint_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &dewpoint_var.missing_value_name - (char *) &dewpoint_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("dewpoint");
      tt->struct_vals[1].s = tdrpStrDup("dewpointQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'rh_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("rh_var");
    tt->descr = tdrpStrDup("Information about the relative humidity variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file.\nThe data for this variable is set to missing anywhere the QC variable value is non-zero.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the relative humidity variable is assumed to be stored in percent (0-100) in the netCDF file.\n");
    tt->val_offset = (char *) &rh_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &rh_var.var_name - (char *) &rh_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &rh_var.qc_var_name - (char *) &rh_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &rh_var.fill_value_name - (char *) &rh_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &rh_var.missing_value_name - (char *) &rh_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("relHumidity");
      tt->struct_vals[1].s = tdrpStrDup("relHumidityQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'station_pressure_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("station_pressure_var");
    tt->descr = tdrpStrDup("Information about the station pressure variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file.\nThe data for this variable is set to missing anywhere the QC variable value is non-zero.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the station pressure variable is assumed to be stored in pascals in the netCDF file.\n");
    tt->val_offset = (char *) &station_pressure_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &station_pressure_var.var_name - (char *) &station_pressure_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &station_pressure_var.qc_var_name - (char *) &station_pressure_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &station_pressure_var.fill_value_name - (char *) &station_pressure_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &station_pressure_var.missing_value_name - (char *) &station_pressure_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("stationPressure");
      tt->struct_vals[1].s = tdrpStrDup("stationPressureQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'sea_level_pressure_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sea_level_pressure_var");
    tt->descr = tdrpStrDup("Information about the sea level pressure variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file.\n\tfill_value_name - The name of the attribute that gives the The data for this variable is set to missing anywhere the QC variable value is non-zero.\nfill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the sea level pressure variable is assumed to be stored in pascals in the netCDF file.\n");
    tt->val_offset = (char *) &sea_level_pressure_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &sea_level_pressure_var.var_name - (char *) &sea_level_pressure_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &sea_level_pressure_var.qc_var_name - (char *) &sea_level_pressure_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &sea_level_pressure_var.fill_value_name - (char *) &sea_level_pressure_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &sea_level_pressure_var.missing_value_name - (char *) &sea_level_pressure_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("seaLevelPressure");
      tt->struct_vals[1].s = tdrpStrDup("seaLevelPressureQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'altimeter_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("altimeter_var");
    tt->descr = tdrpStrDup("Information about the altimeter variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file.\nThe data for this variable is set to missing anywhere the QC variable value is non-zero.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the altimeter variable is assumed to be stored in pascals in the netCDF file.\n");
    tt->val_offset = (char *) &altimeter_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &altimeter_var.var_name - (char *) &altimeter_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &altimeter_var.qc_var_name - (char *) &altimeter_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &altimeter_var.fill_value_name - (char *) &altimeter_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &altimeter_var.missing_value_name - (char *) &altimeter_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("altimeter");
      tt->struct_vals[1].s = tdrpStrDup("altimeterQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'wind_dir_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_dir_var");
    tt->descr = tdrpStrDup("Information about the wind direction variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file.\nThe data for this variable is set to missing anywhere the QC variable value is non-zero.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the wind direction variable is assumed to be stored in degrees indicating the direction the wind is from  in the netCDF file.\n");
    tt->val_offset = (char *) &wind_dir_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &wind_dir_var.var_name - (char *) &wind_dir_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &wind_dir_var.qc_var_name - (char *) &wind_dir_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &wind_dir_var.fill_value_name - (char *) &wind_dir_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &wind_dir_var.missing_value_name - (char *) &wind_dir_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("windDir");
      tt->struct_vals[1].s = tdrpStrDup("windDirQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'wind_speed_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_speed_var");
    tt->descr = tdrpStrDup("Information about the wind speed variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file.\nThe data for this variable is set to missing anywhere the QC variable value is non-zero.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the wind speed variable is assumed to be stored in m/s in the netCDF file.\n");
    tt->val_offset = (char *) &wind_speed_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &wind_speed_var.var_name - (char *) &wind_speed_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &wind_speed_var.qc_var_name - (char *) &wind_speed_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &wind_speed_var.fill_value_name - (char *) &wind_speed_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &wind_speed_var.missing_value_name - (char *) &wind_speed_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("windSpeed");
      tt->struct_vals[1].s = tdrpStrDup("windSpeedQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'wind_gust_var'
    // ctype is '_nc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_gust_var");
    tt->descr = tdrpStrDup("Information about the wind gust variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the wind gust variable is assumed to be stored in m/s in the netCDF file.\n");
    tt->val_offset = (char *) &wind_gust_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_var_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &wind_gust_var.var_name - (char *) &wind_gust_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &wind_gust_var.fill_value_name - (char *) &wind_gust_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &wind_gust_var.missing_value_name - (char *) &wind_gust_var;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("windGust");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'visibility_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("visibility_var");
    tt->descr = tdrpStrDup("Information about the visibility variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file.\nThe data for this variable is set to missing anywhere the QC variable value is non-zero.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the visibility variable is assumed to be stored in meters in the netCDF file.\n");
    tt->val_offset = (char *) &visibility_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &visibility_var.var_name - (char *) &visibility_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &visibility_var.qc_var_name - (char *) &visibility_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &visibility_var.fill_value_name - (char *) &visibility_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &visibility_var.missing_value_name - (char *) &visibility_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("visibility");
      tt->struct_vals[1].s = tdrpStrDup("visibilityQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'precip_rate_var'
    // ctype is '_nc_qc_var_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("precip_rate_var");
    tt->descr = tdrpStrDup("Information about the precip rate variable in the netCDF file. This variable must be stored as floats in the netCDF file.");
    tt->help = tdrpStrDup("\tvar_name - The variable name exactly as it appears in the netCDF file. Set to an empty string if there is no temperature variable in the netCDF file.\n\tqc_var_name - The associated QC variable name exactly as it appears in the netCDF file.\nThe data for this variable is set to missing anywhere the QC variable value is non-zero.\n\tfill_value_name - The name of the attribute that gives the fill value used for this variable in the netCDF file.\n\tmissing_value_name - The name of the attribute that gives the missing value used for this variable in the netCDF file.\nNote that the precip rate variable is assumed to be stored in m/s in the netCDF file.\n");
    tt->val_offset = (char *) &precip_rate_var - &_start_;
    tt->struct_def.name = tdrpStrDup("nc_qc_var_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("var_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &precip_rate_var.var_name - (char *) &precip_rate_var;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("qc_var_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &precip_rate_var.qc_var_name - (char *) &precip_rate_var;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("fill_value_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &precip_rate_var.fill_value_name - (char *) &precip_rate_var;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("missing_value_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &precip_rate_var.missing_value_name - (char *) &precip_rate_var;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("precipRate");
      tt->struct_vals[1].s = tdrpStrDup("precipRateQCR");
      tt->struct_vals[2].s = tdrpStrDup("_FillValue");
      tt->struct_vals[3].s = tdrpStrDup("missing_value");
    tt++;
    
    // Parameter 'takeFilenameDate'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("takeFilenameDate");
    tt->descr = tdrpStrDup("Option to try to take date (not time) from filename.");
    tt->help = tdrpStrDup("This is needed for some simulations. It is the default,\nbecause it should be the realtime behavior anyway. If\nthis is TRUE then the program will check if the input\nfile is named YYYYMMDD_HHMM, ie. 20100911_0830 - if\nso, the year, month and day from the filename will\nbe used and the hour, minute and second from the\ndata will be used. If this is FALSE, and/or the filename\ndoes not follow naming convention, the data time is used.");
    tt->val_offset = (char *) &takeFilenameDate - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
