/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program file_repeat_day
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Program file_repeat_day");
    tt->comment_text = tdrpStrDup("This program provides a mechanism to simulate the arrival of files which are named by time and in a dated directory. As as example, you can copy the GTS files from an archived day into a simulated realtime directory. The files are placed in a directory for the current day. As an option you can modify date information in the files.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance for procmap.");
    tt->help = tdrpStrDup("This program uses this instance when registering with the process mapper.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'InDir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("InDir");
    tt->descr = tdrpStrDup("Input directory.");
    tt->help = tdrpStrDup("For files of type HHMMSS (see FilenameType below) and/or InputDataFromCompleteMonth is true, if the input files are stored in the relevant date subdirectory of this directory. For other types the input files are stored in this directory.");
    tt->val_offset = (char *) &InDir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'InDay'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("InDay");
    tt->descr = tdrpStrDup("Specified Day");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &InDay - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'InMonth'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("InMonth");
    tt->descr = tdrpStrDup("Specified Month");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &InMonth - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'InYear'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("InYear");
    tt->descr = tdrpStrDup("Specified Year");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &InYear - &_start_;
    tt->single_val.i = 2000;
    tt++;
    
    // Parameter 'RepeatMonth'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("RepeatMonth");
    tt->descr = tdrpStrDup("Input data includes files from a complete month (day 01 to day 31).");
    tt->help = tdrpStrDup("In this case, InDir points to the directory containing the complete month. From the current time, the day of the month is computed. and the simulated data for that day is selected. If the data for that day is not available, the closest available day of the month is used. The data is assumed be be stored as YYYYMMDD/HHMMSS.ext.");
    tt->val_offset = (char *) &RepeatMonth - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'FilenameType'
    // ctype is '_FilenameType_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("FilenameType");
    tt->descr = tdrpStrDup("Naming convention for input files.");
    tt->help = tdrpStrDup("File are named as follows:\n\tHHMMSS: hhmmss.ext\n\tYYYYMMDDHHMM: YYYYMMDDhhmm.ext\n\tYYYYMMDDHHMMSS: <FilePrefix>YYYYMMDDhhmmss.ext\n\tMMDD_HHMM: MMDD_hhmm.ext\n\tXMMDDHH_MM: <FilePrefix>MMDDhh.mm\n\tNNNYYYYMMDDHHMM: nnnYYYYMMDDhhmm.ext\n\tYYYY_MM_DD_HHMM: YYYY-MM-DD_HHMM\n\tXYYYYMMDD_HHMMSS: <FilePrefix>YYYYMMDD_hhmmss.ext\n\tXYYYYMMDD_HHMMSSZ: <FilePrefix>YYYYMMDD_hhmmss...\n\tPRE_YYYYMMDDhhmmss_POST: <FilePrefix>YYYYMMDDhhmmss...\n\tPRE_YYYYMMDDhh_POST: <FilePrefix>YYYYMMDDhh...\n\tPRE_hh_YYYYMMDDhhmmss_POST: <FilePrefix>hh-YYYYMMDDhhmmss...\n\tSDIR_PRE_YYYYMMDDHHMMSS: YYYYMMDD/<FilePrefix>YYYYMMDDHHMMSS.ext\n\tSDIR_PRE_YYYYMMDDhhmmss_POST: YYYYMMDD/<FilePrefix>YYYYMMDDhhmmss...\n\tSDIR_PRE_YYYYMMDD_HHMM_POST: YYYYMMDD/<FilePrefix>YYYYMMDD_hhmm...\n\tRENAME_NO_TIME: <FilePrefix>YYYYMMDDHHMMSS.ext rename to OutFile\n\tMOD_TIME: use input file names, trigger based on modify time\n");
    tt->val_offset = (char *) &FilenameType - &_start_;
    tt->enum_def.name = tdrpStrDup("FilenameType_t");
    tt->enum_def.nfields = 17;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("HHMMSS");
      tt->enum_def.fields[0].val = HHMMSS;
      tt->enum_def.fields[1].name = tdrpStrDup("YYYYMMDDHHMM");
      tt->enum_def.fields[1].val = YYYYMMDDHHMM;
      tt->enum_def.fields[2].name = tdrpStrDup("YYYYMMDDHHMMSS");
      tt->enum_def.fields[2].val = YYYYMMDDHHMMSS;
      tt->enum_def.fields[3].name = tdrpStrDup("MMDD_HHMM");
      tt->enum_def.fields[3].val = MMDD_HHMM;
      tt->enum_def.fields[4].name = tdrpStrDup("XMMDDHH_MM");
      tt->enum_def.fields[4].val = XMMDDHH_MM;
      tt->enum_def.fields[5].name = tdrpStrDup("NNNYYYYMMDDHHMM");
      tt->enum_def.fields[5].val = NNNYYYYMMDDHHMM;
      tt->enum_def.fields[6].name = tdrpStrDup("YYYY_MM_DD_HHMM");
      tt->enum_def.fields[6].val = YYYY_MM_DD_HHMM;
      tt->enum_def.fields[7].name = tdrpStrDup("XYYYYMMDD_HHMMSS");
      tt->enum_def.fields[7].val = XYYYYMMDD_HHMMSS;
      tt->enum_def.fields[8].name = tdrpStrDup("XYYYYMMDD_HHMMSSZ");
      tt->enum_def.fields[8].val = XYYYYMMDD_HHMMSSZ;
      tt->enum_def.fields[9].name = tdrpStrDup("PRE_YYYYMMDDhhmmss_POST");
      tt->enum_def.fields[9].val = PRE_YYYYMMDDhhmmss_POST;
      tt->enum_def.fields[10].name = tdrpStrDup("PRE_YYYYMMDDhh_POST");
      tt->enum_def.fields[10].val = PRE_YYYYMMDDhh_POST;
      tt->enum_def.fields[11].name = tdrpStrDup("PRE_hh_YYYYMMDDhhmmss_POST");
      tt->enum_def.fields[11].val = PRE_hh_YYYYMMDDhhmmss_POST;
      tt->enum_def.fields[12].name = tdrpStrDup("SDIR_PRE_YYYYMMDDHHMMSS");
      tt->enum_def.fields[12].val = SDIR_PRE_YYYYMMDDHHMMSS;
      tt->enum_def.fields[13].name = tdrpStrDup("SDIR_PRE_YYYYMMDDhhmmss_POST");
      tt->enum_def.fields[13].val = SDIR_PRE_YYYYMMDDhhmmss_POST;
      tt->enum_def.fields[14].name = tdrpStrDup("SDIR_PRE_YYYYMMDD_HHMM_POST");
      tt->enum_def.fields[14].val = SDIR_PRE_YYYYMMDD_HHMM_POST;
      tt->enum_def.fields[15].name = tdrpStrDup("RENAME_NO_TIME");
      tt->enum_def.fields[15].val = RENAME_NO_TIME;
      tt->enum_def.fields[16].name = tdrpStrDup("MOD_TIME");
      tt->enum_def.fields[16].val = MOD_TIME;
    tt->single_val.e = HHMMSS;
    tt++;
    
    // Parameter 'FileExtension'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("FileExtension");
    tt->descr = tdrpStrDup("Extension for files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &FileExtension - &_start_;
    tt->single_val.s = tdrpStrDup("gts");
    tt++;
    
    // Parameter 'FilePrefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("FilePrefix");
    tt->descr = tdrpStrDup("Prefix for files");
    tt->help = tdrpStrDup("Only used for the following FilenameTypes:\n\tYYYYMMDDHHMMSS\n\tXMMDDHH_MM\n\tXYYYYMMDD_HHMMSS\n\tXYYYYMMDD_HHMMSSZ\n\tPRE_YYYYMMDDhhmmss_POST\n\tPRE_hh_YYYYMMDDhhmmss_POST\n\tSDIR_PRE_YYYYMMDDHHMMSS\n\tSDIR_PRE_YYYYMMDD_HHMM_POST\n\tSDIR_PRE_YYYYMMDDhhmmss_POST\n\tRENAME_NO_TIME\n");
    tt->val_offset = (char *) &FilePrefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'FilePreservePreExtension'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("FilePreservePreExtension");
    tt->descr = tdrpStrDup("Additional text exists between the date and FileExtension (only valid for FilenameType=YYYY_MM_DD_HHMM). For example YYYY-MM-DD_HHMM.keepthis.ext");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &FilePreservePreExtension - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'FileSuffix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("FileSuffix");
    tt->descr = tdrpStrDup("Suffix for files (only required and valid for FilenameType=XYYYYMMDD_HHMMSSZ). Defines what the Z is, ie for files named 20050624_235802_base.prd set FilePrefix to an empty srting, set FileSuffix to _base and FileExtension to prd");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &FileSuffix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("FILE TYPE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'FileType'
    // ctype is '_FileType_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("FileType");
    tt->descr = tdrpStrDup("Naming convention for input files.");
    tt->help = tdrpStrDup("File types are as follows:\n\tASCII: ASCII files\n\tNETCDF: netCDF files\n");
    tt->val_offset = (char *) &FileType - &_start_;
    tt->enum_def.name = tdrpStrDup("FileType_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ASCII");
      tt->enum_def.fields[0].val = ASCII;
      tt->enum_def.fields[1].name = tdrpStrDup("NETCDF");
      tt->enum_def.fields[1].val = NETCDF;
    tt->single_val.e = ASCII;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DATA TIMING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'MultipleFilesForOneTime'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("MultipleFilesForOneTime");
    tt->descr = tdrpStrDup("Multiple files exist for one input (data) time, Serve the multiple files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &MultipleFilesForOneTime - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'SleepSecsBetweenFilesForOneDataTime'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("SleepSecsBetweenFilesForOneDataTime");
    tt->descr = tdrpStrDup("Only valid if MultipleFilesForOneTime = TRUE. The number of sleep seconds between the multiple files with the same data-time.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &SleepSecsBetweenFilesForOneDataTime - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'OutDir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("OutDir");
    tt->descr = tdrpStrDup("Output directory.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &OutDir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'OutFile'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("OutFile");
    tt->descr = tdrpStrDup("Output filename, only required and valid for type RENAME_NO_TIME");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &OutFile - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'OverwriteDay'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("OverwriteDay");
    tt->descr = tdrpStrDup("Option to override day/time fields in text files.");
    tt->help = tdrpStrDup("If true, the program will search for strings of the types ddhhmm or hhmmssZ. The day 'dd' will be constrained to be the day of the month on which the input data was received. The day will be overwritten with the current day.");
    tt->val_offset = (char *) &OverwriteDay - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'WriteLData'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("WriteLData");
    tt->descr = tdrpStrDup("Option to write _latest_data_info or not");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &WriteLData - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("NETCDF PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'NetVars'
    // ctype is '_NetVar_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("NetVars");
    tt->descr = tdrpStrDup("Time date representations.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_NetVars - &_start_;
    tt->array_n_offset = (char *) &NetVars_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(NetVar_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("NetVar_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_NetVars->name - (char *) _NetVars;
      tt->struct_def.fields[1].ftype = tdrpStrDup("TimeDateFormat_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("format");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_NetVars->format - (char *) _NetVars;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("TimeDateFormat_t");
        tt->struct_def.fields[1].enum_def.nfields = 13;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("NC_HHmmss");
        tt->struct_def.fields[1].enum_def.fields[0].val = NC_HHmmss;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("NC_HHmm");
        tt->struct_def.fields[1].enum_def.fields[1].val = NC_HHmm;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("NC_HH");
        tt->struct_def.fields[1].enum_def.fields[2].val = NC_HH;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("NC_mm");
        tt->struct_def.fields[1].enum_def.fields[3].val = NC_mm;
        tt->struct_def.fields[1].enum_def.fields[4].name = tdrpStrDup("NC_ss");
        tt->struct_def.fields[1].enum_def.fields[4].val = NC_ss;
        tt->struct_def.fields[1].enum_def.fields[5].name = tdrpStrDup("NC_YYYYMMDD");
        tt->struct_def.fields[1].enum_def.fields[5].val = NC_YYYYMMDD;
        tt->struct_def.fields[1].enum_def.fields[6].name = tdrpStrDup("NC_YYYYMMDDhh");
        tt->struct_def.fields[1].enum_def.fields[6].val = NC_YYYYMMDDhh;
        tt->struct_def.fields[1].enum_def.fields[7].name = tdrpStrDup("NC_YYYYMMDDhhmm");
        tt->struct_def.fields[1].enum_def.fields[7].val = NC_YYYYMMDDhhmm;
        tt->struct_def.fields[1].enum_def.fields[8].name = tdrpStrDup("NC_YYYYMMDDHHmmss");
        tt->struct_def.fields[1].enum_def.fields[8].val = NC_YYYYMMDDHHmmss;
        tt->struct_def.fields[1].enum_def.fields[9].name = tdrpStrDup("NC_YYYY");
        tt->struct_def.fields[1].enum_def.fields[9].val = NC_YYYY;
        tt->struct_def.fields[1].enum_def.fields[10].name = tdrpStrDup("NC_MM");
        tt->struct_def.fields[1].enum_def.fields[10].val = NC_MM;
        tt->struct_def.fields[1].enum_def.fields[11].name = tdrpStrDup("NC_DD");
        tt->struct_def.fields[1].enum_def.fields[11].val = NC_DD;
        tt->struct_def.fields[1].enum_def.fields[12].name = tdrpStrDup("NC_UTIME");
        tt->struct_def.fields[1].enum_def.fields[12].val = NC_UTIME;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("datetime");
      tt->struct_vals[1].e = NC_YYYYMMDDHHmmss;
    tt++;
    
    // Parameter 'ncap2Path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ncap2Path");
    tt->descr = tdrpStrDup("Path to NCO utility ncap2 -- Netcdf Arithemtic Processor 2. The purpose of using ncap2 is to change time and date stamps in netCDF files. ncap2 makes it easy ");
    tt->help = tdrpStrDup("See http://nco.sourceforge.net/nco.html for usage and examples. ");
    tt->val_offset = (char *) &ncap2Path - &_start_;
    tt->single_val.s = tdrpStrDup("/usr/local/nco/bin/ncap2");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
