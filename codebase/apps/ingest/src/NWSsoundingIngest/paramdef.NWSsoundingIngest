/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/*********************************************************
 * parameter definitions for NWSsoundingIngest 
 *
 * Niles Oien, RAP, NCAR
 * P.O.Box 3000, Boulder, CO, USA, 80307-3000
 *
 * January 2002
 */


commentdef {
  p_header = "NWSsoundingIngest is a program that reads WMO format\n"
             "upper air sounding data and writes them to an SPDB\n"
             "database. Niles Oien February 2002.";

}


paramdef boolean
{
  p_default = FALSE;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed.";
} debug;

paramdef boolean
{
  p_default = FALSE;
  p_descr = "Debug option";
  p_help = "If set, soundings will be printed before they are saved.";
} printBeforeSave;

paramdef string {
  p_default = "primary";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef enum op_mode {
  p_options = {ARCHIVE, REALTIME};
  p_default = REALTIME;
  p_descr = "Operation mode";
  p_help = "Program may be run in two modes, archive and realtime. In realtime mode, the conversion is performed for each input file as it becomes available. In archive mode, the file list is obtained from the command line.";
} mode;
      
commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "$(RAP_DATA_DIR)/$(PROJECT)/raw/NWSsoundings";
  p_descr = "Input directory - top level. Set to the\n"
            "the directory in which the input files appear."
            "Used in realtime mode only.";
  p_help = "Directory path for input data files.";
} InDir;

paramdef boolean
{
  p_default = TRUE;
  p_descr = "Option to use _latest_data_info file";
  p_help = "Set to TRUE if the input source writes an _latest_data_info\n"
           "file. If set to FALSE the input dir is polled recursively.";
} useLdataInfo;

paramdef string {
  p_default = "";
  p_descr = "Input file extension.";
  p_help = "If string is NULL, all extensions are valid.";
} fileExtension;

paramdef int {
  p_default = 7200;
  p_descr = "Max age of input data";
  p_help = "For realtime only - max age of input data for it to be valid";
} max_realtime_valid_age;

commentdef {
  p_header = "SPECIFY THE BLOCKS TO USE.";
  p_text = "A sounding may comprise a number of blocks: TTAA, TTBB, TTCC, TTDD, PPAA, PPBB, PPCC and PPDD. Generally you only want to use TTAA and TTBB blocks, but the option is there to use the other blocks as well. Data from the various blocks, at the same time, will be merged into a single sounding.";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Use the TTAA block?";
  p_help = "This contains the mandatory levels - 1000, 925, 850,  700, 500, 400, 300, 200, 150, 100 hPa.";
} use_TTAA;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Use the TTBB block?";
  p_help = "This contains the significant levels - i.e. where there is a change in slope in the sounding.";
} use_TTBB;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Use the TTCC block?";
  p_help = "This contains possible mandatory levels above 100 hPa - 70, 50, 30, 20, 10.";
} use_TTCC;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Use the TTDD block?";
  p_help = "This contains possible significant levels above 100 hPa.";
} use_TTDD;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Use the PPAA block?";
  p_help = "PP blocks contain wind data. Generally not used. See TTAA.";
} use_PPAA;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Use the PPBB block?";
  p_help = "PP blocks contain wind data. Generally not used. See TTBB.";
} use_PPBB;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Use the PPCC block?";
  p_help = "PP blocks contain wind data. Generally not used. See TTCC.";
} use_PPCC;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Use the PPDD block?";
  p_help = "PP blocks contain wind data. Generally not used. See TTDD.";
} use_PPDD;

commentdef {
  p_header = "LOCATION INFORMATION.";
  p_text = "The name is optional. If it has a non-zero length it will be used instead of the ID for station identification.";
}

typedef struct {
        int soundingSiteId;
        double lat;
        double lon;
        double alt;
        string name;
} id_t;       


paramdef struct id_t {
  p_default = {
     {61967,	 -7.3,	 72.4,	 3 , "" },
     {61902,	 -7.96667,	 -14.4,	 79 , "" },
     {70273,	 61.15,	 -149.983,	 50 , "" },
     {70398,	 55.0333,	 -131.567,	 37 , "" },
     {70026,	 71.3,	 -156.783,	 12 , "" },
     {70219,	 60.7833,	 -161.8,	 36 , "" },
     {70316,	 55.2,	 -162.717,	 30 , "" },
     {70261,	 64.8167,	 -147.867,	 135 , "" },
     {70326,	 58.6833,	 -156.65,	 15 , "" },
     {70350,	 57.75,	 -152.483,	 4 , "" },
     {70133,	 66.8667,	 -162.633,	 5 , "" },
     {70231,	 62.9667,	 -155.617,	 103 , "" },
     {70200,	 64.5,	 -165.433,	 5 , "" },
     {70308,	 57.15,	 -170.217,	 10 , "" },
     {70414,	 52.7167,	 -174.1,	 31 , "" },
     {70361,	 59.5167,	 -139.667,	 12 , "" },
     {72659,	 45.45,	 -98.4167,	 397 , "" },
     {72518,	 42.75,	 -73.8,	 86 , "" },
     {72365,	 35.0333,	 -106.617,	 1615 , "" },
     {72634,	 44.9167,	 -84.7167,	 1465 , "" },
     {72363,	 35.2333,	 -101.7,	 1094 , "" },
     {72215,	 33.3667,	 -84.5667,	 246 , "" },
     {72230,	 33.1667,	 -86.7667,	 178 , "" },
     {72764,	 46.7667,	 -100.75,	 505 , "" },
     {72681,	 43.5667,	 -116.217,	 871 , "" },
     {72250,	 25.9,	 -97.4333,	 7 , "" },
     {72528,	 42.9333,	 -78.7333,	 218 , "" },
     {72712,	 46.8667,	 -68.0167,	 191 , "" },
     {72208,	 32.9,	 -80.0333,	 15 , "" },
     {72426,	 39.4167,	 -83.8167,	 323 , "" },
     {72251,	 27.7667,	 -97.5,	 14 , "" },
     {72261,	 29.3667,	 -100.917,	 314 , "" },
     {72469,	 39.7667,	 -104.867,	 1611 , "" },
     {72387,	 36.6167,	 -116.017,	 1007 , "" },
     {72632,	 42.7,	 -83.4667,	 329 , "" },
     {72451,	 37.7667,	 -99.9667,	 790 , "" },
     {72381,	 34.9,	 -117.917,	 724 , "" },
     {72221,	 30.4833,	 -86.5167,	 20 , "" },
     {72582,	 40.8667,	 -115.733,	 1607 , "" },
     {72364,	 31.8667,	 -106.7,	 1257 , "" },
     {72376,	 35.2333,	 -111.817,	 2180 , "" },
     {72257,	 31.1,	 -97.3333,	 270 , "" },
     {72273,	 31.5667,	 -110.35,	 1439 , "" },
     {72249,	 32.1333,	 -97.05,	 198 , "" },
     {72768,	 48.2167,	 -106.617,	 696 , "" },
     {72476,	 39.1167,	 -108.533,	 1475 , "" },
     {72776,	 47.45,	 -111.383,	 1132 , "" },
     {72645,	 44.4833,	 -88.1333,	 214 , "" },
     {72317,	 36.0833,	 -79.95,	 277 , "" },
     {72747,	 48.5667,	 -93.3833,	 361 , "" },
     {72235,	 32.3167,	 -90.0833,	 91 , "" },
     {72206,	 30.4833,	 -81.7,	 11 , "" },
     {72201,	 24.55,	 -81.75,	 2 , "" },
     {72240,	 30.1167,	 -93.2167,	 5 , "" },
     {72340,	 34.8333,	 -92.2667,	 172 , "" },
     {72597,	 42.3833,	 -122.883,	 397 , "" },
     {72202,	 24.75,	 -80.3833,	 5 , "" },
     {72265,	 31.95,	 -102.183,	 873 , "" },
     {72649,	 44.85,	 -93.9,	 288 , "" },
     {72305,	 34.7833,	 -76.8833,	 11 , "" },
     {72327,	 36.25,	 -86.5667,	 180 , "" },
     {72233,	 30.3333,	 -89.8333,	 10 , "" },
     {72501,	 40.8667,	 -72.8667,	 20 , "" },
     {72357,	 35.2333,	 -97.45,	 357 , "" },
     {72562,	 41.1333,	 -100.683,	 847 , "" },
     {72493,	 37.75,	 -122.217,	 6 , "" },
     {72558,	 41.3167,	 -96.3667,	 350 , "" },
     {72520,	 40.5333,	 -80.2333,	 360 , "" },
     {72391,	 34.1167,	 -119.117,	 14 , "" },
     {72797,	 47.7833,	 -124.55,	 56 , "" },
     {72662,	 44.05,	 -103.067,	 966 , "" },
     {72489,	 39.5667,	 -119.8,	 1516 , "" },
     {72672,	 43.0667,	 -108.483,	 1700 , "" },
     {72318,	 37.2,	 -80.4167,	 648 , "" },
     {72694,	 44.9167,	 -123.017,	 61 , "" },
     {72572,	 40.7833,	 -111.95,	 1288 , "" },
     {72293,	 32.8333,	 -117.117,	 134 , "" },
     {72291,	 33.2333,	 -119.467,	 14 , "" },
     {72248,	 32.45,	 -93.8333,	 85 , "" },
     {72785,	 47.6333,	 -117.533,	 720 , "" },
     {72440,	 37.2333,	 -93.4,	 390 , "" },
     {72214,	 30.3833,	 -84.35,	 18 , "" },
     {72210,	 27.7,	 -82.4,	 13 , "" },
     {72456,	 39.0667,	 -95.6333,	 270 , "" },
     {72274,	 32.1167,	 -110.933,	 787 , "" },
     {72393,	 34.7333,	 -120.55,	 100 , "" },
     {72402,	 37.9333,	 -75.4833,	 13 , "" },
     {72403,	 38.9833,	 -77.4667,	 85 , "" },
     {74002,	 39.4667,	 -76.0667,	 5 , "" },
     {74794,	 28.4833,	 -80.55,	 5 , "" },
     {74560,	 40.15,	 -89.3333,	 178 , "" },
     {74494,	 41.6667,	 -69.9667,	 16 , "" },
     {74003,	 40.0167,	 -112.533,	 1325 , "" },
     {74389,	 43.9,	 -70.25,	 125 , "" },
     {74455,	 41.6167,	 -90.5833,	 229 , "" },
     {74001,	 34.6,	 -86.6333,	 175 , "" },
     {74606,	 34.65,	 -120.567,	 112 , "" },
     {74690,	 32.2167,	 -106.217,	 1224 , "" },
     {74004,	 32.55,	 -113.483,	 145 , "" },
     {78367,	 19.9,	 -75.2167,	 56 , "" },
     {78806,	 8.98333,	 -79.55,	 69 , "" },
     {78526,	 18.4333,	 -66,	 3 , "" },
     {91334,	 7.45,	 151.833,	 3 , "" },
     {91212,	 13.4833,	 144.8,	 78 , "" },
     {91285,	 19.7167,	 -155.067,	 10 , "" },
     {91408,	 7.33333,	 134.483,	 30 , "" },
     {91366,	 8.73333,	 167.733,	 8 , "" },
     {91165,	 21.9833,	 -159.35,	 32 , "" },
     {91376,	 7.08333,	 171.383,	 3 , "" },
     {91765,	 -14.3333,	 -170.717,	 5 , "" },
     {91348,	 6.96667,	 158.217,	 39 , "" },
     {91245,	 19.2833,	 166.65,	 5 , "" },
     {91413,	 9.48333,	 138.083,	 14 , "" }
  };

  p_descr = "Given an input sounding ID, this table\n"
	"is used to locate the station in lat, lon and alt.\n";
  p_help = "See http://www.met.fsu.edu/Classes/Common/00zua.gif and\n"
	"http://www.ofcm.gov/fmh3/text/append-c.html and\n"
        "http://tgsv5.nws.noaa.gov/er/bgm/upper_air.html";	
} siteLocations[];  

paramdef boolean
{
  p_default = FALSE;
  p_descr = "Option to write data for stations whos ID number\n"
	"does not appear in the siteLocations table above.\n"
	"Default is to simply skip these stations; setting this option\n"
	"causes them to be written out with silly lat,lon and alt\n"
	"values.";
  p_help = "Used primarily for debugging.";
} processIfNotLocated;

commentdef {
  p_header = "DATA OUTPUT.";
}

paramdef string {
  p_default = "spdbp:://localhost::$(PROJECT)/spdb/NWSsoundings";
  p_descr = "URL for output SPDB data.";
} OutUrl;

paramdef int {
  p_default = 1800;
  p_descr = "How long data are valid, seconds.";
} expiry;

paramdef double {
  p_default = 100.0;
  p_min = 0.5;
  p_max = 500.0;
  p_descr = "Maximum vertical distance between sounding points for them to be\n"
            "considered distinct points, meters.";
  p_help = "The WMO input encoding scheme is such that different parts of the\n"
           "sounding are in different input messages. The merging of these\n"
           "messages into one coherrent sounding requires that a decision\n"
           "be made as to if two points in two different messages are\n"
           "at the same height.\n\n"
           "If the heights differ by less than soundingMergeEpsilon\n"
           "vertical meters, then they are taken to be at the same\n"
           "height and merged. If not, they are taken to be at different\n"
           "heights and interleaved.\n\nValues of less than 0.5 for\n"
           "epsilon are problematic and are not allowed (points are\n"
           "(never merged if epsilon is 0.0, even if they are identical).";

} soundingMergeEpsilon;

paramdef boolean
{
  p_default = TRUE;
  p_descr = "Interpolation option.";
  p_help = "If set, vertical interpolation is done through the profile.\n"
           "This fills in missing points. The only reason not to to this is\n"
           "when debugging.";
} doInterp;

paramdef double
{
  p_default = 500.0;
  p_descr = "Maximum vertical interpolation distance, meters.";
  p_help = "Missing values are only filled in with interpolation\n"
           "if the vertical distance to the next valid point is\n"
           "less than or equal to this distance.";
} maxInterpDist;


typedef struct {
	boolean limitWindSpeed;
	double maxWindSpeed;
	boolean acceptDirection;
} limit_t;

paramdef struct limit_t {
  p_default = {FALSE, 500.0, TRUE};
  p_descr = "Option to set an upper limit on the wind speed.";
  p_help = "Applies to all levels. Units are m/s. If acceptDirection is\n"
	"FALSE, winds above the threshold are set to missing, otherwise\n"
	"the wind speed is truncated to the maximum value and the\n"
	"direction is retained.";
} limit;

