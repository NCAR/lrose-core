/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program NWSsoundingIngest
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("NWSsoundingIngest is a program that reads WMO format\nupper air sounding data and writes them to an SPDB\ndatabase. Niles Oien February 2002.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'printBeforeSave'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("printBeforeSave");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, soundings will be printed before they are saved.");
    tt->val_offset = (char *) &printBeforeSave - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("primary");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_op_mode'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Program may be run in two modes, archive and realtime. In realtime mode, the conversion is performed for each input file as it becomes available. In archive mode, the file list is obtained from the command line.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("op_mode");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DATA INPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'InDir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("InDir");
    tt->descr = tdrpStrDup("Input directory - top level. Set to the\nthe directory in which the input files appear.Used in realtime mode only.");
    tt->help = tdrpStrDup("Directory path for input data files.");
    tt->val_offset = (char *) &InDir - &_start_;
    tt->single_val.s = tdrpStrDup("$(RAP_DATA_DIR)/$(PROJECT)/raw/NWSsoundings");
    tt++;
    
    // Parameter 'useLdataInfo'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("useLdataInfo");
    tt->descr = tdrpStrDup("Option to use _latest_data_info file");
    tt->help = tdrpStrDup("Set to TRUE if the input source writes an _latest_data_info\nfile. If set to FALSE the input dir is polled recursively.");
    tt->val_offset = (char *) &useLdataInfo - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'fileExtension'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fileExtension");
    tt->descr = tdrpStrDup("Input file extension.");
    tt->help = tdrpStrDup("If string is NULL, all extensions are valid.");
    tt->val_offset = (char *) &fileExtension - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max age of input data");
    tt->help = tdrpStrDup("For realtime only - max age of input data for it to be valid");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("SPECIFY THE BLOCKS TO USE.");
    tt->comment_text = tdrpStrDup("A sounding may comprise a number of blocks: TTAA, TTBB, TTCC, TTDD, PPAA, PPBB, PPCC and PPDD. Generally you only want to use TTAA and TTBB blocks, but the option is there to use the other blocks as well. Data from the various blocks, at the same time, will be merged into a single sounding.");
    tt++;
    
    // Parameter 'use_TTAA'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_TTAA");
    tt->descr = tdrpStrDup("Use the TTAA block?");
    tt->help = tdrpStrDup("This contains the mandatory levels - 1000, 925, 850,  700, 500, 400, 300, 200, 150, 100 hPa.");
    tt->val_offset = (char *) &use_TTAA - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'use_TTBB'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_TTBB");
    tt->descr = tdrpStrDup("Use the TTBB block?");
    tt->help = tdrpStrDup("This contains the significant levels - i.e. where there is a change in slope in the sounding.");
    tt->val_offset = (char *) &use_TTBB - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'use_TTCC'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_TTCC");
    tt->descr = tdrpStrDup("Use the TTCC block?");
    tt->help = tdrpStrDup("This contains possible mandatory levels above 100 hPa - 70, 50, 30, 20, 10.");
    tt->val_offset = (char *) &use_TTCC - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'use_TTDD'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_TTDD");
    tt->descr = tdrpStrDup("Use the TTDD block?");
    tt->help = tdrpStrDup("This contains possible significant levels above 100 hPa.");
    tt->val_offset = (char *) &use_TTDD - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'use_PPAA'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_PPAA");
    tt->descr = tdrpStrDup("Use the PPAA block?");
    tt->help = tdrpStrDup("PP blocks contain wind data. Generally not used. See TTAA.");
    tt->val_offset = (char *) &use_PPAA - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_PPBB'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_PPBB");
    tt->descr = tdrpStrDup("Use the PPBB block?");
    tt->help = tdrpStrDup("PP blocks contain wind data. Generally not used. See TTBB.");
    tt->val_offset = (char *) &use_PPBB - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_PPCC'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_PPCC");
    tt->descr = tdrpStrDup("Use the PPCC block?");
    tt->help = tdrpStrDup("PP blocks contain wind data. Generally not used. See TTCC.");
    tt->val_offset = (char *) &use_PPCC - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_PPDD'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_PPDD");
    tt->descr = tdrpStrDup("Use the PPDD block?");
    tt->help = tdrpStrDup("PP blocks contain wind data. Generally not used. See TTDD.");
    tt->val_offset = (char *) &use_PPDD - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("LOCATION INFORMATION.");
    tt->comment_text = tdrpStrDup("The name is optional. If it has a non-zero length it will be used instead of the ID for station identification.");
    tt++;
    
    // Parameter 'siteLocations'
    // ctype is '_id_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("siteLocations");
    tt->descr = tdrpStrDup("Given an input sounding ID, this table\nis used to locate the station in lat, lon and alt.\n");
    tt->help = tdrpStrDup("See http://www.met.fsu.edu/Classes/Common/00zua.gif and\nhttp://www.ofcm.gov/fmh3/text/append-c.html and\nhttp://tgsv5.nws.noaa.gov/er/bgm/upper_air.html");
    tt->array_offset = (char *) &_siteLocations - &_start_;
    tt->array_n_offset = (char *) &siteLocations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(id_t);
    tt->array_n = 113;
    tt->struct_def.name = tdrpStrDup("id_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("soundingSiteId");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_siteLocations->soundingSiteId - (char *) _siteLocations;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lat");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_siteLocations->lat - (char *) _siteLocations;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("lon");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_siteLocations->lon - (char *) _siteLocations;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("alt");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_siteLocations->alt - (char *) _siteLocations;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_siteLocations->name - (char *) _siteLocations;
    tt->n_struct_vals = 565;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 61967;
      tt->struct_vals[1].d = -7.3;
      tt->struct_vals[2].d = 72.4;
      tt->struct_vals[3].d = 3;
      tt->struct_vals[4].s = tdrpStrDup("");
      tt->struct_vals[5].i = 61902;
      tt->struct_vals[6].d = -7.96667;
      tt->struct_vals[7].d = -14.4;
      tt->struct_vals[8].d = 79;
      tt->struct_vals[9].s = tdrpStrDup("");
      tt->struct_vals[10].i = 70273;
      tt->struct_vals[11].d = 61.15;
      tt->struct_vals[12].d = -149.983;
      tt->struct_vals[13].d = 50;
      tt->struct_vals[14].s = tdrpStrDup("");
      tt->struct_vals[15].i = 70398;
      tt->struct_vals[16].d = 55.0333;
      tt->struct_vals[17].d = -131.567;
      tt->struct_vals[18].d = 37;
      tt->struct_vals[19].s = tdrpStrDup("");
      tt->struct_vals[20].i = 70026;
      tt->struct_vals[21].d = 71.3;
      tt->struct_vals[22].d = -156.783;
      tt->struct_vals[23].d = 12;
      tt->struct_vals[24].s = tdrpStrDup("");
      tt->struct_vals[25].i = 70219;
      tt->struct_vals[26].d = 60.7833;
      tt->struct_vals[27].d = -161.8;
      tt->struct_vals[28].d = 36;
      tt->struct_vals[29].s = tdrpStrDup("");
      tt->struct_vals[30].i = 70316;
      tt->struct_vals[31].d = 55.2;
      tt->struct_vals[32].d = -162.717;
      tt->struct_vals[33].d = 30;
      tt->struct_vals[34].s = tdrpStrDup("");
      tt->struct_vals[35].i = 70261;
      tt->struct_vals[36].d = 64.8167;
      tt->struct_vals[37].d = -147.867;
      tt->struct_vals[38].d = 135;
      tt->struct_vals[39].s = tdrpStrDup("");
      tt->struct_vals[40].i = 70326;
      tt->struct_vals[41].d = 58.6833;
      tt->struct_vals[42].d = -156.65;
      tt->struct_vals[43].d = 15;
      tt->struct_vals[44].s = tdrpStrDup("");
      tt->struct_vals[45].i = 70350;
      tt->struct_vals[46].d = 57.75;
      tt->struct_vals[47].d = -152.483;
      tt->struct_vals[48].d = 4;
      tt->struct_vals[49].s = tdrpStrDup("");
      tt->struct_vals[50].i = 70133;
      tt->struct_vals[51].d = 66.8667;
      tt->struct_vals[52].d = -162.633;
      tt->struct_vals[53].d = 5;
      tt->struct_vals[54].s = tdrpStrDup("");
      tt->struct_vals[55].i = 70231;
      tt->struct_vals[56].d = 62.9667;
      tt->struct_vals[57].d = -155.617;
      tt->struct_vals[58].d = 103;
      tt->struct_vals[59].s = tdrpStrDup("");
      tt->struct_vals[60].i = 70200;
      tt->struct_vals[61].d = 64.5;
      tt->struct_vals[62].d = -165.433;
      tt->struct_vals[63].d = 5;
      tt->struct_vals[64].s = tdrpStrDup("");
      tt->struct_vals[65].i = 70308;
      tt->struct_vals[66].d = 57.15;
      tt->struct_vals[67].d = -170.217;
      tt->struct_vals[68].d = 10;
      tt->struct_vals[69].s = tdrpStrDup("");
      tt->struct_vals[70].i = 70414;
      tt->struct_vals[71].d = 52.7167;
      tt->struct_vals[72].d = -174.1;
      tt->struct_vals[73].d = 31;
      tt->struct_vals[74].s = tdrpStrDup("");
      tt->struct_vals[75].i = 70361;
      tt->struct_vals[76].d = 59.5167;
      tt->struct_vals[77].d = -139.667;
      tt->struct_vals[78].d = 12;
      tt->struct_vals[79].s = tdrpStrDup("");
      tt->struct_vals[80].i = 72659;
      tt->struct_vals[81].d = 45.45;
      tt->struct_vals[82].d = -98.4167;
      tt->struct_vals[83].d = 397;
      tt->struct_vals[84].s = tdrpStrDup("");
      tt->struct_vals[85].i = 72518;
      tt->struct_vals[86].d = 42.75;
      tt->struct_vals[87].d = -73.8;
      tt->struct_vals[88].d = 86;
      tt->struct_vals[89].s = tdrpStrDup("");
      tt->struct_vals[90].i = 72365;
      tt->struct_vals[91].d = 35.0333;
      tt->struct_vals[92].d = -106.617;
      tt->struct_vals[93].d = 1615;
      tt->struct_vals[94].s = tdrpStrDup("");
      tt->struct_vals[95].i = 72634;
      tt->struct_vals[96].d = 44.9167;
      tt->struct_vals[97].d = -84.7167;
      tt->struct_vals[98].d = 1465;
      tt->struct_vals[99].s = tdrpStrDup("");
      tt->struct_vals[100].i = 72363;
      tt->struct_vals[101].d = 35.2333;
      tt->struct_vals[102].d = -101.7;
      tt->struct_vals[103].d = 1094;
      tt->struct_vals[104].s = tdrpStrDup("");
      tt->struct_vals[105].i = 72215;
      tt->struct_vals[106].d = 33.3667;
      tt->struct_vals[107].d = -84.5667;
      tt->struct_vals[108].d = 246;
      tt->struct_vals[109].s = tdrpStrDup("");
      tt->struct_vals[110].i = 72230;
      tt->struct_vals[111].d = 33.1667;
      tt->struct_vals[112].d = -86.7667;
      tt->struct_vals[113].d = 178;
      tt->struct_vals[114].s = tdrpStrDup("");
      tt->struct_vals[115].i = 72764;
      tt->struct_vals[116].d = 46.7667;
      tt->struct_vals[117].d = -100.75;
      tt->struct_vals[118].d = 505;
      tt->struct_vals[119].s = tdrpStrDup("");
      tt->struct_vals[120].i = 72681;
      tt->struct_vals[121].d = 43.5667;
      tt->struct_vals[122].d = -116.217;
      tt->struct_vals[123].d = 871;
      tt->struct_vals[124].s = tdrpStrDup("");
      tt->struct_vals[125].i = 72250;
      tt->struct_vals[126].d = 25.9;
      tt->struct_vals[127].d = -97.4333;
      tt->struct_vals[128].d = 7;
      tt->struct_vals[129].s = tdrpStrDup("");
      tt->struct_vals[130].i = 72528;
      tt->struct_vals[131].d = 42.9333;
      tt->struct_vals[132].d = -78.7333;
      tt->struct_vals[133].d = 218;
      tt->struct_vals[134].s = tdrpStrDup("");
      tt->struct_vals[135].i = 72712;
      tt->struct_vals[136].d = 46.8667;
      tt->struct_vals[137].d = -68.0167;
      tt->struct_vals[138].d = 191;
      tt->struct_vals[139].s = tdrpStrDup("");
      tt->struct_vals[140].i = 72208;
      tt->struct_vals[141].d = 32.9;
      tt->struct_vals[142].d = -80.0333;
      tt->struct_vals[143].d = 15;
      tt->struct_vals[144].s = tdrpStrDup("");
      tt->struct_vals[145].i = 72426;
      tt->struct_vals[146].d = 39.4167;
      tt->struct_vals[147].d = -83.8167;
      tt->struct_vals[148].d = 323;
      tt->struct_vals[149].s = tdrpStrDup("");
      tt->struct_vals[150].i = 72251;
      tt->struct_vals[151].d = 27.7667;
      tt->struct_vals[152].d = -97.5;
      tt->struct_vals[153].d = 14;
      tt->struct_vals[154].s = tdrpStrDup("");
      tt->struct_vals[155].i = 72261;
      tt->struct_vals[156].d = 29.3667;
      tt->struct_vals[157].d = -100.917;
      tt->struct_vals[158].d = 314;
      tt->struct_vals[159].s = tdrpStrDup("");
      tt->struct_vals[160].i = 72469;
      tt->struct_vals[161].d = 39.7667;
      tt->struct_vals[162].d = -104.867;
      tt->struct_vals[163].d = 1611;
      tt->struct_vals[164].s = tdrpStrDup("");
      tt->struct_vals[165].i = 72387;
      tt->struct_vals[166].d = 36.6167;
      tt->struct_vals[167].d = -116.017;
      tt->struct_vals[168].d = 1007;
      tt->struct_vals[169].s = tdrpStrDup("");
      tt->struct_vals[170].i = 72632;
      tt->struct_vals[171].d = 42.7;
      tt->struct_vals[172].d = -83.4667;
      tt->struct_vals[173].d = 329;
      tt->struct_vals[174].s = tdrpStrDup("");
      tt->struct_vals[175].i = 72451;
      tt->struct_vals[176].d = 37.7667;
      tt->struct_vals[177].d = -99.9667;
      tt->struct_vals[178].d = 790;
      tt->struct_vals[179].s = tdrpStrDup("");
      tt->struct_vals[180].i = 72381;
      tt->struct_vals[181].d = 34.9;
      tt->struct_vals[182].d = -117.917;
      tt->struct_vals[183].d = 724;
      tt->struct_vals[184].s = tdrpStrDup("");
      tt->struct_vals[185].i = 72221;
      tt->struct_vals[186].d = 30.4833;
      tt->struct_vals[187].d = -86.5167;
      tt->struct_vals[188].d = 20;
      tt->struct_vals[189].s = tdrpStrDup("");
      tt->struct_vals[190].i = 72582;
      tt->struct_vals[191].d = 40.8667;
      tt->struct_vals[192].d = -115.733;
      tt->struct_vals[193].d = 1607;
      tt->struct_vals[194].s = tdrpStrDup("");
      tt->struct_vals[195].i = 72364;
      tt->struct_vals[196].d = 31.8667;
      tt->struct_vals[197].d = -106.7;
      tt->struct_vals[198].d = 1257;
      tt->struct_vals[199].s = tdrpStrDup("");
      tt->struct_vals[200].i = 72376;
      tt->struct_vals[201].d = 35.2333;
      tt->struct_vals[202].d = -111.817;
      tt->struct_vals[203].d = 2180;
      tt->struct_vals[204].s = tdrpStrDup("");
      tt->struct_vals[205].i = 72257;
      tt->struct_vals[206].d = 31.1;
      tt->struct_vals[207].d = -97.3333;
      tt->struct_vals[208].d = 270;
      tt->struct_vals[209].s = tdrpStrDup("");
      tt->struct_vals[210].i = 72273;
      tt->struct_vals[211].d = 31.5667;
      tt->struct_vals[212].d = -110.35;
      tt->struct_vals[213].d = 1439;
      tt->struct_vals[214].s = tdrpStrDup("");
      tt->struct_vals[215].i = 72249;
      tt->struct_vals[216].d = 32.1333;
      tt->struct_vals[217].d = -97.05;
      tt->struct_vals[218].d = 198;
      tt->struct_vals[219].s = tdrpStrDup("");
      tt->struct_vals[220].i = 72768;
      tt->struct_vals[221].d = 48.2167;
      tt->struct_vals[222].d = -106.617;
      tt->struct_vals[223].d = 696;
      tt->struct_vals[224].s = tdrpStrDup("");
      tt->struct_vals[225].i = 72476;
      tt->struct_vals[226].d = 39.1167;
      tt->struct_vals[227].d = -108.533;
      tt->struct_vals[228].d = 1475;
      tt->struct_vals[229].s = tdrpStrDup("");
      tt->struct_vals[230].i = 72776;
      tt->struct_vals[231].d = 47.45;
      tt->struct_vals[232].d = -111.383;
      tt->struct_vals[233].d = 1132;
      tt->struct_vals[234].s = tdrpStrDup("");
      tt->struct_vals[235].i = 72645;
      tt->struct_vals[236].d = 44.4833;
      tt->struct_vals[237].d = -88.1333;
      tt->struct_vals[238].d = 214;
      tt->struct_vals[239].s = tdrpStrDup("");
      tt->struct_vals[240].i = 72317;
      tt->struct_vals[241].d = 36.0833;
      tt->struct_vals[242].d = -79.95;
      tt->struct_vals[243].d = 277;
      tt->struct_vals[244].s = tdrpStrDup("");
      tt->struct_vals[245].i = 72747;
      tt->struct_vals[246].d = 48.5667;
      tt->struct_vals[247].d = -93.3833;
      tt->struct_vals[248].d = 361;
      tt->struct_vals[249].s = tdrpStrDup("");
      tt->struct_vals[250].i = 72235;
      tt->struct_vals[251].d = 32.3167;
      tt->struct_vals[252].d = -90.0833;
      tt->struct_vals[253].d = 91;
      tt->struct_vals[254].s = tdrpStrDup("");
      tt->struct_vals[255].i = 72206;
      tt->struct_vals[256].d = 30.4833;
      tt->struct_vals[257].d = -81.7;
      tt->struct_vals[258].d = 11;
      tt->struct_vals[259].s = tdrpStrDup("");
      tt->struct_vals[260].i = 72201;
      tt->struct_vals[261].d = 24.55;
      tt->struct_vals[262].d = -81.75;
      tt->struct_vals[263].d = 2;
      tt->struct_vals[264].s = tdrpStrDup("");
      tt->struct_vals[265].i = 72240;
      tt->struct_vals[266].d = 30.1167;
      tt->struct_vals[267].d = -93.2167;
      tt->struct_vals[268].d = 5;
      tt->struct_vals[269].s = tdrpStrDup("");
      tt->struct_vals[270].i = 72340;
      tt->struct_vals[271].d = 34.8333;
      tt->struct_vals[272].d = -92.2667;
      tt->struct_vals[273].d = 172;
      tt->struct_vals[274].s = tdrpStrDup("");
      tt->struct_vals[275].i = 72597;
      tt->struct_vals[276].d = 42.3833;
      tt->struct_vals[277].d = -122.883;
      tt->struct_vals[278].d = 397;
      tt->struct_vals[279].s = tdrpStrDup("");
      tt->struct_vals[280].i = 72202;
      tt->struct_vals[281].d = 24.75;
      tt->struct_vals[282].d = -80.3833;
      tt->struct_vals[283].d = 5;
      tt->struct_vals[284].s = tdrpStrDup("");
      tt->struct_vals[285].i = 72265;
      tt->struct_vals[286].d = 31.95;
      tt->struct_vals[287].d = -102.183;
      tt->struct_vals[288].d = 873;
      tt->struct_vals[289].s = tdrpStrDup("");
      tt->struct_vals[290].i = 72649;
      tt->struct_vals[291].d = 44.85;
      tt->struct_vals[292].d = -93.9;
      tt->struct_vals[293].d = 288;
      tt->struct_vals[294].s = tdrpStrDup("");
      tt->struct_vals[295].i = 72305;
      tt->struct_vals[296].d = 34.7833;
      tt->struct_vals[297].d = -76.8833;
      tt->struct_vals[298].d = 11;
      tt->struct_vals[299].s = tdrpStrDup("");
      tt->struct_vals[300].i = 72327;
      tt->struct_vals[301].d = 36.25;
      tt->struct_vals[302].d = -86.5667;
      tt->struct_vals[303].d = 180;
      tt->struct_vals[304].s = tdrpStrDup("");
      tt->struct_vals[305].i = 72233;
      tt->struct_vals[306].d = 30.3333;
      tt->struct_vals[307].d = -89.8333;
      tt->struct_vals[308].d = 10;
      tt->struct_vals[309].s = tdrpStrDup("");
      tt->struct_vals[310].i = 72501;
      tt->struct_vals[311].d = 40.8667;
      tt->struct_vals[312].d = -72.8667;
      tt->struct_vals[313].d = 20;
      tt->struct_vals[314].s = tdrpStrDup("");
      tt->struct_vals[315].i = 72357;
      tt->struct_vals[316].d = 35.2333;
      tt->struct_vals[317].d = -97.45;
      tt->struct_vals[318].d = 357;
      tt->struct_vals[319].s = tdrpStrDup("");
      tt->struct_vals[320].i = 72562;
      tt->struct_vals[321].d = 41.1333;
      tt->struct_vals[322].d = -100.683;
      tt->struct_vals[323].d = 847;
      tt->struct_vals[324].s = tdrpStrDup("");
      tt->struct_vals[325].i = 72493;
      tt->struct_vals[326].d = 37.75;
      tt->struct_vals[327].d = -122.217;
      tt->struct_vals[328].d = 6;
      tt->struct_vals[329].s = tdrpStrDup("");
      tt->struct_vals[330].i = 72558;
      tt->struct_vals[331].d = 41.3167;
      tt->struct_vals[332].d = -96.3667;
      tt->struct_vals[333].d = 350;
      tt->struct_vals[334].s = tdrpStrDup("");
      tt->struct_vals[335].i = 72520;
      tt->struct_vals[336].d = 40.5333;
      tt->struct_vals[337].d = -80.2333;
      tt->struct_vals[338].d = 360;
      tt->struct_vals[339].s = tdrpStrDup("");
      tt->struct_vals[340].i = 72391;
      tt->struct_vals[341].d = 34.1167;
      tt->struct_vals[342].d = -119.117;
      tt->struct_vals[343].d = 14;
      tt->struct_vals[344].s = tdrpStrDup("");
      tt->struct_vals[345].i = 72797;
      tt->struct_vals[346].d = 47.7833;
      tt->struct_vals[347].d = -124.55;
      tt->struct_vals[348].d = 56;
      tt->struct_vals[349].s = tdrpStrDup("");
      tt->struct_vals[350].i = 72662;
      tt->struct_vals[351].d = 44.05;
      tt->struct_vals[352].d = -103.067;
      tt->struct_vals[353].d = 966;
      tt->struct_vals[354].s = tdrpStrDup("");
      tt->struct_vals[355].i = 72489;
      tt->struct_vals[356].d = 39.5667;
      tt->struct_vals[357].d = -119.8;
      tt->struct_vals[358].d = 1516;
      tt->struct_vals[359].s = tdrpStrDup("");
      tt->struct_vals[360].i = 72672;
      tt->struct_vals[361].d = 43.0667;
      tt->struct_vals[362].d = -108.483;
      tt->struct_vals[363].d = 1700;
      tt->struct_vals[364].s = tdrpStrDup("");
      tt->struct_vals[365].i = 72318;
      tt->struct_vals[366].d = 37.2;
      tt->struct_vals[367].d = -80.4167;
      tt->struct_vals[368].d = 648;
      tt->struct_vals[369].s = tdrpStrDup("");
      tt->struct_vals[370].i = 72694;
      tt->struct_vals[371].d = 44.9167;
      tt->struct_vals[372].d = -123.017;
      tt->struct_vals[373].d = 61;
      tt->struct_vals[374].s = tdrpStrDup("");
      tt->struct_vals[375].i = 72572;
      tt->struct_vals[376].d = 40.7833;
      tt->struct_vals[377].d = -111.95;
      tt->struct_vals[378].d = 1288;
      tt->struct_vals[379].s = tdrpStrDup("");
      tt->struct_vals[380].i = 72293;
      tt->struct_vals[381].d = 32.8333;
      tt->struct_vals[382].d = -117.117;
      tt->struct_vals[383].d = 134;
      tt->struct_vals[384].s = tdrpStrDup("");
      tt->struct_vals[385].i = 72291;
      tt->struct_vals[386].d = 33.2333;
      tt->struct_vals[387].d = -119.467;
      tt->struct_vals[388].d = 14;
      tt->struct_vals[389].s = tdrpStrDup("");
      tt->struct_vals[390].i = 72248;
      tt->struct_vals[391].d = 32.45;
      tt->struct_vals[392].d = -93.8333;
      tt->struct_vals[393].d = 85;
      tt->struct_vals[394].s = tdrpStrDup("");
      tt->struct_vals[395].i = 72785;
      tt->struct_vals[396].d = 47.6333;
      tt->struct_vals[397].d = -117.533;
      tt->struct_vals[398].d = 720;
      tt->struct_vals[399].s = tdrpStrDup("");
      tt->struct_vals[400].i = 72440;
      tt->struct_vals[401].d = 37.2333;
      tt->struct_vals[402].d = -93.4;
      tt->struct_vals[403].d = 390;
      tt->struct_vals[404].s = tdrpStrDup("");
      tt->struct_vals[405].i = 72214;
      tt->struct_vals[406].d = 30.3833;
      tt->struct_vals[407].d = -84.35;
      tt->struct_vals[408].d = 18;
      tt->struct_vals[409].s = tdrpStrDup("");
      tt->struct_vals[410].i = 72210;
      tt->struct_vals[411].d = 27.7;
      tt->struct_vals[412].d = -82.4;
      tt->struct_vals[413].d = 13;
      tt->struct_vals[414].s = tdrpStrDup("");
      tt->struct_vals[415].i = 72456;
      tt->struct_vals[416].d = 39.0667;
      tt->struct_vals[417].d = -95.6333;
      tt->struct_vals[418].d = 270;
      tt->struct_vals[419].s = tdrpStrDup("");
      tt->struct_vals[420].i = 72274;
      tt->struct_vals[421].d = 32.1167;
      tt->struct_vals[422].d = -110.933;
      tt->struct_vals[423].d = 787;
      tt->struct_vals[424].s = tdrpStrDup("");
      tt->struct_vals[425].i = 72393;
      tt->struct_vals[426].d = 34.7333;
      tt->struct_vals[427].d = -120.55;
      tt->struct_vals[428].d = 100;
      tt->struct_vals[429].s = tdrpStrDup("");
      tt->struct_vals[430].i = 72402;
      tt->struct_vals[431].d = 37.9333;
      tt->struct_vals[432].d = -75.4833;
      tt->struct_vals[433].d = 13;
      tt->struct_vals[434].s = tdrpStrDup("");
      tt->struct_vals[435].i = 72403;
      tt->struct_vals[436].d = 38.9833;
      tt->struct_vals[437].d = -77.4667;
      tt->struct_vals[438].d = 85;
      tt->struct_vals[439].s = tdrpStrDup("");
      tt->struct_vals[440].i = 74002;
      tt->struct_vals[441].d = 39.4667;
      tt->struct_vals[442].d = -76.0667;
      tt->struct_vals[443].d = 5;
      tt->struct_vals[444].s = tdrpStrDup("");
      tt->struct_vals[445].i = 74794;
      tt->struct_vals[446].d = 28.4833;
      tt->struct_vals[447].d = -80.55;
      tt->struct_vals[448].d = 5;
      tt->struct_vals[449].s = tdrpStrDup("");
      tt->struct_vals[450].i = 74560;
      tt->struct_vals[451].d = 40.15;
      tt->struct_vals[452].d = -89.3333;
      tt->struct_vals[453].d = 178;
      tt->struct_vals[454].s = tdrpStrDup("");
      tt->struct_vals[455].i = 74494;
      tt->struct_vals[456].d = 41.6667;
      tt->struct_vals[457].d = -69.9667;
      tt->struct_vals[458].d = 16;
      tt->struct_vals[459].s = tdrpStrDup("");
      tt->struct_vals[460].i = 74003;
      tt->struct_vals[461].d = 40.0167;
      tt->struct_vals[462].d = -112.533;
      tt->struct_vals[463].d = 1325;
      tt->struct_vals[464].s = tdrpStrDup("");
      tt->struct_vals[465].i = 74389;
      tt->struct_vals[466].d = 43.9;
      tt->struct_vals[467].d = -70.25;
      tt->struct_vals[468].d = 125;
      tt->struct_vals[469].s = tdrpStrDup("");
      tt->struct_vals[470].i = 74455;
      tt->struct_vals[471].d = 41.6167;
      tt->struct_vals[472].d = -90.5833;
      tt->struct_vals[473].d = 229;
      tt->struct_vals[474].s = tdrpStrDup("");
      tt->struct_vals[475].i = 74001;
      tt->struct_vals[476].d = 34.6;
      tt->struct_vals[477].d = -86.6333;
      tt->struct_vals[478].d = 175;
      tt->struct_vals[479].s = tdrpStrDup("");
      tt->struct_vals[480].i = 74606;
      tt->struct_vals[481].d = 34.65;
      tt->struct_vals[482].d = -120.567;
      tt->struct_vals[483].d = 112;
      tt->struct_vals[484].s = tdrpStrDup("");
      tt->struct_vals[485].i = 74690;
      tt->struct_vals[486].d = 32.2167;
      tt->struct_vals[487].d = -106.217;
      tt->struct_vals[488].d = 1224;
      tt->struct_vals[489].s = tdrpStrDup("");
      tt->struct_vals[490].i = 74004;
      tt->struct_vals[491].d = 32.55;
      tt->struct_vals[492].d = -113.483;
      tt->struct_vals[493].d = 145;
      tt->struct_vals[494].s = tdrpStrDup("");
      tt->struct_vals[495].i = 78367;
      tt->struct_vals[496].d = 19.9;
      tt->struct_vals[497].d = -75.2167;
      tt->struct_vals[498].d = 56;
      tt->struct_vals[499].s = tdrpStrDup("");
      tt->struct_vals[500].i = 78806;
      tt->struct_vals[501].d = 8.98333;
      tt->struct_vals[502].d = -79.55;
      tt->struct_vals[503].d = 69;
      tt->struct_vals[504].s = tdrpStrDup("");
      tt->struct_vals[505].i = 78526;
      tt->struct_vals[506].d = 18.4333;
      tt->struct_vals[507].d = -66;
      tt->struct_vals[508].d = 3;
      tt->struct_vals[509].s = tdrpStrDup("");
      tt->struct_vals[510].i = 91334;
      tt->struct_vals[511].d = 7.45;
      tt->struct_vals[512].d = 151.833;
      tt->struct_vals[513].d = 3;
      tt->struct_vals[514].s = tdrpStrDup("");
      tt->struct_vals[515].i = 91212;
      tt->struct_vals[516].d = 13.4833;
      tt->struct_vals[517].d = 144.8;
      tt->struct_vals[518].d = 78;
      tt->struct_vals[519].s = tdrpStrDup("");
      tt->struct_vals[520].i = 91285;
      tt->struct_vals[521].d = 19.7167;
      tt->struct_vals[522].d = -155.067;
      tt->struct_vals[523].d = 10;
      tt->struct_vals[524].s = tdrpStrDup("");
      tt->struct_vals[525].i = 91408;
      tt->struct_vals[526].d = 7.33333;
      tt->struct_vals[527].d = 134.483;
      tt->struct_vals[528].d = 30;
      tt->struct_vals[529].s = tdrpStrDup("");
      tt->struct_vals[530].i = 91366;
      tt->struct_vals[531].d = 8.73333;
      tt->struct_vals[532].d = 167.733;
      tt->struct_vals[533].d = 8;
      tt->struct_vals[534].s = tdrpStrDup("");
      tt->struct_vals[535].i = 91165;
      tt->struct_vals[536].d = 21.9833;
      tt->struct_vals[537].d = -159.35;
      tt->struct_vals[538].d = 32;
      tt->struct_vals[539].s = tdrpStrDup("");
      tt->struct_vals[540].i = 91376;
      tt->struct_vals[541].d = 7.08333;
      tt->struct_vals[542].d = 171.383;
      tt->struct_vals[543].d = 3;
      tt->struct_vals[544].s = tdrpStrDup("");
      tt->struct_vals[545].i = 91765;
      tt->struct_vals[546].d = -14.3333;
      tt->struct_vals[547].d = -170.717;
      tt->struct_vals[548].d = 5;
      tt->struct_vals[549].s = tdrpStrDup("");
      tt->struct_vals[550].i = 91348;
      tt->struct_vals[551].d = 6.96667;
      tt->struct_vals[552].d = 158.217;
      tt->struct_vals[553].d = 39;
      tt->struct_vals[554].s = tdrpStrDup("");
      tt->struct_vals[555].i = 91245;
      tt->struct_vals[556].d = 19.2833;
      tt->struct_vals[557].d = 166.65;
      tt->struct_vals[558].d = 5;
      tt->struct_vals[559].s = tdrpStrDup("");
      tt->struct_vals[560].i = 91413;
      tt->struct_vals[561].d = 9.48333;
      tt->struct_vals[562].d = 138.083;
      tt->struct_vals[563].d = 14;
      tt->struct_vals[564].s = tdrpStrDup("");
    tt++;
    
    // Parameter 'processIfNotLocated'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("processIfNotLocated");
    tt->descr = tdrpStrDup("Option to write data for stations whos ID number\ndoes not appear in the siteLocations table above.\nDefault is to simply skip these stations; setting this option\ncauses them to be written out with silly lat,lon and alt\nvalues.");
    tt->help = tdrpStrDup("Used primarily for debugging.");
    tt->val_offset = (char *) &processIfNotLocated - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'OutUrl'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("OutUrl");
    tt->descr = tdrpStrDup("URL for output SPDB data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &OutUrl - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::$(PROJECT)/spdb/NWSsoundings");
    tt++;
    
    // Parameter 'expiry'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("expiry");
    tt->descr = tdrpStrDup("How long data are valid, seconds.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &expiry - &_start_;
    tt->single_val.i = 1800;
    tt++;
    
    // Parameter 'soundingMergeEpsilon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("soundingMergeEpsilon");
    tt->descr = tdrpStrDup("Maximum vertical distance between sounding points for them to be\nconsidered distinct points, meters.");
    tt->help = tdrpStrDup("The WMO input encoding scheme is such that different parts of the\nsounding are in different input messages. The merging of these\nmessages into one coherrent sounding requires that a decision\nbe made as to if two points in two different messages are\nat the same height.\n\nIf the heights differ by less than soundingMergeEpsilon\nvertical meters, then they are taken to be at the same\nheight and merged. If not, they are taken to be at different\nheights and interleaved.\n\nValues of less than 0.5 for\nepsilon are problematic and are not allowed (points are\n(never merged if epsilon is 0.0, even if they are identical).");
    tt->val_offset = (char *) &soundingMergeEpsilon - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0.5;
    tt->max_val.d = 500;
    tt->single_val.d = 100;
    tt++;
    
    // Parameter 'doInterp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("doInterp");
    tt->descr = tdrpStrDup("Interpolation option.");
    tt->help = tdrpStrDup("If set, vertical interpolation is done through the profile.\nThis fills in missing points. The only reason not to to this is\nwhen debugging.");
    tt->val_offset = (char *) &doInterp - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'maxInterpDist'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxInterpDist");
    tt->descr = tdrpStrDup("Maximum vertical interpolation distance, meters.");
    tt->help = tdrpStrDup("Missing values are only filled in with interpolation\nif the vertical distance to the next valid point is\nless than or equal to this distance.");
    tt->val_offset = (char *) &maxInterpDist - &_start_;
    tt->single_val.d = 500;
    tt++;
    
    // Parameter 'limit'
    // ctype is '_limit_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("limit");
    tt->descr = tdrpStrDup("Option to set an upper limit on the wind speed.");
    tt->help = tdrpStrDup("Applies to all levels. Units are m/s. If acceptDirection is\nFALSE, winds above the threshold are set to missing, otherwise\nthe wind speed is truncated to the maximum value and the\ndirection is retained.");
    tt->val_offset = (char *) &limit - &_start_;
    tt->struct_def.name = tdrpStrDup("limit_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("limitWindSpeed");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &limit.limitWindSpeed - (char *) &limit;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("maxWindSpeed");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &limit.maxWindSpeed - (char *) &limit;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("acceptDirection");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &limit.acceptDirection - (char *) &limit;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].d = 500;
      tt->struct_vals[2].b = pTRUE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
