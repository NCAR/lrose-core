/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program SigAirMet2Spdb
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Program name: SigAirMet2Spdb");
    tt->comment_text = tdrpStrDup("SigAirMet2Spdb reads SIGMET and AIRMET data from text files and stores in SPDB in ASCII and/or decoded format.");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'print_decode_problems_to_stderr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("print_decode_problems_to_stderr");
    tt->descr = tdrpStrDup("Option to print decoding problems to stderr.");
    tt->help = tdrpStrDup("Turn this on if you want to log these problems in detail or if you want to run SigAirMet2Spdb.pl to generate statistics.");
    tt->val_offset = (char *) &print_decode_problems_to_stderr - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("OPERATIONAL MODE.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operational mode");
    tt->help = tdrpStrDup("REALTIME mode - waits for new data. ARCHIVE mode - finds files between start and end times. FILELIST mode - uses file list from -f on command line.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir_path");
    tt->descr = tdrpStrDup("Name of input data directory.");
    tt->help = tdrpStrDup("ASCII input files are stored in this directory.");
    tt->val_offset = (char *) &input_dir_path - &_start_;
    tt->single_val.s = tdrpStrDup("raw/aftn");
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max age of input data");
    tt->help = tdrpStrDup("For REALTIME only - max age of input data for it to be valid");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'decode_sigmets'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("decode_sigmets");
    tt->descr = tdrpStrDup("Decode SIGMETs.");
    tt->help = tdrpStrDup("Turn this on to decode SIGMETs from the input_dir_path. Turn off to not decode SIGMETs; they will also not be saved to the output URL(s)");
    tt->val_offset = (char *) &decode_sigmets - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'decode_airmets'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("decode_airmets");
    tt->descr = tdrpStrDup("Decode AIRMETs.");
    tt->help = tdrpStrDup("Turn this on to decode AIRMETs from the input_dir_path. Turn off to not decode AIRMETs; they will also not be saved to the output URL(s)");
    tt->val_offset = (char *) &decode_airmets - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'st_location_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("st_location_path");
    tt->descr = tdrpStrDup("Path to station location file.");
    tt->help = tdrpStrDup("Used to determine the location of station identifiers. The station location file should contain a station identification followed by the latitude and longitude for each station.");
    tt->val_offset = (char *) &st_location_path - &_start_;
    tt->single_val.s = tdrpStrDup("./station_location.txt");
    tt++;
    
    // Parameter 'fir_location_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fir_location_path");
    tt->descr = tdrpStrDup("Path to FIR location file.");
    tt->help = tdrpStrDup("Used to determine the location of FIRs. The FIR file should contain the FIR/UIR/CTA name. Lat,lon are not yet supported for FIRs.");
    tt->val_offset = (char *) &fir_location_path - &_start_;
    tt->single_val.s = tdrpStrDup("./fir_list.txt");
    tt++;
    
    // Parameter 'us_states_location_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("us_states_location_path");
    tt->descr = tdrpStrDup("Path to US states abbreviations file.");
    tt->help = tdrpStrDup("Used to determine the US States abbreviations. The file should contain the state name a comma and then the 2-letter abbreviation.");
    tt->val_offset = (char *) &us_states_location_path - &_start_;
    tt->single_val.s = tdrpStrDup("./us_states.txt");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'store_ascii_format'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("store_ascii_format");
    tt->descr = tdrpStrDup("Option to store in ascii format in SPDB.");
    tt->help = tdrpStrDup("If TRUE, ascii data is stored using the ascii_url.");
    tt->val_offset = (char *) &store_ascii_format - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'ascii_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascii_output_url");
    tt->descr = tdrpStrDup("Output SPDB URL for ascii data.");
    tt->help = tdrpStrDup("Used if 'store_ascii_format' is TRUE.");
    tt->val_offset = (char *) &ascii_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/ascii_sigmet");
    tt++;
    
    // Parameter 'store_ascii_header'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("store_ascii_header");
    tt->descr = tdrpStrDup("Option to include header with the SIGMET.");
    tt->help = tdrpStrDup("Sometimes there is a header at the start of a SIG/AIRMET block. If store_header is true, the header is added to the start of the SIG/AIRMET message before storing it.");
    tt->val_offset = (char *) &store_ascii_header - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ascii_expire_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ascii_expire_secs");
    tt->descr = tdrpStrDup("Data expire seconds - ASCII data");
    tt->help = tdrpStrDup("Number of seconds the data is valid before it should be expired.");
    tt->val_offset = (char *) &ascii_expire_secs - &_start_;
    tt->single_val.i = 10800;
    tt++;
    
    // Parameter 'store_decoded_format'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("store_decoded_format");
    tt->descr = tdrpStrDup("Option to store in decoded format in SPDB.");
    tt->help = tdrpStrDup("If TRUE, decoded data is stored using the decoded_url.");
    tt->val_offset = (char *) &store_decoded_format - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'decoded_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("decoded_output_url");
    tt->descr = tdrpStrDup("Output SPDB URL for decoded data.");
    tt->help = tdrpStrDup("Used if 'store_decoded_format' is TRUE.");
    tt->val_offset = (char *) &decoded_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/sigmet");
    tt++;
    
    // Parameter 'cancel_input_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("cancel_input_url");
    tt->descr = tdrpStrDup("Input URL for cancelling.");
    tt->help = tdrpStrDup("To cancel a sigmet we read in from this URL, set the cancel flag, and then overwrite to decoded_output_url. This is done because the output_url may sometimes be a distribution URL, and we do not want to read from those.");
    tt->val_offset = (char *) &cancel_input_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/sigmet");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DECODING SPECIFICS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'modify_fir_boundary'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("modify_fir_boundary");
    tt->descr = tdrpStrDup("Option to try to generate polyons as modifications from FIR boundary");
    tt->help = tdrpStrDup("Only valid when cannot generate a polygon from the SIG/AIRMET but SIG/AIRMET text does refer to an FIR. If TRUE, and the SIG/AIRMET text contains modifications to the FIR, will attempt to generate a polygon as a subset of the FIR. If FALSE, will return the FIR boundary with no subsetting.");
    tt->val_offset = (char *) &modify_fir_boundary - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'bogus_stations'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("bogus_stations");
    tt->descr = tdrpStrDup("List of bogus stations.");
    tt->help = tdrpStrDup("Only used in station decoding.");
    tt->array_offset = (char *) &_bogus_stations - &_start_;
    tt->array_n_offset = (char *) &bogus_stations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 43;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("ABV");
      tt->array_vals[1].s = tdrpStrDup("AND");
      tt->array_vals[2].s = tdrpStrDup("AREA");
      tt->array_vals[3].s = tdrpStrDup("AT");
      tt->array_vals[4].s = tdrpStrDup("BLO");
      tt->array_vals[5].s = tdrpStrDup("BLW");
      tt->array_vals[6].s = tdrpStrDup("BOT");
      tt->array_vals[7].s = tdrpStrDup("BOUNDED");
      tt->array_vals[8].s = tdrpStrDup("BTN");
      tt->array_vals[9].s = tdrpStrDup("BUT");
      tt->array_vals[10].s = tdrpStrDup("BY");
      tt->array_vals[11].s = tdrpStrDup("CHG");
      tt->array_vals[12].s = tdrpStrDup("CTA");
      tt->array_vals[13].s = tdrpStrDup("DUE");
      tt->array_vals[14].s = tdrpStrDup("FROM");
      tt->array_vals[15].s = tdrpStrDup("GND");
      tt->array_vals[16].s = tdrpStrDup("ICING");
      tt->array_vals[17].s = tdrpStrDup("INTSF");
      tt->array_vals[18].s = tdrpStrDup("KMH");
      tt->array_vals[19].s = tdrpStrDup("KTS");
      tt->array_vals[20].s = tdrpStrDup("LIN");
      tt->array_vals[21].s = tdrpStrDup("LINE");
      tt->array_vals[22].s = tdrpStrDup("METEO-SAT");
      tt->array_vals[23].s = tdrpStrDup("MOV");
      tt->array_vals[24].s = tdrpStrDup("OBS");
      tt->array_vals[25].s = tdrpStrDup("OBS/FCST");
      tt->array_vals[26].s = tdrpStrDup("OF");
      tt->array_vals[27].s = tdrpStrDup("ON");
      tt->array_vals[28].s = tdrpStrDup("OR");
      tt->array_vals[29].s = tdrpStrDup("OVER");
      tt->array_vals[30].s = tdrpStrDup("SAN");
      tt->array_vals[31].s = tdrpStrDup("SLW");
      tt->array_vals[32].s = tdrpStrDup("STNR");
      tt->array_vals[33].s = tdrpStrDup("THE");
      tt->array_vals[34].s = tdrpStrDup("TO");
      tt->array_vals[35].s = tdrpStrDup("TOP");
      tt->array_vals[36].s = tdrpStrDup("TOPS");
      tt->array_vals[37].s = tdrpStrDup("UNTIL");
      tt->array_vals[38].s = tdrpStrDup("UTC");
      tt->array_vals[39].s = tdrpStrDup("VALID");
      tt->array_vals[40].s = tdrpStrDup("WHOLE");
      tt->array_vals[41].s = tdrpStrDup("WKN");
      tt->array_vals[42].s = tdrpStrDup("WTN");
    tt++;
    
    // Parameter 'wx_translator'
    // ctype is '_wx_translator_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wx_translator");
    tt->descr = tdrpStrDup("Translation of message wx text into official text.");
    tt->help = tdrpStrDup("Some messages contain non-standard weather text. For example, the message may contain the text MDT TURB instead of MOD TURB. This array allows for the translation of message text into standard text. This list should include all the standard wx types as well as non-standard ones.");
    tt->array_offset = (char *) &_wx_translator - &_start_;
    tt->array_n_offset = (char *) &wx_translator_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(wx_translator_t);
    tt->array_n = 91;
    tt->struct_def.name = tdrpStrDup("wx_translator_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("message_text");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_wx_translator->message_text - (char *) _wx_translator;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("standard_text");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_wx_translator->standard_text - (char *) _wx_translator;
    tt->n_struct_vals = 182;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("TROPICAL STORM");
      tt->struct_vals[1].s = tdrpStrDup("TC");
      tt->struct_vals[2].s = tdrpStrDup("TROPICAL CYCLONE");
      tt->struct_vals[3].s = tdrpStrDup("TC");
      tt->struct_vals[4].s = tdrpStrDup("TYPHOON");
      tt->struct_vals[5].s = tdrpStrDup("TC");
      tt->struct_vals[6].s = tdrpStrDup("HURRICANE");
      tt->struct_vals[7].s = tdrpStrDup("TC");
      tt->struct_vals[8].s = tdrpStrDup("TC");
      tt->struct_vals[9].s = tdrpStrDup("TC");
      tt->struct_vals[10].s = tdrpStrDup("VOLCANIC");
      tt->struct_vals[11].s = tdrpStrDup("VA");
      tt->struct_vals[12].s = tdrpStrDup("VOLCANIC ASH");
      tt->struct_vals[13].s = tdrpStrDup("VA");
      tt->struct_vals[14].s = tdrpStrDup("VA");
      tt->struct_vals[15].s = tdrpStrDup("VA");
      tt->struct_vals[16].s = tdrpStrDup("ERUPTION");
      tt->struct_vals[17].s = tdrpStrDup("VA");
      tt->struct_vals[18].s = tdrpStrDup("OBSC TS HVYGR");
      tt->struct_vals[19].s = tdrpStrDup("OBSC TS HVYGR");
      tt->struct_vals[20].s = tdrpStrDup("EMBD TS HVYGR");
      tt->struct_vals[21].s = tdrpStrDup("EMBD TS HVYGR");
      tt->struct_vals[22].s = tdrpStrDup("FRQ TS HVYGR");
      tt->struct_vals[23].s = tdrpStrDup("FRQ TS HVYGR");
      tt->struct_vals[24].s = tdrpStrDup("SQL TS HVYGR");
      tt->struct_vals[25].s = tdrpStrDup("SQL TS HVYGR");
      tt->struct_vals[26].s = tdrpStrDup("ISOL TS GR");
      tt->struct_vals[27].s = tdrpStrDup("ISOL TS GR");
      tt->struct_vals[28].s = tdrpStrDup("OCNL TS GR");
      tt->struct_vals[29].s = tdrpStrDup("OCNL TS GR");
      tt->struct_vals[30].s = tdrpStrDup("TSGR");
      tt->struct_vals[31].s = tdrpStrDup("TS GR");
      tt->struct_vals[32].s = tdrpStrDup("ISOL TS");
      tt->struct_vals[33].s = tdrpStrDup("ISOL TS");
      tt->struct_vals[34].s = tdrpStrDup("OCNL TS");
      tt->struct_vals[35].s = tdrpStrDup("OCNL TS");
      tt->struct_vals[36].s = tdrpStrDup("OBSC TS");
      tt->struct_vals[37].s = tdrpStrDup("OBSC TS");
      tt->struct_vals[38].s = tdrpStrDup("EMBD TS");
      tt->struct_vals[39].s = tdrpStrDup("EMBD TS");
      tt->struct_vals[40].s = tdrpStrDup("EMBD TS/CB");
      tt->struct_vals[41].s = tdrpStrDup("EMBD TS");
      tt->struct_vals[42].s = tdrpStrDup("FRQ TS");
      tt->struct_vals[43].s = tdrpStrDup("FRQ TS");
      tt->struct_vals[44].s = tdrpStrDup("FRQ TSRA");
      tt->struct_vals[45].s = tdrpStrDup("FRQ TS");
      tt->struct_vals[46].s = tdrpStrDup("SQL TS");
      tt->struct_vals[47].s = tdrpStrDup("SQL TS");
      tt->struct_vals[48].s = tdrpStrDup("LN TS");
      tt->struct_vals[49].s = tdrpStrDup("LN TS");
      tt->struct_vals[50].s = tdrpStrDup("LN DVLPG TS");
      tt->struct_vals[51].s = tdrpStrDup("LN TS");
      tt->struct_vals[52].s = tdrpStrDup("TS");
      tt->struct_vals[53].s = tdrpStrDup("TS");
      tt->struct_vals[54].s = tdrpStrDup("EMBD CB");
      tt->struct_vals[55].s = tdrpStrDup("EMBD CB");
      tt->struct_vals[56].s = tdrpStrDup("EMBD CB/TS");
      tt->struct_vals[57].s = tdrpStrDup("EMBD TS");
      tt->struct_vals[58].s = tdrpStrDup("ISOL CB");
      tt->struct_vals[59].s = tdrpStrDup("ISOL CB");
      tt->struct_vals[60].s = tdrpStrDup("ISOL CB/TS");
      tt->struct_vals[61].s = tdrpStrDup("ISOL TS");
      tt->struct_vals[62].s = tdrpStrDup("ISOL/OCNL CB");
      tt->struct_vals[63].s = tdrpStrDup("ISOL CB");
      tt->struct_vals[64].s = tdrpStrDup("OCNL CB");
      tt->struct_vals[65].s = tdrpStrDup("OCNL CB");
      tt->struct_vals[66].s = tdrpStrDup("FRQ CB");
      tt->struct_vals[67].s = tdrpStrDup("FRQ CB");
      tt->struct_vals[68].s = tdrpStrDup("LN CB");
      tt->struct_vals[69].s = tdrpStrDup("LN CB");
      tt->struct_vals[70].s = tdrpStrDup("CB/TS");
      tt->struct_vals[71].s = tdrpStrDup("TS");
      tt->struct_vals[72].s = tdrpStrDup("SEV ICE(FZRA)");
      tt->struct_vals[73].s = tdrpStrDup("SEV ICE(FZRA)");
      tt->struct_vals[74].s = tdrpStrDup("FZRA");
      tt->struct_vals[75].s = tdrpStrDup("SEV ICE(FZRA)");
      tt->struct_vals[76].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[77].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[78].s = tdrpStrDup("SEV ICG");
      tt->struct_vals[79].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[80].s = tdrpStrDup("SEV ICING");
      tt->struct_vals[81].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[82].s = tdrpStrDup("SEV/MOD ICE");
      tt->struct_vals[83].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[84].s = tdrpStrDup("MOD-SEV ICE");
      tt->struct_vals[85].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[86].s = tdrpStrDup("MDT-SEV ICE");
      tt->struct_vals[87].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[88].s = tdrpStrDup("MOD/SEV ICE");
      tt->struct_vals[89].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[90].s = tdrpStrDup("MDT/SEV ICE");
      tt->struct_vals[91].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[92].s = tdrpStrDup("MOD-SEV ICING");
      tt->struct_vals[93].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[94].s = tdrpStrDup("MDT-SEV ICING");
      tt->struct_vals[95].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[96].s = tdrpStrDup("MOD/SEV ICING");
      tt->struct_vals[97].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[98].s = tdrpStrDup("MDT/SEV ICING");
      tt->struct_vals[99].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[100].s = tdrpStrDup("SEV MXD ICGICIP");
      tt->struct_vals[101].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[102].s = tdrpStrDup("SEV MXD ICGIC");
      tt->struct_vals[103].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[104].s = tdrpStrDup("SEV MXD/CLR ICGICIP");
      tt->struct_vals[105].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[106].s = tdrpStrDup("SEV MXD ICG/TURB");
      tt->struct_vals[107].s = tdrpStrDup("SEV ICE");
      tt->struct_vals[108].s = tdrpStrDup("MDT ICE");
      tt->struct_vals[109].s = tdrpStrDup("MOD ICE");
      tt->struct_vals[110].s = tdrpStrDup("MOD ICE");
      tt->struct_vals[111].s = tdrpStrDup("MOD ICE");
      tt->struct_vals[112].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[113].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[114].s = tdrpStrDup("SEV TRB");
      tt->struct_vals[115].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[116].s = tdrpStrDup("SEVERE TURB");
      tt->struct_vals[117].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[118].s = tdrpStrDup("SEVERE TURBULENCE");
      tt->struct_vals[119].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[120].s = tdrpStrDup("MODERATE TO SEVERE TURBULENCE");
      tt->struct_vals[121].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[122].s = tdrpStrDup("MOD-SEV TURB");
      tt->struct_vals[123].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[124].s = tdrpStrDup("MDT-SEV TURB");
      tt->struct_vals[125].s = tdrpStrDup("MOD TURB");
      tt->struct_vals[126].s = tdrpStrDup("MOD/SEV TURB");
      tt->struct_vals[127].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[128].s = tdrpStrDup("MDT/SEV TURB");
      tt->struct_vals[129].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[130].s = tdrpStrDup("SEV/MOD TURB");
      tt->struct_vals[131].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[132].s = tdrpStrDup("SEV-MOD TURB");
      tt->struct_vals[133].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[134].s = tdrpStrDup("SEV/MDT TURB");
      tt->struct_vals[135].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[136].s = tdrpStrDup("SEV-MDT TURB");
      tt->struct_vals[137].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[138].s = tdrpStrDup("MODERATE TURBULENCE");
      tt->struct_vals[139].s = tdrpStrDup("MOD TURB");
      tt->struct_vals[140].s = tdrpStrDup("MOD TURB");
      tt->struct_vals[141].s = tdrpStrDup("MOD TURB");
      tt->struct_vals[142].s = tdrpStrDup("MDT TURB");
      tt->struct_vals[143].s = tdrpStrDup("MOD TURB");
      tt->struct_vals[144].s = tdrpStrDup("TURB MOD");
      tt->struct_vals[145].s = tdrpStrDup("MOD TURB");
      tt->struct_vals[146].s = tdrpStrDup("SEV CAT");
      tt->struct_vals[147].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[148].s = tdrpStrDup("MOD-SEV CAT");
      tt->struct_vals[149].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[150].s = tdrpStrDup("MDT-SEV CAT");
      tt->struct_vals[151].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[152].s = tdrpStrDup("MOD CAT");
      tt->struct_vals[153].s = tdrpStrDup("MOD TURB");
      tt->struct_vals[154].s = tdrpStrDup("MDT CAT");
      tt->struct_vals[155].s = tdrpStrDup("MOD TURB");
      tt->struct_vals[156].s = tdrpStrDup("MDT-SEV MECH/LLJ");
      tt->struct_vals[157].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[158].s = tdrpStrDup("MDT-SEV MECH");
      tt->struct_vals[159].s = tdrpStrDup("SEV TURB");
      tt->struct_vals[160].s = tdrpStrDup("SEV MTW");
      tt->struct_vals[161].s = tdrpStrDup("SEV MTW");
      tt->struct_vals[162].s = tdrpStrDup("MOD MTW");
      tt->struct_vals[163].s = tdrpStrDup("MOD MTW");
      tt->struct_vals[164].s = tdrpStrDup("HVY DS");
      tt->struct_vals[165].s = tdrpStrDup("HVY DS");
      tt->struct_vals[166].s = tdrpStrDup("HVY SS");
      tt->struct_vals[167].s = tdrpStrDup("HVY SS");
      tt->struct_vals[168].s = tdrpStrDup("SFC WSPD");
      tt->struct_vals[169].s = tdrpStrDup("SFC WSPD");
      tt->struct_vals[170].s = tdrpStrDup("SFC VIS");
      tt->struct_vals[171].s = tdrpStrDup("SFC VIS");
      tt->struct_vals[172].s = tdrpStrDup("BKN CLD");
      tt->struct_vals[173].s = tdrpStrDup("BKN CLD");
      tt->struct_vals[174].s = tdrpStrDup("OVC CLD");
      tt->struct_vals[175].s = tdrpStrDup("OVC CLD");
      tt->struct_vals[176].s = tdrpStrDup("MT OBSC");
      tt->struct_vals[177].s = tdrpStrDup("MT OBSC");
      tt->struct_vals[178].s = tdrpStrDup("GR");
      tt->struct_vals[179].s = tdrpStrDup("GR");
      tt->struct_vals[180].s = tdrpStrDup("RDOACT CLD");
      tt->struct_vals[181].s = tdrpStrDup("RDOACT CLD");
    tt++;
    
    // Parameter 'token_threshold_for_cancel'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("token_threshold_for_cancel");
    tt->descr = tdrpStrDup("Threshold to consider a CNL sigmet for processing.");
    tt->help = tdrpStrDup("Some SIGMETs have a new sigmet, with a CNL for the old SIGMET appended to the end.  This threshold can be used to differentiate between these new compound SIGMETs and regular CNL SIGMETs.  If the SIGMET has a CNL, and has at least this many tokens, it will continue to be processed as a normal SIGMET, allowing compound SIGMETs to be decoded correctly.\nFrom our limited investigation, we think a value around 25 should produce correct results.\nLeave the default value of -1 to not process any CNL SIGMETs as compound SIGMETs.");
    tt->val_offset = (char *) &token_threshold_for_cancel - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("QUALITY CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_distance_to_closest_station'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_distance_to_closest_station");
    tt->descr = tdrpStrDup("Maximum distance to a station (km).");
    tt->help = tdrpStrDup("When searching for a station closest to a point, the station will only be accepted if the distance to the station is less than this value.");
    tt->val_offset = (char *) &max_distance_to_closest_station - &_start_;
    tt->single_val.d = 7500;
    tt++;
    
    // Parameter 'check_polygon_size_and_shape'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_polygon_size_and_shape");
    tt->descr = tdrpStrDup("Option to check polygon for reasonable size and shape.");
    tt->help = tdrpStrDup("If TRUE, test the vertices to make sure they are reasonable. There are 2 tests: (a) max_valid_polygon_distance: the maximum distance between adjacent vertices; (b) min_valid_angle: minimum angle enclosed between adjacent sides of the polygon.");
    tt->val_offset = (char *) &check_polygon_size_and_shape - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_valid_polygon_distance'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_valid_polygon_distance");
    tt->descr = tdrpStrDup("Maximum polygon side distance (km).");
    tt->help = tdrpStrDup("If the length of two adjacent sides in a polygon exceeds this value, the vertex between the two sides is discarded. Only applies if check_polygon_size_and_shape is true.");
    tt->val_offset = (char *) &max_valid_polygon_distance - &_start_;
    tt->single_val.d = 5000;
    tt++;
    
    // Parameter 'min_valid_polygon_angle'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_valid_polygon_angle");
    tt->descr = tdrpStrDup("Minumum angle between polygon sides (deg).");
    tt->help = tdrpStrDup("If the angle between two adjacent sides in a polygon is less than this value, the vertex between the two sides is discarded. Only applies if check_polygon_size_and_shape is true.");
    tt->val_offset = (char *) &min_valid_polygon_angle - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'sigmet_max_duration'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sigmet_max_duration");
    tt->descr = tdrpStrDup("Maximum SIGMET duration - secs.");
    tt->help = tdrpStrDup("The maximum duration of a SIGMET. If the duration exceeds this value, the start and expire times are set to the issue time. That way the SIGMET will have no effect, but will still be in the data base.");
    tt->val_offset = (char *) &sigmet_max_duration - &_start_;
    tt->single_val.i = 21600;
    tt++;
    
    // Parameter 'airmet_max_duration'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("airmet_max_duration");
    tt->descr = tdrpStrDup("Maximum AIRMET duration - secs.");
    tt->help = tdrpStrDup("The maximum duration of an AIRMET. If the duration exceeds this value, the start and expire times are set to the issue time. That way the AIRMET will have no effect, but will still be in the data base.");
    tt->val_offset = (char *) &airmet_max_duration - &_start_;
    tt->single_val.i = 86400;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
