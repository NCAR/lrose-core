////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program GpmHdf2Mdv
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("GpmHdf2Mdv");
    tt->comment_text = tdrpStrDup("This program converts TRMM Version 7 HDF4 files into MDV format.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters controlling debug outputs.");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("debug flag");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'verbose'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("verbose");
    tt->descr = tdrpStrDup("verbose debug flag");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &verbose - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("PROCESS PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("PROCESS I/O PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters describing the input and output locations.");
    tt++;
    
    // Parameter 'trigger_mode'
    // ctype is '_trigger_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("trigger_mode");
    tt->descr = tdrpStrDup("Input triggering mode");
    tt->help = tdrpStrDup("\tIn FILE_LIST mode, the program operates on the files specified on the command line.\n\tIn INPUT_DIR mode, the program will process new files as they appear in the input_dir directory.\n\tIn INPUT_DIR_RECURSE mode, the program will process new files as they appear in the input_dir directory or in any subdirectory.\n\tIn LATEST_DATA mode, the program will process new files as they appear in the _latest_data_info file in the input_dir directory.\n");
    tt->val_offset = (char *) &trigger_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("trigger_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FILE_LIST");
      tt->enum_def.fields[0].val = FILE_LIST;
      tt->enum_def.fields[1].name = tdrpStrDup("INPUT_DIR");
      tt->enum_def.fields[1].val = INPUT_DIR;
      tt->enum_def.fields[2].name = tdrpStrDup("INPUT_DIR_RECURSE");
      tt->enum_def.fields[2].val = INPUT_DIR_RECURSE;
      tt->enum_def.fields[3].name = tdrpStrDup("LATEST_DATA");
      tt->enum_def.fields[3].val = LATEST_DATA;
    tt->single_val.e = FILE_LIST;
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("$(RAP_DATA_DIR)/raw/TRMM");
    tt++;
    
    // Parameter 'input_substring'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_substring");
    tt->descr = tdrpStrDup("Input filename substring");
    tt->help = tdrpStrDup("Used only if trigger_mode is set to INPUT_DIR or INPUT_DIR_RECURSE. The program will only process files whose name contains this substring. Set to \"\" to process all files in the input directory.\n");
    tt->val_offset = (char *) &input_substring - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'exclude_substring'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("exclude_substring");
    tt->descr = tdrpStrDup("Input filename exclude substring");
    tt->help = tdrpStrDup("Used only if trigger_mode is set to INPUT_DIR or INPUT_DIR_RECURSE. The program will not process files whose name contains this substring. Set to \"\" to process all files in the input directory.\n");
    tt->val_offset = (char *) &exclude_substring - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_valid_secs'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("max_valid_secs");
    tt->descr = tdrpStrDup("Maximum number of seconds input files are valid.");
    tt->help = tdrpStrDup("Used only if trigger_mode is set to LATEST_DATA.");
    tt->val_offset = (char *) &max_valid_secs - &_start_;
    tt->single_val.l = 600;
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output URL");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::mdv/TRMM");
    tt++;
    
    // Parameter 'output_proj'
    // ctype is '_proj_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_proj");
    tt->descr = tdrpStrDup("Output projection");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_proj - &_start_;
    tt->struct_def.name = tdrpStrDup("proj_t");
    tt->struct_def.nfields = 12;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("proj_type_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("proj_type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &output_proj.proj_type - (char *) &output_proj;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("proj_type_t");
        tt->struct_def.fields[0].enum_def.nfields = 3;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("PROJ_FLAT");
        tt->struct_def.fields[0].enum_def.fields[0].val = PROJ_FLAT;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("PROJ_LATLON");
        tt->struct_def.fields[0].enum_def.fields[1].val = PROJ_LATLON;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("PROJ_LC2");
        tt->struct_def.fields[0].enum_def.fields[2].val = PROJ_LC2;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("minx");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &output_proj.minx - (char *) &output_proj;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("miny");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &output_proj.miny - (char *) &output_proj;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("nx");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &output_proj.nx - (char *) &output_proj;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("ny");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &output_proj.ny - (char *) &output_proj;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("dx");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &output_proj.dx - (char *) &output_proj;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("dy");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &output_proj.dy - (char *) &output_proj;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("origin_lat");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &output_proj.origin_lat - (char *) &output_proj;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("origin_lon");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &output_proj.origin_lon - (char *) &output_proj;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("rotation");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &output_proj.rotation - (char *) &output_proj;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("lat1");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &output_proj.lat1 - (char *) &output_proj;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("lat2");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &output_proj.lat2 - (char *) &output_proj;
    tt->n_struct_vals = 12;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = PROJ_FLAT;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].i = 0;
      tt->struct_vals[4].i = 0;
      tt->struct_vals[5].d = 0;
      tt->struct_vals[6].d = 0;
      tt->struct_vals[7].d = 0;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].d = 0;
      tt->struct_vals[10].d = 0;
      tt->struct_vals[11].d = 0;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Information about the TRMM data fields to be included in the output file.");
    tt->help = tdrpStrDup("\tsds_field_name - The name of the field in the SDS section of the HDF file.\n\tdata_type - How the data is stored in the HDF file.\n\t\tFULL_RES_DATA is stored with the same number of scans and pixels as the geolocation data.\n\t\tLOW_RES_DATA is stored with the same number of scans, but half the pixels of the geolocation data. The data is assumed to occupy every other pixel in each scan.\n\tnum_fields - Number of fields in the TRMM SDS data array. All of the fields in a requested SDS data array must be processed.\n\tscales - List of scale values to apply to the data in the TRMM file. There must either be num_fields scales specified or this string must be empty. The scales are delimited by commas. If the string is empty, no scale value will be applied (same as setting scale to 1.0).\n\tbiases - List of bias values to apply to the data in the TRMM file. There must be either num_fields biases specified or this string must be empty. The biases are delimited by commas. If the string is empty, no bias will be applied (same as setting bias to 0.0).\nThe final data value is calculated as:\n\t\t data_value = (trmm_file_value / scale) - bias\n\tmissing_values1, missing_values2, missing_values3 - List of missing data values to apply to the data in the TRMM file. There must either be num_fields missing values specified or this string must be empty. The missing values are delimited by commas. If this string is empty, no missing data value is applied to the input data.\n\tbad_values1, bad_values2, bad_values3 - List of bad data values to apply to the data in the TRMM file. There must either be num_fields bad values specified or this string must be empty. The bad values are delimited by commas. If this string is empty, no bad data value is applied to the input data.\n\tmdv_field_names - The field names to use for the fields in the output MDV file. There must be num_fields names specified. The names are delimited by commas.\n\tmdv_field_units - The units for each of the MDV output fields. There must be num_fields of these. The names are delimited by commas.\n\tinput_level_type - Flag indicating how the vertical levels are specified in this parameter file.\n\t\tLEVELS_LISTED - The actual vertical level values are listed in the vert_levels paramter.\n\t\tLEVELS_CONST_DZ - The levels are calculated using num_vert_levels, min_vert_level and vert_level_delta.\nNote that this description of the vertical levels must match the data as it appears in the HDF file.\n\tvert_level_type - The type of vertical levels in the data.\n\tnum_vert_levels - The number of vertical levels in this field.\n\tvert_levels - The vertical levels for this field. There must be num_vert_levels vertical levels specified. The vertical levels are delimited by commas. Only used if level_spec_type is LEVELS_LISTED.\n\tmin_vert_level - Minimum vertical level value. Only used if level_spec_type is LEVELS_CONST_DZ.\n\tdelta_vert_level - Delta vertical level value. Only used if level_spec_type is LEVELS_CONST_DZ.\n\tradiance_convert - String indicating what type of radiance to brightness temperature conversion to use for each output field. The must either be num_fields conversions specified (delimited by commas) or this string must be empty. The valid conversions are:\n\t\tCONVERT_RAD_NONE - don't do a radiance conversion\n\t\tCONVERT_RAD_VIS\n\t\tCONVERT_RAD_CH3\n\t\tCONVERT_RAD_CH4\n\t\tCONVERT_RAD_CH5\n\nNote that if any of the fields uses CONVERT_RAD_VIS radiance conversion, then the TRMM file must contain the solar calibration and local direction information. This was only tested on the 1B01 files.\n\tinvert_vert_levels - Flag indicating whether to invert the vertical levels when writing the data to the MDV file. If set to false, the order of the vertical levels in the MDV file will match the order of the vertical levels in the HDF file. If set to true, the order of the vertical levels in the MDV file will be reversed.\n");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 21;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("sds_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->sds_field_name - (char *) _output_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("data_type_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("data_type");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->data_type - (char *) _output_fields;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("data_type_t");
        tt->struct_def.fields[1].enum_def.nfields = 2;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("FULL_RES_DATA");
        tt->struct_def.fields[1].enum_def.fields[0].val = FULL_RES_DATA;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("LOW_RES_DATA");
        tt->struct_def.fields[1].enum_def.fields[1].val = LOW_RES_DATA;
      tt->struct_def.fields[2].ftype = tdrpStrDup("long");
      tt->struct_def.fields[2].fname = tdrpStrDup("num_fields");
      tt->struct_def.fields[2].ptype = LONG_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->num_fields - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("scales");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->scales - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("biases");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->biases - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("string");
      tt->struct_def.fields[5].fname = tdrpStrDup("missing_values1");
      tt->struct_def.fields[5].ptype = STRING_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->missing_values1 - (char *) _output_fields;
      tt->struct_def.fields[6].ftype = tdrpStrDup("string");
      tt->struct_def.fields[6].fname = tdrpStrDup("missing_values2");
      tt->struct_def.fields[6].ptype = STRING_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_fields->missing_values2 - (char *) _output_fields;
      tt->struct_def.fields[7].ftype = tdrpStrDup("string");
      tt->struct_def.fields[7].fname = tdrpStrDup("missing_values3");
      tt->struct_def.fields[7].ptype = STRING_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_output_fields->missing_values3 - (char *) _output_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("string");
      tt->struct_def.fields[8].fname = tdrpStrDup("bad_values1");
      tt->struct_def.fields[8].ptype = STRING_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_output_fields->bad_values1 - (char *) _output_fields;
      tt->struct_def.fields[9].ftype = tdrpStrDup("string");
      tt->struct_def.fields[9].fname = tdrpStrDup("bad_values2");
      tt->struct_def.fields[9].ptype = STRING_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_output_fields->bad_values2 - (char *) _output_fields;
      tt->struct_def.fields[10].ftype = tdrpStrDup("string");
      tt->struct_def.fields[10].fname = tdrpStrDup("bad_values3");
      tt->struct_def.fields[10].ptype = STRING_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_output_fields->bad_values3 - (char *) _output_fields;
      tt->struct_def.fields[11].ftype = tdrpStrDup("string");
      tt->struct_def.fields[11].fname = tdrpStrDup("mdv_field_names");
      tt->struct_def.fields[11].ptype = STRING_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_output_fields->mdv_field_names - (char *) _output_fields;
      tt->struct_def.fields[12].ftype = tdrpStrDup("string");
      tt->struct_def.fields[12].fname = tdrpStrDup("mdv_field_units");
      tt->struct_def.fields[12].ptype = STRING_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_output_fields->mdv_field_units - (char *) _output_fields;
      tt->struct_def.fields[13].ftype = tdrpStrDup("level_spec_type_t");
      tt->struct_def.fields[13].fname = tdrpStrDup("level_spec_type");
      tt->struct_def.fields[13].ptype = ENUM_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_output_fields->level_spec_type - (char *) _output_fields;
        tt->struct_def.fields[13].enum_def.name = tdrpStrDup("level_spec_type_t");
        tt->struct_def.fields[13].enum_def.nfields = 2;
        tt->struct_def.fields[13].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[13].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[13].enum_def.fields[0].name = tdrpStrDup("LEVELS_LISTED");
        tt->struct_def.fields[13].enum_def.fields[0].val = LEVELS_LISTED;
        tt->struct_def.fields[13].enum_def.fields[1].name = tdrpStrDup("LEVELS_CONST_DZ");
        tt->struct_def.fields[13].enum_def.fields[1].val = LEVELS_CONST_DZ;
      tt->struct_def.fields[14].ftype = tdrpStrDup("vert_type_t");
      tt->struct_def.fields[14].fname = tdrpStrDup("vert_level_type");
      tt->struct_def.fields[14].ptype = ENUM_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &_output_fields->vert_level_type - (char *) _output_fields;
        tt->struct_def.fields[14].enum_def.name = tdrpStrDup("vert_type_t");
        tt->struct_def.fields[14].enum_def.nfields = 2;
        tt->struct_def.fields[14].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[14].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[14].enum_def.fields[0].name = tdrpStrDup("VERT_TYPE_SATELLITE_IMAGE");
        tt->struct_def.fields[14].enum_def.fields[0].val = VERT_TYPE_SATELLITE_IMAGE;
        tt->struct_def.fields[14].enum_def.fields[1].name = tdrpStrDup("VERT_TYPE_Z");
        tt->struct_def.fields[14].enum_def.fields[1].val = VERT_TYPE_Z;
      tt->struct_def.fields[15].ftype = tdrpStrDup("long");
      tt->struct_def.fields[15].fname = tdrpStrDup("num_vert_levels");
      tt->struct_def.fields[15].ptype = LONG_TYPE;
      tt->struct_def.fields[15].rel_offset = 
        (char *) &_output_fields->num_vert_levels - (char *) _output_fields;
      tt->struct_def.fields[16].ftype = tdrpStrDup("string");
      tt->struct_def.fields[16].fname = tdrpStrDup("vert_levels");
      tt->struct_def.fields[16].ptype = STRING_TYPE;
      tt->struct_def.fields[16].rel_offset = 
        (char *) &_output_fields->vert_levels - (char *) _output_fields;
      tt->struct_def.fields[17].ftype = tdrpStrDup("double");
      tt->struct_def.fields[17].fname = tdrpStrDup("min_vert_level");
      tt->struct_def.fields[17].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[17].rel_offset = 
        (char *) &_output_fields->min_vert_level - (char *) _output_fields;
      tt->struct_def.fields[18].ftype = tdrpStrDup("double");
      tt->struct_def.fields[18].fname = tdrpStrDup("delta_vert_level");
      tt->struct_def.fields[18].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[18].rel_offset = 
        (char *) &_output_fields->delta_vert_level - (char *) _output_fields;
      tt->struct_def.fields[19].ftype = tdrpStrDup("string");
      tt->struct_def.fields[19].fname = tdrpStrDup("radiance_convert");
      tt->struct_def.fields[19].ptype = STRING_TYPE;
      tt->struct_def.fields[19].rel_offset = 
        (char *) &_output_fields->radiance_convert - (char *) _output_fields;
      tt->struct_def.fields[20].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[20].fname = tdrpStrDup("invert_vert_levels");
      tt->struct_def.fields[20].ptype = BOOL_TYPE;
      tt->struct_def.fields[20].rel_offset = 
        (char *) &_output_fields->invert_vert_levels - (char *) _output_fields;
    tt->n_struct_vals = 21;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("highResCh");
      tt->struct_vals[1].e = FULL_RES_DATA;
      tt->struct_vals[2].l = 2;
      tt->struct_vals[3].s = tdrpStrDup("100.0,100.0");
      tt->struct_vals[4].s = tdrpStrDup("-100.0,-100.0");
      tt->struct_vals[5].s = tdrpStrDup("-99999.0,-99999.0");
      tt->struct_vals[6].s = tdrpStrDup("");
      tt->struct_vals[7].s = tdrpStrDup("");
      tt->struct_vals[8].s = tdrpStrDup("");
      tt->struct_vals[9].s = tdrpStrDup("");
      tt->struct_vals[10].s = tdrpStrDup("");
      tt->struct_vals[11].s = tdrpStrDup("highResCh1,highResCh2");
      tt->struct_vals[12].s = tdrpStrDup("K,K");
      tt->struct_vals[13].e = LEVELS_LISTED;
      tt->struct_vals[14].e = VERT_TYPE_SATELLITE_IMAGE;
      tt->struct_vals[15].l = 1;
      tt->struct_vals[16].s = tdrpStrDup("0.0");
      tt->struct_vals[17].d = 0;
      tt->struct_vals[18].d = 0;
      tt->struct_vals[19].s = tdrpStrDup("");
      tt->struct_vals[20].b = pFALSE;
    tt++;
    
    // Parameter 'brightness_temp_table'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("brightness_temp_table");
    tt->descr = tdrpStrDup("Path for the brightness temperature table.");
    tt->help = tdrpStrDup("Used only if one or more of the fields in output_fields uses CONVERT_RAD_CH3, CONVERT_RAD_CH4 or CONVERT_RAD_CH5 radiance conversion.");
    tt->val_offset = (char *) &brightness_temp_table - &_start_;
    tt->single_val.s = tdrpStrDup("bttable");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
