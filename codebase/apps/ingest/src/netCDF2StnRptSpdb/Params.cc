/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program netCDF2StnRptSpdb
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_WARNINGS");
      tt->enum_def.fields[1].val = DEBUG_WARNINGS;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[2].val = DEBUG_NORM;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[3].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("INPUT AND OUTPUT DATA.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max age of input data");
    tt->help = tdrpStrDup("For realtime only - max age of input data for it to be valid");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 0;
    tt->single_val.l = 7200;
    tt++;
    
    // Parameter 'output_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_spdb_url");
    tt->descr = tdrpStrDup("Output SPDB URL.");
    tt->help = tdrpStrDup("Output data is in spdb format.");
    tt->val_offset = (char *) &output_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost:port:directory");
    tt++;
    
    // Parameter 'spdb_expire_secs'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("spdb_expire_secs");
    tt->descr = tdrpStrDup("Number of seconds before the SPDB product expires");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spdb_expire_secs - &_start_;
    tt->single_val.l = 1200;
    tt++;
    
    // Parameter 'dataProviderVar'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dataProviderVar");
    tt->descr = tdrpStrDup("Data provider variable name information.");
    tt->help = tdrpStrDup("This is the exact name of the data provider variable in the netCDF file and it is case-sensitive. Use \"ncdump\" to get this variable name from the netCDF file.");
    tt->val_offset = (char *) &dataProviderVar - &_start_;
    tt->single_val.s = tdrpStrDup("dataProvider");
    tt++;
    
    // Parameter 'dataProviderValue'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dataProviderValue");
    tt->descr = tdrpStrDup("Data provider value.");
    tt->help = tdrpStrDup("This is the data provider of interest; it's case-sensitive. Use \"ncdump -v dataProviderVarName\" to see possible values for this variable.");
    tt->val_offset = (char *) &dataProviderValue - &_start_;
    tt->single_val.s = tdrpStrDup("KSDOT");
    tt++;
    
    // Parameter 'stationIDVar'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("stationIDVar");
    tt->descr = tdrpStrDup("Station ID variable name.");
    tt->help = tdrpStrDup("This is the station ID variable name. It must match the name of the station ID variable in the netCDF file exactly; it's case-sensitive.");
    tt->val_offset = (char *) &stationIDVar - &_start_;
    tt->single_val.s = tdrpStrDup("stationId");
    tt++;
    
    // Parameter 'observationTime'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("observationTime");
    tt->descr = tdrpStrDup("Report time variable name");
    tt->help = tdrpStrDup("This is the report time variable name. It must match the name of the time variable in the netCDF file exactly. It is case-sensitive.");
    tt->val_offset = (char *) &observationTime - &_start_;
    tt->single_val.s = tdrpStrDup("observationTime");
    tt++;
    
    // Parameter 'latitude'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("latitude");
    tt->descr = tdrpStrDup("Input latitude variable information.");
    tt->help = tdrpStrDup("\tvariable_name: This is the exact name of the latitude variable in the netCDF file and it is case-sensitive. Use \"ncdump\" to get variable names from the netCDF file. If this variable is not available in the netCDF file, set this to \"\"\n\tmissing_value_attr_name: This is the name of the attribute for this variable in the netCDF file that contains the missing data value. If the variable doesn't have an attribute of this type, set it to \"\"\n\tconvert_type: Used for converting the netCDF latitude value to the value needed for the station_report.\n\tmultiplier_value: value used if conversion type is MULTIPLIER.");
    tt->val_offset = (char *) &latitude - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &latitude.variable_name - (char *) &latitude;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &latitude.missing_value_attr_name - (char *) &latitude;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &latitude.convert_type - (char *) &latitude;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &latitude.multiplier_value - (char *) &latitude;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("latitude");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'longitude'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("longitude");
    tt->descr = tdrpStrDup("Input longitude variable information.");
    tt->help = tdrpStrDup("See latitude help information.");
    tt->val_offset = (char *) &longitude - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &longitude.variable_name - (char *) &longitude;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &longitude.missing_value_attr_name - (char *) &longitude;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &longitude.convert_type - (char *) &longitude;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &longitude.multiplier_value - (char *) &longitude;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("longitude");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'altitude'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("altitude");
    tt->descr = tdrpStrDup("Input altitude variable information.");
    tt->help = tdrpStrDup("See latitude help information.\nstation_report uses meters.");
    tt->val_offset = (char *) &altitude - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &altitude.variable_name - (char *) &altitude;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &altitude.missing_value_attr_name - (char *) &altitude;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &altitude.convert_type - (char *) &altitude;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &altitude.multiplier_value - (char *) &altitude;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("elevation");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'temperature'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("temperature");
    tt->descr = tdrpStrDup("Input temperature variable information.");
    tt->help = tdrpStrDup("See latitude help information.\nstation_report uses degrees celsius.");
    tt->val_offset = (char *) &temperature - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &temperature.variable_name - (char *) &temperature;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &temperature.missing_value_attr_name - (char *) &temperature;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &temperature.convert_type - (char *) &temperature;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &temperature.multiplier_value - (char *) &temperature;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("temperature");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = KELVIN_TO_C;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'dewpoint'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dewpoint");
    tt->descr = tdrpStrDup("Input dewpoint variable information.");
    tt->help = tdrpStrDup("See latitude help information.\nstation_report uses degrees celsius.");
    tt->val_offset = (char *) &dewpoint - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &dewpoint.variable_name - (char *) &dewpoint;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &dewpoint.missing_value_attr_name - (char *) &dewpoint;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &dewpoint.convert_type - (char *) &dewpoint;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &dewpoint.multiplier_value - (char *) &dewpoint;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("dewpoint");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = KELVIN_TO_C;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'relHumidity'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("relHumidity");
    tt->descr = tdrpStrDup("Input relative humidity variable information.");
    tt->help = tdrpStrDup("See latitude help information.");
    tt->val_offset = (char *) &relHumidity - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &relHumidity.variable_name - (char *) &relHumidity;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &relHumidity.missing_value_attr_name - (char *) &relHumidity;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &relHumidity.convert_type - (char *) &relHumidity;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &relHumidity.multiplier_value - (char *) &relHumidity;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("relHumidity");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'windSpeed'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("windSpeed");
    tt->descr = tdrpStrDup("Input wind speed variable information.");
    tt->help = tdrpStrDup("See latitude help information.\nstation_report uses m/s");
    tt->val_offset = (char *) &windSpeed - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &windSpeed.variable_name - (char *) &windSpeed;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &windSpeed.missing_value_attr_name - (char *) &windSpeed;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &windSpeed.convert_type - (char *) &windSpeed;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &windSpeed.multiplier_value - (char *) &windSpeed;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("windSpeed");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'windDir'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("windDir");
    tt->descr = tdrpStrDup("Input wind direction variable information.");
    tt->help = tdrpStrDup("See latitude help information.\nstation_report uses deg");
    tt->val_offset = (char *) &windDir - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &windDir.variable_name - (char *) &windDir;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &windDir.missing_value_attr_name - (char *) &windDir;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &windDir.convert_type - (char *) &windDir;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &windDir.multiplier_value - (char *) &windDir;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("windDir");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'windGust'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("windGust");
    tt->descr = tdrpStrDup("Input wind gust variable information.");
    tt->help = tdrpStrDup("See latitude help information.\nstation_report uses m/sec");
    tt->val_offset = (char *) &windGust - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &windGust.variable_name - (char *) &windGust;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &windGust.missing_value_attr_name - (char *) &windGust;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &windGust.convert_type - (char *) &windGust;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &windGust.multiplier_value - (char *) &windGust;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("windGust");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'pressure'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("pressure");
    tt->descr = tdrpStrDup("Input pressure variable information.");
    tt->help = tdrpStrDup("See latitude help information.\nstation_report barometric pressure (mb)");
    tt->val_offset = (char *) &pressure - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &pressure.variable_name - (char *) &pressure;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &pressure.missing_value_attr_name - (char *) &pressure;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &pressure.convert_type - (char *) &pressure;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &pressure.multiplier_value - (char *) &pressure;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("stationPressure");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'precipAccum'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("precipAccum");
    tt->descr = tdrpStrDup("Input liquid accumulation variable information.");
    tt->help = tdrpStrDup("See latitude help information.\nstation_report uses mm");
    tt->val_offset = (char *) &precipAccum - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &precipAccum.variable_name - (char *) &precipAccum;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &precipAccum.missing_value_attr_name - (char *) &precipAccum;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &precipAccum.convert_type - (char *) &precipAccum;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &precipAccum.multiplier_value - (char *) &precipAccum;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("precipAccum");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'visibility'
    // ctype is '_input_variable_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("visibility");
    tt->descr = tdrpStrDup("Input visiblity variable information.");
    tt->help = tdrpStrDup("See latitude help information.\nstation_report uses kilometers");
    tt->val_offset = (char *) &visibility - &_start_;
    tt->struct_def.name = tdrpStrDup("input_variable_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("variable_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &visibility.variable_name - (char *) &visibility;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("missing_value_attr_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &visibility.missing_value_attr_name - (char *) &visibility;
      tt->struct_def.fields[2].ftype = tdrpStrDup("conversion_type_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("convert_type");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &visibility.convert_type - (char *) &visibility;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("conversion_type_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("NO_MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[0].val = NO_MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("MULTIPLIER");
        tt->struct_def.fields[2].enum_def.fields[1].val = MULTIPLIER;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("KELVIN_TO_C");
        tt->struct_def.fields[2].enum_def.fields[2].val = KELVIN_TO_C;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("multiplier_value");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &visibility.multiplier_value - (char *) &visibility;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("visibility");
      tt->struct_vals[1].s = tdrpStrDup("_FillValue");
      tt->struct_vals[2].e = NO_MULTIPLIER;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
