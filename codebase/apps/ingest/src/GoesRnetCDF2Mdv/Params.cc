/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program GoesRnetCDF2Mdv
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("GoesRnetCDF2Mdv");
    tt->comment_text = tdrpStrDup("This program reads a set of GOES-R netCDF-formatted files             and writes the data to an MDV file.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters controlling debug outputs.");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("PROCESS PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Instance");
    tt->help = tdrpStrDup("Used for process registration");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("INPUT PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'trigger_mode'
    // ctype is '_trigger_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("trigger_mode");
    tt->descr = tdrpStrDup("Input triggering mode");
    tt->help = tdrpStrDup("In LATEST_DATA mode, the program will trigger whenever a new ldata file in the input_dir indicates that there is a new file ready to be processed.\nIn REALTIME mode, the program will trigger whenever a new file appears in the specified input directories that is ready to be processed.In FILE_LIST mode, the program operates on the input files specified on the command line.\n");
    tt->val_offset = (char *) &trigger_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("trigger_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LATEST_DATA");
      tt->enum_def.fields[0].val = LATEST_DATA;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
      tt->enum_def.fields[2].name = tdrpStrDup("FILE_LIST");
      tt->enum_def.fields[2].val = FILE_LIST;
    tt->single_val.e = FILE_LIST;
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("List of Input directories to watch");
    tt->help = tdrpStrDup("There can be one directory that is watched and recursed. It may be that there is a directory for each channel, band, or derived product.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("raw/g16");
    tt++;
    
    // Parameter 'max_valid_secs'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("max_valid_secs");
    tt->descr = tdrpStrDup("Maximum age of input data that will be processed in realtime, in seconds.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_valid_secs - &_start_;
    tt->single_val.l = 3600;
    tt++;
    
    // Parameter 'scene_sub_str'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("scene_sub_str");
    tt->descr = tdrpStrDup("Sub-string used in filename that identifies the scene or scan");
    tt->help = tdrpStrDup("For files named following the G-16 PUG, the names are: RadC, RadF, RadM1, and RadM2.");
    tt->val_offset = (char *) &scene_sub_str - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'channel_sub_str'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("channel_sub_str");
    tt->descr = tdrpStrDup("Sub-string used in filename that identifies the band or channel");
    tt->help = tdrpStrDup("For files named following the G-16 PUG, the level-1 names are: C01 through C16.");
    tt->val_offset = (char *) &channel_sub_str - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("OUTPUT PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_timestamp'
    // ctype is '_timestamp_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_timestamp");
    tt->descr = tdrpStrDup("Flag indicating how to time stamp the output file.");
    tt->help = tdrpStrDup("For TIMESTAMP_BEGIN, the time of the first line in the image will be used. For TIMESTAMP_END, the time of the last line in the image will be used. For TIMESTAMP_MIDDLE, the timestamp will be the average of the times of the first and last lines in the file.\n");
    tt->val_offset = (char *) &output_timestamp - &_start_;
    tt->enum_def.name = tdrpStrDup("timestamp_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIMESTAMP_BEGIN");
      tt->enum_def.fields[0].val = TIMESTAMP_BEGIN;
      tt->enum_def.fields[1].name = tdrpStrDup("TIMESTAMP_END");
      tt->enum_def.fields[1].val = TIMESTAMP_END;
      tt->enum_def.fields[2].name = tdrpStrDup("TIMESTAMP_MIDDLE");
      tt->enum_def.fields[2].val = TIMESTAMP_MIDDLE;
    tt->single_val.e = TIMESTAMP_MIDDLE;
    tt++;
    
    // Parameter 'expire_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("expire_offset");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &expire_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'output_vlevel_type'
    // ctype is '_vlevel_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_vlevel_type");
    tt->descr = tdrpStrDup("Vertical level type to use for the output fields.");
    tt->help = tdrpStrDup("By default, we use the satellite image vertical type, but some applications need a different vertical level type for the data. Note that the vertical level is set to 0.0, no matter what vertical type is chosen.");
    tt->val_offset = (char *) &output_vlevel_type - &_start_;
    tt->enum_def.name = tdrpStrDup("vlevel_type_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_TYPE_SURFACE");
      tt->enum_def.fields[0].val = VERT_TYPE_SURFACE;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_TYPE_Z");
      tt->enum_def.fields[1].val = VERT_TYPE_Z;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_SATELLITE_IMAGE");
      tt->enum_def.fields[2].val = VERT_SATELLITE_IMAGE;
      tt->enum_def.fields[3].name = tdrpStrDup("VERT_FLIGHT_LEVEL");
      tt->enum_def.fields[3].val = VERT_FLIGHT_LEVEL;
    tt->single_val.e = VERT_SATELLITE_IMAGE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output URL.");
    tt->help = tdrpStrDup("Output data is written to this URL.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'init_zero'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("init_zero");
    tt->descr = tdrpStrDup("Option to output data with zero rather than MISSING_DATA_VALIUE");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &init_zero - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("OUTPUT DOMAIN PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'out_projection'
    // ctype is '_projection_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("out_projection");
    tt->descr = tdrpStrDup("Projection for mapping in x,y. See projection param below.");
    tt->help = tdrpStrDup("\tPROJ_LATLON: simple lat/lon grid (Equidistant Cylindrical)\n\tPROJ_FLAT: Azimuthal Equidistant (Radar)\n\tPROJ_LAMBERT_CONF: Lambert Conformal Conic\n\tPROJ_LAMBERT_AZIM: Lambert Azimuthal Equal Area\n\tPROJ_MERCATOR: Mercator - EW orientation\n\tPROJ_TRANS_MERCATOR: Tranverse Mercator - NS orientation\n\tPROJ_POLAR_STEREO: Stereographic- polar aspect\n\tPROJ_OBLIQUE_STEREO: Stereographic - oblique aspect\n\tPROJ_ALBERS: Albers Equal Area Conic\n");
    tt->val_offset = (char *) &out_projection - &_start_;
    tt->enum_def.name = tdrpStrDup("projection_t");
    tt->enum_def.nfields = 9;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PROJ_LATLON");
      tt->enum_def.fields[0].val = PROJ_LATLON;
      tt->enum_def.fields[1].name = tdrpStrDup("PROJ_LAMBERT_CONF");
      tt->enum_def.fields[1].val = PROJ_LAMBERT_CONF;
      tt->enum_def.fields[2].name = tdrpStrDup("PROJ_MERCATOR");
      tt->enum_def.fields[2].val = PROJ_MERCATOR;
      tt->enum_def.fields[3].name = tdrpStrDup("PROJ_POLAR_STEREO");
      tt->enum_def.fields[3].val = PROJ_POLAR_STEREO;
      tt->enum_def.fields[4].name = tdrpStrDup("PROJ_FLAT");
      tt->enum_def.fields[4].val = PROJ_FLAT;
      tt->enum_def.fields[5].name = tdrpStrDup("PROJ_OBLIQUE_STEREO");
      tt->enum_def.fields[5].val = PROJ_OBLIQUE_STEREO;
      tt->enum_def.fields[6].name = tdrpStrDup("PROJ_TRANS_MERCATOR");
      tt->enum_def.fields[6].val = PROJ_TRANS_MERCATOR;
      tt->enum_def.fields[7].name = tdrpStrDup("PROJ_ALBERS");
      tt->enum_def.fields[7].val = PROJ_ALBERS;
      tt->enum_def.fields[8].name = tdrpStrDup("PROJ_LAMBERT_AZIM");
      tt->enum_def.fields[8].val = PROJ_LAMBERT_AZIM;
    tt->single_val.e = PROJ_FLAT;
    tt++;
    
    // Parameter 'out_grid'
    // ctype is '_grid_params_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("out_grid");
    tt->descr = tdrpStrDup("Grid parameters for remapping in x,y.");
    tt->help = tdrpStrDup("Units in km, except for LATLON, which is in degrees.");
    tt->val_offset = (char *) &out_grid - &_start_;
    tt->struct_def.name = tdrpStrDup("grid_params_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nx");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &out_grid.nx - (char *) &out_grid;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("ny");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &out_grid.ny - (char *) &out_grid;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("minx");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &out_grid.minx - (char *) &out_grid;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("miny");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &out_grid.miny - (char *) &out_grid;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("dx");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &out_grid.dx - (char *) &out_grid;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("dy");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &out_grid.dy - (char *) &out_grid;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 1;
      tt->struct_vals[1].i = 1;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].d = 0;
      tt->struct_vals[4].d = 1;
      tt->struct_vals[5].d = 1;
    tt++;
    
    // Parameter 'out_rotation'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("out_rotation");
    tt->descr = tdrpStrDup("Grid rotation.");
    tt->help = tdrpStrDup("This applies only to PROJ_FLAT projections.");
    tt->val_offset = (char *) &out_rotation - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'out_origin_lat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("out_origin_lat");
    tt->descr = tdrpStrDup("Grid origin latitude.");
    tt->help = tdrpStrDup("This applies to all projections except LATLON.");
    tt->val_offset = (char *) &out_origin_lat - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'out_origin_lon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("out_origin_lon");
    tt->descr = tdrpStrDup("Grid origin longitude.");
    tt->help = tdrpStrDup("This applies to all projections except LATLON.");
    tt->val_offset = (char *) &out_origin_lon - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'out_lat1'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("out_lat1");
    tt->descr = tdrpStrDup("Grid reference latitude 1.");
    tt->help = tdrpStrDup("This applies to LAMBERT_CONF and ALBERS projections.");
    tt->val_offset = (char *) &out_lat1 - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'out_lat2'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("out_lat2");
    tt->descr = tdrpStrDup("Grid reference latitude 2.");
    tt->help = tdrpStrDup("This applies to LAMBERT_CONF and ALBERS projections.");
    tt->val_offset = (char *) &out_lat2 - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'out_central_scale'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("out_central_scale");
    tt->descr = tdrpStrDup("Central scale for projections.");
    tt->help = tdrpStrDup("This applies to POLAR_STEREO, OBLIQUE_STEREO and TRANSVERSE_MERCATOR projections.");
    tt->val_offset = (char *) &out_central_scale - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'out_tangent_lat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("out_tangent_lat");
    tt->descr = tdrpStrDup("Tangent latitude (deg).");
    tt->help = tdrpStrDup("This applies to OBLIQUE_STEREO only.");
    tt->val_offset = (char *) &out_tangent_lat - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'out_tangent_lon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("out_tangent_lon");
    tt->descr = tdrpStrDup("Tangent longitude (deg).");
    tt->help = tdrpStrDup("This applies to OBLIQUE_STEREO and POLAR_STEREO.");
    tt->val_offset = (char *) &out_tangent_lon - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'out_pole_is_north'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("out_pole_is_north");
    tt->descr = tdrpStrDup("Flag indicating stereogtraphic is over the NORTH pole.");
    tt->help = tdrpStrDup("This applies to POLAR_STEREO. If false, the projection is over the south pole.");
    tt->val_offset = (char *) &out_pole_is_north - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'set_earth_radius'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_earth_radius");
    tt->descr = tdrpStrDup("Flag indicating that earth radius should be taken from earth_radius parameter.");
    tt->help = tdrpStrDup("If true, the earth's radius is taken from TaPjg staic class. radius is 6378.137 km");
    tt->val_offset = (char *) &set_earth_radius - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'earth_radius'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("earth_radius");
    tt->descr = tdrpStrDup("Alternate earth radius used in projective geometry caclulation.");
    tt->help = tdrpStrDup("Use set_earth_radius parameter to set radius in km.");
    tt->val_offset = (char *) &earth_radius - &_start_;
    tt->single_val.d = 6378.14;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("UNITS CONVERSION PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'convert_units'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("convert_units");
    tt->descr = tdrpStrDup("Flag indicating whether to convert the field units on output.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &convert_units - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'units_convert_type'
    // ctype is '_units_convert_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("units_convert_type");
    tt->descr = tdrpStrDup("Type of units conversion to do on the data before putting it into the MDV file.");
    tt->help = tdrpStrDup("Used only if convert_units is set to true.");
    tt->val_offset = (char *) &units_convert_type - &_start_;
    tt->enum_def.name = tdrpStrDup("units_convert_type_t");
    tt->enum_def.nfields = 1;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CONVERT_K_TO_C");
      tt->enum_def.fields[0].val = CONVERT_K_TO_C;
    tt->single_val.e = CONVERT_K_TO_C;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("CORRECT ALBEDO FOR SUN ANGLE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'correct_albedo_for_sun_angle'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("correct_albedo_for_sun_angle");
    tt->descr = tdrpStrDup("Option to correct albedo fields for sun angle.");
    tt->help = tdrpStrDup("If true, the albedo fields are corrected for sun incidence angle. This brigtens the scene at low sun angles.");
    tt->val_offset = (char *) &correct_albedo_for_sun_angle - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("ENCODING AND COMPRESSION CONVERSION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'out_data_prep'
    // ctype is '_data_out_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("out_data_prep");
    tt->descr = tdrpStrDup("Data prep for the output data.");
    tt->help = tdrpStrDup("This is only relevant when converting from float32 to int8 or int16 or if force_scale_change is set.");
    tt->val_offset = (char *) &out_data_prep - &_start_;
    tt->struct_def.name = tdrpStrDup("data_out_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("short_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &out_data_prep.short_name - (char *) &out_data_prep;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &out_data_prep.long_name - (char *) &out_data_prep;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &out_data_prep.units - (char *) &out_data_prep;
      tt->struct_def.fields[3].ftype = tdrpStrDup("encoding_type_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("encoding_type");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &out_data_prep.encoding_type - (char *) &out_data_prep;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("encoding_type_t");
        tt->struct_def.fields[3].enum_def.nfields = 4;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("ENCODING_ASIS");
        tt->struct_def.fields[3].enum_def.fields[0].val = ENCODING_ASIS;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("ENCODING_INT8");
        tt->struct_def.fields[3].enum_def.fields[1].val = ENCODING_INT8;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("ENCODING_INT16");
        tt->struct_def.fields[3].enum_def.fields[2].val = ENCODING_INT16;
        tt->struct_def.fields[3].enum_def.fields[3].name = tdrpStrDup("ENCODING_FLOAT32");
        tt->struct_def.fields[3].enum_def.fields[3].val = ENCODING_FLOAT32;
      tt->struct_def.fields[4].ftype = tdrpStrDup("compression_type_t");
      tt->struct_def.fields[4].fname = tdrpStrDup("compression_type");
      tt->struct_def.fields[4].ptype = ENUM_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &out_data_prep.compression_type - (char *) &out_data_prep;
        tt->struct_def.fields[4].enum_def.name = tdrpStrDup("compression_type_t");
        tt->struct_def.fields[4].enum_def.nfields = 9;
        tt->struct_def.fields[4].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[4].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[4].enum_def.fields[0].name = tdrpStrDup("COMPRESSION_ASIS");
        tt->struct_def.fields[4].enum_def.fields[0].val = COMPRESSION_ASIS;
        tt->struct_def.fields[4].enum_def.fields[1].name = tdrpStrDup("COMPRESSION_NONE");
        tt->struct_def.fields[4].enum_def.fields[1].val = COMPRESSION_NONE;
        tt->struct_def.fields[4].enum_def.fields[2].name = tdrpStrDup("COMPRESSION_RLE");
        tt->struct_def.fields[4].enum_def.fields[2].val = COMPRESSION_RLE;
        tt->struct_def.fields[4].enum_def.fields[3].name = tdrpStrDup("COMPRESSION_LZO");
        tt->struct_def.fields[4].enum_def.fields[3].val = COMPRESSION_LZO;
        tt->struct_def.fields[4].enum_def.fields[4].name = tdrpStrDup("COMPRESSION_ZLIB");
        tt->struct_def.fields[4].enum_def.fields[4].val = COMPRESSION_ZLIB;
        tt->struct_def.fields[4].enum_def.fields[5].name = tdrpStrDup("COMPRESSION_BZIP");
        tt->struct_def.fields[4].enum_def.fields[5].val = COMPRESSION_BZIP;
        tt->struct_def.fields[4].enum_def.fields[6].name = tdrpStrDup("COMPRESSION_GZIP");
        tt->struct_def.fields[4].enum_def.fields[6].val = COMPRESSION_GZIP;
        tt->struct_def.fields[4].enum_def.fields[7].name = tdrpStrDup("COMPRESSION_GZIP_VOL");
        tt->struct_def.fields[4].enum_def.fields[7].val = COMPRESSION_GZIP_VOL;
        tt->struct_def.fields[4].enum_def.fields[8].name = tdrpStrDup("COMPRESSION_TYPES_N");
        tt->struct_def.fields[4].enum_def.fields[8].val = COMPRESSION_TYPES_N;
      tt->struct_def.fields[5].ftype = tdrpStrDup("scaling_type_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("scaling_type");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &out_data_prep.scaling_type - (char *) &out_data_prep;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("scaling_type_t");
        tt->struct_def.fields[5].enum_def.nfields = 6;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("SCALING_ASIS");
        tt->struct_def.fields[5].enum_def.fields[0].val = SCALING_ASIS;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("SCALING_NONE");
        tt->struct_def.fields[5].enum_def.fields[1].val = SCALING_NONE;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("SCALING_ROUNDED");
        tt->struct_def.fields[5].enum_def.fields[2].val = SCALING_ROUNDED;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("SCALING_INTEGRAL");
        tt->struct_def.fields[5].enum_def.fields[3].val = SCALING_INTEGRAL;
        tt->struct_def.fields[5].enum_def.fields[4].name = tdrpStrDup("SCALING_DYNAMIC");
        tt->struct_def.fields[5].enum_def.fields[4].val = SCALING_DYNAMIC;
        tt->struct_def.fields[5].enum_def.fields[5].name = tdrpStrDup("SCALING_SPECIFIED");
        tt->struct_def.fields[5].enum_def.fields[5].val = SCALING_SPECIFIED;
      tt->struct_def.fields[6].ftype = tdrpStrDup("float");
      tt->struct_def.fields[6].fname = tdrpStrDup("scale");
      tt->struct_def.fields[6].ptype = FLOAT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &out_data_prep.scale - (char *) &out_data_prep;
      tt->struct_def.fields[7].ftype = tdrpStrDup("float");
      tt->struct_def.fields[7].fname = tdrpStrDup("bias");
      tt->struct_def.fields[7].ptype = FLOAT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &out_data_prep.bias - (char *) &out_data_prep;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("data");
      tt->struct_vals[1].s = tdrpStrDup("long_data");
      tt->struct_vals[2].s = tdrpStrDup("units");
      tt->struct_vals[3].e = ENCODING_ASIS;
      tt->struct_vals[4].e = COMPRESSION_ASIS;
      tt->struct_vals[5].e = SCALING_ASIS;
      tt->struct_vals[6].f = 1;
      tt->struct_vals[7].f = 0;
    tt++;
    
    // Parameter 'include_qc_field'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_qc_field");
    tt->descr = tdrpStrDup("Flag to include the QC field in the MDV output.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &include_qc_field - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'qc_data_prep'
    // ctype is '_data_out_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("qc_data_prep");
    tt->descr = tdrpStrDup("Data prep for the QC data.");
    tt->help = tdrpStrDup("This is only relevant when converting from float32 to int8 or int16 or if force_scale_change is set.");
    tt->val_offset = (char *) &qc_data_prep - &_start_;
    tt->struct_def.name = tdrpStrDup("data_out_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("short_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &qc_data_prep.short_name - (char *) &qc_data_prep;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &qc_data_prep.long_name - (char *) &qc_data_prep;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &qc_data_prep.units - (char *) &qc_data_prep;
      tt->struct_def.fields[3].ftype = tdrpStrDup("encoding_type_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("encoding_type");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &qc_data_prep.encoding_type - (char *) &qc_data_prep;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("encoding_type_t");
        tt->struct_def.fields[3].enum_def.nfields = 4;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("ENCODING_ASIS");
        tt->struct_def.fields[3].enum_def.fields[0].val = ENCODING_ASIS;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("ENCODING_INT8");
        tt->struct_def.fields[3].enum_def.fields[1].val = ENCODING_INT8;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("ENCODING_INT16");
        tt->struct_def.fields[3].enum_def.fields[2].val = ENCODING_INT16;
        tt->struct_def.fields[3].enum_def.fields[3].name = tdrpStrDup("ENCODING_FLOAT32");
        tt->struct_def.fields[3].enum_def.fields[3].val = ENCODING_FLOAT32;
      tt->struct_def.fields[4].ftype = tdrpStrDup("compression_type_t");
      tt->struct_def.fields[4].fname = tdrpStrDup("compression_type");
      tt->struct_def.fields[4].ptype = ENUM_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &qc_data_prep.compression_type - (char *) &qc_data_prep;
        tt->struct_def.fields[4].enum_def.name = tdrpStrDup("compression_type_t");
        tt->struct_def.fields[4].enum_def.nfields = 9;
        tt->struct_def.fields[4].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[4].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[4].enum_def.fields[0].name = tdrpStrDup("COMPRESSION_ASIS");
        tt->struct_def.fields[4].enum_def.fields[0].val = COMPRESSION_ASIS;
        tt->struct_def.fields[4].enum_def.fields[1].name = tdrpStrDup("COMPRESSION_NONE");
        tt->struct_def.fields[4].enum_def.fields[1].val = COMPRESSION_NONE;
        tt->struct_def.fields[4].enum_def.fields[2].name = tdrpStrDup("COMPRESSION_RLE");
        tt->struct_def.fields[4].enum_def.fields[2].val = COMPRESSION_RLE;
        tt->struct_def.fields[4].enum_def.fields[3].name = tdrpStrDup("COMPRESSION_LZO");
        tt->struct_def.fields[4].enum_def.fields[3].val = COMPRESSION_LZO;
        tt->struct_def.fields[4].enum_def.fields[4].name = tdrpStrDup("COMPRESSION_ZLIB");
        tt->struct_def.fields[4].enum_def.fields[4].val = COMPRESSION_ZLIB;
        tt->struct_def.fields[4].enum_def.fields[5].name = tdrpStrDup("COMPRESSION_BZIP");
        tt->struct_def.fields[4].enum_def.fields[5].val = COMPRESSION_BZIP;
        tt->struct_def.fields[4].enum_def.fields[6].name = tdrpStrDup("COMPRESSION_GZIP");
        tt->struct_def.fields[4].enum_def.fields[6].val = COMPRESSION_GZIP;
        tt->struct_def.fields[4].enum_def.fields[7].name = tdrpStrDup("COMPRESSION_GZIP_VOL");
        tt->struct_def.fields[4].enum_def.fields[7].val = COMPRESSION_GZIP_VOL;
        tt->struct_def.fields[4].enum_def.fields[8].name = tdrpStrDup("COMPRESSION_TYPES_N");
        tt->struct_def.fields[4].enum_def.fields[8].val = COMPRESSION_TYPES_N;
      tt->struct_def.fields[5].ftype = tdrpStrDup("scaling_type_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("scaling_type");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &qc_data_prep.scaling_type - (char *) &qc_data_prep;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("scaling_type_t");
        tt->struct_def.fields[5].enum_def.nfields = 6;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("SCALING_ASIS");
        tt->struct_def.fields[5].enum_def.fields[0].val = SCALING_ASIS;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("SCALING_NONE");
        tt->struct_def.fields[5].enum_def.fields[1].val = SCALING_NONE;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("SCALING_ROUNDED");
        tt->struct_def.fields[5].enum_def.fields[2].val = SCALING_ROUNDED;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("SCALING_INTEGRAL");
        tt->struct_def.fields[5].enum_def.fields[3].val = SCALING_INTEGRAL;
        tt->struct_def.fields[5].enum_def.fields[4].name = tdrpStrDup("SCALING_DYNAMIC");
        tt->struct_def.fields[5].enum_def.fields[4].val = SCALING_DYNAMIC;
        tt->struct_def.fields[5].enum_def.fields[5].name = tdrpStrDup("SCALING_SPECIFIED");
        tt->struct_def.fields[5].enum_def.fields[5].val = SCALING_SPECIFIED;
      tt->struct_def.fields[6].ftype = tdrpStrDup("float");
      tt->struct_def.fields[6].fname = tdrpStrDup("scale");
      tt->struct_def.fields[6].ptype = FLOAT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &qc_data_prep.scale - (char *) &qc_data_prep;
      tt->struct_def.fields[7].ftype = tdrpStrDup("float");
      tt->struct_def.fields[7].fname = tdrpStrDup("bias");
      tt->struct_def.fields[7].ptype = FLOAT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &qc_data_prep.bias - (char *) &qc_data_prep;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("QC");
      tt->struct_vals[1].s = tdrpStrDup("long_QC");
      tt->struct_vals[2].s = tdrpStrDup("units");
      tt->struct_vals[3].e = ENCODING_ASIS;
      tt->struct_vals[4].e = COMPRESSION_ASIS;
      tt->struct_vals[5].e = SCALING_ASIS;
      tt->struct_vals[6].f = 1;
      tt->struct_vals[7].f = 0;
    tt++;
    
    // Parameter 'include_rad_field'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_rad_field");
    tt->descr = tdrpStrDup("Flag to include the radiance field in the MDV output.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &include_rad_field - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rad_data_prep'
    // ctype is '_data_out_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("rad_data_prep");
    tt->descr = tdrpStrDup("Data prep for the radiance data.");
    tt->help = tdrpStrDup("This is only relevant when converting from float32 to int8 or int16 or if force_scale_change is set.");
    tt->val_offset = (char *) &rad_data_prep - &_start_;
    tt->struct_def.name = tdrpStrDup("data_out_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("short_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &rad_data_prep.short_name - (char *) &rad_data_prep;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &rad_data_prep.long_name - (char *) &rad_data_prep;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("units");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &rad_data_prep.units - (char *) &rad_data_prep;
      tt->struct_def.fields[3].ftype = tdrpStrDup("encoding_type_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("encoding_type");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &rad_data_prep.encoding_type - (char *) &rad_data_prep;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("encoding_type_t");
        tt->struct_def.fields[3].enum_def.nfields = 4;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("ENCODING_ASIS");
        tt->struct_def.fields[3].enum_def.fields[0].val = ENCODING_ASIS;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("ENCODING_INT8");
        tt->struct_def.fields[3].enum_def.fields[1].val = ENCODING_INT8;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("ENCODING_INT16");
        tt->struct_def.fields[3].enum_def.fields[2].val = ENCODING_INT16;
        tt->struct_def.fields[3].enum_def.fields[3].name = tdrpStrDup("ENCODING_FLOAT32");
        tt->struct_def.fields[3].enum_def.fields[3].val = ENCODING_FLOAT32;
      tt->struct_def.fields[4].ftype = tdrpStrDup("compression_type_t");
      tt->struct_def.fields[4].fname = tdrpStrDup("compression_type");
      tt->struct_def.fields[4].ptype = ENUM_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &rad_data_prep.compression_type - (char *) &rad_data_prep;
        tt->struct_def.fields[4].enum_def.name = tdrpStrDup("compression_type_t");
        tt->struct_def.fields[4].enum_def.nfields = 9;
        tt->struct_def.fields[4].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[4].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[4].enum_def.fields[0].name = tdrpStrDup("COMPRESSION_ASIS");
        tt->struct_def.fields[4].enum_def.fields[0].val = COMPRESSION_ASIS;
        tt->struct_def.fields[4].enum_def.fields[1].name = tdrpStrDup("COMPRESSION_NONE");
        tt->struct_def.fields[4].enum_def.fields[1].val = COMPRESSION_NONE;
        tt->struct_def.fields[4].enum_def.fields[2].name = tdrpStrDup("COMPRESSION_RLE");
        tt->struct_def.fields[4].enum_def.fields[2].val = COMPRESSION_RLE;
        tt->struct_def.fields[4].enum_def.fields[3].name = tdrpStrDup("COMPRESSION_LZO");
        tt->struct_def.fields[4].enum_def.fields[3].val = COMPRESSION_LZO;
        tt->struct_def.fields[4].enum_def.fields[4].name = tdrpStrDup("COMPRESSION_ZLIB");
        tt->struct_def.fields[4].enum_def.fields[4].val = COMPRESSION_ZLIB;
        tt->struct_def.fields[4].enum_def.fields[5].name = tdrpStrDup("COMPRESSION_BZIP");
        tt->struct_def.fields[4].enum_def.fields[5].val = COMPRESSION_BZIP;
        tt->struct_def.fields[4].enum_def.fields[6].name = tdrpStrDup("COMPRESSION_GZIP");
        tt->struct_def.fields[4].enum_def.fields[6].val = COMPRESSION_GZIP;
        tt->struct_def.fields[4].enum_def.fields[7].name = tdrpStrDup("COMPRESSION_GZIP_VOL");
        tt->struct_def.fields[4].enum_def.fields[7].val = COMPRESSION_GZIP_VOL;
        tt->struct_def.fields[4].enum_def.fields[8].name = tdrpStrDup("COMPRESSION_TYPES_N");
        tt->struct_def.fields[4].enum_def.fields[8].val = COMPRESSION_TYPES_N;
      tt->struct_def.fields[5].ftype = tdrpStrDup("scaling_type_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("scaling_type");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &rad_data_prep.scaling_type - (char *) &rad_data_prep;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("scaling_type_t");
        tt->struct_def.fields[5].enum_def.nfields = 6;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("SCALING_ASIS");
        tt->struct_def.fields[5].enum_def.fields[0].val = SCALING_ASIS;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("SCALING_NONE");
        tt->struct_def.fields[5].enum_def.fields[1].val = SCALING_NONE;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("SCALING_ROUNDED");
        tt->struct_def.fields[5].enum_def.fields[2].val = SCALING_ROUNDED;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("SCALING_INTEGRAL");
        tt->struct_def.fields[5].enum_def.fields[3].val = SCALING_INTEGRAL;
        tt->struct_def.fields[5].enum_def.fields[4].name = tdrpStrDup("SCALING_DYNAMIC");
        tt->struct_def.fields[5].enum_def.fields[4].val = SCALING_DYNAMIC;
        tt->struct_def.fields[5].enum_def.fields[5].name = tdrpStrDup("SCALING_SPECIFIED");
        tt->struct_def.fields[5].enum_def.fields[5].val = SCALING_SPECIFIED;
      tt->struct_def.fields[6].ftype = tdrpStrDup("float");
      tt->struct_def.fields[6].fname = tdrpStrDup("scale");
      tt->struct_def.fields[6].ptype = FLOAT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &rad_data_prep.scale - (char *) &rad_data_prep;
      tt->struct_def.fields[7].ftype = tdrpStrDup("float");
      tt->struct_def.fields[7].fname = tdrpStrDup("bias");
      tt->struct_def.fields[7].ptype = FLOAT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &rad_data_prep.bias - (char *) &rad_data_prep;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("radiance");
      tt->struct_vals[1].s = tdrpStrDup("long_radinace");
      tt->struct_vals[2].s = tdrpStrDup("units");
      tt->struct_vals[3].e = ENCODING_ASIS;
      tt->struct_vals[4].e = COMPRESSION_ASIS;
      tt->struct_vals[5].e = SCALING_ASIS;
      tt->struct_vals[6].f = 1;
      tt->struct_vals[7].f = 0;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
