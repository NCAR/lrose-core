/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program superResNexradII2Dsr
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("This application reads super resolution nexrad\nradar data and writes the beam data to an FMQ.\nSuper resolution data became available in 2008 with\nNOAAs Radar Operations Center (ROC) release of build 10\nsoftware. At this point, this application replaced\nthe earlier nexrad2dsr application.\n\nThe radar data consists of reflectivity (DBZ),\nradial velocity (VEL) and spectral width (SW) fields.\nAt the time of writing the nexrads are being fitted\nwith dual polarmetric abilities. Once this is complete\nthe dual pol data fields - ZDR, PHI and RHO - will also\nbe available. This application should cope with these\nfields as they become available.\n\nThis application can either read from a socket or read\nfrom input files. Input files are typically delivered\nvia LDM, however, as they arrive the files are NOT\nsuitable for reading by this program. The application\napps/ingest/src/superResNexradLdmUnzip\nshould be used to initially read the input files from\nLDM and write files that this application can read. The\nsuperResNexradLdmUnzip can optionally write to a scoket\nas well, and users who are interested in the highest tilt\nmay want to elect using a socket since it means that\nthey will not have to wait for the highest tilt before\nan end of volume can be triggered. But in general file based\ninput is the norm.\n\nNiles Oien February 2008");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("How much printing to do while running.");
    tt->help = tdrpStrDup("Set as appropriate.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_NONE");
      tt->enum_def.fields[0].val = DEBUG_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_HEADERS");
      tt->enum_def.fields[1].val = DEBUG_HEADERS;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[2].val = DEBUG_NORM;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_DATA");
      tt->enum_def.fields[3].val = DEBUG_DATA;
    tt->single_val.e = DEBUG_NONE;
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Where to read data from.");
    tt->help = tdrpStrDup("Set as appropriate.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("READ_ARCHIVE_FILES");
      tt->enum_def.fields[0].val = READ_ARCHIVE_FILES;
      tt->enum_def.fields[1].name = tdrpStrDup("READ_REALTIME_FILES");
      tt->enum_def.fields[1].val = READ_REALTIME_FILES;
      tt->enum_def.fields[2].name = tdrpStrDup("READ_SOCKET");
      tt->enum_def.fields[2].val = READ_SOCKET;
    tt->single_val.e = READ_ARCHIVE_FILES;
    tt++;
    
    // Parameter 'realtimeInput'
    // ctype is '_realtimeInput_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("realtimeInput");
    tt->descr = tdrpStrDup("If mode is READ_REALTIME_FILES then use these parameters.");
    tt->help = tdrpStrDup("Maximum file age (seconds), dir to watch, substring in filenames\nand boolean indicating if input files should be gzipped when\ndone with them (they compress very effectively).");
    tt->val_offset = (char *) &realtimeInput - &_start_;
    tt->struct_def.name = tdrpStrDup("realtimeInput_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("realtimeMaxAgeSec");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &realtimeInput.realtimeMaxAgeSec - (char *) &realtimeInput;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("realtimeDir");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &realtimeInput.realtimeDir - (char *) &realtimeInput;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("realtimeFilenameSubString");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &realtimeInput.realtimeFilenameSubString - (char *) &realtimeInput;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("realtimeGzipInput");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &realtimeInput.realtimeGzipInput - (char *) &realtimeInput;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 60;
      tt->struct_vals[1].s = tdrpStrDup("/Some/Directory/structure");
      tt->struct_vals[2].s = tdrpStrDup("Substring");
      tt->struct_vals[3].b = pFALSE;
    tt++;
    
    // Parameter 'socketInput'
    // ctype is '_socketInput_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("socketInput");
    tt->descr = tdrpStrDup("If mode is READ_SOCKET then use these parameters.");
    tt->help = tdrpStrDup("Host name and port number to connect to.");
    tt->val_offset = (char *) &socketInput - &_start_;
    tt->struct_def.name = tdrpStrDup("socketInput_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("socketHostName");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &socketInput.socketHostName - (char *) &socketInput;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("socketPortNum");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &socketInput.socketPortNum - (char *) &socketInput;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("tcpipHostName");
      tt->struct_vals[1].i = 5050;
    tt++;
    
    // Parameter 'archiveString'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("archiveString");
    tt->descr = tdrpStrDup("String to look for that signifies start of volume");
    tt->help = tdrpStrDup("Default should be OK for new data. Use the strings\ncommand if it is not.");
    tt->val_offset = (char *) &archiveString - &_start_;
    tt->single_val.s = tdrpStrDup("AR");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'byteSwap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("byteSwap");
    tt->descr = tdrpStrDup("Option to byte swap the input data.");
    tt->help = tdrpStrDup("This should be TRUE on a PC.");
    tt->val_offset = (char *) &byteSwap - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'resample'
    // ctype is '_resample_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("resample");
    tt->descr = tdrpStrDup("Beam geometry to resample to.");
    tt->help = tdrpStrDup("All beams are resampled to this geometry. This is needed\nfor the super res data.");
    tt->val_offset = (char *) &resample - &_start_;
    tt->struct_def.name = tdrpStrDup("resample_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("firstGateRangeKm");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &resample.firstGateRangeKm - (char *) &resample;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lastGateRangeKm");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &resample.lastGateRangeKm - (char *) &resample;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("gateSpacingKm");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &resample.gateSpacingKm - (char *) &resample;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("azIncDeg");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &resample.azIncDeg - (char *) &resample;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 2.125;
      tt->struct_vals[1].d = 300.125;
      tt->struct_vals[2].d = 0.25;
      tt->struct_vals[3].d = 0.5;
    tt++;
    
    // Parameter 'elevAction'
    // ctype is '_elev_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("elevAction");
    tt->descr = tdrpStrDup("Determines how elevation angles are handled.");
    tt->help = tdrpStrDup("ELEVATION_ASIS (default) Just use the elevation as reported\nELEVATION_ROUNDED Round the elevation as reported - see\n                  the roundElevDelta parameter.\nELEVATION_LOOKUP This allows a lookup table to be used to\n   translate the elevation as read by mapping ranges of\n   elevation angle to a single elevation. The lookup table\n   depends on the VCP number and is stored in a file. The\n   name of the file incorporates the VCP number (see the\n   vcpElevFilename parameter). The format of this file is\n   repaeated ASCI lines of the form\n\n   minElevation    maxElevation    elevation to use\n\n   Consider the following example lines :\n\n   0.0     1.0    0.5\n   1.0     2.0    1.45\n   2.0     3.0    2.4\n\n   This would have the result of using elevation 0.5 if\n   the elevation was in the range 0.0 to 1.0 degrees,\n   using 1.45 degrees for the range 1.0 to 2.0 and using\n   2.4 for the range 2.0 to 3.0\n\n   Elevations that do not lie within the specified ranges\n   will be passed on as is in this mode.");
    tt->val_offset = (char *) &elevAction - &_start_;
    tt->enum_def.name = tdrpStrDup("elev_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ELEVATION_ASIS");
      tt->enum_def.fields[0].val = ELEVATION_ASIS;
      tt->enum_def.fields[1].name = tdrpStrDup("ELEVATION_ROUNDED");
      tt->enum_def.fields[1].val = ELEVATION_ROUNDED;
      tt->enum_def.fields[2].name = tdrpStrDup("ELEVATION_LOOKUP");
      tt->enum_def.fields[2].val = ELEVATION_LOOKUP;
    tt->single_val.e = ELEVATION_ASIS;
    tt++;
    
    // Parameter 'roundElevDelta'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("roundElevDelta");
    tt->descr = tdrpStrDup("If elevAction is ELEVATION_ROUNDED then elevations will\nbe rounded to integer multiples of this value.");
    tt->help = tdrpStrDup("Set as appropriate.");
    tt->val_offset = (char *) &roundElevDelta - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'vcpElevFilename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vcpElevFilename");
    tt->descr = tdrpStrDup("If elevAction is ELEVATION_LOOKUP then the filename\nto read the lookup table from will be construed using this\nstring and the VCP number.");
    tt->help = tdrpStrDup("Set as appropriate.");
    tt->val_offset = (char *) &vcpElevFilename - &_start_;
    tt->single_val.s = tdrpStrDup("/some/dir/vcp_%03d.elev");
    tt++;
    
    // Parameter 'vcpElevSelectFilename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vcpElevSelectFilename");
    tt->descr = tdrpStrDup("Controls which field(s) to extract from which\nelevation. This is done by reading a file for each VCP.\nThe filename is construed from this string and the VCP\nnumber.");
    tt->help = tdrpStrDup("The format of this ASCII file is probably best illustrated\nby example. For the entries :\n\nDBZ[1] VEL[2] SW[2]\nDBZ[5] VEL[6] SW[6]\nDBZ[9] VEL[9] SW[9]\n\n in the first output tilt, the DBZ field will be\ntaken from input elevation 1, VEL\nand SW from input elevation 2. The next line\ndetermines that the second output tilt will be\nconstrued using the DBZ field from input elevation 5\nand VEL and SW from input elevation 6. The third line\ndetermines that the third output tilt will be construed\nusing the DBZ, VEL and SW from input elevation 9. The first\ninput tilt is number 1 (not 0)");
    tt->val_offset = (char *) &vcpElevSelectFilename - &_start_;
    tt->single_val.s = tdrpStrDup("/some/dir/vcp_%03d.elSelect");
    tt++;
    
    // Parameter 'fieldList'
    // ctype is '_fieldList_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fieldList");
    tt->descr = tdrpStrDup("List of fields that we want to output.");
    tt->help = tdrpStrDup("Set as appropriate. Output field names will be set\nto DBZ, VEL, SW, ZDR, PHI and RHO respectively.");
    tt->val_offset = (char *) &fieldList - &_start_;
    tt->struct_def.name = tdrpStrDup("fieldList_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("wantDBZ");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &fieldList.wantDBZ - (char *) &fieldList;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("wantVEL");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &fieldList.wantVEL - (char *) &fieldList;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("wantSW");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &fieldList.wantSW - (char *) &fieldList;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("wantZDR");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &fieldList.wantZDR - (char *) &fieldList;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("wantPHI");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &fieldList.wantPHI - (char *) &fieldList;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("wantRHO");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &fieldList.wantRHO - (char *) &fieldList;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].b = pTRUE;
      tt->struct_vals[2].b = pFALSE;
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].b = pFALSE;
      tt->struct_vals[5].b = pFALSE;
    tt++;
    
    // Parameter 'outputFmq'
    // ctype is '_output_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("outputFmq");
    tt->descr = tdrpStrDup("Specifications for the FMQ that we are to write to.");
    tt->help = tdrpStrDup("Set as appropriate, try to avoid overwrites. The delay is not done if\nthe input mode is READ_SOCKET.");
    tt->val_offset = (char *) &outputFmq - &_start_;
    tt->struct_def.name = tdrpStrDup("output_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("long");
      tt->struct_def.fields[0].fname = tdrpStrDup("fmqSizeBytes");
      tt->struct_def.fields[0].ptype = LONG_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &outputFmq.fmqSizeBytes - (char *) &outputFmq;
      tt->struct_def.fields[1].ftype = tdrpStrDup("long");
      tt->struct_def.fields[1].fname = tdrpStrDup("fmqNumSlots");
      tt->struct_def.fields[1].ptype = LONG_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &outputFmq.fmqNumSlots - (char *) &outputFmq;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("fmqCompress");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &outputFmq.fmqCompress - (char *) &outputFmq;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("fmqUrl");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &outputFmq.fmqUrl - (char *) &outputFmq;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("fmqMsgLogDir");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &outputFmq.fmqMsgLogDir - (char *) &outputFmq;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("fmqBlockingWrites");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &outputFmq.fmqBlockingWrites - (char *) &outputFmq;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("fmqBeamsPerRadarParams");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &outputFmq.fmqBeamsPerRadarParams - (char *) &outputFmq;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("delayAfterSendingParamsSecs");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &outputFmq.delayAfterSendingParamsSecs - (char *) &outputFmq;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].l = 25000000;
      tt->struct_vals[1].l = 6000;
      tt->struct_vals[2].b = pFALSE;
      tt->struct_vals[3].s = tdrpStrDup("fmqp:://localhost::fmq/dsRadar");
      tt->struct_vals[4].s = tdrpStrDup("/Some/Dir/");
      tt->struct_vals[5].b = pFALSE;
      tt->struct_vals[6].i = 30;
      tt->struct_vals[7].i = 0;
    tt++;
    
    // Parameter 'radarDesc'
    // ctype is '_radarDesc_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("radarDesc");
    tt->descr = tdrpStrDup("Specifications for the radar.");
    tt->help = tdrpStrDup("Set as appropriate.");
    tt->val_offset = (char *) &radarDesc - &_start_;
    tt->struct_def.name = tdrpStrDup("radarDesc_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("lat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &radarDesc.lat - (char *) &radarDesc;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &radarDesc.lon - (char *) &radarDesc;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("altKm");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &radarDesc.altKm - (char *) &radarDesc;
      tt->struct_def.fields[3].ftype = tdrpStrDup("long");
      tt->struct_def.fields[3].fname = tdrpStrDup("radarID");
      tt->struct_def.fields[3].ptype = LONG_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &radarDesc.radarID - (char *) &radarDesc;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("radarName");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &radarDesc.radarName - (char *) &radarDesc;
      tt->struct_def.fields[5].ftype = tdrpStrDup("string");
      tt->struct_def.fields[5].fname = tdrpStrDup("siteName");
      tt->struct_def.fields[5].ptype = STRING_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &radarDesc.siteName - (char *) &radarDesc;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("horizBeamWidth");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &radarDesc.horizBeamWidth - (char *) &radarDesc;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("vertBeamWidth");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &radarDesc.vertBeamWidth - (char *) &radarDesc;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 40;
      tt->struct_vals[1].d = -110;
      tt->struct_vals[2].d = 1.648;
      tt->struct_vals[3].l = 42;
      tt->struct_vals[4].s = tdrpStrDup("NEXRAD");
      tt->struct_vals[5].s = tdrpStrDup("Denver");
      tt->struct_vals[6].d = 1;
      tt->struct_vals[7].d = 1;
    tt++;
    
    // Parameter 'locationFromInput'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("locationFromInput");
    tt->descr = tdrpStrDup("Option to take lat, lon alt from input data\nrather than the radarDesc entry in the param file.");
    tt->help = tdrpStrDup("Generally OK to set this to true and trust the\nincoming datastream to get the location right.\nIt is set to FALSE by default for compatibility purposes.");
    tt->val_offset = (char *) &locationFromInput - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'message31SizeError'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("message31SizeError");
    tt->descr = tdrpStrDup("Number of bytes in message 31 is reported as being\nthis many bytes more than it actually is, ie.\nactualNumBytes = headerNumBytes - message31SizeError\nfor message type 31.");
    tt->help = tdrpStrDup("At the time of writing the error is 4 bytes. I think the\nerror is likely to remain, however, it is a parameter so that\nif it is ever fixed then we can account for that without a\nrecompile.");
    tt->val_offset = (char *) &message31SizeError - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'timeAction'
    // ctype is '_timeAction_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("timeAction");
    tt->descr = tdrpStrDup("How to set the time for a beam.");
    tt->help = tdrpStrDup("TIME_BEAM - take the time from the first beam. This may be\nconfusing, given that beams can be composites of different fields\nthat come from different rotations.\n\nTIME_FILENAME - take the time from the input filneame. Assumes\na 20080208_202933.nexDat naming convention.\n\nTIME_WALLCLOCK - Use current time.");
    tt->val_offset = (char *) &timeAction - &_start_;
    tt->enum_def.name = tdrpStrDup("timeAction_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIME_BEAM");
      tt->enum_def.fields[0].val = TIME_BEAM;
      tt->enum_def.fields[1].name = tdrpStrDup("TIME_FILENAME");
      tt->enum_def.fields[1].val = TIME_FILENAME;
      tt->enum_def.fields[2].name = tdrpStrDup("TIME_WALLCLOCK");
      tt->enum_def.fields[2].val = TIME_WALLCLOCK;
    tt->single_val.e = TIME_FILENAME;
    tt++;
    
    // Parameter 'timeOffsetSecs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("timeOffsetSecs");
    tt->descr = tdrpStrDup("Time offset to add, seconds, regardless of what timeAction\nis set to.");
    tt->help = tdrpStrDup("Typically will be 0.");
    tt->val_offset = (char *) &timeOffsetSecs - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'delay'
    // ctype is '_delay_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("delay");
    tt->descr = tdrpStrDup("Number of seconds to delay after sending a tilt\nand sending a volume.");
    tt->help = tdrpStrDup("May well both be 0. These dealys are not done if the\ninput mode is READ_SOCKET.");
    tt->val_offset = (char *) &delay - &_start_;
    tt->struct_def.name = tdrpStrDup("delay_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("delayPostTiltSecs");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &delay.delayPostTiltSecs - (char *) &delay;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("delayPostVolSecs");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &delay.delayPostVolSecs - (char *) &delay;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 0;
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'delayBeam'
    // ctype is '_delayBeam_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("delayBeam");
    tt->descr = tdrpStrDup("Option to delay some number of milliseconds\nafter sending a beam.");
    tt->help = tdrpStrDup("May be handy in some circumstances.");
    tt->val_offset = (char *) &delayBeam - &_start_;
    tt->struct_def.name = tdrpStrDup("delayBeam_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("delayPostBeam");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &delayBeam.delayPostBeam - (char *) &delayBeam;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("msDelayPostBeam");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &delayBeam.msDelayPostBeam - (char *) &delayBeam;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'requireAllFieldsInBeam'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("requireAllFieldsInBeam");
    tt->descr = tdrpStrDup("Option to require at least some non-missing data\nfor all fields in all beams.");
    tt->help = tdrpStrDup("It is strongly suggested that this be set TRUE.\nThe advantage of setting it to false is that if a beam\nhas data in one field and not in another - say, it has\nvelocity data but the reflectivity data are all missing - then\nthe non-missing data are passed on for the field for\nwhich they are available. The problem is that the all\nmissing data for the other field are also passed on. This\ncan cause problems for downstream processes - Titan,\nfor instance.");
    tt->val_offset = (char *) &requireAllFieldsInBeam - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'azOffset'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("azOffset");
    tt->descr = tdrpStrDup("Offset to add, degrees, in azimuths.");
    tt->help = tdrpStrDup("Typically will be 0.");
    tt->val_offset = (char *) &azOffset - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'reportAllMissing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("reportAllMissing");
    tt->descr = tdrpStrDup("Report when all fields in a beam are set to the\nthe missing value for the whole beam.");
    tt->help = tdrpStrDup("Independant of other debugging.");
    tt->val_offset = (char *) &reportAllMissing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'excludeAzRanges'
    // ctype is '_excludeAz_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("excludeAzRanges");
    tt->descr = tdrpStrDup("Unusual option to exclude ranges of azimuth.\nAzimuths range from 0 to 360 degrees inclusive.");
    tt->help = tdrpStrDup("Default is not to do this. It is really a debugging measure\nfor a specific case, but it may be handy in some debugging\n");
    tt->array_offset = (char *) &_excludeAzRanges - &_start_;
    tt->array_n_offset = (char *) &excludeAzRanges_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(excludeAz_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("excludeAz_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("minAz");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_excludeAzRanges->minAz - (char *) _excludeAzRanges;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("maxAz");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_excludeAzRanges->maxAz - (char *) _excludeAzRanges;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
