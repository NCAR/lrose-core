/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Mesonet2Spdb
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Mesonet2Spdb reads mesonet surface observations in ASCII format, converts them and writes them to an SPDB data base. The intended data format is modeled after that used by the Oklahoma mesonet. For details on the mesonet.org format, see http://www.mesonet.org/wiki/Public:MDF_Format. Extensions to this are supported as documented by this parameter file. Also see http://www.mesonet.org/index.php/dataMdfMts/dataController/getFile/201011220000/mdf/HTML/ for more details on some of the fields.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("PROGRAM MODES OF OPERATION.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file. In this mode it is optional to watch for a latest_data_info file. In ARCHIVE mode, it processes all of the data files in the input directory between the start and end times set on the command line. In FILELIST mode, it processes all of the files in the list specified on the command line. In FILELIST mode paths must be fully qualified with respect to the date and time - so if each date has a separate subdirectory the date part of the path must be included.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DATA FILE INPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory");
    tt->help = tdrpStrDup("Directory where input data files can be found.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./raw/aws");
    tt++;
    
    // Parameter 'latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_avail");
    tt->descr = tdrpStrDup("Set to true if there is a latest_data_info file available in the input directory.");
    tt->help = tdrpStrDup("REALTIME mode only.");
    tt->val_offset = (char *) &latest_data_info_avail - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max valid age of rdata input files in realtime mode (secs)");
    tt->help = tdrpStrDup("This the max valid age for an incoming file. The program will wait for a data file more recent than this age.");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'strict_subdir_check'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("strict_subdir_check");
    tt->descr = tdrpStrDup("When set, only checks input_dir for subdirs of the form YYYYMMDD");
    tt->help = tdrpStrDup("Only in REALTIME mode with latest_data_info_avail FALSE.");
    tt->val_offset = (char *) &strict_subdir_check - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'file_name_check'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("file_name_check");
    tt->descr = tdrpStrDup("When set, check file name contains specified sub-string.");
    tt->help = tdrpStrDup("See file_match_string.");
    tt->val_offset = (char *) &file_name_check - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'file_match_string'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("file_match_string");
    tt->descr = tdrpStrDup("Input filename match string");
    tt->help = tdrpStrDup("Files must contain this string to be processed");
    tt->val_offset = (char *) &file_match_string - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DATA FORMAT.");
    tt->comment_text = tdrpStrDup("The input data is in an ASCII file based on the mesonet.org format. See http://www.mesonet.org/wiki/Public:MDF_Format. The file is space-delimited and is organized by rows and columns. A single observation is stored per row. The fields are stored by columns, one column per field. If a row begins with '#' it is ignored as a comment. A row containing a '!' will be ignored as a version number line. A row containing 7 integers will be interpreted as the base time line: 'nfields base_year base_month base_day base_hour base_min base_sec'. This will be followed by a line containing a series of field labels, which will be used to interpret the data in each column.");
    tt++;
    
    // Parameter 'field_defs'
    // ctype is '_field_def_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("field_defs");
    tt->descr = tdrpStrDup("List of field definitions, associating the labels in the file with the field types. There can be more definitions than fields in the file - so you can use a master list even if some of the fields are absent in the files. Either SECS_SINCE_BASE_TIME or YEAR,MONTH,DAY,HOUR,MIN,SEC must appear, otherwise we do not know the observation time. Obs time is computed as the base time plus SECS_SINCE_BASE_TIME, if this is specified. Otherwise the YYYY,MM,DD,HH,MM,DD data it used to compute the time. If the LATITUDE,LONGITUDE,ELEVATION_M is not included in the data file, the station position information must be made available from a separate file - see station_location_file_path.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_field_defs - &_start_;
    tt->array_n_offset = (char *) &field_defs_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(field_def_t);
    tt->array_n = 33;
    tt->struct_def.name = tdrpStrDup("field_def_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("label");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_field_defs->label - (char *) _field_defs;
      tt->struct_def.fields[1].ftype = tdrpStrDup("field_type_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("ftype");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_field_defs->ftype - (char *) _field_defs;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("field_type_t");
        tt->struct_def.fields[1].enum_def.nfields = 34;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("STATION_ID");
        tt->struct_def.fields[1].enum_def.fields[0].val = STATION_ID;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("STATION_NUM");
        tt->struct_def.fields[1].enum_def.fields[1].val = STATION_NUM;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("SECS_SINCE_BASE_TIME");
        tt->struct_def.fields[1].enum_def.fields[2].val = SECS_SINCE_BASE_TIME;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("MINS_SINCE_BASE_TIME");
        tt->struct_def.fields[1].enum_def.fields[3].val = MINS_SINCE_BASE_TIME;
        tt->struct_def.fields[1].enum_def.fields[4].name = tdrpStrDup("YEAR");
        tt->struct_def.fields[1].enum_def.fields[4].val = YEAR;
        tt->struct_def.fields[1].enum_def.fields[5].name = tdrpStrDup("MONTH");
        tt->struct_def.fields[1].enum_def.fields[5].val = MONTH;
        tt->struct_def.fields[1].enum_def.fields[6].name = tdrpStrDup("DAY");
        tt->struct_def.fields[1].enum_def.fields[6].val = DAY;
        tt->struct_def.fields[1].enum_def.fields[7].name = tdrpStrDup("HOUR");
        tt->struct_def.fields[1].enum_def.fields[7].val = HOUR;
        tt->struct_def.fields[1].enum_def.fields[8].name = tdrpStrDup("MIN");
        tt->struct_def.fields[1].enum_def.fields[8].val = MIN;
        tt->struct_def.fields[1].enum_def.fields[9].name = tdrpStrDup("SEC");
        tt->struct_def.fields[1].enum_def.fields[9].val = SEC;
        tt->struct_def.fields[1].enum_def.fields[10].name = tdrpStrDup("LATITUDE");
        tt->struct_def.fields[1].enum_def.fields[10].val = LATITUDE;
        tt->struct_def.fields[1].enum_def.fields[11].name = tdrpStrDup("LONGITUDE");
        tt->struct_def.fields[1].enum_def.fields[11].val = LONGITUDE;
        tt->struct_def.fields[1].enum_def.fields[12].name = tdrpStrDup("ELEVATION_M");
        tt->struct_def.fields[1].enum_def.fields[12].val = ELEVATION_M;
        tt->struct_def.fields[1].enum_def.fields[13].name = tdrpStrDup("TEMP_C");
        tt->struct_def.fields[1].enum_def.fields[13].val = TEMP_C;
        tt->struct_def.fields[1].enum_def.fields[14].name = tdrpStrDup("MIN_TEMP_C");
        tt->struct_def.fields[1].enum_def.fields[14].val = MIN_TEMP_C;
        tt->struct_def.fields[1].enum_def.fields[15].name = tdrpStrDup("MAX_TEMP_C");
        tt->struct_def.fields[1].enum_def.fields[15].val = MAX_TEMP_C;
        tt->struct_def.fields[1].enum_def.fields[16].name = tdrpStrDup("DEWPOINT_C");
        tt->struct_def.fields[1].enum_def.fields[16].val = DEWPOINT_C;
        tt->struct_def.fields[1].enum_def.fields[17].name = tdrpStrDup("RH_PERCENT");
        tt->struct_def.fields[1].enum_def.fields[17].val = RH_PERCENT;
        tt->struct_def.fields[1].enum_def.fields[18].name = tdrpStrDup("WIND_DIRN_DEGT");
        tt->struct_def.fields[1].enum_def.fields[18].val = WIND_DIRN_DEGT;
        tt->struct_def.fields[1].enum_def.fields[19].name = tdrpStrDup("WIND_SPEED_MPS");
        tt->struct_def.fields[1].enum_def.fields[19].val = WIND_SPEED_MPS;
        tt->struct_def.fields[1].enum_def.fields[20].name = tdrpStrDup("WIND_GUST_MPS");
        tt->struct_def.fields[1].enum_def.fields[20].val = WIND_GUST_MPS;
        tt->struct_def.fields[1].enum_def.fields[21].name = tdrpStrDup("VISIBILITY_KM");
        tt->struct_def.fields[1].enum_def.fields[21].val = VISIBILITY_KM;
        tt->struct_def.fields[1].enum_def.fields[22].name = tdrpStrDup("EXTINCTION_PER_KM");
        tt->struct_def.fields[1].enum_def.fields[22].val = EXTINCTION_PER_KM;
        tt->struct_def.fields[1].enum_def.fields[23].name = tdrpStrDup("VERT_VIS_KM");
        tt->struct_def.fields[1].enum_def.fields[23].val = VERT_VIS_KM;
        tt->struct_def.fields[1].enum_def.fields[24].name = tdrpStrDup("CEILING_KM");
        tt->struct_def.fields[1].enum_def.fields[24].val = CEILING_KM;
        tt->struct_def.fields[1].enum_def.fields[25].name = tdrpStrDup("RVR_KM");
        tt->struct_def.fields[1].enum_def.fields[25].val = RVR_KM;
        tt->struct_def.fields[1].enum_def.fields[26].name = tdrpStrDup("PRESSURE_MB");
        tt->struct_def.fields[1].enum_def.fields[26].val = PRESSURE_MB;
        tt->struct_def.fields[1].enum_def.fields[27].name = tdrpStrDup("MSL_PRESSURE_MB");
        tt->struct_def.fields[1].enum_def.fields[27].val = MSL_PRESSURE_MB;
        tt->struct_def.fields[1].enum_def.fields[28].name = tdrpStrDup("MSL_PRESSURE_IN_HG");
        tt->struct_def.fields[1].enum_def.fields[28].val = MSL_PRESSURE_IN_HG;
        tt->struct_def.fields[1].enum_def.fields[29].name = tdrpStrDup("PRESS_TEND_MB");
        tt->struct_def.fields[1].enum_def.fields[29].val = PRESS_TEND_MB;
        tt->struct_def.fields[1].enum_def.fields[30].name = tdrpStrDup("PRECIP_LIQUID_MM");
        tt->struct_def.fields[1].enum_def.fields[30].val = PRECIP_LIQUID_MM;
        tt->struct_def.fields[1].enum_def.fields[31].name = tdrpStrDup("PRECIP_RATE_MMPH");
        tt->struct_def.fields[1].enum_def.fields[31].val = PRECIP_RATE_MMPH;
        tt->struct_def.fields[1].enum_def.fields[32].name = tdrpStrDup("SNOW_DEPTH_MM");
        tt->struct_def.fields[1].enum_def.fields[32].val = SNOW_DEPTH_MM;
        tt->struct_def.fields[1].enum_def.fields[33].name = tdrpStrDup("FIELD_UNKNOWN");
        tt->struct_def.fields[1].enum_def.fields[33].val = FIELD_UNKNOWN;
    tt->n_struct_vals = 66;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("STID");
      tt->struct_vals[1].e = STATION_ID;
      tt->struct_vals[2].s = tdrpStrDup("STNM");
      tt->struct_vals[3].e = STATION_NUM;
      tt->struct_vals[4].s = tdrpStrDup("TIME");
      tt->struct_vals[5].e = MINS_SINCE_BASE_TIME;
      tt->struct_vals[6].s = tdrpStrDup("SECS_SINCE_BASE_TIME");
      tt->struct_vals[7].e = SECS_SINCE_BASE_TIME;
      tt->struct_vals[8].s = tdrpStrDup("YEAR");
      tt->struct_vals[9].e = YEAR;
      tt->struct_vals[10].s = tdrpStrDup("MONTH");
      tt->struct_vals[11].e = MONTH;
      tt->struct_vals[12].s = tdrpStrDup("DAY");
      tt->struct_vals[13].e = DAY;
      tt->struct_vals[14].s = tdrpStrDup("HOUR");
      tt->struct_vals[15].e = HOUR;
      tt->struct_vals[16].s = tdrpStrDup("MIN");
      tt->struct_vals[17].e = MIN;
      tt->struct_vals[18].s = tdrpStrDup("SEC");
      tt->struct_vals[19].e = SEC;
      tt->struct_vals[20].s = tdrpStrDup("LATITUDE");
      tt->struct_vals[21].e = LATITUDE;
      tt->struct_vals[22].s = tdrpStrDup("LONGITUDE");
      tt->struct_vals[23].e = LONGITUDE;
      tt->struct_vals[24].s = tdrpStrDup("ELEVATION_M");
      tt->struct_vals[25].e = ELEVATION_M;
      tt->struct_vals[26].s = tdrpStrDup("TAIR");
      tt->struct_vals[27].e = TEMP_C;
      tt->struct_vals[28].s = tdrpStrDup("MIN_TEMP_C");
      tt->struct_vals[29].e = MIN_TEMP_C;
      tt->struct_vals[30].s = tdrpStrDup("MAX_TEMP_C");
      tt->struct_vals[31].e = MAX_TEMP_C;
      tt->struct_vals[32].s = tdrpStrDup("DEWPOINT_C");
      tt->struct_vals[33].e = DEWPOINT_C;
      tt->struct_vals[34].s = tdrpStrDup("RELH");
      tt->struct_vals[35].e = RH_PERCENT;
      tt->struct_vals[36].s = tdrpStrDup("WDIR");
      tt->struct_vals[37].e = WIND_DIRN_DEGT;
      tt->struct_vals[38].s = tdrpStrDup("WVEC");
      tt->struct_vals[39].e = WIND_SPEED_MPS;
      tt->struct_vals[40].s = tdrpStrDup("WMAX");
      tt->struct_vals[41].e = WIND_GUST_MPS;
      tt->struct_vals[42].s = tdrpStrDup("VISIBILITY_KM");
      tt->struct_vals[43].e = VISIBILITY_KM;
      tt->struct_vals[44].s = tdrpStrDup("EXTINCTION_PER_KM");
      tt->struct_vals[45].e = EXTINCTION_PER_KM;
      tt->struct_vals[46].s = tdrpStrDup("VERT_VIS_KM");
      tt->struct_vals[47].e = VERT_VIS_KM;
      tt->struct_vals[48].s = tdrpStrDup("CEILING_KM");
      tt->struct_vals[49].e = CEILING_KM;
      tt->struct_vals[50].s = tdrpStrDup("RVR_KM");
      tt->struct_vals[51].e = RVR_KM;
      tt->struct_vals[52].s = tdrpStrDup("PRES");
      tt->struct_vals[53].e = PRESSURE_MB;
      tt->struct_vals[54].s = tdrpStrDup("MSL_PRESSURE_MB");
      tt->struct_vals[55].e = MSL_PRESSURE_MB;
      tt->struct_vals[56].s = tdrpStrDup("MSL_PRESSURE_IN_HG");
      tt->struct_vals[57].e = MSL_PRESSURE_IN_HG;
      tt->struct_vals[58].s = tdrpStrDup("PRESS_TEND_MB");
      tt->struct_vals[59].e = PRESS_TEND_MB;
      tt->struct_vals[60].s = tdrpStrDup("RAIN");
      tt->struct_vals[61].e = PRECIP_LIQUID_MM;
      tt->struct_vals[62].s = tdrpStrDup("PRECIP_RATE_MMPH");
      tt->struct_vals[63].e = PRECIP_RATE_MMPH;
      tt->struct_vals[64].s = tdrpStrDup("SNOW_DEPTH_MM");
      tt->struct_vals[65].e = SNOW_DEPTH_MM;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("STATION LOCATION FILE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_station_location_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_station_location_file");
    tt->descr = tdrpStrDup("Set to TRUE to obtain the lat/lon form a station location file.");
    tt->help = tdrpStrDup("If FALSE, the LATITUDE,LONGITUDE,ELEVATION_M must be set in the data.");
    tt->val_offset = (char *) &use_station_location_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'station_location_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("station_location_file_path");
    tt->descr = tdrpStrDup("Path to station location file");
    tt->help = tdrpStrDup("If the do not contain lat/lon information, we must determine this from a separate file. The station location file should contain a four letter station identification followed by the latitude and longitude for each station to be processed, and the elevation in meters. Stations not in this file will be ignored.");
    tt->val_offset = (char *) &station_location_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./station_loc.txt");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("STATION FILTERING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_accepted_stations_list'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_accepted_stations_list");
    tt->descr = tdrpStrDup("Set to TRUE to use the acceptedStations list (below)");
    tt->help = tdrpStrDup("Only accept stations in this list.");
    tt->val_offset = (char *) &use_accepted_stations_list - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'accepted_stations'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("accepted_stations");
    tt->descr = tdrpStrDup("List of accepted station IDs");
    tt->help = tdrpStrDup("If a station is not on this list, it is not stored.");
    tt->array_offset = (char *) &_accepted_stations - &_start_;
    tt->array_n_offset = (char *) &accepted_stations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("KDEN");
      tt->array_vals[1].s = tdrpStrDup("KTLX");
    tt++;
    
    // Parameter 'use_rejected_stations_list'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_rejected_stations_list");
    tt->descr = tdrpStrDup("Set to TRUE to use the rejectedStations list (below)");
    tt->help = tdrpStrDup("Reject stations in this list.");
    tt->val_offset = (char *) &use_rejected_stations_list - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rejected_stations'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("rejected_stations");
    tt->descr = tdrpStrDup("List of rejected station IDs");
    tt->help = tdrpStrDup("If a station is not on this list, it is not stored.");
    tt->array_offset = (char *) &_rejected_stations - &_start_;
    tt->array_n_offset = (char *) &rejected_stations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("KDEN");
      tt->array_vals[1].s = tdrpStrDup("KTLX");
    tt++;
    
    // Parameter 'check_bounding_box'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_bounding_box");
    tt->descr = tdrpStrDup("Set to TRUE to check that observations are within a bounding box.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &check_bounding_box - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'bounding_box'
    // ctype is '_bbox_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("bounding_box");
    tt->descr = tdrpStrDup("Bounding box to check if checkBoundingBox is TRUE.");
    tt->help = tdrpStrDup("Only observations which fall inside this box will be stored.");
    tt->val_offset = (char *) &bounding_box - &_start_;
    tt->struct_def.name = tdrpStrDup("bbox_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_lat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &bounding_box.min_lat - (char *) &bounding_box;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_lat");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &bounding_box.max_lat - (char *) &bounding_box;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("min_lon");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &bounding_box.min_lon - (char *) &bounding_box;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("max_lon");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &bounding_box.max_lon - (char *) &bounding_box;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -90;
      tt->struct_vals[1].d = 90;
      tt->struct_vals[2].d = -180;
      tt->struct_vals[3].d = 180;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output URL for decoded station data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/mesonet");
    tt++;
    
    // Parameter 'expire_seconds'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("expire_seconds");
    tt->descr = tdrpStrDup("Expire time in seconds for each observation");
    tt->help = tdrpStrDup("This value will be added to the observation time to determine the expire time.");
    tt->val_offset = (char *) &expire_seconds - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'output_format'
    // ctype is '_output_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_format");
    tt->descr = tdrpStrDup("Format for data in SPDB");
    tt->help = tdrpStrDup("(a) STATION_REPORT - C-style struct. (b) WX_XML: XML");
    tt->val_offset = (char *) &output_format - &_start_;
    tt->enum_def.name = tdrpStrDup("output_format_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("STATION_REPORT");
      tt->enum_def.fields[0].val = STATION_REPORT;
      tt->enum_def.fields[1].name = tdrpStrDup("XML");
      tt->enum_def.fields[1].val = XML;
    tt->single_val.e = XML;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
