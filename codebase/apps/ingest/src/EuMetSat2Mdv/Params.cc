/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program EuMetSat2Mdv
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_VERBOSE_2");
      tt->enum_def.fields[3].val = DEBUG_VERBOSE_2;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROGRAM MODES OF OPERATION.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Program may be run in two modes, archive and realtime. In realtime mode, the analysis is performed for each volume scan as it becomes available. In archive mode, the file list is obtained from the command line.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'realtime_input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("realtime_input_dir");
    tt->descr = tdrpStrDup("Directory for input radar data - REALTIME mode.");
    tt->help = tdrpStrDup("The latest_data_info file in this directory is updated each time the model adds a forecast time step to the output file.");
    tt->val_offset = (char *) &realtime_input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'use_latest_data_info_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_latest_data_info_file");
    tt->descr = tdrpStrDup("Option to use latest_data_info file.");
    tt->help = tdrpStrDup("It true, the program will use the _latest_data_info file for identifying the incoming data file name. If false, it will scan the input directory.");
    tt->val_offset = (char *) &use_latest_data_info_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max age of input data - REALTIME mode.");
    tt->help = tdrpStrDup("For realtime only - max age of input data for it to be valid. If the latest_data_info file is older than this, the program waits for new data.");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'search_string'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_string");
    tt->descr = tdrpStrDup("Sub-string to be searched for in file path.");
    tt->help = tdrpStrDup("If not empty, only files with paths containing this string will be ingested. As an example, this is useful for only handling files from a given channel. If the string is set to HRV, only files for the HRV channel will be processed.");
    tt->val_offset = (char *) &search_string - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("OUTPUT FIELD DEFINITIONS.");
    tt->comment_text = tdrpStrDup("Using this section, you set up a pallette of possible output field characteristics. In the OUTPUT_FILE section, you then pick which of these fields are to be included in each output file.");
    tt++;
    
    // Parameter 'fields'
    // ctype is '_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("fields");
    tt->descr = tdrpStrDup("Field specification.");
    tt->help = tdrpStrDup("Specification for possible output fields. In the output_files section, you will then choose which of these fields will be included in each output file.\n\n  name: name of the field\n  channel_id: channel upon which the field is based\n  units: output units\n  output_encoding: encoding for field in output file\n\n");
    tt->array_offset = (char *) &_fields - &_start_;
    tt->array_n_offset = (char *) &fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(field_t);
    tt->array_n = 12;
    tt->struct_def.name = tdrpStrDup("field_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_fields->name - (char *) _fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("channel_id_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("channel_id");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_fields->channel_id - (char *) _fields;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("channel_id_t");
        tt->struct_def.fields[1].enum_def.nfields = 12;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("VIS006");
        tt->struct_def.fields[1].enum_def.fields[0].val = VIS006;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("VIS008");
        tt->struct_def.fields[1].enum_def.fields[1].val = VIS008;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("IR_016");
        tt->struct_def.fields[1].enum_def.fields[2].val = IR_016;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("IR_039");
        tt->struct_def.fields[1].enum_def.fields[3].val = IR_039;
        tt->struct_def.fields[1].enum_def.fields[4].name = tdrpStrDup("WV_062");
        tt->struct_def.fields[1].enum_def.fields[4].val = WV_062;
        tt->struct_def.fields[1].enum_def.fields[5].name = tdrpStrDup("WV_073");
        tt->struct_def.fields[1].enum_def.fields[5].val = WV_073;
        tt->struct_def.fields[1].enum_def.fields[6].name = tdrpStrDup("IR_087");
        tt->struct_def.fields[1].enum_def.fields[6].val = IR_087;
        tt->struct_def.fields[1].enum_def.fields[7].name = tdrpStrDup("IR_097");
        tt->struct_def.fields[1].enum_def.fields[7].val = IR_097;
        tt->struct_def.fields[1].enum_def.fields[8].name = tdrpStrDup("IR_108");
        tt->struct_def.fields[1].enum_def.fields[8].val = IR_108;
        tt->struct_def.fields[1].enum_def.fields[9].name = tdrpStrDup("IR_120");
        tt->struct_def.fields[1].enum_def.fields[9].val = IR_120;
        tt->struct_def.fields[1].enum_def.fields[10].name = tdrpStrDup("IR_134");
        tt->struct_def.fields[1].enum_def.fields[10].val = IR_134;
        tt->struct_def.fields[1].enum_def.fields[11].name = tdrpStrDup("HRV");
        tt->struct_def.fields[1].enum_def.fields[11].val = HRV;
      tt->struct_def.fields[2].ftype = tdrpStrDup("output_units_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("output_units");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_fields->output_units - (char *) _fields;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("output_units_t");
        tt->struct_def.fields[2].enum_def.nfields = 5;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("COUNT");
        tt->struct_def.fields[2].enum_def.fields[0].val = COUNT;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("RADIANCE");
        tt->struct_def.fields[2].enum_def.fields[1].val = RADIANCE;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("DEG_K");
        tt->struct_def.fields[2].enum_def.fields[2].val = DEG_K;
        tt->struct_def.fields[2].enum_def.fields[3].name = tdrpStrDup("DEG_C");
        tt->struct_def.fields[2].enum_def.fields[3].val = DEG_C;
        tt->struct_def.fields[2].enum_def.fields[4].name = tdrpStrDup("ALBEDO");
        tt->struct_def.fields[2].enum_def.fields[4].val = ALBEDO;
      tt->struct_def.fields[3].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("output_encoding");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_fields->output_encoding - (char *) _fields;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[3].enum_def.nfields = 3;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("OUT_INT8");
        tt->struct_def.fields[3].enum_def.fields[0].val = OUT_INT8;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("OUT_INT16");
        tt->struct_def.fields[3].enum_def.fields[1].val = OUT_INT16;
        tt->struct_def.fields[3].enum_def.fields[2].name = tdrpStrDup("OUT_FLOAT32");
        tt->struct_def.fields[3].enum_def.fields[2].val = OUT_FLOAT32;
    tt->n_struct_vals = 48;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("HRV");
      tt->struct_vals[1].e = HRV;
      tt->struct_vals[2].e = COUNT;
      tt->struct_vals[3].e = OUT_INT8;
      tt->struct_vals[4].s = tdrpStrDup("VIS006");
      tt->struct_vals[5].e = VIS006;
      tt->struct_vals[6].e = COUNT;
      tt->struct_vals[7].e = OUT_INT16;
      tt->struct_vals[8].s = tdrpStrDup("VIS008");
      tt->struct_vals[9].e = VIS008;
      tt->struct_vals[10].e = COUNT;
      tt->struct_vals[11].e = OUT_INT16;
      tt->struct_vals[12].s = tdrpStrDup("IR_016");
      tt->struct_vals[13].e = IR_016;
      tt->struct_vals[14].e = RADIANCE;
      tt->struct_vals[15].e = OUT_FLOAT32;
      tt->struct_vals[16].s = tdrpStrDup("IR_039");
      tt->struct_vals[17].e = IR_039;
      tt->struct_vals[18].e = DEG_C;
      tt->struct_vals[19].e = OUT_INT8;
      tt->struct_vals[20].s = tdrpStrDup("IR_087");
      tt->struct_vals[21].e = IR_087;
      tt->struct_vals[22].e = DEG_C;
      tt->struct_vals[23].e = OUT_INT8;
      tt->struct_vals[24].s = tdrpStrDup("IR_108");
      tt->struct_vals[25].e = IR_108;
      tt->struct_vals[26].e = DEG_C;
      tt->struct_vals[27].e = OUT_INT8;
      tt->struct_vals[28].s = tdrpStrDup("IR_120");
      tt->struct_vals[29].e = IR_120;
      tt->struct_vals[30].e = DEG_C;
      tt->struct_vals[31].e = OUT_INT8;
      tt->struct_vals[32].s = tdrpStrDup("WV_062");
      tt->struct_vals[33].e = WV_062;
      tt->struct_vals[34].e = DEG_K;
      tt->struct_vals[35].e = OUT_INT8;
      tt->struct_vals[36].s = tdrpStrDup("WV_073");
      tt->struct_vals[37].e = WV_073;
      tt->struct_vals[38].e = DEG_K;
      tt->struct_vals[39].e = OUT_INT8;
      tt->struct_vals[40].s = tdrpStrDup("IR_097");
      tt->struct_vals[41].e = IR_097;
      tt->struct_vals[42].e = DEG_K;
      tt->struct_vals[43].e = OUT_INT8;
      tt->struct_vals[44].s = tdrpStrDup("IR_134");
      tt->struct_vals[45].e = IR_134;
      tt->struct_vals[46].e = DEG_K;
      tt->struct_vals[47].e = OUT_INT8;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("CALIBRATION SOURCE.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'calibration_source'
    // ctype is '_calibration_source_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("calibration_source");
    tt->descr = tdrpStrDup("Source for parameter information.");
    tt->help = tdrpStrDup("At startup, the calibration values for each channel are set from the parameter file. If the source is PARAMETER_FILE_ONLY, these calibration values are never changed. For PROLOGUE_FILE, the calibration data is updated from the Hrit prologe files. For CALIBRATION_FILE, an ASCII calibration file is read each time the calibration is needed.");
    tt->val_offset = (char *) &calibration_source - &_start_;
    tt->enum_def.name = tdrpStrDup("calibration_source_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PARAMETER_FILE_ONLY");
      tt->enum_def.fields[0].val = PARAMETER_FILE_ONLY;
      tt->enum_def.fields[1].name = tdrpStrDup("PROLOGUE_FILE");
      tt->enum_def.fields[1].val = PROLOGUE_FILE;
      tt->enum_def.fields[2].name = tdrpStrDup("CALIBRATION_FILE");
      tt->enum_def.fields[2].val = CALIBRATION_FILE;
    tt->single_val.e = PROLOGUE_FILE;
    tt++;
    
    // Parameter 'calibration_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("calibration_file_path");
    tt->descr = tdrpStrDup("Path for calibration file.");
    tt->help = tdrpStrDup("See 'use_calibration_file'.");
    tt->val_offset = (char *) &calibration_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./cal_file");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("OUTPUT FILES.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_files'
    // ctype is '_output_file_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_files");
    tt->descr = tdrpStrDup("Output file information.");
    tt->help = tdrpStrDup("You create an entry for each output file required. You may set up multiple output files, on different grids and/or with different channels.\n\n  fields: comma-delimited list of fields\n  output_url: the URL for the output MDV files\n  projection: projection for the output grid\n  origin_lat: latitude origin for output grid, FLAT, LAMBERT only\n  origin_lon: longitude origin for output grid, FLAT, LAMBERT only\n  lambert_lat1: LAMBERT latitide 1, ignored for FLAT, LATLON\n  lambert_lat2: LAMBERT latitide 2, ignored for FLAT, LATLON\n  nx: number of grid points in x\n  ny: number of grid points in y\n  dx: grid resolution in x\n  dy: grid resolution in y\n  minx: X coord of center of SW grid cell\n  miny: Y coord of center of SW grid cell\n    Units for dx, dy, minx, miny: km for FLAT and LAMBERT\n                                  deg for LATLON\n\n");
    tt->array_offset = (char *) &_output_files - &_start_;
    tt->array_n_offset = (char *) &output_files_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_file_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("output_file_t");
    tt->struct_def.nfields = 13;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("fields");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_files->fields - (char *) _output_files;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_url");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_files->output_url - (char *) _output_files;
      tt->struct_def.fields[2].ftype = tdrpStrDup("projection_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("projection");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_files->projection - (char *) _output_files;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("projection_t");
        tt->struct_def.fields[2].enum_def.nfields = 3;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("OUTPUT_PROJ_LATLON");
        tt->struct_def.fields[2].enum_def.fields[0].val = OUTPUT_PROJ_LATLON;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("OUTPUT_PROJ_LAMBERT");
        tt->struct_def.fields[2].enum_def.fields[1].val = OUTPUT_PROJ_LAMBERT;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("OUTPUT_PROJ_FLAT");
        tt->struct_def.fields[2].enum_def.fields[2].val = OUTPUT_PROJ_FLAT;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("origin_lat");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_files->origin_lat - (char *) _output_files;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("origin_lon");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_files->origin_lon - (char *) _output_files;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("lambert_lat1");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_files->lambert_lat1 - (char *) _output_files;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("lambert_lat2");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_files->lambert_lat2 - (char *) _output_files;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("nx");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_output_files->nx - (char *) _output_files;
      tt->struct_def.fields[8].ftype = tdrpStrDup("int");
      tt->struct_def.fields[8].fname = tdrpStrDup("ny");
      tt->struct_def.fields[8].ptype = INT_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_output_files->ny - (char *) _output_files;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("minx");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_output_files->minx - (char *) _output_files;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("miny");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_output_files->miny - (char *) _output_files;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("dx");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_output_files->dx - (char *) _output_files;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("dy");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_output_files->dy - (char *) _output_files;
    tt->n_struct_vals = 26;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("VIS006,VIS008,IR_016,IR_039");
      tt->struct_vals[1].s = tdrpStrDup("mdv/sat/domain1");
      tt->struct_vals[2].e = OUTPUT_PROJ_LATLON;
      tt->struct_vals[3].d = 0;
      tt->struct_vals[4].d = 0;
      tt->struct_vals[5].d = 0;
      tt->struct_vals[6].d = 0;
      tt->struct_vals[7].i = 700;
      tt->struct_vals[8].i = 700;
      tt->struct_vals[9].d = -40;
      tt->struct_vals[10].d = -15;
      tt->struct_vals[11].d = 0.1;
      tt->struct_vals[12].d = 0.1;
      tt->struct_vals[13].s = tdrpStrDup("HRV,VIS006,VIS008,IR_016,IR_039");
      tt->struct_vals[14].s = tdrpStrDup("mdv/sat/domain2");
      tt->struct_vals[15].e = OUTPUT_PROJ_LATLON;
      tt->struct_vals[16].d = 0;
      tt->struct_vals[17].d = 0;
      tt->struct_vals[18].d = 0;
      tt->struct_vals[19].d = 0;
      tt->struct_vals[20].i = 1000;
      tt->struct_vals[21].i = 1000;
      tt->struct_vals[22].d = -40;
      tt->struct_vals[23].d = 5;
      tt->struct_vals[24].d = 0.03;
      tt->struct_vals[25].d = 0.03;
    tt++;
    
    // Parameter 'data_set_info'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_info");
    tt->descr = tdrpStrDup("Data set info.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_info - &_start_;
    tt->single_val.s = tdrpStrDup("This MDV file was created by EuMetSat2Mdv.");
    tt++;
    
    // Parameter 'data_set_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_name");
    tt->descr = tdrpStrDup("Data set name.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_name - &_start_;
    tt->single_val.s = tdrpStrDup("Satellite data.");
    tt++;
    
    // Parameter 'data_set_source'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_source");
    tt->descr = tdrpStrDup("Data set source details.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_source - &_start_;
    tt->single_val.s = tdrpStrDup("Satellite data from EuMetSat.");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
