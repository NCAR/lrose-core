/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */

/*********************************************************
 * parameter definitions for Grib2toNc
 *
 */

commentdef {
  p_header = "Grib2toNc PARAMETER FILE";
  p_text = "Grib2toNc creates NetCDF from grib2 data files\n";

}

commentdef {
  p_header = "PROGRAM MODES OF OPERATION.";
}

paramdef int {
  p_default = 0;
  p_descr = "Debug option";
  p_help = "0 = No Debug info\n"
	"1 = Regular Debug info\n"
	"2 = Full Grib2 file output (see printSec params).";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Instance";
  p_help = "Process instance for registration with process mapper";
} instance;

paramdef int {
  p_default = 1200;
  p_descr = "Interval for procmap registration";
  p_help = "Set to a high value if processing takes a long time. This will prevent the auto_restarter from killing and restarting the app.";
} procmap_register_interval_secs;

paramdef string {
  p_default = "./";
  p_descr = "Input directory";
  p_help = "Directory which contains input grib2 files. Used only "
           "if files are not specified on the command line";
} input_dir;

paramdef string {
  p_default = "";
  p_descr = "Input file suffix";
  p_help = "Input file suffixes will be checked against this string. "
           "Used only if files are not specified on the command line";
} input_suffix;

paramdef string {
  p_default = "";
  p_descr = "Input file substring check.";
  p_help = "Input files will be checked against this string."
           "Can be used to filter different forecast times."
           "Used only if files are not specified on the command line";
} input_substring;

paramdef int {             
  p_min = 60;
  p_default = 10800;
  p_descr = "Max age (in seconds) of input data";
  p_help = "Used only if files are not specified on the command line";
} max_input_data_age;

paramdef boolean {
  p_default = TRUE;
  p_descr = "If TRUE, watch input_dir for change in _latest_data_info.";
  p_help = "If FALSE, watch input_dir for new files.";
} latest_data_info_avail;

paramdef boolean {             
  p_default = TRUE;
  p_descr = "Option to recurse when searching for new files.";
  p_help = "Only applies if latest_data_info_avail is FALSE.";
} recursive_search;

paramdef boolean {             
  p_default = TRUE;
  p_descr = "Option to only process the latest file in directory.";
  p_help = "If TRUE, only the latest file will be processed. If FALSE, previously-written files will be processed.";
} latest_file_only;

paramdef int {             
  p_default = 5;
  p_descr = "How often to check for new data (secs).";
} data_check_interval_secs;

commentdef {
  p_header = "PRINT SECTIONS PARAMETERS";
  p_text = "Parameters only used with -printSec or debug > 1\n"
	"For each grib message prints the sections defined below\n";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "If TRUE prints the Indicator Section.";
  p_help = "Only prints with -printSec or debug > 1";
} printSec_is;

paramdef boolean {
  p_default = TRUE;
  p_descr = "If TRUE prints the Identification Section.";
  p_help = "Only prints with -printSec or debug > 1";
} printSec_ids;

paramdef boolean {
  p_default = FALSE;
  p_descr = "If TRUE prints the Local Use Section (if present).";
  p_help = "Only prints with -printSec or debug > 1";
} printSec_lus;

paramdef boolean {
  p_default = TRUE;
  p_descr = "If TRUE prints the Grid Definition Section.";
  p_help = "Only prints with -printSec or debug > 1";
} printSec_gds;

paramdef boolean {
  p_default = TRUE;
  p_descr = "If TRUE prints the Product Definition Section.";
  p_help = "Only prints with -printSec or debug > 1";
} printSec_pds;

paramdef boolean {
  p_default = TRUE;
  p_descr = "If TRUE prints the Data Representation Section.";
  p_help = "Only prints with -printSec or debug > 1";
} printSec_drs;

paramdef boolean {
  p_default = FALSE;
  p_descr = "If TRUE prints the Bit-map Section.";
  p_help = "Only prints with -printSec or debug > 1";
} printSec_bms;

paramdef boolean {
  p_default = FALSE;
  p_descr = "If TRUE prints the Data Section.";
  p_help = "Only prints with -printSec or debug > 1";
} printSec_ds;

commentdef {
  p_header = "NETCDF OUTPUT PARAMETERS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to limit the lead time of output files.";
  p_help = "If set, we check the lead time before writing files.";
} check_lead_time;

paramdef int {             
  p_default = 86400;
  p_descr = "Maximum lead time for output files (secs).";
  p_help = "See 'check_lead_time'.";
} max_lead_time_secs;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to always output lead time variables.";
  p_help = "This forcess output of forecast_period and forecast_reference_time even when lead_time is 0. "
           "Used for model data to have output files all contain the same variables.";
} force_lead_time_output;

paramdef string {
  p_default = "./nc";
  p_descr = "Directory for output files";
  p_help = "write_to_day_dir and output_filename directories are added to this base directory";
} output_dir;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to output to a day YYYMMDD directory within the output_dir.";
} write_to_day_dir;

typedef enum { 
  ISO8601_FILENAME,
  TDS_FILENAME,
  RAP_FILENAME,
  CSS_WX_FILENAME
} filename_t;

paramdef enum filename_t {
  p_default = TDS_FILENAME;
  p_descr = "Selection of output filenaming convention to use";
  p_help = "Filenaming options:  \n"
           "   (parenthesis is lead_time of model run if non zero)\n"
           "ISO8601_FILENAME:  YYYY-MM-DDTHH:MM:SS(.PTHR:SS).nc\n"
           "TDS_FILENAME:      YYYYMMDD_HHMMSS(_fHR.SS).nc\n"
           "RAP_FILENAME:      YYYYMMDD/HHMMSS.nc or (YYYYMMDD/g_HHMMSS/f_leadSeconds.nc)\n"
           "CSS_WX_FILENAME:   YYYYMMDD_v_HHMMSS_l_leadSeconds.grb2";
} output_filename;

paramdef string {
  p_default = "";
  p_descr = "Optional basename added to begining of filename.";
  p_help = "";
} output_basename;

paramdef boolean
{
  p_default = true;
  p_descr = "Write _latest_data_info files for output data.";
  p_help = "If false, will suppress writing of _latest_data_info files.";
} writeLdataInfo;

paramdef string {
  p_default = "Converted to NetCDF from Grib2 with Grib2toNc from NCAR-RAL.";
  p_descr = "Data set info.";
  p_help = "This is placed in the netcdf file 'history'.";
} data_set_info;

paramdef string {
  p_default = "";
  p_descr = "This is set automatically from the grib2 file.\n"
            "DO NOT SET except to override.";
  p_help = "This is placed in the netcdf file as 'title'.";
} data_set_title;

paramdef string {
  p_default = "";
  p_descr = "This is set automatically from the grib2 file.\n"
            "DO NOT SET except to override.";
  p_help = "This is placed in the netcdf file as 'source'.";
} data_set_source;

typedef enum {
  DATA_PACK_GRIB = 0,
  DATA_PACK_NONE = 5,
  DATA_PACK_BYTE = 1,
  DATA_PACK_SHORT = 3
} data_pack_t;

typedef enum { 
  NO_CHANGE = 0,
  MPS_TO_KNOTS = 1,
  M_TO_KM = 2,
  M_TO_100FT = 3,
  PASCALS_TO_MBAR = 4,
  KELVIN_TO_CELCIUS = 5,
  KGPKG_TO_GPKG = 6,
  PERCENT_TO_FRACTION = 7,
  FRACTION_TO_PERCENT = 8,
  M_TO_FT = 9,
  M_TO_MI = 10,
  M_TO_KFT = 11 
} out_units_t;

typedef enum {
  BAD_VALUE = 0,
  UNKNOWN_VALUE = 1,
  USER_DEFINED = 2,
} qc_default_t;

typedef struct {
  string param;
  string level;
  string field_name;
  string standard_name;
  out_units_t units;
  double upper_range_limit;
  double lower_range_limit;
  data_pack_t packing_type;
  qc_default_t qc_default_type;
  double qc_default_value;
  int vert_level_min;
  int vert_level_max;
  int vert_level_dz;
  double scale_factor;
  double add_offset;
} out_field_t;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Flag to process all fields";
  p_help = "If TRUE, all fields will be processed.\n"
           "If FALSE, only fields listed in output_fields list will be processed";
} process_everything;

paramdef struct out_field_t {
  p_descr = "List of output fields to process, descibed by the field parameter and vertical level type\n";
  p_help = "To determine the available params and levels, use the command line argument -printSummary -file [filename]\n"
  "  No Nc output will be created, only a list of params and associated levels contained"
  " in the GRIB file.\n"
  "                                 \n"
  "NOTE: process_everything must be set to FALSE to use this list.\n"
  "                                 \n"
  "out_field_t structure definition:\n"
  "  param:string GRIB2 product ID.\n"
  "  level:string GRIB2 level ID.\n"
  "  field_name:string Short field name. Overrides default name.\n"
  "                  Use empty string to keep default (param) name.\n"
  "  standard_name:string CF compliant standard name.\n"
  "                see: http://cfconventions.org/Data/cf-standard-names\n"
  "                     /28/build/cf-standard-name-table.html\n"
  "  out_units:out_units_t simple unit conversion utility. Options are:\n"
  "    NO_CHANGE            -- no change to units\n"
  "    MPS_TO_KNOTS         -- convert m/s to knots\n"
  "    M_TO_KM              -- convert meters to kilometers\n"
  "    M_TO_FT              -- convert meters to feet, \n"
  "    M_TO_MI              -- convert meters to miles, \n"
  "    M_TO_100FT           -- convert meters to 100's of feet, \n"
  "                            flight levels\n"
  "    PASCALS_TO_MBAR      -- convert pascals to millibars\n"
  "    KELVIN_TO_CELCIUS    -- convert degrees kelvin to to degrees\n"
  "                            celcius\n"
  "    KGPKG_TO_GPKG        -- convert kilogram per kilogram to gram\n"
  "                            per kilogram\n"
  "    PERCENT_TO_FRACTION  -- convert percentage to fraction, values\n"
  "                            between 0 and 1\n"
  "    FRACTION_TO_PERCENT  -- convert fraction to percentage, values\n"
  "                            between 0 and 100\n"
  "                                           \n" 
  "   upper_range_limit:double upper limit threshold for field.\n" 
  "   lower_range_limit:double lower limit threshold for field. \n"
  "                            When both upper and lower limits are set\n"
  "                            to zero no thresholds are applied.\n"
  " \n"
  "  packing_type:data_pack_t  Output variable packing type\n"
  "    DATA_PACK_GRIB       -- Pack using the Grib2 information\n"
  "    DATA_PACK_NONE       -- Do not pack, keep data as floats\n"
  "    DATA_PACK_BYTE       -- Pack data as 8bit bytes\n"
  "    DATA_PACK_SHORT      -- Pack data as 16bit shorts\n"
  " \n"
  "  qc_default_type:qc_default_t Replacement value for inputs outside\n"
  "                               of the range_limit\n"
  "  qc_default_value:double User defined replacement value.\n"
  " \n"
  "  vert_level_min:int minimum integer level that will be processed\n"
  "                     (If set to -1, no restrictions will be set.)\n"
  "  vert_level_max:int maximum integer level that will be processed\n"
  "                     (If set to -1, no restrictions will be set.)\n"
  "  vert_level_dz: index (not value) change in vertical levels to\n"
  "                 process.   1 = every level, 2 = every other.\n"
  " \n"
  "  scale_factor:double Force a particular scale factor value\n"
  "                 (Only used when DATA_PACK_BYTE or DATA_PACK_SHORT)\n"
  "                 (0.0 to calculate this value dynamically)\n"
  "  add_offset:double Force a particular add offset value\n"
  "                    (Only used when scale_factor != 0.0 and \n"
  "                    DATA_PACK_BYTE or DATA_PACK_SHORT)\n"
  "     \n"
  "Default behavior is to process everything with no changes";
  p_default = {{"PRES", "HYBL", "", "pressure", NO_CHANGE, 0.0, 0.0, DATA_PACK_NONE, BAD_VALUE, 0.0, -1, -1, 1, 0.0, 0.0}};
} output_fields[];

paramdef enum data_pack_t {
  p_default = DATA_PACK_NONE;
  p_descr = "File wide packing type, Used only when process_everything is true.";
} packing_type;

typedef enum {
  CLASSIC = 0,
  OFFSET64BITS = 1,
  NETCDF4 = 2,
  NETCDF4_CLASSIC = 3
} file_format_t;

paramdef enum file_format_t {
  p_default = NETCDF4_CLASSIC;
  p_descr = "Netcdf output format type.";
  p_help = "Classic         netCDF classic format (i.e. version 1 format) \n"
           "Offset64Bits    netCDF 64-bit offset format         \n"                
           "Netcdf4         netCDF-4 using HDF5 format          \n"                
           "Netcdf4Classic  netCDF-4 using HDF5 format using only netCDF-3 calls";
} file_format;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress field data. Default is true.";
  p_help = "Only applies to NETCDF4 and NETCDF4_CLASSIC files.";
} compress_data;

paramdef int {
  p_default = 5;
  p_descr = "Compression level from 1 to 9 with 9 being the greatest compression. Default is 9.";
  p_help = "Only applies to NETCDF4 and NETCDF4_CLASSIC files.";
} compression_level;

paramdef boolean {
  p_default = true;
  p_descr = "Option to force vertical dimension chunk size to be 1.";
  p_help = "Dynamically scales other dimensions chunk sizes to keep under max_chunk_size.\n"
           "Only applies to NETCDF4 and NETCDF4_CLASSIC files.";
} force_zchunk_size;

paramdef int {
  p_default = 1048576;
  p_descr = "Maximum requested chunk size, in bytes.";
  p_help = "Only applies with force_zchunk_size and NETCDF4 and NETCDF4_CLASSIC files.";
} max_chunk_size;

paramdef boolean {
  p_default = true;
  p_descr = "Option to include latitutde and longitude auxillary variables.";
  p_help = "Only applies to non lat/lon grids as those already have lat/lon.";
} include_lat_lon;

paramdef boolean {
  p_default = FALSE;
  p_descr = "If TRUE remaps output.";
  p_help = "";
} remap_output;

typedef enum {
  PROJ_LATLON		= 0,
  PROJ_LAMBERT_CONF	= 3
} projection_t;

typedef struct {
  projection_t type;
  double rotation;
  double origin_lat;
  double origin_lon;
  double ref_lat_1;
  double ref_lat_2;
} projection_info_t;

paramdef struct projection_info_t {
  p_descr = "This is the user defined projection";
  p_help = "If remap_output is true this defines the projection to remap too."
           "The choice of projections are PROJ_LATLON and PROJ_LAMBERT_CONF "
           "PROJ_LATLON is a latitude/longitude projection, and if "
           "it is chosen the remaining parameters can be ignored. "
	   "PROJ_LAMBERT_CONF is a Lambert "
           "conformal projection, and if it is chosen the parameters origin_lat, "
           "origin_lon, ref_lat_1 and ref_lat_2 must be set.";
  p_default = {PROJ_LAMBERT_CONF, 0.0, 25.0, -95.0, 25.0, 25.0};
} out_projection_info; 
  
typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_info_t;

paramdef struct grid_info_t {
  p_descr = "This is the user defined grid";
  p_help = "if remap_output is true this defines the grid info for the remap.";
  p_default = {301, 225, -3332.142334, -588.890442, 20.318001, 20.318001};
} out_grid_info; 

paramdef string {
  p_default = ""; 
  p_descr = "Option to override the vlevels in the vlevel header of the specified level types.";
  p_help = "If not empty, will replace the vlevels of variables with the specified vlevel type with those specified in 'vlevel_array'.\n"
           "Normal vlevel types to replace are: 'SIGL', 'SIGMA', or 'HYBL'.\n"
           "Please note using this functionality can create incorrect levels, use carefully!";
} override_vlevels;

typedef struct {
  string longName;
  string standardName;
  string units;
} vlevel_info_t;

paramdef struct vlevel_info_t {
  p_descr = "This is the user defined vertical level information";
  p_help = "if override_velevels is true this defines the names/units for the vlevel_array.";
  p_default = {"", "", ""};
} vlevel_info; 

paramdef double {
  p_default = 0;
  p_descr = "vlevel values to override what is already in the file.";
  p_help = "See 'override_vlevels'.";
} vlevel_array[];

