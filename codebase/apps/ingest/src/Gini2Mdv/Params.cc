/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Gini2Mdv
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Convert satellite data in GINI format into MDV.\nInput data is in uncalibrated counts, and a calibration\ntable is generated for the interpretation of the data.Calibration parameters are specified below.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed");
    tt->val_offset = (char *) &debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'calibration_log_file'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("calibration_log_file");
    tt->descr = tdrpStrDup("Path and filename for log of calibration data and curves.");
    tt->help = tdrpStrDup("Used to debug the generation of calibration curves.");
    tt->val_offset = (char *) &calibration_log_file - &_start_;
    tt->single_val.s = tdrpStrDup("calibration.log");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_op_mode'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Program may be run in three modes,\nARCHIVE - filelist specified on command line\nREALTIME - a directory is monitored for _latest_data_info\nREALTIME_DIR - a directory is monitored for newly added files");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("op_mode");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
      tt->enum_def.fields[2].name = tdrpStrDup("REALTIME_DIR");
      tt->enum_def.fields[2].val = REALTIME_DIR;
    tt->single_val.e = REALTIME_DIR;
    tt++;
    
    // Parameter 'run_archive_once'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("run_archive_once");
    tt->descr = tdrpStrDup("Run once for archive mode option");
    tt->help = tdrpStrDup("If set, archive mode will not traverse backwards to find data");
    tt->val_offset = (char *) &run_archive_once - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'archive_search_mode'
    // ctype is '_op_search_mode'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("archive_search_mode");
    tt->descr = tdrpStrDup("Archive time constraint");
    tt->help = tdrpStrDup("Archive mode may look for the nearest time, nearest time before, or nearest time after\nNEAREST - Find file with data time closest to run time\nNEAREST_BEFORE - Find file with data time immediately before run time\nNEAREST_AFTER - Find file with data time immediately after run time");
    tt->val_offset = (char *) &archive_search_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("op_search_mode");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("NEAREST");
      tt->enum_def.fields[0].val = NEAREST;
      tt->enum_def.fields[1].name = tdrpStrDup("NEAREST_BEFORE");
      tt->enum_def.fields[1].val = NEAREST_BEFORE;
      tt->enum_def.fields[2].name = tdrpStrDup("NEAREST_AFTER");
      tt->enum_def.fields[2].val = NEAREST_AFTER;
    tt->single_val.e = NEAREST;
    tt++;
    
    // Parameter 'process_partial_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("process_partial_files");
    tt->descr = tdrpStrDup("If TRUE, when a file does not contain as much data as it's header indicates it should,\nthe file will still be processed.");
    tt->help = tdrpStrDup("if FALSE, in archive mode, with run_archive_once set to FALSE, incomplete data will trigger a backwards search for a complete set.");
    tt->val_offset = (char *) &process_partial_files - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'wait_for_archive_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("wait_for_archive_data");
    tt->descr = tdrpStrDup("If you are running in archive mode, but on 'real time' data, you may want to set this to TRUE so that partial files will wait for completion.");
    tt->help = tdrpStrDup("This option has no effect if you are running in real time mode.");
    tt->val_offset = (char *) &wait_for_archive_data - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DATA INPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_data_array'
    // ctype is '_input_data_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("input_data_array");
    tt->descr = tdrpStrDup("Input data structure\n   base_directory: Input directory location (should be one level\n      above any date-based subdirectories).\n   short_mdv_field_name: Sets the output Mdv field name for the\n      data field.\n   long_mdv_field_name: Sets a descriptive field name in the output\n      Mdv file.\n   file_template: Template used to identify input file. Embedded time\n and date stamp follow strftime conventions.\n e.g. VIS_%Y%m%d_%H%M\n   calibration_curve_name: Calibration curve name (must correspond to\n      an entry in the calibration_data[] array specified below.\n   mandatory_data_status: Boolean indicating whether or not\n      processing is strictly dependent upon the existence of this\n      data set. If false, processing will proceed even if the\n      corresponding data file is unavailable. In that case, the field\n      will be uniformly populated with values defined by the\n      bad_or_missing_output_value parameter in the corresponding\n      calibration curve.\n   exclusion_str: If this string is part of the file name, the file\n      will not be processed (e.g., '.gz').\n");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_input_data_array - &_start_;
    tt->array_n_offset = (char *) &input_data_array_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(input_data_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("input_data_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("base_directory");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_input_data_array->base_directory - (char *) _input_data_array;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("short_mdv_field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_input_data_array->short_mdv_field_name - (char *) _input_data_array;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_mdv_field_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_input_data_array->long_mdv_field_name - (char *) _input_data_array;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("file_template");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_input_data_array->file_template - (char *) _input_data_array;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("calibration_curve_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_input_data_array->calibration_curve_name - (char *) _input_data_array;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("mandatory_data_status");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_input_data_array->mandatory_data_status - (char *) _input_data_array;
      tt->struct_def.fields[6].ftype = tdrpStrDup("string");
      tt->struct_def.fields[6].fname = tdrpStrDup("exclusion_str");
      tt->struct_def.fields[6].ptype = STRING_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_input_data_array->exclusion_str - (char *) _input_data_array;
    tt->n_struct_vals = 21;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("gini/east/1km/vis");
      tt->struct_vals[1].s = tdrpStrDup("VISIBLE");
      tt->struct_vals[2].s = tdrpStrDup("visible");
      tt->struct_vals[3].s = tdrpStrDup("VIS_%Y%m%d_%H%M");
      tt->struct_vals[4].s = tdrpStrDup("vis");
      tt->struct_vals[5].b = pFALSE;
      tt->struct_vals[6].s = tdrpStrDup("gz");
      tt->struct_vals[7].s = tdrpStrDup("gini/east/4km/IR");
      tt->struct_vals[8].s = tdrpStrDup("IR");
      tt->struct_vals[9].s = tdrpStrDup("infrared");
      tt->struct_vals[10].s = tdrpStrDup("IR_%Y%m%d_%H%M");
      tt->struct_vals[11].s = tdrpStrDup("infrared");
      tt->struct_vals[12].b = pTRUE;
      tt->struct_vals[13].s = tdrpStrDup("gz");
      tt->struct_vals[14].s = tdrpStrDup("gini/east/4km/SWIR");
      tt->struct_vals[15].s = tdrpStrDup("SW_IR");
      tt->struct_vals[16].s = tdrpStrDup("short wave IR");
      tt->struct_vals[17].s = tdrpStrDup("3.9_%Y%m%d_%H%M");
      tt->struct_vals[18].s = tdrpStrDup("shortwave");
      tt->struct_vals[19].b = pTRUE;
      tt->struct_vals[20].s = tdrpStrDup("gz");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("TIMING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'append_date_subdirectory'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_date_subdirectory");
    tt->descr = tdrpStrDup("Flag to add date subdirectory to realtime directories");
    tt->help = tdrpStrDup("Used to add a YYYYMMDD subdirectory to the realtimedirectory specified by input_data_array[]");
    tt->val_offset = (char *) &append_date_subdirectory - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'new_file_timeout'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("new_file_timeout");
    tt->descr = tdrpStrDup("Seconds to monitor the appearance of additional new data files once the first has appeared.");
    tt->help = tdrpStrDup("Gini2Mdv is capable of simultaneously monitoring multiple input directories. Most input directories are populated with new data within moments of one another. The Gini2Mdv application attempts to wait for all input directories to be updated before processing. The newFileTimeout parameter is the time (in seconds) to monitor input directories for new files after the first new file has appeared in another directory.");
    tt->val_offset = (char *) &new_file_timeout - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'max_valid_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_valid_age_secs");
    tt->descr = tdrpStrDup("Max age of input data");
    tt->help = tdrpStrDup("Maximum age (secs) for input file to be valid");
    tt->val_offset = (char *) &max_valid_age_secs - &_start_;
    tt->single_val.i = 600;
    tt++;
    
    // Parameter 'lookback_step'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("lookback_step");
    tt->descr = tdrpStrDup("Interval to check for data in archive mode");
    tt->help = tdrpStrDup("Interval time (secs) to look for data");
    tt->val_offset = (char *) &lookback_step - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'zero_seconds_on_output'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("zero_seconds_on_output");
    tt->descr = tdrpStrDup("Option to force generation time to values on the minute");
    tt->help = tdrpStrDup("This option keeps keeps any clock drift for data originator entering MDV output. The drift is appearing in the hundredth of a second filed in the Product Definition Block");
    tt->val_offset = (char *) &zero_seconds_on_output - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sleep_before_repeating_directory_search'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sleep_before_repeating_directory_search");
    tt->descr = tdrpStrDup("Number of seconds to sleep between attempts to check input directories for new files");
    tt->help = tdrpStrDup("Input directories are inspected periodically for new files. This parameter determines the number of seconds between inspections");
    tt->val_offset = (char *) &sleep_before_repeating_directory_search - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("OUTPUT PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Used to build URL for output MDV data.");
    tt->help = tdrpStrDup("Output URL is mdvp:://<OUTHOST>::<OUTDIR>");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'data_set_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_name");
    tt->descr = tdrpStrDup("Name of data set (e.g., GINI Eastern CONUS)");
    tt->help = tdrpStrDup("Included in Mdv master header");
    tt->val_offset = (char *) &data_set_name - &_start_;
    tt->single_val.s = tdrpStrDup("Gini data");
    tt++;
    
    // Parameter 'data_set_source'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_source");
    tt->descr = tdrpStrDup("Name of data source");
    tt->help = tdrpStrDup("Included in Mdv master header");
    tt->val_offset = (char *) &data_set_source - &_start_;
    tt->single_val.s = tdrpStrDup("Gini");
    tt++;
    
    // Parameter 'sector_designator_for_data_fill'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sector_designator_for_data_fill");
    tt->descr = tdrpStrDup("Determines which sector parameters (EastCONUS or WestCONUS) are used to fill missing data");
    tt->help = tdrpStrDup("Should be EastCONUS or WestCONUS");
    tt->val_offset = (char *) &sector_designator_for_data_fill - &_start_;
    tt->single_val.s = tdrpStrDup("EastCONUS");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("OUTPUT GRID PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'GridRemap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("GridRemap");
    tt->descr = tdrpStrDup("If set to TRUE then the data are remapped onto another grid.");
    tt->help = tdrpStrDup("If set to FALSE then the native grid is output.\nAt the time of writing only Lambert Conformal input grids\nare supported.");
    tt->val_offset = (char *) &GridRemap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'GridParams'
    // ctype is '_output_grid_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("GridParams");
    tt->descr = tdrpStrDup("Output grid parameters.");
    tt->help = tdrpStrDup("The grid params for the output grid.");
    tt->val_offset = (char *) &GridParams - &_start_;
    tt->struct_def.name = tdrpStrDup("output_grid_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nx");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &GridParams.nx - (char *) &GridParams;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("ny");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &GridParams.ny - (char *) &GridParams;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("minx");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &GridParams.minx - (char *) &GridParams;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("miny");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &GridParams.miny - (char *) &GridParams;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("dx");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &GridParams.dx - (char *) &GridParams;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("dy");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &GridParams.dy - (char *) &GridParams;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 656;
      tt->struct_vals[1].i = 896;
      tt->struct_vals[2].d = -500;
      tt->struct_vals[3].d = -589.2;
      tt->struct_vals[4].d = 5.0795;
      tt->struct_vals[5].d = 5.0795;
    tt++;
    
    // Parameter 'GridLambert_lat1'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("GridLambert_lat1");
    tt->descr = tdrpStrDup("lat 1 value for Lambert conformal projection.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &GridLambert_lat1 - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'GridLambert_lat2'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("GridLambert_lat2");
    tt->descr = tdrpStrDup("lat 2 value for Lambert conformal projection.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &GridLambert_lat2 - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'GridOrigin'
    // ctype is '_output_origin_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("GridOrigin");
    tt->descr = tdrpStrDup("Origin of output grid.");
    tt->help = tdrpStrDup("Used with PROJ_FLAT and PROJ_LAMBERT.");
    tt->val_offset = (char *) &GridOrigin - &_start_;
    tt->struct_def.name = tdrpStrDup("output_origin_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("lat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &GridOrigin.lat - (char *) &GridOrigin;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &GridOrigin.lon - (char *) &GridOrigin;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 25;
      tt->struct_vals[1].d = -95;
    tt++;
    
    // Parameter 'GridProjection'
    // ctype is '_output_projection_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("GridProjection");
    tt->descr = tdrpStrDup("Projection of output grid.");
    tt->help = tdrpStrDup("FLAT - (x,y) Cartesian data in km from a given origin.\nLATLON - lat/lon grid with constant grid spacing.\nLAMBERT - Lambert conformal projection.");
    tt->val_offset = (char *) &GridProjection - &_start_;
    tt->enum_def.name = tdrpStrDup("output_projection_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PROJ_FLAT");
      tt->enum_def.fields[0].val = PROJ_FLAT;
      tt->enum_def.fields[1].name = tdrpStrDup("PROJ_LATLON");
      tt->enum_def.fields[1].val = PROJ_LATLON;
      tt->enum_def.fields[2].name = tdrpStrDup("PROJ_LAMBERT");
      tt->enum_def.fields[2].val = PROJ_LAMBERT;
    tt->single_val.e = PROJ_LAMBERT;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("CALIBRATION CURVE PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'calibration_data'
    // ctype is '_calibration_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("calibration_data");
    tt->descr = tdrpStrDup("Calibration curve parameters\n   name: Calibration curve name (e.g., VIS, IR, WV, etc.).\n   units: Calibration curve units (e.g., Percent, Celsius, etc.).\n   bad_or_missing_output_value: Float specifying the output\n      representation of bad or missing data (e.g., -9999.0).\n   min_threshold: Float representing the lower limit of the\n      calibrated data. Input (uncalibrated) values that do not\n      satisfy this minimum are assigned output (calibrated) values\n      based on the bad_or_missing_output_value parameter.\n   max_threshold: Float representing the upper limit of the\n      calibrated data. Input (uncalibrated) values that exceed this\n      limit are assigned output (calibrated) values based on the\n      bad_or_missing_output_value parameter.\n   bad_input_values (0-255): A comma-delimited string of integers\n      representing input values that represent bad data. Some input\n      values are reserved to indicate bad or missing data.\n   x_values (0-255): A comma-delimited string of integers\n      representing the input calibration data.\n   offset_coeffs: A comma-delimited string of floats representing\n      intercept values (e.g., a in y = a + bx + cx^2).\n   linear_coeffs: A comma-delimited string of floats representing\n      linear values (e.g., b in y = a + bx + cx^2).\n   quadratic_coeffs: A comma-delimited string of floats representing\n      quadratic values (e.g., c in y = a + bx + cx^2).");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_calibration_data - &_start_;
    tt->array_n_offset = (char *) &calibration_data_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(calibration_t);
    tt->array_n = 5;
    tt->struct_def.name = tdrpStrDup("calibration_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_calibration_data->name - (char *) _calibration_data;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("units");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_calibration_data->units - (char *) _calibration_data;
      tt->struct_def.fields[2].ftype = tdrpStrDup("float");
      tt->struct_def.fields[2].fname = tdrpStrDup("bad_or_missing_output_value");
      tt->struct_def.fields[2].ptype = FLOAT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_calibration_data->bad_or_missing_output_value - (char *) _calibration_data;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("min_threshold");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_calibration_data->min_threshold - (char *) _calibration_data;
      tt->struct_def.fields[4].ftype = tdrpStrDup("float");
      tt->struct_def.fields[4].fname = tdrpStrDup("max_threshold");
      tt->struct_def.fields[4].ptype = FLOAT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_calibration_data->max_threshold - (char *) _calibration_data;
      tt->struct_def.fields[5].ftype = tdrpStrDup("string");
      tt->struct_def.fields[5].fname = tdrpStrDup("bad_input_values");
      tt->struct_def.fields[5].ptype = STRING_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_calibration_data->bad_input_values - (char *) _calibration_data;
      tt->struct_def.fields[6].ftype = tdrpStrDup("string");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_values");
      tt->struct_def.fields[6].ptype = STRING_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_calibration_data->x_values - (char *) _calibration_data;
      tt->struct_def.fields[7].ftype = tdrpStrDup("string");
      tt->struct_def.fields[7].fname = tdrpStrDup("offset_coeffs");
      tt->struct_def.fields[7].ptype = STRING_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_calibration_data->offset_coeffs - (char *) _calibration_data;
      tt->struct_def.fields[8].ftype = tdrpStrDup("string");
      tt->struct_def.fields[8].fname = tdrpStrDup("linear_coeffs");
      tt->struct_def.fields[8].ptype = STRING_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_calibration_data->linear_coeffs - (char *) _calibration_data;
      tt->struct_def.fields[9].ftype = tdrpStrDup("string");
      tt->struct_def.fields[9].fname = tdrpStrDup("quadratic_coeffs");
      tt->struct_def.fields[9].ptype = STRING_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_calibration_data->quadratic_coeffs - (char *) _calibration_data;
    tt->n_struct_vals = 50;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("vis");
      tt->struct_vals[1].s = tdrpStrDup("Percent");
      tt->struct_vals[2].f = -9999;
      tt->struct_vals[3].f = 0;
      tt->struct_vals[4].f = 100;
      tt->struct_vals[5].s = tdrpStrDup("0, 255");
      tt->struct_vals[6].s = tdrpStrDup("255");
      tt->struct_vals[7].s = tdrpStrDup("0.0");
      tt->struct_vals[8].s = tdrpStrDup("0.0");
      tt->struct_vals[9].s = tdrpStrDup("0.00153787");
      tt->struct_vals[10].s = tdrpStrDup("shortwave");
      tt->struct_vals[11].s = tdrpStrDup("Celsius");
      tt->struct_vals[12].f = -9999;
      tt->struct_vals[13].f = 0;
      tt->struct_vals[14].f = 0;
      tt->struct_vals[15].s = tdrpStrDup("0, 255");
      tt->struct_vals[16].s = tdrpStrDup("175, 255");
      tt->struct_vals[17].s = tdrpStrDup("56.84, 144.84");
      tt->struct_vals[18].s = tdrpStrDup("-0.5, -1.0");
      tt->struct_vals[19].s = tdrpStrDup("0.0, 0.0");
      tt->struct_vals[20].s = tdrpStrDup("infrared");
      tt->struct_vals[21].s = tdrpStrDup("Celsius");
      tt->struct_vals[22].f = -9999;
      tt->struct_vals[23].f = 0;
      tt->struct_vals[24].f = 0;
      tt->struct_vals[25].s = tdrpStrDup("0, 255");
      tt->struct_vals[26].s = tdrpStrDup("175, 255");
      tt->struct_vals[27].s = tdrpStrDup("56.84, 144.84");
      tt->struct_vals[28].s = tdrpStrDup("-0.5, -1.0");
      tt->struct_vals[29].s = tdrpStrDup("0.0, 0.0");
      tt->struct_vals[30].s = tdrpStrDup("watervapor");
      tt->struct_vals[31].s = tdrpStrDup("Celsius");
      tt->struct_vals[32].f = -9999;
      tt->struct_vals[33].f = 0;
      tt->struct_vals[34].f = 0;
      tt->struct_vals[35].s = tdrpStrDup("0, 255");
      tt->struct_vals[36].s = tdrpStrDup("175, 255");
      tt->struct_vals[37].s = tdrpStrDup("56.84, 144.84");
      tt->struct_vals[38].s = tdrpStrDup("-0.5, -1.0");
      tt->struct_vals[39].s = tdrpStrDup("0.0, 0.0");
      tt->struct_vals[40].s = tdrpStrDup("longwave");
      tt->struct_vals[41].s = tdrpStrDup("Celsius");
      tt->struct_vals[42].f = -9999;
      tt->struct_vals[43].f = 0;
      tt->struct_vals[44].f = 0;
      tt->struct_vals[45].s = tdrpStrDup("0, 255");
      tt->struct_vals[46].s = tdrpStrDup("175, 255");
      tt->struct_vals[47].s = tdrpStrDup("56.84, 144.84");
      tt->struct_vals[48].s = tdrpStrDup("-0.5, -1.0");
      tt->struct_vals[49].s = tdrpStrDup("0.0, 0.0");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
