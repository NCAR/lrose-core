/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// parameter definitions for GpmHdf5ToMdv
//
// Mike Dixon, EOL, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// May 2021
//

commentdef {
  p_header = "GpmHdf5ToMdv";
  p_text = "This program converts GPM swath data, in HDF5, to MDV/NetCDF.";
};

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef boolean {
  p_default = false;
  p_descr = "Option to register with procmap while running.";
  p_help = "See 'instance'.";
} register_with_procmap;

paramdef int {
  p_default = 60;
  p_descr = "Registration interval.";
  p_help = "The number of seconds between expected procmap registrations.";
} reg_interval;

commentdef {
  p_header = "DATA INPUT";
}

typedef enum {
  ARCHIVE, REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = ARCHIVE;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file. "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in FILELIST mode, at least) MUST contain a "
           "day-directory below the data file -- ./data_file.mdv will not "
           "work as a file path";
} mode;

paramdef string {
  p_default = "raw/input";
  p_descr = "Directory for input data.";
  p_help = "This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, the file paths are specified on the command line.";
} input_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to use _latest_data_info file as input trigger.";
  p_help = "REALTIME mode only. If true, waits on _latest_data_info file. If false, scans the directory for new file.";
} use_ldata_info_file;

paramdef int {
  p_default = 3600;
  p_min = 1;
  p_descr = "Max valid age of rdata input files in realtime mode (secs)";
  p_help = "This the max valid age for an incoming file. The program will wait for a data file more recent than this age.";
} max_realtime_age;

paramdef boolean {
  p_default = true;
  p_descr = "Option to use only the latest file to have arrived.";
  p_help = "REALTIME mode only. If true, will process only the latest file on startup, if the file has an age less than max_realtime_age. If false, on startup will process all files with age less than max_realtime_age.";
} process_latest_file_only;

paramdef string {
  p_default = "";
  p_descr = "Specify the extension of the files to be read.";
  p_help = "If blank, all extensions will be used.";
} file_name_ext;

paramdef string {
  p_default = "";
  p_descr = "Specify a seach string for the names of the files to be read.";
  p_help = "If blank, no check will be performed.";
} file_name_substr;

commentdef {
  p_header = "Z dimension details";
}

paramdef double {
  p_default = 0.0;
  p_descr = "Height of lowest level (km)";
} radar_min_z_km;

paramdef double {
  p_default = 0.125;
  p_descr = "Delta height between levels (km)";
} radar_delta_z_km;

paramdef boolean {
  p_default = true;
  p_descr = "Option to remap the radar gates onto specified output levels.";
  p_help = "The radar gate spacing is 125m. This is quite fine for a full 3-D grid. So often it makes sense to remap onto a specified vertical grid, with fewer levels.";
} remap_gates_to_vert_levels;

paramdef double {
  p_default = {
    0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0

  };
  p_descr = "Z levels to which radar data is remapped on output (km)";
  p_help = "For DBZ, we take the max to perform the remapping.";
} output_z_levels_km[];

commentdef {
  p_header = "OUTPUT FIELDS";
}

commentdef {
  p_header = "OUTPUT ENCODING AND COMPRESSION";
}

typedef enum {
  ENCODING_INT8 =      1,
  ENCODING_INT16 =     2,
  ENCODING_FLOAT32 =   5
} encoding_type_t;

typedef struct {
  string groupName;
  string gpmName;
  string outputName;
  string longName;
  encoding_type_t encoding;
} output_field_t;

paramdef struct output_field_t {
  p_default =
    {
     {
      groupName = "SLV",
      gpmName = "zFactorCorrected",
      outputName = "DBZ",
      longName = "reflectivity",
      encoding = ENCODING_FLOAT32
     }
     ,
     {
      groupName = "FLG",
      gpmName = "qualityFlag",
      outputName = "Qual",
      longName = "qualityFlag",
      encoding = ENCODING_FLOAT32
     }
    };
  p_descr = "Output fields details.";
  p_help = "These are the fields that will be written to the output files.";
} output_fields[];

commentdef {
  p_header = "OUTPUT GRID - LAT/LON";
}

typedef struct {
  int nLon;
  int nLat;
  double minLon;
  double minLat;
  double dLon;
  double dLat;
} grid_params_t;

paramdef struct grid_params_t {
  p_default = {500, 500, -104.0, 35.0, 0.025, 0.025};
  p_descr = "Parameters for output grid.";
  p_help = "Units in deg.";
} output_grid;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compute grid limits from input data.";
  p_help = "If true, nLon, nLat, minLon and minLat will be computed from the data. dLon and dLat will be used as set.";
} set_output_grid_limits_from_data;

paramdef boolean {
  p_default = false;
  p_descr = "Option to use nearest-neighbor interpolation for loading output grid.";
  p_help = "When we interpolate from the input grid to the output grid, the default method is inverse-distance weighting. If this is set to TRUE, nearest neighbor is used instead.";
} interp_using_nearest_neighbor;

paramdef double {
  p_default = 1.0;
  p_descr = "Power parameter for inverse-distance wieghted interpolation";
  p_help = "See 'https://en.wikipedia.org/wiki/Inverse_distance_weighting'";
} interp_power_parameter;

commentdef {
  p_header = "OUTPUT URL";
}

paramdef string {
  p_default = "mdvp:://localhost::/tmp/mdv/gpm";
  p_descr = "URL for writing output files.";
} output_url;

commentdef {
  p_header = "OUTPUT METADATA STRINGS";
  p_text = "These will be used if the file does not contain suitable information.";
}

paramdef string {
  p_default = "GPM";
  p_descr = "Name of data set.";
  p_help = "Appears in Mdv master header.";
} data_set_name;

paramdef string {
  p_default = "NASA";
  p_descr = "Source of data.";
  p_help = "Appears in Mdv master header.";
} data_set_source;

paramdef string {
  p_default = "Created by GpmHdf5ToMdv";
  p_descr = "Info for data set.";
  p_help = "Appears in Mdv master header.";
} data_set_info;

