/*********************************************************
 * parameter definitions for Ascii2Radx
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Dec 2016
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "Reads in polar radar data in ASCII, converts to Radx-supported formats. By default converts to CfRadial";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help =
  "In REALTIME mode, the program waits for a new input file.  "
  "In FILELIST mode, it moves through the list of file names "
  "specified on the command line. ";
} mode;

typedef enum {
  BUFR_ASCII,
  ITALY_ASCII,
  ITALY_ROS2
} input_type_t;

paramdef enum input_type_t {
  p_default = BUFR_ASCII;
  p_descr = "Input data type";
  p_help =
  "The ASCII data can be in various representations.\n"
  "  BUFR_ASCII: WMO BUFR in ASCII\n";
  "  ITALY_ASCII: ASCII from Northern Italian radars legacy format.\n"
  "  ITALY_ROS2: COMPRESSED data from Northern Italian radars legacy format.";
} input_type;

commentdef {
  p_header = "FILE SEARCH OPTIONS";
}
paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is _latest_data_info file available?";
  p_help = "If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.";
} latest_data_info_avail;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to recurse to subdirectories while looking for new files.";
  p_help = "If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE."; 
} search_recursively;

paramdef int {
  p_default = 5;
  p_descr = "Maximum depth for recursive directory scan.";
  p_help = "Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.";
} max_recursion_depth;

paramdef int {
  p_default = 2;
  p_min = 1;
  p_descr = "Sleep time between checking directory for input - secs.";
  p_help = "If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.";
} wait_between_checks;

paramdef int {
  p_default = 5;
  p_descr = "File quiescence when checking for files - secs.";
  p_help = "This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.";
} file_quiescence;

paramdef string {
  p_default = "";
  p_descr = "File name extension.";
  p_help = "If set, only files with this extension will be processed.";
} search_ext;

commentdef {
  p_header = "OPTION TO OVERRIDE GATE GEOMETRY";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the gate geometry.";
  p_help = "See 'start_range_km' and 'gate_spacing_km'.";
} override_gate_geometry;

paramdef double {
  p_default = 0.0;
  p_descr = "Specified start range (km).";
  p_help = "See override_start_range.";
} start_range_km;

paramdef double {
  p_default = 0.0075;
  p_descr = "Specified gate spacing (km).";
  p_help = "See override_gate_spacing.";
} gate_spacing_km;

commentdef {
  p_header = "OPTION TO OVERRIDE INSTRUMENT AND/OR SITE NAME";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the instrument name.";
  p_help = "If true, the name provided will be used.";
} override_instrument_name;

paramdef string {
  p_default = "unknown";
  p_descr = "Instrument name.";
  p_help = "See override_instrument_name.";
} instrument_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the site name.";
  p_help = "If true, the name provided will be used.";
} override_site_name;

paramdef string {
  p_default = "unknown";
  p_descr = "Site name.";
  p_help = "See override_site_name.";
} site_name;

commentdef {
  p_header = "OPTION TO OVERRIDE RADAR LOCATION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} override_radar_location;

paramdef double {
  p_default = -999;
  p_descr = "Radar latitude (deg).";
  p_help = "See override_radar_location.";
} radar_latitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar longitude (deg).";
  p_help = "See override_radar_location.";
} radar_longitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar altitude (meters).";
  p_help = "See override_radar_location.";
} radar_altitude_meters;

commentdef {
  p_header = "OPTION TO CORRECT TIME";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to apply an offset to the ray times.";
  p_help = "If TRUE, this offset will be ADDED to the existing ray times. This is useful, for example, for correcting time errors, or converting from local time to UTC.";
} apply_time_offset;

paramdef double {
  p_default = 0;
  p_descr = "Time offset (secs).";
  p_help = "See 'apply_time_offset'. This value will be ADDED to the existing ray times.";
} time_offset_secs;

commentdef {
  p_header = "SET SELECTED GLOBAL ATTRIBUTES";
}

paramdef string {
  p_default = "";
  p_descr = "Option to set the version global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to set the version attribute.";
} version;

paramdef string {
  p_default = "";
  p_descr = "Option to set the title global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to set the title attribute.";
} title;

paramdef string {
  p_default = "";
  p_descr = "Option to set the institution global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to set the institution attribute.";
} institution;

paramdef string {
  p_default = "";
  p_descr = "Option to set the references global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to set the references attribute.";
} references;

paramdef string {
  p_default = "";
  p_descr = "Option to set the source global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to set the source attribute.";
} source;

paramdef string {
  p_default = "";
  p_descr = "Option to set the history global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to set the history attribute.";
} history;

paramdef string {
  p_default = "";
  p_descr = "Option to set the comment global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to set the comment attribute.";
} comment;

paramdef string {
  p_default = "";
  p_descr = "Option to set the author global attribute.";
  p_help = "If empty, no effect. If not empty, this string is used to set the author attribute.";
} author;

commentdef {
  p_header = "SPECIFY FIELD NAMES";
  p_text = "At least 1 field is required.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to specify the output field details.";
  p_help = "If false, all fields are written to output file.";
} set_output_fields;

typedef struct {
  string input_field_name; 
  string output_field_name; 
  string long_name; 
  string standard_name; 
  string units;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    { input_field_name = "DBZ",
      output_field_name = "DBZ",
      long_name = "reflectivity",
      standard_name = "equivalent_reflectivity_factor",
      units = "dBZ"
    }
  };
  p_descr = "Output field details.";
  p_help = "Optionally set the output field details, based on the input field name.";
} output_fields[];

commentdef {
  p_header = "SPECIFY OUTPUT ENCODING";
}

typedef enum {
  OUTPUT_ENCODING_FLOAT32,
  OUTPUT_ENCODING_INT16,
  OUTPUT_ENCODING_INT08
} output_encoding_t;

paramdef enum output_encoding_t {
  p_default = OUTPUT_ENCODING_INT16;
  p_descr = "Specify output encoding for field data.";
  p_help = "INT16 is a good option for most radar fields.";
} output_encoding;

commentdef {
  p_header = "OUTPUT FORMAT";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL1,
  OUTPUT_FORMAT_CFRADIAL2,
  OUTPUT_FORMAT_ODIM_HDF5
} output_format_t;

paramdef enum output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL1;
  p_descr = "Format for the output files.";
  p_help = "CFRADIAL is a good option. CFRADIAL2 is a work in progress.";
} output_format;

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the use of ragged arrays for CfRadial files.";
  p_help = "Only applies to CfRadial. If true, forces the use of ragged arrays even if the number of gates for all rays is constant.";
} cfradial_force_ngates_vary;

commentdef {
  p_header = "OUTPUT DIRECTORY AND FILE NAME";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY,
  SPECIFY_FILE_NAME
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name. SPECIFY_FILE_NAME: file of this name will be written to output_dir.";
} output_filename_mode;

paramdef string {
  p_default = "";
  p_descr = "Optional suffix for output filename.";
  p_help = "If not empty, the suffix will be inserted immediately prior to the extension.";
} output_filename_suffix;

paramdef string {
  p_default = "cfradial.test.nc";
  p_descr = "Name of output file.";
  p_help = "Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.";
} output_filename;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out _latest_data_info files.";
  p_help = "If true, the _latest_data_info files will be written after the converted file is written.";
} write_latest_data_info;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print ROS2 data to stdout.";
  p_help = "If true,ITALY ROS2 data will be decoded and printed to stdout, in the ITALY ASCII format.";
} print_ros2_to_stdout;

