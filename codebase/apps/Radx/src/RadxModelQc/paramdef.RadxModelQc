/**********************************************************
 * paramdef.RadxModelQc
 *
 * This file contains the TDRP parameter definitions for RadxModelQc app
 * 
 */

///////////////////////////////////////////////////////////////////////////////////////////////////////
commentdef
{
  p_header = "RadxModelQc";
  p_text = "Parameters for data filtering for Radx format input data to produce quality control measures";
};

///////////////////////////////////////////////////////////////////////////////////////////////////////

paramdef string
{
  p_descr = "Fixed constant strings that are interpreted by user functions";
  p_help =
    "Prt - each ray has a prt (seconds) so this is an enumeration for that\n"
    "NSamples - each ray has a number of samples (hits/pulses) so this is an enumeration for that";
  p_default = {"Prt", "NSamples"};
} fixed_const[];

paramdef string
{
  p_descr = "Non gridded data names";
  p_help =
    "MeanPrt = the mean over the volume of ray prt values (this is a number)\n"
    "MeanNSamples = the mean over the volume of ray number of samples (this is a number)\n"
    "AzGradState = an internal state which stores azimuthal gradients.";
  p_default = { "MeanPrt", "MeanNSamples", "AzGradState"};
} user_data[];

paramdef string
{
  p_descr = "Volume Filters to apply before doing ray filters";
  p_help = "These filters produce the user_data outputs described above (-print_operators to describe the filters)";
  p_default = {
    "MeanPrt = VolAverage(Prt)",
    "MeanNSamples = VolAverage(NSamples)",
    "AzGradState = VolAzGradientState()"
  };
} volume_before_filter[];  

paramdef string
{
  p_descr = "Sweep filters to apply (computations over entire sweeps)";
  p_help = "2 dimensional variance computations, described in -print_operators";
  p_default = {
    "VEL_Var_2d = Variance2d(VEL_FIR_DIFF)",
    "DBZ_Var_2d = Variance2d(DBZ_FIR_DIFF)"
  };
} sweep_filter[];  

paramdef string
{
  p_descr = "Single ray Filters to apply";
  p_descr = "-print_operators to see what eaCh of these filters does";
  p_default = {
    "DBZ_FIR = FIR(DBZ_F)",
    "DBZ_FIR_DIFF = DBZ_FIR - DBZ_F",
    "VEL_FIR = FIR(VEL_F)",
    "VEL_FIR_DIFF = VEL_FIR - VEL_F",
    "DBZ_Var = Variance1d(DBZ_FIR_DIFF, 20, 0.1)",
    "VEL_Var = Variance1d(VEL_FIR_DIFF, 20, 0.1)",
    "pidMask = PID",
    "if (PID > 15.5) then (pidMask = missing)",
    "F_snr_vr = OneMinusQscale(SNRHC_F, 0.69, 1.5, -6)",
    "if (F_snr_vr < -6) then (F_snr_vr = 0)",
    "PHIDP = PHIDP_F",
    "ZDR = ZDR_F",
    "DBZ = DBZ_F",
    "Dphidp_daz = AzGradient(PHIDP_F, AzGradState, 70)",
    "Dzdr_daz = AzGradient(ZDR_F, AzGradState, 0)",
    "Ddbz_daz = AzGradient(DBZ_F, AzGradState, 0)",
    "F_snr_dbz = OneMinusQscale(SNRHC_F, 0.69, 1.5, -1)",
    "if (F_snr_dbz < -1) then (F_snr_dbz = 0)",
    "OneMinusNCP = 1 - NCP_F",
    "F_ncp_dbz = Qscale(OneMinusNCP, 0.69, 0.5, 0)",
    "WIDTH0 = WIDTH_F",
    "if (WIDTH0 <= 0) then (WIDTH0 = missing)",
    "SD_DBZ = Special0(WIDTH0, MeanPrt, MeanNSamples)",
    "SD_VR = Special1(WIDTH0, MeanPrt, MeanNSamples)",
    "F_sw_dbz = Qscale(SD_DBZ, 0.69, 2, 0.4)",
    "F_sw_vr = Qscale(SD_VR, 0.69, 2, 0)",
    "PHIDPp70 = PHIDP_F + 70",
    "F_Att = Qscale(PHIDPp70, 0.69, 250, 0)",
    "CLUT0 = CLUT",
    "if (CLUT0 < -300) then (CLUT0 = missing)",
    "SCR = DBZ_F - CLUT0",
    "F_scr = OneMinusQscale(SCR, 0.69, 8, 25)",
    "if (SCR < -25) then (F_scr = 0)",
    "F_clut = CLUTTER_2D_QUAL(F_scr, VEL_F, WIDTH_F, 0.69, 1.5, 0.5)",
    "if (CMD_FLAG < 0.5) then (F_clut = 1.0)",
    "del_dbz = Ddbz_daz*Ddbz_daz*0.0086",
    "del_zdr = Dzdr_daz*Dzdr_daz*0.0173",
    "F_del_dbz = Qscale(del_dbz, 0.69, 2, 0.4)",
    "if (F_del_dbz < 0.4) then (F_del_dbz = 1)",
    "F_total_vr = F_snr_vr*F_clut*F_sw_vr",
    "F_total_dbz = F_snr_dbz*F_Att*F_clut*F_del_dbz*F_sw_dbz",
    "if (pidMask > 15.5) then (F_total_vr = 0)",
    "if (pidMask = missing) then (F_total_vr = 0)",
    "if (pidMask > 15.5) then (F_total_dbz = 0)",
    "if (pidMask = missing) then (F_total_dbz = 0)",
    "vr_thresh = VEL_F",
    "if (F_total_vr < 0.5) then vr_thresh = missing",
    "dbz_thresh = DBZ_F",
    "if (F_total_dbz < 0.5) then dbz_thresh = missing",
    "if (vr_thresh = missing) then (VEL_FIR_DIFF = missing)",
    "if (dbz_thresh = missing) then (DBZ_FIR_DIFF = missing)"
  };
} ray_filter[];  

paramdef double
{
 p_descr = "Radius for 2d variance";
 p_default = 1.0;
} variance_radius_km;
