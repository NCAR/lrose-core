/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxModelQc
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("RadxModelQc");
    tt->comment_text = tdrpStrDup("Parameters for data filtering for Radx format input data to produce quality control measures");
    tt++;
    
    // Parameter 'fixed_const'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("fixed_const");
    tt->descr = tdrpStrDup("Fixed constant strings that are interpreted by user functions");
    tt->help = tdrpStrDup("Prt - each ray has a prt (seconds) so this is an enumeration for that\nNSamples - each ray has a number of samples (hits/pulses) so this is an enumeration for that");
    tt->array_offset = (char *) &_fixed_const - &_start_;
    tt->array_n_offset = (char *) &fixed_const_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("Prt");
      tt->array_vals[1].s = tdrpStrDup("NSamples");
    tt++;
    
    // Parameter 'user_data'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("user_data");
    tt->descr = tdrpStrDup("Non gridded data names");
    tt->help = tdrpStrDup("MeanPrt = the mean over the volume of ray prt values (this is a number)\nMeanNSamples = the mean over the volume of ray number of samples (this is a number)\nAzGradState = an internal state which stores azimuthal gradients.");
    tt->array_offset = (char *) &_user_data - &_start_;
    tt->array_n_offset = (char *) &user_data_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("MeanPrt");
      tt->array_vals[1].s = tdrpStrDup("MeanNSamples");
      tt->array_vals[2].s = tdrpStrDup("AzGradState");
    tt++;
    
    // Parameter 'volume_before_filter'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("volume_before_filter");
    tt->descr = tdrpStrDup("Volume Filters to apply before doing ray filters");
    tt->help = tdrpStrDup("These filters produce the user_data outputs described above (-print_operators to describe the filters)");
    tt->array_offset = (char *) &_volume_before_filter - &_start_;
    tt->array_n_offset = (char *) &volume_before_filter_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("MeanPrt = VolAverage(Prt)");
      tt->array_vals[1].s = tdrpStrDup("MeanNSamples = VolAverage(NSamples)");
      tt->array_vals[2].s = tdrpStrDup("AzGradState = VolAzGradientState()");
    tt++;
    
    // Parameter 'sweep_filter'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sweep_filter");
    tt->descr = tdrpStrDup("Sweep filters to apply (computations over entire sweeps)");
    tt->help = tdrpStrDup("2 dimensional variance computations, described in -print_operators");
    tt->array_offset = (char *) &_sweep_filter - &_start_;
    tt->array_n_offset = (char *) &sweep_filter_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("VEL_Var_2d = Variance2d(VEL_FIR_DIFF)");
      tt->array_vals[1].s = tdrpStrDup("DBZ_Var_2d = Variance2d(DBZ_FIR_DIFF)");
    tt++;
    
    // Parameter 'ray_filter'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ray_filter");
    tt->descr = tdrpStrDup("Single ray Filters to apply");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_ray_filter - &_start_;
    tt->array_n_offset = (char *) &ray_filter_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 51;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("DBZ_FIR = FIR(DBZ_F)");
      tt->array_vals[1].s = tdrpStrDup("DBZ_FIR_DIFF = DBZ_FIR - DBZ_F");
      tt->array_vals[2].s = tdrpStrDup("VEL_FIR = FIR(VEL_F)");
      tt->array_vals[3].s = tdrpStrDup("VEL_FIR_DIFF = VEL_FIR - VEL_F");
      tt->array_vals[4].s = tdrpStrDup("DBZ_Var = Variance1d(DBZ_FIR_DIFF, 20, 0.1)");
      tt->array_vals[5].s = tdrpStrDup("VEL_Var = Variance1d(VEL_FIR_DIFF, 20, 0.1)");
      tt->array_vals[6].s = tdrpStrDup("pidMask = PID");
      tt->array_vals[7].s = tdrpStrDup("if (PID > 15.5) then (pidMask = missing)");
      tt->array_vals[8].s = tdrpStrDup("F_snr_vr = OneMinusQscale(SNRHC_F, 0.69, 1.5, -6)");
      tt->array_vals[9].s = tdrpStrDup("if (F_snr_vr < -6) then (F_snr_vr = 0)");
      tt->array_vals[10].s = tdrpStrDup("PHIDP = PHIDP_F");
      tt->array_vals[11].s = tdrpStrDup("ZDR = ZDR_F");
      tt->array_vals[12].s = tdrpStrDup("DBZ = DBZ_F");
      tt->array_vals[13].s = tdrpStrDup("Dphidp_daz = AzGradient(PHIDP_F, AzGradState, 70)");
      tt->array_vals[14].s = tdrpStrDup("Dzdr_daz = AzGradient(ZDR_F, AzGradState, 0)");
      tt->array_vals[15].s = tdrpStrDup("Ddbz_daz = AzGradient(DBZ_F, AzGradState, 0)");
      tt->array_vals[16].s = tdrpStrDup("F_snr_dbz = OneMinusQscale(SNRHC_F, 0.69, 1.5, -1)");
      tt->array_vals[17].s = tdrpStrDup("if (F_snr_dbz < -1) then (F_snr_dbz = 0)");
      tt->array_vals[18].s = tdrpStrDup("OneMinusNCP = 1 - NCP_F");
      tt->array_vals[19].s = tdrpStrDup("F_ncp_dbz = Qscale(OneMinusNCP, 0.69, 0.5, 0)");
      tt->array_vals[20].s = tdrpStrDup("WIDTH0 = WIDTH_F");
      tt->array_vals[21].s = tdrpStrDup("if (WIDTH0 <= 0) then (WIDTH0 = missing)");
      tt->array_vals[22].s = tdrpStrDup("SD_DBZ = Special0(WIDTH0, MeanPrt, MeanNSamples)");
      tt->array_vals[23].s = tdrpStrDup("SD_VR = Special1(WIDTH0, MeanPrt, MeanNSamples)");
      tt->array_vals[24].s = tdrpStrDup("F_sw_dbz = Qscale(SD_DBZ, 0.69, 2, 0.4)");
      tt->array_vals[25].s = tdrpStrDup("F_sw_vr = Qscale(SD_VR, 0.69, 2, 0)");
      tt->array_vals[26].s = tdrpStrDup("PHIDPp70 = PHIDP_F + 70");
      tt->array_vals[27].s = tdrpStrDup("F_Att = Qscale(PHIDPp70, 0.69, 250, 0)");
      tt->array_vals[28].s = tdrpStrDup("CLUT0 = CLUT");
      tt->array_vals[29].s = tdrpStrDup("if (CLUT0 < -300) then (CLUT0 = missing)");
      tt->array_vals[30].s = tdrpStrDup("SCR = DBZ_F - CLUT0");
      tt->array_vals[31].s = tdrpStrDup("F_scr = OneMinusQscale(SCR, 0.69, 8, 25)");
      tt->array_vals[32].s = tdrpStrDup("if (SCR < -25) then (F_scr = 0)");
      tt->array_vals[33].s = tdrpStrDup("F_clut = CLUTTER_2D_QUAL(F_scr, VEL_F, WIDTH_F, 0.69, 1.5, 0.5)");
      tt->array_vals[34].s = tdrpStrDup("if (CMD_FLAG < 0.5) then (F_clut = 1.0)");
      tt->array_vals[35].s = tdrpStrDup("del_dbz = Ddbz_daz*Ddbz_daz*0.0086");
      tt->array_vals[36].s = tdrpStrDup("del_zdr = Dzdr_daz*Dzdr_daz*0.0173");
      tt->array_vals[37].s = tdrpStrDup("F_del_dbz = Qscale(del_dbz, 0.69, 2, 0.4)");
      tt->array_vals[38].s = tdrpStrDup("if (F_del_dbz < 0.4) then (F_del_dbz = 1)");
      tt->array_vals[39].s = tdrpStrDup("F_total_vr = F_snr_vr*F_clut*F_sw_vr");
      tt->array_vals[40].s = tdrpStrDup("F_total_dbz = F_snr_dbz*F_Att*F_clut*F_del_dbz*F_sw_dbz");
      tt->array_vals[41].s = tdrpStrDup("if (pidMask > 15.5) then (F_total_vr = 0)");
      tt->array_vals[42].s = tdrpStrDup("if (pidMask = missing) then (F_total_vr = 0)");
      tt->array_vals[43].s = tdrpStrDup("if (pidMask > 15.5) then (F_total_dbz = 0)");
      tt->array_vals[44].s = tdrpStrDup("if (pidMask = missing) then (F_total_dbz = 0)");
      tt->array_vals[45].s = tdrpStrDup("vr_thresh = VEL_F");
      tt->array_vals[46].s = tdrpStrDup("if (F_total_vr < 0.5) then vr_thresh = missing");
      tt->array_vals[47].s = tdrpStrDup("dbz_thresh = DBZ_F");
      tt->array_vals[48].s = tdrpStrDup("if (F_total_dbz < 0.5) then dbz_thresh = missing");
      tt->array_vals[49].s = tdrpStrDup("if (vr_thresh = missing) then (VEL_FIR_DIFF = missing)");
      tt->array_vals[50].s = tdrpStrDup("if (dbz_thresh = missing) then (DBZ_FIR_DIFF = missing)");
    tt++;
    
    // Parameter 'variance_radius_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("variance_radius_km");
    tt->descr = tdrpStrDup("Radius for 2d variance");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &variance_radius_km - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
