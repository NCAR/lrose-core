/*********************************************************
 * parameter definitions for RadxCalUpdate
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Sept 2019
 */
 
//////////////////////////////////////////////////////////

commentdef {
  p_header = "Update the calibration in a Radx file. Also ajusts the DBZ fields accordingly.";
  p_text = "Optionally corrects the altitude for EGM errors.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file.  "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in ARCHIVE mode, at least) MUST contain a "
           "day-directory above the data file -- ./data_file.ext will not "
           "work as a file path, but ./yyyymmdd/data_file.ext will.";
} mode;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

commentdef {
  p_header = "OUTPUT COMPRESSION";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress CfRadial data fields on output.";
} output_compressed;

paramdef int {
  p_default = 4;
  p_descr = "Compression level in CfRadial files, if compressed.";
  p_help = "0 = no compression. 9 = max compression. 4 is a good compromise.";
} compression_level;

commentdef {
  p_header = "OUTPUT CONTROL";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.";
} output_filename_mode;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out _latest_data_info files.";
  p_help = "If true, the _latest_data_info files will be written after the converted file is written.";
} write_latest_data_info;

commentdef {
  p_header = "CALIBRATION FILE";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to update the calibration used for these files.";
  p_help = "If true, the DBZ fields will be updated accordingly.";
} update_calibration;

paramdef string {
  p_default = "./TsCalAuto_Wband-HCR-256ns_20190619_210205.xml";
  p_descr = "Path to calibration file - XML format.";
  p_help = "The new calibration will be read in from this file. It must be in Radx calibration XML format.";
} calibration_file_path;

paramdef string {
  p_default = { "DBZ" , "DBZ_F" };
  p_descr = "Names of DBZ fields to be updated.";
  p_help = "Only the fields in this list will be updated for the new cal.";
} dbz_fields_for_update[];

commentdef {
  p_header = "FOR HCR, CORRECT RECEIVER GAIN FOR TEMPERATURE USING VALUES FROM SPDB";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to correct the HCR V-channel receiver gain for temperature.";
  p_help = "Computing the HCR receiver gain correction is complicated. Therefore this is done offline, using the application HcrTempRxGain, and the results are stored as XML in SPDB. Here we retrieve the values from SPDB and apply them to correct the receiver gain.";
} correct_hcr_v_rx_gain_for_temperature;

paramdef string {
  p_default = "$(DATA_DIR)/$(QC_VERSION)/spdb/tempVsGain";
  p_descr = "URL for HCR gain correction from SPDB.";
} hcr_delta_gain_spdb_url;

paramdef int {
  p_default = 3600;
  p_descr = "Search margin when finding gain correction data (secs).";
  p_help = "We search for the value closest in time to the beam time. This is the search margin on either side of the search time.";
} hcr_delta_gain_search_margin_secs;

paramdef string {
  p_default = "<HcrTempGainCorrection><v_delta_gain>";
  p_descr = "URL for HCR gain correction from SPDB.";
} hcr_v_rx_delta_gain_tag_list;

commentdef {
  p_header = "CORRECT ALTITUDE FOR EGM";
  p_text = "Correct the GPS altitude for the geoid, using EGM-2008. See: https://earth-info.nga.mil/GandG/wgs84/gravitymod/egm2008/egm08_wgs84.html.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to correct the altitude for the geoid.";
  p_help = "This only applies for moving platforms. Altitude from some GPS units is based on the WGS84 ellipsoid. To get altitude relative to MSL, a correction for the geoid based on gravitation strength is required. We use the EGM-2008 geoid table.";
} correct_altitude_for_egm;

paramdef string {
  p_default = "./EGM_2008_WGS84_2.5minx2.5min.nc";
  p_descr = "Path to geoid table file.";
  p_help = "Downloads available from https://earth-info.nga.mil/GandG/wgs84/gravitymod. NetCDF file is on the shared drive at HCR->dataProcessing->AltitudeCorrection. The app Egm2Mdv will convert the downloadable file to a netCDF format file.";
} egm_2008_geoid_file;

