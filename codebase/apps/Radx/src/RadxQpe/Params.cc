/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxQpe
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("RadxQpe program");
    tt->comment_text = tdrpStrDup("Produce quantitative precipitation estimates on a grid");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("Parameters associated with process control (registering, signals..)");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'debug_norm'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_norm");
    tt->descr = tdrpStrDup("debug flag");
    tt->help = tdrpStrDup("Debug flag.");
    tt->val_offset = (char *) &debug_norm - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'debug_verbose'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_verbose");
    tt->descr = tdrpStrDup("verbose debug flag");
    tt->help = tdrpStrDup("Debug flag.");
    tt->val_offset = (char *) &debug_verbose - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'debug_triggering'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_triggering");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &debug_triggering - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'debug_show_realtime'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_show_realtime");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("TRUE to show real time in all logged messages");
    tt->val_offset = (char *) &debug_show_realtime - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'debug_show_class_and_method'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("debug_show_class_and_method");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("TRUE to show the C++ class and method in the logged messages");
    tt->val_offset = (char *) &debug_show_class_and_method - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("THREADING FOR SPEED.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'n_compute_threads'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_compute_threads");
    tt->descr = tdrpStrDup("The number of compute threads.");
    tt->help = tdrpStrDup("The interpolation are segmented in azimuth, with each thread computing an azimuth. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads. If set to 1, threading is disabled");
    tt->val_offset = (char *) &n_compute_threads - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'threads_debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("threads_debug");
    tt->descr = tdrpStrDup("Thread debug");
    tt->help = tdrpStrDup("Set to true to see debug information regarding threading");
    tt->val_offset = (char *) &threads_debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("ALGORITHM PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters to control the QPE algorithm itself.");
    tt++;
    
    // Parameter 'azimuthal_resolution_degrees'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("azimuthal_resolution_degrees");
    tt->descr = tdrpStrDup("azimuth res");
    tt->help = tdrpStrDup("Output azimuthal resolution in degrees");
    tt->val_offset = (char *) &azimuthal_resolution_degrees - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'min_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr");
    tt->descr = tdrpStrDup("SNR threshold");
    tt->help = tdrpStrDup("When SNR < min_snr a higher elevation angle is used, which happens only when there is input SNR data configured for");
    tt->val_offset = (char *) &min_snr - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'max_beam_block_percent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_beam_block_percent");
    tt->descr = tdrpStrDup("Beam blockage threshold");
    tt->help = tdrpStrDup("When beam blockage percentage > max_beam_block_percent, a higher elevation angle is used");
    tt->val_offset = (char *) &max_beam_block_percent - &_start_;
    tt->single_val.d = 0.25;
    tt++;
    
    // Parameter 'max_beam_height_km_msl'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_beam_height_km_msl");
    tt->descr = tdrpStrDup("Max height of beam for valid precip rate (km MSL).");
    tt->help = tdrpStrDup("If beam is above this height, the precip rate is set to 0.");
    tt->val_offset = (char *) &max_beam_height_km_msl - &_start_;
    tt->single_val.d = 6;
    tt++;
    
    // Parameter 'min_valid_precip_rate'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_valid_precip_rate");
    tt->descr = tdrpStrDup("Minimum valid precip rate (mm/hr).");
    tt->help = tdrpStrDup("If rate is less than this, it is set to 0.");
    tt->val_offset = (char *) &min_valid_precip_rate - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("INPUTS/OUTPUTS");
    tt->comment_text = tdrpStrDup("Parameters associated with inputs and outputs. The input precip fields are found in the rainrate_fields struct. One rainrate output field is produced for each precip field. Additional diagnostic output fields are given in the output_fields struct array.\nUp to two output formats are allowed, Polar and Cartesian, where the Cartesian is an interpolation of the Polar, and the Polar is a two dimensional grid with the same radar polar dimensions as the input data. To disable either of these outputs, set its URL to the empty string.");
    tt++;
    
    // Parameter 'data_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_url");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("URL of input data");
    tt->val_offset = (char *) &data_url - &_start_;
    tt->single_val.s = tdrpStrDup("unknown");
    tt++;
    
    // Parameter 'volume_time_margin_seconds'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("volume_time_margin_seconds");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("expected maximum difference between start and end times for volume, in seconds");
    tt->val_offset = (char *) &volume_time_margin_seconds - &_start_;
    tt->single_val.i = 500;
    tt++;
    
    // Parameter 'snr_field'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("snr_field");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("field name, SNR, empty for no SNR useage");
    tt->val_offset = (char *) &snr_field - &_start_;
    tt->single_val.s = tdrpStrDup("SNR");
    tt++;
    
    // Parameter 'pid_field'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("pid_field");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("field name, PID");
    tt->val_offset = (char *) &pid_field - &_start_;
    tt->single_val.s = tdrpStrDup("PID");
    tt++;
    
    // Parameter 'beam_block_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("beam_block_path");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("path of input beam block data (assumed on local host, RadxVol)");
    tt->val_offset = (char *) &beam_block_path - &_start_;
    tt->single_val.s = tdrpStrDup("unknown");
    tt++;
    
    // Parameter 'beam_block_field'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("beam_block_field");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("field name, extended maximum beam blockage percentage");
    tt->val_offset = (char *) &beam_block_field - &_start_;
    tt->single_val.s = tdrpStrDup("BEAME");
    tt++;
    
    // Parameter 'rainrate_fields'
    // ctype is '_rainrate_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("rainrate_fields");
    tt->descr = tdrpStrDup("The array of rain rate input/output fields.");
    tt->help = tdrpStrDup("The program will read in one precip field per entry here, and produce an output rain rate field from it. Long_name and standard_name are netCDF conventions. Set the output encoding type to select the resolution of the output data.");
    tt->array_offset = (char *) &_rainrate_fields - &_start_;
    tt->array_n_offset = (char *) &rainrate_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(rainrate_field_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("rainrate_field_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_precip_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_rainrate_fields->input_precip_name - (char *) _rainrate_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_rainrate_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_rainrate_fields->output_rainrate_name - (char *) _rainrate_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_rainrate_fields->long_name - (char *) _rainrate_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_rainrate_fields->standard_name - (char *) _rainrate_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_rainrate_fields->units - (char *) _rainrate_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_rainrate_fields->encoding - (char *) _rainrate_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[5].enum_def.nfields = 3;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("OUTPUT_FLOAT");
        tt->struct_def.fields[5].enum_def.fields[0].val = OUTPUT_FLOAT;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("OUTPUT_SHORT");
        tt->struct_def.fields[5].enum_def.fields[1].val = OUTPUT_SHORT;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("OUTPUT_BYTE");
        tt->struct_def.fields[5].enum_def.fields[2].val = OUTPUT_BYTE;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("RATE_HIDRO");
      tt->struct_vals[1].s = tdrpStrDup("RATE_HIDRO");
      tt->struct_vals[2].s = tdrpStrDup("RATE_HIDRO");
      tt->struct_vals[3].s = tdrpStrDup("RATE_HIDRO");
      tt->struct_vals[4].s = tdrpStrDup("mm/h");
      tt->struct_vals[5].e = OUTPUT_FLOAT;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Array of additional output fields besides the rain rate fields.");
    tt->help = tdrpStrDup("The program will output these fields in addition to the rain rate output fields. long_name and standard_name are netCDF conventions. Set the output encoding type to select the resolution of the output data. These fields are more for diagnostic use. The MASK field itself is set to 1 over the entire grid so you can see the domain.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 8;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->name - (char *) _output_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->long_name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->standard_name - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("units");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->units - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[4].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[4].ptype = ENUM_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->encoding - (char *) _output_fields;
        tt->struct_def.fields[4].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[4].enum_def.nfields = 3;
        tt->struct_def.fields[4].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[4].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[4].enum_def.fields[0].name = tdrpStrDup("OUTPUT_FLOAT");
        tt->struct_def.fields[4].enum_def.fields[0].val = OUTPUT_FLOAT;
        tt->struct_def.fields[4].enum_def.fields[1].name = tdrpStrDup("OUTPUT_SHORT");
        tt->struct_def.fields[4].enum_def.fields[1].val = OUTPUT_SHORT;
        tt->struct_def.fields[4].enum_def.fields[2].name = tdrpStrDup("OUTPUT_BYTE");
        tt->struct_def.fields[4].enum_def.fields[2].val = OUTPUT_BYTE;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_data_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("type");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->type - (char *) _output_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_data_t");
        tt->struct_def.fields[5].enum_def.nfields = 8;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("PID");
        tt->struct_def.fields[5].enum_def.fields[0].val = PID;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("ELEVATION");
        tt->struct_def.fields[5].enum_def.fields[1].val = ELEVATION;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("HEIGHT");
        tt->struct_def.fields[5].enum_def.fields[2].val = HEIGHT;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("RANGE");
        tt->struct_def.fields[5].enum_def.fields[3].val = RANGE;
        tt->struct_def.fields[5].enum_def.fields[4].name = tdrpStrDup("NUM_BLOCKED");
        tt->struct_def.fields[5].enum_def.fields[4].val = NUM_BLOCKED;
        tt->struct_def.fields[5].enum_def.fields[5].name = tdrpStrDup("NUM_LOW_SNR");
        tt->struct_def.fields[5].enum_def.fields[5].val = NUM_LOW_SNR;
        tt->struct_def.fields[5].enum_def.fields[6].name = tdrpStrDup("NUM_CLUTTER");
        tt->struct_def.fields[5].enum_def.fields[6].val = NUM_CLUTTER;
        tt->struct_def.fields[5].enum_def.fields[7].name = tdrpStrDup("MASK");
        tt->struct_def.fields[5].enum_def.fields[7].val = MASK;
    tt->n_struct_vals = 48;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("PID");
      tt->struct_vals[1].s = tdrpStrDup("PID");
      tt->struct_vals[2].s = tdrpStrDup("PID");
      tt->struct_vals[3].s = tdrpStrDup("none");
      tt->struct_vals[4].e = OUTPUT_FLOAT;
      tt->struct_vals[5].e = PID;
      tt->struct_vals[6].s = tdrpStrDup("ELEVATION");
      tt->struct_vals[7].s = tdrpStrDup("ELEVATION");
      tt->struct_vals[8].s = tdrpStrDup("ELEVATION");
      tt->struct_vals[9].s = tdrpStrDup("deg");
      tt->struct_vals[10].e = OUTPUT_FLOAT;
      tt->struct_vals[11].e = ELEVATION;
      tt->struct_vals[12].s = tdrpStrDup("HEIGHT");
      tt->struct_vals[13].s = tdrpStrDup("HEIGHT");
      tt->struct_vals[14].s = tdrpStrDup("HEIGHT");
      tt->struct_vals[15].s = tdrpStrDup("km");
      tt->struct_vals[16].e = OUTPUT_FLOAT;
      tt->struct_vals[17].e = HEIGHT;
      tt->struct_vals[18].s = tdrpStrDup("RANGE");
      tt->struct_vals[19].s = tdrpStrDup("RANGE");
      tt->struct_vals[20].s = tdrpStrDup("RANGE");
      tt->struct_vals[21].s = tdrpStrDup("km");
      tt->struct_vals[22].e = OUTPUT_FLOAT;
      tt->struct_vals[23].e = RANGE;
      tt->struct_vals[24].s = tdrpStrDup("NBLOCK");
      tt->struct_vals[25].s = tdrpStrDup("NBLOCK");
      tt->struct_vals[26].s = tdrpStrDup("NBLOCK");
      tt->struct_vals[27].s = tdrpStrDup("count");
      tt->struct_vals[28].e = OUTPUT_FLOAT;
      tt->struct_vals[29].e = NUM_BLOCKED;
      tt->struct_vals[30].s = tdrpStrDup("NLOW_SNR");
      tt->struct_vals[31].s = tdrpStrDup("NLOW_SNR");
      tt->struct_vals[32].s = tdrpStrDup("NLOW_SNR");
      tt->struct_vals[33].s = tdrpStrDup("count");
      tt->struct_vals[34].e = OUTPUT_FLOAT;
      tt->struct_vals[35].e = NUM_LOW_SNR;
      tt->struct_vals[36].s = tdrpStrDup("NCLUT");
      tt->struct_vals[37].s = tdrpStrDup("NCLUT");
      tt->struct_vals[38].s = tdrpStrDup("NCLUT");
      tt->struct_vals[39].s = tdrpStrDup("count");
      tt->struct_vals[40].e = OUTPUT_FLOAT;
      tt->struct_vals[41].e = NUM_CLUTTER;
      tt->struct_vals[42].s = tdrpStrDup("MASK");
      tt->struct_vals[43].s = tdrpStrDup("MASK");
      tt->struct_vals[44].s = tdrpStrDup("MASK");
      tt->struct_vals[45].s = tdrpStrDup("mask");
      tt->struct_vals[46].e = OUTPUT_FLOAT;
      tt->struct_vals[47].e = MASK;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("POLAR OUTPUT DATA SET INFORMATION");
    tt->comment_text = tdrpStrDup("The output is CfRadial files, and other formats to the extent supported by the format.");
    tt++;
    
    // Parameter 'title'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("title");
    tt->descr = tdrpStrDup("Title string for netCDF file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &title - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'institution'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("institution");
    tt->descr = tdrpStrDup("Institution string for netCDF file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &institution - &_start_;
    tt->single_val.s = tdrpStrDup("EOL/NCAR");
    tt++;
    
    // Parameter 'references'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("references");
    tt->descr = tdrpStrDup("References string for netCDF file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &references - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'source'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("source");
    tt->descr = tdrpStrDup("Source string for netCDF file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &source - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'history'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("history");
    tt->descr = tdrpStrDup("History string for netCDF file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &history - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'comment'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("comment");
    tt->descr = tdrpStrDup("Comment string for netCDF file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &comment - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("POLAR OUTPUT FORMAT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_format'
    // ctype is '_output_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_format");
    tt->descr = tdrpStrDup("Format for the output files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_format - &_start_;
    tt->enum_def.name = tdrpStrDup("output_format_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_FORMAT_CFRADIAL");
      tt->enum_def.fields[0].val = OUTPUT_FORMAT_CFRADIAL;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_FORMAT_DORADE");
      tt->enum_def.fields[1].val = OUTPUT_FORMAT_DORADE;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_FORMAT_FORAY");
      tt->enum_def.fields[2].val = OUTPUT_FORMAT_FORAY;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_FORMAT_NEXRAD");
      tt->enum_def.fields[3].val = OUTPUT_FORMAT_NEXRAD;
      tt->enum_def.fields[4].name = tdrpStrDup("OUTPUT_FORMAT_UF");
      tt->enum_def.fields[4].val = OUTPUT_FORMAT_UF;
      tt->enum_def.fields[5].name = tdrpStrDup("OUTPUT_FORMAT_MDV_RADIAL");
      tt->enum_def.fields[5].val = OUTPUT_FORMAT_MDV_RADIAL;
    tt->single_val.e = OUTPUT_FORMAT_CFRADIAL;
    tt++;
    
    // Parameter 'netcdf_style'
    // ctype is '_netcdf_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("netcdf_style");
    tt->descr = tdrpStrDup("NetCDF style - if output_format is CFRADIAL");
    tt->help = tdrpStrDup("netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls");
    tt->val_offset = (char *) &netcdf_style - &_start_;
    tt->enum_def.name = tdrpStrDup("netcdf_style_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLASSIC");
      tt->enum_def.fields[0].val = CLASSIC;
      tt->enum_def.fields[1].name = tdrpStrDup("NC64BIT");
      tt->enum_def.fields[1].val = NC64BIT;
      tt->enum_def.fields[2].name = tdrpStrDup("NETCDF4");
      tt->enum_def.fields[2].val = NETCDF4;
      tt->enum_def.fields[3].name = tdrpStrDup("NETCDF4_CLASSIC");
      tt->enum_def.fields[3].val = NETCDF4_CLASSIC;
    tt->single_val.e = NETCDF4;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("POLAR OUTPUT BYTE-SWAPPING and COMPRESSION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_native_byte_order'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_native_byte_order");
    tt->descr = tdrpStrDup("Option to leave data in native byte order.");
    tt->help = tdrpStrDup("If false, data will be byte-swapped as appropriate on output.");
    tt->val_offset = (char *) &output_native_byte_order - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_compressed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_compressed");
    tt->descr = tdrpStrDup("Option to compress data fields on output.");
    tt->help = tdrpStrDup("Applies to netCDF and Dorade. UF does not support compression.");
    tt->val_offset = (char *) &output_compressed - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("POLAR OUTPUT OPTIONS FOR CfRadial FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_force_ngates_vary'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_force_ngates_vary");
    tt->descr = tdrpStrDup("Option to force the use of ragged arrays for CfRadial files.");
    tt->help = tdrpStrDup("Only applies to CfRadial. If true, forces the use of ragged arrays even if the number of gates for all rays is constant.");
    tt->val_offset = (char *) &output_force_ngates_vary - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'compression_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("compression_level");
    tt->descr = tdrpStrDup("Compression level for output, if compressed.");
    tt->help = tdrpStrDup("Applies to netCDF only. Dorade compression is run-length encoding, and has not options..");
    tt->val_offset = (char *) &compression_level - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("POLAR OUTPUT DIRECTORY AND FILE NAME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory. Set empty for no polar output");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/RadxQpe/polar");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_individual_sweeps'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_individual_sweeps");
    tt->descr = tdrpStrDup("Option to write out individual sweeps if appropriate.");
    tt->help = tdrpStrDup("If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.");
    tt->val_offset = (char *) &write_individual_sweeps - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("REGISTERING LATEST DATA INFO");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_latest_data_info'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_latest_data_info");
    tt->descr = tdrpStrDup("Option to write out _latest_data_info files.");
    tt->help = tdrpStrDup("If true, the _latest_data_info files will be written after the converted file is written.");
    tt->val_offset = (char *) &write_latest_data_info - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("CARTESIAN GRID PROJECTION AND XY DETAILS, AND OUTPUT SPECIFICATION");
    tt->comment_text = tdrpStrDup("The Cartesian grid is an additional optional output, where the polar data is interpolated to a PPI grid.");
    tt++;
    
    // Parameter 'output_cartesian_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_cartesian_dir");
    tt->descr = tdrpStrDup("Output directory path for cartesian data.");
    tt->help = tdrpStrDup("Regridded cartesian files will be written to this directory. Set to empty for no cartesian output");
    tt->val_offset = (char *) &output_cartesian_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/RadxQpe/cart");
    tt++;
    
    // Parameter 'write_cartesian_files_as_netcdf'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_cartesian_files_as_netcdf");
    tt->descr = tdrpStrDup("Write Cartesian files as CF NetCDF.");
    tt->help = tdrpStrDup("If false, the Cartesian files will be written as MDV.");
    tt->val_offset = (char *) &write_cartesian_files_as_netcdf - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'grid_projection'
    // ctype is '_projection_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("grid_projection");
    tt->descr = tdrpStrDup("Projection for cartesian grid. See projection param below.");
    tt->help = tdrpStrDup("\tPROJ_LATLON: simple lat/lon grid (Equidistant Cylindrical)\n\tPROJ_FLAT: Azimuthal Equidistant (Radar)\n\tPROJ_LAMBERT_CONF: Lambert Conformal Conic\n\tPROJ_LAMBERT_AZIM: Lambert Azimuthal Equal Area\n\tPROJ_MERCATOR: Mercator - EW orientation\n\tPROJ_TRANS_MERCATOR: Tranverse Mercator - NS orientation\n\tPROJ_POLAR_STEREO: Stereographic- polar aspect\n\tPROJ_OBLIQUE_STEREO: Stereographic - oblique aspect\n\tPROJ_ALBERS: Albers Equal Area Conic\n\tPROJ_VERT_PERSP: Vertical Perspective (satellite view)\n\n");
    tt->val_offset = (char *) &grid_projection - &_start_;
    tt->enum_def.name = tdrpStrDup("projection_t");
    tt->enum_def.nfields = 10;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PROJ_LATLON");
      tt->enum_def.fields[0].val = PROJ_LATLON;
      tt->enum_def.fields[1].name = tdrpStrDup("PROJ_LAMBERT_CONF");
      tt->enum_def.fields[1].val = PROJ_LAMBERT_CONF;
      tt->enum_def.fields[2].name = tdrpStrDup("PROJ_MERCATOR");
      tt->enum_def.fields[2].val = PROJ_MERCATOR;
      tt->enum_def.fields[3].name = tdrpStrDup("PROJ_POLAR_STEREO");
      tt->enum_def.fields[3].val = PROJ_POLAR_STEREO;
      tt->enum_def.fields[4].name = tdrpStrDup("PROJ_FLAT");
      tt->enum_def.fields[4].val = PROJ_FLAT;
      tt->enum_def.fields[5].name = tdrpStrDup("PROJ_OBLIQUE_STEREO");
      tt->enum_def.fields[5].val = PROJ_OBLIQUE_STEREO;
      tt->enum_def.fields[6].name = tdrpStrDup("PROJ_TRANS_MERCATOR");
      tt->enum_def.fields[6].val = PROJ_TRANS_MERCATOR;
      tt->enum_def.fields[7].name = tdrpStrDup("PROJ_ALBERS");
      tt->enum_def.fields[7].val = PROJ_ALBERS;
      tt->enum_def.fields[8].name = tdrpStrDup("PROJ_LAMBERT_AZIM");
      tt->enum_def.fields[8].val = PROJ_LAMBERT_AZIM;
      tt->enum_def.fields[9].name = tdrpStrDup("PROJ_VERT_PERSP");
      tt->enum_def.fields[9].val = PROJ_VERT_PERSP;
    tt->single_val.e = PROJ_FLAT;
    tt++;
    
    // Parameter 'grid_xy_geom'
    // ctype is '_grid_xy_geom_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("grid_xy_geom");
    tt->descr = tdrpStrDup("Cartesian grid parameters in x,y.");
    tt->help = tdrpStrDup("Units in km, except LATLON, which is in degrees.");
    tt->val_offset = (char *) &grid_xy_geom - &_start_;
    tt->struct_def.name = tdrpStrDup("grid_xy_geom_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nx");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &grid_xy_geom.nx - (char *) &grid_xy_geom;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("ny");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &grid_xy_geom.ny - (char *) &grid_xy_geom;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("minx");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &grid_xy_geom.minx - (char *) &grid_xy_geom;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("miny");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &grid_xy_geom.miny - (char *) &grid_xy_geom;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("dx");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &grid_xy_geom.dx - (char *) &grid_xy_geom;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("dy");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &grid_xy_geom.dy - (char *) &grid_xy_geom;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 1;
      tt->struct_vals[1].i = 1;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].d = 0;
      tt->struct_vals[4].d = 1;
      tt->struct_vals[5].d = 1;
    tt++;
    
    // Parameter 'grid_rotation'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_rotation");
    tt->descr = tdrpStrDup("Cartesian Grid rotation.");
    tt->help = tdrpStrDup("This applies only to PROJ_FLAT projections.");
    tt->val_offset = (char *) &grid_rotation - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'center_grid_on_radar'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("center_grid_on_radar");
    tt->descr = tdrpStrDup("Option to set the Cartesian grid origin at the radar.");
    tt->help = tdrpStrDup("If true, the latitude and longitude of the grid origin will be set at the radar location. If false, grid_origin_lat and grid_origin_lon will be used. This does not apply for moving platforms.");
    tt->val_offset = (char *) &center_grid_on_radar - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'grid_origin_lat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_origin_lat");
    tt->descr = tdrpStrDup("Cartesian Grid origin latitude.");
    tt->help = tdrpStrDup("This applies to all projections except LATLON. Not used if 'center_grid_on_radar' is true.");
    tt->val_offset = (char *) &grid_origin_lat - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_origin_lon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_origin_lon");
    tt->descr = tdrpStrDup("Cartesian Grid origin longitude.");
    tt->help = tdrpStrDup("This applies to all projections except LATLON. Not used if 'center_grid_on_radar' is true.");
    tt->val_offset = (char *) &grid_origin_lon - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_lat1'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_lat1");
    tt->descr = tdrpStrDup("Cartesian Grid reference latitude 1.");
    tt->help = tdrpStrDup("This applies to LAMBERT_CONF and ALBERS projections.");
    tt->val_offset = (char *) &grid_lat1 - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_lat2'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_lat2");
    tt->descr = tdrpStrDup("Cartesian Grid reference latitude 2.");
    tt->help = tdrpStrDup("This applies to LAMBERT_CONF and ALBERS projections.");
    tt->val_offset = (char *) &grid_lat2 - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_central_scale'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_central_scale");
    tt->descr = tdrpStrDup("Cartesian Central scale for projections.");
    tt->help = tdrpStrDup("This applies to POLAR_STEREO, OBLIQUE_STEREO and TRANSVERSE_MERCATOR projections.");
    tt->val_offset = (char *) &grid_central_scale - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'grid_tangent_lat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_tangent_lat");
    tt->descr = tdrpStrDup("Cartesian Tangent latitude (deg).");
    tt->help = tdrpStrDup("This applies to OBLIQUE_STEREO only.");
    tt->val_offset = (char *) &grid_tangent_lat - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_tangent_lon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_tangent_lon");
    tt->descr = tdrpStrDup("Cartesian Tangent longitude (deg).");
    tt->help = tdrpStrDup("This applies to OBLIQUE_STEREO and POLAR_STEREO.");
    tt->val_offset = (char *) &grid_tangent_lon - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_pole_is_north'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("grid_pole_is_north");
    tt->descr = tdrpStrDup("Flag indicating stereogtraphic is over the NORTH pole.");
    tt->help = tdrpStrDup("This applies to POLAR_STEREO. If false, the projection is over thouth pole.");
    tt->val_offset = (char *) &grid_pole_is_north - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'grid_persp_radius'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_persp_radius");
    tt->descr = tdrpStrDup("Radius of perspective point (km).");
    tt->help = tdrpStrDup("This applies to VERT_PERSP.");
    tt->val_offset = (char *) &grid_persp_radius - &_start_;
    tt->single_val.d = 35786;
    tt++;
    
    // Parameter 'grid_false_northing'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_false_northing");
    tt->descr = tdrpStrDup("False northing correction.");
    tt->help = tdrpStrDup("Occasionally, this is added to the Y coordinate so that all coordinates are positive. Normally 0. As an alternative to false_northing and false_easting, you can set the offset_latitude and offset_longitude");
    tt->val_offset = (char *) &grid_false_northing - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_false_easting'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_false_easting");
    tt->descr = tdrpStrDup("False easting correction.");
    tt->help = tdrpStrDup("Occasionally, this is added to the X coordinate so that all coordinates are positive. Normally 0.");
    tt->val_offset = (char *) &grid_false_easting - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_set_offset_origin'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("grid_set_offset_origin");
    tt->descr = tdrpStrDup("Do you want to specify an offset origin using lat/lon instead of false_northing and false_easting?");
    tt->help = tdrpStrDup("If true, set grid_offset_origin_latitude and grid_offset_origin_longitude.");
    tt->val_offset = (char *) &grid_set_offset_origin - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'grid_offset_origin_latitude'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_offset_origin_latitude");
    tt->descr = tdrpStrDup("Latitude of offset origin.");
    tt->help = tdrpStrDup("See grid_set_offset_origin.");
    tt->val_offset = (char *) &grid_offset_origin_latitude - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'grid_offset_origin_longitude'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("grid_offset_origin_longitude");
    tt->descr = tdrpStrDup("Longitude of offset origin.");
    tt->help = tdrpStrDup("See grid_set_offset_origin.");
    tt->val_offset = (char *) &grid_offset_origin_longitude - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'min_nvalid_for_interp'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_nvalid_for_interp");
    tt->descr = tdrpStrDup("Minimum number of valid data points for the interpolation.");
    tt->help = tdrpStrDup("The program performs an 8-point linear interpolation. This is the number of valid data points, out of the possible 8, which must be present for interpolation to proceed. A high number will exclude marginal points. A low number will include marginal points.");
    tt->val_offset = (char *) &min_nvalid_for_interp - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 1;
    tt->max_val.i = 8;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'set_discrete_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_discrete_fields");
    tt->descr = tdrpStrDup("Option to set 'is_discrete' flag for individual fields.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_discrete_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'discrete_fields'
    // ctype is '_discrete_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("discrete_fields");
    tt->descr = tdrpStrDup("Use this to set the 'is_discrete' flag on a field.");
    tt->help = tdrpStrDup("If this is specified, nearest neighbor will be used for this field. You can use this to override the is_discrete flag on a field.");
    tt->array_offset = (char *) &_discrete_fields - &_start_;
    tt->array_n_offset = (char *) &discrete_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(discrete_field_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("discrete_field_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_discrete_fields->input_name - (char *) _discrete_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("is_discrete");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_discrete_fields->is_discrete - (char *) _discrete_fields;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("PID");
      tt->struct_vals[1].b = pTRUE;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("SETTING PSEUDO EARTH RADIUS RATIO FOR HEIGHT COMPUTATIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_standard_pseudo_earth_radius'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_standard_pseudo_earth_radius");
    tt->descr = tdrpStrDup("Option to override the standard 4/3 earth radius model for refraction.");
    tt->help = tdrpStrDup("If true, the standard 4/3 earth radius will be overridden. The US NWS NEXRAD system uses 1.21 instead of 1.333.");
    tt->val_offset = (char *) &override_standard_pseudo_earth_radius - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'pseudo_earth_radius_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("pseudo_earth_radius_ratio");
    tt->descr = tdrpStrDup("Ratio for computing the pseudo earth radius for beam height computations.");
    tt->help = tdrpStrDup("For standard refraction this is 4/3. For super refraction it will be less than 4.3, and for sub-refraction it will be greater. NEXRAD uses 1.21.");
    tt->val_offset = (char *) &pseudo_earth_radius_ratio - &_start_;
    tt->single_val.d = 1.33333;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
