/*********************************************************
 * Parameter definitions for RadxQpe
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Feb 2019
 */

commentdef {
  p_header = "RadxQpe program - quantitative precipitation estimation at the surface.";
  p_text = "Input data contains precipitation rates in 3D polar coordinates. The output is a 2D field of precipitation estimates at the surface. Both polar and Cartesian output coordinates are supported.";
}

commentdef {
  p_header = "ALGORITHM PARAMETERS";
  p_text = "Parameters to control the QPE algorithm itself.";
}

paramdef double {
  p_default = 1.0;
  p_descr = "Output azimuthal resolution (degrees)";
  p_descr = "This is the angular resolution for which we compute the precip rate at the surface.";
} azimuthal_resolution_degrees;

paramdef double {
  p_default = 0.25;
  p_min = 0.0;
  p_max = 1.0;
  p_descr = "Cumulative beam blockage threshold";
  p_help = "When the cumulative beam blockage exceeds max_beam_block_fraction, a higher elevation angle is used";
} max_beam_block_fraction;

paramdef double {
  p_descr = "Max height of beam for valid precip rate (km MSL).";
  p_help = "If beam is above this height, the precip rate is set to 0.";
  p_default = 6.0;
} max_beam_height_km_msl;

paramdef double {
  p_descr = "Minimum valid precip rate (mm/hr).";
  p_help = "If rate is less than this, it is set to 0.";
  p_default = 1.0;
} min_valid_precip_rate;

commentdef {
  p_header = "CONSTRAIN BY ELEVATION ANGLE";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Constrain valid data to be between elevation limits.";
  p_help = "If TRUE, will only use sweeps with elevation angles between the limits.";
} constrain_by_elevation_angle;

paramdef double {
  p_descr = "Minimum elevation angle in input data (deg).";
  p_help = "Constrain the elevation of data used to be at or above this elevation angle.";
  p_default = 0.0;
} min_elevation_deg;

paramdef double {
  p_descr = "Maximum elevation angle in input data (deg).";
  p_help = "Constrain the elevation of data used to be at or below this elevation angle.";
  p_default = 90.0;
} max_elevation_deg;

commentdef {
  p_header = "OPERATIONS MODE";
};

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = "By default RadxQpe operates in REALTIME mode. It watches for files arriving in the input_dir directory, and then processes each file in order. If you specify -f on the command lines, the app will operate in FILELIST mode and process each of the files that are specified. If you specify -start and -end on the command line, RadxQpe will operate in ARCHIVE mode, processing all of the files in input_dir that are between the specified start and end times.";
} mode;

paramdef string {
  p_default = "test";
  p_descr = "Process instance - REALTIME mode only.";
  p_help = "Used for registration with procmap.";
} instance;

paramdef string {
  p_default = "/tmp/RadxRate";
  p_descr = "Location of input precip rate data.";
  p_help = "Set this to the directory containing the input data.";
} input_dir;

paramdef int {
  p_default = 900;
  p_descr = "Time margin when searching for data files (sec).";
  p_help = "Extent of time search. Should be at least as long as a radar volume.";
} input_time_margin_seconds;

paramdef string {
  p_default = "2018 08 20 00 00 00";
  p_descr = "Set the start time for ARCHIVE mode analysis.";
  p_help = "Format is 'yyyy mm dd hh mm ss'.";
} start_time;

paramdef string {
  p_default = "2018 08 30 00 00 00";
  p_descr = "Set the end time for ARCHIVE mode analysis.";
  p_help = "Format is 'yyyy mm dd hh mm ss'.";
} end_time;

commentdef {
  p_header = "CHECKING SNR";
  p_text = "We check SNR to ensure reasonable data quality. If SNR is not available, we estimate it from DBZ.";
}

paramdef double {
  p_default = 3.0;
  p_descr = "SNR threshold (dB)";
  p_help = "When SNR < min_SNR at a gate, we move up to a higher elevation sweep.";
} min_SNR;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Is SNR data available?";
  p_help = "If not, SNR will be computed from the DBZ field. See 'noise_dbz_at_100km'.";
} SNR_available;

paramdef string {
  p_default = "SNR";
  p_descr = "Field name for SNR.";
  p_help = "Signal-to-noise ratio (dB). Set this to 'SNR' if SNR_available is false, so that we can estimate the SNR and place it in a suitably-named field.";
} SNR_field_name;

paramdef double {
  p_default = 0.0;
  p_descr = "The noise value, represented as dBZ at a range of 100km.";
  p_help = "This is used for computing the SNR from the DBZ field. It is only used if SNR_available is FALSE. The SNR will be computed by range-correcting this value and using it as the noise value.";
} noise_dbz_at_100km;

paramdef string {
  p_default = "DBZ";
  p_descr = "Field name for DBZ. Used to compute SNR from DBZ.";
  p_help = "Set to empty if no DBZ field is available.";
} DBZ_field_name;

commentdef {
  p_header = "BEAM BLOCKAGE and PARTICLE ID";
}

paramdef string {
  p_default = "PID";
  p_descr = "Field name of particle ID in input data";
  p_help = "This is required.";
} PID_field_name;

paramdef string {
  p_default = "unknown";
  p_descr = "Full path to beam blockage file.";
  p_help = "This file is created using RadxBeamBlock";
} beam_block_path;

paramdef string {
  p_default = "BEAME";
  p_descr = "Field name for cumulative beam blockage with range.";
  p_help = "This field contains a fraction - between 0 and 1 - of the power blocked.";
} beam_block_field_name;

commentdef {
  p_header = "PRECIP RATE FIELDS";
}

typedef enum {
  OUTPUT_FLOAT, OUTPUT_SHORT
} output_encoding_t;

typedef struct {
  string input_rate_name;
  string output_rate_name;
  string long_name;
  string standard_name;
  string units;
  output_encoding_t encoding;
} rate_field_t;

paramdef struct rate_field_t {
  p_default = {
    {
      input_rate_name = "RATE_ZH",
      output_rate_name = "RATE_ZH",
      long_name = "precip_rate_computed_from_ZH",
      standard_name = "precip_rate_computed_from_ZH",
      units = "mm/h",
      encoding = OUTPUT_FLOAT
    }
    ,
    {
      input_rate_name = "RATE_HYBRID",
      output_rate_name = "RATE_HYBRID",
      long_name = "precip_rate_computed_from_NCAR_hybrid_method",
      standard_name = "precip_rate_computed_from_NCAR_hybrid_method",
      units = "mm/h",
      encoding = OUTPUT_FLOAT
    }
  };
  p_descr = "The array of precip rate input/output fields.";
  p_help = "The program will read in one precip field per entry here, and produce an output precip rate field from it. Long_name and standard_name are netCDF conventions. Set the output encoding type to select the resolution of the output data.";
} rate_fields[];

commentdef {
  p_header = "DIAGNOSTIC FIELDS";
  p_text = "Additional diagnostic output fields are given in the output_fields struct array.\n";
}

typedef enum {
  PID, ELEVATION, HEIGHT, RANGE, NUM_BLOCKED, NUM_LOW_SNR, NUM_CLUTTER, MASK
} output_data_t;

typedef struct {
  string name;
  string long_name;
  string standard_name;
  string units;
  output_encoding_t encoding;
  output_data_t type;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    {
      name = "PID",
      long_name = "NCAR_particle_ID",
      standard_name = "NCAR_particle_ID",
      units = "",
      encoding = OUTPUT_SHORT,
      type = PID
    }
    ,
    {
      name = "ELEVATION",
      long_name = "elevation_angle_of_lowest_valid_rate_echo",
      standard_name = "elevation_angle_of_lowest_valid_rate_echo",
      units = "deg",
      encoding = OUTPUT_SHORT,
      type = ELEVATION
    }
    ,
    {
      name = "HEIGHT",
      long_name = "height_of_lowest_valid_rate_echo",
      standard_name = "height_of_lowest_valid_rate_echo",
      units = "km",
      encoding = OUTPUT_SHORT,
      type = HEIGHT
    }
    ,
    {
      name = "RANGE",
      long_name = "range_of_lowest_valid_rate_echo",
      standard_name = "range_of_lowest_valid_rate_echo",
      units = "km",
      encoding = OUTPUT_SHORT,
      type = RANGE
    }
    ,
    {
      name = "NBLOCK",
      long_name = "number_of_blocked_angles",
      standard_name = "number_of_blocked_angles",
      units = "count",
      encoding = OUTPUT_SHORT,
      type = NUM_BLOCKED
    }
    ,
    {
      name = "NLOW_SNR",
      long_name = "number_of_low_snr_angles",
      standard_name = "number_of_low_snr_angles",
      units = "count",
      encoding = OUTPUT_SHORT,
      type = NUM_LOW_SNR
    }
    ,
    {
      name = "NCLUT",
      long_name = "number_of_clutter_angles",
      standard_name = "number_of_clutter_angles",
      units = "count",
      encoding = OUTPUT_SHORT,
      type = NUM_CLUTTER
    }
    ,
    {
      name = "MASK",
      long_name = "mask_for_domain",
      standard_name = "mask_for_domain",
      units = "",
      encoding = OUTPUT_SHORT,
      type = MASK
    }
  };

  p_descr = "Array of additional output fields besides the precip rate fields.";
  p_help = "The program will output these fields in addition to the precip rate output fields. long_name and standard_name are netCDF conventions. Set the output encoding type to select the resolution of the output data. These fields are more for diagnostic use. The MASK field itself is set to 1 over the entire grid so you can see the domain.";
} output_fields[];

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set 'is_discrete' flag for individual fields.";
  p_descr = "If TRUE, the specified fields will be treated as holding discrete values, and for the Cartesian interpolation the nearest neighbor approach will be used rather than interpolation. You should do this for classification fields such as PID - particle ID, HCA.";
} set_discrete_fields;

typedef struct {
  string input_name;
  boolean is_discrete;
} discrete_field_t;

paramdef struct discrete_field_t {
  p_default = {
    {
      input_name = "PID",
      is_discrete = TRUE
    }
  };
  p_descr = "Use this to set the 'is_discrete' flag on a field.";
  p_help = "If this is specified, nearest neighbor will be used for this field. You can use this to override the is_discrete flag on a field.";
} discrete_fields[];

commentdef {
  p_header = "POLAR OUTPUT DATA SET INFORMATION";
  p_text = "The output is CfRadial files, and other formats to the extent supported by the format.";
}

paramdef string {
  p_default = "";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory. Set empty for no polar output";
} polar_output_dir;

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_NEXRAD,
  OUTPUT_FORMAT_UF,
  OUTPUT_FORMAT_MDV_RADIAL
} polar_output_format_t;

paramdef enum polar_output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL;
  p_descr = "Format for the output files.";
} polar_output_format;

paramdef int {
  p_default = 4;
  p_descr = "Compression level for output.";
  p_help = "Applies to netCDF only. 0 means no compression.";
} compression_level;

paramdef string {
  p_default = "Radar-based quantative precipitation estimation";
  p_descr = "Title string for netCDF file.";
} title;

paramdef string {
  p_default = "EOL/NCAR";
  p_descr = "Institution string for netCDF file.";
} institution;

paramdef string {
  p_default = "LROSE RadxQpe application";
  p_descr = "Source string for netCDF file.";
} source;

commentdef {
  p_header = "CARTESIAN GRID OUTPUT";
  p_text = "Cartesian grids are represented as MDV - these may be written out as CF-compliant NetCDF.";
}

paramdef string {
  p_default = "/tmp/RadxQpe/mdv/cart";
  p_descr = "Output directory path for cartesian data.";
  p_help = "Regridded cartesian files will be written to this directory. Set to empty for no cartesian output";
} cartesian_output_dir;

paramdef boolean {
  p_default = true;
  p_descr = "Write Cartesian files as CF NetCDF.";
  p_help = "If false, the Cartesian files will be written as MDV.";
} write_cartesian_files_as_netcdf;

paramdef int {	
  p_default = 3;
  p_min = 1;
  p_max = 4;
  p_descr = "Minimum number of valid data points for the interpolation.";
  p_help = "The program performs a 4-point linear interpolation from 2D-polar to 2D-Cartesian space. This is the number of valid data points, out of the max of 4, which must be present for interpolation to proceed. A high number will exclude marginal points. A low number will include marginal points.";
} min_nvalid_for_cart_interp;

commentdef {
  p_header = "CARTESIAN GRID PROJECTION";
}

typedef enum {
  PROJ_LATLON = 0,
  PROJ_LAMBERT_CONF = 3,
  PROJ_MERCATOR =  4,
  PROJ_POLAR_STEREO = 5,
  PROJ_FLAT = 8,
  PROJ_OBLIQUE_STEREO = 12,
  PROJ_TRANS_MERCATOR = 15,
  PROJ_ALBERS = 16,
  PROJ_LAMBERT_AZIM = 17,
  PROJ_VERT_PERSP = 18
} grid_projection_t;

paramdef enum grid_projection_t {
  p_default = PROJ_FLAT;
  p_descr = "Projection for cartesian grid. See projection param below.";
  p_help =
  "\tPROJ_LATLON: simple lat/lon grid (Equidistant Cylindrical)\n"
  "\tPROJ_FLAT: Azimuthal Equidistant (Radar)\n"
  "\tPROJ_LAMBERT_CONF: Lambert Conformal Conic\n"
  "\tPROJ_LAMBERT_AZIM: Lambert Azimuthal Equal Area\n"
  "\tPROJ_MERCATOR: Mercator - EW orientation\n"
  "\tPROJ_TRANS_MERCATOR: Tranverse Mercator - NS orientation\n"
  "\tPROJ_POLAR_STEREO: Stereographic- polar aspect\n"
  "\tPROJ_OBLIQUE_STEREO: Stereographic - oblique aspect\n"
  "\tPROJ_ALBERS: Albers Equal Area Conic\n"
  "\tPROJ_VERT_PERSP: Vertical Perspective (satellite view)\n\n";
} grid_projection;

typedef struct {
  int nx;
  int ny;
  double minx;
  double miny;
  double dx;
  double dy;
} grid_xy_geom_t;

paramdef struct grid_xy_geom_t {
  p_default = {600, 600, -299.5, -299.5, 1.0, 1.0};
  p_descr = "Cartesian grid parameters in x,y.";
  p_help = "Units in km, except LATLON, which is in degrees.";
} grid_xy_geom;

paramdef double {
  p_default = 0.0;
  p_descr = "Cartesian Grid rotation.";
  p_help = "This applies only to PROJ_FLAT projections.";
} grid_rotation;

paramdef boolean {
  p_default = true;
  p_descr = "Option to set the Cartesian grid origin at the radar.";
  p_help = "If true, the latitude and longitude of the grid origin will be set at the radar location. If false, grid_origin_lat and grid_origin_lon will be used. This does not apply for moving platforms.";
} center_grid_on_radar;

paramdef double {
  p_default = 0.0;
  p_descr = "Cartesian Grid origin latitude.";
   p_help = "This applies to all projections except LATLON. Not used if 'center_grid_on_radar' is true.";
} grid_origin_lat;

paramdef double {
  p_default = 0.0;
  p_descr = "Cartesian Grid origin longitude.";
  p_help = "This applies to all projections except LATLON. Not used if 'center_grid_on_radar' is true.";
} grid_origin_lon;

paramdef double {
  p_default = 0.0;
  p_descr = "Cartesian Grid reference latitude 1.";
  p_help = "This applies to LAMBERT_CONF and ALBERS projections.";
} grid_lat1;

paramdef double {
  p_default = 0.0;
  p_descr = "Cartesian Grid reference latitude 2.";
  p_help = "This applies to LAMBERT_CONF and ALBERS projections.";
} grid_lat2;

paramdef double {
  p_default = 1.0;
  p_descr = "Cartesian Central scale for projections.";
  p_help = "This applies to POLAR_STEREO, OBLIQUE_STEREO and TRANSVERSE_MERCATOR projections.";
} grid_central_scale;

paramdef double {
  p_default = 0.0;
  p_descr = "Cartesian Tangent latitude (deg).";
  p_help = "This applies to OBLIQUE_STEREO only.";
} grid_tangent_lat;

paramdef double {
  p_default = 0.0;
  p_descr = "Cartesian Tangent longitude (deg).";
  p_help = "This applies to OBLIQUE_STEREO and POLAR_STEREO.";
} grid_tangent_lon;

paramdef boolean {
  p_default = true;
  p_descr = "Flag indicating stereogtraphic is over the NORTH pole.";
  p_help = "This applies to POLAR_STEREO. If false, the projection is over thouth pole.";
} grid_pole_is_north;

paramdef double {
  p_default = 35786;
  p_descr = "Radius of perspective point (km).";
  p_help = "This applies to VERT_PERSP.";
} grid_persp_radius;

paramdef double {
  p_default = 0.0;
  p_descr = "False northing correction.";
  p_help = "Occasionally, this is added to the Y coordinate so that all coordinates are positive. Normally 0. As an alternative to false_northing and false_easting, you can set the offset_latitude and offset_longitude";
} grid_false_northing;

paramdef double {
  p_default = 0.0;
  p_descr = "False easting correction.";
  p_help = "Occasionally, this is added to the X coordinate so that all coordinates are positive. Normally 0.";
} grid_false_easting;

paramdef boolean {
  p_default = false;
  p_descr = "Do you want to specify an offset origin using lat/lon instead of false_northing and false_easting?";
  p_help = "If true, set grid_offset_origin_latitude and grid_offset_origin_longitude.";
} grid_set_offset_origin;

paramdef double {
  p_default = 0;
  p_descr = "Latitude of offset origin.";
  p_help = "See grid_set_offset_origin.";
} grid_offset_origin_latitude;

paramdef double {
  p_default = 0;
  p_descr = "Longitude of offset origin.";
  p_help = "See grid_set_offset_origin.";
} grid_offset_origin_longitude;

commentdef {
  p_header = "SETTING PSEUDO EARTH RADIUS RATIO FOR HEIGHT COMPUTATIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the standard 4/3 earth radius model for refraction.";
  p_help = "If true, the standard 4/3 earth radius will be overridden. The US NWS NEXRAD system uses 1.21 instead of 1.333.";
} override_standard_pseudo_earth_radius;

paramdef double {
  p_default = 1.33333333;
  p_descr = "Ratio for computing the pseudo earth radius for beam height computations.";
  p_help = "For standard refraction this is 4/3. For super refraction it will be less than 4.3, and for sub-refraction it will be greater. NEXRAD uses 1.21.";
} pseudo_earth_radius_ratio;

commentdef
{
  p_header = "DEBUG CONTROL";
}

paramdef boolean
{
  p_descr = "debug flag";
  p_help = "Debug flag.";
  p_default = FALSE;
} debug_norm;

paramdef boolean
{
  p_descr = "verbose debug flag";
  p_help = "Debug flag.";
  p_default = FALSE;
} debug_verbose;

paramdef boolean
{
  p_default = FALSE;
} debug_triggering;

paramdef boolean
{
  p_default = FALSE;
  p_help = "TRUE to show real time in all logged messages";
} debug_show_realtime;

paramdef boolean
{
  p_default = FALSE;
  p_help = "TRUE to show the C++ class and method in the logged messages";
} debug_show_class_and_method;

commentdef {
  p_header = "THREADING FOR SPEED.";
}

paramdef int {
  p_default = 4;
  p_min = 1;
  p_descr = "The number of compute threads.";
  p_help = "The interpolation are segmented in azimuth, with each thread computing an azimuth. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads. If set to 1, threading is disabled";
} n_compute_threads;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Thread debug";
  p_help = "Set to true to see debug information regarding threading";
} threads_debug;

