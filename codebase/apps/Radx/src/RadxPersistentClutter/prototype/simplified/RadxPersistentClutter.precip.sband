/**********************************************************************
 * TDRP params for RadxPersistentClutter
 **********************************************************************/

//======================================================================
//
// RadxPersistentClutter app.
//
// RadxPersistentClutter identifies persistent clutter in polar radar 
//   data, flags it, and writes out the statistics to a CfRadial file.
//
//======================================================================
 
//======================================================================
//
// RadxApp.
//
// Parameters for general algorithm data filtering for Radx format input 
//   data.
//
//======================================================================
 
//======================================================================
//
// Debugging and process control.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// Program instance for process registration.
//
// This application registers with procmap. This is the instance used 
//   for registration.
//
//
// Type: string
//

instance = "precip.sband";

///////////// debug_mode //////////////////////////////
//
// debugging mode.
//
// NONE=as quiet as possible, DEBUG = minimal debug output, 
//   DEBUG_VERBOSE=more.
//
//
// Type: enum
// Options:
//     NONE
//     DEBUG
//     DEBUG_VERBOSE
//

debug_mode = NONE;

//======================================================================
//
// Data input.
//
//  Parameters that control the reading of input data .
//
//======================================================================
 
///////////// debug_triggering ////////////////////////
//
// triggering debug.
//
// set to TRUE to debug triggering.
//
//
// Type: boolean
//

debug_triggering = FALSE;

///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// In REALTIME mode, the program waits for a new input file.  In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line. Paths (in ARCHIVE mode, at 
//   least) MUST contain a day-directory above the data file -- 
//   ./data_file.ext will not work as a file path, but 
//   ./yyyymmdd/data_file.ext will.
//
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//     FILELIST
//

mode = ARCHIVE;

///////////// input_dir ///////////////////////////////
//
// input directory name.
//
// Location of input data in CfRadial format.
//
//
// Type: string
//

input_dir = "/scr/cirrus3/rsfdata/projects/precip/grids/spol/radarPolar/field/moments/sband/sur";

///////////// max_realtime_data_age_secs //////////////
//
// max_realtime_data_age_secs.
//
// maximum allowed difference (seconds) between read request time and 
//   data time.
//
//
// Type: int
//

max_realtime_data_age_secs = 120;

///////////// read_set_fixed_angle_limits /////////////
//
// Option to set fixed angle limits.
//
// Only read sweeps within the specified fixed angle limits. Fixed 
//   angles are elevation in PPI mode and azimuth in RHI mode.
//
//
// Type: boolean
//

read_set_fixed_angle_limits = TRUE;

///////////// read_lower_fixed_angle //////////////////
//
// Lower fixed angle limit - degrees.
//
//
// Type: double
//

read_lower_fixed_angle = 0.3;

///////////// read_upper_fixed_angle //////////////////
//
// Upper fixed angle limit - degrees.
//
//
// Type: double
//

read_upper_fixed_angle = 3.1;

///////////// set_max_range ///////////////////////////
//
// Option to set the max range for any ray.
//
//
// Type: boolean
//

set_max_range = TRUE;

///////////// max_range_km ////////////////////////////
//
// Specified maximim range - km.
//
// Gates beyond this range are removed.
//
//
// Type: double
//

max_range_km = 60;

//======================================================================
//
// Threading.
//
// Optional threading of beams, depends on app whether params are used 
//   or not.
//
//======================================================================
 
///////////// num_threads /////////////////////////////
//
// Number of threads.
//
// set to 1 or 0 for no threading.
//
//
// Type: int
//

num_threads = 0;

///////////// thread_debug ////////////////////////////
//
// Thread debugging.
//
// TRUE to see thread related debugging.
//
//
// Type: boolean
//

thread_debug = FALSE;

//======================================================================
//
// RadxPersistentClutter.
//
// Parameters for setting clutter locations of one input field.
//
//======================================================================
 
///////////// input_field_name ////////////////////////
//
// input field name.
//
// name of field to find clutter in.
//
//
// Type: string
//

input_field_name = "DBZ";

///////////// output_field_name ///////////////////////
//
// output field name.
//
// name to give final output clutter field.
//
//
// Type: string
//

output_field_name = "DBZ";

///////////// threshold ///////////////////////////////
//
// threshold.
//
// If data is always above this value it is a clutter location.
//
//
// Type: double
//

threshold = 10;

///////////// clutter_percentile //////////////////////
//
// Clutter percentile.
//
// percentile to use in clutter value determination (see the paper, 
//   section III. Correction of Radar Reflectivity.
//
//
// Type: double
//

clutter_percentile = 0.5;

///////////// fixedElevations /////////////////////////
//
// Fixed storage elevation values.
//
// List of target elevation angles (the angles seem to wobble a lot). 
//   Inputs are mapped to one of these using tolerance params.
//
//
// Type: double
// 1D array - variable length.
//

fixedElevations = {
 0.5,
 1,
 1.5,
 2,
 3,
 4
};

///////////// azToleranceDegrees //////////////////////
//
// azimumth tolerance.
//
// allowed degrees difference between azimuth values from different 
//   volumes to be considered part of the same ray.
//
//
// Type: double
//

azToleranceDegrees = 0.1;

///////////// elevToleranceDegrees ////////////////////
//
// elevation tolerance.
//
// allowed degrees difference between elevation values from different 
//   volumes to be considered part of the same ray.
//
//
// Type: double
//

elevToleranceDegrees = 0.1;

///////////// missing_clutter_value ///////////////////
//
// missing clutter value.
//
// value to give clutter estimates when the wanted percentile is the 
//   missing data value.
//
//
// Type: double
//

missing_clutter_value = -115;

///////////// threshold_tolerance /////////////////////
//
// variation in threshold for convergence.
//
// The threshold as percent of total volumes to identify a point as 
//   clutter should converge to a stable value.  This value is the allowed 
//   tolerance (change) to be considered stable.
//
//
// Type: double
//

threshold_tolerance = 0.025;

///////////// maximum_percent_change //////////////////
//
// Maximum percent of pixels that can change for convergence.
//
// The percentage of pixels that change from clutter to nonclutter or 
//   back should decrease to a minimum for convergence.
//
//
// Type: double
//

maximum_percent_change = 0.01;

///////////// minimum_stable_volumes //////////////////
//
// Number of volumes that show stablity prior to considering the 
//   situation stable.
//
// The threshold converges, and needs to stay converged for this many 
//   volumes before giving the thumbs up.
//
//
// Type: double
//

minimum_stable_volumes = 25;

///////////// histogram_resolution ////////////////////
//
// histogram resolution.
//
// Histograms are used to set clutter value. This is the resolution.
//
//
// Type: double
//

histogram_resolution = 0.2;

///////////// histogram_max ///////////////////////////
//
// histogram max.
//
// Histograms are used to set clutter value. This is the maximum bin.
//
//
// Type: double
//

histogram_max = 75;

//======================================================================
//
// Data output.
//
// Parameters for writing results.
//
//======================================================================
 
///////////// clutter_stats_output_dir ////////////////
//
// Location for final clutter statistics.
//
// Final output is only written at the end of a processing phase, with 
//   the output time equal to the time of the first volume processed.
//
//
// Type: string
//

clutter_stats_output_dir = "/scr/cirrus3/rsfdata/projects/precip/grids/spol/radarPolar/clutter_stats/sband/sur";

///////////// write_diagnostic_output /////////////////
//
// Write out diagnostic output.
//
//
// Type: boolean
//

write_diagnostic_output = TRUE;

///////////// diagnostic_volume_dir ///////////////////
//
// Dir for diagnostic output.
//
// If true, output from each volume is written, to show the build up of 
//   skill through time.
//
//
// Type: string
//

diagnostic_volume_dir = "/scr/cirrus3/rsfdata/projects/precip/grids/spol/radarPolar/clutter_stats/sband/diag";

///////////// diagnostic_ascii_dir ////////////////////
//
// Output ascii dir to which to write plottables.
//
//
// Type: string
//

diagnostic_ascii_dir = "/scr/cirrus3/rsfdata/projects/precip/grids/spol/radarPolar/clutter_stats/sband/diag";

