/*********************************************************
 * parameter definitions for RadxPrint
 *
 * Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Jan 2010
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "Prints out radial RADAR/LIDAR data";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

commentdef {
  p_header = "DATA RETRIEVAL CONTROL";
}

paramdef string {
  p_default = ".";
  p_descr = "Path string - full path specified.";
  p_help = "File will be read from this path.";
} path;

paramdef boolean {
  p_default = false;
  p_descr = "Option to specify file by time.";
  p_help = "If true, paths for reads and writes are based on time and the data directory. If false, reads and writes use the specified path.";
} specify_file_by_time;

paramdef string {
  p_default = ".";
  p_descr = "Data directory.";
  p_help = "Used to locate file if specify_file_by_time is true.";
} dir;

typedef enum {
  READ_LATEST             = 0,
  READ_CLOSEST            = 1,
  READ_FIRST_BEFORE       = 2,
  READ_FIRST_AFTER        = 3,
  READ_RAYS_IN_INTERVAL   = 4
} read_search_mode_t;

paramdef enum read_search_mode_t {
  p_default = READ_LATEST;
  p_descr = "Mode for searching for data in time domain.";
  p_help = "For all except LATEST, you must specify the search time and the search margin.";
} read_search_mode;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "Data time string.";
  p_help = "Time for data requested. Format is YYYY MM DD HH MM SS";
} read_search_time;

paramdef int {
  p_default = "3600";
  p_descr = "Margin around search time (secs).";
  p_help = "Applies to all search modes except LATEST.";
} read_search_margin;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "Start time for rays search.";
  p_help = "Applies to READ_RAYS_IN_INTERVAL mode";
} read_start_time;

paramdef string {
  p_default = "1970 01 01 00 00 00";
  p_descr = "End time for rays search.";
  p_help = "Applies to READ_RAYS_IN_INTERVAL mode";
} read_end_time;

paramdef double {
  p_default = 1.0;
  p_descr = "Dwell width (secs).";
  p_help = "Applies to READ_RAYS_IN_INTERVAL mode.";
} read_dwell_secs;

typedef enum {
  DWELL_STATS_MEAN        = 0,
  DWELL_STATS_MEDIAN      = 1,
  DWELL_STATS_MAXIMUM     = 2,
  DWELL_STATS_MINIMUM     = 3,
  DWELL_STATS_MIDDLE      = 4
} read_dwell_stats_t;

paramdef enum read_dwell_stats_t {
  p_default = DWELL_STATS_MIDDLE;
  p_descr = "Method for computing stats on the dwell.";
  p_help = "Applies to READ_RAYS_IN_INTERVAL mode. MIDDLE refers to the middle ray in the dwell sequence.";
} read_dwell_stats;

commentdef {
  p_header = "READ CONTROL OPTIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to only read the meta data";
  p_help = "In this case sweep and field metadata will be read, but the ray and field data will not be read.";
} read_meta_data_only;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set field names";
} read_set_field_names;

paramdef string {
  p_default = { "DBZ", "VEL" };
  p_descr = "Field name list.";
} read_field_names[];

paramdef boolean {
  p_default = false;
  p_descr = "Option to set fixed angle limits";
  p_help = "If 'read_apply_strict_angle_limits' is set, only read sweeps within the specified fixed angle limits. If strict checking is false and no data lies within the limits, return the closest applicable sweep. NOTE - fixed angles are elevation in PPI mode and azimuth in RHI mode.";
} read_set_fixed_angle_limits;

paramdef double {
  p_default = 0;
  p_descr = "Lower fixed angle limit - degrees.";
} read_lower_fixed_angle;

paramdef double {
  p_default = 90;
  p_descr = "Upper fixed angle limit - degrees.";
} read_upper_fixed_angle;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set sweep number limits";
  p_help = "If 'read_apply_strict_angle_limits' is set, only read sweeps within the specified limits. If strict checking is false and no data lies within the limits, return the closest applicable sweep.";
} read_set_sweep_num_limits;

paramdef int {
  p_default = 0;
  p_descr = "Lower sweep number limit.";
} read_lower_sweep_num;

paramdef int {
  p_default = 0;
  p_descr = "Upper sweep number limit.";
} read_upper_sweep_num;

paramdef boolean {
  p_default = true;
  p_descr = "Option to apply strict checking for angle or sweep number limits on read.";
  p_help = "If true, an error will occur if the fixed angle limits or sweep num limits are outside the bounds of the data. If false, a read is guaranteed to return at least 1 sweep - if no sweep lies within the angle limits set, the nearest sweep will be returned.";
} read_apply_strict_angle_limits;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set the radar number.";
  p_help = "See read_radar_num.";
} read_set_radar_num;

paramdef int {
  p_default = 0;
  p_descr = "Set the radar number for the data to be extracted.";
  p_help = "Most files have data from a single radar, so this does not apply. The NOAA HRD files, however, have data from both the lower fuselage (LF, radar_num = 1) and tail (TA, radar_num = 2) radars. For HRD files, by default the TA radar will be used, unless the radar num is set to 1 for the LF radar.";
} read_radar_num;

paramdef boolean {
  p_default = false;
  p_descr = "Option to aggregate sweep files into a volume on read.";
  p_help = "If false, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.";
} aggregate_sweep_files_on_read;

paramdef boolean {
  p_default = false;
  p_descr = "Option to aggregate all files in the file list on read.";
  p_help = "If true, all of the files specified with the '-f' arg will be aggregated into a single volume as they are read in. This only applies to FILELIST mode. Overrides 'aggregate_sweep_files_on_read'.";
} aggregate_all_files_on_read;

paramdef boolean {
  p_default = false;
  p_descr = "Option to ignore rays with antenna transition flag set.";
  p_help = "The transition flag is set when the antenna is moving between sweeps. If this parameter is true, rays containing the transition flag will not be read in.";
} ignore_antenna_transitions;

paramdef boolean {
  p_default = false;
  p_descr = "Option to load up fields on the volume by combining the fields from the rays into a single array.";
  p_help = "If false, the fields will be left managed by the rays.";
} load_volume_fields_from_rays;

paramdef boolean {
  p_default = false;
  p_descr = "Option to trip surveillance sweeps so that they only cover 360 degrees.";
  p_help = "Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.";
} trim_surveillance_sweeps_to_360deg;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove rays for which all data is missing.";
  p_help = "If true, ray data will be checked. If all fields have missing data at all gates, the ray will be removed after reading.";
} remove_rays_with_all_data_missing;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove rays taken while the antenna was in transition.";
  p_help = "If true, rays with the transition flag set will not be used. The transiton flag is set when the antenna is in transtion between one sweep and the next.";
} remove_rays_with_antenna_transitions;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set the max range for any ray.";
} set_max_range;

paramdef double {
  p_default = 9999;
  p_descr = "Specified maximim range - km.";
  p_help = "Gates beyond this range are removed.";
} max_range_km;

paramdef boolean {
  p_default = false;
  p_descr = "Preserve sweeps just as they are in the file.";
  p_help = "Applies generally to NEXRAD data. If true, the sweep details are preserved. If false, we consolidate sweeps from split cuts into a single sweep.";
} preserve_sweeps;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove long range rays.";
  p_help = "Applies to NEXRAD data. If true, data from the non-Doppler long-range sweeps will be removed.";
} remove_long_range_rays;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove short range rays.";
  p_help = "Applies to NEXRAD data. If true, data from the Doppler short-range sweeps will be removed.";
} remove_short_range_rays;

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the number of gates to be constant.";
  p_help = "If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.";
} set_ngates_constant;

paramdef boolean {
  p_default = false;
  p_descr = "Option to negate the latitude.";
  p_help = "Mainly useful for RAPIC files. In RAPIC, latitude is always positive, so mostly you need to set the latitiude to the negative value of itself.";
} change_radar_latitude_sign;

paramdef boolean {
  p_default = false;
  p_descr = "Option to apply the georeference info for moving platforms.";
  p_help = "For moving platforms, measured georeference information is sometimes available. If this is set to true, the georeference data is applied and appropriate corrections made. If possible, Earth-centric azimuth and elevation angles will be computed.";
} apply_georeference_corrections;

commentdef {
  p_header = "PRINT CONTROL";
}

typedef enum {
  PRINT_MODE_NORM,
  PRINT_MODE_NATIVE,
  PRINT_MODE_DORADE_FORMAT
} print_mode_t;

paramdef enum print_mode_t {
  p_default = PRINT_MODE_NORM;
  p_descr = "Print mode option";
  p_help = "Controls details of the printing. Generally set in response to the command line args.";
} print_mode;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print angles list for each sweep.";
  p_help = "The list of angles will be listed for each file or time.";
} print_sweep_angles;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print out ray meta data.";
  p_help = "If false, only sweep and calib information will be printed.";
} print_rays;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print summary for each ray.";
  p_help = "The main metadata will be printed, followed by the ray summary.";
} print_ray_summary;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print a space-delimited angle table.";
  p_help = "If true, prints space-delimited table of ray properties.";
} print_ray_table;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print out data.";
  p_help = "If true, data values will be printed.";
} print_data;

