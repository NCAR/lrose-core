///////////////////////////////////////////////////////
//  parameter definitions for RadxBeamBlock
//
////////////////////////////////////////////////////////

commentdef {
  p_header = "RadxBeamBlock program";
  p_text = "Reads elevation data files, and for a specified radar (location and scanning) produce beam blockage output for the radar";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;
  
paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

commentdef {
  p_header = "ALGORITHM PARAMS";
}

paramdef int
{
  p_descr = "num_elev_subsample";
  p_help = "Number of subsamples per elevation";
  p_default = 64;
} num_elev_subsample;

paramdef int
{
  p_descr = "num_gate_subsample";
  p_help = "Number of subsamples per gate. I think gates are actually azimuths";
  p_default = 64;
} num_gate_subsample;

paramdef int
{
  p_descr = "num_bin_subsample";
  p_help = "Number of subsamples per range bin";
  p_default =20;
} num_bin_subsample;

commentdef {
  p_header = "INPUT PARAMS";
}

paramdef string
{
  p_descr = "input data";
  p_help = "the file with input digital elevation model data";
  p_default = "./standalone_beam_blocking/data/srtm3";
} input_dem_path;


typedef enum
{
  SHUTTLE_RADAR_TOPOGRAPHY,
  ESRI_I65,
  ESRI_ANS,
  ESRI_CLARKE1858,
  ESRI_GRS80,
  ESRI_WGS84,
  ESRI_WGS72,
  INTERNATIONAL1924,
  AUSTRALIAN_NATIONAL
} DigitalElevationModel_t;

paramdef enum DigitalElevationModel_t
{
  p_descr = "format of input digital elevation model data";
  p_help = "supported digital elevation models:\n"
  "  Shuttle Radar Topography Mission (3 arc-second resolution)\n"
  "          format: srtm3 (data found here:\n"
  "   	     http://dds.cr.usgs.gov/srtm/version2_1/SRTM3\n"
  " ESRI grid data (spheroid), with the various standard spheroids\n";
  p_default = SHUTTLE_RADAR_TOPOGRAPHY;
}  input_data_format;


commentdef {
  p_header = "RADAR PARAMETERS";
}

paramdef int  {
  p_default = {2014, 03, 24, 00, 00, 00};
  p_descr = "Time for output files";
  p_descr = "This is year, month, day, hour, min, sec";
} time[6];

paramdef string {
  p_default = "SITE";
  p_descr = "Name of radar site";
  p_help = "Stored in netCDF file.";
} site_name;

paramdef string {
  p_default = "NAME";
  p_descr = "Name of radar";
} radar_name;

typedef struct {
  double latitudeDeg;
  double longitudeDeg;
  double altitudeKm;
} radar_location_t;

paramdef struct radar_location_t {
  p_default = { 0.0, 0.0, 0.0 };
  p_descr = "Radar location";
  p_help = "The radar_location, note that the altitude is in meters MSL.";
} radar_location;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag to lookup the radar altitude";
  p_help = "If TRUE, don't use altitudKm from radar_location, instead figure it out by looking into the tiles at the latitudeDeg and longitudeDeg";
} do_lookup_radar_altitude;

paramdef double
{
  p_default = 2.0;
  p_descr = "Radar wavelength, cm";
} radar_wavelength_cm;

paramdef double
{
  p_default = 1.0;
  p_descr = "Radar beamwidth horizontal";
} horiz_beam_width_deg;

paramdef double
{
  p_default = 1.0;
  p_descr = "Radar beamwidth vertical";
} vert_beam_width_deg;

typedef struct {
  double start;
  double delta;
  int count;
} scan_specification_t;

paramdef struct scan_specification_t
{
  p_default = {0.5, 0.15, 1000};
  p_descr = "Gate specification (km)";
} gates;

paramdef struct scan_specification_t
{
  p_default = {0, 1, 360};
  p_descr = "Azimuth specification (degrees)";
} azimuths;

paramdef struct scan_specification_t
{
  p_default = {0.5, 1.0, 5};
  p_descr = "Elevation specification (degrees)";
} elevations;

commentdef {
  p_header = "OUTPUT FIELDS";
}

typedef enum {
  OUTPUT_FLOAT, OUTPUT_SHORT, OUTPUT_BYTE
} output_encoding_t;
  
typedef enum {
  BLOCKAGE, LINEAR_BLOCKAGE, PEAK, EXTENDED_BLOCKAGE
} output_data_t;
  
typedef struct {
  string name;
  string long_name;
  string standard_name;
  string units;
  output_encoding_t encoding;
  output_data_t type;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    {"BEAMB", "BEAMB", "BEAMB", "dB",       OUTPUT_FLOAT, BLOCKAGE },
    {"BEAML", "BEAML", "BEAML", "fraction", OUTPUT_FLOAT, LINEAR_BLOCKAGE },
    {"PEAK",  "PEAK",  "PEAK",  "fraction", OUTPUT_FLOAT, PEAK },
    {"BEAME", "BEAME", "BEAME", "fraction", OUTPUT_FLOAT, EXTENDED_BLOCKAGE }
  };
  p_descr = "Array of output fields.";
  p_help = "The program will only output these fields. long_name and standard_name are netCDF conventions. Set the output encoding type to select the resolution of the output data.";
} output_fields[];

commentdef {
  p_header = "DATA SET INFORMATION";
  p_text = "Will be stored in CfRadial files, and other formats to the extent supported by the format.";
}

paramdef string {
  p_default = "";
  p_descr = "Title string for netCDF file.";
} title;

paramdef string {
  p_default = "EOL/NCAR";
  p_descr = "Institution string for netCDF file.";
} institution;

paramdef string {
  p_default = "";
  p_descr = "References string for netCDF file.";
} references;

paramdef string {
  p_default = "";
  p_descr = "Source string for netCDF file.";
} source;

paramdef string {
  p_default = "";
  p_descr = "History string for netCDF file.";
} history;

paramdef string {
  p_default = "";
  p_descr = "Comment string for netCDF file.";
} comment;

commentdef {
  p_header = "OUTPUT FORMAT";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_NEXRAD,
  OUTPUT_FORMAT_UF,
  OUTPUT_FORMAT_MDV_RADIAL
} output_format_t;

paramdef enum output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL;
  p_descr = "Format for the output files.";
} output_format;

typedef enum {
  CLASSIC, NC64BIT, NETCDF4, NETCDF4_CLASSIC
} netcdf_style_t;

paramdef enum netcdf_style_t {
  p_default = NETCDF4;
  p_descr = "NetCDF style - if output_format is CFRADIAL";
  p_help = "netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls";
} netcdf_style;

commentdef {
  p_header = "OUTPUT BYTE-SWAPPING and COMPRESSION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to leave data in native byte order.";
  p_help = "If false, data will be byte-swapped as appropriate on output.";
} output_native_byte_order;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress data fields on output.";
  p_help = "Applies to netCDF and Dorade. UF does not support compression.";
} output_compressed;

commentdef {
  p_header = "OUTPUT OPTIONS FOR CfRadial FILES";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the use of ragged arrays for CfRadial files.";
  p_help = "Only applies to CfRadial. If true, forces the use of ragged arrays even if the number of gates for all rays is constant.";
} output_force_ngates_vary;

paramdef int {
  p_default = 4;
  p_descr = "Compression level for output, if compressed.";
  p_help = "Applies to netCDF only. Dorade compression is run-length encoding, and has not options..";
} compression_level;

commentdef {
  p_header = "OUTPUT DIRECTORY AND FILE NAME";
}

paramdef string {
  p_default = "/tmp/RadxCreateVol/data";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.";
} output_filename_mode;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out individual sweeps if appropriate.";
  p_help = "If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.";
} write_individual_sweeps;

commentdef {
  p_header = "REGISTERING LATEST DATA INFO";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out _latest_data_info files.";
  p_help = "If true, the _latest_data_info files will be written after the converted file is written.";
} write_latest_data_info;

commentdef {
  p_header = "CREATE CARTESIAN GRID FOR CHECKING TERRAIN DATA";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to create a Cartesian grid with terrain data.";
  p_help = "This can be used to check that the terrain data tiles are being correctly interpreted.";
} create_cart_terrain_grid;

paramdef string {
  p_default = "/tmp/RadxBeamBlock/cart_terrain";
  p_descr = "Output directory path for Cartesian terrain grid.";
  p_help = "This will be written as a CF NetCDF file, from an MDV object.";
} cart_terrain_grid_dir;

paramdef double {
  p_default = 0.001;
  p_descr = "Grid resolution for terrain grid (deg).";
  p_help = "The grid extent will be determined by the radar coverage.";
} cart_terrain_grid_res;

paramdef string {
  p_default = "terrain_ht";
  p_descr = "Name of terrain height field in NetCDF MDV output file.";
} cart_terrain_field_name;

