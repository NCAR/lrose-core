/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxApRemoval
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Reads a CfRadial volume, filters AP, writes out filtered volume.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file.  In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_avail");
    tt->descr = tdrpStrDup("Is _latest_data_info file available?");
    tt->help = tdrpStrDup("If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.");
    tt->val_offset = (char *) &latest_data_info_avail - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'search_recursively'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("search_recursively");
    tt->descr = tdrpStrDup("Option to recurse to subdirectories while looking for new files.");
    tt->help = tdrpStrDup("If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &search_recursively - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_recursion_depth'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_recursion_depth");
    tt->descr = tdrpStrDup("Maximum depth for recursive directory scan.");
    tt->help = tdrpStrDup("Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.");
    tt->val_offset = (char *) &max_recursion_depth - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'wait_between_checks'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wait_between_checks");
    tt->descr = tdrpStrDup("Sleep time between checking directory for input - secs.");
    tt->help = tdrpStrDup("If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &wait_between_checks - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'file_quiescence'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("file_quiescence");
    tt->descr = tdrpStrDup("File quiescence when checking for files - secs.");
    tt->help = tdrpStrDup("This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &file_quiescence - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("OPTIONAL FIXED ANGLE OR SWEEP NUMBER LIMITS");
    tt->comment_text = tdrpStrDup("Fixed angles are elevation in PPI mode and azimuth in RHI mode.");
    tt++;
    
    // Parameter 'set_fixed_angle_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_fixed_angle_limits");
    tt->descr = tdrpStrDup("Option to set fixed angle limits");
    tt->help = tdrpStrDup("Only use sweeps within the specified fixed angle limits.");
    tt->val_offset = (char *) &set_fixed_angle_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("lower_fixed_angle_limit");
    tt->descr = tdrpStrDup("Lower fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_fixed_angle_limit - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'upper_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("upper_fixed_angle_limit");
    tt->descr = tdrpStrDup("Upper fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_fixed_angle_limit - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'set_sweep_num_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_sweep_num_limits");
    tt->descr = tdrpStrDup("Option to set sweep number limits");
    tt->help = tdrpStrDup("Only read sweeps within the specified sweep number limits.");
    tt->val_offset = (char *) &set_sweep_num_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("lower_sweep_num");
    tt->descr = tdrpStrDup("Lower sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'upper_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("upper_sweep_num");
    tt->descr = tdrpStrDup("Upper sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'read_set_radar_num'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_radar_num");
    tt->descr = tdrpStrDup("Option to set the radar number.");
    tt->help = tdrpStrDup("See read_radar_num.");
    tt->val_offset = (char *) &read_set_radar_num - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_radar_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_radar_num");
    tt->descr = tdrpStrDup("Set the radar number for the data to be extracted.");
    tt->help = tdrpStrDup("Most files have data from a single radar, so this does not apply. The NOAA HRD files, however, have data from both the lower fuselage (LF, radar_num = 1) and tail (TA, radar_num = 2) radars. For HRD files, by default the TA radar will be used, unless the radar num is set to 1 for the LF radar.");
    tt->val_offset = (char *) &read_radar_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("READ OPTIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'aggregate_sweep_files_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("aggregate_sweep_files_on_read");
    tt->descr = tdrpStrDup("Option to aggregate sweep files into a volume on read.");
    tt->help = tdrpStrDup("If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.");
    tt->val_offset = (char *) &aggregate_sweep_files_on_read - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ignore_idle_scan_mode_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ignore_idle_scan_mode_on_read");
    tt->descr = tdrpStrDup("Option to ignore data taken in IDLE mode.");
    tt->help = tdrpStrDup("If true, on read will ignore files with an IDLE scan mode.");
    tt->val_offset = (char *) &ignore_idle_scan_mode_on_read - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'remove_rays_with_all_data_missing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_rays_with_all_data_missing");
    tt->descr = tdrpStrDup("Option to remove rays for which all data is missing.");
    tt->help = tdrpStrDup("If true, ray data will be checked. If all fields have missing data at all gates, the ray will be removed after reading.");
    tt->val_offset = (char *) &remove_rays_with_all_data_missing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remove_rays_with_antenna_transitions'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_rays_with_antenna_transitions");
    tt->descr = tdrpStrDup("Option to remove rays taken while the antenna was in transition.");
    tt->help = tdrpStrDup("If true, rays with the transition flag set will not be used. The transiton flag is set when the antenna is in transtion between one sweep and the next.");
    tt->val_offset = (char *) &remove_rays_with_antenna_transitions - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'transition_nrays_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("transition_nrays_margin");
    tt->descr = tdrpStrDup("Number of transition rays to include as a margin");
    tt->help = tdrpStrDup("Sometimes the transition flag is turned on too early in a transition, on not turned off quickly enough after a transition. If you set this to a number greater than 0, that number of rays will be included at each end of the transition, i.e. the transition will effectively be shorter at each end by this number of rays.");
    tt->val_offset = (char *) &transition_nrays_margin - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'trim_surveillance_sweeps_to_360deg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("trim_surveillance_sweeps_to_360deg");
    tt->descr = tdrpStrDup("Option to trip surveillance sweeps so that they only cover 360 degrees.");
    tt->help = tdrpStrDup("Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.");
    tt->val_offset = (char *) &trim_surveillance_sweeps_to_360deg - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_max_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_max_range");
    tt->descr = tdrpStrDup("Option to set the max range for any ray.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_max_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km");
    tt->descr = tdrpStrDup("Specified maximim range - km.");
    tt->help = tdrpStrDup("Gates beyond this range are removed.");
    tt->val_offset = (char *) &max_range_km - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'set_ngates_constant'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_ngates_constant");
    tt->descr = tdrpStrDup("Option to force the number of gates to be constant.");
    tt->help = tdrpStrDup("If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.");
    tt->val_offset = (char *) &set_ngates_constant - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE INSTRUMENT NAME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_instrument_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_instrument_name");
    tt->descr = tdrpStrDup("Option to override the instrument name.");
    tt->help = tdrpStrDup("If true, the name provided will be used.");
    tt->val_offset = (char *) &override_instrument_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instrument_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instrument_name");
    tt->descr = tdrpStrDup("Instrument name.");
    tt->help = tdrpStrDup("See override_instrument_name.");
    tt->val_offset = (char *) &instrument_name - &_start_;
    tt->single_val.s = tdrpStrDup("unknown");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE RADAR LOCATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_radar_location'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_location");
    tt->descr = tdrpStrDup("Option to override the radar location.");
    tt->help = tdrpStrDup("If true, the location in this file will be used. If not, the location in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_location - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_latitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_latitude_deg");
    tt->descr = tdrpStrDup("Radar latitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_latitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_longitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_longitude_deg");
    tt->descr = tdrpStrDup("Radar longitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_longitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_altitude_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_altitude_meters");
    tt->descr = tdrpStrDup("Radar altitude (meters).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_altitude_meters - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'change_radar_latitude_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_radar_latitude_sign");
    tt->descr = tdrpStrDup("Option to negate the latitude.");
    tt->help = tdrpStrDup("Mainly useful for RAPIC files. In RAPIC, latitude is always positive, so mostly you need to set the latitiude to the negative value of itself.");
    tt->val_offset = (char *) &change_radar_latitude_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("INPUT DATA");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_url");
    tt->descr = tdrpStrDup("Input URL for DsRadar data via FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &input_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmqp:://localhost::./fmq.dsRadar");
    tt++;
    
    // Parameter 'vel_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vel_field_name");
    tt->descr = tdrpStrDup("Velocity field name");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vel_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'refl_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("refl_field_name");
    tt->descr = tdrpStrDup("Reflectivity field name");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &refl_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'sw_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sw_field_name");
    tt->descr = tdrpStrDup("Spectrum Width field name");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sw_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("WIDTH");
    tt++;
    
    // Parameter 'use_terrain'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_terrain");
    tt->descr = tdrpStrDup("Use terrain data?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &use_terrain - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'terrain_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("terrain_url");
    tt->descr = tdrpStrDup("Terrain url");
    tt->help = tdrpStrDup("Url for terrain data.  Must be cartesian data");
    tt->val_offset = (char *) &terrain_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::./terrain.mdv");
    tt++;
    
    // Parameter 'terrain_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("terrain_field_name");
    tt->descr = tdrpStrDup("Terrain field name");
    tt->help = tdrpStrDup("Field name for the field to use from the terrain file");
    tt->val_offset = (char *) &terrain_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("Elevation");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("FILTERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'filter_field_names'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("filter_field_names");
    tt->descr = tdrpStrDup("Names of fields to be filtered");
    tt->help = tdrpStrDup("List the names of the fields you want to be filtered");
    tt->array_offset = (char *) &_filter_field_names - &_start_;
    tt->array_n_offset = (char *) &filter_field_names_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("DBZ");
      tt->array_vals[1].s = tdrpStrDup("VEL");
      tt->array_vals[2].s = tdrpStrDup("WIDTH");
    tt++;
    
    // Parameter 'filter_range'
    // ctype is '_filter_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("filter_range");
    tt->descr = tdrpStrDup("Elevation range for data that should be filtered");
    tt->help = tdrpStrDup("Data from tilts not in this range will not be filtered");
    tt->val_offset = (char *) &filter_range - &_start_;
    tt->struct_def.name = tdrpStrDup("filter_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_elev");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &filter_range.min_elev - (char *) &filter_range;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_elev");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &filter_range.max_elev - (char *) &filter_range;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 4;
    tt++;
    
    // Parameter 'gate_spacing'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("gate_spacing");
    tt->descr = tdrpStrDup("Expected gate spacing in meters");
    tt->help = tdrpStrDup("If gate spacing is different than this value, the tilt will be ignored");
    tt->val_offset = (char *) &gate_spacing - &_start_;
    tt->single_val.d = 250;
    tt++;
    
    // Parameter 'max_num_gates'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("max_num_gates");
    tt->descr = tdrpStrDup("Maximum number of gates expected");
    tt->help = tdrpStrDup("This is used to construct the terrain mask. It is also used for storing the beam data as it is received. The beam data is stored internally in buffers that have this number of gates. This allows us to handle radars that truncate beams in the higher tilts to save space. If a beam is encountered that has more than this number of gates, it will NOT be processed. So, you need to keep this number as low as possible to save memory, but not so low that beams will be skipped.");
    tt->val_offset = (char *) &max_num_gates - &_start_;
    tt->single_val.l = 1000;
    tt++;
    
    // Parameter 'delta_azimuth'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("delta_azimuth");
    tt->descr = tdrpStrDup("Delta azimuth for filtering");
    tt->help = tdrpStrDup("The internal representation of a given tilt will assume this delta azimuth");
    tt->val_offset = (char *) &delta_azimuth - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'radar_location'
    // ctype is '_radar_loc_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("radar_location");
    tt->descr = tdrpStrDup("Latitude and longitude of radar");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &radar_location - &_start_;
    tt->struct_def.name = tdrpStrDup("radar_loc_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("latitude");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &radar_location.latitude - (char *) &radar_location;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("longitude");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &radar_location.longitude - (char *) &radar_location;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'dbz_radius_info'
    // ctype is '_radius_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dbz_radius_info");
    tt->descr = tdrpStrDup("Radius in azimuth and gates for area used in computation of interest fields related to the reflectivity field");
    tt->help = tdrpStrDup("If the azimuth radius is set to 2 and the gate radius is set to 4, for example, the area used to compute the interest functions below will be a wedge in polar space consisting of the 45 gates that fall within 2 azimuths on each side of the given azimuth and 4 gates on each side of the given gate");
    tt->val_offset = (char *) &dbz_radius_info - &_start_;
    tt->struct_def.name = tdrpStrDup("radius_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("azimuth_radius");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &dbz_radius_info.azimuth_radius - (char *) &dbz_radius_info;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("gate_radius");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &dbz_radius_info.gate_radius - (char *) &dbz_radius_info;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 2;
      tt->struct_vals[1].i = 4;
    tt++;
    
    // Parameter 'vel_radius_info'
    // ctype is '_radius_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("vel_radius_info");
    tt->descr = tdrpStrDup("Radius in azimuth and gates for area used in computation of interest fields related to the velocity and spectral width fields");
    tt->help = tdrpStrDup("If the azimuth radius is set to 2 and the gate radius is set to 4, for example, the area used to compute the interest functions below will be a wedge in polar space consisting of the 45 gates that fall within 2 azimuths on each side of the given azimuth and 4 gates on each side of the given gate");
    tt->val_offset = (char *) &vel_radius_info - &_start_;
    tt->struct_def.name = tdrpStrDup("radius_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("azimuth_radius");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &vel_radius_info.azimuth_radius - (char *) &vel_radius_info;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("gate_radius");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &vel_radius_info.gate_radius - (char *) &vel_radius_info;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 1;
      tt->struct_vals[1].i = 1;
    tt++;
    
    // Parameter 'range_weight_func'
    // ctype is '_range_weight_func_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("range_weight_func");
    tt->descr = tdrpStrDup("Range weight function");
    tt->help = tdrpStrDup("Apply a range weight to given feature fields below according to this function.  X coordinates are given in km");
    tt->val_offset = (char *) &range_weight_func - &_start_;
    tt->struct_def.name = tdrpStrDup("range_weight_func_t");
    tt->struct_def.nfields = 12;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("x1");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &range_weight_func.x1 - (char *) &range_weight_func;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("y1");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &range_weight_func.y1 - (char *) &range_weight_func;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("x2");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &range_weight_func.x2 - (char *) &range_weight_func;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("y2");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &range_weight_func.y2 - (char *) &range_weight_func;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("x3");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &range_weight_func.x3 - (char *) &range_weight_func;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("y3");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &range_weight_func.y3 - (char *) &range_weight_func;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("x4");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &range_weight_func.x4 - (char *) &range_weight_func;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("y4");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &range_weight_func.y4 - (char *) &range_weight_func;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("x5");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &range_weight_func.x5 - (char *) &range_weight_func;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("y5");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &range_weight_func.y5 - (char *) &range_weight_func;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("x6");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &range_weight_func.x6 - (char *) &range_weight_func;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("y6");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &range_weight_func.y6 - (char *) &range_weight_func;
    tt->n_struct_vals = 12;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 40;
      tt->struct_vals[3].d = 1;
      tt->struct_vals[4].d = 120;
      tt->struct_vals[5].d = 0.75;
      tt->struct_vals[6].d = 200;
      tt->struct_vals[7].d = 0.5;
      tt->struct_vals[8].d = 300;
      tt->struct_vals[9].d = 0;
      tt->struct_vals[10].d = 500;
      tt->struct_vals[11].d = 0;
    tt++;
    
    // Parameter 'ap_interest_func'
    // ctype is '_interest_func_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ap_interest_func");
    tt->descr = tdrpStrDup("Interest function description for ap filtering");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_ap_interest_func - &_start_;
    tt->array_n_offset = (char *) &ap_interest_func_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_func_t);
    tt->array_n = 11;
    tt->struct_def.name = tdrpStrDup("interest_func_t");
    tt->struct_def.nfields = 14;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("interest_field_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("interest_field");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_ap_interest_func->interest_field - (char *) _ap_interest_func;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("interest_field_t");
        tt->struct_def.fields[0].enum_def.nfields = 11;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("TDBZ");
        tt->struct_def.fields[0].enum_def.fields[0].val = TDBZ;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("GDZ");
        tt->struct_def.fields[0].enum_def.fields[1].val = GDZ;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("MVE");
        tt->struct_def.fields[0].enum_def.fields[2].val = MVE;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("MSW");
        tt->struct_def.fields[0].enum_def.fields[3].val = MSW;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("SDVE");
        tt->struct_def.fields[0].enum_def.fields[4].val = SDVE;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("SDSW");
        tt->struct_def.fields[0].enum_def.fields[5].val = SDSW;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("SPIN");
        tt->struct_def.fields[0].enum_def.fields[6].val = SPIN;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("SIGN");
        tt->struct_def.fields[0].enum_def.fields[7].val = SIGN;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("RGDZ");
        tt->struct_def.fields[0].enum_def.fields[8].val = RGDZ;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("SRDZ");
        tt->struct_def.fields[0].enum_def.fields[9].val = SRDZ;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("RSINZ");
        tt->struct_def.fields[0].enum_def.fields[10].val = RSINZ;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("weight");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_ap_interest_func->weight - (char *) _ap_interest_func;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("x1");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_ap_interest_func->x1 - (char *) _ap_interest_func;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("y1");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_ap_interest_func->y1 - (char *) _ap_interest_func;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("x2");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_ap_interest_func->x2 - (char *) _ap_interest_func;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("y2");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_ap_interest_func->y2 - (char *) _ap_interest_func;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("x3");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_ap_interest_func->x3 - (char *) _ap_interest_func;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("y3");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_ap_interest_func->y3 - (char *) _ap_interest_func;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("x4");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_ap_interest_func->x4 - (char *) _ap_interest_func;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("y4");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_ap_interest_func->y4 - (char *) _ap_interest_func;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("x5");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_ap_interest_func->x5 - (char *) _ap_interest_func;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("y5");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_ap_interest_func->y5 - (char *) _ap_interest_func;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("x6");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_ap_interest_func->x6 - (char *) _ap_interest_func;
      tt->struct_def.fields[13].ftype = tdrpStrDup("double");
      tt->struct_def.fields[13].fname = tdrpStrDup("y6");
      tt->struct_def.fields[13].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_ap_interest_func->y6 - (char *) _ap_interest_func;
    tt->n_struct_vals = 154;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = TDBZ;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = -100;
      tt->struct_vals[3].d = 0;
      tt->struct_vals[4].d = 0;
      tt->struct_vals[5].d = 0;
      tt->struct_vals[6].d = 55;
      tt->struct_vals[7].d = 1;
      tt->struct_vals[8].d = 60;
      tt->struct_vals[9].d = 1;
      tt->struct_vals[10].d = 100;
      tt->struct_vals[11].d = 1;
      tt->struct_vals[12].d = 10000;
      tt->struct_vals[13].d = 1;
      tt->struct_vals[14].e = GDZ;
      tt->struct_vals[15].d = 1;
      tt->struct_vals[16].d = -1000;
      tt->struct_vals[17].d = 1;
      tt->struct_vals[18].d = -100;
      tt->struct_vals[19].d = 1;
      tt->struct_vals[20].d = -15;
      tt->struct_vals[21].d = 1;
      tt->struct_vals[22].d = 0;
      tt->struct_vals[23].d = 0;
      tt->struct_vals[24].d = 50;
      tt->struct_vals[25].d = 0;
      tt->struct_vals[26].d = 100;
      tt->struct_vals[27].d = 0;
      tt->struct_vals[28].e = MVE;
      tt->struct_vals[29].d = 1;
      tt->struct_vals[30].d = -50;
      tt->struct_vals[31].d = 0;
      tt->struct_vals[32].d = -30;
      tt->struct_vals[33].d = 0;
      tt->struct_vals[34].d = -2.3;
      tt->struct_vals[35].d = 0;
      tt->struct_vals[36].d = 0;
      tt->struct_vals[37].d = 1;
      tt->struct_vals[38].d = 2.3;
      tt->struct_vals[39].d = 0;
      tt->struct_vals[40].d = 50;
      tt->struct_vals[41].d = 0;
      tt->struct_vals[42].e = MSW;
      tt->struct_vals[43].d = 1;
      tt->struct_vals[44].d = -50;
      tt->struct_vals[45].d = 0;
      tt->struct_vals[46].d = 0;
      tt->struct_vals[47].d = 1;
      tt->struct_vals[48].d = 5;
      tt->struct_vals[49].d = 0;
      tt->struct_vals[50].d = 10;
      tt->struct_vals[51].d = 0;
      tt->struct_vals[52].d = 20;
      tt->struct_vals[53].d = 0;
      tt->struct_vals[54].d = 50;
      tt->struct_vals[55].d = 0;
      tt->struct_vals[56].e = SDVE;
      tt->struct_vals[57].d = 1;
      tt->struct_vals[58].d = -50;
      tt->struct_vals[59].d = 0;
      tt->struct_vals[60].d = 0;
      tt->struct_vals[61].d = 1;
      tt->struct_vals[62].d = 0.7;
      tt->struct_vals[63].d = 0;
      tt->struct_vals[64].d = 10;
      tt->struct_vals[65].d = 0;
      tt->struct_vals[66].d = 20;
      tt->struct_vals[67].d = 0;
      tt->struct_vals[68].d = 50;
      tt->struct_vals[69].d = 0;
      tt->struct_vals[70].e = SDSW;
      tt->struct_vals[71].d = 0;
      tt->struct_vals[72].d = -50;
      tt->struct_vals[73].d = 0;
      tt->struct_vals[74].d = 0;
      tt->struct_vals[75].d = 1;
      tt->struct_vals[76].d = 0.7;
      tt->struct_vals[77].d = 0;
      tt->struct_vals[78].d = 10;
      tt->struct_vals[79].d = 0;
      tt->struct_vals[80].d = 20;
      tt->struct_vals[81].d = 0;
      tt->struct_vals[82].d = 50;
      tt->struct_vals[83].d = 0;
      tt->struct_vals[84].e = SPIN;
      tt->struct_vals[85].d = 1;
      tt->struct_vals[86].d = -100;
      tt->struct_vals[87].d = 0;
      tt->struct_vals[88].d = -50;
      tt->struct_vals[89].d = 0;
      tt->struct_vals[90].d = 0;
      tt->struct_vals[91].d = 0;
      tt->struct_vals[92].d = 50;
      tt->struct_vals[93].d = 1;
      tt->struct_vals[94].d = 100;
      tt->struct_vals[95].d = 0;
      tt->struct_vals[96].d = 200;
      tt->struct_vals[97].d = 0;
      tt->struct_vals[98].e = SIGN;
      tt->struct_vals[99].d = 0;
      tt->struct_vals[100].d = -10;
      tt->struct_vals[101].d = 0;
      tt->struct_vals[102].d = -0.3;
      tt->struct_vals[103].d = 0;
      tt->struct_vals[104].d = 0;
      tt->struct_vals[105].d = 1;
      tt->struct_vals[106].d = 0.3;
      tt->struct_vals[107].d = 0;
      tt->struct_vals[108].d = 10;
      tt->struct_vals[109].d = 0;
      tt->struct_vals[110].d = 50;
      tt->struct_vals[111].d = 0;
      tt->struct_vals[112].e = RGDZ;
      tt->struct_vals[113].d = 0;
      tt->struct_vals[114].d = -1000;
      tt->struct_vals[115].d = 1;
      tt->struct_vals[116].d = -100;
      tt->struct_vals[117].d = 1;
      tt->struct_vals[118].d = -8;
      tt->struct_vals[119].d = 1;
      tt->struct_vals[120].d = 0;
      tt->struct_vals[121].d = 0;
      tt->struct_vals[122].d = 50;
      tt->struct_vals[123].d = 0;
      tt->struct_vals[124].d = 100;
      tt->struct_vals[125].d = 0;
      tt->struct_vals[126].e = SRDZ;
      tt->struct_vals[127].d = 0;
      tt->struct_vals[128].d = -100;
      tt->struct_vals[129].d = 1;
      tt->struct_vals[130].d = -10;
      tt->struct_vals[131].d = 1;
      tt->struct_vals[132].d = 0;
      tt->struct_vals[133].d = 0;
      tt->struct_vals[134].d = 10;
      tt->struct_vals[135].d = 1;
      tt->struct_vals[136].d = 50;
      tt->struct_vals[137].d = 1;
      tt->struct_vals[138].d = 100;
      tt->struct_vals[139].d = 1;
      tt->struct_vals[140].e = RSINZ;
      tt->struct_vals[141].d = 1;
      tt->struct_vals[142].d = -500;
      tt->struct_vals[143].d = 1;
      tt->struct_vals[144].d = -60;
      tt->struct_vals[145].d = 1;
      tt->struct_vals[146].d = -30;
      tt->struct_vals[147].d = 0;
      tt->struct_vals[148].d = 30;
      tt->struct_vals[149].d = 0;
      tt->struct_vals[150].d = 60;
      tt->struct_vals[151].d = 1;
      tt->struct_vals[152].d = 500;
      tt->struct_vals[153].d = 1;
    tt++;
    
    // Parameter 'ap_confidence_func'
    // ctype is '_interest_func_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ap_confidence_func");
    tt->descr = tdrpStrDup("Confidence function description for ap filtering");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_ap_confidence_func - &_start_;
    tt->array_n_offset = (char *) &ap_confidence_func_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_func_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("interest_func_t");
    tt->struct_def.nfields = 14;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("interest_field_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("interest_field");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_ap_confidence_func->interest_field - (char *) _ap_confidence_func;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("interest_field_t");
        tt->struct_def.fields[0].enum_def.nfields = 11;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("TDBZ");
        tt->struct_def.fields[0].enum_def.fields[0].val = TDBZ;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("GDZ");
        tt->struct_def.fields[0].enum_def.fields[1].val = GDZ;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("MVE");
        tt->struct_def.fields[0].enum_def.fields[2].val = MVE;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("MSW");
        tt->struct_def.fields[0].enum_def.fields[3].val = MSW;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("SDVE");
        tt->struct_def.fields[0].enum_def.fields[4].val = SDVE;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("SDSW");
        tt->struct_def.fields[0].enum_def.fields[5].val = SDSW;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("SPIN");
        tt->struct_def.fields[0].enum_def.fields[6].val = SPIN;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("SIGN");
        tt->struct_def.fields[0].enum_def.fields[7].val = SIGN;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("RGDZ");
        tt->struct_def.fields[0].enum_def.fields[8].val = RGDZ;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("SRDZ");
        tt->struct_def.fields[0].enum_def.fields[9].val = SRDZ;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("RSINZ");
        tt->struct_def.fields[0].enum_def.fields[10].val = RSINZ;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("weight");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_ap_confidence_func->weight - (char *) _ap_confidence_func;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("x1");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_ap_confidence_func->x1 - (char *) _ap_confidence_func;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("y1");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_ap_confidence_func->y1 - (char *) _ap_confidence_func;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("x2");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_ap_confidence_func->x2 - (char *) _ap_confidence_func;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("y2");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_ap_confidence_func->y2 - (char *) _ap_confidence_func;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("x3");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_ap_confidence_func->x3 - (char *) _ap_confidence_func;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("y3");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_ap_confidence_func->y3 - (char *) _ap_confidence_func;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("x4");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_ap_confidence_func->x4 - (char *) _ap_confidence_func;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("y4");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_ap_confidence_func->y4 - (char *) _ap_confidence_func;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("x5");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_ap_confidence_func->x5 - (char *) _ap_confidence_func;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("y5");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_ap_confidence_func->y5 - (char *) _ap_confidence_func;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("x6");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_ap_confidence_func->x6 - (char *) _ap_confidence_func;
      tt->struct_def.fields[13].ftype = tdrpStrDup("double");
      tt->struct_def.fields[13].fname = tdrpStrDup("y6");
      tt->struct_def.fields[13].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_ap_confidence_func->y6 - (char *) _ap_confidence_func;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'sc_interest_func'
    // ctype is '_interest_func_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sc_interest_func");
    tt->descr = tdrpStrDup("Interest function description for sea clutter filtering");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_sc_interest_func - &_start_;
    tt->array_n_offset = (char *) &sc_interest_func_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_func_t);
    tt->array_n = 11;
    tt->struct_def.name = tdrpStrDup("interest_func_t");
    tt->struct_def.nfields = 14;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("interest_field_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("interest_field");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_sc_interest_func->interest_field - (char *) _sc_interest_func;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("interest_field_t");
        tt->struct_def.fields[0].enum_def.nfields = 11;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("TDBZ");
        tt->struct_def.fields[0].enum_def.fields[0].val = TDBZ;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("GDZ");
        tt->struct_def.fields[0].enum_def.fields[1].val = GDZ;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("MVE");
        tt->struct_def.fields[0].enum_def.fields[2].val = MVE;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("MSW");
        tt->struct_def.fields[0].enum_def.fields[3].val = MSW;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("SDVE");
        tt->struct_def.fields[0].enum_def.fields[4].val = SDVE;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("SDSW");
        tt->struct_def.fields[0].enum_def.fields[5].val = SDSW;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("SPIN");
        tt->struct_def.fields[0].enum_def.fields[6].val = SPIN;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("SIGN");
        tt->struct_def.fields[0].enum_def.fields[7].val = SIGN;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("RGDZ");
        tt->struct_def.fields[0].enum_def.fields[8].val = RGDZ;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("SRDZ");
        tt->struct_def.fields[0].enum_def.fields[9].val = SRDZ;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("RSINZ");
        tt->struct_def.fields[0].enum_def.fields[10].val = RSINZ;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("weight");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_sc_interest_func->weight - (char *) _sc_interest_func;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("x1");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_sc_interest_func->x1 - (char *) _sc_interest_func;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("y1");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_sc_interest_func->y1 - (char *) _sc_interest_func;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("x2");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_sc_interest_func->x2 - (char *) _sc_interest_func;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("y2");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_sc_interest_func->y2 - (char *) _sc_interest_func;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("x3");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_sc_interest_func->x3 - (char *) _sc_interest_func;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("y3");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_sc_interest_func->y3 - (char *) _sc_interest_func;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("x4");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_sc_interest_func->x4 - (char *) _sc_interest_func;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("y4");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_sc_interest_func->y4 - (char *) _sc_interest_func;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("x5");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_sc_interest_func->x5 - (char *) _sc_interest_func;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("y5");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_sc_interest_func->y5 - (char *) _sc_interest_func;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("x6");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_sc_interest_func->x6 - (char *) _sc_interest_func;
      tt->struct_def.fields[13].ftype = tdrpStrDup("double");
      tt->struct_def.fields[13].fname = tdrpStrDup("y6");
      tt->struct_def.fields[13].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_sc_interest_func->y6 - (char *) _sc_interest_func;
    tt->n_struct_vals = 154;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = TDBZ;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = -100;
      tt->struct_vals[3].d = 0;
      tt->struct_vals[4].d = 0;
      tt->struct_vals[5].d = 0;
      tt->struct_vals[6].d = 55;
      tt->struct_vals[7].d = 1;
      tt->struct_vals[8].d = 60;
      tt->struct_vals[9].d = 1;
      tt->struct_vals[10].d = 100;
      tt->struct_vals[11].d = 1;
      tt->struct_vals[12].d = 10000;
      tt->struct_vals[13].d = 1;
      tt->struct_vals[14].e = GDZ;
      tt->struct_vals[15].d = 1;
      tt->struct_vals[16].d = -1000;
      tt->struct_vals[17].d = 1;
      tt->struct_vals[18].d = -100;
      tt->struct_vals[19].d = 1;
      tt->struct_vals[20].d = -15;
      tt->struct_vals[21].d = 1;
      tt->struct_vals[22].d = 0;
      tt->struct_vals[23].d = 0;
      tt->struct_vals[24].d = 50;
      tt->struct_vals[25].d = 0;
      tt->struct_vals[26].d = 100;
      tt->struct_vals[27].d = 0;
      tt->struct_vals[28].e = MVE;
      tt->struct_vals[29].d = 0;
      tt->struct_vals[30].d = -50;
      tt->struct_vals[31].d = 0;
      tt->struct_vals[32].d = -30;
      tt->struct_vals[33].d = 0;
      tt->struct_vals[34].d = -5;
      tt->struct_vals[35].d = 0;
      tt->struct_vals[36].d = 0;
      tt->struct_vals[37].d = 1;
      tt->struct_vals[38].d = 5;
      tt->struct_vals[39].d = 0;
      tt->struct_vals[40].d = 50;
      tt->struct_vals[41].d = 0;
      tt->struct_vals[42].e = MSW;
      tt->struct_vals[43].d = 1;
      tt->struct_vals[44].d = -50;
      tt->struct_vals[45].d = 0;
      tt->struct_vals[46].d = 0;
      tt->struct_vals[47].d = 1;
      tt->struct_vals[48].d = 6;
      tt->struct_vals[49].d = 0;
      tt->struct_vals[50].d = 10;
      tt->struct_vals[51].d = 0;
      tt->struct_vals[52].d = 20;
      tt->struct_vals[53].d = 0;
      tt->struct_vals[54].d = 50;
      tt->struct_vals[55].d = 0;
      tt->struct_vals[56].e = SDVE;
      tt->struct_vals[57].d = 1;
      tt->struct_vals[58].d = -50;
      tt->struct_vals[59].d = 0;
      tt->struct_vals[60].d = 0;
      tt->struct_vals[61].d = 1;
      tt->struct_vals[62].d = 0.7;
      tt->struct_vals[63].d = 0;
      tt->struct_vals[64].d = 10;
      tt->struct_vals[65].d = 0;
      tt->struct_vals[66].d = 20;
      tt->struct_vals[67].d = 0;
      tt->struct_vals[68].d = 50;
      tt->struct_vals[69].d = 0;
      tt->struct_vals[70].e = SDSW;
      tt->struct_vals[71].d = 0;
      tt->struct_vals[72].d = -50;
      tt->struct_vals[73].d = 0;
      tt->struct_vals[74].d = 0;
      tt->struct_vals[75].d = 1;
      tt->struct_vals[76].d = 0.7;
      tt->struct_vals[77].d = 0;
      tt->struct_vals[78].d = 10;
      tt->struct_vals[79].d = 0;
      tt->struct_vals[80].d = 20;
      tt->struct_vals[81].d = 0;
      tt->struct_vals[82].d = 50;
      tt->struct_vals[83].d = 0;
      tt->struct_vals[84].e = SPIN;
      tt->struct_vals[85].d = 1;
      tt->struct_vals[86].d = -100;
      tt->struct_vals[87].d = 0;
      tt->struct_vals[88].d = -50;
      tt->struct_vals[89].d = 0;
      tt->struct_vals[90].d = 0;
      tt->struct_vals[91].d = 0;
      tt->struct_vals[92].d = 40;
      tt->struct_vals[93].d = 0;
      tt->struct_vals[94].d = 60;
      tt->struct_vals[95].d = 1;
      tt->struct_vals[96].d = 200;
      tt->struct_vals[97].d = 1;
      tt->struct_vals[98].e = SIGN;
      tt->struct_vals[99].d = 0;
      tt->struct_vals[100].d = -10;
      tt->struct_vals[101].d = 0;
      tt->struct_vals[102].d = -0.6;
      tt->struct_vals[103].d = 0;
      tt->struct_vals[104].d = 0;
      tt->struct_vals[105].d = 1;
      tt->struct_vals[106].d = 0.6;
      tt->struct_vals[107].d = 0;
      tt->struct_vals[108].d = 10;
      tt->struct_vals[109].d = 0;
      tt->struct_vals[110].d = 50;
      tt->struct_vals[111].d = 0;
      tt->struct_vals[112].e = RGDZ;
      tt->struct_vals[113].d = 1;
      tt->struct_vals[114].d = -1000;
      tt->struct_vals[115].d = 1;
      tt->struct_vals[116].d = -100;
      tt->struct_vals[117].d = 1;
      tt->struct_vals[118].d = -15;
      tt->struct_vals[119].d = 1;
      tt->struct_vals[120].d = 0;
      tt->struct_vals[121].d = 0;
      tt->struct_vals[122].d = 50;
      tt->struct_vals[123].d = 0;
      tt->struct_vals[124].d = 100;
      tt->struct_vals[125].d = 0;
      tt->struct_vals[126].e = SRDZ;
      tt->struct_vals[127].d = 0;
      tt->struct_vals[128].d = -500;
      tt->struct_vals[129].d = 1;
      tt->struct_vals[130].d = -20;
      tt->struct_vals[131].d = 1;
      tt->struct_vals[132].d = 0;
      tt->struct_vals[133].d = 0;
      tt->struct_vals[134].d = 20;
      tt->struct_vals[135].d = 1;
      tt->struct_vals[136].d = 200;
      tt->struct_vals[137].d = 1;
      tt->struct_vals[138].d = 500;
      tt->struct_vals[139].d = 1;
      tt->struct_vals[140].e = RSINZ;
      tt->struct_vals[141].d = 1;
      tt->struct_vals[142].d = -1000;
      tt->struct_vals[143].d = 0;
      tt->struct_vals[144].d = -80;
      tt->struct_vals[145].d = 0;
      tt->struct_vals[146].d = -20;
      tt->struct_vals[147].d = 1;
      tt->struct_vals[148].d = -10;
      tt->struct_vals[149].d = 1;
      tt->struct_vals[150].d = 0;
      tt->struct_vals[151].d = 0;
      tt->struct_vals[152].d = 1000;
      tt->struct_vals[153].d = 0;
    tt++;
    
    // Parameter 'sc_confidence_func'
    // ctype is '_interest_func_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sc_confidence_func");
    tt->descr = tdrpStrDup("Confidence function description for sea clutter filtering");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_sc_confidence_func - &_start_;
    tt->array_n_offset = (char *) &sc_confidence_func_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_func_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("interest_func_t");
    tt->struct_def.nfields = 14;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("interest_field_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("interest_field");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_sc_confidence_func->interest_field - (char *) _sc_confidence_func;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("interest_field_t");
        tt->struct_def.fields[0].enum_def.nfields = 11;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("TDBZ");
        tt->struct_def.fields[0].enum_def.fields[0].val = TDBZ;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("GDZ");
        tt->struct_def.fields[0].enum_def.fields[1].val = GDZ;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("MVE");
        tt->struct_def.fields[0].enum_def.fields[2].val = MVE;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("MSW");
        tt->struct_def.fields[0].enum_def.fields[3].val = MSW;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("SDVE");
        tt->struct_def.fields[0].enum_def.fields[4].val = SDVE;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("SDSW");
        tt->struct_def.fields[0].enum_def.fields[5].val = SDSW;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("SPIN");
        tt->struct_def.fields[0].enum_def.fields[6].val = SPIN;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("SIGN");
        tt->struct_def.fields[0].enum_def.fields[7].val = SIGN;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("RGDZ");
        tt->struct_def.fields[0].enum_def.fields[8].val = RGDZ;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("SRDZ");
        tt->struct_def.fields[0].enum_def.fields[9].val = SRDZ;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("RSINZ");
        tt->struct_def.fields[0].enum_def.fields[10].val = RSINZ;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("weight");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_sc_confidence_func->weight - (char *) _sc_confidence_func;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("x1");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_sc_confidence_func->x1 - (char *) _sc_confidence_func;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("y1");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_sc_confidence_func->y1 - (char *) _sc_confidence_func;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("x2");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_sc_confidence_func->x2 - (char *) _sc_confidence_func;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("y2");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_sc_confidence_func->y2 - (char *) _sc_confidence_func;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("x3");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_sc_confidence_func->x3 - (char *) _sc_confidence_func;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("y3");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_sc_confidence_func->y3 - (char *) _sc_confidence_func;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("x4");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_sc_confidence_func->x4 - (char *) _sc_confidence_func;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("y4");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_sc_confidence_func->y4 - (char *) _sc_confidence_func;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("x5");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_sc_confidence_func->x5 - (char *) _sc_confidence_func;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("y5");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_sc_confidence_func->y5 - (char *) _sc_confidence_func;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("x6");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_sc_confidence_func->x6 - (char *) _sc_confidence_func;
      tt->struct_def.fields[13].ftype = tdrpStrDup("double");
      tt->struct_def.fields[13].fname = tdrpStrDup("y6");
      tt->struct_def.fields[13].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_sc_confidence_func->y6 - (char *) _sc_confidence_func;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'p_interest_func'
    // ctype is '_interest_func_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("p_interest_func");
    tt->descr = tdrpStrDup("Interest function description for precipitation filtering");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_p_interest_func - &_start_;
    tt->array_n_offset = (char *) &p_interest_func_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_func_t);
    tt->array_n = 4;
    tt->struct_def.name = tdrpStrDup("interest_func_t");
    tt->struct_def.nfields = 14;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("interest_field_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("interest_field");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_p_interest_func->interest_field - (char *) _p_interest_func;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("interest_field_t");
        tt->struct_def.fields[0].enum_def.nfields = 11;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("TDBZ");
        tt->struct_def.fields[0].enum_def.fields[0].val = TDBZ;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("GDZ");
        tt->struct_def.fields[0].enum_def.fields[1].val = GDZ;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("MVE");
        tt->struct_def.fields[0].enum_def.fields[2].val = MVE;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("MSW");
        tt->struct_def.fields[0].enum_def.fields[3].val = MSW;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("SDVE");
        tt->struct_def.fields[0].enum_def.fields[4].val = SDVE;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("SDSW");
        tt->struct_def.fields[0].enum_def.fields[5].val = SDSW;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("SPIN");
        tt->struct_def.fields[0].enum_def.fields[6].val = SPIN;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("SIGN");
        tt->struct_def.fields[0].enum_def.fields[7].val = SIGN;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("RGDZ");
        tt->struct_def.fields[0].enum_def.fields[8].val = RGDZ;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("SRDZ");
        tt->struct_def.fields[0].enum_def.fields[9].val = SRDZ;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("RSINZ");
        tt->struct_def.fields[0].enum_def.fields[10].val = RSINZ;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("weight");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_p_interest_func->weight - (char *) _p_interest_func;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("x1");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_p_interest_func->x1 - (char *) _p_interest_func;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("y1");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_p_interest_func->y1 - (char *) _p_interest_func;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("x2");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_p_interest_func->x2 - (char *) _p_interest_func;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("y2");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_p_interest_func->y2 - (char *) _p_interest_func;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("x3");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_p_interest_func->x3 - (char *) _p_interest_func;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("y3");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_p_interest_func->y3 - (char *) _p_interest_func;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("x4");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_p_interest_func->x4 - (char *) _p_interest_func;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("y4");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_p_interest_func->y4 - (char *) _p_interest_func;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("x5");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_p_interest_func->x5 - (char *) _p_interest_func;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("y5");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_p_interest_func->y5 - (char *) _p_interest_func;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("x6");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_p_interest_func->x6 - (char *) _p_interest_func;
      tt->struct_def.fields[13].ftype = tdrpStrDup("double");
      tt->struct_def.fields[13].fname = tdrpStrDup("y6");
      tt->struct_def.fields[13].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_p_interest_func->y6 - (char *) _p_interest_func;
    tt->n_struct_vals = 56;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = TDBZ;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].d = 0;
      tt->struct_vals[4].d = 0;
      tt->struct_vals[5].d = 0;
      tt->struct_vals[6].d = 0;
      tt->struct_vals[7].d = 0;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].d = 0;
      tt->struct_vals[10].d = 0;
      tt->struct_vals[11].d = 0;
      tt->struct_vals[12].d = 0;
      tt->struct_vals[13].d = 0;
      tt->struct_vals[14].e = MVE;
      tt->struct_vals[15].d = 0;
      tt->struct_vals[16].d = 0;
      tt->struct_vals[17].d = 0;
      tt->struct_vals[18].d = 0;
      tt->struct_vals[19].d = 0;
      tt->struct_vals[20].d = 0;
      tt->struct_vals[21].d = 0;
      tt->struct_vals[22].d = 0;
      tt->struct_vals[23].d = 0;
      tt->struct_vals[24].d = 0;
      tt->struct_vals[25].d = 0;
      tt->struct_vals[26].d = 0;
      tt->struct_vals[27].d = 0;
      tt->struct_vals[28].e = SPIN;
      tt->struct_vals[29].d = 0;
      tt->struct_vals[30].d = 0;
      tt->struct_vals[31].d = 0;
      tt->struct_vals[32].d = 0;
      tt->struct_vals[33].d = 0;
      tt->struct_vals[34].d = 0;
      tt->struct_vals[35].d = 0;
      tt->struct_vals[36].d = 0;
      tt->struct_vals[37].d = 0;
      tt->struct_vals[38].d = 0;
      tt->struct_vals[39].d = 0;
      tt->struct_vals[40].d = 0;
      tt->struct_vals[41].d = 0;
      tt->struct_vals[42].e = SIGN;
      tt->struct_vals[43].d = 0;
      tt->struct_vals[44].d = 0;
      tt->struct_vals[45].d = 0;
      tt->struct_vals[46].d = 0;
      tt->struct_vals[47].d = 0;
      tt->struct_vals[48].d = 0;
      tt->struct_vals[49].d = 0;
      tt->struct_vals[50].d = 0;
      tt->struct_vals[51].d = 0;
      tt->struct_vals[52].d = 0;
      tt->struct_vals[53].d = 0;
      tt->struct_vals[54].d = 0;
      tt->struct_vals[55].d = 0;
    tt++;
    
    // Parameter 'p_confidence_func'
    // ctype is '_interest_func_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("p_confidence_func");
    tt->descr = tdrpStrDup("Confidence function description for precipitation filtering");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_p_confidence_func - &_start_;
    tt->array_n_offset = (char *) &p_confidence_func_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_func_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("interest_func_t");
    tt->struct_def.nfields = 14;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("interest_field_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("interest_field");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_p_confidence_func->interest_field - (char *) _p_confidence_func;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("interest_field_t");
        tt->struct_def.fields[0].enum_def.nfields = 11;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("TDBZ");
        tt->struct_def.fields[0].enum_def.fields[0].val = TDBZ;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("GDZ");
        tt->struct_def.fields[0].enum_def.fields[1].val = GDZ;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("MVE");
        tt->struct_def.fields[0].enum_def.fields[2].val = MVE;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("MSW");
        tt->struct_def.fields[0].enum_def.fields[3].val = MSW;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("SDVE");
        tt->struct_def.fields[0].enum_def.fields[4].val = SDVE;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("SDSW");
        tt->struct_def.fields[0].enum_def.fields[5].val = SDSW;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("SPIN");
        tt->struct_def.fields[0].enum_def.fields[6].val = SPIN;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("SIGN");
        tt->struct_def.fields[0].enum_def.fields[7].val = SIGN;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("RGDZ");
        tt->struct_def.fields[0].enum_def.fields[8].val = RGDZ;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("SRDZ");
        tt->struct_def.fields[0].enum_def.fields[9].val = SRDZ;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("RSINZ");
        tt->struct_def.fields[0].enum_def.fields[10].val = RSINZ;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("weight");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_p_confidence_func->weight - (char *) _p_confidence_func;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("x1");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_p_confidence_func->x1 - (char *) _p_confidence_func;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("y1");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_p_confidence_func->y1 - (char *) _p_confidence_func;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("x2");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_p_confidence_func->x2 - (char *) _p_confidence_func;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("y2");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_p_confidence_func->y2 - (char *) _p_confidence_func;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("x3");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_p_confidence_func->x3 - (char *) _p_confidence_func;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("y3");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_p_confidence_func->y3 - (char *) _p_confidence_func;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("x4");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_p_confidence_func->x4 - (char *) _p_confidence_func;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("y4");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_p_confidence_func->y4 - (char *) _p_confidence_func;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("x5");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_p_confidence_func->x5 - (char *) _p_confidence_func;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("y5");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_p_confidence_func->y5 - (char *) _p_confidence_func;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("x6");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_p_confidence_func->x6 - (char *) _p_confidence_func;
      tt->struct_def.fields[13].ftype = tdrpStrDup("double");
      tt->struct_def.fields[13].fname = tdrpStrDup("y6");
      tt->struct_def.fields[13].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_p_confidence_func->y6 - (char *) _p_confidence_func;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'p_filter_low_dbz'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("p_filter_low_dbz");
    tt->descr = tdrpStrDup("Flag indicating whether to filter out low dbz values when calculating the precip filter final interest value.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &p_filter_low_dbz - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'p_low_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("p_low_dbz_threshold");
    tt->descr = tdrpStrDup("Minimum dbz value to use when filtering low dbz values for the final precip interest value.");
    tt->help = tdrpStrDup("Used only if p_filter_low_dbz is set to true.\nIf set, the final precip interest value will be set to 0 anywhere the original dbz value is less than this value.");
    tt->val_offset = (char *) &p_low_dbz_threshold - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'slant_range_dist'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("slant_range_dist");
    tt->descr = tdrpStrDup("Distance for slant range gdz field");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &slant_range_dist - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'ap_terrain_use_type'
    // ctype is '_terrain_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("ap_terrain_use_type");
    tt->descr = tdrpStrDup("Where to filter AP");
    tt->help = tdrpStrDup("This parameter tells us how to use the terrain data for AP removal.  If set to LAND, we will only filter data over the land.  If set to WATER, we will only filter data over the water.  If set to ALL, we will filter data everywhere, without reguard to the terrain data");
    tt->val_offset = (char *) &ap_terrain_use_type - &_start_;
    tt->enum_def.name = tdrpStrDup("terrain_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LAND");
      tt->enum_def.fields[0].val = LAND;
      tt->enum_def.fields[1].name = tdrpStrDup("WATER");
      tt->enum_def.fields[1].val = WATER;
      tt->enum_def.fields[2].name = tdrpStrDup("ALL");
      tt->enum_def.fields[2].val = ALL;
    tt->single_val.e = ALL;
    tt++;
    
    // Parameter 'sc_terrain_use_type'
    // ctype is '_terrain_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("sc_terrain_use_type");
    tt->descr = tdrpStrDup("Where to filter sea clutter");
    tt->help = tdrpStrDup("This parameter tells us how to use the terrain data for sea clutter removal.  If set to LAND, we will only filter data over the land.  If set to WATER, we will only filter data over the water.  If set to ALL, we will filter data everywhere, without reguard to the terrain data");
    tt->val_offset = (char *) &sc_terrain_use_type - &_start_;
    tt->enum_def.name = tdrpStrDup("terrain_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LAND");
      tt->enum_def.fields[0].val = LAND;
      tt->enum_def.fields[1].name = tdrpStrDup("WATER");
      tt->enum_def.fields[1].val = WATER;
      tt->enum_def.fields[2].name = tdrpStrDup("ALL");
      tt->enum_def.fields[2].val = ALL;
    tt->single_val.e = ALL;
    tt++;
    
    // Parameter 'p_terrain_use_type'
    // ctype is '_terrain_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("p_terrain_use_type");
    tt->descr = tdrpStrDup("Where to filter precipitation");
    tt->help = tdrpStrDup("This parameter tells us how to use the terrain data for precipitation removal.  If set to LAND, we will only filter data over the land.  If set to WATER, we will only filter data over the water.  If set to ALL, we will filter data everywhere, without reguard to the terrain data");
    tt->val_offset = (char *) &p_terrain_use_type - &_start_;
    tt->enum_def.name = tdrpStrDup("terrain_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LAND");
      tt->enum_def.fields[0].val = LAND;
      tt->enum_def.fields[1].name = tdrpStrDup("WATER");
      tt->enum_def.fields[1].val = WATER;
      tt->enum_def.fields[2].name = tdrpStrDup("ALL");
      tt->enum_def.fields[2].val = ALL;
    tt->single_val.e = ALL;
    tt++;
    
    // Parameter 'sc_spin_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sc_spin_threshold");
    tt->descr = tdrpStrDup("Spin threshold for sea clutter");
    tt->help = tdrpStrDup("Differences in reflectivity between adjacent gates will be counted for the spin calculation if they are greater than this value");
    tt->val_offset = (char *) &sc_spin_threshold - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'ap_spin_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ap_spin_threshold");
    tt->descr = tdrpStrDup("Spin threshold for AP");
    tt->help = tdrpStrDup("Differences in reflectivity between adjacent gates will be counted for the spin calculation if they are greater than this value");
    tt->val_offset = (char *) &ap_spin_threshold - &_start_;
    tt->single_val.d = 11;
    tt++;
    
    // Parameter 'p_spin_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("p_spin_threshold");
    tt->descr = tdrpStrDup("Spin threshold for precipitation");
    tt->help = tdrpStrDup("Differences in reflectivity between adjacent gates will be counted for the spin calculation if they are greater than this value");
    tt->val_offset = (char *) &p_spin_threshold - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'ap_interest_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ap_interest_threshold");
    tt->descr = tdrpStrDup("Interest threshold for AP removal");
    tt->help = tdrpStrDup("A final interest value greater than this value will indicate the presence of ap");
    tt->val_offset = (char *) &ap_interest_threshold - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'sc_interest_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sc_interest_threshold");
    tt->descr = tdrpStrDup("Interest threshold for sea clutter removal");
    tt->help = tdrpStrDup("A final interest value greater than this value will indicate the presence of sea clutter");
    tt->val_offset = (char *) &sc_interest_threshold - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'p_interest_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("p_interest_threshold");
    tt->descr = tdrpStrDup("Interest threshold for precip removal");
    tt->help = tdrpStrDup("A final interest value less than this value will indicate the presence of precipitation");
    tt->val_offset = (char *) &p_interest_threshold - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'eov_trigger'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("eov_trigger");
    tt->descr = tdrpStrDup("Trigger filtering by the end of volume flag");
    tt->help = tdrpStrDup("Filtering will always be triggered when two tilts are buffered and the next tilt starts coming in.  If this flag is set to TRUE, filtering will also be triggered when an end of volume flag is detected.  In this case, all remaining tilts in the volume will be filtered, if they are within the filtering range, and written out before the next volume is processed. Note that if you do not have a delay at the end of a volume, and you are filtering all the tilts in a volume, you may want to set this to FALSE to insure that beams are not dropped in the next scan");
    tt->val_offset = (char *) &eov_trigger - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'filter_combination'
    // ctype is '_filter_comb_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("filter_combination");
    tt->descr = tdrpStrDup("Parameter defining how to combine the filters when applying the final interest fields to the input fields.");
    tt->help = tdrpStrDup("Filter types:\n\tAPDA - AP filter final interest field\n\tSCDA - Sea clutter filter final interest field\n\tPDA - Precipitation filter final interest field\nCombination type:\n\tAND_FILTER - The final interest field from this filter will be anded with the other filter fields when determining the final filtering\n\tOR_FILTER - The final interest field from this filter will be ored with the other filter fields when determining the final filtering\nThe filters will be applied in the order specified.The combination type specified for the first filter in the list will be ignored.\nNote that only the filters specified in this list will be calculated.");
    tt->array_offset = (char *) &_filter_combination - &_start_;
    tt->array_n_offset = (char *) &filter_combination_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(filter_comb_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("filter_comb_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("filter_type_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("filter_type");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_filter_combination->filter_type - (char *) _filter_combination;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("filter_type_t");
        tt->struct_def.fields[0].enum_def.nfields = 3;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("APDA");
        tt->struct_def.fields[0].enum_def.fields[0].val = APDA;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("SCDA");
        tt->struct_def.fields[0].enum_def.fields[1].val = SCDA;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("PDA");
        tt->struct_def.fields[0].enum_def.fields[2].val = PDA;
      tt->struct_def.fields[1].ftype = tdrpStrDup("filter_comb_type_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("comb_type");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_filter_combination->comb_type - (char *) _filter_combination;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("filter_comb_type_t");
        tt->struct_def.fields[1].enum_def.nfields = 2;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("AND_FILTER");
        tt->struct_def.fields[1].enum_def.fields[0].val = AND_FILTER;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("OR_FILTER");
        tt->struct_def.fields[1].enum_def.fields[1].val = OR_FILTER;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = APDA;
      tt->struct_vals[1].e = AND_FILTER;
      tt->struct_vals[2].e = SCDA;
      tt->struct_vals[3].e = AND_FILTER;
      tt->struct_vals[4].e = PDA;
      tt->struct_vals[5].e = AND_FILTER;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("OPTION TO SPECIFY FIELD NAMES AND OUTPUT ENCODING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'set_output_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_output_fields");
    tt->descr = tdrpStrDup("Set the field names and output encoding");
    tt->help = tdrpStrDup("If false, all fields will be used.");
    tt->val_offset = (char *) &set_output_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Output field details.");
    tt->help = tdrpStrDup("Set the details for the output fields. The output_field_name is the ndtCDF variable name. Set the long name to a more descriptive name. Set the standard name to the CF standard name for this field. If the long name or standard name are empty, the existing names are used. If SCALING_SPECIFIED, then the scale and offset is used.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->input_field_name - (char *) _output_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->output_field_name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->long_name - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->standard_name - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("output_units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->output_units - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->encoding - (char *) _output_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[5].enum_def.nfields = 5;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_ASIS");
        tt->struct_def.fields[5].enum_def.fields[0].val = OUTPUT_ENCODING_ASIS;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_FLOAT32");
        tt->struct_def.fields[5].enum_def.fields[1].val = OUTPUT_ENCODING_FLOAT32;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
        tt->struct_def.fields[5].enum_def.fields[2].val = OUTPUT_ENCODING_INT32;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
        tt->struct_def.fields[5].enum_def.fields[3].val = OUTPUT_ENCODING_INT16;
        tt->struct_def.fields[5].enum_def.fields[4].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
        tt->struct_def.fields[5].enum_def.fields[4].val = OUTPUT_ENCODING_INT08;
      tt->struct_def.fields[6].ftype = tdrpStrDup("output_scaling_t");
      tt->struct_def.fields[6].fname = tdrpStrDup("output_scaling");
      tt->struct_def.fields[6].ptype = ENUM_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_fields->output_scaling - (char *) _output_fields;
        tt->struct_def.fields[6].enum_def.name = tdrpStrDup("output_scaling_t");
        tt->struct_def.fields[6].enum_def.nfields = 2;
        tt->struct_def.fields[6].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[6].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[6].enum_def.fields[0].name = tdrpStrDup("SCALING_DYNAMIC");
        tt->struct_def.fields[6].enum_def.fields[0].val = SCALING_DYNAMIC;
        tt->struct_def.fields[6].enum_def.fields[1].name = tdrpStrDup("SCALING_SPECIFIED");
        tt->struct_def.fields[6].enum_def.fields[1].val = SCALING_SPECIFIED;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("output_scale");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_output_fields->output_scale - (char *) _output_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("output_offset");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_output_fields->output_offset - (char *) _output_fields;
    tt->n_struct_vals = 18;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("DBZ");
      tt->struct_vals[1].s = tdrpStrDup("DBZ");
      tt->struct_vals[2].s = tdrpStrDup("reflectivity");
      tt->struct_vals[3].s = tdrpStrDup("equivalent_reflectivity_factor");
      tt->struct_vals[4].s = tdrpStrDup("dBZ");
      tt->struct_vals[5].e = OUTPUT_ENCODING_ASIS;
      tt->struct_vals[6].e = SCALING_DYNAMIC;
      tt->struct_vals[7].d = 0.01;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].s = tdrpStrDup("VEL");
      tt->struct_vals[10].s = tdrpStrDup("VEL");
      tt->struct_vals[11].s = tdrpStrDup("radial_velocity");
      tt->struct_vals[12].s = tdrpStrDup("radial_velocity_of_scatterers_away_from_instrument");
      tt->struct_vals[13].s = tdrpStrDup("m/s");
      tt->struct_vals[14].e = OUTPUT_ENCODING_ASIS;
      tt->struct_vals[15].e = SCALING_DYNAMIC;
      tt->struct_vals[16].d = 0.01;
      tt->struct_vals[17].d = 0;
    tt++;
    
    // Parameter 'write_other_fields_unchanged'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_other_fields_unchanged");
    tt->descr = tdrpStrDup("Option to write out the unspecified fields as they are.");
    tt->help = tdrpStrDup("If false, only the fields listed in output_fields will be written. If this is true, all other fields will be written unchanged.");
    tt->val_offset = (char *) &write_other_fields_unchanged - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("OPTION TO SPECIFY OUTPUT ENCODING FOR ALL FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'set_output_encoding_for_all_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_output_encoding_for_all_fields");
    tt->descr = tdrpStrDup("Option to set output encoding for all fields");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_output_encoding_for_all_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_encoding'
    // ctype is '_output_encoding_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_encoding");
    tt->descr = tdrpStrDup("Output encoding for all fields, if requested.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_encoding - &_start_;
    tt->enum_def.name = tdrpStrDup("output_encoding_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_ASIS");
      tt->enum_def.fields[0].val = OUTPUT_ENCODING_ASIS;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_FLOAT32");
      tt->enum_def.fields[1].val = OUTPUT_ENCODING_FLOAT32;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
      tt->enum_def.fields[2].val = OUTPUT_ENCODING_INT32;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
      tt->enum_def.fields[3].val = OUTPUT_ENCODING_INT16;
      tt->enum_def.fields[4].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
      tt->enum_def.fields[4].val = OUTPUT_ENCODING_INT08;
    tt->single_val.e = OUTPUT_ENCODING_ASIS;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("OUTPUT FORMAT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_format'
    // ctype is '_output_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_format");
    tt->descr = tdrpStrDup("Format for the output files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_format - &_start_;
    tt->enum_def.name = tdrpStrDup("output_format_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_FORMAT_CFRADIAL");
      tt->enum_def.fields[0].val = OUTPUT_FORMAT_CFRADIAL;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_FORMAT_DORADE");
      tt->enum_def.fields[1].val = OUTPUT_FORMAT_DORADE;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_FORMAT_FORAY");
      tt->enum_def.fields[2].val = OUTPUT_FORMAT_FORAY;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_FORMAT_NEXRAD");
      tt->enum_def.fields[3].val = OUTPUT_FORMAT_NEXRAD;
      tt->enum_def.fields[4].name = tdrpStrDup("OUTPUT_FORMAT_UF");
      tt->enum_def.fields[4].val = OUTPUT_FORMAT_UF;
      tt->enum_def.fields[5].name = tdrpStrDup("OUTPUT_FORMAT_MDV_RADIAL");
      tt->enum_def.fields[5].val = OUTPUT_FORMAT_MDV_RADIAL;
    tt->single_val.e = OUTPUT_FORMAT_CFRADIAL;
    tt++;
    
    // Parameter 'netcdf_style'
    // ctype is '_netcdf_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("netcdf_style");
    tt->descr = tdrpStrDup("NetCDF style - if output_format is CFRADIAL");
    tt->help = tdrpStrDup("netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls");
    tt->val_offset = (char *) &netcdf_style - &_start_;
    tt->enum_def.name = tdrpStrDup("netcdf_style_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLASSIC");
      tt->enum_def.fields[0].val = CLASSIC;
      tt->enum_def.fields[1].name = tdrpStrDup("NC64BIT");
      tt->enum_def.fields[1].val = NC64BIT;
      tt->enum_def.fields[2].name = tdrpStrDup("NETCDF4");
      tt->enum_def.fields[2].val = NETCDF4;
      tt->enum_def.fields[3].name = tdrpStrDup("NETCDF4_CLASSIC");
      tt->enum_def.fields[3].val = NETCDF4_CLASSIC;
    tt->single_val.e = NETCDF4;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("OUTPUT BYTE-SWAPPING and COMPRESSION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_native_byte_order'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_native_byte_order");
    tt->descr = tdrpStrDup("Option to leave data in native byte order.");
    tt->help = tdrpStrDup("If false, data will be byte-swapped as appropriate on output.");
    tt->val_offset = (char *) &output_native_byte_order - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_compressed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_compressed");
    tt->descr = tdrpStrDup("Option to compress data fields on output.");
    tt->help = tdrpStrDup("Applies to netCDF and Dorade. UF does not support compression.");
    tt->val_offset = (char *) &output_compressed - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("OUTPUT OPTIONS FOR CfRadial FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_force_ngates_vary'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_force_ngates_vary");
    tt->descr = tdrpStrDup("Option to force the use of ragged arrays for CfRadial files.");
    tt->help = tdrpStrDup("Only applies to CfRadial. If true, forces the use of ragged arrays even if the number of gates for all rays is constant.");
    tt->val_offset = (char *) &output_force_ngates_vary - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'compression_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("compression_level");
    tt->descr = tdrpStrDup("Compression level for output, if compressed.");
    tt->help = tdrpStrDup("Applies to netCDF only. Dorade compression is run-length encoding, and has not options..");
    tt->val_offset = (char *) &compression_level - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("OUTPUT DIRECTORY AND FILE NAME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_individual_sweeps'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_individual_sweeps");
    tt->descr = tdrpStrDup("Option to write out individual sweeps if appropriate.");
    tt->help = tdrpStrDup("If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.");
    tt->val_offset = (char *) &write_individual_sweeps - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_latest_data_info'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_latest_data_info");
    tt->descr = tdrpStrDup("Option to write out _latest_data_info files.");
    tt->help = tdrpStrDup("If true, the _latest_data_info files will be written after the converted file is written.");
    tt->val_offset = (char *) &write_latest_data_info - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
