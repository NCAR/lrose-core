/**********************************************************************
 * TDRP params for HeaderParams
 **********************************************************************/

//======================================================================
//
// RadxMesoCyclone.
//
// This program identifies mesocyclones in radar data
// option -print_operators will show all the filtering options.
//
//======================================================================
 
/**********************************************************************
 * TDRP params for AlgorithmParams
 **********************************************************************/

//======================================================================
//
// Common Algorithm Parameters.
//
// Parameters that are common to many radar apps.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// instance.
//
// for PMU.
//
//
// Type: string
//

instance = "default";

///////////// debug_mode //////////////////////////////
//
// debugging mode.
//
// NONE=as quiet as possible, DEBUG = minimal debug output, 
//   DEBUG_VERBOSE=more.
//
//
// Type: enum
// Options:
//     NONE
//     DEBUG
//     DEBUG_VERBOSE
//

debug_mode = DEBUG;

///////////// debug_threads ///////////////////////////
//
// threads debug.
//
// set to TRUE to debug threading.
//
//
// Type: boolean
//

debug_threads = FALSE;

///////////// num_threads /////////////////////////////
//
// Number of threads.
//
// Threading is done on sweeps. (More than one sweep processed by 
//   individual threads).  Set to 1 or 0 for no threading.
//
//
// Type: int
//

num_threads = 6;

/**********************************************************************
 * TDRP params for VirtVolParams
 **********************************************************************/

//======================================================================
//
// VirtVol data handling parameters.
//
// Params for triggering new data, reading in new data, writing data.
//
//======================================================================
 
///////////// debug_triggering ////////////////////////
//
// triggering debug.
//
// set to TRUE to debug triggering.
//
//
// Type: boolean
//

debug_triggering = FALSE;

///////////// trigger_url /////////////////////////////
//
// trigger url.
//
// URL to trigger off.
//
//
// Type: string
//

trigger_url = "$(DATA_URL)";

///////////// restrict_vertical_levels ////////////////
//
// Set TRUE to restrict vertical levels to a range of values, FALSE to 
//   use all the vertical levels.
//
//
// Type: boolean
//

restrict_vertical_levels = TRUE;

///////////// vertical_level_range ////////////////////
//
// If restrict_vertical_levels = TRUE, this is the range of vertical 
//   levels.
//
// Units are degrees.  If set to -1, -1 it is not used, and there is no 
//   restriction.
//
//
// Type: double
// 1D array - fixed length - 2 elements.
//

vertical_level_range = {
 0.3,
 3
};

///////////// restrict_max_range //////////////////////
//
// Set TRUE to restrict maximum range to a parameter, FALSE to use all 
//   the data.
//
//
// Type: boolean
//

restrict_max_range = FALSE;

///////////// max_range ///////////////////////////////
//
// If restrict_max_range = TRUE, this is the max range index.
//
// Units are range index (not distance).  Not used when 
//   restrict_max_range = FALSE, or if the value is <0.
//
//
// Type: double
//

max_range = -1;

///////////// input_url ///////////////////////////////
//
// Names of param files for input URLS, one per URL.
//
// These param files are read and parsed.  The names should match filter 
//   descriptions.
// Each file contains information as to the URL name, type, and data 
//   content, as well as named data fields
// To produce an example file, enter the command line option 
//   -print_url_params.
//
//
// Type: string
// 1D array - variable length.
//

input_url = {
 "UrlRadar.parms"
};

///////////// output_url //////////////////////////////
//
// Names of param files for output URLS, one per URL.
//
// These param files are read and parsed.  The names should match filter 
//   descriptions
// Each file contains information as to the URL name, type, and data 
//   content, as well as named data fields
// To produce an example file, enter the command line option 
//   -print_url_params.
//
//
// Type: string
// 1D array - variable length.
//

output_url = {
 "UrlMainOutput.parms",
 "UrlNyquist.parms",
 "UrlDebug.parms"
};

/**********************************************************************
 * TDRP params for Params
 **********************************************************************/

//======================================================================
//
// RadxMesoCyclone.
//
// This program identifies mesocyclones in radar data
// option -print_operators will show all the filtering options.
//
//======================================================================
 
///////////// fixed_const /////////////////////////////
//
// Fixed constant strings that are used in user functions.
//
//
// Type: string
// 1D array - variable length.
//

fixed_const = {
 "NyquistFloor=25.0",
 "MinRangeKm=2.0",
 "ShapeComputeModeDiamonds=0",
 "ShapeComputeModePerimeter=1",
 "ShapeSizeKm=6"
};

///////////// user_data ///////////////////////////////
//
// Non gridded data names. These names refer to objects specific to the 
//   app.
//
//
// Type: string
// 1D array - variable length.
//

user_data = {
 "Template0",
 "Template1",
 "Template2"
};

///////////// volume_before_filter ////////////////////
//
// Filters to apply before the sweep filters.
//
// -print_operators to see explanations of the filters used.
//
//
// Type: string
// 1D array - variable length.
//

volume_before_filter = {
 "Template0 = ParmsTemplate(10, 8, 2)",
 "Template1 = ParmsTemplate(10, 5, 5)",
 "Template2 = ParmsTemplate(5, 2, 4)",
 "MesoFuzzy = ParmsFuzzy(0, 0, 8, 0.25, 15, 0.5, NyquistFloor, 1)",
 "PcntLessThanNyquistFuzzy = ParmsFuzzy(0.0, 1.0, 0.5, 0.8, 0.7, 0.2, 1.0, 0.0)",
 "LargePosNegFuzzy = ParmsFuzzy(0.0, 1.0, 0.1, 0.8, 0.5, 0.5, 1.0, 0.0)",
 "InvertInterestFuzzy0 = ParmsFuzzy(0.0, 1.0, 0.2, 0.8, 0.3, 0.1, 0.4, 0.0)",
 "CTemplate = ParmsCircularTemplate(5, MinRangeKm)"
};

///////////// filter //////////////////////////////////
//
// Filters to apply to each sweep.
//
// -print_operators to see explanations of the filters used.
//
//
// Type: string
// 1D array - variable length.
//

filter = {
 "PcntNyquist = PercentOfAbsMax($(VEL_NAME), NyquistFloor)",
 "LessThanNy = PercentLessThan(PcntNyquist, CTemplate, 0.9)",
 "PosNegNy = LargePositiveNegative(PcntNyquist, CTemplate, 0.9)",
 "FLessThanNy = VirtVolFuzzy(LessThanNy, PcntLessThanNyquistFuzzy)",
 "FPosNegNy = VirtVolFuzzy(PosNegNy, LargePosNegFuzzy)",
 "AbsNyq = abs(PcntNyquist)",
 "NyqAve = SmoothPolar(AbsNyq, CTemplate)",
 "NyqCalib = FLessThanNy*FPosNegNy",
 "IsNyquist0 = NyqCalib*NyqAve",
 "IsNyquist = DilatePolar(IsNyquist0, CTemplate)",
 "IsNotNyquist = VirtVolFuzzy(IsNyquist, InvertInterestFuzzy0)",
 "Meso100 = MesoTemplate($(VEL_NAME), Template0, 0.6, 10, 0.5, MesoFuzzy)",
 "Meso10 = mask(Meso100, -1, 0)",
 "Nyq10 = IsNotNyquist*Meso10",
 "Clump10 = ClumpFilt(Nyq10, 0.2, 0.5)",
 "Final10 = mask(Clump10, 0.0, 0.2)",
 "Meso200 = MesoTemplate($(VEL_NAME), Template1, 0.6, 10, 0.5, MesoFuzzy)",
 "Meso20 = mask(Meso200, -1, 0)",
 "Nyq20 = IsNotNyquist*Meso20",
 "Clump20 = ClumpFilt(Nyq20, 0.2, 0.5)",
 "Final20 = mask(Clump20, 0.0, 0.2)",
 "Meso300 = MesoTemplate($(VEL_NAME), Template2, 0.6, 10, 0.5, MesoFuzzy)",
 "Meso30 = mask(Meso300, -1, 0)",
 "Nyq30 = IsNotNyquist*Meso30",
 "Clump30 = ClumpFilt(Nyq30, 0.2, 0.5)",
 "Final30 = mask(Clump30, 0.0, 0.2)",
 "Final = maximum(Final10, Final20, Final30)",
 "Shear10 = AzShearPolar($(VEL_NAME), 12, 1)",
 "Shear20 = AzShearPolar($(VEL_NAME), 10, 1)",
 "Shear11 = AzShearPolar($(VEL_NAME), 12, 0)",
 "Shear21 = AzShearPolar($(VEL_NAME), 10, 0)"
};

///////////// volume_after_filter /////////////////////
//
// Volume Filters to apply after the sweep filters.
//
// -print_operators to see explanations of the filters used.
//
//
// Type: string
// 1D array - variable length.
//

volume_after_filter = {
 "Vertical =  VerticalConsistency(Final, IsNyquist, CTemplate)",
 "Vclumps = VerticalDataClumpFilt(Vertical, 0.3, 0.4)",
 "shapes = ComputeFixedSizeShapes(Vclumps, ShapeSizeKm)"
};

///////////// output_url_2d ///////////////////////////
//
// URL Parameter file with 2d output fields. The other output URL param 
//   files (output_url array)) have full volume fields.
//
// This param file is read and parsed.  The names should match filter 
//   descriptions
// Each file contains information as to the URL name, type, and data 
//   content, as well as named data fields.
//
//
// Type: string
//

output_url_2d = "UrlOutput2d.parms";

///////////// shapes_name /////////////////////////////
//
// Name of the shapes data output.
//
// This is a special field, not a volume.
//
//
// Type: string
//

shapes_name = "shapes";

///////////// shapes_url //////////////////////////////
//
// URL where output shapes are written (SPDB).
//
//
// Type: string
//

shapes_url = "spdbp:://localhost::$(ALG_SPDB_PATH)";

///////////// shapes_expire_seconds ///////////////////
//
// Shape expiration seconds. To put into the SPDB data.
//
//
// Type: int
//

shapes_expire_seconds = 60;

