/**********************************************************************
 * TDRP params for Params
 **********************************************************************/

//======================================================================
//
// RadxMesoCyclone.
//
// This program does the algorithm.
//
//======================================================================
 
///////////// fixed_const /////////////////////////////
//
// Fixed constant strings that are interpreted by user functions.
//
//
// Type: string
// 1D array - variable length.
//

fixed_const = {
};

///////////// user_data ///////////////////////////////
//
// Non gridded data names.
//
//
// Type: string
// 1D array - variable length.
//

user_data = {
  "Template0", "Template1", "Template2"
};

///////////// volume_before_filter ////////////////////
//
// Volume Filters to apply before the sweep filters.
//
//
// Type: string
// 1D array - variable length.
//

volume_before_filter = {
  "Template0 = ParmsTemplate(10, 8, 2)",
  "Template1 = ParmsTemplate(10, 5, 5)",
  "Template2 = ParmsTemplate(5, 2, 4)"
};

///////////// filter //////////////////////////////////
//
// Filters (sweep) to apply.
//
//
// Type: string
// 1D array - variable length.
//

filter = {
 "Meso100 = MesoTemplate(VEL, Template0)",
 "Meso10 = mask(Meso100, -1, 0)",
 "Meso200 = MesoTemplate(VEL, Template1)",
 "Meso20 = mask(Meso200, -1, 0)",
 "Meso300 = MesoTemplate(VEL, Template2)",
 "Meso30 = mask(Meso300, -1, 0)",
 "Nyq10 = NyquistTest(VEL, Meso10, Template0)",
 "Nyq20 = NyquistTest(VEL, Meso20, Template1)",
 "Nyq30 = NyquistTest(VEL, Meso30, Template2)",
 "Clump10 = ClumpFilt(Meso10, Nyq10)",
 "Clump20 = ClumpFilt(Meso20, Nyq20)",
 "Clump30 = ClumpFilt(Meso30, Nyq30)",
 "Final10 = mask(Clump10, 0.0, 0.2)",
 "Final20 = mask(Clump20, 0.0, 0.2)",
 "Final30 = mask(Clump30, 0.0, 0.2)",
 "Loc10 = ClumpLoc(Final10, Template0)",
 "Loc20 = ClumpLoc(Final20, Template1)",
 "Loc30 = ClumpLoc(Final30, Template2)",
 "Extent10 = ClumpExtent(Final10, Template0)",
 "Extent20 = ClumpExtent(Final20, Template1)",
 "Extent30 = ClumpExtent(Final30, Template2)",
 "Shear10 = AzShear(VEL, 12, 1)",
 "Shear20 = AzShear(VEL, 10, 1)",
 "Shear11 = AzShear(VEL, 12, 0)",
 "Shear21 = AzShear(VEL, 10, 0)"
};

///////////// volume_after_filter /////////////////////
//
// Volume Filters to apply after the sweep filters.
//
//
// Type: string
// 1D array - variable length.
//

volume_after_filter = {
};

///////////// min_vel_diff ////////////////////////////
//
// Minimum diff in velocities between towards and away.
//
//
// Type: double
//

min_vel_diff = 10;

///////////// min_percent_large ///////////////////////
//
// Minimum percentage of away or towards data that have large values.
//
// Large means at least half as big as the average.
//
//
// Type: double
//

min_percent_large = 0.5;

///////////// min_percent_good ////////////////////////
//
// Minimum percentage of data points in the template that are good.
//
//
// Type: double
//

min_percent_good = 0.6;

///////////// detect_side_fuzzy ///////////////////////
//
// Line detection side fuzzy function.
//
//
// Type: struct
//   typedef struct {
//      double x;
//      double y;
//   }
//
// 1D array - variable length.
//

detect_side_fuzzy = {
  {
    x = 0,
    y = 0
  }
  ,
  {
    x = 8,
    y = 0.25
  }
  ,
  {
    x = 15,
    y = 0.5
  }
  ,
  {
    x = 25,
    y = 1
  }
};

///////////// nyquist_fuzzy ///////////////////////////
//
// meso template near nyquist fuzzy function.
//
//
// Type: struct
//   typedef struct {
//      double x;
//      double y;
//   }
//
// 1D array - variable length.
//

nyquist_fuzzy = {{15, 0}, {19, 0.1}, {20, 0.8}, {27, 1.0}};

///////////// radial_fuzzy ////////////////////////////
//
// radial length fuzzy function.
//
//
// Type: struct
//   typedef struct {
//      double x;
//      double y;
//   }
//
// 1D array - variable length.
//

radial_fuzzy = {{0, 1}, {5, 1}, {10, 0.8}, {20, 0.3}, {30, 0.1}};


///////////// meso_template ///////////////////////////
//
// x and y dimensions of the template plus y offset and x offset.
//
//
// Type: struct
//   typedef struct {
//      double x;
//      double y;
//      double yOffset;
//   }
//
// 1D array - variable length.
//

meso_template = {
  {
    x = 5,
    y = 2,
    yOffset = 4
  }
  ,
  {
    x = 10,
    y = 5,
    yOffset = 5
  }
  ,
  {
    x = 10,
    y = 8,
    yOffset = 2
  }
};

/**********************************************************************
 * TDRP params for AlgorithmParams
 **********************************************************************/

//======================================================================
//
// Algorithm Parameters.
//
// Parameters used to run the Algorithm class.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// instance.
//
// for PMU.
//
//
// Type: string
//

instance = "default";

///////////// debug_mode //////////////////////////////
//
// debugging mode.
//
// NONE=as quiet as possible, DEBUG = minimal debug output, 
//   DEBUG_VERBOSE=more.
//
//
// Type: enum
// Options:
//     NONE
//     DEBUG
//     DEBUG_VERBOSE
//

debug_mode = DEBUG;

///////////// debug_threads ///////////////////////////
//
// threads debug.
//
// set to TRUE to debug threading.
//
//
// Type: boolean
//

debug_threads = FALSE;

///////////// num_threads /////////////////////////////
//
// Number of threads.
//
// Threading is done on sweeps. (More than one sweep processed by 
//   individual threads).  Set to 1 or 0 for no threading.
//
//
// Type: int
//

num_threads = 6;

///////////// input ///////////////////////////////////
//
// Inputs to the algorithm.
//
// Names of the fields that are inputs to the algorithm.
//
//
// Type: string
// 1D array - variable length.
//

input = {
 "VEL"
};

///////////// output //////////////////////////////////
//
// Fields/values to export from the algorithm.
//
//
// Type: string
// 1D array - variable length.
//

output = {
 "Meso10",
 "Meso20",
 "Meso30",
 "Nyq10",
 "Nyq20",
 "Nyq30",
 "Clump10",
 "Clump20",
 "Clump30",
 "Extent10",
 "Extent20",
 "Extent30",
 "Loc10",
 "Loc20",
 "Loc30",
 "Final10",
 "Final20",
 "Final30",
 "Shear10",
 "Shear20",
 "Shear11",
 "Shear21"
};

/**********************************************************************
 * TDRP params for VirtVolParams
 **********************************************************************/

//======================================================================
//
// VirtVol Parameters.
//
// Triggering new data, reading in new data, writing data.
//
//======================================================================
 
///////////// debug_triggering ////////////////////////
//
// triggering debug.
//
// set to TRUE to debug triggering.
//
//
// Type: boolean
//

debug_triggering = FALSE;

///////////// trigger_url /////////////////////////////
//
// trigger url.
//
// URL to trigger off.
//
//
// Type: string
//

trigger_url = "$(DATA_URL)";

///////////// restrict_vertical_levels ////////////////
//
// Set TRUE to restrict vertical levels to a range of values, FALSE to 
//   use all the vertical levels.
//
//
// Type: boolean
//

restrict_vertical_levels = TRUE;

///////////// vertical_level_range ////////////////////
//
// If restrict_vertical_levels = TRUE, this is the range of vlevels.
//
// If set to -1, -1 it is not used, and there is no restriction.
//
//
// Type: double
// 1D array - fixed length - 2 elements.
//

vertical_level_range = {
 0.3,
 3
};

///////////// virtvol_input ///////////////////////////
//
// inputs.
//
// The fields read in externally
// internal_name = name used in filtering
// external_name = external field name.
//
//
// Type: struct
//   typedef struct {
//      string internal_name;
//      string external_name;
//      string url;
//      Url_t url_type;
//        Options:
//          VIRTUAL_VOLUME
//          DATABASE
//          ASCII
//      Data_t data_type;
//        Options:
//          GRID
//          VALUE
//          NOT_SET
//   }
//
// 1D array - variable length.
//

virtvol_input = {
  {
    internal_name = "VEL",
    external_name = "VEL",
    url = "$(DATA_URL)",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
};

///////////// virtvol_output //////////////////////////
//
// Fields/values to write out.
//
//
// Type: struct
//   typedef struct {
//      string internal_name;
//      string external_name;
//      string url;
//      Url_t url_type;
//        Options:
//          VIRTUAL_VOLUME
//          DATABASE
//          ASCII
//      Data_t data_type;
//        Options:
//          GRID
//          VALUE
//          NOT_SET
//   }
//
// 1D array - variable length.
//

virtvol_output = {
   {
     internal_name = "Meso10",
     external_name = "Meso10",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Meso20",
     external_name = "Meso20",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Meso30",
     external_name = "Meso30",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Nyq10",
     external_name = "Nyq10",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Nyq20",
     external_name = "Nyq20",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Nyq30",
     external_name = "Nyq30",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Clump10",
     external_name = "Clump10",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Clump20",
     external_name = "Clump20",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Clump30",
     external_name = "Clump30",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Extent10",
     external_name = "Extent10",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Extent20",
     external_name = "Extent20",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Extent30",
     external_name = "Extent30",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Loc10",
     external_name = "Loc10",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Loc20",
     external_name = "Loc20",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Loc30",
     external_name = "Loc30",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Final10",
     external_name = "Final10",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Final20",
     external_name = "Final20",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Final30",
     external_name = "Final30",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Shear10",
     external_name = "Shear10",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Shear20",
     external_name = "Shear20",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Shear11",
     external_name = "Shear11",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
   ,
   {
     internal_name = "Shear21",
     external_name = "Shear21",
     url = "mdvp:://localhost::$(ALG_PATH)",
     url_type = VIRTUAL_VOLUME,
     data_type = GRID
   }
};

