/**********************************************************************
 * TDRP params for Params
 **********************************************************************/

//======================================================================
//
// RadxMesoCyclone.
//
// This program does the algorithm.
//
//======================================================================
 
///////////// fixed_const /////////////////////////////
//
// Fixed constant strings that are interpreted by user functions.
//
//
// Type: string
// 1D array - variable length.
//

fixed_const = {
};

///////////// user_data ///////////////////////////////
//
// Non gridded data names.
//
//
// Type: string
// 1D array - variable length.
//

user_data = {
};

///////////// volume_before_filter ////////////////////
//
// Volume Filters to apply before the sweep filters.
//
//
// Type: string
// 1D array - variable length.
//

volume_before_filter = {
};

///////////// filter //////////////////////////////////
//
// Filters (sweep) to apply.
//
//
// Type: string
// 1D array - variable length.
//

filter = {
 "MedDbz = median(DBZ, 10, 10, 0, 80, 5)",
 "FiltDbz = mask(MedDbz, 0, 25)",
 "ExpandDbz = Expand(FiltDbz, 20)",
 "FiltVel = mask_missing_to_missing(VEL, FiltDbz)",
 "MedianVel = median(VEL, 4, 4, -100, 100, 2)",
 "Shear2 = AzShear(MedianVel, 2, 1)",
 "Shear5 = AzShear(MedianVel, 5, 1)",
 "Shear10 = AzShear(MedianVel, 10, 1)",
 "Shear2M = -1*Shear2",
 "Shear5M = -1*Shear5",
 "Shear10M = -1*Shear10",
 "ShearMax= maximum(Shear2, Shear5, Shear10)",
 "ShearMax2 = maximum(Shear2M, Shear5M, Shear10M)",
 "ShearMedian = median(ShearMax, 4, 4, 0, 100, 2)",
 "ShearThresh = mask(ShearMedian, -100, 15)",
 "ShearClump = clump(ShearThresh, 15)",
 "ShearMedian2 = median(ShearMax2, 4, 4, 0, 100, 2)",
 "ShearThresh2 = mask(ShearMedian2, -100, 15)",
 "ShearClump2 = clump(ShearThresh2, 15)",
 "FinalShear = maximum(ShearClump, ShearClump2)",
 "Max = max_expand(FinalShear, 2, 2)"
};

///////////// volume_after_filter /////////////////////
//
// Volume Filters to apply after the sweep filters.
//
//
// Type: string
// 1D array - variable length.
//

volume_after_filter = {
 "Vertical =  VerticalConsistency(FinalShear)",
};

///////////// min_vel_diff ////////////////////////////
//
// Minimum diff in velocities between towards and away.
//
//
// Type: double
//

min_vel_diff = 10;

///////////// min_percent_large ///////////////////////
//
// Minimum percentage of away or towards data that have large values.
//
// Large means at least half as big as the average.
//
//
// Type: double
//

min_percent_large = 0.5;

///////////// min_percent_good ////////////////////////
//
// Minimum percentage of data points in the template that are good.
//
//
// Type: double
//

min_percent_good = 0.6;

///////////// detect_side_fuzzy ///////////////////////
//
// Line detection side fuzzy function.
//
//
// Type: struct
//   typedef struct {
//      double x;
//      double y;
//   }
//
// 1D array - variable length.
//

detect_side_fuzzy = {
  {
    x = 0,
    y = 0
  }
  ,
  {
    x = 8,
    y = 0.25
  }
  ,
  {
    x = 15,
    y = 0.5
  }
  ,
  {
    x = 25,
    y = 1
  }
};

///////////// meso_template ///////////////////////////
//
// x and y dimensions of the template plus y offset and x offset.
//
//
// Type: struct
//   typedef struct {
//      double x;
//      double y;
//      double yOffset;
//      double xOffset;
//   }
//
// 1D array - variable length.
//

meso_template = {
  {
    x = 5,
    y = 5,
    yOffset = 15,
    xOffset = 20
  }
  ,
  {
    x = 5,
    y = 5,
    yOffset = 20,
    xOffset = -20
  }
  ,
  {
    x = 5,
    y = 5,
    yOffset = 25,
    xOffset = -20
  }
};

/**********************************************************************
 * TDRP params for AlgorithmParams
 **********************************************************************/

//======================================================================
//
// Algorithm Parameters.
//
// Parameters used to run the Algorithm class.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// instance.
//
// for PMU.
//
//
// Type: string
//

instance = "default";

///////////// debug_mode //////////////////////////////
//
// debugging mode.
//
// NONE=as quiet as possible, DEBUG = minimal debug output, 
//   DEBUG_VERBOSE=more.
//
//
// Type: enum
// Options:
//     NONE
//     DEBUG
//     DEBUG_VERBOSE
//

debug_mode = DEBUG;

///////////// debug_threads ///////////////////////////
//
// threads debug.
//
// set to TRUE to debug threading.
//
//
// Type: boolean
//

debug_threads = FALSE;

///////////// num_threads /////////////////////////////
//
// Number of threads.
//
// Threading is done on sweeps. (More than one sweep processed by 
//   individual threads).  Set to 1 or 0 for no threading.
//
//
// Type: int
//

num_threads = 6;

///////////// input ///////////////////////////////////
//
// Inputs to the algorithm.
//
// Names of the fields that are inputs to the algorithm.
//
//
// Type: string
// 1D array - variable length.
//

input = {
 "VEL",
 "DBZ"
};

///////////// output //////////////////////////////////
//
// Fields/values to export from the algorithm.
//
//
// Type: string
// 1D array - variable length.
//

output = {
 "ExpandDbz",
 "FiltVel",
 "MedianVel",
 "Shear5",
 "Shear10",
 "Shear2",
 "ShearMax",
 "ShearMax2",
 "ShearMedian",
 "ShearClump",
 "ShearMedian2",
 "ShearClump2",
 "FinalShear",
 "Vertical"
};

/**********************************************************************
 * TDRP params for VirtVolParams
 **********************************************************************/

//======================================================================
//
// VirtVol Parameters.
//
// Triggering new data, reading in new data, writing data.
//
//======================================================================
 
///////////// debug_triggering ////////////////////////
//
// triggering debug.
//
// set to TRUE to debug triggering.
//
//
// Type: boolean
//

debug_triggering = FALSE;

///////////// trigger_url /////////////////////////////
//
// trigger url.
//
// URL to trigger off.
//
//
// Type: string
//

trigger_url = "$(DATA_URL)";

///////////// restrict_vertical_levels ////////////////
//
// Set TRUE to restrict vertical levels to a range of values, FALSE to 
//   use all the vertical levels.
//
//
// Type: boolean
//

restrict_vertical_levels = TRUE;

///////////// vertical_level_range ////////////////////
//
// If restrict_vertical_levels = TRUE, this is the range of vlevels.
//
// If set to -1, -1 it is not used, and there is no restriction.
//
//
// Type: double
// 1D array - fixed length - 2 elements.
//

vertical_level_range = {
 0.3,
 3
};

///////////// virtvol_input ///////////////////////////
//
// inputs.
//
// The fields read in externally
// internal_name = name used in filtering
// external_name = external field name.
//
//
// Type: struct
//   typedef struct {
//      string internal_name;
//      string external_name;
//      string url;
//      Url_t url_type;
//        Options:
//          VIRTUAL_VOLUME
//          DATABASE
//          ASCII
//      Data_t data_type;
//        Options:
//          GRID
//          VALUE
//          NOT_SET
//   }
//
// 1D array - variable length.
//

virtvol_input = {
  {
    internal_name = "VEL",
    external_name = "VEL",
    url = "$(DATA_URL)",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "DBZ",
    external_name = "DBZ",
    url = "$(DATA_URL)",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
};

///////////// virtvol_output //////////////////////////
//
// Fields/values to write out.
//
//
// Type: struct
//   typedef struct {
//      string internal_name;
//      string external_name;
//      string url;
//      Url_t url_type;
//        Options:
//          VIRTUAL_VOLUME
//          DATABASE
//          ASCII
//      Data_t data_type;
//        Options:
//          GRID
//          VALUE
//          NOT_SET
//   }
//
// 1D array - variable length.
//

virtvol_output = {
  {
    internal_name = "FiltVel",
    external_name = "FiltVel",
    url = "mdvp:://localhost::$(ALG_PATH)",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "MedianVel",
    external_name = "MedianVel",
    url = "mdvp:://localhost::$(ALG_PATH)",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "ExpandDbz",
    external_name = "ExpandDbz",
    url = "mdvp:://localhost::$(ALG_PATH)",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "Shear10",
    external_name = "Shear10",
    url = "mdvp:://localhost::$(ALG_PATH)",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "Shear2",
    external_name = "Shear2",
    url = "mdvp:://localhost::$(ALG_PATH)",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
  {
    internal_name = "Shear5",
    external_name = "Shear5",
    url = "mdvp:://localhost::$(ALG_PATH)",
    url_type = VIRTUAL_VOLUME,
    data_type = GRID
  }
  ,
   {
      internal_name = "ShearMax",
      external_name = "ShearMax",
      url = "mdvp:://localhost::$(ALG_PATH)",
      url_type = VIRTUAL_VOLUME,
      data_type = GRID
   }
   ,
   {
      internal_name = "ShearMax2",
      external_name = "ShearMax2",
      url = "mdvp:://localhost::$(ALG_PATH)",
      url_type = VIRTUAL_VOLUME,
      data_type = GRID
   }
   ,
    {
      internal_name = "ShearMedian",
      external_name = "ShearMedian",
      url = "mdvp:://localhost::$(ALG_PATH)",
      url_type = VIRTUAL_VOLUME,
      data_type = GRID
    }
   ,
    {
      internal_name = "ShearClump",
      external_name = "ShearClump",
      url = "mdvp:://localhost::$(ALG_PATH)",
      url_type = VIRTUAL_VOLUME,
      data_type = GRID
    }
    ,
    {
      internal_name = "ShearMedian2",
      external_name = "ShearMedian2",
      url = "mdvp:://localhost::$(ALG_PATH)",
      url_type = VIRTUAL_VOLUME,
      data_type = GRID
    }
   ,
    {
      internal_name = "ShearClump2",
      external_name = "ShearClump2",
      url = "mdvp:://localhost::$(ALG_PATH)",
      url_type = VIRTUAL_VOLUME,
      data_type = GRID
    }
    ,
    {
      internal_name = "FinalShear",
      external_name = "FinalShear",
      url = "mdvp:://localhost::$(ALG_PATH)",
      url_type = VIRTUAL_VOLUME,
      data_type = GRID
    }
    ,
    {
      internal_name = "Vertical",
      external_name = "Vertical",
      url = "mdvp:://localhost::$(ALG_PATH)",
      url_type = VIRTUAL_VOLUME,
      data_type = GRID
    }
};

