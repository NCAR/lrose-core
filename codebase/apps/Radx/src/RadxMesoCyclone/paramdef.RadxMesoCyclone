/**********************************************************
 * paramdef.RadxMesoCyclone
 *
 * This file contains the TDRP parameter definitions for RadxMesoCyclone
 * 
 */

commentdef
{
  p_header = "RadxMesoCyclone";
  p_text = "This program does the algorithm";
};

paramdef string
{
  p_descr = "Fixed constant strings that are interpreted by user functions";
  p_default = {};
} fixed_const[];

paramdef string
{
  p_descr = "Non gridded data names";
  p_default = {};
} user_data[];

paramdef string
{
  p_descr = "Volume Filters to apply before the sweep filters";
  p_default = {};
} volume_before_filter[];  

paramdef string
{
  p_descr = "Filters (sweep) to apply";
  p_default = {
   "Meso1 = MesoTemplate(VEL, 20, 20, 10, 20)",
   "Meso2 = MesoTemplate(VEL, 20, 20, 10, -20)"};
} filter[];  


paramdef string
{
  p_descr = "Volume Filters to apply after the sweep filters";
  p_default = {};
} volume_after_filter[];  

typedef struct
{
  double x;
  double y;
} Fuzzy_f;

typedef struct
{
  double x;
  double y;
  double yOffset;
} Template_t;


paramdef double
{
  p_descr = "Minimum diff in velocities between towards and away";
  p_default = 10.0;
} min_vel_diff;

paramdef double
{
  p_descr = "Minimum percentage of away or towards data that have large values";
  p_help = "Large means at least half as big as the average";
  p_default = 0.5;
} min_percent_large;

paramdef double
{
  p_descr = "Minimum percentage of data points in the template that are good";
  p_default = 0.6;
} min_percent_good;


paramdef struct Fuzzy_f
{
  p_descr = "detection side fuzzy function";
  p_default = {};
} detect_side_fuzzy[];

paramdef struct Fuzzy_f
{
  p_descr = "meso template near nyquist fuzzy function";
  p_default = {};
} nyquist_fuzzy[];


paramdef struct Fuzzy_f
{
  p_descr = "radial length fuzzy function";
  p_default = {};
} radial_fuzzy[];

paramdef struct Template_t
{
  p_descr = "x and y dimensions of the template plus y offset";
  p_default = {};
} meso_template[];
