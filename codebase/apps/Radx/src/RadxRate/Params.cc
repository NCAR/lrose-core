/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxRate
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("RadxRate reads moments from Radx-type files, computes precip rate (and optionally PID and KDP) and writes out the results to CfRadial files.");
    tt->comment_text = tdrpStrDup("A number of precipitation rate methods are available, based on Z, ZZDR and KDP, and various hybrids.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("THREADING FOR SPEED.");
    tt->comment_text = tdrpStrDup("Multiple threads are used to improve performance. The computations are carried out in parallel in separate threads. The read and write stages occur in the main thread, since netCDF is not thread safe.");
    tt++;
    
    // Parameter 'n_compute_threads'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_compute_threads");
    tt->descr = tdrpStrDup("The number of compute threads.");
    tt->help = tdrpStrDup("The moments computations are segmented in range, with each thread computing a fraction of the number of gates. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads. For single-threaded operation set this to 1.");
    tt->val_offset = (char *) &n_compute_threads - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("\n\nIn REALTIME mode, the program waits for a new input file.\\nIn ARCHIVE mode, it moves through the data between the start and end times set on the command line. \n\nIn FILELIST mode, it moves through the list of file names specified on the command line.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = FILELIST;
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'input_file_search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_file_search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &input_file_search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_file_search_substr'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_file_search_substr");
    tt->descr = tdrpStrDup("File name sub-string.");
    tt->help = tdrpStrDup("If set, only files with names containing this sub-string will be processed.");
    tt->val_offset = (char *) &input_file_search_substr - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'start_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("start_time");
    tt->descr = tdrpStrDup("Set the start time for ARCHIVE mode analysis.");
    tt->help = tdrpStrDup("Format is 'yyyy mm dd hh mm ss'.");
    tt->val_offset = (char *) &start_time - &_start_;
    tt->single_val.s = tdrpStrDup("2015 06 26 00 00 00");
    tt++;
    
    // Parameter 'end_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("end_time");
    tt->descr = tdrpStrDup("Set the end time for ARCHIVE mode analysis.");
    tt->help = tdrpStrDup("Format is 'yyyy mm dd hh mm ss'.");
    tt->val_offset = (char *) &end_time - &_start_;
    tt->single_val.s = tdrpStrDup("2015 06 26 12 00 00");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("INPUT FIELD INFORMATION");
    tt->comment_text = tdrpStrDup("Names of fields in the input file. The following fields are required: SNR, DBZ, ZDR, PHIDP and RHOHV. If SNR is not available, it is computed from DBZ.");
    tt++;
    
    // Parameter 'SNR_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("SNR_available");
    tt->descr = tdrpStrDup("Is SNR data available?");
    tt->help = tdrpStrDup("If not, SNR will be computed from the DBZ field. See 'noise_dbz_at_100km'.");
    tt->val_offset = (char *) &SNR_available - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'SNR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("SNR_field_name");
    tt->descr = tdrpStrDup("Field name for SNR.");
    tt->help = tdrpStrDup("Signal-to-noise ratio (dB).");
    tt->val_offset = (char *) &SNR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("SNR");
    tt++;
    
    // Parameter 'noise_dbz_at_100km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noise_dbz_at_100km");
    tt->descr = tdrpStrDup("The noise value, represented as dBZ at a range of 100km.");
    tt->help = tdrpStrDup("This is used for computing the SNR from the DBZ field. It is only used if SNR_available is FALSE. The SNR will be computed by range-correcting this value and using it as the noise value.");
    tt->val_offset = (char *) &noise_dbz_at_100km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'DBZ_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("DBZ_field_name");
    tt->descr = tdrpStrDup("Field name for DBZ.");
    tt->help = tdrpStrDup("Horizontally-polarized reflectivity factor.");
    tt->val_offset = (char *) &DBZ_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'ZDR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ZDR_field_name");
    tt->descr = tdrpStrDup("Field name for ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ZDR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("ZDR");
    tt++;
    
    // Parameter 'PHIDP_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("PHIDP_field_name");
    tt->descr = tdrpStrDup("Field name for PHIDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &PHIDP_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("PHIDP");
    tt++;
    
    // Parameter 'RHOHV_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("RHOHV_field_name");
    tt->descr = tdrpStrDup("Field name for RHOHV.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RHOHV_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("RHOHV");
    tt++;
    
    // Parameter 'LDR_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("LDR_available");
    tt->descr = tdrpStrDup("Is LDR data available?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &LDR_available - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'LDR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("LDR_field_name");
    tt->descr = tdrpStrDup("Field name for LDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &LDR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("LDR");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("COMPUTING KDP");
    tt->comment_text = tdrpStrDup("KDP will be computed if KDP_available is FALSE.");
    tt++;
    
    // Parameter 'KDP_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_available");
    tt->descr = tdrpStrDup("Is KDP data available?");
    tt->help = tdrpStrDup("If KDP is available, then it is not computed. Instead KDP_field_name will be read in.");
    tt->val_offset = (char *) &KDP_available - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("KDP_field_name");
    tt->descr = tdrpStrDup("Field name for KDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("KDP");
    tt++;
    
    // Parameter 'KDP_params_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("KDP_params_file_path");
    tt->descr = tdrpStrDup("Path for parameters for computing KDP.");
    tt->help = tdrpStrDup("If set to use-defaults, no parameter file will be read in, and the default parameters will be used.");
    tt->val_offset = (char *) &KDP_params_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("use-defaults");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("COMPUTING PID");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'PID_params_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("PID_params_file_path");
    tt->descr = tdrpStrDup("Path for parameters for computing PID.");
    tt->help = tdrpStrDup("If set to use-defaults, no parameter file will be read in, and the default parameters will be used.");
    tt->val_offset = (char *) &PID_params_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("use-defaults");
    tt++;
    
    // Parameter 'PID_use_KDP_self_consistency'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_use_KDP_self_consistency");
    tt->descr = tdrpStrDup("When computing PID, using KDP conditioned for self-consistency.");
    tt->help = tdrpStrDup("When KDP is computed, we compute both a standard result, and a conditioned result based on the self-consistency method. If this parameter is set to TRUE, the self-consistency result will be used instead of the standard result.");
    tt->val_offset = (char *) &PID_use_KDP_self_consistency - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_use_attenuation_corrected_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_use_attenuation_corrected_fields");
    tt->descr = tdrpStrDup("Option to use Z and ZDR fields that are corrected for attenuation.");
    tt->help = tdrpStrDup("If TRUE, the attenuation-corrected Z and ZDR fields will be used for computing PID.");
    tt->val_offset = (char *) &PID_use_attenuation_corrected_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("COMPUTING PRECIP RATE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'RATE_params_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("RATE_params_file_path");
    tt->descr = tdrpStrDup("Path for parameters for computing PRECIP.");
    tt->help = tdrpStrDup("If set to use-defaults, no parameter file will be read in, and the default parameters will be used.");
    tt->val_offset = (char *) &RATE_params_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("use-defaults");
    tt++;
    
    // Parameter 'RATE_use_KDP_self_consistency'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("RATE_use_KDP_self_consistency");
    tt->descr = tdrpStrDup("When computing PRECIP, using KDP conditioned for self-consistency.");
    tt->help = tdrpStrDup("When KDP is computed, we compute both a standard result, and a conditioned result based on the self-consistency method. If this parameter is set to TRUE, the self-consistency result will be used instead of the standard result.");
    tt->val_offset = (char *) &RATE_use_KDP_self_consistency - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'RATE_use_attenuation_corrected_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("RATE_use_attenuation_corrected_fields");
    tt->descr = tdrpStrDup("Option to use Z and ZDR fields that are corrected for attenuation.");
    tt->help = tdrpStrDup("If TRUE, the attenuation-corrected Z and ZDR fields will be used for computing PRECIP.");
    tt->val_offset = (char *) &RATE_use_attenuation_corrected_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("SPECIFYING OUTPUT FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Indicate which fields should be written to the output file.");
    tt->help = tdrpStrDup("Choose the ID from the list.\n\nThe name and units can be set however the user prefers.\n\nThe output_encoding apply to CfRadial output only. \n\n\tRATE_ZH: Precip rate from ZH\n\tRATE_ZH_SNOW: Precip rate from ZH in dry snow\n\tRATE_Z_ZDR: Precip rate from Z and ZDR\n\tRATE_KDP: Precip rate from KDP\n\tRATE_KDP_ZDR: Precip rate from KDP and ZDR\n\tRATE_HYBRID: Precip rate from NCAR hybrid\n\tRATE_PID: Precip rate using PID to select the appropriate rate\n\tRATE_HIDRO: Precip rate using CSU HIDRO hybrid\n\tRATE_BRINGI: Precip rate using Bringi hybrid\n\tPID: NCAR Particle ID\n\tPID_INTEREST: final interest map for NCAR Particle ID values\n\tTEMP_FOR_PID: temperature field for PID (C)\n\tKDP: KDP from filtering PHIDP and computing slope (deg/km)\n\tKDP_SC: KDP conditioned using ZZDR self-consistency (deg/km)\n\tDBZ_ATTEN_CORRECTION: DBZ attenuation correction (dB)\n\tZDR_ATTEN_CORRECTION: ZDR attenuation correction (dB)\n\tDBZ_ATTEN_CORRECTED: DBZ corrected for attenuation (dBZ)\n\tZDR_ATTEN_CORRECTED: ZDR corrected for attenuation (dB)\n\ndo_write: allows you to turn off writing while leaving the field in the list\n\ncensor_non_weather: use PID field to censor non-weather PID types - see non_weather_pid_types[] below.\n");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 15;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("output_field_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->id - (char *) _output_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("output_field_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 18;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("RATE_ZH");
        tt->struct_def.fields[0].enum_def.fields[0].val = RATE_ZH;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("RATE_ZH_SNOW");
        tt->struct_def.fields[0].enum_def.fields[1].val = RATE_ZH_SNOW;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("RATE_Z_ZDR");
        tt->struct_def.fields[0].enum_def.fields[2].val = RATE_Z_ZDR;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("RATE_KDP");
        tt->struct_def.fields[0].enum_def.fields[3].val = RATE_KDP;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("RATE_KDP_ZDR");
        tt->struct_def.fields[0].enum_def.fields[4].val = RATE_KDP_ZDR;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("RATE_HYBRID");
        tt->struct_def.fields[0].enum_def.fields[5].val = RATE_HYBRID;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("RATE_PID");
        tt->struct_def.fields[0].enum_def.fields[6].val = RATE_PID;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("RATE_HIDRO");
        tt->struct_def.fields[0].enum_def.fields[7].val = RATE_HIDRO;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("RATE_BRINGI");
        tt->struct_def.fields[0].enum_def.fields[8].val = RATE_BRINGI;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("PID");
        tt->struct_def.fields[0].enum_def.fields[9].val = PID;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("PID_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[10].val = PID_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("TEMP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[11].val = TEMP_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("KDP");
        tt->struct_def.fields[0].enum_def.fields[12].val = KDP;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("KDP_SC");
        tt->struct_def.fields[0].enum_def.fields[13].val = KDP_SC;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("DBZ_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[14].val = DBZ_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("ZDR_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[15].val = ZDR_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("DBZ_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[16].val = DBZ_ATTEN_CORRECTED;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("ZDR_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[17].val = ZDR_ATTEN_CORRECTED;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->long_name - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->standard_name - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->units - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("do_write");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->do_write - (char *) _output_fields;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("censor_non_weather");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_fields->censor_non_weather - (char *) _output_fields;
    tt->n_struct_vals = 105;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = RATE_ZH;
      tt->struct_vals[1].s = tdrpStrDup("RATE_ZH");
      tt->struct_vals[2].s = tdrpStrDup("precip_rate_from_z");
      tt->struct_vals[3].s = tdrpStrDup("precip_rate_from_z");
      tt->struct_vals[4].s = tdrpStrDup("mm/hr");
      tt->struct_vals[5].b = pTRUE;
      tt->struct_vals[6].b = pFALSE;
      tt->struct_vals[7].e = RATE_ZH_SNOW;
      tt->struct_vals[8].s = tdrpStrDup("RATE_ZH_SNOW");
      tt->struct_vals[9].s = tdrpStrDup("precip_rate_from_z_for_snow");
      tt->struct_vals[10].s = tdrpStrDup("precip_rate_from_z_for_snow");
      tt->struct_vals[11].s = tdrpStrDup("mm/hr");
      tt->struct_vals[12].b = pTRUE;
      tt->struct_vals[13].b = pFALSE;
      tt->struct_vals[14].e = RATE_Z_ZDR;
      tt->struct_vals[15].s = tdrpStrDup("RATE_Z_ZDR");
      tt->struct_vals[16].s = tdrpStrDup("precip_rate_from_z_and_zdr");
      tt->struct_vals[17].s = tdrpStrDup("precip_rate_from_z_and_zdr");
      tt->struct_vals[18].s = tdrpStrDup("mm/hr");
      tt->struct_vals[19].b = pTRUE;
      tt->struct_vals[20].b = pFALSE;
      tt->struct_vals[21].e = RATE_KDP;
      tt->struct_vals[22].s = tdrpStrDup("RATE_KDP");
      tt->struct_vals[23].s = tdrpStrDup("precip_rate_from_kdp");
      tt->struct_vals[24].s = tdrpStrDup("precip_rate_from_kdp");
      tt->struct_vals[25].s = tdrpStrDup("mm/hr");
      tt->struct_vals[26].b = pTRUE;
      tt->struct_vals[27].b = pFALSE;
      tt->struct_vals[28].e = RATE_KDP_ZDR;
      tt->struct_vals[29].s = tdrpStrDup("RATE_KDP_ZDR");
      tt->struct_vals[30].s = tdrpStrDup("precip_rate_from_kdp_and_zdr");
      tt->struct_vals[31].s = tdrpStrDup("precip_rate_from_kdp_and_zdr");
      tt->struct_vals[32].s = tdrpStrDup("mm/hr");
      tt->struct_vals[33].b = pTRUE;
      tt->struct_vals[34].b = pFALSE;
      tt->struct_vals[35].e = RATE_HYBRID;
      tt->struct_vals[36].s = tdrpStrDup("RATE_HYBRID");
      tt->struct_vals[37].s = tdrpStrDup("precip_rate_hybrid_of_zh_zzdr_kdp_and_kdpzdr");
      tt->struct_vals[38].s = tdrpStrDup("precip_rate_hybrid_of_zh_zzdr_kdp_and_kdpzdr");
      tt->struct_vals[39].s = tdrpStrDup("mm/hr");
      tt->struct_vals[40].b = pTRUE;
      tt->struct_vals[41].b = pFALSE;
      tt->struct_vals[42].e = RATE_PID;
      tt->struct_vals[43].s = tdrpStrDup("RATE_PID");
      tt->struct_vals[44].s = tdrpStrDup("precip_rate_based_on_pid");
      tt->struct_vals[45].s = tdrpStrDup("precip_rate_based_on_pid");
      tt->struct_vals[46].s = tdrpStrDup("mm/hr");
      tt->struct_vals[47].b = pTRUE;
      tt->struct_vals[48].b = pFALSE;
      tt->struct_vals[49].e = PID;
      tt->struct_vals[50].s = tdrpStrDup("PID");
      tt->struct_vals[51].s = tdrpStrDup("particle_id");
      tt->struct_vals[52].s = tdrpStrDup("hydrometeor_type");
      tt->struct_vals[53].s = tdrpStrDup("");
      tt->struct_vals[54].b = pTRUE;
      tt->struct_vals[55].b = pFALSE;
      tt->struct_vals[56].e = PID_INTEREST;
      tt->struct_vals[57].s = tdrpStrDup("PID_INTEREST");
      tt->struct_vals[58].s = tdrpStrDup("final_interest_value_for_pid_decision");
      tt->struct_vals[59].s = tdrpStrDup("final_interest_value_for_pid_decision");
      tt->struct_vals[60].s = tdrpStrDup("");
      tt->struct_vals[61].b = pFALSE;
      tt->struct_vals[62].b = pFALSE;
      tt->struct_vals[63].e = TEMP_FOR_PID;
      tt->struct_vals[64].s = tdrpStrDup("TEMP_FOR_PID");
      tt->struct_vals[65].s = tdrpStrDup("temperature_for_computing_pid");
      tt->struct_vals[66].s = tdrpStrDup("temperature");
      tt->struct_vals[67].s = tdrpStrDup("C");
      tt->struct_vals[68].b = pFALSE;
      tt->struct_vals[69].b = pFALSE;
      tt->struct_vals[70].e = KDP;
      tt->struct_vals[71].s = tdrpStrDup("KDP");
      tt->struct_vals[72].s = tdrpStrDup("specific_differential_phase");
      tt->struct_vals[73].s = tdrpStrDup("specific_differential_phase_hv");
      tt->struct_vals[74].s = tdrpStrDup("deg/km");
      tt->struct_vals[75].b = pTRUE;
      tt->struct_vals[76].b = pFALSE;
      tt->struct_vals[77].e = KDP_SC;
      tt->struct_vals[78].s = tdrpStrDup("KDP_SC");
      tt->struct_vals[79].s = tdrpStrDup("kdp_conditioned_using_ZZDR_self_consistency");
      tt->struct_vals[80].s = tdrpStrDup("specific_differential_phase_hv");
      tt->struct_vals[81].s = tdrpStrDup("deg/km");
      tt->struct_vals[82].b = pFALSE;
      tt->struct_vals[83].b = pFALSE;
      tt->struct_vals[84].e = ZDR_ATTEN_CORRECTION;
      tt->struct_vals[85].s = tdrpStrDup("ZDR_ATTEN_CORRECTION");
      tt->struct_vals[86].s = tdrpStrDup("correction_to_zdr_for_attenuation");
      tt->struct_vals[87].s = tdrpStrDup("zdr_attenuation_correction");
      tt->struct_vals[88].s = tdrpStrDup("dB");
      tt->struct_vals[89].b = pFALSE;
      tt->struct_vals[90].b = pFALSE;
      tt->struct_vals[91].e = DBZ_ATTEN_CORRECTED;
      tt->struct_vals[92].s = tdrpStrDup("DBZ_ATTEN_CORRECTED");
      tt->struct_vals[93].s = tdrpStrDup("dbz_corrected_for_attenuation");
      tt->struct_vals[94].s = tdrpStrDup("dbz_corrected_for_attenuation");
      tt->struct_vals[95].s = tdrpStrDup("dBZ");
      tt->struct_vals[96].b = pFALSE;
      tt->struct_vals[97].b = pFALSE;
      tt->struct_vals[98].e = ZDR_ATTEN_CORRECTED;
      tt->struct_vals[99].s = tdrpStrDup("ZDR_ATTEN_CORRECTED");
      tt->struct_vals[100].s = tdrpStrDup("zdr_corrected_for_attenuation");
      tt->struct_vals[101].s = tdrpStrDup("zdr_corrected_for_attenuation");
      tt->struct_vals[102].s = tdrpStrDup("dB");
      tt->struct_vals[103].b = pFALSE;
      tt->struct_vals[104].b = pFALSE;
    tt++;
    
    // Parameter 'output_encoding'
    // ctype is '_output_encoding_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_encoding");
    tt->descr = tdrpStrDup("Set the encoding for fields in the output files.");
    tt->help = tdrpStrDup("INT16 provides better compression. FL32 writes 32-bit floats.");
    tt->val_offset = (char *) &output_encoding - &_start_;
    tt->enum_def.name = tdrpStrDup("output_encoding_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_FL32");
      tt->enum_def.fields[0].val = OUTPUT_ENCODING_FL32;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
      tt->enum_def.fields[1].val = OUTPUT_ENCODING_INT16;
    tt->single_val.e = OUTPUT_ENCODING_INT16;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("SPECIFY COPY-THROUGH FIELDS");
    tt->comment_text = tdrpStrDup("These fields are copied unchanged from the input file to the output file. This allows the user to consolidate the input and output data set in a single file.");
    tt++;
    
    // Parameter 'copy_selected_input_fields_to_output'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("copy_selected_input_fields_to_output");
    tt->descr = tdrpStrDup("Option to copy input fields unchanged to the output file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &copy_selected_input_fields_to_output - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'copy_fields'
    // ctype is '_copy_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("copy_fields");
    tt->descr = tdrpStrDup("These fields are copied through unchanged to the output file.");
    tt->help = tdrpStrDup("You can change the name of the field on output.\n\ncensor_non_weather: use PID field to censor non-weather PID types - see non_weather_pid_types[] below.\n");
    tt->array_offset = (char *) &_copy_fields - &_start_;
    tt->array_n_offset = (char *) &copy_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(copy_field_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("copy_field_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_copy_fields->input_name - (char *) _copy_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_copy_fields->output_name - (char *) _copy_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("censor_non_weather");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_copy_fields->censor_non_weather - (char *) _copy_fields;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("DBZ");
      tt->struct_vals[1].s = tdrpStrDup("DBZ");
      tt->struct_vals[2].b = pFALSE;
      tt->struct_vals[3].s = tdrpStrDup("VEL");
      tt->struct_vals[4].s = tdrpStrDup("VEL");
      tt->struct_vals[5].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("SPECIFY NON-WEATHER TYPES FROM PID");
    tt->comment_text = tdrpStrDup("This section allows you to specify the PID particle types to be used to censor non-weather echoes.");
    tt++;
    
    // Parameter 'non_weather_pid_types'
    // ctype is '_pid_types_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("non_weather_pid_types");
    tt->descr = tdrpStrDup("List of non-weather types to be censored.");
    tt->help = tdrpStrDup("This list applies to the fields for which censor_non_weather is set to true. You can consider adding CLOUD to the list if, for example, the CLOUD type finds Bragg echo instead of cloud.");
    tt->array_offset = (char *) &_non_weather_pid_types - &_start_;
    tt->array_n_offset = (char *) &non_weather_pid_types_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(pid_types_t);
    tt->array_n = 6;
    tt->enum_def.name = tdrpStrDup("pid_types_t");
    tt->enum_def.nfields = 20;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLOUD");
      tt->enum_def.fields[0].val = CLOUD;
      tt->enum_def.fields[1].name = tdrpStrDup("DRIZZLE");
      tt->enum_def.fields[1].val = DRIZZLE;
      tt->enum_def.fields[2].name = tdrpStrDup("LIGHT_RAIN");
      tt->enum_def.fields[2].val = LIGHT_RAIN;
      tt->enum_def.fields[3].name = tdrpStrDup("MODERATE_RAIN");
      tt->enum_def.fields[3].val = MODERATE_RAIN;
      tt->enum_def.fields[4].name = tdrpStrDup("HEAVY_RAIN");
      tt->enum_def.fields[4].val = HEAVY_RAIN;
      tt->enum_def.fields[5].name = tdrpStrDup("HAIL");
      tt->enum_def.fields[5].val = HAIL;
      tt->enum_def.fields[6].name = tdrpStrDup("RAIN_HAIL_MIXTURE");
      tt->enum_def.fields[6].val = RAIN_HAIL_MIXTURE;
      tt->enum_def.fields[7].name = tdrpStrDup("GRAUPEL_SMALL_HAIL");
      tt->enum_def.fields[7].val = GRAUPEL_SMALL_HAIL;
      tt->enum_def.fields[8].name = tdrpStrDup("GRAUPEL_RAIN");
      tt->enum_def.fields[8].val = GRAUPEL_RAIN;
      tt->enum_def.fields[9].name = tdrpStrDup("DRY_SNOW");
      tt->enum_def.fields[9].val = DRY_SNOW;
      tt->enum_def.fields[10].name = tdrpStrDup("WET_SNOW");
      tt->enum_def.fields[10].val = WET_SNOW;
      tt->enum_def.fields[11].name = tdrpStrDup("ICE_CRYSTALS");
      tt->enum_def.fields[11].val = ICE_CRYSTALS;
      tt->enum_def.fields[12].name = tdrpStrDup("IRREG_ICE_CRYSTALS");
      tt->enum_def.fields[12].val = IRREG_ICE_CRYSTALS;
      tt->enum_def.fields[13].name = tdrpStrDup("SUPERCOOLED_DROPS");
      tt->enum_def.fields[13].val = SUPERCOOLED_DROPS;
      tt->enum_def.fields[14].name = tdrpStrDup("FLYING_INSECTS");
      tt->enum_def.fields[14].val = FLYING_INSECTS;
      tt->enum_def.fields[15].name = tdrpStrDup("SECOND_TRIP");
      tt->enum_def.fields[15].val = SECOND_TRIP;
      tt->enum_def.fields[16].name = tdrpStrDup("GROUND_CLUTTER");
      tt->enum_def.fields[16].val = GROUND_CLUTTER;
      tt->enum_def.fields[17].name = tdrpStrDup("SATURATED_SNR");
      tt->enum_def.fields[17].val = SATURATED_SNR;
      tt->enum_def.fields[18].name = tdrpStrDup("CHAFF");
      tt->enum_def.fields[18].val = CHAFF;
      tt->enum_def.fields[19].name = tdrpStrDup("MISC");
      tt->enum_def.fields[19].val = MISC;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].e = FLYING_INSECTS;
      tt->array_vals[1].e = SECOND_TRIP;
      tt->array_vals[2].e = GROUND_CLUTTER;
      tt->array_vals[3].e = SATURATED_SNR;
      tt->array_vals[4].e = CHAFF;
      tt->array_vals[5].e = MISC;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("WRITE DEBUG FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'KDP_write_debug_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_write_debug_fields");
    tt->descr = tdrpStrDup("Write extra fields to assist with KDP debugging.");
    tt->help = tdrpStrDup("These are the intermediate fields used in computing KDP and attenuation.");
    tt->val_offset = (char *) &KDP_write_debug_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_write_debug_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_write_debug_fields");
    tt->descr = tdrpStrDup("Write extra fields to assist with PID debugging.");
    tt->help = tdrpStrDup("These are the intermediate fields used in computing PID.");
    tt->val_offset = (char *) &PID_write_debug_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("WRITING THE OUTPUT FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/pid");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'output_format'
    // ctype is '_output_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_format");
    tt->descr = tdrpStrDup("Format for the output files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_format - &_start_;
    tt->enum_def.name = tdrpStrDup("output_format_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_FORMAT_CFRADIAL");
      tt->enum_def.fields[0].val = OUTPUT_FORMAT_CFRADIAL;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_FORMAT_DORADE");
      tt->enum_def.fields[1].val = OUTPUT_FORMAT_DORADE;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_FORMAT_UF");
      tt->enum_def.fields[2].val = OUTPUT_FORMAT_UF;
    tt->single_val.e = OUTPUT_FORMAT_CFRADIAL;
    tt++;
    
    // Parameter 'output_filename_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename_prefix");
    tt->descr = tdrpStrDup("Optional prefix for output filename.");
    tt->help = tdrpStrDup("If empty, the standard prefix will be used. Only applies to CfRadial files. Standard prefix is 'cfrad.'");
    tt->val_offset = (char *) &output_filename_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_filename_suffix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename_suffix");
    tt->descr = tdrpStrDup("Optional suffix for output filename.");
    tt->help = tdrpStrDup("If not empty, the suffix will be inserted immediately prior to the extension.");
    tt->val_offset = (char *) &output_filename_suffix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'include_instrument_name_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_instrument_name_in_file_name");
    tt->descr = tdrpStrDup("Option to include the instrument name in the file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the instrument name will be included just before the volume number in the output file name.");
    tt->val_offset = (char *) &include_instrument_name_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'include_site_name_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_site_name_in_file_name");
    tt->descr = tdrpStrDup("Option to include the site name in the file name.");
    tt->help = tdrpStrDup("Only applies to CfRadial files. If true, the site name will be included just before the volume number in the output file name.");
    tt->val_offset = (char *) &include_site_name_in_file_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'include_subsecs_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_subsecs_in_file_name");
    tt->descr = tdrpStrDup("Option to include sub-seconds in date-time part of file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the millisecs of the start and end time will be included in the file name.");
    tt->val_offset = (char *) &include_subsecs_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'include_scan_type_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_scan_type_in_file_name");
    tt->descr = tdrpStrDup("Option to include the scan type in the file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the scan type (SUR, SEC, RHI, VER etc) will be included in the file name.");
    tt->val_offset = (char *) &include_scan_type_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'include_scan_name_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_scan_name_in_file_name");
    tt->descr = tdrpStrDup("Option to include the scan name in the file name.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. If true, the scan name will be included in the file name.");
    tt->val_offset = (char *) &include_scan_name_in_file_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'include_scan_id_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_scan_id_in_file_name");
    tt->descr = tdrpStrDup("Option to include the scan Id in the file name.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. If true, the scan Id will be included in the file name.");
    tt->val_offset = (char *) &include_scan_id_in_file_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'include_range_resolution_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_range_resolution_in_file_name");
    tt->descr = tdrpStrDup("Option to include the range resolution in the file name.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. If true, the range resolution (50m) will be included in the file name.");
    tt->val_offset = (char *) &include_range_resolution_in_file_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'include_vol_num_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_vol_num_in_file_name");
    tt->descr = tdrpStrDup("Option to include the volume number in the file name.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. If true, the volume number is included in the file name, preceded by '_v'.");
    tt->val_offset = (char *) &include_vol_num_in_file_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_hyphen_in_file_name_datetime_part'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_hyphen_in_file_name_datetime_part");
    tt->descr = tdrpStrDup("Option to use a hyphen between date and time in filename.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. Normally an underscore is used.");
    tt->val_offset = (char *) &use_hyphen_in_file_name_datetime_part - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename");
    tt->descr = tdrpStrDup("Name of output file.");
    tt->help = tdrpStrDup("Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename - &_start_;
    tt->single_val.s = tdrpStrDup("cfradial.test.nc");
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("SET MAX RANGE - OPTIONAL");
    tt->comment_text = tdrpStrDup("If set, all rays will be truncated at this range.");
    tt++;
    
    // Parameter 'set_max_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_max_range");
    tt->descr = tdrpStrDup("Option to set the max range for any ray.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_max_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km");
    tt->descr = tdrpStrDup("Specified maximim range - km.");
    tt->help = tdrpStrDup("Gates beyond this range are removed.");
    tt->val_offset = (char *) &max_range_km - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("SETTING PSEUDO EARTH RADIUS RATIO FOR HEIGHT COMPUTATIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_standard_pseudo_earth_radius'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_standard_pseudo_earth_radius");
    tt->descr = tdrpStrDup("Option to override the standard 4/3 earth radius model for refraction.");
    tt->help = tdrpStrDup("If true, the standard 4/3 earth radius will be overridden. The US NWS NEXRAD system uses 1.21 instead of 1.333.");
    tt->val_offset = (char *) &override_standard_pseudo_earth_radius - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'pseudo_earth_radius_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("pseudo_earth_radius_ratio");
    tt->descr = tdrpStrDup("Ratio for computing the pseudo earth radius for beam height computations.");
    tt->help = tdrpStrDup("For standard refraction this is 4/3. For super refraction it will be less than 4.3, and for sub-refraction it will be greater. NEXRAD uses 1.21.");
    tt->val_offset = (char *) &pseudo_earth_radius_ratio - &_start_;
    tt->single_val.d = 1.33333;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("REALTIME OPERATIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'procmap_register_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("procmap_register_interval");
    tt->descr = tdrpStrDup("Interval for registering with procmap (secs).");
    tt->help = tdrpStrDup("REALTIME mode only. The app will register with procmap at this interval, to update its status. If it does not register within twice this interval, the auto_restart script will restart the app.");
    tt->val_offset = (char *) &procmap_register_interval - &_start_;
    tt->single_val.i = 60;
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
