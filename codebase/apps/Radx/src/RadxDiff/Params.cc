/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxDiff
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Checks 2 Radx-supported files for differences.");
    tt->comment_text = tdrpStrDup("Prints report to stdout. Returns 0 on success, 1 on failure.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("READING THE DATA");
    tt->comment_text = tdrpStrDup("The most common option is to specify the file paths.");
    tt++;
    
    // Parameter 'search_mode'
    // ctype is '_search_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("search_mode");
    tt->descr = tdrpStrDup("Mode for finding files");
    tt->help = tdrpStrDup("SEARCH_BY_PATH: use specified paths. SEARCH_BY_TIME: find files by time, given the directories and search criteria");
    tt->val_offset = (char *) &search_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("search_mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SEARCH_BY_PATH");
      tt->enum_def.fields[0].val = SEARCH_BY_PATH;
      tt->enum_def.fields[1].name = tdrpStrDup("SEARCH_BY_TIME");
      tt->enum_def.fields[1].val = SEARCH_BY_TIME;
    tt->single_val.e = SEARCH_BY_PATH;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("SEARCH_BY_PATH");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'file1_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("file1_path");
    tt->descr = tdrpStrDup("Full path for file1.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &file1_path - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/file1");
    tt++;
    
    // Parameter 'file2_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("file2_path");
    tt->descr = tdrpStrDup("Full path for file2.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &file2_path - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/file2");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("SEARCH_BY_TIME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'file1_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("file1_dir");
    tt->descr = tdrpStrDup("Data directory for file1.");
    tt->help = tdrpStrDup("See file1_specify_by_time.");
    tt->val_offset = (char *) &file1_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'file2_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("file2_dir");
    tt->descr = tdrpStrDup("Data directory for file2.");
    tt->help = tdrpStrDup("See file2_specify_by_time.");
    tt->val_offset = (char *) &file2_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'time_mode'
    // ctype is '_time_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("time_mode");
    tt->descr = tdrpStrDup("Mode for searching for files in time domain.");
    tt->help = tdrpStrDup("For all except LATEST, you must specify the search time and the search margin.");
    tt->val_offset = (char *) &time_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("time_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("READ_LATEST");
      tt->enum_def.fields[0].val = READ_LATEST;
      tt->enum_def.fields[1].name = tdrpStrDup("READ_CLOSEST");
      tt->enum_def.fields[1].val = READ_CLOSEST;
      tt->enum_def.fields[2].name = tdrpStrDup("READ_FIRST_BEFORE");
      tt->enum_def.fields[2].val = READ_FIRST_BEFORE;
      tt->enum_def.fields[3].name = tdrpStrDup("READ_FIRST_AFTER");
      tt->enum_def.fields[3].val = READ_FIRST_AFTER;
    tt->single_val.e = READ_LATEST;
    tt++;
    
    // Parameter 'read_search_time'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("read_search_time");
    tt->descr = tdrpStrDup("Search time for files.");
    tt->help = tdrpStrDup("Time for data requested. Format is YYYY MM DD HH MM SS");
    tt->val_offset = (char *) &read_search_time - &_start_;
    tt->single_val.s = tdrpStrDup("1970 01 01 00 00 00");
    tt++;
    
    // Parameter 'read_search_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_search_margin");
    tt->descr = tdrpStrDup("Margin around search time (secs).");
    tt->help = tdrpStrDup("Applies to all search modes except LATEST.");
    tt->val_offset = (char *) &read_search_margin - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("FIELDS TO COMPARE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'specify_field_names'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_field_names");
    tt->descr = tdrpStrDup("Option to specify the field names for comparison");
    tt->help = tdrpStrDup("If TRUE, the field name pairs in field_names[] are used for comparison. If FALSE, each field in file1 is compared with a field of the same name in file2.");
    tt->val_offset = (char *) &specify_field_names - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'field_names'
    // ctype is '_field_name_pair_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("field_names");
    tt->descr = tdrpStrDup("List of fields for comparison.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_field_names - &_start_;
    tt->array_n_offset = (char *) &field_names_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(field_name_pair_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("field_name_pair_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("file1_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_field_names->file1_field_name - (char *) _field_names;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("file2_field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_field_names->file2_field_name - (char *) _field_names;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("DBZ");
      tt->struct_vals[1].s = tdrpStrDup("DBZ");
      tt->struct_vals[2].s = tdrpStrDup("VEL");
      tt->struct_vals[3].s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("READ CONSTRAINTS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_set_fixed_angle_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_fixed_angle_limits");
    tt->descr = tdrpStrDup("Option to set fixed angle limits");
    tt->help = tdrpStrDup("Only read sweeps within the specified fixed angle limits. Fixed angles are elevation in PPI mode and azimuth in RHI mode.");
    tt->val_offset = (char *) &read_set_fixed_angle_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_lower_fixed_angle'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("read_lower_fixed_angle");
    tt->descr = tdrpStrDup("Lower fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_lower_fixed_angle - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'read_upper_fixed_angle'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("read_upper_fixed_angle");
    tt->descr = tdrpStrDup("Upper fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_upper_fixed_angle - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'read_set_sweep_num_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_sweep_num_limits");
    tt->descr = tdrpStrDup("Option to set sweep number limits");
    tt->help = tdrpStrDup("Only read sweeps within the specified sweep number limits.");
    tt->val_offset = (char *) &read_set_sweep_num_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_lower_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_lower_sweep_num");
    tt->descr = tdrpStrDup("Lower sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_lower_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'read_upper_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_upper_sweep_num");
    tt->descr = tdrpStrDup("Upper sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_upper_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'aggregate_sweep_files_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("aggregate_sweep_files_on_read");
    tt->descr = tdrpStrDup("Option to aggregate sweep files into a volume on read.");
    tt->help = tdrpStrDup("If false, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.");
    tt->val_offset = (char *) &aggregate_sweep_files_on_read - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_ngates_constant'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_ngates_constant");
    tt->descr = tdrpStrDup("Option to force the number of gates to be constant.");
    tt->help = tdrpStrDup("If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.");
    tt->val_offset = (char *) &set_ngates_constant - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_max_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_max_range");
    tt->descr = tdrpStrDup("Option to set the max range for any ray.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_max_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km");
    tt->descr = tdrpStrDup("Specified maximim range - km.");
    tt->help = tdrpStrDup("Gates beyond this range are removed.");
    tt->val_offset = (char *) &max_range_km - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'keep_long_range_rays'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("keep_long_range_rays");
    tt->descr = tdrpStrDup("Option to keep long range rays.");
    tt->help = tdrpStrDup("Applies to NEXRAD data. If true, data from the non-Doppler long-range sweeps will be kept. By default these are removed after their fields are copied over to the short-range sweep.");
    tt->val_offset = (char *) &keep_long_range_rays - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remove_short_range_rays'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_short_range_rays");
    tt->descr = tdrpStrDup("Option to remove short range rays.");
    tt->help = tdrpStrDup("Applies to NEXRAD data. If true, data from the Doppler short-range sweeps will be removed.");
    tt->val_offset = (char *) &remove_short_range_rays - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'trim_surveillance_sweeps_to_360deg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("trim_surveillance_sweeps_to_360deg");
    tt->descr = tdrpStrDup("Option to trip surveillance sweeps so that they only cover 360 degrees.");
    tt->help = tdrpStrDup("Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.");
    tt->val_offset = (char *) &trim_surveillance_sweeps_to_360deg - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'change_radar_latitude_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_radar_latitude_sign");
    tt->descr = tdrpStrDup("Option to negate the latitude.");
    tt->help = tdrpStrDup("Mainly useful for RAPIC files. In RAPIC, latitude is always positive, so mostly you need to set the latitiude to the negative value of itself.");
    tt->val_offset = (char *) &change_radar_latitude_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'match_range_geometry'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("match_range_geometry");
    tt->descr = tdrpStrDup("Option to force the range geometry to match.");
    tt->help = tdrpStrDup("If true, the range geometry of the second file will be metched to that of the first, before the comparison is made.");
    tt->val_offset = (char *) &match_range_geometry - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("WHAT TO REPORT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'check_volume_number'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_volume_number");
    tt->descr = tdrpStrDup("Check the volume number in the two data sets.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &check_volume_number - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'check_sweeps'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_sweeps");
    tt->descr = tdrpStrDup("Check the sweep details in the two data sets.");
    tt->help = tdrpStrDup("If false, we do not perform any checks on the sweep information.");
    tt->val_offset = (char *) &check_sweeps - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'check_sweep_numbers'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_sweep_numbers");
    tt->descr = tdrpStrDup("Check the sweep numbers in the two data sets.");
    tt->help = tdrpStrDup("If false, we do not check that the sweep numbers match.");
    tt->val_offset = (char *) &check_sweep_numbers - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'check_rays'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_rays");
    tt->descr = tdrpStrDup("Check the ray details in the two data sets.");
    tt->help = tdrpStrDup("If false, we do not perform any checks on the ray information.");
    tt->val_offset = (char *) &check_rays - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'check_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_fields");
    tt->descr = tdrpStrDup("Check the field details in the two data sets.");
    tt->help = tdrpStrDup("If false, we do not perform any checks on the field information.");
    tt->val_offset = (char *) &check_fields - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'check_number_of_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_number_of_fields");
    tt->descr = tdrpStrDup("Check the number of fields is the same in the two data sets.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &check_number_of_fields - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'check_field_names'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_field_names");
    tt->descr = tdrpStrDup("Check the field names in the two data sets.");
    tt->help = tdrpStrDup("If false, it is assumed that the fields are in the same order in the 2 files, and only the data, not the names, is checked.");
    tt->val_offset = (char *) &check_field_names - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'check_field_units'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_field_units");
    tt->descr = tdrpStrDup("Check the field units in the two data sets.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &check_field_units - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'check_field_data'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_field_data");
    tt->descr = tdrpStrDup("Check the field data values in the two data sets.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &check_field_data - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'field_data_max_diff_for_match'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("field_data_max_diff_for_match");
    tt->descr = tdrpStrDup("Maximum absolute difference to be considered a match.");
    tt->help = tdrpStrDup("This is the expected resolution of data values. Set to 0.0 to have all differences shown. Differences less than this value are considered perfect matches");
    tt->val_offset = (char *) &field_data_max_diff_for_match - &_start_;
    tt->single_val.d = 0.01;
    tt++;
    
    // Parameter 'report_all_field_data_diffs'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("report_all_field_data_diffs");
    tt->descr = tdrpStrDup("Print details at every gate with a difference.");
    tt->help = tdrpStrDup("If FALSE, only a summary will be printed.");
    tt->val_offset = (char *) &report_all_field_data_diffs - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_percent_error_for_summary_report'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_percent_error_for_summary_report");
    tt->descr = tdrpStrDup("Min percentage of error gates to trigger data reporting.");
    tt->help = tdrpStrDup("This is the threshold for triggering a summary report. If the fraction of gates with errors exceeds this percentage, the summary will be reported and the program will return an error. If the percentage of bad gates is less than this threshold, no error will be reported.");
    tt->val_offset = (char *) &min_percent_error_for_summary_report - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'time_max_diff_for_match'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("time_max_diff_for_match");
    tt->descr = tdrpStrDup("Maximum absolute difference in time (secs).");
    tt->help = tdrpStrDup("Max allowable time difference. Diffs greater than this will generate an error.");
    tt->val_offset = (char *) &time_max_diff_for_match - &_start_;
    tt->single_val.d = 0.01;
    tt++;
    
    // Parameter 'angle_max_diff_for_match'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("angle_max_diff_for_match");
    tt->descr = tdrpStrDup("Maximum absolute difference in angle (deg).");
    tt->help = tdrpStrDup("Max allowable angle difference. Diffs greater than this will generate an error.");
    tt->val_offset = (char *) &angle_max_diff_for_match - &_start_;
    tt->single_val.d = 0.01;
    tt++;
    
    // Parameter 'nyquist_max_diff_for_match'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("nyquist_max_diff_for_match");
    tt->descr = tdrpStrDup("Maximum absolute difference in nyquist (m/s).");
    tt->help = tdrpStrDup("Max allowable nyquist velocity difference. Diffs greater than this will generate an error.");
    tt->val_offset = (char *) &nyquist_max_diff_for_match - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("WRITING THE OUTPUT");
    tt->comment_text = tdrpStrDup("Where to write the results.");
    tt++;
    
    // Parameter 'output_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_file_path");
    tt->descr = tdrpStrDup("Full path for output file.");
    tt->help = tdrpStrDup("If this is set to stdout, then standard output is used. If this is set to stderr, then standard error output is used.");
    tt->val_offset = (char *) &output_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("stderr");
    tt++;
    
    // Parameter 'append_to_output'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_to_output");
    tt->descr = tdrpStrDup("Option to append to the output file.");
    tt->help = tdrpStrDup("If FALSE, the output file will be empty when opened.");
    tt->val_offset = (char *) &append_to_output - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
