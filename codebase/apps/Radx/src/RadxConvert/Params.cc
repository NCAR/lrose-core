/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxConvert
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Converts files between CfRadial and other radial formats");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file.  In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'latest_data_info_avail'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("latest_data_info_avail");
    tt->descr = tdrpStrDup("Is _latest_data_info file available?");
    tt->help = tdrpStrDup("If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.");
    tt->val_offset = (char *) &latest_data_info_avail - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'search_recursively'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("search_recursively");
    tt->descr = tdrpStrDup("Option to recurse to subdirectories while looking for new files.");
    tt->help = tdrpStrDup("If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &search_recursively - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_recursion_depth'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_recursion_depth");
    tt->descr = tdrpStrDup("Maximum depth for recursive directory scan.");
    tt->help = tdrpStrDup("Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.");
    tt->val_offset = (char *) &max_recursion_depth - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'wait_between_checks'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wait_between_checks");
    tt->descr = tdrpStrDup("Sleep time between checking directory for input - secs.");
    tt->help = tdrpStrDup("If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &wait_between_checks - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'file_quiescence'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("file_quiescence");
    tt->descr = tdrpStrDup("File quiescence when checking for files - secs.");
    tt->help = tdrpStrDup("This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.");
    tt->val_offset = (char *) &file_quiescence - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'gematronik_realtime_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("gematronik_realtime_mode");
    tt->descr = tdrpStrDup("Set to TRUE if we are watching for Gematronik XML volumes.");
    tt->help = tdrpStrDup("Gematronik volumes (for a given time) are stored in multiple files, one for each field. Therefore, after the time on a volume changes and a new field file is detected, we need to wait a while to ensure that all of the files have had a chance to be writted to disk. You need to set gematronik_realtime_wait_secs to a value in excess of the time it takes for all of the files to be written.");
    tt->val_offset = (char *) &gematronik_realtime_mode - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'gematronik_realtime_wait_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("gematronik_realtime_wait_secs");
    tt->descr = tdrpStrDup("Number of seconds to wait, so that all field files can be written to disk before we start to read.");
    tt->help = tdrpStrDup("See 'gematronik_realtime_mode'.");
    tt->val_offset = (char *) &gematronik_realtime_wait_secs - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("OPTIONAL FIXED ANGLE OR SWEEP NUMBER LIMITS");
    tt->comment_text = tdrpStrDup("Fixed angles are elevation in PPI mode and azimuth in RHI mode.");
    tt++;
    
    // Parameter 'set_fixed_angle_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_fixed_angle_limits");
    tt->descr = tdrpStrDup("Option to set fixed angle limits");
    tt->help = tdrpStrDup("Only use sweeps within the specified fixed angle limits.");
    tt->val_offset = (char *) &set_fixed_angle_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("lower_fixed_angle_limit");
    tt->descr = tdrpStrDup("Lower fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_fixed_angle_limit - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'upper_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("upper_fixed_angle_limit");
    tt->descr = tdrpStrDup("Upper fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_fixed_angle_limit - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'set_sweep_num_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_sweep_num_limits");
    tt->descr = tdrpStrDup("Option to set sweep number limits");
    tt->help = tdrpStrDup("If 'apply_strict_angle_limits' is set, only read sweeps within the specified limits. If strict checking is false and no data lies within the limits, return the closest applicable sweep.");
    tt->val_offset = (char *) &set_sweep_num_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("lower_sweep_num");
    tt->descr = tdrpStrDup("Lower sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'upper_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("upper_sweep_num");
    tt->descr = tdrpStrDup("Upper sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'apply_strict_angle_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_strict_angle_limits");
    tt->descr = tdrpStrDup("Option to apply strict checking for angle or sweep number limits on read.");
    tt->help = tdrpStrDup("If true, an error will occur if the fixed angle limits or sweep num limits are outside the bounds of the data. If false, a read is guaranteed to return at least 1 sweep - if no sweep lies within the angle limits set, the nearest sweep will be returned.");
    tt->val_offset = (char *) &apply_strict_angle_limits - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("READ OPTIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_set_radar_num'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_set_radar_num");
    tt->descr = tdrpStrDup("Option to set the radar number.");
    tt->help = tdrpStrDup("See read_radar_num.");
    tt->val_offset = (char *) &read_set_radar_num - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'read_radar_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("read_radar_num");
    tt->descr = tdrpStrDup("Set the radar number for the data to be extracted.");
    tt->help = tdrpStrDup("Most files have data from a single radar, so this does not apply. The NOAA HRD files, however, have data from both the lower fuselage (LF, radar_num = 1) and tail (TA, radar_num = 2) radars. For HRD files, by default the TA radar will be used, unless the radar num is set to 1 for the LF radar. If this is set to 1, it will force the convert to assume a lower fuselage radar. If set to 2, it will assume a tail radar.");
    tt->val_offset = (char *) &read_radar_num - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'aggregate_sweep_files_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("aggregate_sweep_files_on_read");
    tt->descr = tdrpStrDup("Option to aggregate sweep files into a volume on read.");
    tt->help = tdrpStrDup("If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.");
    tt->val_offset = (char *) &aggregate_sweep_files_on_read - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'aggregate_all_files_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("aggregate_all_files_on_read");
    tt->descr = tdrpStrDup("Option to aggregate all files in the file list on read.");
    tt->help = tdrpStrDup("If true, all of the files specified with the '-f' arg will be aggregated into a single volume as they are read in. This only applies to FILELIST mode. Overrides 'aggregate_sweep_files_on_read'.");
    tt->val_offset = (char *) &aggregate_all_files_on_read - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ignore_idle_scan_mode_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ignore_idle_scan_mode_on_read");
    tt->descr = tdrpStrDup("Option to ignore data taken in IDLE mode.");
    tt->help = tdrpStrDup("If true, on read will ignore files with an IDLE scan mode.");
    tt->val_offset = (char *) &ignore_idle_scan_mode_on_read - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'remove_rays_with_all_data_missing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_rays_with_all_data_missing");
    tt->descr = tdrpStrDup("Option to remove rays for which all data is missing.");
    tt->help = tdrpStrDup("If true, ray data will be checked. If all fields have missing data at all gates, the ray will be removed after reading.");
    tt->val_offset = (char *) &remove_rays_with_all_data_missing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'clear_transition_flag_on_all_rays'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("clear_transition_flag_on_all_rays");
    tt->descr = tdrpStrDup("Option to clear the transition flag on all rays.");
    tt->help = tdrpStrDup("If true, for all rays on which the transition flag is set, this flag will be removed, so that all rays are considered to be NOT in transition.");
    tt->val_offset = (char *) &clear_transition_flag_on_all_rays - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remove_rays_with_antenna_transitions'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_rays_with_antenna_transitions");
    tt->descr = tdrpStrDup("Option to remove rays taken while the antenna was in transition.");
    tt->help = tdrpStrDup("If true, rays with the transition flag set will not be used. The transiton flag is set when the antenna is in transtion between one sweep and the next.");
    tt->val_offset = (char *) &remove_rays_with_antenna_transitions - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'transition_nrays_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("transition_nrays_margin");
    tt->descr = tdrpStrDup("Number of transition rays to include as a margin");
    tt->help = tdrpStrDup("Sometimes the transition flag is turned on too early in a transition, on not turned off quickly enough after a transition. If you set this to a number greater than 0, that number of rays will be included at each end of the transition, i.e. the transition will effectively be shorter at each end by this number of rays.");
    tt->val_offset = (char *) &transition_nrays_margin - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'trim_surveillance_sweeps_to_360deg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("trim_surveillance_sweeps_to_360deg");
    tt->descr = tdrpStrDup("Option to trip surveillance sweeps so that they only cover 360 degrees.");
    tt->help = tdrpStrDup("Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.");
    tt->val_offset = (char *) &trim_surveillance_sweeps_to_360deg - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_max_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_max_range");
    tt->descr = tdrpStrDup("Option to set the max range for any ray.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_max_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km");
    tt->descr = tdrpStrDup("Specified maximim range - km.");
    tt->help = tdrpStrDup("Gates beyond this range are removed.");
    tt->val_offset = (char *) &max_range_km - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'preserve_sweeps'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("preserve_sweeps");
    tt->descr = tdrpStrDup("Preserve sweeps just as they are in the file.");
    tt->help = tdrpStrDup("Applies generally to NEXRAD data. If true, the sweep details are preserved. If false, we consolidate sweeps from split cuts into a single sweep.");
    tt->val_offset = (char *) &preserve_sweeps - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remove_long_range_rays'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_long_range_rays");
    tt->descr = tdrpStrDup("Option to remove long range rays.");
    tt->help = tdrpStrDup("Applies to NEXRAD data. If true, data from the non-Doppler long-range sweeps will be removed.");
    tt->val_offset = (char *) &remove_long_range_rays - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'remove_short_range_rays'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_short_range_rays");
    tt->descr = tdrpStrDup("Option to remove short range rays.");
    tt->help = tdrpStrDup("Applies to NEXRAD data. If true, data from the Doppler short-range sweeps will be removed.");
    tt->val_offset = (char *) &remove_short_range_rays - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_ngates_constant'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_ngates_constant");
    tt->descr = tdrpStrDup("Option to force the number of gates to be constant.");
    tt->help = tdrpStrDup("If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.");
    tt->val_offset = (char *) &set_ngates_constant - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remap_to_predominant_range_geometry'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remap_to_predominant_range_geometry");
    tt->descr = tdrpStrDup("Option to remap all rays to the predominant range geometry.");
    tt->help = tdrpStrDup("If TRUE, all rays will be remapped onto the same range geometry, determined as the most common geometry amongst all of the rays read in.");
    tt->val_offset = (char *) &remap_to_predominant_range_geometry - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remap_to_finest_range_geometry'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remap_to_finest_range_geometry");
    tt->descr = tdrpStrDup("Option to remap all rays to the finest range geometry.");
    tt->help = tdrpStrDup("If TRUE, all rays will be remapped onto the same range geometry, determined as that with the finest resolution in range - i.e. with the minimum gate spacing.");
    tt->val_offset = (char *) &remap_to_finest_range_geometry - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE GATE GEOMETRY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_start_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_start_range");
    tt->descr = tdrpStrDup("Option to override the start range.");
    tt->help = tdrpStrDup("If true, the specified start range in this file will be used. If not, the start range in the data file will be used.");
    tt->val_offset = (char *) &override_start_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'start_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("start_range_km");
    tt->descr = tdrpStrDup("Specified start range (km).");
    tt->help = tdrpStrDup("See override_start_range.");
    tt->val_offset = (char *) &start_range_km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'override_gate_spacing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_gate_spacing");
    tt->descr = tdrpStrDup("Option to override the gate spacing.");
    tt->help = tdrpStrDup("If true, the specified gate spacing in this file will be used. If not, the gate spacing in the data file will be used.");
    tt->val_offset = (char *) &override_gate_spacing - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'gate_spacing_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("gate_spacing_km");
    tt->descr = tdrpStrDup("Specified gate spacing (km).");
    tt->help = tdrpStrDup("See override_gate_spacing.");
    tt->val_offset = (char *) &gate_spacing_km - &_start_;
    tt->single_val.d = 0.0075;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE INSTRUMENT AND/OR SITE NAME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_instrument_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_instrument_name");
    tt->descr = tdrpStrDup("Option to override the instrument name.");
    tt->help = tdrpStrDup("If true, the name provided will be used.");
    tt->val_offset = (char *) &override_instrument_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instrument_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instrument_name");
    tt->descr = tdrpStrDup("Instrument name.");
    tt->help = tdrpStrDup("See override_instrument_name.");
    tt->val_offset = (char *) &instrument_name - &_start_;
    tt->single_val.s = tdrpStrDup("unknown");
    tt++;
    
    // Parameter 'override_site_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_site_name");
    tt->descr = tdrpStrDup("Option to override the site name.");
    tt->help = tdrpStrDup("If true, the name provided will be used.");
    tt->val_offset = (char *) &override_site_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'site_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_name");
    tt->descr = tdrpStrDup("Site name.");
    tt->help = tdrpStrDup("See override_site_name.");
    tt->val_offset = (char *) &site_name - &_start_;
    tt->single_val.s = tdrpStrDup("unknown");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE VOLUME NUMBER, OR AUTOINCREMENT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_volume_number'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_volume_number");
    tt->descr = tdrpStrDup("Option to override the volume number in the file.");
    tt->help = tdrpStrDup("Useful is there is no volume number in the data.");
    tt->val_offset = (char *) &override_volume_number - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'starting_volume_number'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("starting_volume_number");
    tt->descr = tdrpStrDup("Volume number at startup.");
    tt->help = tdrpStrDup("Applies if 'override_volume_number' is true.");
    tt->val_offset = (char *) &starting_volume_number - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'autoincrement_volume_number'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("autoincrement_volume_number");
    tt->descr = tdrpStrDup("Option to automatically increment the volume number.");
    tt->help = tdrpStrDup("Starts at 'starting_volume_number' and increments from there.");
    tt->val_offset = (char *) &autoincrement_volume_number - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE RADAR LOCATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_radar_location'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_location");
    tt->descr = tdrpStrDup("Option to override the radar location.");
    tt->help = tdrpStrDup("If true, the location in this file will be used. If not, the location in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_location - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_latitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_latitude_deg");
    tt->descr = tdrpStrDup("Radar latitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_latitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_longitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_longitude_deg");
    tt->descr = tdrpStrDup("Radar longitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_longitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_altitude_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_altitude_meters");
    tt->descr = tdrpStrDup("Radar altitude (meters).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_altitude_meters - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'change_radar_latitude_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_radar_latitude_sign");
    tt->descr = tdrpStrDup("Option to negate the latitude.");
    tt->help = tdrpStrDup("Mainly useful for RAPIC files. In RAPIC, latitude is always positive, so mostly you need to set the latitiude to the negative value of itself.");
    tt->val_offset = (char *) &change_radar_latitude_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'apply_georeference_corrections'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_georeference_corrections");
    tt->descr = tdrpStrDup("Option to apply the georeference info for moving platforms.");
    tt->help = tdrpStrDup("For moving platforms, measured georeference information is sometimes available. If this is set to true, the georeference data is applied and appropriate corrections made. If possible, Earth-centric azimuth and elevation angles will be computed.");
    tt->val_offset = (char *) &apply_georeference_corrections - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("OPTION TO CORRECT TIME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_time_offset'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_time_offset");
    tt->descr = tdrpStrDup("Option to apply an offset to the ray times.");
    tt->help = tdrpStrDup("If TRUE, this offset will be ADDED to the existing ray times. This is useful, for example, for correcting time errors, or converting from local time to UTC.");
    tt->val_offset = (char *) &apply_time_offset - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'time_offset_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("time_offset_secs");
    tt->descr = tdrpStrDup("Time offset (secs).");
    tt->help = tdrpStrDup("See 'apply_time_offset'. This value will be ADDED to the existing ray times.");
    tt->val_offset = (char *) &time_offset_secs - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("OPTION TO CORRECT ANTENNA ANGLES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_azimuth_offset'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_azimuth_offset");
    tt->descr = tdrpStrDup("Option to apply an offset to the azimuth values.");
    tt->help = tdrpStrDup("If TRUE, this offset will be ADDED to the measured azimuth angles. This is useful, for example, in the case of a mobile platform which is not set up oriented to true north. Suppose you have a truck (like the DOWs) which is oriented off true north. Then if you add in the truck HEADING relative to true north, the measured azimuth angles will be adjusted by the heading, to give azimuth relative to TRUE north.");
    tt->val_offset = (char *) &apply_azimuth_offset - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'azimuth_offset'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("azimuth_offset");
    tt->descr = tdrpStrDup("Azimuth offset (degrees).");
    tt->help = tdrpStrDup("See 'apply_azimuth_offset'. This value will be ADDED to the measured azimuths.");
    tt->val_offset = (char *) &azimuth_offset - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'apply_elevation_offset'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_elevation_offset");
    tt->descr = tdrpStrDup("Option to apply an offset to the elevation values.");
    tt->help = tdrpStrDup("If TRUE, this offset will be ADDED to the measured elevation angles. This is useful to correct for a systematic bias in measured elevation angles.");
    tt->val_offset = (char *) &apply_elevation_offset - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'elevation_offset'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("elevation_offset");
    tt->descr = tdrpStrDup("Elevation offset (degrees).");
    tt->help = tdrpStrDup("See 'apply_elevation_offset'. This value will be ADDED to the measured elevations.");
    tt->val_offset = (char *) &elevation_offset - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE INSTRUMENT TYPE, PLATFORM TYPE AND PRIMARY AXIS.");
    tt->comment_text = tdrpStrDup("This applies to read operations.");
    tt++;
    
    // Parameter 'override_instrument_type'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_instrument_type");
    tt->descr = tdrpStrDup("Option to override instrument type on read.");
    tt->help = tdrpStrDup("If true, the file will be read in, the instrument type will be changed, and then any post-read processing will be performed.");
    tt->val_offset = (char *) &override_instrument_type - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'instrument_type'
    // ctype is '_instrument_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("instrument_type");
    tt->descr = tdrpStrDup("Specify the instrument type. See override_instrument_type.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &instrument_type - &_start_;
    tt->enum_def.name = tdrpStrDup("instrument_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("INSTRUMENT_RADAR");
      tt->enum_def.fields[0].val = INSTRUMENT_RADAR;
      tt->enum_def.fields[1].name = tdrpStrDup("INSTRUMENT_LIDAR");
      tt->enum_def.fields[1].val = INSTRUMENT_LIDAR;
    tt->single_val.e = INSTRUMENT_RADAR;
    tt++;
    
    // Parameter 'override_platform_type'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_platform_type");
    tt->descr = tdrpStrDup("Option to override platform type on read. If true, the file will be read in, the platform type will be changed, and then any post-read processing will be performed.");
    tt->help = tdrpStrDup("\tPLATFORM_FIXED  - radar is in a fixed location\n\tPLATFORM_VEHICLE -  radar is mounted on a land vehicle\n\tPLATFORM_SHIP - radar is mounted on a ship\n\tPLATFORM_AIRCRAFT_FORE - forward-looking on aircraft\n\tPLATFORM_AIRCRAFT_AFT - backward-looking on aircraft\n\tPLATFORM_AIRCRAFT_TAIL - tail - e.g. ELDORA\n\tPLATFORM_AIRCRAFT_BELLY -  belly radar on aircraft\n\tPLATFORM_AIRCRAFT_ROOF - roof radar on aircraft\n\tPLATFORM_AIRCRAFT_NOSE - radar in nose radome on aircraft\n\tPLATFORM_SATELLITE_ORBIT - orbiting satellite\n\tPLATFORM_SATELLITE_GEOSTAT - geostationary satellite\n");
    tt->val_offset = (char *) &override_platform_type - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'platform_type'
    // ctype is '_platform_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("platform_type");
    tt->descr = tdrpStrDup("Platform type.");
    tt->help = tdrpStrDup("See override_platform_type.");
    tt->val_offset = (char *) &platform_type - &_start_;
    tt->enum_def.name = tdrpStrDup("platform_type_t");
    tt->enum_def.nfields = 11;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PLATFORM_FIXED");
      tt->enum_def.fields[0].val = PLATFORM_FIXED;
      tt->enum_def.fields[1].name = tdrpStrDup("PLATFORM_VEHICLE");
      tt->enum_def.fields[1].val = PLATFORM_VEHICLE;
      tt->enum_def.fields[2].name = tdrpStrDup("PLATFORM_SHIP");
      tt->enum_def.fields[2].val = PLATFORM_SHIP;
      tt->enum_def.fields[3].name = tdrpStrDup("PLATFORM_AIRCRAFT_FORE");
      tt->enum_def.fields[3].val = PLATFORM_AIRCRAFT_FORE;
      tt->enum_def.fields[4].name = tdrpStrDup("PLATFORM_AIRCRAFT_AFT");
      tt->enum_def.fields[4].val = PLATFORM_AIRCRAFT_AFT;
      tt->enum_def.fields[5].name = tdrpStrDup("PLATFORM_AIRCRAFT_TAIL");
      tt->enum_def.fields[5].val = PLATFORM_AIRCRAFT_TAIL;
      tt->enum_def.fields[6].name = tdrpStrDup("PLATFORM_AIRCRAFT_BELLY");
      tt->enum_def.fields[6].val = PLATFORM_AIRCRAFT_BELLY;
      tt->enum_def.fields[7].name = tdrpStrDup("PLATFORM_AIRCRAFT_ROOF");
      tt->enum_def.fields[7].val = PLATFORM_AIRCRAFT_ROOF;
      tt->enum_def.fields[8].name = tdrpStrDup("PLATFORM_AIRCRAFT_NOSE");
      tt->enum_def.fields[8].val = PLATFORM_AIRCRAFT_NOSE;
      tt->enum_def.fields[9].name = tdrpStrDup("PLATFORM_SATELLITE_ORBIT");
      tt->enum_def.fields[9].val = PLATFORM_SATELLITE_ORBIT;
      tt->enum_def.fields[10].name = tdrpStrDup("PLATFORM_SATELLITE_GEOSTAT");
      tt->enum_def.fields[10].val = PLATFORM_SATELLITE_GEOSTAT;
    tt->single_val.e = PLATFORM_FIXED;
    tt++;
    
    // Parameter 'override_primary_axis'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_primary_axis");
    tt->descr = tdrpStrDup("Option to override primary axis on read. If true, the file will be read in, the primary axis will be changed, and then any post-read processing will be performed.");
    tt->help = tdrpStrDup("\tPRIMARY_AXIS_Z - vertical\n\tPRIMARY_AXIS_Y - longitudinal axis of platform\n\tPRIMARY_AXIS_X - lateral axis of platform\n\tPRIMARY_AXIS_Z_PRIME - inverted vertical\n\tPRIMARY_AXIS_Y_PRIME - ELDORA, HRD tail\n\tPRIMARY_AXIS_X_PRIME - translated lateral\n");
    tt->val_offset = (char *) &override_primary_axis - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'primary_axis'
    // ctype is '_primary_axis_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("primary_axis");
    tt->descr = tdrpStrDup("Platform type.");
    tt->help = tdrpStrDup("See override_primary_axis.");
    tt->val_offset = (char *) &primary_axis - &_start_;
    tt->enum_def.name = tdrpStrDup("primary_axis_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PRIMARY_AXIS_Z");
      tt->enum_def.fields[0].val = PRIMARY_AXIS_Z;
      tt->enum_def.fields[1].name = tdrpStrDup("PRIMARY_AXIS_Y");
      tt->enum_def.fields[1].val = PRIMARY_AXIS_Y;
      tt->enum_def.fields[2].name = tdrpStrDup("PRIMARY_AXIS_X");
      tt->enum_def.fields[2].val = PRIMARY_AXIS_X;
      tt->enum_def.fields[3].name = tdrpStrDup("PRIMARY_AXIS_Z_PRIME");
      tt->enum_def.fields[3].val = PRIMARY_AXIS_Z_PRIME;
      tt->enum_def.fields[4].name = tdrpStrDup("PRIMARY_AXIS_Y_PRIME");
      tt->enum_def.fields[4].val = PRIMARY_AXIS_Y_PRIME;
      tt->enum_def.fields[5].name = tdrpStrDup("PRIMARY_AXIS_X_PRIME");
      tt->enum_def.fields[5].val = PRIMARY_AXIS_X_PRIME;
    tt->single_val.e = PRIMARY_AXIS_Z;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("OPTION TO FORCE RELOAD OF SWEEP AND/OR VOLUME INFO, or RECOMPUTE SWEEP FIXED ANGLE.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'reload_sweep_info_from_rays'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("reload_sweep_info_from_rays");
    tt->descr = tdrpStrDup("Option to force a reload of sweep info from rays.");
    tt->help = tdrpStrDup("If TRUE, this forces the app to call RadxVol::loadSweepInfoFromRays(), which reads through the rays and reloads the sweep info appropriately.");
    tt->val_offset = (char *) &reload_sweep_info_from_rays - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'reload_volume_info_from_rays'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("reload_volume_info_from_rays");
    tt->descr = tdrpStrDup("Option to force a reload of volume info from rays.");
    tt->help = tdrpStrDup("If TRUE, this forces the app to call RadxVol::loadVolumeInfoFromRays(), which reads through the rays and reloads the volume summary info appropriately.");
    tt->val_offset = (char *) &reload_volume_info_from_rays - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'recompute_sweep_fixed_angles'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("recompute_sweep_fixed_angles");
    tt->descr = tdrpStrDup("Option to recompute sweep fixed angles using the angles in the data.");
    tt->help = tdrpStrDup("Normally the sweep angles are set using the scan strategy angles - i.e., the theoretically perfect angles. This option allows you to recompute the sweep angles using the measured elevation angles (in PPI mode) or azimuth angles (in RHI mode).");
    tt->val_offset = (char *) &recompute_sweep_fixed_angles - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'optimize_surveillance_transitions'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("optimize_surveillance_transitions");
    tt->descr = tdrpStrDup("Optimize the transitions in surveillance mode.");
    tt->help = tdrpStrDup("If true, we check the transitions between sweeps in surveillance mode, and move problem rays into the correct sweep. We also set the transition flag on/off based on the max elevation error speficied. See below.");
    tt->val_offset = (char *) &optimize_surveillance_transitions - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'optimized_transitions_max_elev_error'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("optimized_transitions_max_elev_error");
    tt->descr = tdrpStrDup("Max elevation angle error when optimizing surveillance transitions (degrees).");
    tt->help = tdrpStrDup("If the difference between the fixed angle and measured angle exceeds this value, the transition flag will be set. If not, it will be cleared.");
    tt->val_offset = (char *) &optimized_transitions_max_elev_error - &_start_;
    tt->single_val.d = 0.25;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("OPTION TO ADJUST SWEEP LIMITS USING FIXED AND MEASURED ANGLES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'adjust_sweep_limits_using_angles'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("adjust_sweep_limits_using_angles");
    tt->descr = tdrpStrDup("Adjust the limits of sweeps, by comparing the measured angles to the fixed angles.");
    tt->help = tdrpStrDup("Sometimes the transitions from one fixed angle to another are not accurately described by the scan flags, and as a result rays are not correctly assigned to the sweeps. This option goes through the volume in ray order, and adjusts the way rays are associated with each sweep. It does this by comparing the actual angle with the fixed angle, and minimizes the angular difference.");
    tt->val_offset = (char *) &adjust_sweep_limits_using_angles - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("OPTION TO SORT SWEEPS BY FIXED ANGLE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'sort_sweeps_by_fixed_angle'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sort_sweeps_by_fixed_angle");
    tt->descr = tdrpStrDup("Sort the sweeps by fixed angle.");
    tt->help = tdrpStrDup("For some volumes, the sweep fixed angles may not be in increasing order. This option allows you to reorder the sweeps, and rays, into the correct order.");
    tt->val_offset = (char *) &sort_sweeps_by_fixed_angle - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE SELECTED GLOBAL ATTRIBUTES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'version_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("version_override");
    tt->descr = tdrpStrDup("Option to override the version global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the version attribute.");
    tt->val_offset = (char *) &version_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'title_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("title_override");
    tt->descr = tdrpStrDup("Option to override the title global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the title attribute.");
    tt->val_offset = (char *) &title_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'institution_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("institution_override");
    tt->descr = tdrpStrDup("Option to override the institution global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the institution attribute.");
    tt->val_offset = (char *) &institution_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'references_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("references_override");
    tt->descr = tdrpStrDup("Option to override the references global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the references attribute.");
    tt->val_offset = (char *) &references_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'source_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("source_override");
    tt->descr = tdrpStrDup("Option to override the source global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the source attribute.");
    tt->val_offset = (char *) &source_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'history_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("history_override");
    tt->descr = tdrpStrDup("Option to override the history global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the history attribute.");
    tt->val_offset = (char *) &history_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'comment_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("comment_override");
    tt->descr = tdrpStrDup("Option to override the comment global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the comment attribute.");
    tt->val_offset = (char *) &comment_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'author_override'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("author_override");
    tt->descr = tdrpStrDup("Option to override the author global attribute.");
    tt->help = tdrpStrDup("If empty, no effect. If not empty, this string is used to override the author attribute.");
    tt->val_offset = (char *) &author_override - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 16'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 16");
    tt->comment_hdr = tdrpStrDup("OPTION TO ADD USER-SPECIFIED GLOBAL ATTRIBUTES to output file");
    tt->comment_text = tdrpStrDup("Only applies to CfRadial output format.");
    tt++;
    
    // Parameter 'add_user_specified_global_attributes'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_user_specified_global_attributes");
    tt->descr = tdrpStrDup("Add user-specified global attributes to output file.");
    tt->help = tdrpStrDup("Only applies to CfRadial files. See below for details.");
    tt->val_offset = (char *) &add_user_specified_global_attributes - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'user_defined_global_attributes'
    // ctype is '_attr_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("user_defined_global_attributes");
    tt->descr = tdrpStrDup("User-defined global attributes.");
    tt->help = tdrpStrDup("Applies if 'add_user_specified_global_attributes' is true. Array attributes are comma-delimited.");
    tt->array_offset = (char *) &_user_defined_global_attributes - &_start_;
    tt->array_n_offset = (char *) &user_defined_global_attributes_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(attr_t);
    tt->array_n = 5;
    tt->struct_def.name = tdrpStrDup("attr_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_user_defined_global_attributes->name - (char *) _user_defined_global_attributes;
      tt->struct_def.fields[1].ftype = tdrpStrDup("attr_type_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("attrType");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_user_defined_global_attributes->attrType - (char *) _user_defined_global_attributes;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("attr_type_t");
        tt->struct_def.fields[1].enum_def.nfields = 5;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("ATTR_STRING");
        tt->struct_def.fields[1].enum_def.fields[0].val = ATTR_STRING;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("ATTR_INT");
        tt->struct_def.fields[1].enum_def.fields[1].val = ATTR_INT;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("ATTR_DOUBLE");
        tt->struct_def.fields[1].enum_def.fields[2].val = ATTR_DOUBLE;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("ATTR_INT_ARRAY");
        tt->struct_def.fields[1].enum_def.fields[3].val = ATTR_INT_ARRAY;
        tt->struct_def.fields[1].enum_def.fields[4].name = tdrpStrDup("ATTR_DOUBLE_ARRAY");
        tt->struct_def.fields[1].enum_def.fields[4].val = ATTR_DOUBLE_ARRAY;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("val");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_user_defined_global_attributes->val - (char *) _user_defined_global_attributes;
    tt->n_struct_vals = 15;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("attr_string");
      tt->struct_vals[1].e = ATTR_STRING;
      tt->struct_vals[2].s = tdrpStrDup("user-attribute");
      tt->struct_vals[3].s = tdrpStrDup("attr_int");
      tt->struct_vals[4].e = ATTR_INT;
      tt->struct_vals[5].s = tdrpStrDup("99");
      tt->struct_vals[6].s = tdrpStrDup("attr_double");
      tt->struct_vals[7].e = ATTR_DOUBLE;
      tt->struct_vals[8].s = tdrpStrDup("99.99");
      tt->struct_vals[9].s = tdrpStrDup("attr_int_array");
      tt->struct_vals[10].e = ATTR_INT_ARRAY;
      tt->struct_vals[11].s = tdrpStrDup("1,2,3,4,5");
      tt->struct_vals[12].s = tdrpStrDup("attr_double_array");
      tt->struct_vals[13].e = ATTR_DOUBLE_ARRAY;
      tt->struct_vals[14].s = tdrpStrDup("1.1,2.2,3.3,4.4,5.5");
    tt++;
    
    // Parameter 'Comment 17'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 17");
    tt->comment_hdr = tdrpStrDup("OPTION TO SPECIFY FIELD NAMES AND OUTPUT ENCODING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'set_output_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_output_fields");
    tt->descr = tdrpStrDup("Set the field names and output encoding");
    tt->help = tdrpStrDup("If false, all fields will be used.");
    tt->val_offset = (char *) &set_output_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Output field details.");
    tt->help = tdrpStrDup("Set the details for the output fields. The output_field_name is the ndtCDF variable name. Set the long name to a more descriptive name. Set the standard name to the CF standard name for this field. If the long name or standard name are empty, the existing names are used. If SCALING_SPECIFIED, then the scale and offset is used.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->input_field_name - (char *) _output_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->output_field_name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->long_name - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->standard_name - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("output_units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->output_units - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->encoding - (char *) _output_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[5].enum_def.nfields = 5;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_ASIS");
        tt->struct_def.fields[5].enum_def.fields[0].val = OUTPUT_ENCODING_ASIS;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_FLOAT32");
        tt->struct_def.fields[5].enum_def.fields[1].val = OUTPUT_ENCODING_FLOAT32;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
        tt->struct_def.fields[5].enum_def.fields[2].val = OUTPUT_ENCODING_INT32;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
        tt->struct_def.fields[5].enum_def.fields[3].val = OUTPUT_ENCODING_INT16;
        tt->struct_def.fields[5].enum_def.fields[4].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
        tt->struct_def.fields[5].enum_def.fields[4].val = OUTPUT_ENCODING_INT08;
      tt->struct_def.fields[6].ftype = tdrpStrDup("output_scaling_t");
      tt->struct_def.fields[6].fname = tdrpStrDup("output_scaling");
      tt->struct_def.fields[6].ptype = ENUM_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_fields->output_scaling - (char *) _output_fields;
        tt->struct_def.fields[6].enum_def.name = tdrpStrDup("output_scaling_t");
        tt->struct_def.fields[6].enum_def.nfields = 2;
        tt->struct_def.fields[6].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[6].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[6].enum_def.fields[0].name = tdrpStrDup("SCALING_DYNAMIC");
        tt->struct_def.fields[6].enum_def.fields[0].val = SCALING_DYNAMIC;
        tt->struct_def.fields[6].enum_def.fields[1].name = tdrpStrDup("SCALING_SPECIFIED");
        tt->struct_def.fields[6].enum_def.fields[1].val = SCALING_SPECIFIED;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("output_scale");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_output_fields->output_scale - (char *) _output_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("output_offset");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_output_fields->output_offset - (char *) _output_fields;
    tt->n_struct_vals = 18;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("DBZ");
      tt->struct_vals[1].s = tdrpStrDup("DBZ");
      tt->struct_vals[2].s = tdrpStrDup("reflectivity");
      tt->struct_vals[3].s = tdrpStrDup("equivalent_reflectivity_factor");
      tt->struct_vals[4].s = tdrpStrDup("dBZ");
      tt->struct_vals[5].e = OUTPUT_ENCODING_ASIS;
      tt->struct_vals[6].e = SCALING_DYNAMIC;
      tt->struct_vals[7].d = 0.01;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].s = tdrpStrDup("VEL");
      tt->struct_vals[10].s = tdrpStrDup("VEL");
      tt->struct_vals[11].s = tdrpStrDup("radial_velocity");
      tt->struct_vals[12].s = tdrpStrDup("radial_velocity_of_scatterers_away_from_instrument");
      tt->struct_vals[13].s = tdrpStrDup("m/s");
      tt->struct_vals[14].e = OUTPUT_ENCODING_ASIS;
      tt->struct_vals[15].e = SCALING_DYNAMIC;
      tt->struct_vals[16].d = 0.01;
      tt->struct_vals[17].d = 0;
    tt++;
    
    // Parameter 'write_other_fields_unchanged'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_other_fields_unchanged");
    tt->descr = tdrpStrDup("Option to write out the unspecified fields as they are.");
    tt->help = tdrpStrDup("If false, only the fields listed in output_fields will be written. If this is true, all other fields will be written unchanged.");
    tt->val_offset = (char *) &write_other_fields_unchanged - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'exclude_specified_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("exclude_specified_fields");
    tt->descr = tdrpStrDup("Option to exclude fields in the specified list.");
    tt->help = tdrpStrDup("If true, the specified fields will be excluded. This may be easier than specifiying all of the fields to be included, if that list is very long.");
    tt->val_offset = (char *) &exclude_specified_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'excluded_fields'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("excluded_fields");
    tt->descr = tdrpStrDup("List of fields to be excluded.");
    tt->help = tdrpStrDup("List the names to be excluded");
    tt->array_offset = (char *) &_excluded_fields - &_start_;
    tt->array_n_offset = (char *) &excluded_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("DBZ");
      tt->array_vals[1].s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'Comment 18'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 18");
    tt->comment_hdr = tdrpStrDup("OPTION TO SPECIFY OUTPUT ENCODING FOR ALL FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'set_output_encoding_for_all_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_output_encoding_for_all_fields");
    tt->descr = tdrpStrDup("Option to set output encoding for all fields");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_output_encoding_for_all_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_encoding'
    // ctype is '_output_encoding_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_encoding");
    tt->descr = tdrpStrDup("Output encoding for all fields, if requested.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_encoding - &_start_;
    tt->enum_def.name = tdrpStrDup("output_encoding_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_ASIS");
      tt->enum_def.fields[0].val = OUTPUT_ENCODING_ASIS;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_FLOAT32");
      tt->enum_def.fields[1].val = OUTPUT_ENCODING_FLOAT32;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
      tt->enum_def.fields[2].val = OUTPUT_ENCODING_INT32;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
      tt->enum_def.fields[3].val = OUTPUT_ENCODING_INT16;
      tt->enum_def.fields[4].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
      tt->enum_def.fields[4].val = OUTPUT_ENCODING_INT08;
    tt->single_val.e = OUTPUT_ENCODING_ASIS;
    tt++;
    
    // Parameter 'Comment 19'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 19");
    tt->comment_hdr = tdrpStrDup("CENSORING");
    tt->comment_text = tdrpStrDup("You have the option of censoring the data fields - i.e. setting the fields to missing values - at gates which meet certain criteria. If this is done correctly, it allows you to preserve the valid data and discard the noise, thereby improving compression.");
    tt++;
    
    // Parameter 'apply_censoring'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_censoring");
    tt->descr = tdrpStrDup("Apply censoring based on field values and thresholds.");
    tt->help = tdrpStrDup("If TRUE, censoring will be performed. See 'censoring_fields' for details on how the censoring is applied.");
    tt->val_offset = (char *) &apply_censoring - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'censoring_fields'
    // ctype is '_censoring_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("censoring_fields");
    tt->descr = tdrpStrDup("Fields to be used for censoring.");
    tt->help = tdrpStrDup("Specify the fields to be used to determine whether a gate should be censored. The name refers to the input data field names. Valid field values lie in the range from min_valid_value to max_valid_value inclusive. If the value of a field at a gate lies within this range, it is considered valid. Each specified field is examined at each gate, and is flagged as valid if its value lies in the valid range. These field flags are then combined as follows: first, all of the LOGICAL_OR flags are combined, yielding a single combined_or flag which is true if any of the LOGICAL_OR fields is true. The combined_or flag is then combined with all of the LOGICAL_AND fields, yielding a true value only if the combined_or flag and the LOGICAL_AND fields are all true. If this final flag is true, then the data at the gate is regarded as valid and is retained. If the final flag is false, the data at the gate is censored, and all of the fields at the gate are set to missing.");
    tt->array_offset = (char *) &_censoring_fields - &_start_;
    tt->array_n_offset = (char *) &censoring_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(censoring_field_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("censoring_field_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_censoring_fields->name - (char *) _censoring_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("min_valid_value");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_censoring_fields->min_valid_value - (char *) _censoring_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("max_valid_value");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_censoring_fields->max_valid_value - (char *) _censoring_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("logical_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("combination_method");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_censoring_fields->combination_method - (char *) _censoring_fields;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("logical_t");
        tt->struct_def.fields[3].enum_def.nfields = 2;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("LOGICAL_AND");
        tt->struct_def.fields[3].enum_def.fields[0].val = LOGICAL_AND;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("LOGICAL_OR");
        tt->struct_def.fields[3].enum_def.fields[1].val = LOGICAL_OR;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("SNR");
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 1000;
      tt->struct_vals[3].e = LOGICAL_OR;
      tt->struct_vals[4].s = tdrpStrDup("NCP");
      tt->struct_vals[5].d = 0.15;
      tt->struct_vals[6].d = 1000;
      tt->struct_vals[7].e = LOGICAL_OR;
    tt++;
    
    // Parameter 'censoring_min_valid_run'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("censoring_min_valid_run");
    tt->descr = tdrpStrDup("Minimum valid run of non-censored gates.");
    tt->help = tdrpStrDup("Only active if set to 2 or greater. A check is made to remove short runs of noise. Looking along the radial, we compute the number of contiguous gates (a 'run') with uncensored data. For the gates in this run to be accepted the length of the run must exceed censoring_min_valid_run. If the number of gates in a run is less than this, then all gates in the run are censored.");
    tt->val_offset = (char *) &censoring_min_valid_run - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'Comment 20'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 20");
    tt->comment_hdr = tdrpStrDup("OPTION TO APPLY LINEAR TRANSFORM TO SPECIFIED FIELDS.");
    tt->comment_text = tdrpStrDup("These transforms are fixed. The same transform is applied to all files.");
    tt++;
    
    // Parameter 'apply_linear_transforms'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_linear_transforms");
    tt->descr = tdrpStrDup("Apply linear transform to specified fields.");
    tt->help = tdrpStrDup("If true, we will apply a linear transform to selected fields.");
    tt->val_offset = (char *) &apply_linear_transforms - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'transform_fields'
    // ctype is '_transform_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("transform_fields");
    tt->descr = tdrpStrDup("transform field details.");
    tt->help = tdrpStrDup("Set the field name, scale and offset to be applied to the selected fields. NOTE: the field name is the INPUT field name.");
    tt->array_offset = (char *) &_transform_fields - &_start_;
    tt->array_n_offset = (char *) &transform_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(transform_field_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("transform_field_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_transform_fields->input_field_name - (char *) _transform_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("transform_scale");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_transform_fields->transform_scale - (char *) _transform_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("transform_offset");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_transform_fields->transform_offset - (char *) _transform_fields;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("DBZ");
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].s = tdrpStrDup("VEL");
      tt->struct_vals[4].d = 1;
      tt->struct_vals[5].d = 0;
    tt++;
    
    // Parameter 'Comment 21'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 21");
    tt->comment_hdr = tdrpStrDup("OPTION TO APPLY VARIABLE LINEAR TRANSFORM TO SPECIFIED FIELDS.");
    tt->comment_text = tdrpStrDup("These transforms vary from file to file, controlled by specific metadata.");
    tt++;
    
    // Parameter 'apply_variable_transforms'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_variable_transforms");
    tt->descr = tdrpStrDup("Apply linear transforms that vary based on specific metadata.");
    tt->help = tdrpStrDup("If true, we will apply variable linear transform to selected fields.");
    tt->val_offset = (char *) &apply_variable_transforms - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'variable_transform_fields'
    // ctype is '_variable_transform_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("variable_transform_fields");
    tt->descr = tdrpStrDup("Details for variable transforms.");
    tt->help = tdrpStrDup("We based the field decision off the input_field_name. You need to pick the method of control: STATUS_XML_FIELD - based on the value associated with an XML tag in the status block; ELEVATION_DEG - based on the elevation in degrees; PULSE_WIDTH_US - based on the pulse with in microsecs. For STATUS_XML_FIELD Set the relevant status_xml_tag, which will be used to find the relevant value. The lookup table is a series of entries specifying the metadata_value and the scale and offset to be appied for that given metadata value. Each entry is enclosed in parentheses, and is of the form (metadata_value, scale, offset). The entries themselves are also are comma-separated. Interpolation is used for metadata values that lie between those specified in the lookup table. The enries in the lookup table should have metadata_values that are monotonically increasing.");
    tt->array_offset = (char *) &_variable_transform_fields - &_start_;
    tt->array_n_offset = (char *) &variable_transform_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(variable_transform_field_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("variable_transform_field_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_variable_transform_fields->input_field_name - (char *) _variable_transform_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("variable_transform_control_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("control");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_variable_transform_fields->control - (char *) _variable_transform_fields;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("variable_transform_control_t");
        tt->struct_def.fields[1].enum_def.nfields = 3;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("STATUS_XML_FIELD");
        tt->struct_def.fields[1].enum_def.fields[0].val = STATUS_XML_FIELD;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("ELEVATION_DEG");
        tt->struct_def.fields[1].enum_def.fields[1].val = ELEVATION_DEG;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("PULSE_WIDTH_US");
        tt->struct_def.fields[1].enum_def.fields[2].val = PULSE_WIDTH_US;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("xml_tag");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_variable_transform_fields->xml_tag - (char *) _variable_transform_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("lookup_table");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_variable_transform_fields->lookup_table - (char *) _variable_transform_fields;
    tt->n_struct_vals = 12;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("dBZ");
      tt->struct_vals[1].e = STATUS_XML_FIELD;
      tt->struct_vals[2].s = tdrpStrDup("gdrxanctxfreq");
      tt->struct_vals[3].s = tdrpStrDup("(57.0, 1.0, -0.7), (60.0, 1.0, -0.2), (64.0, 1.0, -0.3), (67.0, 1.0, -1.8), (68.0, 1.0, -1.2), (69.0, 1.0, -1.3)");
      tt->struct_vals[4].s = tdrpStrDup("dBZv");
      tt->struct_vals[5].e = STATUS_XML_FIELD;
      tt->struct_vals[6].s = tdrpStrDup("gdrxanctxfreq");
      tt->struct_vals[7].s = tdrpStrDup("(57.0, 1.0, 0.1), (58.0, 1.0, 0.3), (60.0, 1.0, -0.3), (67.0, 1.0, -2.3), (69.0, 1.0, -2.0)");
      tt->struct_vals[8].s = tdrpStrDup("ZDR");
      tt->struct_vals[9].e = STATUS_XML_FIELD;
      tt->struct_vals[10].s = tdrpStrDup("gdrxanctxfreq");
      tt->struct_vals[11].s = tdrpStrDup("(56.0, 1.0, -0.75), (58.0, 1.0, -0.75), (61.0, 1.0, 0.1), (63.5, 1.0, 0.2), (64.0, 1.0, 0.6), (69.0, 1.0, 0.6)");
    tt++;
    
    // Parameter 'Comment 22'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 22");
    tt->comment_hdr = tdrpStrDup("OUTPUT FORMAT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_format'
    // ctype is '_output_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_format");
    tt->descr = tdrpStrDup("Format for the output files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_format - &_start_;
    tt->enum_def.name = tdrpStrDup("output_format_t");
    tt->enum_def.nfields = 10;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_FORMAT_CFRADIAL");
      tt->enum_def.fields[0].val = OUTPUT_FORMAT_CFRADIAL;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_FORMAT_CFRADIAL2");
      tt->enum_def.fields[1].val = OUTPUT_FORMAT_CFRADIAL2;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_FORMAT_NCXX");
      tt->enum_def.fields[2].val = OUTPUT_FORMAT_NCXX;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_FORMAT_DORADE");
      tt->enum_def.fields[3].val = OUTPUT_FORMAT_DORADE;
      tt->enum_def.fields[4].name = tdrpStrDup("OUTPUT_FORMAT_FORAY");
      tt->enum_def.fields[4].val = OUTPUT_FORMAT_FORAY;
      tt->enum_def.fields[5].name = tdrpStrDup("OUTPUT_FORMAT_NEXRAD");
      tt->enum_def.fields[5].val = OUTPUT_FORMAT_NEXRAD;
      tt->enum_def.fields[6].name = tdrpStrDup("OUTPUT_FORMAT_UF");
      tt->enum_def.fields[6].val = OUTPUT_FORMAT_UF;
      tt->enum_def.fields[7].name = tdrpStrDup("OUTPUT_FORMAT_MDV_RADIAL");
      tt->enum_def.fields[7].val = OUTPUT_FORMAT_MDV_RADIAL;
      tt->enum_def.fields[8].name = tdrpStrDup("OUTPUT_FORMAT_NSSL_MRD");
      tt->enum_def.fields[8].val = OUTPUT_FORMAT_NSSL_MRD;
      tt->enum_def.fields[9].name = tdrpStrDup("OUTPUT_FORMAT_ODIM_HDF5");
      tt->enum_def.fields[9].val = OUTPUT_FORMAT_ODIM_HDF5;
    tt->single_val.e = OUTPUT_FORMAT_CFRADIAL;
    tt++;
    
    // Parameter 'netcdf_style'
    // ctype is '_netcdf_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("netcdf_style");
    tt->descr = tdrpStrDup("NetCDF style - if output_format is CFRADIAL");
    tt->help = tdrpStrDup("netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls");
    tt->val_offset = (char *) &netcdf_style - &_start_;
    tt->enum_def.name = tdrpStrDup("netcdf_style_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLASSIC");
      tt->enum_def.fields[0].val = CLASSIC;
      tt->enum_def.fields[1].name = tdrpStrDup("NC64BIT");
      tt->enum_def.fields[1].val = NC64BIT;
      tt->enum_def.fields[2].name = tdrpStrDup("NETCDF4");
      tt->enum_def.fields[2].val = NETCDF4;
      tt->enum_def.fields[3].name = tdrpStrDup("NETCDF4_CLASSIC");
      tt->enum_def.fields[3].val = NETCDF4_CLASSIC;
    tt->single_val.e = NETCDF4;
    tt++;
    
    // Parameter 'Comment 23'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 23");
    tt->comment_hdr = tdrpStrDup("OUTPUT BYTE-SWAPPING and COMPRESSION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_native_byte_order'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_native_byte_order");
    tt->descr = tdrpStrDup("Option to leave data in native byte order.");
    tt->help = tdrpStrDup("If false, data will be byte-swapped as appropriate on output.");
    tt->val_offset = (char *) &output_native_byte_order - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_compressed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_compressed");
    tt->descr = tdrpStrDup("Option to compress data fields on output.");
    tt->help = tdrpStrDup("Applies to netCDF and Dorade. UF does not support compression.");
    tt->val_offset = (char *) &output_compressed - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 24'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 24");
    tt->comment_hdr = tdrpStrDup("OUTPUT OPTIONS FOR CfRadial FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_force_ngates_vary'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_force_ngates_vary");
    tt->descr = tdrpStrDup("Option to force the use of ragged arrays for CfRadial files.");
    tt->help = tdrpStrDup("Only applies to CfRadial. If true, forces the use of ragged arrays even if the number of gates for all rays is constant.");
    tt->val_offset = (char *) &output_force_ngates_vary - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'compression_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("compression_level");
    tt->descr = tdrpStrDup("Compression level for output, if compressed.");
    tt->help = tdrpStrDup("Applies to netCDF only. Dorade compression is run-length encoding, and has not options..");
    tt->val_offset = (char *) &compression_level - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 25'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 25");
    tt->comment_hdr = tdrpStrDup("OUTPUT DIRECTORY AND FILE NAME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name. SPECIFY_FILE_NAME: file of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
      tt->enum_def.fields[3].name = tdrpStrDup("SPECIFY_FILE_NAME");
      tt->enum_def.fields[3].val = SPECIFY_FILE_NAME;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'output_filename_prefix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename_prefix");
    tt->descr = tdrpStrDup("Optional prefix for output filename.");
    tt->help = tdrpStrDup("If empty, the standard prefix will be used. Only applies to CfRadial files. Standard prefix is 'cfrad.'");
    tt->val_offset = (char *) &output_filename_prefix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_filename_suffix'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename_suffix");
    tt->descr = tdrpStrDup("Optional suffix for output filename.");
    tt->help = tdrpStrDup("If not empty, the suffix will be inserted immediately prior to the extension.");
    tt->val_offset = (char *) &output_filename_suffix - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'include_instrument_name_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_instrument_name_in_file_name");
    tt->descr = tdrpStrDup("Option to include the instrument name in the file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the instrument name will be included just before the volume number in the output file name.");
    tt->val_offset = (char *) &include_instrument_name_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'include_site_name_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_site_name_in_file_name");
    tt->descr = tdrpStrDup("Option to include the site name in the file name.");
    tt->help = tdrpStrDup("Only applies to CfRadial files. If true, the site name will be included just before the volume number in the output file name.");
    tt->val_offset = (char *) &include_site_name_in_file_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'include_subsecs_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_subsecs_in_file_name");
    tt->descr = tdrpStrDup("Option to include sub-seconds in date-time part of file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the millisecs of the start and end time will be included in the file name.");
    tt->val_offset = (char *) &include_subsecs_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'include_scan_type_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_scan_type_in_file_name");
    tt->descr = tdrpStrDup("Option to include the scan type in the file name.");
    tt->help = tdrpStrDup("Default is true. Only applies to CfRadial files. If true, the scan type (SUR, SEC, RHI, VER etc) will be included in the file name.");
    tt->val_offset = (char *) &include_scan_type_in_file_name - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'include_vol_num_in_file_name'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("include_vol_num_in_file_name");
    tt->descr = tdrpStrDup("Option to include the volume number in the file name.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. If true, the volume number is included in the file name, preceded by '_v'.");
    tt->val_offset = (char *) &include_vol_num_in_file_name - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_hyphen_in_file_name_datetime_part'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_hyphen_in_file_name_datetime_part");
    tt->descr = tdrpStrDup("Option to use a hyphen between date and time in filename.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. Normally an underscore is used.");
    tt->val_offset = (char *) &use_hyphen_in_file_name_datetime_part - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename");
    tt->descr = tdrpStrDup("Name of output file.");
    tt->help = tdrpStrDup("Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename - &_start_;
    tt->single_val.s = tdrpStrDup("cfradial.test.nc");
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_individual_sweeps'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_individual_sweeps");
    tt->descr = tdrpStrDup("Option to write out individual sweeps if appropriate.");
    tt->help = tdrpStrDup("If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.");
    tt->val_offset = (char *) &write_individual_sweeps - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_latest_data_info'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_latest_data_info");
    tt->descr = tdrpStrDup("Option to write out _latest_data_info files.");
    tt->help = tdrpStrDup("If true, the _latest_data_info files will be written after the converted file is written.");
    tt->val_offset = (char *) &write_latest_data_info - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_using_proposed_standard_name_attr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_using_proposed_standard_name_attr");
    tt->descr = tdrpStrDup("Option to write CfRadial files using 'proposed_standard_name' attribute.");
    tt->help = tdrpStrDup("Default is false. Only applies to CfRadial files. Normally we use the 'standard_name' attribute. However, some organizations reject these as valid files since the standard names are not yet accepted. Using proposed_standard_name' instead avoids this issue.");
    tt->val_offset = (char *) &write_using_proposed_standard_name_attr - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 26'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 26");
    tt->comment_hdr = tdrpStrDup("SEPARATING VOLUMES BY TYPE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'separate_output_dirs_by_scan_type'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("separate_output_dirs_by_scan_type");
    tt->descr = tdrpStrDup("Option to separate the files based on scan type.");
    tt->help = tdrpStrDup("Sometimes a scan strategy will switch between surveillance scans, sector scans, rhi scans, vertically-pointing scans and sun scans. If true, the files will be separated into subdirectories based on scan type.");
    tt->val_offset = (char *) &separate_output_dirs_by_scan_type - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'surveillance_subdir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("surveillance_subdir");
    tt->descr = tdrpStrDup("The directory path for surveillance scan files.");
    tt->help = tdrpStrDup("See 'separate_by_scan_type'. If the scan mode is surveillance, this subdirectory will be created under the ouput dir.");
    tt->val_offset = (char *) &surveillance_subdir - &_start_;
    tt->single_val.s = tdrpStrDup("sur");
    tt++;
    
    // Parameter 'sector_subdir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sector_subdir");
    tt->descr = tdrpStrDup("The directory path for sector scan files.");
    tt->help = tdrpStrDup("See 'separate_by_scan_type'. If the scan mode is sector, this subdirectory will be created under the ouput dir.");
    tt->val_offset = (char *) &sector_subdir - &_start_;
    tt->single_val.s = tdrpStrDup("sec");
    tt++;
    
    // Parameter 'rhi_subdir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("rhi_subdir");
    tt->descr = tdrpStrDup("The directory path for rhi files.");
    tt->help = tdrpStrDup("See 'separate_by_scan_type'. If the scan mode is rhi, this subdirectory will be created under the ouput dir.");
    tt->val_offset = (char *) &rhi_subdir - &_start_;
    tt->single_val.s = tdrpStrDup("rhi");
    tt++;
    
    // Parameter 'vert_subdir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vert_subdir");
    tt->descr = tdrpStrDup("The directory path for vert scan files.");
    tt->help = tdrpStrDup("See 'separate_by_scan_type'. If the scan mode is vert, this subdirectory will be created under the ouput dir.");
    tt->val_offset = (char *) &vert_subdir - &_start_;
    tt->single_val.s = tdrpStrDup("vert");
    tt++;
    
    // Parameter 'sun_subdir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sun_subdir");
    tt->descr = tdrpStrDup("The directory path for sun scan files.");
    tt->help = tdrpStrDup("See 'separate_by_scan_type'. If the scan mode is sun, this subdirectory will be created under the ouput dir.");
    tt->val_offset = (char *) &sun_subdir - &_start_;
    tt->single_val.s = tdrpStrDup("sun");
    tt++;
    
    // Parameter 'Comment 27'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 27");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE MISSING VALUES");
    tt->comment_text = tdrpStrDup("Missing values are applicable to both metadata and field data. The default values should be satisfactory for most purposes. However, you can choose to override these if you are careful with the selected values.\n\nThe default values for metadata are:\n\tmissingMetaDouble = -9999.0\n\tmissingMetaFloat = -9999.0\n\tmissingMetaInt = -9999\n\tmissingMetaChar = -128\n\nThe default values for field data are:\n\tmissingFl64 = -9.0e33\n\tmissingFl32 = -9.0e33\n\tmissingSi32 = -2147483647\n\tmissingSi16 = -32768\n\tmissingSi08 = -128\n\n");
    tt++;
    
    // Parameter 'override_missing_metadata_values'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_missing_metadata_values");
    tt->descr = tdrpStrDup("Option to override the missing values for meta-data");
    tt->help = tdrpStrDup("See following parameter options.");
    tt->val_offset = (char *) &override_missing_metadata_values - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'missing_metadata_double'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("missing_metadata_double");
    tt->descr = tdrpStrDup("Missing value for metadata of type double.");
    tt->help = tdrpStrDup("Only applies if override_missing_metadata_values is TRUE");
    tt->val_offset = (char *) &missing_metadata_double - &_start_;
    tt->single_val.d = -9999;
    tt++;
    
    // Parameter 'missing_metadata_float'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("missing_metadata_float");
    tt->descr = tdrpStrDup("Missing value for metadata of type float.");
    tt->help = tdrpStrDup("Only applies if override_missing_metadata_values is TRUE");
    tt->val_offset = (char *) &missing_metadata_float - &_start_;
    tt->single_val.f = -9999;
    tt++;
    
    // Parameter 'missing_metadata_int'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_metadata_int");
    tt->descr = tdrpStrDup("Missing value for metadata of type int.");
    tt->help = tdrpStrDup("Only applies if override_missing_metadata_values is TRUE");
    tt->val_offset = (char *) &missing_metadata_int - &_start_;
    tt->single_val.i = -9999;
    tt++;
    
    // Parameter 'missing_metadata_char'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_metadata_char");
    tt->descr = tdrpStrDup("Missing value for metadata of type char.");
    tt->help = tdrpStrDup("Only applies if override_missing_metadata_values is TRUE");
    tt->val_offset = (char *) &missing_metadata_char - &_start_;
    tt->single_val.i = -128;
    tt++;
    
    // Parameter 'override_missing_field_values'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_missing_field_values");
    tt->descr = tdrpStrDup("Option to override the missing values for field data");
    tt->help = tdrpStrDup("See following parameter options.");
    tt->val_offset = (char *) &override_missing_field_values - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'missing_field_fl64'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("missing_field_fl64");
    tt->descr = tdrpStrDup("Missing value for field data of type 64-bit float.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_fl64 - &_start_;
    tt->single_val.d = -9e+33;
    tt++;
    
    // Parameter 'missing_field_fl32'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("missing_field_fl32");
    tt->descr = tdrpStrDup("Missing value for field data of type 32-bit float.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_fl32 - &_start_;
    tt->single_val.d = -9e+33;
    tt++;
    
    // Parameter 'missing_field_si32'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_field_si32");
    tt->descr = tdrpStrDup("Missing value for field data of type 32-bit integer.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_si32 - &_start_;
    tt->single_val.i = -2147483647;
    tt++;
    
    // Parameter 'missing_field_si16'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_field_si16");
    tt->descr = tdrpStrDup("Missing value for field data of type 16-bit integer.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_si16 - &_start_;
    tt->single_val.i = -232768;
    tt++;
    
    // Parameter 'missing_field_si08'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_field_si08");
    tt->descr = tdrpStrDup("Missing value for field data of type 8-bit integer.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_si08 - &_start_;
    tt->single_val.i = -128;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
