/*********************************************************
 * parameter definitions for RadxPartRain
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * March 2012
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "RadxPartRain reads moments from Radx-supported format files, computes the PID and PRECIP rates and writes out the results to Radx-supported format files.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to register this process with the process mapper (procmap).";
  p_help = "If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.";
} register_with_procmap;

paramdef int {
  p_default = 60;
  p_descr = "Interval for registering with procmap (secs).";
  p_help = "The app will register with procmap at this interval, to update its status. If it does not register within twice this interval, the auto_restart script will restart the app.";
} procmap_register_interval;

commentdef {
  p_header = "THREADING FOR SPEED.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to use multiple compute threads to improve performance.";
  p_help = "The read and write stages occur in the main thread, since netCDF is not thread safe. The compute stage can be multi-threaded to improve performance.";
} use_multiple_threads;

paramdef int {
  p_default = 4;
  p_min = 1;
  p_descr = "The number of compute threads.";
  p_help = "The moments computations are segmented in range, with each thread computing a fraction of the number of gates. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads.";
} n_compute_threads;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = FILELIST;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file.  "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in ARCHIVE mode, at least) MUST contain a "
           "day-directory above the data file -- ./data_file.ext will not "
           "work as a file path, but ./yyyymmdd/data_file.ext will.";
} mode;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

paramdef string {
  p_default = "";
  p_descr = "File name extension.";
  p_help = "If set, only files with this extension will be processed.";
} input_file_search_ext;

paramdef string {
  p_default = "";
  p_descr = "File name sub-string.";
  p_help = "If set, only files with names containing this sub-string will be processed.";
} input_file_search_substr;

commentdef {
  p_header = "READ OPTIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to aggregate sweep files into a volume on read.";
  p_help = "If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.";
} aggregate_sweep_files_on_read;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set the max range for any ray.";
} set_max_range;

paramdef double {
  p_default = 9999;
  p_descr = "Specified maximim range - km.";
  p_help = "Gates beyond this range are removed.";
} max_range_km;

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the number of gates to be constant.";
  p_help = "If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.";
} set_ngates_constant;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set fixed angle limits";
  p_help = "Only use sweeps within the specified fixed angle limits.";
} set_fixed_angle_limits;

paramdef double {
  p_default = 0;
  p_descr = "Lower fixed angle limit - degrees.";
} lower_fixed_angle_limit;

paramdef double {
  p_default = 90;
  p_descr = "Upper fixed angle limit - degrees.";
} upper_fixed_angle_limit;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set sweep number limits";
  p_help = "Only read sweeps within the specified sweep number limits.";
} set_sweep_num_limits;

paramdef int {
  p_default = 0;
  p_descr = "Lower sweep number limit.";
} lower_sweep_num;

paramdef int {
  p_default = 0;
  p_descr = "Upper sweep number limit.";
} upper_sweep_num;

commentdef {
  p_header = "OPTION TO OVERRIDE RADAR LOCATION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} override_radar_location;

paramdef double {
  p_default = -999;
  p_descr = "Radar latitude (deg).";
  p_help = "See override_radar_location.";
} radar_latitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar longitude (deg).";
  p_help = "See override_radar_location.";
} radar_longitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar altitude (meters).";
  p_help = "See override_radar_location.";
} radar_altitude_meters;

commentdef {
  p_header = "SETTING PSEUDO EARTH RADIUS RATIO FOR HEIGHT COMPUTATIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the standard 4/3 earth radius model for refraction.";
  p_help = "If true, the standard 4/3 earth radius will be overridden. The US NWS NEXRAD system uses 1.21 instead of 1.333.";
} override_standard_pseudo_earth_radius;

paramdef double {
  p_default = 1.33333333;
  p_descr = "Ratio for computing the pseudo earth radius for beam height computations.";
  p_help = "For standard refraction this is 4/3. For super refraction it will be less than 4.3, and for sub-refraction it will be greater. NEXRAD uses 1.21.";
} pseudo_earth_radius_ratio;

commentdef {
  p_header = "INPUT FIELD INFORMATION";
  p_text = "Names of fields in the input file. The following fields are required: SNR, DBZ, ZDR, PHIDP and RHOHV. KDP is also required internally, but if KDP is not available it will be computed from PHIDP. LDR is optional, and is used for PID only.";
}

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is SNR data available?";
  p_help = "If not, SNR will be computed from the DBZ field. See 'noise_dbz_at_100km'.";
} SNR_available;

paramdef string {
  p_default = "SNR";
  p_descr = "Field name for SNR.";
  p_help = "Signal-to-noise ratio (dB).";
} SNR_field_name;

paramdef double {
  p_default = 0.0;
  p_descr = "The noise value, represented as dBZ at a range of 100km.";
  p_help = "This is used for computing the SNR from the DBZ field. It is only used if SNR_available is FALSE. The SNR will be computed by range-correcting this value and using it as the noise value.";
} noise_dbz_at_100km;

paramdef string {
  p_default = "DBZ";
  p_descr = "Field name for DBZ.";
  p_help = "Horizontally-polarized reflectivity factor.";
} DBZ_field_name;

paramdef string {
  p_default = "VEL";
  p_descr = "Field name for radial velocity.";
  p_help = "This is used in quality checks.";
} VEL_field_name;

paramdef string {
  p_default = "ZDR";
  p_descr = "Field name for ZDR.";
} ZDR_field_name;

paramdef string {
  p_default = "ZDRM";
  p_descr = "Field name for measured ZDR.";
  p_help = "This is uncorrected (measured) ZDR, which is used in estimation of ZDR bias and in the self-consistency analysis (see below). If ZDRM is not available, set this to the ZDR field name.";
} ZDRM_field_name;

paramdef string {
  p_default = "PHIDP";
  p_descr = "Field name for PHIDP.";
} PHIDP_field_name;

paramdef string {
  p_default = "RHOHV";
  p_descr = "Field name for RHOHV.";
} RHOHV_field_name;

paramdef string {
  p_default = "RHOHV_NNC";
  p_descr = "Field name for RHOHV without noise correction.";
  p_help = "This field is a good quality discriminator since it combines RHOHV and SNR. It is used in estimation of ZDR bias. If it is not available, set this to the RHOHV field.";
} RHOHV_NNC_field_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Is KDP data available?";
  p_help = "If not, KDP will be computed from PHIDP";
} KDP_available;

paramdef string {
  p_default = "KDP";
  p_descr = "Field name for KDP.";
} KDP_field_name;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is LDR data available?";
} LDR_available;

paramdef string {
  p_default = "LDR";
  p_descr = "Field name for LDR.";
} LDR_field_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Is cross-to-cross correlation field available?";
} RHO_VXHX_available;

paramdef string {
  p_default = "";
  p_descr = "Field name for cross-to-cross correlation.";
  p_help = "This is used as a quality-control field for some of the algorithms. Typically it is high in weather and clutter, and low in non-weather echoes.";
} RHO_VXHX_field_name;

commentdef {
  p_header = "COMPUTING KDP";
  p_text = "Parameters for computing KDP. KDP will be computed if KDP_available is FALSE.";
}

typedef enum {
  FIR_LEN_125, FIR_LEN_60, FIR_LEN_40, FIR_LEN_30, FIR_LEN_20, FIR_LEN_10
} fir_filter_len_t;
  
paramdef enum fir_filter_len_t {
  p_default = FIR_LEN_10;
  p_descr = "Filter length for the FIR filter for PHIDP (gates)";
  p_help = "When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.";
} KDP_fir_filter_len;

paramdef int {
  p_default = 2;
  p_descr = "Sets the number of iterations for the initial FIR filter for unfolded PHIDP.";
  p_help = "After unfolding PHIDP, the FIR filter is applied to the unfolded phidp, a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.";
} KDP_n_filt_iterations_unfolded;

paramdef int {
  p_default = 4;
  p_descr = "Sets the number of iterations for the final FIR filter for conditioned PHIDP.";
  p_help = "In order to identify phase shift on backscatter (PSOB), we condition the PHIDP to keep it generally increasing with range. The FIR filter is applied to the conditioned phidp a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.";
} KDP_n_filt_iterations_conditioned;

paramdef boolean {
  p_default = false;
  p_descr = "Perform iterative filtering to locate backscatter phase shift.";
  p_descr = "This is the Hubbert-Bringi method.";
} KDP_use_iterative_filtering;

paramdef double {
  p_default = 4.0;
  p_descr = "Difference threshold for the iterative filtering method.";
  p_help = "The FIR filter is applied successively, KDP_n_filt_iterations_conditioned times. After each iteration the result is checked against the original. If the difference is less than this parameter, the original value at that gate is retained. If the difference exceeds this parameter, the new filtered value is retained.";
} KDP_phidp_difference_threshold;

paramdef int {
  p_default = 9;
  p_descr = "Number of gates over which the phidp mean, sdev and jitter are computed.";
  p_help = "The mean, sdev and jitter of phidp are computed over a consecutive number of gates in range, centered on the current gate of interest. This parameter is the number of gates over which these statistics are computed.";
} KDP_ngates_for_stats;

paramdef double {
  p_default = 20.0;
  p_descr = "Sets the threshold for the standard deviation of phidp in range.";
  p_help = "The sdev of phidp is a good test for valid phidp. The sdev is computed in the circle, so that it takes account of folding if present. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_phidp_sdev_max;

paramdef double {
  p_default = 25.0;
  p_descr = "Sets the threshold for the jitter of phidp in range.";
  p_help = "The jitter of phidp is defined as the mean absolute change in angle between successive phidp measurements in range. It is computed on the circle to take account of folding. If the jitter is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_phidp_jitter_max;

paramdef double {
  p_default = 0.01;
  p_descr = "Sets the min valid KDP value.";
  p_help = "Values less than this are set to 0.";
} KDP_min_valid_abs_kdp;

paramdef boolean {
  p_default = false;
  p_descr = "Check the SNR.";
  p_descr = "This test can help identify regions of good PHIDP.";
} KDP_check_snr;

paramdef double {
  p_default = -6.0;
  p_descr = "Sets the threshold for checking SNR (dB).";
  p_help = "If the SNR drops below this value, KDP will not be computed at this gate.";
} KDP_snr_threshold;

paramdef boolean {
  p_default = true;
  p_descr = "Check the RHOHV.";
  p_descr = "This test can help identify regions of good PHIDP.";
} KDP_check_rhohv;

paramdef double {
  p_default = 0.95;
  p_descr = "Sets the threshold for checking RHOHV.";
  p_help = "If the RHOHV drops below this value, KDP will not be computed at this gate.";
} KDP_rhohv_threshold;

paramdef boolean {
  p_default = false;
  p_descr = "Check the standard deviation of ZDR in range?";
  p_descr = "This test can help identify regions of clutter, and hence noisy PHIDP.";
} KDP_check_zdr_sdev;

paramdef double {
  p_default = 2.0;
  p_descr = "Sets the threshold for the standard deviation of zdr in range.";
  p_help = "The sdev of zdr is a good test for clutter. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_zdr_sdev_max;

paramdef double {
  p_default = 0.25;
  p_descr = "Sets the lower limit of KDP for computing KDP conditioned by self-consistency.";
  p_help = "To compute KDP_SC, we first find the gates over which regular KDP exceeds a minimum threshold (i.e. this parameter). Over this run of gates we compute the PHIDP change from the regular KDP and from KDP_ZZDR. By taking the ratio of sum(KDP) / sum(KDP_ZZDR), and applying that ratio to KDP_ZZDR over these gates, we can compute KDP_SC such that the PHIDP change over these gates is the same for both KDP and KDP_SC.";
} KDP_minimum_for_self_consistency;

paramdef int {
  p_default = 5;
  p_descr = "Sets the length of the median filter when computing KDP_ZZDR.";
  p_help = "The Z and ZDR fields are smoothed with a median filter of this length prior to estimating KDP_ZZDR.";
} KDP_median_filter_len_for_ZZDR;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print debug messages in KDP computation.";
} KDP_debug;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write ray files to debug KDP computation.";
} KDP_write_ray_files;

paramdef string {
  p_default = "/tmp/kdp_ray_files";
  p_descr = "Directory for KDP ray files.";
} KDP_ray_files_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to compute KDP using the BRINGI method.";
} compute_kdp_bringi;

paramdef enum fir_filter_len_t {
  p_default = FIR_LEN_10;
  p_descr = "Filter length for the FIR filter for PHIDP (gates)";
  p_help = "When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.";
} KDP_BRINGI_fir_filter_len;

paramdef double {
  p_default = 4.0;
  p_descr = "Sets the threshold for difference of phidp.";
  p_help = "This is used to test the difference between the unfolded phidp value and the filtered phidp value. If the difference exceeds this value, we use the original value instead of the filtered value. Applies to computation of KDP only";
} KDP_BRINGI_phidp_difference_threshold;

paramdef double {
  p_default = 12.0;
  p_descr = "Sets the threshold for the standard deviation of phidp in range.";
  p_help = "The sdev of phidp is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_BRINGI_phidp_sdev_threshold;

paramdef double {
  p_default = 1.8;
  p_descr = "Sets the threshold for the standard deviation of zdr in range.";
  p_help = "The sdev of zdr is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_BRINGI_zdr_sdev_threshold;

paramdef double {
  p_default = 0.75;
  p_descr = "Sets the threshold for rhohv.";
  p_help = "rhohv is a good test for weather. If rhohv is greater than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_BRINGI_rhohv_threshold;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter PHIDP with median filter.";
  p_help = "The filter is applied in range.";
} KDP_BRINGI_apply_median_filter_to_PHIDP;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for PHIDP - gates.";
  p_help = "See 'appply_median_filter_to_PHIDP'";
} KDP_BRINGI_median_filter_len;

commentdef {
  p_header = "PRECIP-INDUCED ATTENUATION CORRECTION FOR DBZ AND ZDR";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to apply precip attenuation correction for DBZ and ZDR.";
  p_help =
    "The following extra fields will be computed:\n"
    "\tDBZ_ATTEN_CORRECTION - correction in dB\n"
    "\tZDR_ATTEN_CORRECTION - correction in dB\n"
    "\tDBZ_ATTEN_CORRECTED - DBZHC corrected\n"
    "\tZDR_ATTEN_CORRECTED - ZDR corrected\n";
} apply_precip_attenuation_correction;

paramdef boolean {
  p_default = false;
  p_descr = "Option to specify the coefficients and exponents - see below.";
  p_help = "If false, the default coefficients will be determined for the radar wavelength.";
} specify_coefficients_for_attenuation_correction;

paramdef double {
  p_default = 0.017;
  p_descr = "Coefficient for computing DBZ attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} dbz_attenuation_coefficient;

paramdef double {
  p_default = 0.84;
  p_descr = "Exponent for computing DBZ attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} dbz_attenuation_exponent;

paramdef double {
  p_default = 0.003;
  p_descr = "Coefficient for computing ZDR attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} zdr_attenuation_coefficient;

paramdef double {
  p_default = 1.05;
  p_descr = "Exponent for computing ZDR attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} zdr_attenuation_exponent;

commentdef {
  p_header = "COMPUTING PID - HYDROMETEOR PARTICLE ID";
}

paramdef string {
  p_descr = "File path for fuzzy logic thresholds for PID.";
  p_help = "This file contains the thresholds and weights for computing particle ID.";
  p_default = "./s_band_pid_input_steraotables27.input";
} pid_thresholds_file_path;

paramdef double {
  p_default = 3.0;
  p_descr = "Minimum SNR for valid PID.";
  p_help = "If the SNR at a gate is below this, the PID is censored.";
} PID_snr_threshold;

paramdef double {
  p_default = 9999.0;
  p_descr = "Maximum SNR for valid PID.";
  p_help = "If the SNR at a gate is above this value, the PID will be set to SATURATED_SNR = 18.";
} PID_snr_upper_threshold;

paramdef double {
  p_default = 0.5;
  p_descr = "Minimum valid interest value for identifying a particle.";
  p_help = "If the computed interest value is below this, the PID is set to missing.";
} PID_min_valid_interest;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter DBZ with median filter.";
  p_help = "The filter is computed in range.";
} PID_apply_median_filter_to_DBZ;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for DBZ - gates.";
  p_help = "See 'PID_apply_median_filter_to_DBZ'";
} PID_DBZ_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter ZDR with median filter.";
  p_help = "The filter is computed in range.";
} PID_apply_median_filter_to_ZDR;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for ZDR - gates.";
  p_help = "See 'PID_apply_median_filter_to_ZDR'";
} PID_ZDR_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter RHOHV with median filter.";
  p_help = "The filter is computed in range.";
} PID_apply_median_filter_to_RHOHV;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for RHOHV - gates.";
  p_help = "See 'PID_apply_median_filter_to_RHOHV'";
} PID_RHOHV_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter LDR with median filter.";
  p_help = "The filter is computed in range.";
} PID_apply_median_filter_to_LDR;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for LDR - gates.";
  p_help = "See 'PID_apply_median_filter_to_LDR'";
} PID_LDR_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "For PID, option to replace missing LDR values with a specified value.";
  p_help = "When the SNR gets low, LDR is unreliable since there is not sufficient dynamic range to provide an accurate cross-polar power measurement. In these cases, it makes sense to replace LDR with a neutral value, such as 0.0, so that we do not reject gates at which valuable data is available.";
} PID_replace_missing_LDR;

paramdef double {
  p_default = 0.0;
  p_descr = "Value to which LDR will be set if missing.";
} PID_LDR_replacement_value;

paramdef int {
  p_default = 9;
  p_descr = "Number of gates for computing standard deviations.";
  p_help = "This applies to computing the standard deviation of zdr and phidp.";
} PID_ngates_for_sdev;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to output the individual interest fields.";
  p_help = "If TRUE, the interest field for each particle type will be written to the output FMQ, in addition to the list in 'output_fields'.";
} PID_output_particle_interest_fields;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to locate the melting layer.";
  p_help = "If true, the melting layer will be located using the WET_SNOW category. In addition, the ML_INTEREST field will be computed. Otherwise it will be missing. Follows Giangrande et al. - Automatic Designation of the Melting Layer with Polarimitric Prototype of WSR-88D Radar - AMS JAMC, Vol47, 2008.";
} PID_locate_melting_layer;

paramdef double {
  p_default = 25.0;
  p_descr = "Percentile value for estimating the bottom of the melting layer.";
  p_help = "To locate the melting layer limits, we rank the heights of all gates containing WET_SNOW, from bottom to top. This is the percentile value for the bottom of the layer.";
} melting_layer_percentile_for_bottom_limit;

paramdef double {
  p_default = 75.0;
  p_descr = "Percentile value for estimating the top of the melting layer.";
  p_help = "To locate the melting layer limits, we rank the heights of all gates containing WET_SNOW, from bottom to top. This is the percentile value for the top of the layer.";
} melting_layer_percentile_for_top_limit;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to save melting layer properties to spdb.";
  p_help = "If true, the melting layer properties will be saved to SPDB using XML encoding. See 'melting_layer_spdb_output_url'";
} melting_layer_write_results_to_spdb;

paramdef string {
  p_default = "/tmp/spdb/melting_layer";
  p_descr = "URL for writing melting layer results to SPDB XML.";
  p_help = "For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir";
} melting_layer_spdb_output_url;

commentdef {
  p_header = "SOUNDING INPUT FOR PID temperatures - OPTIONAL";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to read sounding data from SPDB.";
  p_help = "If TRUE, the program will read the closest (in time) available sounding from an SPDB data base. The temperature profile from the sounding will be used to override the temperature profile in the PID thresholds config file";
} use_soundings_from_spdb;

paramdef string {
  p_descr = "SPDB URL for sounding data.";
  p_default = "spdb/soundings";
} sounding_spdb_url;

paramdef int {
  p_default = 86400;
  p_descr = "Time margin for retrieving sounding, in secs.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).";
} sounding_search_time_margin_secs;

paramdef string {
  p_default = "";
  p_descr = "Name of sounding location.";
  p_help = "If set, we request a profile just for that sounding. If empty, all soundings in the data base are considered valid.";
} sounding_location_name;

typedef struct {
  double min_val;
  double max_val;
} data_range_t;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that pressure covers the required range.";
  p_help = "If TRUE, we will check that pressure range in the sounding meets or exceeds the min and max specified."; 
} sounding_check_pressure_range;

paramdef struct data_range_t {
  p_default = { min_val = 300, max_val = 950 };
  p_descr = "Required pressure range for sounding to be valid (hPa)";
  p_help = "This is used to provide a quality check on the sounding. If the pressure data does not fully cover this range, the sounding is rejected and we look back for the next available one.";
} sounding_required_pressure_range_hpa;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that height covers the required range.";
  p_help = "If TRUE, we will check that height range in the sounding meets or exceeds the min and max specified."; 
} sounding_check_height_range;

paramdef struct data_range_t {
  p_default = { min_val = 500, max_val = 15000 };
  p_descr = "Required height range for sounding to be valid (m)";
  p_help = "This is used to provide a quality check on the sounding. If the height data does not fully cover this range, the sounding is rejected and we look back for the next available one.";
} sounding_required_height_range_m;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that pressure decreases monotonically.";
  p_help = "If TRUE, we will check that pressure decreases monotonically. If not, the sounding is rejected and we look back for the next available one."; 
} sounding_check_pressure_monotonically_decreasing;

paramdef double {
  p_default = 0.0;
  p_descr = "Correction to the heights read in with the sounding (km).";
  p_help = "This correction is ADDED to the heights read in. So if the freezing level seems low, the correction should be positive. If the freezing level appears high, it should be negative.";
} sounding_height_correction_km;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use wet bulb temperature profile.";
  p_help = "If TRUE, we use the wet bulb temperature profile from the sounding instead of the dry bulb. This is thought to more closely track the temperature of melting ice.";
} sounding_use_wet_bulb_temp;

commentdef {
  p_header = "SMOOTHING OUTPUT PID";
  p_text = "This section gives you the option of smoothing the output pid field in range by applying a median filter.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter PID with median filter.";
  p_help = "The filter is computed in range, and affects both rain rate and PID.";
} apply_median_filter_to_PID;

paramdef int {
  p_default = 7;
  p_descr = "Length of median filter for PID - gates.";
  p_help = "See 'appply_median_filter_to_PID'";
} PID_median_filter_len;

commentdef {
  p_header = "COMPUTING PRECIP RATE";
}

paramdef double {
  p_default = 3.0;
  p_descr = "Minimum SNR for valid PRECIP.";
  p_help = "If the SNR at a gate is below this, the PRECIP is censored.";
} PRECIP_snr_threshold;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter DBZ with median filter.";
  p_help = "The filter is computed in rang..";
} PRECIP_apply_median_filter_to_DBZ;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for DBZ - gates.";
  p_help = "See 'PRECIP_apply_median_filter_to_DBZ'";
} PRECIP_DBZ_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter ZDR with median filter.";
  p_help = "The filter is computed in range.";
} PRECIP_apply_median_filter_to_ZDR;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for ZDR - gates.";
  p_help = "See 'PID_PRECIP_apply_median_filter_to_ZDR'";
} PRECIP_ZDR_median_filter_len;

paramdef double {
  p_default = 0.1;
  p_descr = "Minimum valid precip rate (mm/hr).";
  p_help = "If any computed rate is less than this value, it is set to 0.";
} PRECIP_min_valid_rate;

paramdef double {
  p_default = 250.0;
  p_descr = "Maximum valid precip rate (mm/hr).";
  p_help = "If any computed rate exceeds this value, it is set to this max.";
} PRECIP_max_valid_rate;

paramdef double {
  p_default = 53.0;
  p_descr = "Maximum valid dbz for computing precip rate.";
  p_help = "If any dbz exceeds this value, it is set to this max before use. This helps mitigate large DBZ values in hail.";
} PRECIP_max_valid_dbz;

paramdef double {
  p_default = -10.0;
  p_max = 0.0;
  p_descr = "Correction to be applied in brightband before computing precip rate.";
  p_help = "This should be negative.";
} PRECIP_brightband_dbz_correction;

commentdef {
  p_header = "PRECIP COEFFICIENTS";
  p_text = "Coefficients for the precip equations.";
}

commentdef {
  p_header = "PRECIP_RATE_ZH";
  p_text = "RATE_ZH = zh_aa * (ZH ** zh_bb)";
}

paramdef double {
  p_default = 0.017;
  p_descr = "Coefficient for PRECIP_RATE_ZH.";
} zh_aa;

paramdef double {
  p_default = 0.714;
  p_descr = "Exponent for PRECIP_RATE_ZH.";
} zh_bb;

commentdef {
  p_header = "PRECIP_RATE_SNOW_ZH";
  p_text = "RATE_SNOW_ZH = zh_aa_snow * (ZH ** zh_bb_snow)";
}

paramdef double {
  p_default = 0.0365;
  p_descr = "Coefficient for PRECIP_RATE_ZH in SNOW.";
} zh_aa_snow;

paramdef double {
  p_default = 0.625;
  p_descr = "Exponent for PRECIP_RATE_ZH in SNOW.";
} zh_bb_snow;

commentdef {
  p_header = "PRECIP_RATE_Z_ZDR";
  p_text = "RATE_Z_ZDR = zzdr_aa * (ZH ** zzdr_bb) * (ZDR ** zzdr_cc)";
}

paramdef double {
  p_default = 0.00684;
  p_descr = "Coefficient for PRECIP_RATE_ZZDR.";
} zzdr_aa;

paramdef double {
  p_default = 1.0;
  p_descr = "ZH exponent for PRECIP_RATE_ZZDR.";
} zzdr_bb;

paramdef double {
  p_default = -4.86;
  p_descr = "ZDR exponent for PRECIP_RATE_ZZDR.";
} zzdr_cc;

commentdef {
  p_header = "PRECIP_RATE_KDP";
  p_text = "RATE_KDP = sign(KDP) * kdp_aa * (|KDP| ** kdp_bb)";
}

paramdef double {
  p_default = 40.6;
  p_descr = "Coefficient for PRECIP_RATE_KDP.";
} kdp_aa;

paramdef double {
  p_default = 0.866;
  p_descr = "Exponent for PRECIP_RATE_KDP.";
} kdp_bb;

commentdef {
  p_header = "PRECIP_RATE_KDP_ZDR";
  p_text = "RATE_KDP_ZDR = sign(KDP) * kdpzdr_aa * (|KDP| ** kdpzdr_bb) * (ZDR ** kdpzdr_cc)";
}

paramdef double {
  p_default = 136;
  p_descr = "Coefficient for PRECIP_RATE_KDP_ZDR.";
} kdpzdr_aa;

paramdef double {
  p_default = 0.968;
  p_descr = "KDP exponent for PRECIP_RATE_KDP_ZDR.";
} kdpzdr_bb;

paramdef double {
  p_default = -2.86;
  p_descr = "ZDR exponent for PRECIP_RATE_KDP_ZDR.";
} kdpzdr_cc;

commentdef {
  p_header = "PRECIP RATE BASED ON PID";
  p_text =
    "The PID-based rate is a wieghted-average of the rates for the various precip types.\n"
    "The weights are derived from the interest values for each PID particle type.\n"
    "\t  RATE_LIGHT_RAIN = RATE_ZH\n"
    "\t  RATE_MOD_RAIN = RATE_Z_ZDR\n"
    "\t  RATE_SNOW = RATE_ZH_SNOW\n"
    "\t  RATE_MIXED = RATE_ZH_MIXED\n\n"
    "\t  if (kdp > threshold && RATE_KDP is valid)\n"
    "\t    RATE_HVY_RAIN = RATE_KDP\n"
    "\t    RATE_HAIL = RATE_KDP\n"
    "\t  else\n"
    "\t    RATE_HVY_RAIN = RATE_ZZDR\n"
    "\t    RATE_HAIL = RATE_ZZDR\n\n"
    "\t  RATE = 0\n"
    "\t  RATE += RATE_LIGHT_RAIN * WT_LIGHT_RAIN\n"
    "\t  RATE += RATE_MOD_RAIN * WT_MOD_RAIN\n"
    "\t  RATE += RATE_HVY_RAIN * WT_HVY_RAIN\n"
    "\t  RATE += RATE_SNOW * WT_SNOW\n"
    "\t  RATE += RATE_MIXED * WT_MIXED\n"
    "\t  RATE += RATE_HAIL * WT_HAIL\n";
}
paramdef double {
  p_default = 0.30;
  p_descr = "Units are deg/km.";
  p_help = "See notes above for details on use.";
} pid_rate_kdp_threshold;

commentdef {
  p_header = "PRECIP_RATE_HYBRID";
  p_text = "The HYBRID rate is based on the PID and the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Hybrid et al, JTech, Vol 26, 2009, 2107 - 2122.\n\n"
    "\t  if hail or heavy rain\n"
    "\t    if KDP > threhsold and rateKDP is valid\n"
    "\t      use RATE_KDP\n"
    "\t    else\n"
    "\t      use RATE_KDP\n"
    "\t  else if snow/ice\n"
    "\t    use RATE_ZH_SNOW\n"
    "\t  else if mixed precip\n"
    "\t    use RATE_ZH_MIXED\n"
    "\t  else if rain or SLD\n"
    "\t    if dBZ > theshold and KDP > threhsold\n"
    "\t      if rateKDP is valid\n"
    "\t        use RATE_KDP\n"
    "\t      else\n"
    "\t        use RATE_ZZDR\n"
    "\t    else\n"
    "\t      if ZDR >= threshold\n"
    "\t        use RATE_Z\n"
    "\t      else\n"
    "\t        use RATE_ZZDR\n";
}

paramdef double {
  p_default = 40;
  p_descr = "Units are dBZ.";
  p_help = "See notes above for details on use.";
} hybrid_dbz_threshold;

paramdef double {
  p_default = 0.30;
  p_descr = "Units are deg/km.";
  p_help = "See notes above for details on use.";
} hybrid_kdp_threshold;

paramdef double {
  p_default = 0.50;
  p_descr = "Units are dB.";
  p_help = "See notes above for details on use.";
} hybrid_zdr_threshold;

commentdef {
  p_header = "PRECIP_RATE_HIDRO";
  p_text = "The HIDRO rate is based on the CSU-HIDRO algorithm. See 'A New Dual-Polarization Radar Rainfall Algorithm: Application to Colorado Precipition Events', Cifelli et al, JTech, Vol 28, 2011, 352 - 364. NOTE - this algorithm is generally only applied to liquid and mixed-phase precip, so you need to run PID for this to work as intended.\n"
    "\t  For ice:\n"
    "\t    RATE_HIDRO = MISSING\n"
    "\t  For hail or mixed:\n"
    "\t    if KDP >= threshold and rateKdp is valid\n"
    "\t      RATE_HIDRO = RATE_KDP\n"
    "\t    else\n"
    "\t      RATE_HIDRO = RATE_ZR\n"
    "\t  For rain or sld:\n"
    "\t    if KDP >= threshold and DBZ >= threhold\n"
    "\t      if ZDR >= threshold and rateKdpZdr is valid\n"
    "\t        RATE_HIDRO = RATE_KDPZDR\n"
    "\t      else if rateKdp is valid\n"
    "\t        RATE_HIDRO = RATE_KDP\n"
    "\t      else\n"
    "\t        RATE_HIDRO = RATE_ZZDR\n"
    "\t    else\n"
    "\t      if ZDR >= threshold\n"
    "\t        RATE_HIDRO = RATE_Z\n"
    "\t      else\n"
    "\t        RATE_HIDRO = RATE_ZZDR\n";
}

paramdef double {
  p_default = 38;
  p_descr = "Units are dBZ.";
  p_help = "See notes above for details on use.";
} hidro_dbz_threshold;

paramdef double {
  p_default = 0.3;
  p_descr = "Units are deg/km.";
  p_help = "See notes above for details on use.";
} hidro_kdp_threshold;

paramdef double {
  p_default = 0.5;
  p_descr = "Units are dB.";
  p_help = "See notes above for details on use.";
} hidro_zdr_threshold;

commentdef {
  p_header = "PRECIP_RATE_BRINGI";
  p_text = "The BRINGI rate is based on the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Bringi et al, JTech, Vol 26, 2009, 2107 - 2122.\n"
    "\t  if HAIL or RAIN/HAIL mixture and rateKdp is valid\n"
    "\t    RATE_BRINGI = RATE_KDP\n"
    "\t  else if dBZ > theshold and KDP > threhsold and rateKdp is valid\n"
    "\t    RATE_BRINGI = RATE_KDP\n"
    "\t  else\n"
    "\t    if ZDR >= threshold\n"
    "\t      RATE_BRINGI = RATE_ZZDR\n"
    "\t    else\n"
    "\t      RATE_BRINGI = RATE_Z\n";
}

paramdef double {
  p_default = 40;
  p_descr = "Units are dBZ.";
  p_help = "See notes above for details on use.";
} bringi_dbz_threshold;

paramdef double {
  p_default = 0.15;
  p_descr = "Units are deg/km.";
  p_help = "See notes above for details on use.";
} bringi_kdp_threshold;

paramdef double {
  p_default = 0.1;
  p_descr = "Units are dB.";
  p_help = "See notes above for details on use.";
} bringi_zdr_threshold;

commentdef {
  p_header = "ESTIMATING ZDR BIAS";
  p_text = "ZDR bias can be estimated using data from regions with irregular ice and bragg scattering, with various constraints applied. See below.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to estimate ZDR bias from the irregular ice phase regions.";
  p_help = "If true, we will try to estimate ZDR bias from returns in regions with irregular ice and snow.";
} estimate_zdr_bias_in_ice;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to estimate ZDR bias from the bragg regions.";
  p_help = "If true, we will try to estimate ZDR bias from bragg scattering returns. Generally this is only relevant at S band.";
} estimate_zdr_bias_in_bragg;

paramdef double {
  p_default = 0.5;
  p_descr = "Maximum ZDR for estimating ZDR bias.";
  p_help = "We set this to a value somewhat greater than the estimated max ZDR calibration error. If we get values outside this range we reject those gates.";
} zdr_bias_max_abs_zdr;

paramdef double {
  p_default = 0.5;
  p_descr = "Maximum ZDRM for estimating ZDR bias.";
  p_help = "We set this to a value somewhat greater than the estimated max ZDR calibration error. If we get values outside this range we reject those gates.";
} zdr_bias_max_abs_zdrm;

paramdef double {
  p_default = 0.98;
  p_descr = "Minimim RHOHV for estimating ZDR bias.";
  p_help = "If RHOHV_NNC is avaiable, it is used. If not, the noise-corrected RHOHV is used.";
} zdr_bias_min_rhohv_nnc;

paramdef double {
  p_default = 1.5;
  p_descr = "Minimum absolute velocity for estimating ZDR bias.";
  p_help = "Setting a minimum vel helps to reduce the influence of side-lobe clutter, especially in Bragg.";
} zdr_bias_min_abs_vel;

paramdef double {
  p_default = 0.5;
  p_descr = "Max KDP for computing ZDR bias.";
  p_help = "KDP must be well behaved, and not high, in regions where we compute ZDR bias.";
} zdr_bias_max_abs_kdp;

paramdef double {
  p_default = 10.0;
  p_descr = "Maximum PHIDP accumulation along the ray (deg).";
  p_help = "Significant phase shift can lead to non-zero ZDR values at more distant gates. It is good to screen out these gates.";
} zdr_bias_max_phidp_accum;

commentdef {
  p_header = "ZDR BIAS IN ICE";
}

paramdef int {
  p_default = { 10, 13 };
  p_descr = "List of PID types in which ZDR should be close to 0 dB in ice.";
  p_help = "Generally this is set to 10 = irregular ice, and 13 = snow.";
} zdr_bias_ice_pid_types[];

paramdef double {
  p_default = 5.0;
  p_descr = "Minimum range for estimating ZDR bias in ice.";
} zdr_bias_ice_min_range_km;

paramdef double {
  p_default = 120.0;
  p_descr = "Maximum range for estimating ZDR bias in ice.";
} zdr_bias_ice_max_range_km;

paramdef double {
  p_default = 0.0;
  p_descr = "Minimum DBZ for estimating ZDR bias in ice.";
} zdr_bias_ice_min_dbz;

paramdef double {
  p_default = 30.0;
  p_descr = "Maximum DBZ for estimating ZDR bias in ice.";
} zdr_bias_ice_max_dbz;

paramdef double {
  p_default = 10.0;
  p_descr = "Minimum SNR for estimating ZDR bias in ice (dB).";
} zdr_bias_ice_min_snr;

paramdef double {
  p_default = 50.0;
  p_descr = "Maximum SNR for estimating ZDR bias in ice (dB).";
} zdr_bias_ice_max_snr;

paramdef double {
  p_default = 0.0;
  p_descr = "Minimum RHO VXHX estimating ZDR bias in ice (dB).";
  p_descr = "Only applies if RHO_VXHX_available is TRUE.";
} zdr_bias_ice_min_rho_vxhx;

paramdef double {
  p_default = 0.2;
  p_descr = "Maximum RHO VXHX estimating ZDR bias in ice (dB).";
  p_descr = "Only applies if RHO_VXHX_available is TRUE.";
} zdr_bias_ice_max_rho_vxhx;

paramdef double {
  p_default = -50.0;
  p_descr = "Minimum temperature for computing ZDR bias in ice (deg C).";
  p_help = "We want to ensure that we are in the normal ice phase.";
} zdr_bias_ice_min_temp_c;

paramdef double {
  p_default = -5.0;
  p_descr = "Maximum temperature for computing ZDR bias in ice (deg C).";
  p_help = "We want to ensure that we are well within the ice phase.";
} zdr_bias_ice_max_temp_c;

paramdef double {
  p_default = 0.0;
  p_descr = "Min elevation angle for ZDR bias in ice (deg).";
  p_help = "Only elevation angles at or above this will be considered.";
} zdr_bias_ice_min_elevation_deg;

paramdef double {
  p_default = 20.0;
  p_descr = "Max elevation angle for ZDR bias in ice (deg).";
  p_help = "Only elevation angles at or below this will be considered.";
} zdr_bias_ice_max_elevation_deg;

paramdef int {
  p_default = 5;
  p_descr = "Minimum consectutive gates with the correct conditions for ZDR bias in ice.";
  p_help = "We want to ensure that we are solidly in a region suitable for estimating ZDR bias. We eliminate noisy data by requiring that the conditions persist over a certain number of gates.";
} zdr_bias_ice_min_gate_run;

paramdef int {
  p_default = 1000;
  p_descr = "Minimum number of points in a volume for valid zdr stats in ice.";
  p_help = "For the results to be valid, we need a certain number of valid results for computing the statistics.";
} zdr_bias_ice_min_npoints_valid;

paramdef double {
  p_default = { 17.5, 20, 22.5, 25, 27.5, 30 };
  p_descr = "Percentiles to write to SPDB output.";
} zdr_bias_ice_percentiles[];

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to save the ZDR values in ice to file.";
  p_help = "If true, we will write the ZDR values in the ice regions to a file, in ASCII.";
} save_ice_zdr_to_file;

paramdef string {
  p_default = "/tmp/zdr_in_ice";
  p_descr = "Directory for saving ZDR in ice data to files.";
  p_help = "See write_ice_zdr_to_file. Two files will be written for each volume, one for uncorrected ZDRM and one for corrected ZDR. Also, global files will be appended to.";
} ice_zdr_save_dir;

commentdef {
  p_header = "ZDR BIAS IN BRAGG";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to check PID in identifying bragg.";
  p_help = "If true, we check that the PID at a gate is one of those listed in the array 'zdr_bias_bragg_pid_types'.";
} zdr_bias_bragg_check_pid;

paramdef int {
  p_default = { 1 };
  p_descr = "List of PID types in which ZDR should be close to 0 dB in Bragg.";
  p_help = "Generally this is set to 1 = cloud drops.";
} zdr_bias_bragg_pid_types[];

paramdef double {
  p_default = 4.0;
  p_descr = "Minimum range for estimating ZDR bias in Bragg.";
} zdr_bias_bragg_min_range_km;

paramdef double {
  p_default = 40.0;
  p_descr = "Maximum range for estimating ZDR bias in Bragg.";
} zdr_bias_bragg_max_range_km;

paramdef double {
  p_default = -40.0;
  p_descr = "Minimum DBZ for estimating ZDR bias in Bragg.";
} zdr_bias_bragg_min_dbz;

paramdef double {
  p_default = 0.0;
  p_descr = "Maximum DBZ for estimating ZDR bias in Bragg.";
} zdr_bias_bragg_max_dbz;

paramdef double {
  p_default = 0.0;
  p_descr = "Minimum SNR for estimating ZDR bias in Bragg (dB).";
} zdr_bias_bragg_min_snr;

paramdef double {
  p_default = 50.0;
  p_descr = "Maximum SNR for estimating ZDR bias in Bragg (dB).";
} zdr_bias_bragg_max_snr;

paramdef double {
  p_default = 0.0;
  p_descr = "Minimum RHO VXHX estimating ZDR bias in bragg (dB).";
  p_descr = "Only applies if RHO_VXHX_available is TRUE.";
} zdr_bias_bragg_min_rho_vxhx;

paramdef double {
  p_default = 0.2;
  p_descr = "Maximum RHO VXHX estimating ZDR bias in bragg (dB).";
  p_descr = "Only applies if RHO_VXHX_available is TRUE.";
} zdr_bias_bragg_max_rho_vxhx;

paramdef double {
  p_default = -30.0;
  p_descr = "Minimum temperature for computing ZDR bias (deg C).";
  p_help = "We want to ensure that we are in the normal bragg region.";
} zdr_bias_bragg_min_temp_c;

paramdef double {
  p_default = 20.0;
  p_descr = "Maximum temperature for computing ZDR bias (deg C).";
  p_help = "We want to ensure that we are well within the bragg region.";
} zdr_bias_bragg_max_temp_c;

paramdef double {
  p_default = 0.0;
  p_descr = "Min elevation angle for ZDR bias in ice (deg).";
  p_help = "Only elevation angles at or above this will be considered.";
} zdr_bias_bragg_min_elevation_deg;

paramdef double {
  p_default = 30.0;
  p_descr = "Max elevation angle for ZDR bias in ice (deg).";
  p_help = "Only elevation angles at or below this will be considered.";
} zdr_bias_bragg_max_elevation_deg;

paramdef int {
  p_default = 3;
  p_descr = "Minimum consectutive gates with the correct conditions for ZDR bias in Bragg.";
  p_help = "We want to ensure that we are solidly in a region suitable for estimating ZDR bias. We eliminate noisy data by requiring that the conditions persist over a certain number of gates.";
} zdr_bias_bragg_min_gate_run;

paramdef int {
  p_default = 400;
  p_descr = "Minimum number of points in a volume for valid zdr stats in bragg.";
  p_help = "For the results to be valid, we need a certain number of valid results for computing the statistics.";
} zdr_bias_bragg_min_npoints_valid;

paramdef double {
  p_default = { 25, 27.5, 30, 32, 33, 35, 40 };
  p_descr = "Percentiles to write to SPDB output.";
} zdr_bias_bragg_percentiles[];

commentdef {
  p_header = "WRITING ZDR BIAS RESULTS";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out ZDR results to SPDB.";
  p_help = "The results will be written in XML, stored in SPDB. The data can then be retrieved for plotting or other purposes.";
} zdr_bias_write_results_to_spdb;

paramdef string {
  p_default = "/tmp/spdb/zdr_bias";
  p_descr = "URL for writing zdr bias results to SPDB XML.";
  p_help = "For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir";
} zdr_bias_spdb_output_url;

commentdef {
  p_header = "ESTIMATING Z BIAS USING SELF-CONSISTENCY";
  p_text = "The Z bias can be estimated using data from the rain region, i.e. below the freezing level. We use the self-consistency technique to compute z bias based on phidp phase shift in rain. See Vivekanandan, J., G. Zhang, S. M. Ellis, D. Rajopadhyaya, and S. K. Avery, Radar reflectivity calibration using differential propagation phase measurement, Radio Sci., 38(3), 8049, doi:10.1029/2002RS002676, 2003. NOTE: defaults are for S-band.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to estimate Z bias from self-consistency in the rain region.";
  p_help = "If true, we will try to estimate Z bias using the self-consistency technique.";
} estimate_z_bias_using_self_consistency;

paramdef int {
  p_default = { 1, 2, 3, 4, 5 };
  p_descr = "List of PID types in which ZDR should be close to 0 dB.";
  p_help = "Generally this is set to 2 = drizzle, 3 = light rain, 4 = moderate rain and 5 = heavy rain.";
} self_consistency_pid_types[];

paramdef double {
  p_default = 10.0;
  p_descr = "Minimum SNR for valid self_consistency analysis (dB).";
  p_descr = "Ensure we have good signal.";
} self_consistency_min_snr;

paramdef double {
  p_default = 75.0;
  p_descr = "Maximum SNR for valid self_consistency analysis (dB).";
  p_help = "Ensure we are not in a saturated environment.";
} self_consistency_max_snr;

paramdef double {
  p_default = 25.0;
  p_descr = "Minimum DBZ for valid self_consistency analysis.";
} self_consistency_min_dbz;

paramdef double {
  p_default = 60.0;
  p_descr = "Maximum DBZ for valid self_consistency analysis.";
} self_consistency_max_dbz;

paramdef double {
  p_default = 0.0;
  p_descr = "Minimum ZDR for valid self_consistency analysis.";
} self_consistency_min_zdr;

paramdef double {
  p_default = 3.0;
  p_descr = "Maximum ZDR for valid self_consistency analysis.";
} self_consistency_max_zdr;

paramdef double {
  p_default = 0.98;
  p_descr = "Minimum RHOHV for valid self_consistency analysis.";
} self_consistency_min_rhohv;

paramdef double {
  p_default = -0.1;
  p_descr = "Minimum KDP for valid self_consistency analysis.";
} self_consistency_min_kdp;

paramdef double {
  p_default = 35;
  p_descr = "Maximum DBZ at the limits of the valid runs.";
  p_descr = "We do not want heavy rain at the limits of the analysis. Keeping DBZ below this threshold will take care of this problem. Once the runs are identified, we trim the ends until the DBZ falls below the threshold.";
} self_consistency_max_dbz_at_run_limits;

paramdef double {
  p_default = 0.5;
  p_descr = "Maximum KDP at the limits of the valid runs.";
  p_descr = "We do not want PHIDP to be changing significantly at the limits of the analysis. Keeping KDP below this threshold will take care of this problem. Once the runs are identified, we trim the ends until the KDP falls below the threshold.";
} self_consistency_max_kdp_at_run_limits;

paramdef double {
  p_default = 0.45;
  p_descr = "Min elevation angle for self-consistency analysis.";
  p_help = "We want to avoid contamination with ground echo etc.";
} self_consistency_min_elevation_deg;

paramdef double {
  p_default = 3;
  p_descr = "Minimum temperature for self-consistency gates (deg C).";
  p_help = "We want to ensure that we are in the rain phase.";
} self_consistency_min_temp_c;

paramdef double {
  p_default = 100.0;
  p_descr = "Maximum range for self-consistency analysis.";
  p_help = "Sometimes data at longer ranges can have problems, such as with partial beam filling.";
} self_consistency_max_range_km;

paramdef double {
  p_default = 2.5;
  p_descr = "Minimum run distance without any gaps (km).";
  p_help = "We want to ensure that we are solidly in a region suitable for self_consistency analysis. We eliminate noisy data by by requiring that the correct conditions persist over a given minimum distance. This minimum run distance cannot have any gaps.";
} self_consistency_min_no_gap_distance_km;

paramdef double {
  p_default = 20.0;
  p_descr = "Minimum combined distance for analysis (km).";
  p_help = "We combine the initial no-gap runs into a longer analysis run, provided there is only a small gap between them. We perform the analysis over this combined run. See also 'self_consistency_max_gate_gap'";
} self_consistency_min_combined_distance_km;

paramdef int {
  p_default = 1;
  p_descr = "Maximum length of gap between no-gap runs (gates).";
  p_help = "This is the longest acceptable gap when we combine the no-gap runs into our analysis run. Gaps longer than this indicate that the data is not of high enough quality for the analysis.";
} self_consistency_max_gate_gap;

paramdef double {
  p_default = 20.0;
  p_descr = "Minimum PHIDP accumulation along the ray (deg).";
  p_help = "We need significant phase shift for this method.";
} self_consistency_min_phidp_accum;

paramdef double {
  p_default = 0.0;
  p_descr = "Correction to be applied to DBZ.";
  p_help = "This allows us to test the sensitivity of the method to DBZ errors.";
} self_consistency_dbz_correction;

paramdef double {
  p_default = 0.0;
  p_descr = "Correction to be applied to ZDRM (dB).";
  p_help = "We need a reasonably accurate ZDR value for the self-consistency method to work properly. This correction is applied to the ZDRM field before using it for self-consistency.";
} self_consistency_zdrm_correction;

paramdef double {
  p_default = 10.0;
  p_descr = "Max phase shift on back-scatter long the ray (deg).";
  p_help = "We are looking for phase shift due to propagation rather than from backscatter.";
} self_consistency_max_phase_shift_on_backscatter;

typedef enum {
  SELF_CON_ZDR_POWER_LAW_METHOD,
  SELF_CON_ZDR_POLYNOMIAL_METHOD
} self_con_method_t;

paramdef enum self_con_method_t {
  p_default = SELF_CON_ZDR_POWER_LAW_METHOD;
  p_descr = "Method used to estimate KDP in self consistency method.";
  p_help = "The ZDR power law method was proposed by Vivekanandan, J., G. Zhang, S. M. Ellis, D. Rajopadhyaya, and S. K. Avery, Radar reflectivity calibration using differential propagation phase measurement, Radio Sci., 38(3), 8049, doi:10.1029/2002RS002676, 2003. The Polynomial method was proposed by Qing Cao, Michael Knight, Alexander Ryzhkov and Pengfei Zhang, 2016: A Novel Physical Consistency-Based Calibration Tool for Polarimetric Weather Radar. Paper 691, AMS Annual Conference, New Orleans, 2016.";
} self_consistency_method;

paramdef double {
  p_default = 1.0;
  p_descr = "Z exponent for estimating KDP from Z and ZDR.";
  p_help = "SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.";
} self_consistency_kdp_z_expon;

paramdef double {
  p_default = -2.05;
  p_descr = "ZDR exponent for estimating KDP from Z and ZDR.";
  p_help = "SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.";
} self_consistency_kdp_zdr_expon;

paramdef double {
  p_default = 3.32e-5;
  p_descr = "Coefficient for estimating KDP from Z and ZDR.";
  p_help = "SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.";
} self_consistency_kdp_coefficient;

paramdef double {
  p_default = 0.02;
  p_descr = "Coefficient for estimating Z attenutation from KDP.";
  p_help = "SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.";
} self_consistency_z_atten_coefficient;

paramdef double {
  p_default = 0.0038;
  p_descr = "Coefficient for estimating ZDR attenutation from KDP.";
  p_help = "SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.";
} self_consistency_zdr_atten_coefficient;

paramdef double {
  p_default = 3.19;
  p_descr = "Polynomial coefficent a0. C-band: 6.7; S-band: 3.19";
  p_help = "SELF_CON_ZDR_POLYNOMIAL_METHOD. See equation 4: Qing et al.";
} self_consistency_polynomial_a0;

paramdef double {
  p_default = -2.16;
  p_descr = "Polynomial coefficent a1. C-band: -4.42; S-band: -2.16";
  p_help = "SELF_CON_ZDR_POLYNOMIAL_METHOD. See equation 4: Qing et al.";
} self_consistency_polynomial_a1;

paramdef double {
  p_default = 0.795;
  p_descr = "Polynomial coefficent a2. C-band: 2.16; S-band: 0.795";
  p_help = "SELF_CON_ZDR_POLYNOMIAL_METHOD. See equation 4: Qing et al.";
} self_consistency_polynomial_a2;

paramdef double {
  p_default = -0.119;
  p_descr = "Polynomial coefficent a3. C-band: -0.404; S-band: -0.119";
  p_help = "SELF_CON_ZDR_POLYNOMIAL_METHOD. See equation 4: Qing et al.";
} self_consistency_polynomial_a3;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out Z bias results to SPDB.";
  p_help = "The results will be written in XML, stored in SPDB. The data can then be retrieved for plotting or other purposes.";
} self_consistency_write_results_to_spdb;

paramdef string {
  p_default = "/tmp/spdb/self_consistency";
  p_descr = "URL for writing z bias results to SPDB XML.";
  p_help = "For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir";
} self_consistency_spdb_output_url;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option for self-consistency code";
  p_help = "Set the level of debugging you want.";
} self_consistency_debug;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write run files to debug self_consistency computation."; 
  p_help = "The self-consistency method works by identifying runs along rays, which have a significant phipd change, and the correct conditions such as all rain, good rhohv etc. We can optionally save the run data to files so that we can then plot them for debugging purposes.";
} self_consistency_write_run_files;

paramdef string {
  p_default = "/tmp/self_consistency_run_files";
  p_descr = "Directory for self_consistency run files.";
} self_consistency_run_files_dir;

commentdef {
  p_header = "RETRIEVING SITE TEMPERATURE FROM SPDB";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to read site temperature from SPDB.";
  p_help = "The temperature closest to the radar volume time will be read in.";
} read_site_temp_from_spdb;

paramdef string {
  p_default = "spdbp:://hail:0:pecan/spdb/spol/temp";
  p_descr = "URL for temperatures from SPDB.";
} site_temp_spdb_url;

paramdef string {
  p_default = "SPOL";
  p_descr = "Station name for site temperature.";
} site_temp_station_name;

paramdef int {
  p_default = 3600;
  p_descr = "Search margin when finding site temp data (secs).";
  p_help = "We search for the temperature closest in time to the radar volume. This is the search margin on either side of the volume time.";
} site_temp_search_margin_secs;

commentdef {
  p_header = "SPECIFYING FIELD NAMES AND OUTPUT ENCODING";
}

typedef enum {
  
  SNR,
  DBZ,
  VEL,
  ZDR,
  ZDRM,
  LDR,
  RHOHV,
  RHOHV_NNC,
  PHIDP,
  KDP,
  KDP_ZZDR,
  KDP_COND,
  KDP_BRINGI,
  PSOB,
  ZDP,

  PRECIP_RATE_ZH,
  PRECIP_RATE_ZH_SNOW,
  PRECIP_RATE_Z_ZDR,
  PRECIP_RATE_KDP,
  PRECIP_RATE_KDP_ZDR,
  PRECIP_RATE_HYBRID,
  PRECIP_RATE_PID,
  PRECIP_RATE_HIDRO,
  PRECIP_RATE_BRINGI,

  DBZ_ATTEN_CORRECTION,
  ZDR_ATTEN_CORRECTION,
  DBZ_ATTEN_CORRECTED,
  ZDR_ATTEN_CORRECTED,

  DBZ_FOR_KDP,
  ZDR_FOR_KDP,
  RHOHV_FOR_KDP,
  SNR_FOR_KDP,
  ZDR_SDEV_FOR_KDP,
  VALID_FLAG_FOR_KDP,

  PHIDP_FOR_KDP,
  PHIDP_MEAN_FOR_KDP,
  PHIDP_MEAN_UNFOLD_FOR_KDP,
  PHIDP_SDEV_FOR_KDP,
  PHIDP_JITTER_FOR_KDP,
  PHIDP_UNFOLD_FOR_KDP,
  PHIDP_FILT_FOR_KDP,
  PHIDP_COND_FOR_KDP,
  PHIDP_COND_FILT_FOR_KDP,

  DBZ_FOR_RATE,
  ZDR_FOR_RATE,
  KDP_FOR_RATE,

  PARTICLE_ID,
  PID_INTEREST,

  PARTICLE_ID2,
  PID_INTEREST2,

  DBZ_FOR_PID,
  ZDR_FOR_PID,
  LDR_FOR_PID,
  PHIDP_FOR_PID,
  RHOHV_FOR_PID,
  KDP_FOR_PID,
  SDZDR_FOR_PID,
  SDPHIDP_FOR_PID,
  TEMP_FOR_PID,

  ZDRM_IN_ICE,
  ZDRM_IN_BRAGG,
  ZDR_IN_ICE,
  ZDR_IN_BRAGG,

  ZDR_FLAG_IN_ICE,
  ZDR_FLAG_IN_BRAGG,

  ML_INTEREST,

  ELEVATION_ANGLE,
  RANGE,
  BEAM_HEIGHT

} output_field_id_t;

typedef enum {
  OUTPUT_ENCODING_FL32,
  OUTPUT_ENCODING_INT32,
  OUTPUT_ENCODING_INT16,
  OUTPUT_ENCODING_INT08
} output_encoding_t;

typedef enum {
  OUTPUT_SCALING_DYNAMIC,
  OUTPUT_SCALING_SPECIFIED
} output_scaling_t;

typedef struct {
  output_field_id_t id;
  string name; 
  string long_name; 
  string standard_name; 
  string units;
  output_encoding_t encoding;
  output_scaling_t scaling;
  double scale;
  double offset;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    {
      id = SNR,
      name = "SNR",
      long_name = "signal_to_noise_ratio_db",
      standard_name = "signal_to_noise_ratio",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = DBZ,
      name = "DBZ",
      long_name = "radar_reflectivity",
      standard_name = "equivalent_reflectivity_factor",
      units = "dBZ",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = ZDR,
      name = "ZDR",
      long_name = "calibrated_log_differential_reflectivity",
      standard_name = "log_differential_reflectivity",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = LDR,
      name = "LDR",
      long_name = "linear_depolarization_ratio_h_channel",
      standard_name = "log_linear_depolarization_ratio_h",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = RHOHV,
      name = "RHOHV",
      long_name = "cross_correlation_ratio",
      standard_name = "cross_correlation_ratio_hv",
      units = "",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
    ,
    {
      id = PHIDP,
      name = "PHIDP",
      long_name = "differential_phase",
      standard_name = "differential_phase_hv",
      units = "deg",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = KDP,
      name = "KDP",
      long_name = "specific_differential_phase",
      standard_name = "specific_differential_phase_hv",
      units = "deg/km",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
    ,
    {
      id = PSOB,
      name = "PSOB",
      long_name = "phase_shift_on_backscatter",
      standard_name = "phase_shift_on_backscatter",
      units = "deg",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
    ,
    {
      id = PARTICLE_ID,
      name = "PID",
      long_name = "particle_id",
      standard_name = "hydrometeor_type",
      units = "",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_SPECIFIED,
      scale = 1,
      offset = 0
    }
    ,
    {
      id = TEMP_FOR_PID,
      name = "TEMP_FOR_PID",
      long_name = "temperature_for_computing_pid",
      standard_name = "temperature",
      units = "C",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_SPECIFIED,
      scale = 0.01,
      offset = 0
    }
    ,
    {
      id = PRECIP_RATE_ZH,
      name = "RATE_ZH",
      long_name = "precip_rate_from_z",
      standard_name = "precip_rate_from_z",
      units = "mm/hr",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_SPECIFIED,
      scale = 0.01,
      offset = 0
    }
    ,
    {
      id = PRECIP_RATE_Z_ZDR,
      name = "RATE_Z_ZDR",
      long_name = "precip_rate_from_z_and_zdr",
      standard_name = "precip_rate_from_z_and_zdr",
      units = "mm/hr",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_SPECIFIED,
      scale = 0.01,
      offset = 0
    }
    ,
    {
      id = PRECIP_RATE_KDP,
      name = "RATE_KDP",
      long_name = "precip_rate_from_kdp",
      standard_name = "precip_rate_from_kdp",
      units = "mm/hr",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_SPECIFIED,
      scale = 0.01,
      offset = 0
    }
    ,
    {
      id = PRECIP_RATE_KDP_ZDR,
      name = "RATE_KDP_ZDR",
      long_name = "precip_rate_from_kdp_and_zdr",
      standard_name = "precip_rate_from_kdp_and_zdr",
      units = "mm/hr",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_SPECIFIED,
      scale = 0.01,
      offset = 0
    }
    ,
    {
      id = PRECIP_RATE_HYBRID,
      name = "RATE_HYBRID",
      long_name = "precip_rate_hybrid_of_zh_zzdr_kdp_and_kdpzdr",
      standard_name = "precip_rate_hybrid_of_zh_zzdr_kdp_and_kdpzdr",
      units = "mm/hr",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_SPECIFIED,
      scale = 0.01,
      offset = 0
    }
    ,
    {
      id = PRECIP_RATE_PID,
      name = "RATE_PID",
      long_name = "precip_rate_based_on_pid",
      standard_name = "precip_rate_based_on_pid",
      units = "mm/hr",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_SPECIFIED,
      scale = 0.01,
      offset = 0
    }
  };
  p_descr = "Indicate which fields should be written to the output file.";
  p_help = "Choose the ID from the list. The name and units can be set however the user prefers. The output_encoding and output_scaling apply to CfRadial output only. If the output_scaling is DYNAMIC then the scale and offset are computed using the dynamic range of the data. If the output_scaling is SPECIFIED, then the specified scale and offset are used.";
} output_fields[];

commentdef {
  p_header = "SPECIFYING COPY-THROUGH FIELDS";
  p_text = "These fields are copied unchanged from the input file to the output file. This is a way of consolidating the output data set.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to copy input fields unchanged to the output file.";
} copy_input_fields_to_output;

typedef struct {
  string input_name; 
  string output_name;
  boolean censor_non_precip;
} copy_field_t;

paramdef struct copy_field_t {
  p_default = {
    {
      input_name = "VEL",
      output_name = "VEL",
      censor_non_precip = FALSE
    }
  };
  p_descr = "These fields are copied through unchanged to the output file.";
  p_help = "You can change the name of the field on output.";
} copy_fields[];

commentdef {
  p_header = "OUTPUT FILE FORMAT";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_NEXRAD,
  OUTPUT_FORMAT_UF,
  OUTPUT_FORMAT_MDV_RADIAL
} output_format_t;

paramdef enum output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL;
  p_descr = "Format for the output files.";
} output_format;

typedef enum {
  CLASSIC, NC64BIT, NETCDF4, NETCDF4_CLASSIC
} netcdf_style_t;

paramdef enum netcdf_style_t {
  p_default = NETCDF4;
  p_descr = "NetCDF style - if output_format is CFRADIAL";
  p_help = "netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls";
} netcdf_style;

commentdef {
  p_header = "OUTPUT BYTE-SWAPPING and COMPRESSION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to leave data in native byte order.";
  p_help = "If false, data will be byte-swapped as appropriate on output.";
} output_native_byte_order;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress data fields on output.";
  p_help = "Applies to netCDF and Dorade. UF does not support compression.";
} output_compressed;

paramdef int {
  p_default = 4;
  p_descr = "Compression level for output, if compressed.";
  p_help = "Applies to netCDF only. Dorade compression is run-length encoding, and has not options..";
} compression_level;

commentdef {
  p_header = "VOLUME OUTPUT";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to write the results to a volume output file.";
  p_help = "Normally this will be set to true. However, when running analyses such as self-consistency or zdr bias, it may be preferable to suppress writing the output file, in which case this should be set to false.";
} write_output_volume;

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY,
  SPECIFY_FILE_NAME
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.";
} output_filename_mode;

paramdef string {
  p_default = "cfradial.test.nc";
  p_descr = "Name of output file.";
  p_help = "Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.";
} output_filename;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out individual sweeps if appropriate.";
  p_help = "If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.";
} write_individual_sweeps;

