/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxPartRain
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("RadxPartRain reads moments from Radx-supported format files, computes the PID and PRECIP rates and writes out the results to Radx-supported format files.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register this process with the process mapper (procmap).");
    tt->help = tdrpStrDup("If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'procmap_register_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("procmap_register_interval");
    tt->descr = tdrpStrDup("Interval for registering with procmap (secs).");
    tt->help = tdrpStrDup("The app will register with procmap at this interval, to update its status. If it does not register within twice this interval, the auto_restart script will restart the app.");
    tt->val_offset = (char *) &procmap_register_interval - &_start_;
    tt->single_val.i = 60;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("THREADING FOR SPEED.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_multiple_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_multiple_threads");
    tt->descr = tdrpStrDup("Option to use multiple compute threads to improve performance.");
    tt->help = tdrpStrDup("The read and write stages occur in the main thread, since netCDF is not thread safe. The compute stage can be multi-threaded to improve performance.");
    tt->val_offset = (char *) &use_multiple_threads - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'n_compute_threads'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_compute_threads");
    tt->descr = tdrpStrDup("The number of compute threads.");
    tt->help = tdrpStrDup("The moments computations are segmented in range, with each thread computing a fraction of the number of gates. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads.");
    tt->val_offset = (char *) &n_compute_threads - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file.  In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = FILELIST;
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'input_file_search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_file_search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &input_file_search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_file_search_substr'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_file_search_substr");
    tt->descr = tdrpStrDup("File name sub-string.");
    tt->help = tdrpStrDup("If set, only files with names containing this sub-string will be processed.");
    tt->val_offset = (char *) &input_file_search_substr - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("READ OPTIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'aggregate_sweep_files_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("aggregate_sweep_files_on_read");
    tt->descr = tdrpStrDup("Option to aggregate sweep files into a volume on read.");
    tt->help = tdrpStrDup("If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.");
    tt->val_offset = (char *) &aggregate_sweep_files_on_read - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_max_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_max_range");
    tt->descr = tdrpStrDup("Option to set the max range for any ray.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_max_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km");
    tt->descr = tdrpStrDup("Specified maximim range - km.");
    tt->help = tdrpStrDup("Gates beyond this range are removed.");
    tt->val_offset = (char *) &max_range_km - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'set_ngates_constant'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_ngates_constant");
    tt->descr = tdrpStrDup("Option to force the number of gates to be constant.");
    tt->help = tdrpStrDup("If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.");
    tt->val_offset = (char *) &set_ngates_constant - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_fixed_angle_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_fixed_angle_limits");
    tt->descr = tdrpStrDup("Option to set fixed angle limits");
    tt->help = tdrpStrDup("Only use sweeps within the specified fixed angle limits.");
    tt->val_offset = (char *) &set_fixed_angle_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("lower_fixed_angle_limit");
    tt->descr = tdrpStrDup("Lower fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_fixed_angle_limit - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'upper_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("upper_fixed_angle_limit");
    tt->descr = tdrpStrDup("Upper fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_fixed_angle_limit - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'set_sweep_num_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_sweep_num_limits");
    tt->descr = tdrpStrDup("Option to set sweep number limits");
    tt->help = tdrpStrDup("Only read sweeps within the specified sweep number limits.");
    tt->val_offset = (char *) &set_sweep_num_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("lower_sweep_num");
    tt->descr = tdrpStrDup("Lower sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'upper_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("upper_sweep_num");
    tt->descr = tdrpStrDup("Upper sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE RADAR LOCATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_radar_location'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_location");
    tt->descr = tdrpStrDup("Option to override the radar location.");
    tt->help = tdrpStrDup("If true, the location in this file will be used. If not, the location in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_location - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_latitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_latitude_deg");
    tt->descr = tdrpStrDup("Radar latitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_latitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_longitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_longitude_deg");
    tt->descr = tdrpStrDup("Radar longitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_longitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_altitude_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_altitude_meters");
    tt->descr = tdrpStrDup("Radar altitude (meters).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_altitude_meters - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("SETTING PSEUDO EARTH RADIUS RATIO FOR HEIGHT COMPUTATIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_standard_pseudo_earth_radius'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_standard_pseudo_earth_radius");
    tt->descr = tdrpStrDup("Option to override the standard 4/3 earth radius model for refraction.");
    tt->help = tdrpStrDup("If true, the standard 4/3 earth radius will be overridden. The US NWS NEXRAD system uses 1.21 instead of 1.333.");
    tt->val_offset = (char *) &override_standard_pseudo_earth_radius - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'pseudo_earth_radius_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("pseudo_earth_radius_ratio");
    tt->descr = tdrpStrDup("Ratio for computing the pseudo earth radius for beam height computations.");
    tt->help = tdrpStrDup("For standard refraction this is 4/3. For super refraction it will be less than 4.3, and for sub-refraction it will be greater. NEXRAD uses 1.21.");
    tt->val_offset = (char *) &pseudo_earth_radius_ratio - &_start_;
    tt->single_val.d = 1.33333;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("INPUT FIELD INFORMATION");
    tt->comment_text = tdrpStrDup("Names of fields in the input file. The following fields are required: SNR, DBZ, ZDR, PHIDP and RHOHV. KDP is also required internally, but if KDP is not available it will be computed from PHIDP. LDR is optional, and is used for PID only.");
    tt++;
    
    // Parameter 'SNR_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("SNR_available");
    tt->descr = tdrpStrDup("Is SNR data available?");
    tt->help = tdrpStrDup("If not, SNR will be computed from the DBZ field. See 'noise_dbz_at_100km'.");
    tt->val_offset = (char *) &SNR_available - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'SNR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("SNR_field_name");
    tt->descr = tdrpStrDup("Field name for SNR.");
    tt->help = tdrpStrDup("Signal-to-noise ratio (dB).");
    tt->val_offset = (char *) &SNR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("SNR");
    tt++;
    
    // Parameter 'noise_dbz_at_100km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noise_dbz_at_100km");
    tt->descr = tdrpStrDup("The noise value, represented as dBZ at a range of 100km.");
    tt->help = tdrpStrDup("This is used for computing the SNR from the DBZ field. It is only used if SNR_available is FALSE. The SNR will be computed by range-correcting this value and using it as the noise value.");
    tt->val_offset = (char *) &noise_dbz_at_100km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'DBZ_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("DBZ_field_name");
    tt->descr = tdrpStrDup("Field name for DBZ.");
    tt->help = tdrpStrDup("Horizontally-polarized reflectivity factor.");
    tt->val_offset = (char *) &DBZ_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'VEL_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("VEL_field_name");
    tt->descr = tdrpStrDup("Field name for radial velocity.");
    tt->help = tdrpStrDup("This is used in quality checks.");
    tt->val_offset = (char *) &VEL_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'ZDR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ZDR_field_name");
    tt->descr = tdrpStrDup("Field name for ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ZDR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("ZDR");
    tt++;
    
    // Parameter 'ZDRM_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ZDRM_field_name");
    tt->descr = tdrpStrDup("Field name for measured ZDR.");
    tt->help = tdrpStrDup("This is uncorrected (measured) ZDR, which is used in estimation of ZDR bias and in the self-consistency analysis (see below). If ZDRM is not available, set this to the ZDR field name.");
    tt->val_offset = (char *) &ZDRM_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("ZDRM");
    tt++;
    
    // Parameter 'PHIDP_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("PHIDP_field_name");
    tt->descr = tdrpStrDup("Field name for PHIDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &PHIDP_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("PHIDP");
    tt++;
    
    // Parameter 'RHOHV_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("RHOHV_field_name");
    tt->descr = tdrpStrDup("Field name for RHOHV.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RHOHV_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("RHOHV");
    tt++;
    
    // Parameter 'RHOHV_NNC_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("RHOHV_NNC_field_name");
    tt->descr = tdrpStrDup("Field name for RHOHV without noise correction.");
    tt->help = tdrpStrDup("This field is a good quality discriminator since it combines RHOHV and SNR. It is used in estimation of ZDR bias. If it is not available, set this to the RHOHV field.");
    tt->val_offset = (char *) &RHOHV_NNC_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("RHOHV_NNC");
    tt++;
    
    // Parameter 'KDP_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_available");
    tt->descr = tdrpStrDup("Is KDP data available?");
    tt->help = tdrpStrDup("If not, KDP will be computed from PHIDP");
    tt->val_offset = (char *) &KDP_available - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("KDP_field_name");
    tt->descr = tdrpStrDup("Field name for KDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("KDP");
    tt++;
    
    // Parameter 'LDR_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("LDR_available");
    tt->descr = tdrpStrDup("Is LDR data available?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &LDR_available - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'LDR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("LDR_field_name");
    tt->descr = tdrpStrDup("Field name for LDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &LDR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("LDR");
    tt++;
    
    // Parameter 'RHO_VXHX_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("RHO_VXHX_available");
    tt->descr = tdrpStrDup("Is cross-to-cross correlation field available?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RHO_VXHX_available - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'RHO_VXHX_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("RHO_VXHX_field_name");
    tt->descr = tdrpStrDup("Field name for cross-to-cross correlation.");
    tt->help = tdrpStrDup("This is used as a quality-control field for some of the algorithms. Typically it is high in weather and clutter, and low in non-weather echoes.");
    tt->val_offset = (char *) &RHO_VXHX_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("COMPUTING KDP");
    tt->comment_text = tdrpStrDup("Parameters for computing KDP. KDP will be computed if KDP_available is FALSE.");
    tt++;
    
    // Parameter 'KDP_fir_filter_len'
    // ctype is '_fir_filter_len_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("KDP_fir_filter_len");
    tt->descr = tdrpStrDup("Filter length for the FIR filter for PHIDP (gates)");
    tt->help = tdrpStrDup("When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.");
    tt->val_offset = (char *) &KDP_fir_filter_len - &_start_;
    tt->enum_def.name = tdrpStrDup("fir_filter_len_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FIR_LEN_125");
      tt->enum_def.fields[0].val = FIR_LEN_125;
      tt->enum_def.fields[1].name = tdrpStrDup("FIR_LEN_60");
      tt->enum_def.fields[1].val = FIR_LEN_60;
      tt->enum_def.fields[2].name = tdrpStrDup("FIR_LEN_40");
      tt->enum_def.fields[2].val = FIR_LEN_40;
      tt->enum_def.fields[3].name = tdrpStrDup("FIR_LEN_30");
      tt->enum_def.fields[3].val = FIR_LEN_30;
      tt->enum_def.fields[4].name = tdrpStrDup("FIR_LEN_20");
      tt->enum_def.fields[4].val = FIR_LEN_20;
      tt->enum_def.fields[5].name = tdrpStrDup("FIR_LEN_10");
      tt->enum_def.fields[5].val = FIR_LEN_10;
    tt->single_val.e = FIR_LEN_10;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_unfolded'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_unfolded");
    tt->descr = tdrpStrDup("Sets the number of iterations for the initial FIR filter for unfolded PHIDP.");
    tt->help = tdrpStrDup("After unfolding PHIDP, the FIR filter is applied to the unfolded phidp, a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_unfolded - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_conditioned'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_conditioned");
    tt->descr = tdrpStrDup("Sets the number of iterations for the final FIR filter for conditioned PHIDP.");
    tt->help = tdrpStrDup("In order to identify phase shift on backscatter (PSOB), we condition the PHIDP to keep it generally increasing with range. The FIR filter is applied to the conditioned phidp a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_conditioned - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'KDP_use_iterative_filtering'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_use_iterative_filtering");
    tt->descr = tdrpStrDup("Perform iterative filtering to locate backscatter phase shift.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_use_iterative_filtering - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_phidp_difference_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_difference_threshold");
    tt->descr = tdrpStrDup("Difference threshold for the iterative filtering method.");
    tt->help = tdrpStrDup("The FIR filter is applied successively, KDP_n_filt_iterations_conditioned times. After each iteration the result is checked against the original. If the difference is less than this parameter, the original value at that gate is retained. If the difference exceeds this parameter, the new filtered value is retained.");
    tt->val_offset = (char *) &KDP_phidp_difference_threshold - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'KDP_ngates_for_stats'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_ngates_for_stats");
    tt->descr = tdrpStrDup("Number of gates over which the phidp mean, sdev and jitter are computed.");
    tt->help = tdrpStrDup("The mean, sdev and jitter of phidp are computed over a consecutive number of gates in range, centered on the current gate of interest. This parameter is the number of gates over which these statistics are computed.");
    tt->val_offset = (char *) &KDP_ngates_for_stats - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'KDP_phidp_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of phidp in range.");
    tt->help = tdrpStrDup("The sdev of phidp is a good test for valid phidp. The sdev is computed in the circle, so that it takes account of folding if present. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_sdev_max - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'KDP_phidp_jitter_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_jitter_max");
    tt->descr = tdrpStrDup("Sets the threshold for the jitter of phidp in range.");
    tt->help = tdrpStrDup("The jitter of phidp is defined as the mean absolute change in angle between successive phidp measurements in range. It is computed on the circle to take account of folding. If the jitter is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_jitter_max - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'KDP_min_valid_abs_kdp'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_min_valid_abs_kdp");
    tt->descr = tdrpStrDup("Sets the min valid KDP value.");
    tt->help = tdrpStrDup("Values less than this are set to 0.");
    tt->val_offset = (char *) &KDP_min_valid_abs_kdp - &_start_;
    tt->single_val.d = 0.01;
    tt++;
    
    // Parameter 'KDP_check_snr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_snr");
    tt->descr = tdrpStrDup("Check the SNR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_snr - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_snr_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking SNR (dB).");
    tt->help = tdrpStrDup("If the SNR drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_snr_threshold - &_start_;
    tt->single_val.d = -6;
    tt++;
    
    // Parameter 'KDP_check_rhohv'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_rhohv");
    tt->descr = tdrpStrDup("Check the RHOHV.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_rhohv - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_rhohv_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_rhohv_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking RHOHV.");
    tt->help = tdrpStrDup("If the RHOHV drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_rhohv_threshold - &_start_;
    tt->single_val.d = 0.95;
    tt++;
    
    // Parameter 'KDP_check_zdr_sdev'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_zdr_sdev");
    tt->descr = tdrpStrDup("Check the standard deviation of ZDR in range?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_zdr_sdev - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_zdr_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_zdr_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of zdr in range.");
    tt->help = tdrpStrDup("The sdev of zdr is a good test for clutter. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_zdr_sdev_max - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'KDP_threshold_for_ZZDR'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_threshold_for_ZZDR");
    tt->descr = tdrpStrDup("Sets the threshold for computing conditional KDP from Z and ZDR.");
    tt->help = tdrpStrDup("We can estimate KDP from Z and ZDR - we call this KDP_ZZDR. We can then compute the conditioned KDP - we call this KDP_COND. To compute KDP_COND, we first find the gates over which regular KDP exceeds this threshold. Over this run of gates we compute the PHIDP change from the regular KDP and from KDP_ZZDR. By taking the ratio of sum(KDP) / sum(KDP_ZZDR), and applying that ratio to KDP_ZZDR over these gates, we can compute KDP_COND such that the PHIDP change is the same for both KDP and KDP_COND.");
    tt->val_offset = (char *) &KDP_threshold_for_ZZDR - &_start_;
    tt->single_val.d = 0.25;
    tt++;
    
    // Parameter 'KDP_median_filter_len_for_ZZDR'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_median_filter_len_for_ZZDR");
    tt->descr = tdrpStrDup("Sets the length of the median filter when computing KDP_ZZDR.");
    tt->help = tdrpStrDup("The Z and ZDR fields are smoothed with a median filter of this length prior to estimating KDP_ZZDR.");
    tt->val_offset = (char *) &KDP_median_filter_len_for_ZZDR - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'KDP_debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_debug");
    tt->descr = tdrpStrDup("Option to print debug messages in KDP computation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_write_ray_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_write_ray_files");
    tt->descr = tdrpStrDup("Option to write ray files to debug KDP computation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_write_ray_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_ray_files_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("KDP_ray_files_dir");
    tt->descr = tdrpStrDup("Directory for KDP ray files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_ray_files_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/kdp_ray_files");
    tt++;
    
    // Parameter 'compute_kdp_bringi'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_kdp_bringi");
    tt->descr = tdrpStrDup("Option to compute KDP using the BRINGI method.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &compute_kdp_bringi - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_BRINGI_fir_filter_len'
    // ctype is '_fir_filter_len_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("KDP_BRINGI_fir_filter_len");
    tt->descr = tdrpStrDup("Filter length for the FIR filter for PHIDP (gates)");
    tt->help = tdrpStrDup("When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.");
    tt->val_offset = (char *) &KDP_BRINGI_fir_filter_len - &_start_;
    tt->enum_def.name = tdrpStrDup("fir_filter_len_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FIR_LEN_125");
      tt->enum_def.fields[0].val = FIR_LEN_125;
      tt->enum_def.fields[1].name = tdrpStrDup("FIR_LEN_60");
      tt->enum_def.fields[1].val = FIR_LEN_60;
      tt->enum_def.fields[2].name = tdrpStrDup("FIR_LEN_40");
      tt->enum_def.fields[2].val = FIR_LEN_40;
      tt->enum_def.fields[3].name = tdrpStrDup("FIR_LEN_30");
      tt->enum_def.fields[3].val = FIR_LEN_30;
      tt->enum_def.fields[4].name = tdrpStrDup("FIR_LEN_20");
      tt->enum_def.fields[4].val = FIR_LEN_20;
      tt->enum_def.fields[5].name = tdrpStrDup("FIR_LEN_10");
      tt->enum_def.fields[5].val = FIR_LEN_10;
    tt->single_val.e = FIR_LEN_10;
    tt++;
    
    // Parameter 'KDP_BRINGI_phidp_difference_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_BRINGI_phidp_difference_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for difference of phidp.");
    tt->help = tdrpStrDup("This is used to test the difference between the unfolded phidp value and the filtered phidp value. If the difference exceeds this value, we use the original value instead of the filtered value. Applies to computation of KDP only");
    tt->val_offset = (char *) &KDP_BRINGI_phidp_difference_threshold - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'KDP_BRINGI_phidp_sdev_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_BRINGI_phidp_sdev_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of phidp in range.");
    tt->help = tdrpStrDup("The sdev of phidp is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_BRINGI_phidp_sdev_threshold - &_start_;
    tt->single_val.d = 12;
    tt++;
    
    // Parameter 'KDP_BRINGI_zdr_sdev_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_BRINGI_zdr_sdev_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of zdr in range.");
    tt->help = tdrpStrDup("The sdev of zdr is a good test for weather. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_BRINGI_zdr_sdev_threshold - &_start_;
    tt->single_val.d = 1.8;
    tt++;
    
    // Parameter 'KDP_BRINGI_rhohv_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_BRINGI_rhohv_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for rhohv.");
    tt->help = tdrpStrDup("rhohv is a good test for weather. If rhohv is greater than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_BRINGI_rhohv_threshold - &_start_;
    tt->single_val.d = 0.75;
    tt++;
    
    // Parameter 'KDP_BRINGI_apply_median_filter_to_PHIDP'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_BRINGI_apply_median_filter_to_PHIDP");
    tt->descr = tdrpStrDup("Option to filter PHIDP with median filter.");
    tt->help = tdrpStrDup("The filter is applied in range.");
    tt->val_offset = (char *) &KDP_BRINGI_apply_median_filter_to_PHIDP - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_BRINGI_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_BRINGI_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for PHIDP - gates.");
    tt->help = tdrpStrDup("See 'appply_median_filter_to_PHIDP'");
    tt->val_offset = (char *) &KDP_BRINGI_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("PRECIP-INDUCED ATTENUATION CORRECTION FOR DBZ AND ZDR");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_precip_attenuation_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_precip_attenuation_correction");
    tt->descr = tdrpStrDup("Option to apply precip attenuation correction for DBZ and ZDR.");
    tt->help = tdrpStrDup("The following extra fields will be computed:\n\tDBZ_ATTEN_CORRECTION - correction in dB\n\tZDR_ATTEN_CORRECTION - correction in dB\n\tDBZ_ATTEN_CORRECTED - DBZHC corrected\n\tZDR_ATTEN_CORRECTED - ZDR corrected\n");
    tt->val_offset = (char *) &apply_precip_attenuation_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'specify_coefficients_for_attenuation_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_coefficients_for_attenuation_correction");
    tt->descr = tdrpStrDup("Option to specify the coefficients and exponents - see below.");
    tt->help = tdrpStrDup("If false, the default coefficients will be determined for the radar wavelength.");
    tt->val_offset = (char *) &specify_coefficients_for_attenuation_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'dbz_attenuation_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_attenuation_coefficient");
    tt->descr = tdrpStrDup("Coefficient for computing DBZ attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &dbz_attenuation_coefficient - &_start_;
    tt->single_val.d = 0.017;
    tt++;
    
    // Parameter 'dbz_attenuation_exponent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_attenuation_exponent");
    tt->descr = tdrpStrDup("Exponent for computing DBZ attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &dbz_attenuation_exponent - &_start_;
    tt->single_val.d = 0.84;
    tt++;
    
    // Parameter 'zdr_attenuation_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_attenuation_coefficient");
    tt->descr = tdrpStrDup("Coefficient for computing ZDR attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &zdr_attenuation_coefficient - &_start_;
    tt->single_val.d = 0.003;
    tt++;
    
    // Parameter 'zdr_attenuation_exponent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_attenuation_exponent");
    tt->descr = tdrpStrDup("Exponent for computing ZDR attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &zdr_attenuation_exponent - &_start_;
    tt->single_val.d = 1.05;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("COMPUTING PID - HYDROMETEOR PARTICLE ID");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'pid_thresholds_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("pid_thresholds_file_path");
    tt->descr = tdrpStrDup("File path for fuzzy logic thresholds for PID.");
    tt->help = tdrpStrDup("This file contains the thresholds and weights for computing particle ID.");
    tt->val_offset = (char *) &pid_thresholds_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./s_band_pid_input_steraotables27.input");
    tt++;
    
    // Parameter 'PID_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_snr_threshold");
    tt->descr = tdrpStrDup("Minimum SNR for valid PID.");
    tt->help = tdrpStrDup("If the SNR at a gate is below this, the PID is censored.");
    tt->val_offset = (char *) &PID_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'PID_snr_upper_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_snr_upper_threshold");
    tt->descr = tdrpStrDup("Maximum SNR for valid PID.");
    tt->help = tdrpStrDup("If the SNR at a gate is above this value, the PID will be set to SATURATED_SNR = 18.");
    tt->val_offset = (char *) &PID_snr_upper_threshold - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'PID_min_valid_interest'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_min_valid_interest");
    tt->descr = tdrpStrDup("Minimum valid interest value for identifying a particle.");
    tt->help = tdrpStrDup("If the computed interest value is below this, the PID is set to missing.");
    tt->val_offset = (char *) &PID_min_valid_interest - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_DBZ'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_DBZ");
    tt->descr = tdrpStrDup("Option to filter DBZ with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_DBZ - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_DBZ_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_DBZ_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for DBZ - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_DBZ'");
    tt->val_offset = (char *) &PID_DBZ_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_ZDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_ZDR");
    tt->descr = tdrpStrDup("Option to filter ZDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_ZDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_ZDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_ZDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for ZDR - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_ZDR'");
    tt->val_offset = (char *) &PID_ZDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_RHOHV'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_RHOHV");
    tt->descr = tdrpStrDup("Option to filter RHOHV with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_RHOHV - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_RHOHV_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_RHOHV_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for RHOHV - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_RHOHV'");
    tt->val_offset = (char *) &PID_RHOHV_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_LDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_LDR");
    tt->descr = tdrpStrDup("Option to filter LDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_LDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_LDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_LDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for LDR - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_LDR'");
    tt->val_offset = (char *) &PID_LDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_replace_missing_LDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_replace_missing_LDR");
    tt->descr = tdrpStrDup("For PID, option to replace missing LDR values with a specified value.");
    tt->help = tdrpStrDup("When the SNR gets low, LDR is unreliable since there is not sufficient dynamic range to provide an accurate cross-polar power measurement. In these cases, it makes sense to replace LDR with a neutral value, such as 0.0, so that we do not reject gates at which valuable data is available.");
    tt->val_offset = (char *) &PID_replace_missing_LDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_LDR_replacement_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_LDR_replacement_value");
    tt->descr = tdrpStrDup("Value to which LDR will be set if missing.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &PID_LDR_replacement_value - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'PID_ngates_for_sdev'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_ngates_for_sdev");
    tt->descr = tdrpStrDup("Number of gates for computing standard deviations.");
    tt->help = tdrpStrDup("This applies to computing the standard deviation of zdr and phidp.");
    tt->val_offset = (char *) &PID_ngates_for_sdev - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'PID_output_particle_interest_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_output_particle_interest_fields");
    tt->descr = tdrpStrDup("Option to output the individual interest fields.");
    tt->help = tdrpStrDup("If TRUE, the interest field for each particle type will be written to the output FMQ, in addition to the list in 'output_fields'.");
    tt->val_offset = (char *) &PID_output_particle_interest_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_locate_melting_layer'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_locate_melting_layer");
    tt->descr = tdrpStrDup("Option to locate the melting layer.");
    tt->help = tdrpStrDup("If true, the melting layer will be located using the WET_SNOW category. In addition, the ML_INTEREST field will be computed. Otherwise it will be missing. Follows Giangrande et al. - Automatic Designation of the Melting Layer with Polarimitric Prototype of WSR-88D Radar - AMS JAMC, Vol47, 2008.");
    tt->val_offset = (char *) &PID_locate_melting_layer - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'melting_layer_percentile_for_bottom_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("melting_layer_percentile_for_bottom_limit");
    tt->descr = tdrpStrDup("Percentile value for estimating the bottom of the melting layer.");
    tt->help = tdrpStrDup("To locate the melting layer limits, we rank the heights of all gates containing WET_SNOW, from bottom to top. This is the percentile value for the bottom of the layer.");
    tt->val_offset = (char *) &melting_layer_percentile_for_bottom_limit - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'melting_layer_percentile_for_top_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("melting_layer_percentile_for_top_limit");
    tt->descr = tdrpStrDup("Percentile value for estimating the top of the melting layer.");
    tt->help = tdrpStrDup("To locate the melting layer limits, we rank the heights of all gates containing WET_SNOW, from bottom to top. This is the percentile value for the top of the layer.");
    tt->val_offset = (char *) &melting_layer_percentile_for_top_limit - &_start_;
    tt->single_val.d = 75;
    tt++;
    
    // Parameter 'melting_layer_write_results_to_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("melting_layer_write_results_to_spdb");
    tt->descr = tdrpStrDup("Option to save melting layer properties to spdb.");
    tt->help = tdrpStrDup("If true, the melting layer properties will be saved to SPDB using XML encoding. See 'melting_layer_spdb_output_url'");
    tt->val_offset = (char *) &melting_layer_write_results_to_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'melting_layer_spdb_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("melting_layer_spdb_output_url");
    tt->descr = tdrpStrDup("URL for writing melting layer results to SPDB XML.");
    tt->help = tdrpStrDup("For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir");
    tt->val_offset = (char *) &melting_layer_spdb_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/spdb/melting_layer");
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("SOUNDING INPUT FOR PID temperatures - OPTIONAL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_soundings_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_soundings_from_spdb");
    tt->descr = tdrpStrDup("Option to read sounding data from SPDB.");
    tt->help = tdrpStrDup("If TRUE, the program will read the closest (in time) available sounding from an SPDB data base. The temperature profile from the sounding will be used to override the temperature profile in the PID thresholds config file");
    tt->val_offset = (char *) &use_soundings_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sounding_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_spdb_url");
    tt->descr = tdrpStrDup("SPDB URL for sounding data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sounding_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/soundings");
    tt++;
    
    // Parameter 'sounding_search_time_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sounding_search_time_margin_secs");
    tt->descr = tdrpStrDup("Time margin for retrieving sounding, in secs.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &sounding_search_time_margin_secs - &_start_;
    tt->single_val.i = 86400;
    tt++;
    
    // Parameter 'sounding_location_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_location_name");
    tt->descr = tdrpStrDup("Name of sounding location.");
    tt->help = tdrpStrDup("If set, we request a profile just for that sounding. If empty, all soundings in the data base are considered valid.");
    tt->val_offset = (char *) &sounding_location_name - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'sounding_check_pressure_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_check_pressure_range");
    tt->descr = tdrpStrDup("Option to check that pressure covers the required range.");
    tt->help = tdrpStrDup("If TRUE, we will check that pressure range in the sounding meets or exceeds the min and max specified.");
    tt->val_offset = (char *) &sounding_check_pressure_range - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_required_pressure_range_hpa'
    // ctype is '_data_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sounding_required_pressure_range_hpa");
    tt->descr = tdrpStrDup("Required pressure range for sounding to be valid (hPa)");
    tt->help = tdrpStrDup("This is used to provide a quality check on the sounding. If the pressure data does not fully cover this range, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &sounding_required_pressure_range_hpa - &_start_;
    tt->struct_def.name = tdrpStrDup("data_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_val");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &sounding_required_pressure_range_hpa.min_val - (char *) &sounding_required_pressure_range_hpa;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_val");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &sounding_required_pressure_range_hpa.max_val - (char *) &sounding_required_pressure_range_hpa;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 300;
      tt->struct_vals[1].d = 950;
    tt++;
    
    // Parameter 'sounding_check_height_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_check_height_range");
    tt->descr = tdrpStrDup("Option to check that height covers the required range.");
    tt->help = tdrpStrDup("If TRUE, we will check that height range in the sounding meets or exceeds the min and max specified.");
    tt->val_offset = (char *) &sounding_check_height_range - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_required_height_range_m'
    // ctype is '_data_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sounding_required_height_range_m");
    tt->descr = tdrpStrDup("Required height range for sounding to be valid (m)");
    tt->help = tdrpStrDup("This is used to provide a quality check on the sounding. If the height data does not fully cover this range, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &sounding_required_height_range_m - &_start_;
    tt->struct_def.name = tdrpStrDup("data_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_val");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &sounding_required_height_range_m.min_val - (char *) &sounding_required_height_range_m;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_val");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &sounding_required_height_range_m.max_val - (char *) &sounding_required_height_range_m;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 500;
      tt->struct_vals[1].d = 15000;
    tt++;
    
    // Parameter 'sounding_check_pressure_monotonically_decreasing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_check_pressure_monotonically_decreasing");
    tt->descr = tdrpStrDup("Option to check that pressure decreases monotonically.");
    tt->help = tdrpStrDup("If TRUE, we will check that pressure decreases monotonically. If not, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &sounding_check_pressure_monotonically_decreasing - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_height_correction_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sounding_height_correction_km");
    tt->descr = tdrpStrDup("Correction to the heights read in with the sounding (km).");
    tt->help = tdrpStrDup("This correction is ADDED to the heights read in. So if the freezing level seems low, the correction should be positive. If the freezing level appears high, it should be negative.");
    tt->val_offset = (char *) &sounding_height_correction_km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'sounding_use_wet_bulb_temp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_use_wet_bulb_temp");
    tt->descr = tdrpStrDup("Option to use wet bulb temperature profile.");
    tt->help = tdrpStrDup("If TRUE, we use the wet bulb temperature profile from the sounding instead of the dry bulb. This is thought to more closely track the temperature of melting ice.");
    tt->val_offset = (char *) &sounding_use_wet_bulb_temp - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("SMOOTHING OUTPUT PID");
    tt->comment_text = tdrpStrDup("This section gives you the option of smoothing the output pid field in range by applying a median filter.");
    tt++;
    
    // Parameter 'apply_median_filter_to_PID'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_PID");
    tt->descr = tdrpStrDup("Option to filter PID with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range, and affects both rain rate and PID.");
    tt->val_offset = (char *) &apply_median_filter_to_PID - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for PID - gates.");
    tt->help = tdrpStrDup("See 'appply_median_filter_to_PID'");
    tt->val_offset = (char *) &PID_median_filter_len - &_start_;
    tt->single_val.i = 7;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("COMPUTING PRECIP RATE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'PRECIP_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_snr_threshold");
    tt->descr = tdrpStrDup("Minimum SNR for valid PRECIP.");
    tt->help = tdrpStrDup("If the SNR at a gate is below this, the PRECIP is censored.");
    tt->val_offset = (char *) &PRECIP_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'PRECIP_apply_median_filter_to_DBZ'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_apply_median_filter_to_DBZ");
    tt->descr = tdrpStrDup("Option to filter DBZ with median filter.");
    tt->help = tdrpStrDup("The filter is computed in rang..");
    tt->val_offset = (char *) &PRECIP_apply_median_filter_to_DBZ - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PRECIP_DBZ_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_DBZ_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for DBZ - gates.");
    tt->help = tdrpStrDup("See 'PRECIP_apply_median_filter_to_DBZ'");
    tt->val_offset = (char *) &PRECIP_DBZ_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PRECIP_apply_median_filter_to_ZDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_apply_median_filter_to_ZDR");
    tt->descr = tdrpStrDup("Option to filter ZDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PRECIP_apply_median_filter_to_ZDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PRECIP_ZDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_ZDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for ZDR - gates.");
    tt->help = tdrpStrDup("See 'PID_PRECIP_apply_median_filter_to_ZDR'");
    tt->val_offset = (char *) &PRECIP_ZDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PRECIP_min_valid_rate'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_min_valid_rate");
    tt->descr = tdrpStrDup("Minimum valid precip rate (mm/hr).");
    tt->help = tdrpStrDup("If any computed rate is less than this value, it is set to 0.");
    tt->val_offset = (char *) &PRECIP_min_valid_rate - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'PRECIP_max_valid_rate'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_max_valid_rate");
    tt->descr = tdrpStrDup("Maximum valid precip rate (mm/hr).");
    tt->help = tdrpStrDup("If any computed rate exceeds this value, it is set to this max.");
    tt->val_offset = (char *) &PRECIP_max_valid_rate - &_start_;
    tt->single_val.d = 250;
    tt++;
    
    // Parameter 'PRECIP_max_valid_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_max_valid_dbz");
    tt->descr = tdrpStrDup("Maximum valid dbz for computing precip rate.");
    tt->help = tdrpStrDup("If any dbz exceeds this value, it is set to this max before use. This helps mitigate large DBZ values in hail.");
    tt->val_offset = (char *) &PRECIP_max_valid_dbz - &_start_;
    tt->single_val.d = 53;
    tt++;
    
    // Parameter 'PRECIP_brightband_dbz_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PRECIP_brightband_dbz_correction");
    tt->descr = tdrpStrDup("Correction to be applied in brightband before computing precip rate.");
    tt->help = tdrpStrDup("This should be negative.");
    tt->val_offset = (char *) &PRECIP_brightband_dbz_correction - &_start_;
    tt->has_max = TRUE;
    tt->max_val.d = 0;
    tt->single_val.d = -10;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("PRECIP COEFFICIENTS");
    tt->comment_text = tdrpStrDup("Coefficients for the precip equations.");
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_ZH");
    tt->comment_text = tdrpStrDup("RATE_ZH = zh_aa * (ZH ** zh_bb)");
    tt++;
    
    // Parameter 'zh_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zh_aa");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_ZH.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zh_aa - &_start_;
    tt->single_val.d = 0.017;
    tt++;
    
    // Parameter 'zh_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zh_bb");
    tt->descr = tdrpStrDup("Exponent for PRECIP_RATE_ZH.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zh_bb - &_start_;
    tt->single_val.d = 0.714;
    tt++;
    
    // Parameter 'Comment 16'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 16");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_SNOW_ZH");
    tt->comment_text = tdrpStrDup("RATE_SNOW_ZH = zh_aa_snow * (ZH ** zh_bb_snow)");
    tt++;
    
    // Parameter 'zh_aa_snow'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zh_aa_snow");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_ZH in SNOW.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zh_aa_snow - &_start_;
    tt->single_val.d = 0.0365;
    tt++;
    
    // Parameter 'zh_bb_snow'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zh_bb_snow");
    tt->descr = tdrpStrDup("Exponent for PRECIP_RATE_ZH in SNOW.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zh_bb_snow - &_start_;
    tt->single_val.d = 0.625;
    tt++;
    
    // Parameter 'Comment 17'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 17");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_Z_ZDR");
    tt->comment_text = tdrpStrDup("RATE_Z_ZDR = zzdr_aa * (ZH ** zzdr_bb) * (ZDR ** zzdr_cc)");
    tt++;
    
    // Parameter 'zzdr_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zzdr_aa");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_ZZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zzdr_aa - &_start_;
    tt->single_val.d = 0.00684;
    tt++;
    
    // Parameter 'zzdr_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zzdr_bb");
    tt->descr = tdrpStrDup("ZH exponent for PRECIP_RATE_ZZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zzdr_bb - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'zzdr_cc'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zzdr_cc");
    tt->descr = tdrpStrDup("ZDR exponent for PRECIP_RATE_ZZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zzdr_cc - &_start_;
    tt->single_val.d = -4.86;
    tt++;
    
    // Parameter 'Comment 18'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 18");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_KDP");
    tt->comment_text = tdrpStrDup("RATE_KDP = sign(KDP) * kdp_aa * (|KDP| ** kdp_bb)");
    tt++;
    
    // Parameter 'kdp_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdp_aa");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_KDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdp_aa - &_start_;
    tt->single_val.d = 40.6;
    tt++;
    
    // Parameter 'kdp_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdp_bb");
    tt->descr = tdrpStrDup("Exponent for PRECIP_RATE_KDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdp_bb - &_start_;
    tt->single_val.d = 0.866;
    tt++;
    
    // Parameter 'Comment 19'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 19");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_KDP_ZDR");
    tt->comment_text = tdrpStrDup("RATE_KDP_ZDR = sign(KDP) * kdpzdr_aa * (|KDP| ** kdpzdr_bb) * (ZDR ** kdpzdr_cc)");
    tt++;
    
    // Parameter 'kdpzdr_aa'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdpzdr_aa");
    tt->descr = tdrpStrDup("Coefficient for PRECIP_RATE_KDP_ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdpzdr_aa - &_start_;
    tt->single_val.d = 136;
    tt++;
    
    // Parameter 'kdpzdr_bb'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdpzdr_bb");
    tt->descr = tdrpStrDup("KDP exponent for PRECIP_RATE_KDP_ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdpzdr_bb - &_start_;
    tt->single_val.d = 0.968;
    tt++;
    
    // Parameter 'kdpzdr_cc'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("kdpzdr_cc");
    tt->descr = tdrpStrDup("ZDR exponent for PRECIP_RATE_KDP_ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &kdpzdr_cc - &_start_;
    tt->single_val.d = -2.86;
    tt++;
    
    // Parameter 'Comment 20'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 20");
    tt->comment_hdr = tdrpStrDup("PRECIP RATE BASED ON PID");
    tt->comment_text = tdrpStrDup("The PID-based rate is a wieghted-average of the rates for the various precip types.\nThe weights are derived from the interest values for each PID particle type.\n\t  RATE_LIGHT_RAIN = RATE_ZH\n\t  RATE_MOD_RAIN = RATE_Z_ZDR\n\t  RATE_SNOW = RATE_ZH_SNOW\n\t  RATE_MIXED = RATE_ZH_MIXED\n\n\t  if (kdp > threshold && RATE_KDP is valid)\n\t    RATE_HVY_RAIN = RATE_KDP\n\t    RATE_HAIL = RATE_KDP\n\t  else\n\t    RATE_HVY_RAIN = RATE_ZZDR\n\t    RATE_HAIL = RATE_ZZDR\n\n\t  RATE = 0\n\t  RATE += RATE_LIGHT_RAIN * WT_LIGHT_RAIN\n\t  RATE += RATE_MOD_RAIN * WT_MOD_RAIN\n\t  RATE += RATE_HVY_RAIN * WT_HVY_RAIN\n\t  RATE += RATE_SNOW * WT_SNOW\n\t  RATE += RATE_MIXED * WT_MIXED\n\t  RATE += RATE_HAIL * WT_HAIL\n");
    tt++;
    
    // Parameter 'pid_rate_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("pid_rate_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &pid_rate_kdp_threshold - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'Comment 21'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 21");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_HYBRID");
    tt->comment_text = tdrpStrDup("The HYBRID rate is based on the PID and the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Hybrid et al, JTech, Vol 26, 2009, 2107 - 2122.\n\n\t  if hail or heavy rain\n\t    if KDP > threhsold and rateKDP is valid\n\t      use RATE_KDP\n\t    else\n\t      use RATE_KDP\n\t  else if snow/ice\n\t    use RATE_ZH_SNOW\n\t  else if mixed precip\n\t    use RATE_ZH_MIXED\n\t  else if rain or SLD\n\t    if dBZ > theshold and KDP > threhsold\n\t      if rateKDP is valid\n\t        use RATE_KDP\n\t      else\n\t        use RATE_ZZDR\n\t    else\n\t      if ZDR >= threshold\n\t        use RATE_Z\n\t      else\n\t        use RATE_ZZDR\n");
    tt++;
    
    // Parameter 'hybrid_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hybrid_dbz_threshold");
    tt->descr = tdrpStrDup("Units are dBZ.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hybrid_dbz_threshold - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'hybrid_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hybrid_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hybrid_kdp_threshold - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'hybrid_zdr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hybrid_zdr_threshold");
    tt->descr = tdrpStrDup("Units are dB.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hybrid_zdr_threshold - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'Comment 22'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 22");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_HIDRO");
    tt->comment_text = tdrpStrDup("The HIDRO rate is based on the CSU-HIDRO algorithm. See 'A New Dual-Polarization Radar Rainfall Algorithm: Application to Colorado Precipition Events', Cifelli et al, JTech, Vol 28, 2011, 352 - 364. NOTE - this algorithm is generally only applied to liquid and mixed-phase precip, so you need to run PID for this to work as intended.\n\t  For ice:\n\t    RATE_HIDRO = MISSING\n\t  For hail or mixed:\n\t    if KDP >= threshold and rateKdp is valid\n\t      RATE_HIDRO = RATE_KDP\n\t    else\n\t      RATE_HIDRO = RATE_ZR\n\t  For rain or sld:\n\t    if KDP >= threshold and DBZ >= threhold\n\t      if ZDR >= threshold and rateKdpZdr is valid\n\t        RATE_HIDRO = RATE_KDPZDR\n\t      else if rateKdp is valid\n\t        RATE_HIDRO = RATE_KDP\n\t      else\n\t        RATE_HIDRO = RATE_ZZDR\n\t    else\n\t      if ZDR >= threshold\n\t        RATE_HIDRO = RATE_Z\n\t      else\n\t        RATE_HIDRO = RATE_ZZDR\n");
    tt++;
    
    // Parameter 'hidro_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hidro_dbz_threshold");
    tt->descr = tdrpStrDup("Units are dBZ.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hidro_dbz_threshold - &_start_;
    tt->single_val.d = 38;
    tt++;
    
    // Parameter 'hidro_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hidro_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hidro_kdp_threshold - &_start_;
    tt->single_val.d = 0.3;
    tt++;
    
    // Parameter 'hidro_zdr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hidro_zdr_threshold");
    tt->descr = tdrpStrDup("Units are dB.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &hidro_zdr_threshold - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'Comment 23'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 23");
    tt->comment_hdr = tdrpStrDup("PRECIP_RATE_BRINGI");
    tt->comment_text = tdrpStrDup("The BRINGI rate is based on the BRINGI algorithm. See 'Using dual-polarized radar and dual-frequency profiler for DSD characterization: a case study from Darwin, Australia', Bringi et al, JTech, Vol 26, 2009, 2107 - 2122.\n\t  if HAIL or RAIN/HAIL mixture and rateKdp is valid\n\t    RATE_BRINGI = RATE_KDP\n\t  else if dBZ > theshold and KDP > threhsold and rateKdp is valid\n\t    RATE_BRINGI = RATE_KDP\n\t  else\n\t    if ZDR >= threshold\n\t      RATE_BRINGI = RATE_ZZDR\n\t    else\n\t      RATE_BRINGI = RATE_Z\n");
    tt++;
    
    // Parameter 'bringi_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bringi_dbz_threshold");
    tt->descr = tdrpStrDup("Units are dBZ.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &bringi_dbz_threshold - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'bringi_kdp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bringi_kdp_threshold");
    tt->descr = tdrpStrDup("Units are deg/km.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &bringi_kdp_threshold - &_start_;
    tt->single_val.d = 0.15;
    tt++;
    
    // Parameter 'bringi_zdr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("bringi_zdr_threshold");
    tt->descr = tdrpStrDup("Units are dB.");
    tt->help = tdrpStrDup("See notes above for details on use.");
    tt->val_offset = (char *) &bringi_zdr_threshold - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'Comment 24'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 24");
    tt->comment_hdr = tdrpStrDup("ESTIMATING ZDR BIAS");
    tt->comment_text = tdrpStrDup("ZDR bias can be estimated using data from regions with irregular ice and bragg scattering, with various constraints applied. See below.");
    tt++;
    
    // Parameter 'estimate_zdr_bias_in_ice'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("estimate_zdr_bias_in_ice");
    tt->descr = tdrpStrDup("Option to estimate ZDR bias from the irregular ice phase regions.");
    tt->help = tdrpStrDup("If true, we will try to estimate ZDR bias from returns in regions with irregular ice and snow.");
    tt->val_offset = (char *) &estimate_zdr_bias_in_ice - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'estimate_zdr_bias_in_bragg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("estimate_zdr_bias_in_bragg");
    tt->descr = tdrpStrDup("Option to estimate ZDR bias from the bragg regions.");
    tt->help = tdrpStrDup("If true, we will try to estimate ZDR bias from bragg scattering returns. Generally this is only relevant at S band.");
    tt->val_offset = (char *) &estimate_zdr_bias_in_bragg - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'zdr_bias_max_abs_zdr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_max_abs_zdr");
    tt->descr = tdrpStrDup("Maximum ZDR for estimating ZDR bias.");
    tt->help = tdrpStrDup("We set this to a value somewhat greater than the estimated max ZDR calibration error. If we get values outside this range we reject those gates.");
    tt->val_offset = (char *) &zdr_bias_max_abs_zdr - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'zdr_bias_max_abs_zdrm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_max_abs_zdrm");
    tt->descr = tdrpStrDup("Maximum ZDRM for estimating ZDR bias.");
    tt->help = tdrpStrDup("We set this to a value somewhat greater than the estimated max ZDR calibration error. If we get values outside this range we reject those gates.");
    tt->val_offset = (char *) &zdr_bias_max_abs_zdrm - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'zdr_bias_min_rhohv_nnc'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_min_rhohv_nnc");
    tt->descr = tdrpStrDup("Minimim RHOHV for estimating ZDR bias.");
    tt->help = tdrpStrDup("If RHOHV_NNC is avaiable, it is used. If not, the noise-corrected RHOHV is used.");
    tt->val_offset = (char *) &zdr_bias_min_rhohv_nnc - &_start_;
    tt->single_val.d = 0.98;
    tt++;
    
    // Parameter 'zdr_bias_min_abs_vel'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_min_abs_vel");
    tt->descr = tdrpStrDup("Minimum absolute velocity for estimating ZDR bias.");
    tt->help = tdrpStrDup("Setting a minimum vel helps to reduce the influence of side-lobe clutter, especially in Bragg.");
    tt->val_offset = (char *) &zdr_bias_min_abs_vel - &_start_;
    tt->single_val.d = 1.5;
    tt++;
    
    // Parameter 'zdr_bias_max_abs_kdp'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_max_abs_kdp");
    tt->descr = tdrpStrDup("Max KDP for computing ZDR bias.");
    tt->help = tdrpStrDup("KDP must be well behaved, and not high, in regions where we compute ZDR bias.");
    tt->val_offset = (char *) &zdr_bias_max_abs_kdp - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'zdr_bias_max_phidp_accum'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_max_phidp_accum");
    tt->descr = tdrpStrDup("Maximum PHIDP accumulation along the ray (deg).");
    tt->help = tdrpStrDup("Significant phase shift can lead to non-zero ZDR values at more distant gates. It is good to screen out these gates.");
    tt->val_offset = (char *) &zdr_bias_max_phidp_accum - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'Comment 25'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 25");
    tt->comment_hdr = tdrpStrDup("ZDR BIAS IN ICE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'zdr_bias_ice_pid_types'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_pid_types");
    tt->descr = tdrpStrDup("List of PID types in which ZDR should be close to 0 dB in ice.");
    tt->help = tdrpStrDup("Generally this is set to 10 = irregular ice, and 13 = snow.");
    tt->array_offset = (char *) &_zdr_bias_ice_pid_types - &_start_;
    tt->array_n_offset = (char *) &zdr_bias_ice_pid_types_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].i = 10;
      tt->array_vals[1].i = 13;
    tt++;
    
    // Parameter 'zdr_bias_ice_min_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_min_range_km");
    tt->descr = tdrpStrDup("Minimum range for estimating ZDR bias in ice.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_ice_min_range_km - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'zdr_bias_ice_max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_max_range_km");
    tt->descr = tdrpStrDup("Maximum range for estimating ZDR bias in ice.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_ice_max_range_km - &_start_;
    tt->single_val.d = 120;
    tt++;
    
    // Parameter 'zdr_bias_ice_min_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_min_dbz");
    tt->descr = tdrpStrDup("Minimum DBZ for estimating ZDR bias in ice.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_ice_min_dbz - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'zdr_bias_ice_max_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_max_dbz");
    tt->descr = tdrpStrDup("Maximum DBZ for estimating ZDR bias in ice.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_ice_max_dbz - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'zdr_bias_ice_min_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_min_snr");
    tt->descr = tdrpStrDup("Minimum SNR for estimating ZDR bias in ice (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_ice_min_snr - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'zdr_bias_ice_max_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_max_snr");
    tt->descr = tdrpStrDup("Maximum SNR for estimating ZDR bias in ice (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_ice_max_snr - &_start_;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'zdr_bias_ice_min_rho_vxhx'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_min_rho_vxhx");
    tt->descr = tdrpStrDup("Minimum RHO VXHX estimating ZDR bias in ice (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_ice_min_rho_vxhx - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'zdr_bias_ice_max_rho_vxhx'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_max_rho_vxhx");
    tt->descr = tdrpStrDup("Maximum RHO VXHX estimating ZDR bias in ice (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_ice_max_rho_vxhx - &_start_;
    tt->single_val.d = 0.2;
    tt++;
    
    // Parameter 'zdr_bias_ice_min_temp_c'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_min_temp_c");
    tt->descr = tdrpStrDup("Minimum temperature for computing ZDR bias in ice (deg C).");
    tt->help = tdrpStrDup("We want to ensure that we are in the normal ice phase.");
    tt->val_offset = (char *) &zdr_bias_ice_min_temp_c - &_start_;
    tt->single_val.d = -50;
    tt++;
    
    // Parameter 'zdr_bias_ice_max_temp_c'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_max_temp_c");
    tt->descr = tdrpStrDup("Maximum temperature for computing ZDR bias in ice (deg C).");
    tt->help = tdrpStrDup("We want to ensure that we are well within the ice phase.");
    tt->val_offset = (char *) &zdr_bias_ice_max_temp_c - &_start_;
    tt->single_val.d = -5;
    tt++;
    
    // Parameter 'zdr_bias_ice_min_elevation_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_min_elevation_deg");
    tt->descr = tdrpStrDup("Min elevation angle for ZDR bias in ice (deg).");
    tt->help = tdrpStrDup("Only elevation angles at or above this will be considered.");
    tt->val_offset = (char *) &zdr_bias_ice_min_elevation_deg - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'zdr_bias_ice_max_elevation_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_max_elevation_deg");
    tt->descr = tdrpStrDup("Max elevation angle for ZDR bias in ice (deg).");
    tt->help = tdrpStrDup("Only elevation angles at or below this will be considered.");
    tt->val_offset = (char *) &zdr_bias_ice_max_elevation_deg - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'zdr_bias_ice_min_gate_run'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_min_gate_run");
    tt->descr = tdrpStrDup("Minimum consectutive gates with the correct conditions for ZDR bias in ice.");
    tt->help = tdrpStrDup("We want to ensure that we are solidly in a region suitable for estimating ZDR bias. We eliminate noisy data by requiring that the conditions persist over a certain number of gates.");
    tt->val_offset = (char *) &zdr_bias_ice_min_gate_run - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'zdr_bias_ice_min_npoints_valid'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_min_npoints_valid");
    tt->descr = tdrpStrDup("Minimum number of points in a volume for valid zdr stats in ice.");
    tt->help = tdrpStrDup("For the results to be valid, we need a certain number of valid results for computing the statistics.");
    tt->val_offset = (char *) &zdr_bias_ice_min_npoints_valid - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'zdr_bias_ice_percentiles'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_ice_percentiles");
    tt->descr = tdrpStrDup("Percentiles to write to SPDB output.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_zdr_bias_ice_percentiles - &_start_;
    tt->array_n_offset = (char *) &zdr_bias_ice_percentiles_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 6;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 17.5;
      tt->array_vals[1].d = 20;
      tt->array_vals[2].d = 22.5;
      tt->array_vals[3].d = 25;
      tt->array_vals[4].d = 27.5;
      tt->array_vals[5].d = 30;
    tt++;
    
    // Parameter 'save_ice_zdr_to_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("save_ice_zdr_to_file");
    tt->descr = tdrpStrDup("Option to save the ZDR values in ice to file.");
    tt->help = tdrpStrDup("If true, we will write the ZDR values in the ice regions to a file, in ASCII.");
    tt->val_offset = (char *) &save_ice_zdr_to_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ice_zdr_save_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ice_zdr_save_dir");
    tt->descr = tdrpStrDup("Directory for saving ZDR in ice data to files.");
    tt->help = tdrpStrDup("See write_ice_zdr_to_file. Two files will be written for each volume, one for uncorrected ZDRM and one for corrected ZDR. Also, global files will be appended to.");
    tt->val_offset = (char *) &ice_zdr_save_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/zdr_in_ice");
    tt++;
    
    // Parameter 'Comment 26'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 26");
    tt->comment_hdr = tdrpStrDup("ZDR BIAS IN BRAGG");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'zdr_bias_bragg_check_pid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_check_pid");
    tt->descr = tdrpStrDup("Option to check PID in identifying bragg.");
    tt->help = tdrpStrDup("If true, we check that the PID at a gate is one of those listed in the array 'zdr_bias_bragg_pid_types'.");
    tt->val_offset = (char *) &zdr_bias_bragg_check_pid - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'zdr_bias_bragg_pid_types'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_pid_types");
    tt->descr = tdrpStrDup("List of PID types in which ZDR should be close to 0 dB in Bragg.");
    tt->help = tdrpStrDup("Generally this is set to 1 = cloud drops.");
    tt->array_offset = (char *) &_zdr_bias_bragg_pid_types - &_start_;
    tt->array_n_offset = (char *) &zdr_bias_bragg_pid_types_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].i = 1;
    tt++;
    
    // Parameter 'zdr_bias_bragg_min_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_min_range_km");
    tt->descr = tdrpStrDup("Minimum range for estimating ZDR bias in Bragg.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_bragg_min_range_km - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'zdr_bias_bragg_max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_max_range_km");
    tt->descr = tdrpStrDup("Maximum range for estimating ZDR bias in Bragg.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_bragg_max_range_km - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'zdr_bias_bragg_min_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_min_dbz");
    tt->descr = tdrpStrDup("Minimum DBZ for estimating ZDR bias in Bragg.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_bragg_min_dbz - &_start_;
    tt->single_val.d = -40;
    tt++;
    
    // Parameter 'zdr_bias_bragg_max_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_max_dbz");
    tt->descr = tdrpStrDup("Maximum DBZ for estimating ZDR bias in Bragg.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_bragg_max_dbz - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'zdr_bias_bragg_min_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_min_snr");
    tt->descr = tdrpStrDup("Minimum SNR for estimating ZDR bias in Bragg (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_bragg_min_snr - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'zdr_bias_bragg_max_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_max_snr");
    tt->descr = tdrpStrDup("Maximum SNR for estimating ZDR bias in Bragg (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_bragg_max_snr - &_start_;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'zdr_bias_bragg_min_rho_vxhx'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_min_rho_vxhx");
    tt->descr = tdrpStrDup("Minimum RHO VXHX estimating ZDR bias in bragg (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_bragg_min_rho_vxhx - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'zdr_bias_bragg_max_rho_vxhx'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_max_rho_vxhx");
    tt->descr = tdrpStrDup("Maximum RHO VXHX estimating ZDR bias in bragg (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_bias_bragg_max_rho_vxhx - &_start_;
    tt->single_val.d = 0.2;
    tt++;
    
    // Parameter 'zdr_bias_bragg_min_temp_c'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_min_temp_c");
    tt->descr = tdrpStrDup("Minimum temperature for computing ZDR bias (deg C).");
    tt->help = tdrpStrDup("We want to ensure that we are in the normal bragg region.");
    tt->val_offset = (char *) &zdr_bias_bragg_min_temp_c - &_start_;
    tt->single_val.d = -30;
    tt++;
    
    // Parameter 'zdr_bias_bragg_max_temp_c'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_max_temp_c");
    tt->descr = tdrpStrDup("Maximum temperature for computing ZDR bias (deg C).");
    tt->help = tdrpStrDup("We want to ensure that we are well within the bragg region.");
    tt->val_offset = (char *) &zdr_bias_bragg_max_temp_c - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'zdr_bias_bragg_min_elevation_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_min_elevation_deg");
    tt->descr = tdrpStrDup("Min elevation angle for ZDR bias in ice (deg).");
    tt->help = tdrpStrDup("Only elevation angles at or above this will be considered.");
    tt->val_offset = (char *) &zdr_bias_bragg_min_elevation_deg - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'zdr_bias_bragg_max_elevation_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_max_elevation_deg");
    tt->descr = tdrpStrDup("Max elevation angle for ZDR bias in ice (deg).");
    tt->help = tdrpStrDup("Only elevation angles at or below this will be considered.");
    tt->val_offset = (char *) &zdr_bias_bragg_max_elevation_deg - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'zdr_bias_bragg_min_gate_run'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_min_gate_run");
    tt->descr = tdrpStrDup("Minimum consectutive gates with the correct conditions for ZDR bias in Bragg.");
    tt->help = tdrpStrDup("We want to ensure that we are solidly in a region suitable for estimating ZDR bias. We eliminate noisy data by requiring that the conditions persist over a certain number of gates.");
    tt->val_offset = (char *) &zdr_bias_bragg_min_gate_run - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'zdr_bias_bragg_min_npoints_valid'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_min_npoints_valid");
    tt->descr = tdrpStrDup("Minimum number of points in a volume for valid zdr stats in bragg.");
    tt->help = tdrpStrDup("For the results to be valid, we need a certain number of valid results for computing the statistics.");
    tt->val_offset = (char *) &zdr_bias_bragg_min_npoints_valid - &_start_;
    tt->single_val.i = 400;
    tt++;
    
    // Parameter 'zdr_bias_bragg_percentiles'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_bragg_percentiles");
    tt->descr = tdrpStrDup("Percentiles to write to SPDB output.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_zdr_bias_bragg_percentiles - &_start_;
    tt->array_n_offset = (char *) &zdr_bias_bragg_percentiles_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 7;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 25;
      tt->array_vals[1].d = 27.5;
      tt->array_vals[2].d = 30;
      tt->array_vals[3].d = 32;
      tt->array_vals[4].d = 33;
      tt->array_vals[5].d = 35;
      tt->array_vals[6].d = 40;
    tt++;
    
    // Parameter 'Comment 27'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 27");
    tt->comment_hdr = tdrpStrDup("WRITING ZDR BIAS RESULTS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'zdr_bias_write_results_to_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_write_results_to_spdb");
    tt->descr = tdrpStrDup("Option to write out ZDR results to SPDB.");
    tt->help = tdrpStrDup("The results will be written in XML, stored in SPDB. The data can then be retrieved for plotting or other purposes.");
    tt->val_offset = (char *) &zdr_bias_write_results_to_spdb - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'zdr_bias_spdb_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("zdr_bias_spdb_output_url");
    tt->descr = tdrpStrDup("URL for writing zdr bias results to SPDB XML.");
    tt->help = tdrpStrDup("For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir");
    tt->val_offset = (char *) &zdr_bias_spdb_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/spdb/zdr_bias");
    tt++;
    
    // Parameter 'Comment 28'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 28");
    tt->comment_hdr = tdrpStrDup("ESTIMATING Z BIAS USING SELF-CONSISTENCY");
    tt->comment_text = tdrpStrDup("The Z bias can be estimated using data from the rain region, i.e. below the freezing level. We use the self-consistency technique to compute z bias based on phidp phase shift in rain. See Vivekanandan, J., G. Zhang, S. M. Ellis, D. Rajopadhyaya, and S. K. Avery, Radar reflectivity calibration using differential propagation phase measurement, Radio Sci., 38(3), 8049, doi:10.1029/2002RS002676, 2003. NOTE: defaults are for S-band.");
    tt++;
    
    // Parameter 'estimate_z_bias_using_self_consistency'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("estimate_z_bias_using_self_consistency");
    tt->descr = tdrpStrDup("Option to estimate Z bias from self-consistency in the rain region.");
    tt->help = tdrpStrDup("If true, we will try to estimate Z bias using the self-consistency technique.");
    tt->val_offset = (char *) &estimate_z_bias_using_self_consistency - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'self_consistency_pid_types'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_pid_types");
    tt->descr = tdrpStrDup("List of PID types in which ZDR should be close to 0 dB.");
    tt->help = tdrpStrDup("Generally this is set to 2 = drizzle, 3 = light rain, 4 = moderate rain and 5 = heavy rain.");
    tt->array_offset = (char *) &_self_consistency_pid_types - &_start_;
    tt->array_n_offset = (char *) &self_consistency_pid_types_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 5;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].i = 1;
      tt->array_vals[1].i = 2;
      tt->array_vals[2].i = 3;
      tt->array_vals[3].i = 4;
      tt->array_vals[4].i = 5;
    tt++;
    
    // Parameter 'self_consistency_min_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_snr");
    tt->descr = tdrpStrDup("Minimum SNR for valid self_consistency analysis (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_min_snr - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'self_consistency_max_snr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_max_snr");
    tt->descr = tdrpStrDup("Maximum SNR for valid self_consistency analysis (dB).");
    tt->help = tdrpStrDup("Ensure we are not in a saturated environment.");
    tt->val_offset = (char *) &self_consistency_max_snr - &_start_;
    tt->single_val.d = 75;
    tt++;
    
    // Parameter 'self_consistency_min_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_dbz");
    tt->descr = tdrpStrDup("Minimum DBZ for valid self_consistency analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_min_dbz - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'self_consistency_max_dbz'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_max_dbz");
    tt->descr = tdrpStrDup("Maximum DBZ for valid self_consistency analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_max_dbz - &_start_;
    tt->single_val.d = 60;
    tt++;
    
    // Parameter 'self_consistency_min_zdr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_zdr");
    tt->descr = tdrpStrDup("Minimum ZDR for valid self_consistency analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_min_zdr - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'self_consistency_max_zdr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_max_zdr");
    tt->descr = tdrpStrDup("Maximum ZDR for valid self_consistency analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_max_zdr - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'self_consistency_min_rhohv'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_rhohv");
    tt->descr = tdrpStrDup("Minimum RHOHV for valid self_consistency analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_min_rhohv - &_start_;
    tt->single_val.d = 0.98;
    tt++;
    
    // Parameter 'self_consistency_min_kdp'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_kdp");
    tt->descr = tdrpStrDup("Minimum KDP for valid self_consistency analysis.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_min_kdp - &_start_;
    tt->single_val.d = -0.1;
    tt++;
    
    // Parameter 'self_consistency_max_dbz_at_run_limits'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_max_dbz_at_run_limits");
    tt->descr = tdrpStrDup("Maximum DBZ at the limits of the valid runs.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_max_dbz_at_run_limits - &_start_;
    tt->single_val.d = 35;
    tt++;
    
    // Parameter 'self_consistency_max_kdp_at_run_limits'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_max_kdp_at_run_limits");
    tt->descr = tdrpStrDup("Maximum KDP at the limits of the valid runs.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_max_kdp_at_run_limits - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'self_consistency_min_elevation_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_elevation_deg");
    tt->descr = tdrpStrDup("Min elevation angle for self-consistency analysis.");
    tt->help = tdrpStrDup("We want to avoid contamination with ground echo etc.");
    tt->val_offset = (char *) &self_consistency_min_elevation_deg - &_start_;
    tt->single_val.d = 0.45;
    tt++;
    
    // Parameter 'self_consistency_min_temp_c'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_temp_c");
    tt->descr = tdrpStrDup("Minimum temperature for self-consistency gates (deg C).");
    tt->help = tdrpStrDup("We want to ensure that we are in the rain phase.");
    tt->val_offset = (char *) &self_consistency_min_temp_c - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'self_consistency_max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_max_range_km");
    tt->descr = tdrpStrDup("Maximum range for self-consistency analysis.");
    tt->help = tdrpStrDup("Sometimes data at longer ranges can have problems, such as with partial beam filling.");
    tt->val_offset = (char *) &self_consistency_max_range_km - &_start_;
    tt->single_val.d = 100;
    tt++;
    
    // Parameter 'self_consistency_min_no_gap_distance_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_no_gap_distance_km");
    tt->descr = tdrpStrDup("Minimum run distance without any gaps (km).");
    tt->help = tdrpStrDup("We want to ensure that we are solidly in a region suitable for self_consistency analysis. We eliminate noisy data by by requiring that the correct conditions persist over a given minimum distance. This minimum run distance cannot have any gaps.");
    tt->val_offset = (char *) &self_consistency_min_no_gap_distance_km - &_start_;
    tt->single_val.d = 2.5;
    tt++;
    
    // Parameter 'self_consistency_min_combined_distance_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_combined_distance_km");
    tt->descr = tdrpStrDup("Minimum combined distance for analysis (km).");
    tt->help = tdrpStrDup("We combine the initial no-gap runs into a longer analysis run, provided there is only a small gap between them. We perform the analysis over this combined run. See also 'self_consistency_max_gate_gap'");
    tt->val_offset = (char *) &self_consistency_min_combined_distance_km - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'self_consistency_max_gate_gap'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_max_gate_gap");
    tt->descr = tdrpStrDup("Maximum length of gap between no-gap runs (gates).");
    tt->help = tdrpStrDup("This is the longest acceptable gap when we combine the no-gap runs into our analysis run. Gaps longer than this indicate that the data is not of high enough quality for the analysis.");
    tt->val_offset = (char *) &self_consistency_max_gate_gap - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'self_consistency_min_phidp_accum'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_min_phidp_accum");
    tt->descr = tdrpStrDup("Minimum PHIDP accumulation along the ray (deg).");
    tt->help = tdrpStrDup("We need significant phase shift for this method.");
    tt->val_offset = (char *) &self_consistency_min_phidp_accum - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'self_consistency_dbz_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_dbz_correction");
    tt->descr = tdrpStrDup("Correction to be applied to DBZ.");
    tt->help = tdrpStrDup("This allows us to test the sensitivity of the method to DBZ errors.");
    tt->val_offset = (char *) &self_consistency_dbz_correction - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'self_consistency_zdrm_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_zdrm_correction");
    tt->descr = tdrpStrDup("Correction to be applied to ZDRM (dB).");
    tt->help = tdrpStrDup("We need a reasonably accurate ZDR value for the self-consistency method to work properly. This correction is applied to the ZDRM field before using it for self-consistency.");
    tt->val_offset = (char *) &self_consistency_zdrm_correction - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'self_consistency_max_phase_shift_on_backscatter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_max_phase_shift_on_backscatter");
    tt->descr = tdrpStrDup("Max phase shift on back-scatter long the ray (deg).");
    tt->help = tdrpStrDup("We are looking for phase shift due to propagation rather than from backscatter.");
    tt->val_offset = (char *) &self_consistency_max_phase_shift_on_backscatter - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'self_consistency_method'
    // ctype is '_self_con_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_method");
    tt->descr = tdrpStrDup("Method used to estimate KDP in self consistency method.");
    tt->help = tdrpStrDup("The ZDR power law method was proposed by Vivekanandan, J., G. Zhang, S. M. Ellis, D. Rajopadhyaya, and S. K. Avery, Radar reflectivity calibration using differential propagation phase measurement, Radio Sci., 38(3), 8049, doi:10.1029/2002RS002676, 2003. The Polynomial method was proposed by Qing Cao, Michael Knight, Alexander Ryzhkov and Pengfei Zhang, 2016: A Novel Physical Consistency-Based Calibration Tool for Polarimetric Weather Radar. Paper 691, AMS Annual Conference, New Orleans, 2016.");
    tt->val_offset = (char *) &self_consistency_method - &_start_;
    tt->enum_def.name = tdrpStrDup("self_con_method_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SELF_CON_ZDR_POWER_LAW_METHOD");
      tt->enum_def.fields[0].val = SELF_CON_ZDR_POWER_LAW_METHOD;
      tt->enum_def.fields[1].name = tdrpStrDup("SELF_CON_ZDR_POLYNOMIAL_METHOD");
      tt->enum_def.fields[1].val = SELF_CON_ZDR_POLYNOMIAL_METHOD;
    tt->single_val.e = SELF_CON_ZDR_POWER_LAW_METHOD;
    tt++;
    
    // Parameter 'self_consistency_kdp_z_expon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_kdp_z_expon");
    tt->descr = tdrpStrDup("Z exponent for estimating KDP from Z and ZDR.");
    tt->help = tdrpStrDup("SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.");
    tt->val_offset = (char *) &self_consistency_kdp_z_expon - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'self_consistency_kdp_zdr_expon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_kdp_zdr_expon");
    tt->descr = tdrpStrDup("ZDR exponent for estimating KDP from Z and ZDR.");
    tt->help = tdrpStrDup("SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.");
    tt->val_offset = (char *) &self_consistency_kdp_zdr_expon - &_start_;
    tt->single_val.d = -2.05;
    tt++;
    
    // Parameter 'self_consistency_kdp_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_kdp_coefficient");
    tt->descr = tdrpStrDup("Coefficient for estimating KDP from Z and ZDR.");
    tt->help = tdrpStrDup("SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.");
    tt->val_offset = (char *) &self_consistency_kdp_coefficient - &_start_;
    tt->single_val.d = 3.32e-05;
    tt++;
    
    // Parameter 'self_consistency_z_atten_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_z_atten_coefficient");
    tt->descr = tdrpStrDup("Coefficient for estimating Z attenutation from KDP.");
    tt->help = tdrpStrDup("SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.");
    tt->val_offset = (char *) &self_consistency_z_atten_coefficient - &_start_;
    tt->single_val.d = 0.02;
    tt++;
    
    // Parameter 'self_consistency_zdr_atten_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_zdr_atten_coefficient");
    tt->descr = tdrpStrDup("Coefficient for estimating ZDR attenutation from KDP.");
    tt->help = tdrpStrDup("SELF_CON_ZDR_POWER_LAW_METHOD. See equation 16: Vivek et al.");
    tt->val_offset = (char *) &self_consistency_zdr_atten_coefficient - &_start_;
    tt->single_val.d = 0.0038;
    tt++;
    
    // Parameter 'self_consistency_polynomial_a0'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_polynomial_a0");
    tt->descr = tdrpStrDup("Polynomial coefficent a0. C-band: 6.7; S-band: 3.19");
    tt->help = tdrpStrDup("SELF_CON_ZDR_POLYNOMIAL_METHOD. See equation 4: Qing et al.");
    tt->val_offset = (char *) &self_consistency_polynomial_a0 - &_start_;
    tt->single_val.d = 3.19;
    tt++;
    
    // Parameter 'self_consistency_polynomial_a1'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_polynomial_a1");
    tt->descr = tdrpStrDup("Polynomial coefficent a1. C-band: -4.42; S-band: -2.16");
    tt->help = tdrpStrDup("SELF_CON_ZDR_POLYNOMIAL_METHOD. See equation 4: Qing et al.");
    tt->val_offset = (char *) &self_consistency_polynomial_a1 - &_start_;
    tt->single_val.d = -2.16;
    tt++;
    
    // Parameter 'self_consistency_polynomial_a2'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_polynomial_a2");
    tt->descr = tdrpStrDup("Polynomial coefficent a2. C-band: 2.16; S-band: 0.795");
    tt->help = tdrpStrDup("SELF_CON_ZDR_POLYNOMIAL_METHOD. See equation 4: Qing et al.");
    tt->val_offset = (char *) &self_consistency_polynomial_a2 - &_start_;
    tt->single_val.d = 0.795;
    tt++;
    
    // Parameter 'self_consistency_polynomial_a3'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_polynomial_a3");
    tt->descr = tdrpStrDup("Polynomial coefficent a3. C-band: -0.404; S-band: -0.119");
    tt->help = tdrpStrDup("SELF_CON_ZDR_POLYNOMIAL_METHOD. See equation 4: Qing et al.");
    tt->val_offset = (char *) &self_consistency_polynomial_a3 - &_start_;
    tt->single_val.d = -0.119;
    tt++;
    
    // Parameter 'self_consistency_write_results_to_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_write_results_to_spdb");
    tt->descr = tdrpStrDup("Option to write out Z bias results to SPDB.");
    tt->help = tdrpStrDup("The results will be written in XML, stored in SPDB. The data can then be retrieved for plotting or other purposes.");
    tt->val_offset = (char *) &self_consistency_write_results_to_spdb - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'self_consistency_spdb_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_spdb_output_url");
    tt->descr = tdrpStrDup("URL for writing z bias results to SPDB XML.");
    tt->help = tdrpStrDup("For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir");
    tt->val_offset = (char *) &self_consistency_spdb_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/spdb/self_consistency");
    tt++;
    
    // Parameter 'self_consistency_debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_debug");
    tt->descr = tdrpStrDup("Debug option for self-consistency code");
    tt->help = tdrpStrDup("Set the level of debugging you want.");
    tt->val_offset = (char *) &self_consistency_debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'self_consistency_write_run_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_write_run_files");
    tt->descr = tdrpStrDup("Option to write run files to debug self_consistency computation.");
    tt->help = tdrpStrDup("The self-consistency method works by identifying runs along rays, which have a significant phipd change, and the correct conditions such as all rain, good rhohv etc. We can optionally save the run data to files so that we can then plot them for debugging purposes.");
    tt->val_offset = (char *) &self_consistency_write_run_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'self_consistency_run_files_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("self_consistency_run_files_dir");
    tt->descr = tdrpStrDup("Directory for self_consistency run files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &self_consistency_run_files_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/self_consistency_run_files");
    tt++;
    
    // Parameter 'Comment 29'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 29");
    tt->comment_hdr = tdrpStrDup("RETRIEVING SITE TEMPERATURE FROM SPDB");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_site_temp_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_site_temp_from_spdb");
    tt->descr = tdrpStrDup("Option to read site temperature from SPDB.");
    tt->help = tdrpStrDup("The temperature closest to the radar volume time will be read in.");
    tt->val_offset = (char *) &read_site_temp_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'site_temp_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_spdb_url");
    tt->descr = tdrpStrDup("URL for temperatures from SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://hail:0:pecan/spdb/spol/temp");
    tt++;
    
    // Parameter 'site_temp_station_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_station_name");
    tt->descr = tdrpStrDup("Station name for site temperature.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_station_name - &_start_;
    tt->single_val.s = tdrpStrDup("SPOL");
    tt++;
    
    // Parameter 'site_temp_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("site_temp_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin when finding site temp data (secs).");
    tt->help = tdrpStrDup("We search for the temperature closest in time to the radar volume. This is the search margin on either side of the volume time.");
    tt->val_offset = (char *) &site_temp_search_margin_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'Comment 30'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 30");
    tt->comment_hdr = tdrpStrDup("SPECIFYING FIELD NAMES AND OUTPUT ENCODING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Indicate which fields should be written to the output file.");
    tt->help = tdrpStrDup("Choose the ID from the list. The name and units can be set however the user prefers. The output_encoding and output_scaling apply to CfRadial output only. If the output_scaling is DYNAMIC then the scale and offset are computed using the dynamic range of the data. If the output_scaling is SPECIFIED, then the specified scale and offset are used.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 16;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("output_field_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->id - (char *) _output_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("output_field_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 69;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("SNR");
        tt->struct_def.fields[0].enum_def.fields[0].val = SNR;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("DBZ");
        tt->struct_def.fields[0].enum_def.fields[1].val = DBZ;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("VEL");
        tt->struct_def.fields[0].enum_def.fields[2].val = VEL;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("ZDR");
        tt->struct_def.fields[0].enum_def.fields[3].val = ZDR;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("ZDRM");
        tt->struct_def.fields[0].enum_def.fields[4].val = ZDRM;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("LDR");
        tt->struct_def.fields[0].enum_def.fields[5].val = LDR;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("RHOHV");
        tt->struct_def.fields[0].enum_def.fields[6].val = RHOHV;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("RHOHV_NNC");
        tt->struct_def.fields[0].enum_def.fields[7].val = RHOHV_NNC;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("PHIDP");
        tt->struct_def.fields[0].enum_def.fields[8].val = PHIDP;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("KDP");
        tt->struct_def.fields[0].enum_def.fields[9].val = KDP;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("KDP_ZZDR");
        tt->struct_def.fields[0].enum_def.fields[10].val = KDP_ZZDR;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("KDP_COND");
        tt->struct_def.fields[0].enum_def.fields[11].val = KDP_COND;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("KDP_BRINGI");
        tt->struct_def.fields[0].enum_def.fields[12].val = KDP_BRINGI;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("PSOB");
        tt->struct_def.fields[0].enum_def.fields[13].val = PSOB;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("ZDP");
        tt->struct_def.fields[0].enum_def.fields[14].val = ZDP;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("PRECIP_RATE_ZH");
        tt->struct_def.fields[0].enum_def.fields[15].val = PRECIP_RATE_ZH;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("PRECIP_RATE_ZH_SNOW");
        tt->struct_def.fields[0].enum_def.fields[16].val = PRECIP_RATE_ZH_SNOW;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("PRECIP_RATE_Z_ZDR");
        tt->struct_def.fields[0].enum_def.fields[17].val = PRECIP_RATE_Z_ZDR;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("PRECIP_RATE_KDP");
        tt->struct_def.fields[0].enum_def.fields[18].val = PRECIP_RATE_KDP;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("PRECIP_RATE_KDP_ZDR");
        tt->struct_def.fields[0].enum_def.fields[19].val = PRECIP_RATE_KDP_ZDR;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("PRECIP_RATE_HYBRID");
        tt->struct_def.fields[0].enum_def.fields[20].val = PRECIP_RATE_HYBRID;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("PRECIP_RATE_PID");
        tt->struct_def.fields[0].enum_def.fields[21].val = PRECIP_RATE_PID;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("PRECIP_RATE_HIDRO");
        tt->struct_def.fields[0].enum_def.fields[22].val = PRECIP_RATE_HIDRO;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("PRECIP_RATE_BRINGI");
        tt->struct_def.fields[0].enum_def.fields[23].val = PRECIP_RATE_BRINGI;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("DBZ_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[24].val = DBZ_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[25].name = tdrpStrDup("ZDR_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[25].val = ZDR_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[26].name = tdrpStrDup("DBZ_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[26].val = DBZ_ATTEN_CORRECTED;
        tt->struct_def.fields[0].enum_def.fields[27].name = tdrpStrDup("ZDR_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[27].val = ZDR_ATTEN_CORRECTED;
        tt->struct_def.fields[0].enum_def.fields[28].name = tdrpStrDup("DBZ_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[28].val = DBZ_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[29].name = tdrpStrDup("ZDR_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[29].val = ZDR_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[30].name = tdrpStrDup("RHOHV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[30].val = RHOHV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[31].name = tdrpStrDup("SNR_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[31].val = SNR_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[32].name = tdrpStrDup("ZDR_SDEV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[32].val = ZDR_SDEV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[33].name = tdrpStrDup("VALID_FLAG_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[33].val = VALID_FLAG_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[34].name = tdrpStrDup("PHIDP_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[34].val = PHIDP_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[35].name = tdrpStrDup("PHIDP_MEAN_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[35].val = PHIDP_MEAN_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[36].name = tdrpStrDup("PHIDP_MEAN_UNFOLD_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[36].val = PHIDP_MEAN_UNFOLD_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[37].name = tdrpStrDup("PHIDP_SDEV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[37].val = PHIDP_SDEV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[38].name = tdrpStrDup("PHIDP_JITTER_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[38].val = PHIDP_JITTER_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[39].name = tdrpStrDup("PHIDP_UNFOLD_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[39].val = PHIDP_UNFOLD_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[40].name = tdrpStrDup("PHIDP_FILT_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[40].val = PHIDP_FILT_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[41].name = tdrpStrDup("PHIDP_COND_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[41].val = PHIDP_COND_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[42].name = tdrpStrDup("PHIDP_COND_FILT_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[42].val = PHIDP_COND_FILT_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[43].name = tdrpStrDup("DBZ_FOR_RATE");
        tt->struct_def.fields[0].enum_def.fields[43].val = DBZ_FOR_RATE;
        tt->struct_def.fields[0].enum_def.fields[44].name = tdrpStrDup("ZDR_FOR_RATE");
        tt->struct_def.fields[0].enum_def.fields[44].val = ZDR_FOR_RATE;
        tt->struct_def.fields[0].enum_def.fields[45].name = tdrpStrDup("KDP_FOR_RATE");
        tt->struct_def.fields[0].enum_def.fields[45].val = KDP_FOR_RATE;
        tt->struct_def.fields[0].enum_def.fields[46].name = tdrpStrDup("PARTICLE_ID");
        tt->struct_def.fields[0].enum_def.fields[46].val = PARTICLE_ID;
        tt->struct_def.fields[0].enum_def.fields[47].name = tdrpStrDup("PID_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[47].val = PID_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[48].name = tdrpStrDup("PARTICLE_ID2");
        tt->struct_def.fields[0].enum_def.fields[48].val = PARTICLE_ID2;
        tt->struct_def.fields[0].enum_def.fields[49].name = tdrpStrDup("PID_INTEREST2");
        tt->struct_def.fields[0].enum_def.fields[49].val = PID_INTEREST2;
        tt->struct_def.fields[0].enum_def.fields[50].name = tdrpStrDup("DBZ_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[50].val = DBZ_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[51].name = tdrpStrDup("ZDR_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[51].val = ZDR_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[52].name = tdrpStrDup("LDR_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[52].val = LDR_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[53].name = tdrpStrDup("PHIDP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[53].val = PHIDP_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[54].name = tdrpStrDup("RHOHV_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[54].val = RHOHV_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[55].name = tdrpStrDup("KDP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[55].val = KDP_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[56].name = tdrpStrDup("SDZDR_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[56].val = SDZDR_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[57].name = tdrpStrDup("SDPHIDP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[57].val = SDPHIDP_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[58].name = tdrpStrDup("TEMP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[58].val = TEMP_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[59].name = tdrpStrDup("ZDRM_IN_ICE");
        tt->struct_def.fields[0].enum_def.fields[59].val = ZDRM_IN_ICE;
        tt->struct_def.fields[0].enum_def.fields[60].name = tdrpStrDup("ZDRM_IN_BRAGG");
        tt->struct_def.fields[0].enum_def.fields[60].val = ZDRM_IN_BRAGG;
        tt->struct_def.fields[0].enum_def.fields[61].name = tdrpStrDup("ZDR_IN_ICE");
        tt->struct_def.fields[0].enum_def.fields[61].val = ZDR_IN_ICE;
        tt->struct_def.fields[0].enum_def.fields[62].name = tdrpStrDup("ZDR_IN_BRAGG");
        tt->struct_def.fields[0].enum_def.fields[62].val = ZDR_IN_BRAGG;
        tt->struct_def.fields[0].enum_def.fields[63].name = tdrpStrDup("ZDR_FLAG_IN_ICE");
        tt->struct_def.fields[0].enum_def.fields[63].val = ZDR_FLAG_IN_ICE;
        tt->struct_def.fields[0].enum_def.fields[64].name = tdrpStrDup("ZDR_FLAG_IN_BRAGG");
        tt->struct_def.fields[0].enum_def.fields[64].val = ZDR_FLAG_IN_BRAGG;
        tt->struct_def.fields[0].enum_def.fields[65].name = tdrpStrDup("ML_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[65].val = ML_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[66].name = tdrpStrDup("ELEVATION_ANGLE");
        tt->struct_def.fields[0].enum_def.fields[66].val = ELEVATION_ANGLE;
        tt->struct_def.fields[0].enum_def.fields[67].name = tdrpStrDup("RANGE");
        tt->struct_def.fields[0].enum_def.fields[67].val = RANGE;
        tt->struct_def.fields[0].enum_def.fields[68].name = tdrpStrDup("BEAM_HEIGHT");
        tt->struct_def.fields[0].enum_def.fields[68].val = BEAM_HEIGHT;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->long_name - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->standard_name - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->units - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->encoding - (char *) _output_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[5].enum_def.nfields = 4;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_FL32");
        tt->struct_def.fields[5].enum_def.fields[0].val = OUTPUT_ENCODING_FL32;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
        tt->struct_def.fields[5].enum_def.fields[1].val = OUTPUT_ENCODING_INT32;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
        tt->struct_def.fields[5].enum_def.fields[2].val = OUTPUT_ENCODING_INT16;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
        tt->struct_def.fields[5].enum_def.fields[3].val = OUTPUT_ENCODING_INT08;
      tt->struct_def.fields[6].ftype = tdrpStrDup("output_scaling_t");
      tt->struct_def.fields[6].fname = tdrpStrDup("scaling");
      tt->struct_def.fields[6].ptype = ENUM_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_fields->scaling - (char *) _output_fields;
        tt->struct_def.fields[6].enum_def.name = tdrpStrDup("output_scaling_t");
        tt->struct_def.fields[6].enum_def.nfields = 2;
        tt->struct_def.fields[6].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[6].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[6].enum_def.fields[0].name = tdrpStrDup("OUTPUT_SCALING_DYNAMIC");
        tt->struct_def.fields[6].enum_def.fields[0].val = OUTPUT_SCALING_DYNAMIC;
        tt->struct_def.fields[6].enum_def.fields[1].name = tdrpStrDup("OUTPUT_SCALING_SPECIFIED");
        tt->struct_def.fields[6].enum_def.fields[1].val = OUTPUT_SCALING_SPECIFIED;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("scale");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_output_fields->scale - (char *) _output_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("offset");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_output_fields->offset - (char *) _output_fields;
    tt->n_struct_vals = 144;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = SNR;
      tt->struct_vals[1].s = tdrpStrDup("SNR");
      tt->struct_vals[2].s = tdrpStrDup("signal_to_noise_ratio_db");
      tt->struct_vals[3].s = tdrpStrDup("signal_to_noise_ratio");
      tt->struct_vals[4].s = tdrpStrDup("dB");
      tt->struct_vals[5].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[6].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[7].d = 0.01;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].e = DBZ;
      tt->struct_vals[10].s = tdrpStrDup("DBZ");
      tt->struct_vals[11].s = tdrpStrDup("radar_reflectivity");
      tt->struct_vals[12].s = tdrpStrDup("equivalent_reflectivity_factor");
      tt->struct_vals[13].s = tdrpStrDup("dBZ");
      tt->struct_vals[14].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[15].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[16].d = 0.01;
      tt->struct_vals[17].d = 0;
      tt->struct_vals[18].e = ZDR;
      tt->struct_vals[19].s = tdrpStrDup("ZDR");
      tt->struct_vals[20].s = tdrpStrDup("calibrated_log_differential_reflectivity");
      tt->struct_vals[21].s = tdrpStrDup("log_differential_reflectivity");
      tt->struct_vals[22].s = tdrpStrDup("dB");
      tt->struct_vals[23].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[24].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[25].d = 0.01;
      tt->struct_vals[26].d = 0;
      tt->struct_vals[27].e = LDR;
      tt->struct_vals[28].s = tdrpStrDup("LDR");
      tt->struct_vals[29].s = tdrpStrDup("linear_depolarization_ratio_h_channel");
      tt->struct_vals[30].s = tdrpStrDup("log_linear_depolarization_ratio_h");
      tt->struct_vals[31].s = tdrpStrDup("dB");
      tt->struct_vals[32].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[33].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[34].d = 0.01;
      tt->struct_vals[35].d = 0;
      tt->struct_vals[36].e = RHOHV;
      tt->struct_vals[37].s = tdrpStrDup("RHOHV");
      tt->struct_vals[38].s = tdrpStrDup("cross_correlation_ratio");
      tt->struct_vals[39].s = tdrpStrDup("cross_correlation_ratio_hv");
      tt->struct_vals[40].s = tdrpStrDup("");
      tt->struct_vals[41].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[42].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[43].d = 0.001;
      tt->struct_vals[44].d = 0;
      tt->struct_vals[45].e = PHIDP;
      tt->struct_vals[46].s = tdrpStrDup("PHIDP");
      tt->struct_vals[47].s = tdrpStrDup("differential_phase");
      tt->struct_vals[48].s = tdrpStrDup("differential_phase_hv");
      tt->struct_vals[49].s = tdrpStrDup("deg");
      tt->struct_vals[50].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[51].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[52].d = 0.01;
      tt->struct_vals[53].d = 0;
      tt->struct_vals[54].e = KDP;
      tt->struct_vals[55].s = tdrpStrDup("KDP");
      tt->struct_vals[56].s = tdrpStrDup("specific_differential_phase");
      tt->struct_vals[57].s = tdrpStrDup("specific_differential_phase_hv");
      tt->struct_vals[58].s = tdrpStrDup("deg/km");
      tt->struct_vals[59].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[60].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[61].d = 0.001;
      tt->struct_vals[62].d = 0;
      tt->struct_vals[63].e = PSOB;
      tt->struct_vals[64].s = tdrpStrDup("PSOB");
      tt->struct_vals[65].s = tdrpStrDup("phase_shift_on_backscatter");
      tt->struct_vals[66].s = tdrpStrDup("phase_shift_on_backscatter");
      tt->struct_vals[67].s = tdrpStrDup("deg");
      tt->struct_vals[68].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[69].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[70].d = 0.001;
      tt->struct_vals[71].d = 0;
      tt->struct_vals[72].e = PARTICLE_ID;
      tt->struct_vals[73].s = tdrpStrDup("PID");
      tt->struct_vals[74].s = tdrpStrDup("particle_id");
      tt->struct_vals[75].s = tdrpStrDup("hydrometeor_type");
      tt->struct_vals[76].s = tdrpStrDup("");
      tt->struct_vals[77].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[78].e = OUTPUT_SCALING_SPECIFIED;
      tt->struct_vals[79].d = 1;
      tt->struct_vals[80].d = 0;
      tt->struct_vals[81].e = TEMP_FOR_PID;
      tt->struct_vals[82].s = tdrpStrDup("TEMP_FOR_PID");
      tt->struct_vals[83].s = tdrpStrDup("temperature_for_computing_pid");
      tt->struct_vals[84].s = tdrpStrDup("temperature");
      tt->struct_vals[85].s = tdrpStrDup("C");
      tt->struct_vals[86].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[87].e = OUTPUT_SCALING_SPECIFIED;
      tt->struct_vals[88].d = 0.01;
      tt->struct_vals[89].d = 0;
      tt->struct_vals[90].e = PRECIP_RATE_ZH;
      tt->struct_vals[91].s = tdrpStrDup("RATE_ZH");
      tt->struct_vals[92].s = tdrpStrDup("precip_rate_from_z");
      tt->struct_vals[93].s = tdrpStrDup("precip_rate_from_z");
      tt->struct_vals[94].s = tdrpStrDup("mm/hr");
      tt->struct_vals[95].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[96].e = OUTPUT_SCALING_SPECIFIED;
      tt->struct_vals[97].d = 0.01;
      tt->struct_vals[98].d = 0;
      tt->struct_vals[99].e = PRECIP_RATE_Z_ZDR;
      tt->struct_vals[100].s = tdrpStrDup("RATE_Z_ZDR");
      tt->struct_vals[101].s = tdrpStrDup("precip_rate_from_z_and_zdr");
      tt->struct_vals[102].s = tdrpStrDup("precip_rate_from_z_and_zdr");
      tt->struct_vals[103].s = tdrpStrDup("mm/hr");
      tt->struct_vals[104].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[105].e = OUTPUT_SCALING_SPECIFIED;
      tt->struct_vals[106].d = 0.01;
      tt->struct_vals[107].d = 0;
      tt->struct_vals[108].e = PRECIP_RATE_KDP;
      tt->struct_vals[109].s = tdrpStrDup("RATE_KDP");
      tt->struct_vals[110].s = tdrpStrDup("precip_rate_from_kdp");
      tt->struct_vals[111].s = tdrpStrDup("precip_rate_from_kdp");
      tt->struct_vals[112].s = tdrpStrDup("mm/hr");
      tt->struct_vals[113].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[114].e = OUTPUT_SCALING_SPECIFIED;
      tt->struct_vals[115].d = 0.01;
      tt->struct_vals[116].d = 0;
      tt->struct_vals[117].e = PRECIP_RATE_KDP_ZDR;
      tt->struct_vals[118].s = tdrpStrDup("RATE_KDP_ZDR");
      tt->struct_vals[119].s = tdrpStrDup("precip_rate_from_kdp_and_zdr");
      tt->struct_vals[120].s = tdrpStrDup("precip_rate_from_kdp_and_zdr");
      tt->struct_vals[121].s = tdrpStrDup("mm/hr");
      tt->struct_vals[122].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[123].e = OUTPUT_SCALING_SPECIFIED;
      tt->struct_vals[124].d = 0.01;
      tt->struct_vals[125].d = 0;
      tt->struct_vals[126].e = PRECIP_RATE_HYBRID;
      tt->struct_vals[127].s = tdrpStrDup("RATE_HYBRID");
      tt->struct_vals[128].s = tdrpStrDup("precip_rate_hybrid_of_zh_zzdr_kdp_and_kdpzdr");
      tt->struct_vals[129].s = tdrpStrDup("precip_rate_hybrid_of_zh_zzdr_kdp_and_kdpzdr");
      tt->struct_vals[130].s = tdrpStrDup("mm/hr");
      tt->struct_vals[131].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[132].e = OUTPUT_SCALING_SPECIFIED;
      tt->struct_vals[133].d = 0.01;
      tt->struct_vals[134].d = 0;
      tt->struct_vals[135].e = PRECIP_RATE_PID;
      tt->struct_vals[136].s = tdrpStrDup("RATE_PID");
      tt->struct_vals[137].s = tdrpStrDup("precip_rate_based_on_pid");
      tt->struct_vals[138].s = tdrpStrDup("precip_rate_based_on_pid");
      tt->struct_vals[139].s = tdrpStrDup("mm/hr");
      tt->struct_vals[140].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[141].e = OUTPUT_SCALING_SPECIFIED;
      tt->struct_vals[142].d = 0.01;
      tt->struct_vals[143].d = 0;
    tt++;
    
    // Parameter 'Comment 31'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 31");
    tt->comment_hdr = tdrpStrDup("SPECIFYING COPY-THROUGH FIELDS");
    tt->comment_text = tdrpStrDup("These fields are copied unchanged from the input file to the output file. This is a way of consolidating the output data set.");
    tt++;
    
    // Parameter 'copy_input_fields_to_output'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("copy_input_fields_to_output");
    tt->descr = tdrpStrDup("Option to copy input fields unchanged to the output file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &copy_input_fields_to_output - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'copy_fields'
    // ctype is '_copy_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("copy_fields");
    tt->descr = tdrpStrDup("These fields are copied through unchanged to the output file.");
    tt->help = tdrpStrDup("You can change the name of the field on output.");
    tt->array_offset = (char *) &_copy_fields - &_start_;
    tt->array_n_offset = (char *) &copy_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(copy_field_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("copy_field_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_copy_fields->input_name - (char *) _copy_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_copy_fields->output_name - (char *) _copy_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("censor_non_precip");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_copy_fields->censor_non_precip - (char *) _copy_fields;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("VEL");
      tt->struct_vals[1].s = tdrpStrDup("VEL");
      tt->struct_vals[2].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 32'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 32");
    tt->comment_hdr = tdrpStrDup("OUTPUT FILE FORMAT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_format'
    // ctype is '_output_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_format");
    tt->descr = tdrpStrDup("Format for the output files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_format - &_start_;
    tt->enum_def.name = tdrpStrDup("output_format_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_FORMAT_CFRADIAL");
      tt->enum_def.fields[0].val = OUTPUT_FORMAT_CFRADIAL;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_FORMAT_DORADE");
      tt->enum_def.fields[1].val = OUTPUT_FORMAT_DORADE;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_FORMAT_FORAY");
      tt->enum_def.fields[2].val = OUTPUT_FORMAT_FORAY;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_FORMAT_NEXRAD");
      tt->enum_def.fields[3].val = OUTPUT_FORMAT_NEXRAD;
      tt->enum_def.fields[4].name = tdrpStrDup("OUTPUT_FORMAT_UF");
      tt->enum_def.fields[4].val = OUTPUT_FORMAT_UF;
      tt->enum_def.fields[5].name = tdrpStrDup("OUTPUT_FORMAT_MDV_RADIAL");
      tt->enum_def.fields[5].val = OUTPUT_FORMAT_MDV_RADIAL;
    tt->single_val.e = OUTPUT_FORMAT_CFRADIAL;
    tt++;
    
    // Parameter 'netcdf_style'
    // ctype is '_netcdf_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("netcdf_style");
    tt->descr = tdrpStrDup("NetCDF style - if output_format is CFRADIAL");
    tt->help = tdrpStrDup("netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls");
    tt->val_offset = (char *) &netcdf_style - &_start_;
    tt->enum_def.name = tdrpStrDup("netcdf_style_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLASSIC");
      tt->enum_def.fields[0].val = CLASSIC;
      tt->enum_def.fields[1].name = tdrpStrDup("NC64BIT");
      tt->enum_def.fields[1].val = NC64BIT;
      tt->enum_def.fields[2].name = tdrpStrDup("NETCDF4");
      tt->enum_def.fields[2].val = NETCDF4;
      tt->enum_def.fields[3].name = tdrpStrDup("NETCDF4_CLASSIC");
      tt->enum_def.fields[3].val = NETCDF4_CLASSIC;
    tt->single_val.e = NETCDF4;
    tt++;
    
    // Parameter 'Comment 33'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 33");
    tt->comment_hdr = tdrpStrDup("OUTPUT BYTE-SWAPPING and COMPRESSION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_native_byte_order'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_native_byte_order");
    tt->descr = tdrpStrDup("Option to leave data in native byte order.");
    tt->help = tdrpStrDup("If false, data will be byte-swapped as appropriate on output.");
    tt->val_offset = (char *) &output_native_byte_order - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_compressed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_compressed");
    tt->descr = tdrpStrDup("Option to compress data fields on output.");
    tt->help = tdrpStrDup("Applies to netCDF and Dorade. UF does not support compression.");
    tt->val_offset = (char *) &output_compressed - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'compression_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("compression_level");
    tt->descr = tdrpStrDup("Compression level for output, if compressed.");
    tt->help = tdrpStrDup("Applies to netCDF only. Dorade compression is run-length encoding, and has not options..");
    tt->val_offset = (char *) &compression_level - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 34'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 34");
    tt->comment_hdr = tdrpStrDup("VOLUME OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_output_volume'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_output_volume");
    tt->descr = tdrpStrDup("Option to write the results to a volume output file.");
    tt->help = tdrpStrDup("Normally this will be set to true. However, when running analyses such as self-consistency or zdr bias, it may be preferable to suppress writing the output file, in which case this should be set to false.");
    tt->val_offset = (char *) &write_output_volume - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
      tt->enum_def.fields[3].name = tdrpStrDup("SPECIFY_FILE_NAME");
      tt->enum_def.fields[3].val = SPECIFY_FILE_NAME;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'output_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename");
    tt->descr = tdrpStrDup("Name of output file.");
    tt->help = tdrpStrDup("Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename - &_start_;
    tt->single_val.s = tdrpStrDup("cfradial.test.nc");
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_individual_sweeps'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_individual_sweeps");
    tt->descr = tdrpStrDup("Option to write out individual sweeps if appropriate.");
    tt->help = tdrpStrDup("If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.");
    tt->val_offset = (char *) &write_individual_sweeps - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
