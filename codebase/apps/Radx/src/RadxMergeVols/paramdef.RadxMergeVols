/*********************************************************
 * parameter definitions for RadxMergeVols
 *
 * Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Oct 2016
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "Merges volumes from multiple CfRadial files into a single file";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = REALTIME;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file.  "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in FILELIST mode, at least) MUST contain a "
           "day-directory below the data file -- ./data_file.ext will not "
           "work as a file path";
} mode;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is _latest_data_info file available?";
  p_help = "If TRUE, will watch the latest_data_info file. If FALSE, will scan the input directory for new files.";
} latest_data_info_avail;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to recurse to subdirectories while looking for new files.";
  p_help = "If TRUE, all subdirectories with ages less than max_dir_age will be searched. This may take considerable CPU, so be careful in its use. Only applies if latest_data_info_avail is FALSE."; 
} search_recursively;

paramdef int {
  p_default = 5;
  p_descr = "Maximum depth for recursive directory scan.";
  p_help = "Only applies search_recursively is TRUE. This is the max depth, below input_dir, to which the recursive directory search will be carried out. A depth of 0 will search the top-level directory only. A depth of 1 will search the level below the top directory, etc.";
} max_recursion_depth;

paramdef int {
  p_default = 2;
  p_min = 1;
  p_descr = "Sleep time between checking directory for input - secs.";
  p_help = "If a directory is large and files do not arrive frequently, set this to a higher value to reduce the CPU load from checking the directory. Only applies if latest_data_info_avail is FALSE.";
} wait_between_checks;

paramdef int {
  p_default = 5;
  p_descr = "File quiescence when checking for files - secs.";
  p_help = "This allows you to make sure that a file coming from a remote machine is complete before reading it. Only applies if latest_data_info_avail is FALSE.";
} file_quiescence;

commentdef {
  p_header = "DATA SOURCE LOCATIONS";
}

paramdef string {
  p_default = "/tmp/cfradial/primary";
  p_descr = "Directory for primary data set.";
  p_help = "The primary files are used to determine the search time. The secondary files are found relative to the primary time.";
} primary_dataset_dir;

commentdef {
  p_header = "MERGE_METHOD - parallel or serial";
}

typedef enum {
  MERGE_PARALLEL, MERGE_SERIAL
} merge_method_t;

paramdef enum merge_method_t {
  p_default = MERGE_PARALLEL;
  p_descr = "The method for performing the merge - PARALLEL or SERIAL";
ggre  p_help = "MERGE_PARALLEL: read volumes from different directories, that arrive at similar times. The primary_dataset_dir will be monitored for new file activity. When a new file arrives, the secondary directories will be searched for files at a similar time, and the data from those files will be merged in to the primary data set.\n\nMERGE_SERIAL: we watch a single directory for files that arrive in sequence. We examing the scanName to decide whether the volume belongs in the merged data set. Once all of the required data sets have arrived, in time order, the individual volumes are merged in time sequence, and a single output file is written with the merged volume.";
} merge_method;

commentdef {
  p_header = "MERGE_PARALLEL";
}

typedef enum {
  FIND_CLOSEST, FIND_FIRST_BEFORE, FIND_FIRST_AFTER
} find_mode_t;

typedef struct {
  string dir;
  int file_match_time_offset_sec;
  int file_match_time_tolerance_sec;
  find_mode_t find_mode;
} secondary_dataset_t;

paramdef struct secondary_dataset_t {
  p_default = {
    { "/tmp/cfradial/secondary1", 0, 60, FIND_FIRST_AFTER },
    { "/tmp/cfradial/secondary2", 0, 60, FIND_FIRST_AFTER },
    { "/tmp/cfradial/secondary3", 0, 60, FIND_FIRST_AFTER }
  };
  p_descr = "List of directories containing the data files.";
  p_help = "The geometry of secondary files will be converted to match the primary files. The file_match_time_offset_sec and file_match_time_tolerance_sec are used to search for the best secondary file to merge. The find_mode indicates how to search in time for the secondary file relative to the primary file.";
} secondary_datasets[];

commentdef {
  p_header = "MERGE_SERIAL";
  p_text = "This was developed for Vaisala volume files, which are sometime split into parts based on the PRF, max range etc. Typically a volume might be split into sub-volumes named, for example, 'VOL_A', 'VOL_B' and 'VOL_C'. The serial ingest allows you to merge these sub-volumes into a single volume, and then write out the combined volume.";
}

typedef struct {
  string vol_title;
  string scan_name;
} serial_vol_type_t;

paramdef struct serial_vol_type_t {
  p_default = {
    { "VOL_A", "VOL_A" },
    { "VOL_B", "VOL_B" },
    { "VOL_C", "VOL_C" }
  };
  p_descr = "Array of volume types for the volumes to be merged. The volume will only be written when all of the specified input volumes have arrived.";
  p_help = "If you do not want to specify a particular string property, set it to an empty string.";
} serial_vol_types[];

paramdef string {
  p_default = "MERGED";
  p_descr = "Title for merged volume.";
  p_help = "The will be applied before the volume is written out.";
} serial_merge_vol_title;

paramdef string {
  p_default = "MERGED";
  p_descr = "Scan name for merged volume.";
  p_help = "The will be applied before the volume is written out.";
} serial_merge_scan_name;

commentdef {
  p_header = "OPTIONAL FIXED ANGLE OR SWEEP NUMBER LIMITS";
  p_text = "Fixed angles are elevation in PPI mode and azimuth in RHI mode.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to set fixed angle limits";
  p_help = "Only use sweeps within the specified fixed angle limits.";
} set_fixed_angle_limits;

paramdef double {
  p_default = 0;
  p_descr = "Lower fixed angle limit - degrees.";
} lower_fixed_angle_limit;

paramdef double {
  p_default = 90;
  p_descr = "Upper fixed angle limit - degrees.";
} upper_fixed_angle_limit;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set sweep number limits";
  p_help = "Only read sweeps within the specified sweep number limits.";
} set_sweep_num_limits;

paramdef int {
  p_default = 0;
  p_descr = "Lower sweep number limit.";
} lower_sweep_num;

paramdef int {
  p_default = 0;
  p_descr = "Upper sweep number limit.";
} upper_sweep_num;

commentdef {
  p_header = "OPTION TO CHECK FOR CONSTANT GEOMETRY";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to check that the ray geometry does not change.";
  p_help = "If true, will only merge rays with the same geometry as the primary volume. If false, secondary rays will be remapped to the primary ray geometry.";
} check_constant_geometry;

commentdef {
  p_header = "SWEEP FILE AGGREGATION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to aggregate sweep files into a volume on read.";
  p_help = "If false, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.";
} aggregate_sweep_files_on_read;

commentdef {
  p_header = "OUTPUT FORMAT";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_UF,
  OUTPUT_FORMAT_MDV_RADIAL
} output_format_t;

paramdef enum output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL;
  p_descr = "Format for the output files.";
} output_format;

commentdef {
  p_header = "OUTPUT OPTIONS FOR CFRADIAL FILES";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to force the use of ragged arrays for CfRadial files.";
  p_help = "Only applies to CfRadial. If true, forces the use of ragged arrays even if the number of gates for all rays is constant.";
} output_force_ngates_vary;

paramdef int {
  p_default = 4;
  p_descr = "Compression level for output, if compressed.";
  p_help = "Applies to netCDF only. Dorade compression is run-length encoding, and has not options..";
} compression_level;

commentdef {
  p_header = "OUTPUT DIRECTORY AND FILE NAME";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY,
  SPECIFY_FILE_NAME
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.";
} output_filename_mode;

paramdef string {
  p_default = "cfradial.test.nc";
  p_descr = "Name of output file.";
  p_help = "Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.";
} output_filename;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

commentdef {
  p_header = "OPTION TO OVERRIDE MISSING VALUES";
  p_text = "Missing values are applicable to both metadata and field data. The default values should be satisfactory for most purposes. However, you can choose to override these if you are careful with the selected values.\n\nThe default values for metadata are:\n\tmissingMetaDouble = -9999.0\n\tmissingMetaFloat = -9999.0\n\tmissingMetaInt = -9999\n\tmissingMetaChar = -128\n\nThe default values for field data are:\n\tmissingFl64 = -9.0e33\n\tmissingFl32 = -9.0e33\n\tmissingSi32 = -2147483647\n\tmissingSi16 = -32768\n\tmissingSi08 = -128\n\n";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the missing values for meta-data";
  p_help = "See following parameter options.";
} override_missing_metadata_values;

paramdef double {
  p_default = -9999.0;
  p_descr = "Missing value for metadata of type double.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_double;

paramdef float {
  p_default = -9999.0;
  p_descr = "Missing value for metadata of type float.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_float;

paramdef int {
  p_default = -9999;
  p_descr = "Missing value for metadata of type int.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_int;

paramdef int {
  p_default = -128;
  p_descr = "Missing value for metadata of type char.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_char;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the missing values for field data";
  p_help = "See following parameter options.";
} override_missing_field_values;

paramdef double {
  p_default = -9.0e33;
  p_descr = "Missing value for field data of type 64-bit float.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_fl64;

paramdef double {
  p_default = -9.0e33;
  p_descr = "Missing value for field data of type 32-bit float.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_fl32;

paramdef int {
  p_default = -2147483647;
  p_descr = "Missing value for field data of type 32-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si32;

paramdef int {
  p_default = -232768;
  p_descr = "Missing value for field data of type 16-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si16;

paramdef int {
  p_default = -128;
  p_descr = "Missing value for field data of type 8-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si08;

