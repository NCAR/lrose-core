/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxSunMon
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Searches for sun spikes in radar volumes, performs solar analysis");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("READING THE VOLUME MOMENTS DATA");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, we wait for a new input file.  It is assumed that latest_data_info will be availble in realtime mode. In ARCHIVE mode, we move through the data between the start and end times set on the command line. In FILELIST mode, we move through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'moments_input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("moments_input_dir");
    tt->descr = tdrpStrDup("Input directory for moments files.");
    tt->help = tdrpStrDup("These are the files we are analyzing for changes in the clutter field.");
    tt->val_offset = (char *) &moments_input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./cfradial/moments");
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("INPUT FIELD NAMES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'dbmhc_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dbmhc_field_name");
    tt->descr = tdrpStrDup("Field name for power in H co-polar channel.");
    tt->help = tdrpStrDup("If not available, leave empty");
    tt->val_offset = (char *) &dbmhc_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBMHC");
    tt++;
    
    // Parameter 'dbmvc_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dbmvc_field_name");
    tt->descr = tdrpStrDup("Field name for power in V co-polar channel.");
    tt->help = tdrpStrDup("If not available, leave empty");
    tt->val_offset = (char *) &dbmvc_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBMVC");
    tt++;
    
    // Parameter 'dbmhx_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dbmhx_field_name");
    tt->descr = tdrpStrDup("Field name for power in H cross-polar channel.");
    tt->help = tdrpStrDup("If not available, leave empty");
    tt->val_offset = (char *) &dbmhx_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBMHX");
    tt++;
    
    // Parameter 'dbmvx_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dbmvx_field_name");
    tt->descr = tdrpStrDup("Field name for power in V cross-polar channel.");
    tt->help = tdrpStrDup("If not available, leave empty");
    tt->val_offset = (char *) &dbmvx_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBMVX");
    tt++;
    
    // Parameter 'estimate_dbmhc_from_dbz'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("estimate_dbmhc_from_dbz");
    tt->descr = tdrpStrDup("Option to compute DBMHC from dbz field.");
    tt->help = tdrpStrDup("If the HC power field is not available, we can compute it from reflectivity, given the radar constant and range correction.");
    tt->val_offset = (char *) &estimate_dbmhc_from_dbz - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_atmos_atten_in_dbmhc_estimation'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_atmos_atten_in_dbmhc_estimation");
    tt->descr = tdrpStrDup("Option to account for atmospheric attenuation when estimating dbmhc from dbz.");
    tt->help = tdrpStrDup("If atmospheric attenuation was considered in computing dbz from power, we must reverse that process to estimate dbmhc from dbz.");
    tt->val_offset = (char *) &use_atmos_atten_in_dbmhc_estimation - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'dbz_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dbz_field_name");
    tt->descr = tdrpStrDup("Field name for reflectivity.");
    tt->help = tdrpStrDup("See 'estimate_dbmhc_from_dbz");
    tt->val_offset = (char *) &dbz_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'radar_constant_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_constant_db");
    tt->descr = tdrpStrDup("Radar constant (dB).");
    tt->help = tdrpStrDup("Use meters, watts, radians to compute this value. It should be a negative number, of around -67 for Sband, -60 for C band, for a 500KW transmitter and 1 degree beam width");
    tt->val_offset = (char *) &radar_constant_db - &_start_;
    tt->single_val.d = -67;
    tt++;
    
    // Parameter 'vel_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vel_field_name");
    tt->descr = tdrpStrDup("Field name for radial velocity.");
    tt->help = tdrpStrDup("This is required for finding the sun as a noise source");
    tt->val_offset = (char *) &vel_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'ncp_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ncp_field_name");
    tt->descr = tdrpStrDup("Field name for NCP.");
    tt->help = tdrpStrDup("NCP is normalized coherent power. If it is not available, it can be estimated from spectrum width. See below. NCP is required for finding the sun as a noise source");
    tt->val_offset = (char *) &ncp_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("NCP");
    tt++;
    
    // Parameter 'estimate_ncp_from_spectrum_width'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("estimate_ncp_from_spectrum_width");
    tt->descr = tdrpStrDup("Option to estimate NCP from spectrum width.");
    tt->help = tdrpStrDup("This should be set to true if NCP is not available.");
    tt->val_offset = (char *) &estimate_ncp_from_spectrum_width - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'width_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("width_field_name");
    tt->descr = tdrpStrDup("Field name for spectrum width.");
    tt->help = tdrpStrDup("This applies if 'estimate_ncp_from_spectrum_width' is true.");
    tt->val_offset = (char *) &width_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("WIDTH");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("OPTION TO CORRECT ANTENNA ANGLES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_azimuth_offset'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_azimuth_offset");
    tt->descr = tdrpStrDup("Option to apply an offset to the azimuth values.");
    tt->help = tdrpStrDup("If TRUE, this offset will be ADDED to the measured azimuth angles. This is useful, for example, in the case of a mobile platform which is not set up oriented to true north. Suppose you have a truck (like the DOWs) which is oriented off true north. Then if you add in the truck HEADING relative to true north, the measured azimuth angles will be adjusted by the heading, to give azimuth relative to TRUE north.");
    tt->val_offset = (char *) &apply_azimuth_offset - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'azimuth_offset'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("azimuth_offset");
    tt->descr = tdrpStrDup("Azimuth offset (degrees).");
    tt->help = tdrpStrDup("See 'apply_azimuth_offset'. This value will be ADDED to the measured azimuths.");
    tt->val_offset = (char *) &azimuth_offset - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'apply_elevation_offset'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_elevation_offset");
    tt->descr = tdrpStrDup("Option to apply an offset to the elevation values.");
    tt->help = tdrpStrDup("If TRUE, this offset will be ADDED to the measured elevation angles. This is useful to correct for a systematic bias in measured elevation angles.");
    tt->val_offset = (char *) &apply_elevation_offset - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'elevation_offset'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("elevation_offset");
    tt->descr = tdrpStrDup("Elevation offset (degrees).");
    tt->help = tdrpStrDup("See 'apply_elevation_offset'. This value will be ADDED to the measured elevations.");
    tt->val_offset = (char *) &elevation_offset - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE RADAR LOCATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_radar_location'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_location");
    tt->descr = tdrpStrDup("Option to override the radar location.");
    tt->help = tdrpStrDup("If true, the location in this file will be used. If not, the location in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_location - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_latitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_latitude_deg");
    tt->descr = tdrpStrDup("Radar latitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_latitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_longitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_longitude_deg");
    tt->descr = tdrpStrDup("Radar longitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_longitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_altitude_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_altitude_meters");
    tt->descr = tdrpStrDup("Radar altitude (meters).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_altitude_meters - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'change_radar_latitude_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_radar_latitude_sign");
    tt->descr = tdrpStrDup("Option to negate the latitude.");
    tt->help = tdrpStrDup("Mainly useful for RAPIC files. In RAPIC, latitude is always positive, so mostly you need to set the latitiude to the negative value of itself.");
    tt->val_offset = (char *) &change_radar_latitude_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("SUNSCAN ANALYSIS");
    tt->comment_text = tdrpStrDup("We use 'strong' clutter to montitor the clutter power change over time, and 'weak' clutter to detect the presence of weather echoes in the clutter field.");
    tt++;
    
    // Parameter 'elevation_search_margin_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("elevation_search_margin_deg");
    tt->descr = tdrpStrDup("Sun search margin in elevation (deg).");
    tt->help = tdrpStrDup("We only consider rays within this margin of the theoretical sun position.");
    tt->val_offset = (char *) &elevation_search_margin_deg - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'azimuth_search_margin_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("azimuth_search_margin_deg");
    tt->descr = tdrpStrDup("Sun search margin in azimuth (deg).");
    tt->help = tdrpStrDup("We only consider rays within this margin of the theoretical sun position.");
    tt->val_offset = (char *) &azimuth_search_margin_deg - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'sun_analysis_min_elevation_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sun_analysis_min_elevation_deg");
    tt->descr = tdrpStrDup("Min elevation angle for sun analysis (deg).");
    tt->help = tdrpStrDup("We do not use the sun when its elevation is below this limit.");
    tt->val_offset = (char *) &sun_analysis_min_elevation_deg - &_start_;
    tt->single_val.d = 1.25;
    tt++;
    
    // Parameter 'power_correction_curve'
    // ctype is '_power_curve_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("power_correction_curve");
    tt->descr = tdrpStrDup("Correction in power for radar not pointed directly at the sun.");
    tt->help = tdrpStrDup("These corrections are ADDED to the measured sun power to get the corrected sun power. This curve must be determined experimentally by performing a box scan around the sun. We assume a uniform reduction in power as we move away from the sun center in any direction. The angular_offset values must start at 0 and increase through the list.");
    tt->array_offset = (char *) &_power_correction_curve - &_start_;
    tt->array_n_offset = (char *) &power_correction_curve_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(power_curve_t);
    tt->array_n = 22;
    tt->struct_def.name = tdrpStrDup("power_curve_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("angular_offset_deg");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_power_correction_curve->angular_offset_deg - (char *) _power_correction_curve;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("power_correction_db");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_power_correction_curve->power_correction_db - (char *) _power_correction_curve;
    tt->n_struct_vals = 44;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0.1;
      tt->struct_vals[3].d = 0.2;
      tt->struct_vals[4].d = 0.18;
      tt->struct_vals[5].d = 0.36;
      tt->struct_vals[6].d = 0.23;
      tt->struct_vals[7].d = 0.6;
      tt->struct_vals[8].d = 0.32;
      tt->struct_vals[9].d = 1.25;
      tt->struct_vals[10].d = 0.42;
      tt->struct_vals[11].d = 2.15;
      tt->struct_vals[12].d = 0.51;
      tt->struct_vals[13].d = 3.25;
      tt->struct_vals[14].d = 0.57;
      tt->struct_vals[15].d = 4;
      tt->struct_vals[16].d = 0.68;
      tt->struct_vals[17].d = 5.4;
      tt->struct_vals[18].d = 0.72;
      tt->struct_vals[19].d = 6.25;
      tt->struct_vals[20].d = 0.78;
      tt->struct_vals[21].d = 7.2;
      tt->struct_vals[22].d = 0.84;
      tt->struct_vals[23].d = 8.2;
      tt->struct_vals[24].d = 0.88;
      tt->struct_vals[25].d = 9.1;
      tt->struct_vals[26].d = 0.91;
      tt->struct_vals[27].d = 10.3;
      tt->struct_vals[28].d = 0.96;
      tt->struct_vals[29].d = 11.3;
      tt->struct_vals[30].d = 1;
      tt->struct_vals[31].d = 12.6;
      tt->struct_vals[32].d = 1.07;
      tt->struct_vals[33].d = 13.6;
      tt->struct_vals[34].d = 1.13;
      tt->struct_vals[35].d = 15;
      tt->struct_vals[36].d = 1.21;
      tt->struct_vals[37].d = 16.2;
      tt->struct_vals[38].d = 1.28;
      tt->struct_vals[39].d = 18;
      tt->struct_vals[40].d = 1.32;
      tt->struct_vals[41].d = 19.3;
      tt->struct_vals[42].d = 1.38;
      tt->struct_vals[43].d = 20;
    tt++;
    
    // Parameter 'correct_measured_powers_for_atmos_atten'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("correct_measured_powers_for_atmos_atten");
    tt->descr = tdrpStrDup("Option to correct the measured sun power for atmospheric attenuation.");
    tt->help = tdrpStrDup("The power from the sun arriving at the antenna is attenuated by a 1-way trip through the atmosphere. This should be corrected for.");
    tt->val_offset = (char *) &correct_measured_powers_for_atmos_atten - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_angle_offset_for_power_estimation'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_angle_offset_for_power_estimation");
    tt->descr = tdrpStrDup("Max angular offset for valid observation (deg).");
    tt->help = tdrpStrDup("For power estimation purposes, we will only consider angular offsets up to this limit.");
    tt->val_offset = (char *) &max_angle_offset_for_power_estimation - &_start_;
    tt->single_val.d = 0.7;
    tt++;
    
    // Parameter 'max_angle_offset_for_pointing_estimation'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_angle_offset_for_pointing_estimation");
    tt->descr = tdrpStrDup("Max angular offset for estimating antenna pointing error (deg).");
    tt->help = tdrpStrDup("For pointing estimation purposes, we will only consider angular offsets up to this limit.");
    tt->val_offset = (char *) &max_angle_offset_for_pointing_estimation - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'theoretical_max_dbmhc'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("theoretical_max_dbmhc");
    tt->descr = tdrpStrDup("Theoretical max H co-polar power likely to be observed (dBm).");
    tt->help = tdrpStrDup("When computing pointing statistics, we want to give more weight to the higher observed powers. This max value tells us how to weight the observed angle offsets for computing antenna pointing accuracy.");
    tt->val_offset = (char *) &theoretical_max_dbmhc - &_start_;
    tt->single_val.d = -96;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("SUN NOISE SOURCE DETECTION");
    tt->comment_text = tdrpStrDup("The sun appears to the radar as an incoherent and unpolarized noise source. Therefore we can use noise detection to identify rays that show sun spikes.");
    tt++;
    
    // Parameter 'noise_ngates_kernel'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("noise_ngates_kernel");
    tt->descr = tdrpStrDup("Number of gates over which the noise detection feature fields are computed.");
    tt->help = tdrpStrDup("To identify noise at a gate, we accumulate the phase change in range for the entire ray. We then assume that the phase change will be linear in a local sense, i.e. within some region around each gate. This parameter specifies the length of the assumed linear region. The phase change error is computed as the mean absolute error between the actual accumulated phase change and the linear fit to the phase change over the local region. NOTE - this number should be odd.");
    tt->val_offset = (char *) &noise_ngates_kernel - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'noise_min_ngates_for_ray_median'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("noise_min_ngates_for_ray_median");
    tt->descr = tdrpStrDup("Min number of gates for computing median noise on a ray.");
    tt->help = tdrpStrDup("In order to compute median noise for a ray, we require noise to be detected at at least this number of gates");
    tt->val_offset = (char *) &noise_min_ngates_for_ray_median - &_start_;
    tt->single_val.i = 200;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("INTEREST MAPS and WEIGHTS for NOISE LOCATION");
    tt->comment_text = tdrpStrDup("Each map should hold at least 2 points. The points should be increasing in value, i.e. the value should increase for each subsequent point. The various interest values are combined using the specified weights in a weighted mean to produce the final interest value.");
    tt++;
    
    // Parameter 'phase_change_error_for_noise_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_noise_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for phase change for noise.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_phase_change_error_for_noise_interest_map - &_start_;
    tt->array_n_offset = (char *) &phase_change_error_for_noise_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_phase_change_error_for_noise_interest_map->value - (char *) _phase_change_error_for_noise_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_phase_change_error_for_noise_interest_map->interest - (char *) _phase_change_error_for_noise_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 35;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 45;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'phase_change_error_for_noise_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_noise_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for phase change error - for noise.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &phase_change_error_for_noise_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'dbm_sdev_for_noise_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_noise_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for sdev of dbm for noise.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_dbm_sdev_for_noise_interest_map - &_start_;
    tt->array_n_offset = (char *) &dbm_sdev_for_noise_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_dbm_sdev_for_noise_interest_map->value - (char *) _dbm_sdev_for_noise_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_dbm_sdev_for_noise_interest_map->interest - (char *) _dbm_sdev_for_noise_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.65;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.75;
      tt->struct_vals[3].d = 0.001;
    tt++;
    
    // Parameter 'dbm_sdev_for_noise_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_noise_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of dbm - for noise.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &dbm_sdev_for_noise_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'ncp_mean_for_noise_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ncp_mean_for_noise_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for mean of ncp for noise.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_ncp_mean_for_noise_interest_map - &_start_;
    tt->array_n_offset = (char *) &ncp_mean_for_noise_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_ncp_mean_for_noise_interest_map->value - (char *) _ncp_mean_for_noise_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_ncp_mean_for_noise_interest_map->interest - (char *) _ncp_mean_for_noise_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.1;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.2;
      tt->struct_vals[3].d = 0.001;
    tt++;
    
    // Parameter 'ncp_mean_for_noise_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ncp_mean_for_noise_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of dbm - for noise.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &ncp_mean_for_noise_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'interest_threshold_for_noise'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("interest_threshold_for_noise");
    tt->descr = tdrpStrDup("Threshold interest value for identifying noise.");
    tt->help = tdrpStrDup("If the fuzzy interest value exceeds this threshold, noise is assumed to exist at that gate.");
    tt->val_offset = (char *) &interest_threshold_for_noise - &_start_;
    tt->single_val.d = 0.51;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("OPTION TO COMPUTE CROSS-POLAR POWER RATIO IN CLUTTER");
    tt->comment_text = tdrpStrDup("For an alternating-mode radar, we can compute the cross-polar ratio and hence the ZDR bias");
    tt++;
    
    // Parameter 'compute_cross_pol_ratio_in_clutter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_cross_pol_ratio_in_clutter");
    tt->descr = tdrpStrDup("Option to compute cross-polar power ratio in clutter.");
    tt->help = tdrpStrDup("This is only applicable for alternating mode radars such as SPOL.");
    tt->val_offset = (char *) &compute_cross_pol_ratio_in_clutter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'clutter_min_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clutter_min_range_km");
    tt->descr = tdrpStrDup("Specified minimum range for clutter (km).");
    tt->help = tdrpStrDup("Gates closer than this range are ignored.");
    tt->val_offset = (char *) &clutter_min_range_km - &_start_;
    tt->single_val.d = 5;
    tt++;
    
    // Parameter 'clutter_max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clutter_max_range_km");
    tt->descr = tdrpStrDup("Specified maximum range (km).");
    tt->help = tdrpStrDup("Gates beyond this range are ignored.");
    tt->val_offset = (char *) &clutter_max_range_km - &_start_;
    tt->single_val.d = 36;
    tt++;
    
    // Parameter 'clutter_min_elevation_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clutter_min_elevation_deg");
    tt->descr = tdrpStrDup("Specified minimum elevation for clutter (deg).");
    tt->help = tdrpStrDup("Angles below this are ignored.");
    tt->val_offset = (char *) &clutter_min_elevation_deg - &_start_;
    tt->single_val.d = 0.25;
    tt++;
    
    // Parameter 'clutter_max_elevation_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clutter_max_elevation_deg");
    tt->descr = tdrpStrDup("Specified maximum elevation for clutter (deg).");
    tt->help = tdrpStrDup("Elevations above this are ignored.");
    tt->val_offset = (char *) &clutter_max_elevation_deg - &_start_;
    tt->single_val.d = 0.75;
    tt++;
    
    // Parameter 'clutter_min_power_dbm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clutter_min_power_dbm");
    tt->descr = tdrpStrDup("Minimum power for clutter (dBm).");
    tt->help = tdrpStrDup("We set this to provide a reasonable minimum SNR.");
    tt->val_offset = (char *) &clutter_min_power_dbm - &_start_;
    tt->single_val.d = -80;
    tt++;
    
    // Parameter 'clutter_max_power_dbm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clutter_max_power_dbm");
    tt->descr = tdrpStrDup("Maximum power for clutter (dBm).");
    tt->help = tdrpStrDup("We need to ensure that we do not include gates where the receiver is saturated. So set this to a value 5 dB or more below saturation.");
    tt->val_offset = (char *) &clutter_max_power_dbm - &_start_;
    tt->single_val.d = -40;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("RETRIEVING SITE TEMPERATURE FROM SPDB");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_site_temp_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_site_temp_from_spdb");
    tt->descr = tdrpStrDup("Option to read site temperature from SPDB.");
    tt->help = tdrpStrDup("The temperature closest to the radar volume time will be read in.");
    tt->val_offset = (char *) &read_site_temp_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'site_temp_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_spdb_url");
    tt->descr = tdrpStrDup("URL for temperatures from SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://hail:0:pecan/spdb/spol/temp");
    tt++;
    
    // Parameter 'site_temp_station_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_station_name");
    tt->descr = tdrpStrDup("Station name for site temperature.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_station_name - &_start_;
    tt->single_val.s = tdrpStrDup("SPOL");
    tt++;
    
    // Parameter 'site_temp_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("site_temp_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin when finding site temp data (secs).");
    tt->help = tdrpStrDup("We search for the temperature closest in time to the radar volume. This is the search margin on either side of the volume time.");
    tt->val_offset = (char *) &site_temp_search_margin_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("WRITE RESULTS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_results_to_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_results_to_spdb");
    tt->descr = tdrpStrDup("Option to write out analysis results to SPDB.");
    tt->help = tdrpStrDup("The results will be written in XML, stored in SPDB. The data can then be retrieved for plotting or other purposes.");
    tt->val_offset = (char *) &write_results_to_spdb - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'spdb_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("spdb_output_url");
    tt->descr = tdrpStrDup("URL for writing results to SPDB XML.");
    tt->help = tdrpStrDup("For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir");
    tt->val_offset = (char *) &spdb_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/spdb/radx_sun_mon");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
