/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxCov2Mom
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("RadxCov2Mom reads covariances in Radx-supported format files, computes the moments and writes out the results to Radx-supported format files.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("THREADING FOR SPEED.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_multiple_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_multiple_threads");
    tt->descr = tdrpStrDup("Option to use multiple compute threads to improve performance.");
    tt->help = tdrpStrDup("The read and write stages occur in the main thread, since netCDF is not thread safe. The compute stage can be multi-threaded to improve performance.");
    tt->val_offset = (char *) &use_multiple_threads - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'n_compute_threads'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_compute_threads");
    tt->descr = tdrpStrDup("The number of compute threads.");
    tt->help = tdrpStrDup("The moments computations are segmented in range, with each thread computing a fraction of the number of gates. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads.");
    tt->val_offset = (char *) &n_compute_threads - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file.  In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = FILELIST;
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("READ OPTIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'aggregate_sweep_files_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("aggregate_sweep_files_on_read");
    tt->descr = tdrpStrDup("Option to aggregate sweep files into a volume on read.");
    tt->help = tdrpStrDup("If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.");
    tt->val_offset = (char *) &aggregate_sweep_files_on_read - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ignore_idle_scan_mode_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("ignore_idle_scan_mode_on_read");
    tt->descr = tdrpStrDup("Option to ignore data taken in IDLE mode.");
    tt->help = tdrpStrDup("If true, on read will ignore files with an IDLE scan mode.");
    tt->val_offset = (char *) &ignore_idle_scan_mode_on_read - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'optimize_surveillance_transitions'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("optimize_surveillance_transitions");
    tt->descr = tdrpStrDup("Optimize the transitions in surveillance mode.");
    tt->help = tdrpStrDup("If true, we check the transitions between sweeps in surveillance mode, and move problem rays into the correct sweep. We also set the transition flag on/off based on the max elevation error speficied. See below.");
    tt->val_offset = (char *) &optimize_surveillance_transitions - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'optimized_transitions_max_elev_error'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("optimized_transitions_max_elev_error");
    tt->descr = tdrpStrDup("Max elevation angle error when optimizing surveillance transitions (degrees).");
    tt->help = tdrpStrDup("If the difference between the fixed angle and measured angle exceeds this value, the transition flag will be set. If not, it will be cleared.");
    tt->val_offset = (char *) &optimized_transitions_max_elev_error - &_start_;
    tt->single_val.d = 0.25;
    tt++;
    
    // Parameter 'trim_surveillance_sweeps_to_360deg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("trim_surveillance_sweeps_to_360deg");
    tt->descr = tdrpStrDup("Option to trip surveillance sweeps so that they only cover 360 degrees.");
    tt->help = tdrpStrDup("Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.");
    tt->val_offset = (char *) &trim_surveillance_sweeps_to_360deg - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remove_rays_with_antenna_transitions'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_rays_with_antenna_transitions");
    tt->descr = tdrpStrDup("Option to remove rays taken while the antenna was in transition.");
    tt->help = tdrpStrDup("If true, rays with the transition flag set will not be used. The transiton flag is set when the antenna is in transtion between one sweep and the next.");
    tt->val_offset = (char *) &remove_rays_with_antenna_transitions - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'transition_nrays_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("transition_nrays_margin");
    tt->descr = tdrpStrDup("Number of transition rays to include as a margin");
    tt->help = tdrpStrDup("Sometimes the transition flag is turned on too early in a transition, on not turned off quickly enough after a transition. If you set this to a number greater than 0, that number of rays will be included at each end of the transition, i.e. the transition will effectively be shorter at each end by this number of rays.");
    tt->val_offset = (char *) &transition_nrays_margin - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'compute_sweep_fixed_angles_from_rays'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_sweep_fixed_angles_from_rays");
    tt->descr = tdrpStrDup("Option to compute sweep fixed angles using the angles in the data.");
    tt->help = tdrpStrDup("Normally the sweep angles are set using the scan strategy angles - i.e., the theoretically perfect angles. This option allows you to recompute the sweep angles using the measured elevation angles (in PPI mode) or azimuth angles (in RHI mode).");
    tt->val_offset = (char *) &compute_sweep_fixed_angles_from_rays - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'compute_sweep_modes_from_ray_angles'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_sweep_modes_from_ray_angles");
    tt->descr = tdrpStrDup("Option to set the sweep mode by inspecting the ray angles.");
    tt->help = tdrpStrDup("If the sweep modes are not correct, we can inspect the ray angles to deduce what the antenna scan motion was, and set the sweep mode accordingly.");
    tt->val_offset = (char *) &compute_sweep_modes_from_ray_angles - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_max_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_max_range");
    tt->descr = tdrpStrDup("Option to set the max range for any ray.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_max_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km");
    tt->descr = tdrpStrDup("Specified maximim range - km.");
    tt->help = tdrpStrDup("Gates beyond this range are removed.");
    tt->val_offset = (char *) &max_range_km - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'set_ngates_constant'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_ngates_constant");
    tt->descr = tdrpStrDup("Option to force the number of gates to be constant.");
    tt->help = tdrpStrDup("If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.");
    tt->val_offset = (char *) &set_ngates_constant - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_fixed_angle_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_fixed_angle_limits");
    tt->descr = tdrpStrDup("Option to set fixed angle limits");
    tt->help = tdrpStrDup("Only use sweeps within the specified fixed angle limits.");
    tt->val_offset = (char *) &set_fixed_angle_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("lower_fixed_angle_limit");
    tt->descr = tdrpStrDup("Lower fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_fixed_angle_limit - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'upper_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("upper_fixed_angle_limit");
    tt->descr = tdrpStrDup("Upper fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_fixed_angle_limit - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'set_sweep_num_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_sweep_num_limits");
    tt->descr = tdrpStrDup("Option to set sweep number limits");
    tt->help = tdrpStrDup("Only read sweeps within the specified sweep number limits.");
    tt->val_offset = (char *) &set_sweep_num_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("lower_sweep_num");
    tt->descr = tdrpStrDup("Lower sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'upper_sweep_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("upper_sweep_num");
    tt->descr = tdrpStrDup("Upper sweep number limit.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_sweep_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("CHECKING SWEEP DATA");
    tt->comment_text = tdrpStrDup("Checking whether sweeps should be included.");
    tt++;
    
    // Parameter 'check_min_rays_in_sweep'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_min_rays_in_sweep");
    tt->descr = tdrpStrDup("Option to check the number of rays in a sweep.");
    tt->help = tdrpStrDup("If TRUE, a sweep is only considered valid if the number of rays exceeds 'min_rays_in_sweep'.");
    tt->val_offset = (char *) &check_min_rays_in_sweep - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_rays_in_sweep'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_rays_in_sweep");
    tt->descr = tdrpStrDup("The min number of rays for a sweep to be valid.");
    tt->help = tdrpStrDup("If the number of rays is less than this, the sweep is removed. See 'check_min_rays_in_sweep'.");
    tt->val_offset = (char *) &min_rays_in_sweep - &_start_;
    tt->single_val.i = 180;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE RADAR LOCATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_radar_location'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_location");
    tt->descr = tdrpStrDup("Option to override the radar location.");
    tt->help = tdrpStrDup("If true, the location in this file will be used. If not, the location in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_location - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_latitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_latitude_deg");
    tt->descr = tdrpStrDup("Radar latitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_latitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_longitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_longitude_deg");
    tt->descr = tdrpStrDup("Radar longitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_longitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_altitude_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_altitude_meters");
    tt->descr = tdrpStrDup("Radar altitude (meters).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_altitude_meters - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("INPUT COVARIANCE FIELDS");
    tt->comment_text = tdrpStrDup("Finding the names of covariance fields in the input files.");
    tt++;
    
    // Parameter 'input_covars'
    // ctype is '_input_covar_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("input_covars");
    tt->descr = tdrpStrDup("Indicate which field name is to be used for each covariance.");
    tt->help = tdrpStrDup("Set the field name for each covariance type. If the covariance is not available in the input field, it will be set to missing.");
    tt->array_offset = (char *) &_input_covars - &_start_;
    tt->array_n_offset = (char *) &input_covars_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(input_covar_t);
    tt->array_n = 30;
    tt->struct_def.name = tdrpStrDup("input_covar_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("covariance_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("field_id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_input_covars->field_id - (char *) _input_covars;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("covariance_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 30;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("LAG0_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[0].val = LAG0_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("LAG0_HX_DB");
        tt->struct_def.fields[0].enum_def.fields[1].val = LAG0_HX_DB;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("LAG0_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[2].val = LAG0_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("LAG0_VX_DB");
        tt->struct_def.fields[0].enum_def.fields[3].val = LAG0_VX_DB;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("LAG0_HCVX_DB");
        tt->struct_def.fields[0].enum_def.fields[4].val = LAG0_HCVX_DB;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("LAG0_HCVX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[5].val = LAG0_HCVX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("LAG0_VCHX_DB");
        tt->struct_def.fields[0].enum_def.fields[6].val = LAG0_VCHX_DB;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("LAG0_VCHX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[7].val = LAG0_VCHX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("LAG0_VXHX_DB");
        tt->struct_def.fields[0].enum_def.fields[8].val = LAG0_VXHX_DB;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("LAG0_VXHX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[9].val = LAG0_VXHX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("LAG1_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[10].val = LAG1_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("LAG1_HC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[11].val = LAG1_HC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("LAG1_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[12].val = LAG1_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("LAG1_VC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[13].val = LAG1_VC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("LAG1_HCVC_DB");
        tt->struct_def.fields[0].enum_def.fields[14].val = LAG1_HCVC_DB;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("LAG1_HCVC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[15].val = LAG1_HCVC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("LAG1_VCHC_DB");
        tt->struct_def.fields[0].enum_def.fields[16].val = LAG1_VCHC_DB;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("LAG1_VCHC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[17].val = LAG1_VCHC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("LAG1_VXHX_DB");
        tt->struct_def.fields[0].enum_def.fields[18].val = LAG1_VXHX_DB;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("LAG1_VXHX_PHASE");
        tt->struct_def.fields[0].enum_def.fields[19].val = LAG1_VXHX_PHASE;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("LAG2_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[20].val = LAG2_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("LAG2_HC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[21].val = LAG2_HC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("LAG2_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[22].val = LAG2_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("LAG2_VC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[23].val = LAG2_VC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("LAG3_HC_DB");
        tt->struct_def.fields[0].enum_def.fields[24].val = LAG3_HC_DB;
        tt->struct_def.fields[0].enum_def.fields[25].name = tdrpStrDup("LAG3_HC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[25].val = LAG3_HC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[26].name = tdrpStrDup("LAG3_VC_DB");
        tt->struct_def.fields[0].enum_def.fields[26].val = LAG3_VC_DB;
        tt->struct_def.fields[0].enum_def.fields[27].name = tdrpStrDup("LAG3_VC_PHASE");
        tt->struct_def.fields[0].enum_def.fields[27].val = LAG3_VC_PHASE;
        tt->struct_def.fields[0].enum_def.fields[28].name = tdrpStrDup("RVVHH0_DB");
        tt->struct_def.fields[0].enum_def.fields[28].val = RVVHH0_DB;
        tt->struct_def.fields[0].enum_def.fields[29].name = tdrpStrDup("RVVHH0_PHASE");
        tt->struct_def.fields[0].enum_def.fields[29].val = RVVHH0_PHASE;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_input_covars->field_name - (char *) _input_covars;
    tt->n_struct_vals = 60;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = LAG0_HC_DB;
      tt->struct_vals[1].s = tdrpStrDup("LAG0_HC_DB");
      tt->struct_vals[2].e = LAG0_HX_DB;
      tt->struct_vals[3].s = tdrpStrDup("LAG0_HX_DB");
      tt->struct_vals[4].e = LAG0_VC_DB;
      tt->struct_vals[5].s = tdrpStrDup("LAG0_VC_DB");
      tt->struct_vals[6].e = LAG0_VX_DB;
      tt->struct_vals[7].s = tdrpStrDup("LAG0_VX_DB");
      tt->struct_vals[8].e = LAG0_HCVX_DB;
      tt->struct_vals[9].s = tdrpStrDup("LAG0_HCVX_DB");
      tt->struct_vals[10].e = LAG0_HCVX_PHASE;
      tt->struct_vals[11].s = tdrpStrDup("LAG0_HCVX_PHASE");
      tt->struct_vals[12].e = LAG0_VCHX_DB;
      tt->struct_vals[13].s = tdrpStrDup("LAG0_VCHX_DB");
      tt->struct_vals[14].e = LAG0_VCHX_PHASE;
      tt->struct_vals[15].s = tdrpStrDup("LAG0_VCHX_PHASE");
      tt->struct_vals[16].e = LAG0_VXHX_DB;
      tt->struct_vals[17].s = tdrpStrDup("LAG0_VXHX_DB");
      tt->struct_vals[18].e = LAG0_VXHX_PHASE;
      tt->struct_vals[19].s = tdrpStrDup("LAG0_VXHX_PHASE");
      tt->struct_vals[20].e = LAG1_HC_DB;
      tt->struct_vals[21].s = tdrpStrDup("LAG1_HC_DB");
      tt->struct_vals[22].e = LAG1_HC_PHASE;
      tt->struct_vals[23].s = tdrpStrDup("LAG1_HC_PHASE");
      tt->struct_vals[24].e = LAG1_VC_DB;
      tt->struct_vals[25].s = tdrpStrDup("LAG1_VC_DB");
      tt->struct_vals[26].e = LAG1_VC_PHASE;
      tt->struct_vals[27].s = tdrpStrDup("LAG1_VC_PHASE");
      tt->struct_vals[28].e = LAG1_HCVC_DB;
      tt->struct_vals[29].s = tdrpStrDup("LAG1_HCVC_DB");
      tt->struct_vals[30].e = LAG1_HCVC_PHASE;
      tt->struct_vals[31].s = tdrpStrDup("LAG1_HCVC_PHASE");
      tt->struct_vals[32].e = LAG1_VCHC_DB;
      tt->struct_vals[33].s = tdrpStrDup("LAG1_VCHC_DB");
      tt->struct_vals[34].e = LAG1_VCHC_PHASE;
      tt->struct_vals[35].s = tdrpStrDup("LAG1_VCHC_PHASE");
      tt->struct_vals[36].e = LAG1_VXHX_DB;
      tt->struct_vals[37].s = tdrpStrDup("LAG1_VXHX_DB");
      tt->struct_vals[38].e = LAG1_VXHX_PHASE;
      tt->struct_vals[39].s = tdrpStrDup("LAG1_VXHX_PHASE");
      tt->struct_vals[40].e = LAG2_HC_DB;
      tt->struct_vals[41].s = tdrpStrDup("LAG2_HC_DB");
      tt->struct_vals[42].e = LAG2_HC_PHASE;
      tt->struct_vals[43].s = tdrpStrDup("LAG2_HC_PHASE");
      tt->struct_vals[44].e = LAG2_VC_DB;
      tt->struct_vals[45].s = tdrpStrDup("LAG2_VC_DB");
      tt->struct_vals[46].e = LAG2_VC_PHASE;
      tt->struct_vals[47].s = tdrpStrDup("LAG2_VC_PHASE");
      tt->struct_vals[48].e = LAG3_HC_DB;
      tt->struct_vals[49].s = tdrpStrDup("LAG3_HC_DB");
      tt->struct_vals[50].e = LAG3_HC_PHASE;
      tt->struct_vals[51].s = tdrpStrDup("LAG3_HC_PHASE");
      tt->struct_vals[52].e = LAG3_VC_DB;
      tt->struct_vals[53].s = tdrpStrDup("LAG3_VC_DB");
      tt->struct_vals[54].e = LAG3_VC_PHASE;
      tt->struct_vals[55].s = tdrpStrDup("LAG3_VC_PHASE");
      tt->struct_vals[56].e = RVVHH0_DB;
      tt->struct_vals[57].s = tdrpStrDup("RVVHH0_DB");
      tt->struct_vals[58].e = RVVHH0_PHASE;
      tt->struct_vals[59].s = tdrpStrDup("RVVHH0_PHASE");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("NOISE DETECTION");
    tt->comment_text = tdrpStrDup("Noise detection will be performed for one or both of 2 reasons: (a) if you set compute_vol_noise_stats to TRUE; (b) if you set censoring_mode is set to CENSORING_BY_NOISE_FLAG.");
    tt++;
    
    // Parameter 'compute_vol_noise_stats'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_vol_noise_stats");
    tt->descr = tdrpStrDup("Option to compute the noise statistics per volume.");
    tt->help = tdrpStrDup("If true, we will compute the noise stats for each volume.");
    tt->val_offset = (char *) &compute_vol_noise_stats - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'vol_noise_stats_min_elev_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("vol_noise_stats_min_elev_deg");
    tt->descr = tdrpStrDup("Minimum elevation for computing noise stats on the volume (deg).");
    tt->help = tdrpStrDup("Only rays with elevation above this will be included in the noise stats.");
    tt->val_offset = (char *) &vol_noise_stats_min_elev_deg - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'vol_noise_stats_max_elev_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("vol_noise_stats_max_elev_deg");
    tt->descr = tdrpStrDup("Maximum elevation for computing noise stats on the volume (deg).");
    tt->help = tdrpStrDup("Only rays with elevation less than this will be included in the noise stats.");
    tt->val_offset = (char *) &vol_noise_stats_max_elev_deg - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'noise_ngates_kernel'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("noise_ngates_kernel");
    tt->descr = tdrpStrDup("Number of gates over which the noise detection feature fields are computed.");
    tt->help = tdrpStrDup("To identify noise at a gate, we accumulate the phase change in range for the entire ray. We then assume that the phase change will be linear in a local sense, i.e. within some region around each gate. This parameter specifies the length of the assumed linear region. The phase change error is computed as the mean absolute error between the actual accumulated phase change and the linear fit to the phase change over the local region. NOTE - this number should be odd.");
    tt->val_offset = (char *) &noise_ngates_kernel - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'noise_min_ngates_for_ray_median'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("noise_min_ngates_for_ray_median");
    tt->descr = tdrpStrDup("Min number of gates for computing median noise on a ray.");
    tt->help = tdrpStrDup("In order to compute median noise for a ray, we require noise to be detected at at least this number of gates");
    tt->val_offset = (char *) &noise_min_ngates_for_ray_median - &_start_;
    tt->single_val.i = 30;
    tt++;
    
    // Parameter 'noise_method'
    // ctype is '_noise_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("noise_method");
    tt->descr = tdrpStrDup("Method for computing mean noise.");
    tt->help = tdrpStrDup("\tRAY_BY_RAY: compute noise for each ray individually. \tRUNNING_MEDIAN: store noise values in an array, and compute the mean noise when we have enough data. The noise varies more smoothly than in the RAY_BY_RAY method.");
    tt->val_offset = (char *) &noise_method - &_start_;
    tt->enum_def.name = tdrpStrDup("noise_method_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("NOISE_RAY_BY_RAY");
      tt->enum_def.fields[0].val = NOISE_RAY_BY_RAY;
      tt->enum_def.fields[1].name = tdrpStrDup("NOISE_RUNNING_MEDIAN");
      tt->enum_def.fields[1].val = NOISE_RUNNING_MEDIAN;
    tt->single_val.e = NOISE_RAY_BY_RAY;
    tt++;
    
    // Parameter 'noise_ngates_for_running_median'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("noise_ngates_for_running_median");
    tt->descr = tdrpStrDup("Number of gates used to compute noise running mean.");
    tt->help = tdrpStrDup("When noise is located at a gate, the power values are stored in arrays. When we have accumulated enough gates, the mean is computed.");
    tt->val_offset = (char *) &noise_ngates_for_running_median - &_start_;
    tt->single_val.i = 2500;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("INTEREST MAPS and WEIGHTS for NOISE LOCATION");
    tt->comment_text = tdrpStrDup("Each map should hold at least 2 points. The points should be increasing in value, i.e. the value should increase for each subsequent point. The various interest values are combined using the specified weights in a weighted mean to produce the final interest value.");
    tt++;
    
    // Parameter 'phase_change_error_for_noise_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_noise_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for phase change for noise.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_phase_change_error_for_noise_interest_map - &_start_;
    tt->array_n_offset = (char *) &phase_change_error_for_noise_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_phase_change_error_for_noise_interest_map->value - (char *) _phase_change_error_for_noise_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_phase_change_error_for_noise_interest_map->interest - (char *) _phase_change_error_for_noise_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 35;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 45;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'phase_change_error_for_noise_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_noise_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for phase change error - for noise.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &phase_change_error_for_noise_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'dbm_sdev_for_noise_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_noise_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for sdev of dbm for noise.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_dbm_sdev_for_noise_interest_map - &_start_;
    tt->array_n_offset = (char *) &dbm_sdev_for_noise_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_dbm_sdev_for_noise_interest_map->value - (char *) _dbm_sdev_for_noise_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_dbm_sdev_for_noise_interest_map->interest - (char *) _dbm_sdev_for_noise_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.65;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.75;
      tt->struct_vals[3].d = 0.001;
    tt++;
    
    // Parameter 'dbm_sdev_for_noise_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_noise_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of dbm - for noise.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &dbm_sdev_for_noise_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'ncp_mean_for_noise_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ncp_mean_for_noise_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for mean of ncp for noise.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_ncp_mean_for_noise_interest_map - &_start_;
    tt->array_n_offset = (char *) &ncp_mean_for_noise_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_ncp_mean_for_noise_interest_map->value - (char *) _ncp_mean_for_noise_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_ncp_mean_for_noise_interest_map->interest - (char *) _ncp_mean_for_noise_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.1;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.2;
      tt->struct_vals[3].d = 0.001;
    tt++;
    
    // Parameter 'ncp_mean_for_noise_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ncp_mean_for_noise_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of dbm - for noise.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &ncp_mean_for_noise_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'interest_threshold_for_noise'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("interest_threshold_for_noise");
    tt->descr = tdrpStrDup("Threshold interest value for identifying noise.");
    tt->help = tdrpStrDup("If the fuzzy interest value exceeds this threshold, noise is assumed to exist at that gate.");
    tt->val_offset = (char *) &interest_threshold_for_noise - &_start_;
    tt->single_val.d = 0.51;
    tt++;
    
    // Parameter 'phase_change_error_for_signal_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_signal_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for phase change for signal.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_phase_change_error_for_signal_interest_map - &_start_;
    tt->array_n_offset = (char *) &phase_change_error_for_signal_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_phase_change_error_for_signal_interest_map->value - (char *) _phase_change_error_for_signal_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_phase_change_error_for_signal_interest_map->interest - (char *) _phase_change_error_for_signal_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 10;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 20;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'phase_change_error_for_signal_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phase_change_error_for_signal_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for phase change error - for signal.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &phase_change_error_for_signal_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'dbm_sdev_for_signal_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_signal_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for sdev of dbm for signal.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_dbm_sdev_for_signal_interest_map - &_start_;
    tt->array_n_offset = (char *) &dbm_sdev_for_signal_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_dbm_sdev_for_signal_interest_map->value - (char *) _dbm_sdev_for_signal_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_dbm_sdev_for_signal_interest_map->interest - (char *) _dbm_sdev_for_signal_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.75;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.85;
      tt->struct_vals[3].d = 0.001;
    tt++;
    
    // Parameter 'dbm_sdev_for_signal_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbm_sdev_for_signal_interest_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of dbm - for signal.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &dbm_sdev_for_signal_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'interest_threshold_for_signal'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("interest_threshold_for_signal");
    tt->descr = tdrpStrDup("Threshold interest value for identifying signal.");
    tt->help = tdrpStrDup("If the fuzzy interest value exceeds this threshold, signal is assumed to exist at that gate.");
    tt->val_offset = (char *) &interest_threshold_for_signal - &_start_;
    tt->single_val.d = 0.51;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("MOMENTS COMPUTATIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'xmit_rcv_mode'
    // ctype is '_xmit_rcv_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("xmit_rcv_mode");
    tt->descr = tdrpStrDup("Transmit/receive mode.");
    tt->help = tdrpStrDup("This governs the type of moments computations to be applied.\n\tSINGLE_POL:\n\t\tSingle polarization\n\tDUAL_POL_ALT_HV_CO_ONLY:\n\t\tDual pol, alternating transmission\n\t\t          copolar receiver only\n\tDUAL_POL_ALT_HV_CO_CROSS:\n\t\tDual pol, alternating transmission\n\t\t          co-polar and cross-polar receivers\n\tDUAL_POL_SIM_HV:\n\t\tDual pol, simultaneous transmit/receive\n\tDUAL_POL_H_ONLY:\n\t\tDual pol, H transmission\n\t\t          simultaneous H and V receive\n\tDUAL_POL_V_ONLY:\n\t\tDual pol, V transmission\n\t\t          simultaneous H and V receive\n");
    tt->val_offset = (char *) &xmit_rcv_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("xmit_rcv_mode_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SINGLE_POL");
      tt->enum_def.fields[0].val = SINGLE_POL;
      tt->enum_def.fields[1].name = tdrpStrDup("DUAL_POL_ALT_HV_CO_ONLY");
      tt->enum_def.fields[1].val = DUAL_POL_ALT_HV_CO_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("DUAL_POL_ALT_HV_CO_CROSS");
      tt->enum_def.fields[2].val = DUAL_POL_ALT_HV_CO_CROSS;
      tt->enum_def.fields[3].name = tdrpStrDup("DUAL_POL_SIM_HV");
      tt->enum_def.fields[3].val = DUAL_POL_SIM_HV;
      tt->enum_def.fields[4].name = tdrpStrDup("DUAL_POL_H_ONLY");
      tt->enum_def.fields[4].val = DUAL_POL_H_ONLY;
      tt->enum_def.fields[5].name = tdrpStrDup("DUAL_POL_V_ONLY");
      tt->enum_def.fields[5].val = DUAL_POL_V_ONLY;
    tt->single_val.e = SINGLE_POL;
    tt++;
    
    // Parameter 'use_estimated_noise_for_noise_subtraction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_estimated_noise_for_noise_subtraction");
    tt->descr = tdrpStrDup("Option to correct power for estimated noise.");
    tt->help = tdrpStrDup("We estimate the noise by identifying regions with noise and computing the mean power - see above. If this parameter is set to TRUE, we use the estimated noise instead of teh calibrated noise to compute the noise-subtracted powers.");
    tt->val_offset = (char *) &use_estimated_noise_for_noise_subtraction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'correct_for_system_phidp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("correct_for_system_phidp");
    tt->descr = tdrpStrDup("Option to correct for system phidp.");
    tt->help = tdrpStrDup("If true, the H and V correlation phases will be corrected by adding/subtracting the system phidp value as appropriate. This avoids premature wrapping of the phased from which phidp and velocity are computed. If false, this correction will not be applied. To find the system phidp, set this to false and compute phidp for vertically-pointing data.");
    tt->val_offset = (char *) &correct_for_system_phidp - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'change_velocity_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_velocity_sign");
    tt->descr = tdrpStrDup("Option to change sign on velocity field.");
    tt->help = tdrpStrDup("Set to true to change the sign of the computed radial velocity field.");
    tt->val_offset = (char *) &change_velocity_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_hybrid_for_width'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_hybrid_for_width");
    tt->descr = tdrpStrDup("Option to use the hybrid estimator for spectrum width, if applicable.");
    tt->help = tdrpStrDup("In some modes, we can compute the spectrum width with the NCAR hybrid spectrum width estimator. If this is set, the hybrid width will be used for all modes except dual pol alternating mode.");
    tt->val_offset = (char *) &use_hybrid_for_width - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'min_snr_db_for_zdr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_db_for_zdr");
    tt->descr = tdrpStrDup("Min SNR for computing ZDR (dB).");
    tt->help = tdrpStrDup("If the SNR is below this threshold, ZDR will be set to missing.");
    tt->val_offset = (char *) &min_snr_db_for_zdr - &_start_;
    tt->single_val.d = -3;
    tt++;
    
    // Parameter 'min_snr_db_for_ldr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_db_for_ldr");
    tt->descr = tdrpStrDup("Min SNR for computing LDR (dB).");
    tt->help = tdrpStrDup("If the SNR is below this threshold, LDR will be set to missing.");
    tt->val_offset = (char *) &min_snr_db_for_ldr - &_start_;
    tt->single_val.d = -3;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("RADAR CALIBRATION XML FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'cal_files'
    // ctype is '_cal_file_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("cal_files");
    tt->descr = tdrpStrDup("Specify the calibration file for each pulse width.");
    tt->help = tdrpStrDup("First, the program will determine which of the specified pulse widths best matches the pulse width in the data. The closest match will be used to determine the cal file.\n\nNOTE - the pulse width is specified in micro-seconds.");
    tt->array_offset = (char *) &_cal_files - &_start_;
    tt->array_n_offset = (char *) &cal_files_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(cal_file_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("cal_file_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("pulse_width_us");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_cal_files->pulse_width_us - (char *) _cal_files;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("cal_file_path");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_cal_files->cal_file_path - (char *) _cal_files;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.5;
      tt->struct_vals[1].s = tdrpStrDup("./spol_cal_pw_0.5.xml");
      tt->struct_vals[2].d = 1;
      tt->struct_vals[3].s = tdrpStrDup("./spol_cal_pw_1.0.xml");
      tt->struct_vals[4].d = 2;
      tt->struct_vals[5].s = tdrpStrDup("./spol_cal_pw_2.0.xml");
    tt++;
    
    // Parameter 'override_cal_system_phidp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_cal_system_phidp");
    tt->descr = tdrpStrDup("Option to override the system PHIDP in the calibration data.");
    tt->help = tdrpStrDup("If true, the parameter 'system_phidp_deg' will override the system phidp in the calibration data.");
    tt->val_offset = (char *) &override_cal_system_phidp - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'system_phidp_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("system_phidp_deg");
    tt->descr = tdrpStrDup("System PHIDP to be applied to all calibrations (deg).");
    tt->help = tdrpStrDup("See 'override_cal_system_phidp'.");
    tt->val_offset = (char *) &system_phidp_deg - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'change_phidp_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_phidp_sign");
    tt->descr = tdrpStrDup("Option to change the sign of PHIDP.");
    tt->help = tdrpStrDup("This should not be necessary - using for testing.");
    tt->val_offset = (char *) &change_phidp_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'override_cal_dbz_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_cal_dbz_correction");
    tt->descr = tdrpStrDup("Option to override the DBZ correction in the calibration data.");
    tt->help = tdrpStrDup("If true, we will override the DBZ correction in the calibration files. See 'dbz_correction'.");
    tt->val_offset = (char *) &override_cal_dbz_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'dbz_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_correction");
    tt->descr = tdrpStrDup("DBZ correction to be applied to all calibrations (dB).");
    tt->help = tdrpStrDup("See 'override_cal_dbz_correction'.");
    tt->val_offset = (char *) &dbz_correction - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'override_cal_ldr_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_cal_ldr_correction");
    tt->descr = tdrpStrDup("Option to override the LDR corrections in the calibration data.");
    tt->help = tdrpStrDup("If true, the parameters 'ldrh_correction_db' and 'ldrv_correction_db' will override the ldr corrections in the calibration data.");
    tt->val_offset = (char *) &override_cal_ldr_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'ldr_correction_db_h'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ldr_correction_db_h");
    tt->descr = tdrpStrDup("LDRH correction to be applied to all calibrations (dB).");
    tt->help = tdrpStrDup("See 'override_cal_ldr_corrections'.");
    tt->val_offset = (char *) &ldr_correction_db_h - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'ldr_correction_db_v'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("ldr_correction_db_v");
    tt->descr = tdrpStrDup("LDRV correction to be applied to all calibrations (dB).");
    tt->help = tdrpStrDup("See 'override_cal_ldr_corrections'.");
    tt->val_offset = (char *) &ldr_correction_db_v - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("CORRECTION TO ZDR");
    tt->comment_text = tdrpStrDup("This can be eith a constant correction, or a linear-regression correction based on temperature.");
    tt++;
    
    // Parameter 'override_cal_zdr_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_cal_zdr_correction");
    tt->descr = tdrpStrDup("Option to override the ZDR correction in the calibration data.");
    tt->help = tdrpStrDup("If true, we will override the ZDR correction in the parameter file. If 'use_temperature_based_zdr_correction' is true, we will read temperature from SPDB and compute the correction based on the temperatire. If not, the parameter 'zdr_correction_db' will be used.");
    tt->val_offset = (char *) &override_cal_zdr_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'zdr_correction_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_correction_db");
    tt->descr = tdrpStrDup("ZDR correction to be applied to all calibrations (dB).");
    tt->help = tdrpStrDup("See 'override_cal_zdr_correction'. Only applies if 'apply_temperature_based_zdr_correction' is false.");
    tt->val_offset = (char *) &zdr_correction_db - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'use_temperature_based_zdr_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_temperature_based_zdr_correction");
    tt->descr = tdrpStrDup("Option to determine the ZDR correction using temperature.");
    tt->help = tdrpStrDup("If true, we read the temperature from SPDB, and apply a zdr correction computed from a linear fit between temperature and zdr correction.");
    tt->val_offset = (char *) &use_temperature_based_zdr_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'site_temp_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_spdb_url");
    tt->descr = tdrpStrDup("URL for site temperatures from SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://hail:0:pecan/spdb/spol/temp");
    tt++;
    
    // Parameter 'site_temp_station_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_station_name");
    tt->descr = tdrpStrDup("Station name for site temperature.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_station_name - &_start_;
    tt->single_val.s = tdrpStrDup("SPOL");
    tt++;
    
    // Parameter 'site_temp_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("site_temp_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin when finding site temp data (secs).");
    tt->help = tdrpStrDup("We search for the temperature closest in time to the radar volume. This is the search margin on either side of the volume time.");
    tt->val_offset = (char *) &site_temp_search_margin_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'temp_based_zdr_correction_slope'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("temp_based_zdr_correction_slope");
    tt->descr = tdrpStrDup("Slope of regression fit between ZDR and temperature (db/C).");
    tt->help = tdrpStrDup("The temperature-based ZDR correction is based on a linear regression analysis between ZDR and temperature. This is the slope of the regression line fit. The estimated ZDR correction is computed as (temp * slope + intercept).");
    tt->val_offset = (char *) &temp_based_zdr_correction_slope - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'temp_based_zdr_correction_intercept'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("temp_based_zdr_correction_intercept");
    tt->descr = tdrpStrDup("Intercept of regression fit between ZDR and temperature (C).");
    tt->help = tdrpStrDup("The temperature-based ZDR correction is based on a linear regression analysis between ZDR and temperature. This is the intercept of the regression line fit. The estimated ZDR correction is computed as (temp * slope + intercept).");
    tt->val_offset = (char *) &temp_based_zdr_correction_intercept - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("ADJUSTING CALIBRATION FOR MEASURED TRANSMIT POWER");
    tt->comment_text = tdrpStrDup("If the measured transmitter power is available, we can adjust the calibration to use that power instead of the nominal values available at calibration time.");
    tt++;
    
    // Parameter 'adjust_calibration_for_measured_xmit_power'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("adjust_calibration_for_measured_xmit_power");
    tt->descr = tdrpStrDup("Option to adjust the calibration based on measured transmitter power.");
    tt->help = tdrpStrDup("If true, and the measured transmitter power is available, the calibration object will be updated to reflect the measured transmit power as opposed to the power used at calibration time.");
    tt->val_offset = (char *) &adjust_calibration_for_measured_xmit_power - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_valid_measured_xmit_power_dbm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_valid_measured_xmit_power_dbm");
    tt->descr = tdrpStrDup("Min valid value for measured xmit power (dBm).");
    tt->help = tdrpStrDup("Sometimes we get spurious values for measured xmit power. This limit allows us to ignore bad values.");
    tt->val_offset = (char *) &min_valid_measured_xmit_power_dbm - &_start_;
    tt->single_val.d = 85;
    tt++;
    
    // Parameter 'max_valid_measured_xmit_power_dbm'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_valid_measured_xmit_power_dbm");
    tt->descr = tdrpStrDup("Max valid value for measured xmit power (dBm).");
    tt->help = tdrpStrDup("Sometimes we get spurious values for measured xmit power. This limit allows us to ignore bad values.");
    tt->val_offset = (char *) &max_valid_measured_xmit_power_dbm - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'measured_xmit_power_correction_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("measured_xmit_power_correction_db");
    tt->descr = tdrpStrDup("Correction to measured xmit power (dB).");
    tt->help = tdrpStrDup("We correct the measured powers by this amount before using it.");
    tt->val_offset = (char *) &measured_xmit_power_correction_db - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'swap_measured_xmit_power_channels'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("swap_measured_xmit_power_channels");
    tt->descr = tdrpStrDup("Option to swap the H and V measurements for transmit power.");
    tt->help = tdrpStrDup("Set this to true if the power measuements were made on the incorrect channels.");
    tt->val_offset = (char *) &swap_measured_xmit_power_channels - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("ATMOSPHERIC ATTENUATION CORRECTION METHOD");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'atmos_atten_method'
    // ctype is '_atmos_atten_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("atmos_atten_method");
    tt->descr = tdrpStrDup("Method for computing atmospheric attenuation.");
    tt->help = tdrpStrDup("This is applied to the DBZ fields only.\n\tATMOS_ATTEN_NONE:\n\t\tNo correction is applied\n\tATMOS_ATTEN_CONSTANT:\n\t\tA constant correction in dB/km is applied\n\t\tSee atmos_atten_db_per_km\n\tATMOS_ATTEN_CRPL:\n\t\tUses the method based on the Central Radio Propagation Laboratory\n\t\tmeasurements.\n\t\tSee Doviak and Zrnic, page 44\n");
    tt->val_offset = (char *) &atmos_atten_method - &_start_;
    tt->enum_def.name = tdrpStrDup("atmos_atten_method_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ATMOS_ATTEN_NONE");
      tt->enum_def.fields[0].val = ATMOS_ATTEN_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("ATMOS_ATTEN_CONSTANT");
      tt->enum_def.fields[1].val = ATMOS_ATTEN_CONSTANT;
      tt->enum_def.fields[2].name = tdrpStrDup("ATMOS_ATTEN_CRPL");
      tt->enum_def.fields[2].val = ATMOS_ATTEN_CRPL;
    tt->single_val.e = ATMOS_ATTEN_CRPL;
    tt++;
    
    // Parameter 'atmos_atten_db_per_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("atmos_atten_db_per_km");
    tt->descr = tdrpStrDup("Constant atmospheric attenuation (dB/km).");
    tt->help = tdrpStrDup("DBZ is corrected for this.");
    tt->val_offset = (char *) &atmos_atten_db_per_km - &_start_;
    tt->single_val.d = 0.012;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("PRECIP-INDUCED ATTENUATION CORRECTION FOR DBZ AND ZDR");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_precip_attenuation_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_precip_attenuation_correction");
    tt->descr = tdrpStrDup("Option to apply precip attenuation correction for DBZ and ZDR.");
    tt->help = tdrpStrDup("The following extra fields will be computed:\n\tDBZ_ATTEN_CORRECTION - correction in dB\n\tZDR_ATTEN_CORRECTION - correction in dB\n\tDBZ_ATTEN_CORRECTED - DBZHC corrected\n\tZDR_ATTEN_CORRECTED - ZDR corrected\n");
    tt->val_offset = (char *) &apply_precip_attenuation_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'specify_coefficients_for_attenuation_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_coefficients_for_attenuation_correction");
    tt->descr = tdrpStrDup("Option to specify the coefficients and exponents - see below.");
    tt->help = tdrpStrDup("If false, the default coefficients will be determined for the radar wavelength.");
    tt->val_offset = (char *) &specify_coefficients_for_attenuation_correction - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'dbz_attenuation_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_attenuation_coefficient");
    tt->descr = tdrpStrDup("Coefficient for computing DBZ attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &dbz_attenuation_coefficient - &_start_;
    tt->single_val.d = 0.017;
    tt++;
    
    // Parameter 'dbz_attenuation_exponent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_attenuation_exponent");
    tt->descr = tdrpStrDup("Exponent for computing DBZ attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &dbz_attenuation_exponent - &_start_;
    tt->single_val.d = 0.84;
    tt++;
    
    // Parameter 'zdr_attenuation_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_attenuation_coefficient");
    tt->descr = tdrpStrDup("Coefficient for computing ZDR attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &zdr_attenuation_coefficient - &_start_;
    tt->single_val.d = 0.017;
    tt++;
    
    // Parameter 'zdr_attenuation_exponent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_attenuation_exponent");
    tt->descr = tdrpStrDup("Exponent for computing ZDR attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &zdr_attenuation_exponent - &_start_;
    tt->single_val.d = 0.84;
    tt++;
    
    // Parameter 'Comment 16'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 16");
    tt->comment_hdr = tdrpStrDup("COMPUTING KDP");
    tt->comment_text = tdrpStrDup("Parameters for computing KDP. KDP will be computed if KDP_available is FALSE.");
    tt++;
    
    // Parameter 'KDP_fir_filter_len'
    // ctype is '_fir_filter_len_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("KDP_fir_filter_len");
    tt->descr = tdrpStrDup("Filter length for the FIR filter for PHIDP (gates)");
    tt->help = tdrpStrDup("When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.");
    tt->val_offset = (char *) &KDP_fir_filter_len - &_start_;
    tt->enum_def.name = tdrpStrDup("fir_filter_len_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FIR_LEN_125");
      tt->enum_def.fields[0].val = FIR_LEN_125;
      tt->enum_def.fields[1].name = tdrpStrDup("FIR_LEN_60");
      tt->enum_def.fields[1].val = FIR_LEN_60;
      tt->enum_def.fields[2].name = tdrpStrDup("FIR_LEN_40");
      tt->enum_def.fields[2].val = FIR_LEN_40;
      tt->enum_def.fields[3].name = tdrpStrDup("FIR_LEN_30");
      tt->enum_def.fields[3].val = FIR_LEN_30;
      tt->enum_def.fields[4].name = tdrpStrDup("FIR_LEN_20");
      tt->enum_def.fields[4].val = FIR_LEN_20;
      tt->enum_def.fields[5].name = tdrpStrDup("FIR_LEN_10");
      tt->enum_def.fields[5].val = FIR_LEN_10;
    tt->single_val.e = FIR_LEN_10;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_unfolded'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_unfolded");
    tt->descr = tdrpStrDup("Sets the number of iterations for the initial FIR filter for unfolded PHIDP.");
    tt->help = tdrpStrDup("After unfolding PHIDP, the FIR filter is applied to the unfolded phidp, a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_unfolded - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_conditioned'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_conditioned");
    tt->descr = tdrpStrDup("Sets the number of iterations for the final FIR filter for conditioned PHIDP.");
    tt->help = tdrpStrDup("In order to identify phase shift on backscatter (PSOB), we condition the PHIDP to keep it generally increasing with range. The FIR filter is applied to the conditioned phidp a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_conditioned - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'KDP_use_iterative_filtering'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_use_iterative_filtering");
    tt->descr = tdrpStrDup("Perform iterative filtering to locate backscatter phase shift.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_use_iterative_filtering - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_phidp_difference_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_difference_threshold");
    tt->descr = tdrpStrDup("Difference threshold for the iterative filtering method.");
    tt->help = tdrpStrDup("The FIR filter is applied successively, KDP_n_filt_iterations_conditioned times. After each iteration the result is checked against the original. If the difference is less than this parameter, the original value at that gate is retained. If the difference exceeds this parameter, the new filtered value is retained.");
    tt->val_offset = (char *) &KDP_phidp_difference_threshold - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'KDP_ngates_for_stats'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_ngates_for_stats");
    tt->descr = tdrpStrDup("Number of gates over which the phidp mean, sdev and jitter are computed.");
    tt->help = tdrpStrDup("The mean, sdev and jitter of phidp are computed over a consecutive number of gates in range, centered on the current gate of interest. This parameter is the number of gates over which these statistics are computed.");
    tt->val_offset = (char *) &KDP_ngates_for_stats - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'KDP_phidp_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of phidp in range.");
    tt->help = tdrpStrDup("The sdev of phidp is a good test for valid phidp. The sdev is computed in the circle, so that it takes account of folding if present. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_sdev_max - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'KDP_phidp_jitter_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_jitter_max");
    tt->descr = tdrpStrDup("Sets the threshold for the jitter of phidp in range.");
    tt->help = tdrpStrDup("The jitter of phidp is defined as the mean absolute change in angle between successive phidp measurements in range. It is computed on the circle to take account of folding. If the jitter is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_jitter_max - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'KDP_min_valid_abs_kdp'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_min_valid_abs_kdp");
    tt->descr = tdrpStrDup("Sets the min valid KDP value.");
    tt->help = tdrpStrDup("Values less than this are set to 0.");
    tt->val_offset = (char *) &KDP_min_valid_abs_kdp - &_start_;
    tt->single_val.d = 0.01;
    tt++;
    
    // Parameter 'KDP_check_snr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_snr");
    tt->descr = tdrpStrDup("Check the SNR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_snr - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_snr_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking SNR (dB).");
    tt->help = tdrpStrDup("If the SNR drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_snr_threshold - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'KDP_check_rhohv'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_rhohv");
    tt->descr = tdrpStrDup("Check the RHOHV.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_rhohv - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_rhohv_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_rhohv_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking RHOHV.");
    tt->help = tdrpStrDup("If the RHOHV drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_rhohv_threshold - &_start_;
    tt->single_val.d = 0.85;
    tt++;
    
    // Parameter 'KDP_check_zdr_sdev'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_zdr_sdev");
    tt->descr = tdrpStrDup("Check the standard deviation of ZDR in range?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_zdr_sdev - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_zdr_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_zdr_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of zdr in range.");
    tt->help = tdrpStrDup("The sdev of zdr is a good test for clutter. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_zdr_sdev_max - &_start_;
    tt->single_val.d = 2.5;
    tt++;
    
    // Parameter 'KDP_debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_debug");
    tt->descr = tdrpStrDup("Option to print debug messages in KDP computation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_write_ray_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_write_ray_files");
    tt->descr = tdrpStrDup("Option to write ray files to debug KDP computation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_write_ray_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_ray_files_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("KDP_ray_files_dir");
    tt->descr = tdrpStrDup("Directory for KDP ray files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_ray_files_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/kdp_ray_files");
    tt++;
    
    // Parameter 'Comment 17'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 17");
    tt->comment_hdr = tdrpStrDup("LOADING UP TEST FIELDS - for debugging");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'load_alt_vel_alt_test_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("load_alt_vel_alt_test_fields");
    tt->descr = tdrpStrDup("Option to load up test fields when computing alternative vel_alt for alternating mode.");
    tt->help = tdrpStrDup("If true, the following will be loaded:\n\ttest2: meanConfidence for gap run.\n\ttest3: min velocity for a gap run.\n\ttest4: max velocity for a gap run.\n\ttest5: corrected velocity for run with incorrect unfold.");
    tt->val_offset = (char *) &load_alt_vel_alt_test_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 18'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 18");
    tt->comment_hdr = tdrpStrDup("SPECIFYING FIELD NAMES AND OUTPUT ENCODING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Indicate which fields should be written to the output file.");
    tt->help = tdrpStrDup("Choose the ID from the list. The name and units can be set however the user prefers.\n\nThe output_encoding and output_scaling apply to CfRadial output only. If the output_scaling is DYNAMIC then the scale and offset are computed using the dynamic range of the data. If the output_scaling is SPECIFIED, then the specified scale and offset are used.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 22;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("output_field_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->id - (char *) _output_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("output_field_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 79;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("DBZ");
        tt->struct_def.fields[0].enum_def.fields[0].val = DBZ;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("DBZHC");
        tt->struct_def.fields[0].enum_def.fields[1].val = DBZHC;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("DBZVC");
        tt->struct_def.fields[0].enum_def.fields[2].val = DBZVC;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("DBZHX");
        tt->struct_def.fields[0].enum_def.fields[3].val = DBZHX;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("DBZVX");
        tt->struct_def.fields[0].enum_def.fields[4].val = DBZVX;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("DBZ_NO_ATMOS_ATTEN");
        tt->struct_def.fields[0].enum_def.fields[5].val = DBZ_NO_ATMOS_ATTEN;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("VEL");
        tt->struct_def.fields[0].enum_def.fields[6].val = VEL;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("VEL_ALT");
        tt->struct_def.fields[0].enum_def.fields[7].val = VEL_ALT;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("VEL_HV");
        tt->struct_def.fields[0].enum_def.fields[8].val = VEL_HV;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("VEL_ALT_FOLD_INTERVAL");
        tt->struct_def.fields[0].enum_def.fields[9].val = VEL_ALT_FOLD_INTERVAL;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("VEL_ALT_FOLD_CONFIDENCE");
        tt->struct_def.fields[0].enum_def.fields[10].val = VEL_ALT_FOLD_CONFIDENCE;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("VEL_DIFF");
        tt->struct_def.fields[0].enum_def.fields[11].val = VEL_DIFF;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("VEL_UNFOLD_INTERVAL");
        tt->struct_def.fields[0].enum_def.fields[12].val = VEL_UNFOLD_INTERVAL;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("VEL_H_ONLY");
        tt->struct_def.fields[0].enum_def.fields[13].val = VEL_H_ONLY;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("VEL_V_ONLY");
        tt->struct_def.fields[0].enum_def.fields[14].val = VEL_V_ONLY;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("WIDTH");
        tt->struct_def.fields[0].enum_def.fields[15].val = WIDTH;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("WIDTH_H_ONLY");
        tt->struct_def.fields[0].enum_def.fields[16].val = WIDTH_H_ONLY;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("WIDTH_V_ONLY");
        tt->struct_def.fields[0].enum_def.fields[17].val = WIDTH_V_ONLY;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("NCP");
        tt->struct_def.fields[0].enum_def.fields[18].val = NCP;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("NCP_H_ONLY");
        tt->struct_def.fields[0].enum_def.fields[19].val = NCP_H_ONLY;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("NCP_V_ONLY");
        tt->struct_def.fields[0].enum_def.fields[20].val = NCP_V_ONLY;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("NCP_H_MINUS_V");
        tt->struct_def.fields[0].enum_def.fields[21].val = NCP_H_MINUS_V;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("ZDRM");
        tt->struct_def.fields[0].enum_def.fields[22].val = ZDRM;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("ZDR");
        tt->struct_def.fields[0].enum_def.fields[23].val = ZDR;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("ZDR_BIAS");
        tt->struct_def.fields[0].enum_def.fields[24].val = ZDR_BIAS;
        tt->struct_def.fields[0].enum_def.fields[25].name = tdrpStrDup("LDRHM");
        tt->struct_def.fields[0].enum_def.fields[25].val = LDRHM;
        tt->struct_def.fields[0].enum_def.fields[26].name = tdrpStrDup("LDRH");
        tt->struct_def.fields[0].enum_def.fields[26].val = LDRH;
        tt->struct_def.fields[0].enum_def.fields[27].name = tdrpStrDup("LDRVM");
        tt->struct_def.fields[0].enum_def.fields[27].val = LDRVM;
        tt->struct_def.fields[0].enum_def.fields[28].name = tdrpStrDup("LDRV");
        tt->struct_def.fields[0].enum_def.fields[28].val = LDRV;
        tt->struct_def.fields[0].enum_def.fields[29].name = tdrpStrDup("LDR_DIFF");
        tt->struct_def.fields[0].enum_def.fields[29].val = LDR_DIFF;
        tt->struct_def.fields[0].enum_def.fields[30].name = tdrpStrDup("LDR_MEAN");
        tt->struct_def.fields[0].enum_def.fields[30].val = LDR_MEAN;
        tt->struct_def.fields[0].enum_def.fields[31].name = tdrpStrDup("RHOHV");
        tt->struct_def.fields[0].enum_def.fields[31].val = RHOHV;
        tt->struct_def.fields[0].enum_def.fields[32].name = tdrpStrDup("RHOHV_NNC");
        tt->struct_def.fields[0].enum_def.fields[32].val = RHOHV_NNC;
        tt->struct_def.fields[0].enum_def.fields[33].name = tdrpStrDup("RHO_HCVX");
        tt->struct_def.fields[0].enum_def.fields[33].val = RHO_HCVX;
        tt->struct_def.fields[0].enum_def.fields[34].name = tdrpStrDup("RHO_VCHX");
        tt->struct_def.fields[0].enum_def.fields[34].val = RHO_VCHX;
        tt->struct_def.fields[0].enum_def.fields[35].name = tdrpStrDup("RHO_VXHX");
        tt->struct_def.fields[0].enum_def.fields[35].val = RHO_VXHX;
        tt->struct_def.fields[0].enum_def.fields[36].name = tdrpStrDup("PHIDP0");
        tt->struct_def.fields[0].enum_def.fields[36].val = PHIDP0;
        tt->struct_def.fields[0].enum_def.fields[37].name = tdrpStrDup("PHIDP");
        tt->struct_def.fields[0].enum_def.fields[37].val = PHIDP;
        tt->struct_def.fields[0].enum_def.fields[38].name = tdrpStrDup("PHIDP_FILT");
        tt->struct_def.fields[0].enum_def.fields[38].val = PHIDP_FILT;
        tt->struct_def.fields[0].enum_def.fields[39].name = tdrpStrDup("PHIDP_COND");
        tt->struct_def.fields[0].enum_def.fields[39].val = PHIDP_COND;
        tt->struct_def.fields[0].enum_def.fields[40].name = tdrpStrDup("KDP");
        tt->struct_def.fields[0].enum_def.fields[40].val = KDP;
        tt->struct_def.fields[0].enum_def.fields[41].name = tdrpStrDup("PSOB");
        tt->struct_def.fields[0].enum_def.fields[41].val = PSOB;
        tt->struct_def.fields[0].enum_def.fields[42].name = tdrpStrDup("SNR");
        tt->struct_def.fields[0].enum_def.fields[42].val = SNR;
        tt->struct_def.fields[0].enum_def.fields[43].name = tdrpStrDup("SNRHC");
        tt->struct_def.fields[0].enum_def.fields[43].val = SNRHC;
        tt->struct_def.fields[0].enum_def.fields[44].name = tdrpStrDup("SNRHX");
        tt->struct_def.fields[0].enum_def.fields[44].val = SNRHX;
        tt->struct_def.fields[0].enum_def.fields[45].name = tdrpStrDup("SNRVC");
        tt->struct_def.fields[0].enum_def.fields[45].val = SNRVC;
        tt->struct_def.fields[0].enum_def.fields[46].name = tdrpStrDup("SNRVX");
        tt->struct_def.fields[0].enum_def.fields[46].val = SNRVX;
        tt->struct_def.fields[0].enum_def.fields[47].name = tdrpStrDup("DBM");
        tt->struct_def.fields[0].enum_def.fields[47].val = DBM;
        tt->struct_def.fields[0].enum_def.fields[48].name = tdrpStrDup("DBMHC");
        tt->struct_def.fields[0].enum_def.fields[48].val = DBMHC;
        tt->struct_def.fields[0].enum_def.fields[49].name = tdrpStrDup("DBMHX");
        tt->struct_def.fields[0].enum_def.fields[49].val = DBMHX;
        tt->struct_def.fields[0].enum_def.fields[50].name = tdrpStrDup("DBMVC");
        tt->struct_def.fields[0].enum_def.fields[50].val = DBMVC;
        tt->struct_def.fields[0].enum_def.fields[51].name = tdrpStrDup("DBMVX");
        tt->struct_def.fields[0].enum_def.fields[51].val = DBMVX;
        tt->struct_def.fields[0].enum_def.fields[52].name = tdrpStrDup("PHASE_FOR_NOISE");
        tt->struct_def.fields[0].enum_def.fields[52].val = PHASE_FOR_NOISE;
        tt->struct_def.fields[0].enum_def.fields[53].name = tdrpStrDup("ACCUM_PHASE_CHANGE");
        tt->struct_def.fields[0].enum_def.fields[53].val = ACCUM_PHASE_CHANGE;
        tt->struct_def.fields[0].enum_def.fields[54].name = tdrpStrDup("PHASE_CHANGE_ERROR");
        tt->struct_def.fields[0].enum_def.fields[54].val = PHASE_CHANGE_ERROR;
        tt->struct_def.fields[0].enum_def.fields[55].name = tdrpStrDup("DBM_SDEV");
        tt->struct_def.fields[0].enum_def.fields[55].val = DBM_SDEV;
        tt->struct_def.fields[0].enum_def.fields[56].name = tdrpStrDup("NCP_MEAN");
        tt->struct_def.fields[0].enum_def.fields[56].val = NCP_MEAN;
        tt->struct_def.fields[0].enum_def.fields[57].name = tdrpStrDup("NOISE_FLAG");
        tt->struct_def.fields[0].enum_def.fields[57].val = NOISE_FLAG;
        tt->struct_def.fields[0].enum_def.fields[58].name = tdrpStrDup("SIGNAL_FLAG");
        tt->struct_def.fields[0].enum_def.fields[58].val = SIGNAL_FLAG;
        tt->struct_def.fields[0].enum_def.fields[59].name = tdrpStrDup("NOISE_BIAS_DB_HC");
        tt->struct_def.fields[0].enum_def.fields[59].val = NOISE_BIAS_DB_HC;
        tt->struct_def.fields[0].enum_def.fields[60].name = tdrpStrDup("NOISE_BIAS_DB_HX");
        tt->struct_def.fields[0].enum_def.fields[60].val = NOISE_BIAS_DB_HX;
        tt->struct_def.fields[0].enum_def.fields[61].name = tdrpStrDup("NOISE_BIAS_DB_VC");
        tt->struct_def.fields[0].enum_def.fields[61].val = NOISE_BIAS_DB_VC;
        tt->struct_def.fields[0].enum_def.fields[62].name = tdrpStrDup("NOISE_BIAS_DB_VX");
        tt->struct_def.fields[0].enum_def.fields[62].val = NOISE_BIAS_DB_VX;
        tt->struct_def.fields[0].enum_def.fields[63].name = tdrpStrDup("DBZ_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[63].val = DBZ_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[64].name = tdrpStrDup("ZDR_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[64].val = ZDR_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[65].name = tdrpStrDup("DBZ_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[65].val = DBZ_ATTEN_CORRECTED;
        tt->struct_def.fields[0].enum_def.fields[66].name = tdrpStrDup("ZDR_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[66].val = ZDR_ATTEN_CORRECTED;
        tt->struct_def.fields[0].enum_def.fields[67].name = tdrpStrDup("DBZ_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[67].val = DBZ_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[68].name = tdrpStrDup("ZDR_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[68].val = ZDR_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[69].name = tdrpStrDup("RHOHV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[69].val = RHOHV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[70].name = tdrpStrDup("SNR_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[70].val = SNR_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[71].name = tdrpStrDup("PHIDP_SDEV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[71].val = PHIDP_SDEV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[72].name = tdrpStrDup("PHIDP_JITTER_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[72].val = PHIDP_JITTER_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[73].name = tdrpStrDup("ZDR_SDEV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[73].val = ZDR_SDEV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[74].name = tdrpStrDup("TEST");
        tt->struct_def.fields[0].enum_def.fields[74].val = TEST;
        tt->struct_def.fields[0].enum_def.fields[75].name = tdrpStrDup("TEST2");
        tt->struct_def.fields[0].enum_def.fields[75].val = TEST2;
        tt->struct_def.fields[0].enum_def.fields[76].name = tdrpStrDup("TEST3");
        tt->struct_def.fields[0].enum_def.fields[76].val = TEST3;
        tt->struct_def.fields[0].enum_def.fields[77].name = tdrpStrDup("TEST4");
        tt->struct_def.fields[0].enum_def.fields[77].val = TEST4;
        tt->struct_def.fields[0].enum_def.fields[78].name = tdrpStrDup("TEST5");
        tt->struct_def.fields[0].enum_def.fields[78].val = TEST5;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->long_name - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->standard_name - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->units - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->encoding - (char *) _output_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[5].enum_def.nfields = 4;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_FL32");
        tt->struct_def.fields[5].enum_def.fields[0].val = OUTPUT_ENCODING_FL32;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
        tt->struct_def.fields[5].enum_def.fields[1].val = OUTPUT_ENCODING_INT32;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
        tt->struct_def.fields[5].enum_def.fields[2].val = OUTPUT_ENCODING_INT16;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
        tt->struct_def.fields[5].enum_def.fields[3].val = OUTPUT_ENCODING_INT08;
      tt->struct_def.fields[6].ftype = tdrpStrDup("output_scaling_t");
      tt->struct_def.fields[6].fname = tdrpStrDup("scaling");
      tt->struct_def.fields[6].ptype = ENUM_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_fields->scaling - (char *) _output_fields;
        tt->struct_def.fields[6].enum_def.name = tdrpStrDup("output_scaling_t");
        tt->struct_def.fields[6].enum_def.nfields = 2;
        tt->struct_def.fields[6].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[6].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[6].enum_def.fields[0].name = tdrpStrDup("OUTPUT_SCALING_DYNAMIC");
        tt->struct_def.fields[6].enum_def.fields[0].val = OUTPUT_SCALING_DYNAMIC;
        tt->struct_def.fields[6].enum_def.fields[1].name = tdrpStrDup("OUTPUT_SCALING_SPECIFIED");
        tt->struct_def.fields[6].enum_def.fields[1].val = OUTPUT_SCALING_SPECIFIED;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("scale");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_output_fields->scale - (char *) _output_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("offset");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_output_fields->offset - (char *) _output_fields;
    tt->n_struct_vals = 198;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = SNR;
      tt->struct_vals[1].s = tdrpStrDup("SNR");
      tt->struct_vals[2].s = tdrpStrDup("signal_to_noise_ratio_db");
      tt->struct_vals[3].s = tdrpStrDup("signal_to_noise_ratio");
      tt->struct_vals[4].s = tdrpStrDup("dB");
      tt->struct_vals[5].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[6].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[7].d = 0.01;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].e = DBM;
      tt->struct_vals[10].s = tdrpStrDup("DBM");
      tt->struct_vals[11].s = tdrpStrDup("power_in_dbm");
      tt->struct_vals[12].s = tdrpStrDup("log_power");
      tt->struct_vals[13].s = tdrpStrDup("dBm");
      tt->struct_vals[14].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[15].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[16].d = 0.01;
      tt->struct_vals[17].d = 0;
      tt->struct_vals[18].e = DBZ;
      tt->struct_vals[19].s = tdrpStrDup("DBZ");
      tt->struct_vals[20].s = tdrpStrDup("radar_reflectivity");
      tt->struct_vals[21].s = tdrpStrDup("equivalent_reflectivity_factor");
      tt->struct_vals[22].s = tdrpStrDup("dBZ");
      tt->struct_vals[23].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[24].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[25].d = 0.01;
      tt->struct_vals[26].d = 0;
      tt->struct_vals[27].e = VEL;
      tt->struct_vals[28].s = tdrpStrDup("VEL");
      tt->struct_vals[29].s = tdrpStrDup("radial_velocity");
      tt->struct_vals[30].s = tdrpStrDup("radial_velocity_away_from_instrument");
      tt->struct_vals[31].s = tdrpStrDup("m/s");
      tt->struct_vals[32].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[33].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[34].d = 0.01;
      tt->struct_vals[35].d = 0;
      tt->struct_vals[36].e = WIDTH;
      tt->struct_vals[37].s = tdrpStrDup("WIDTH");
      tt->struct_vals[38].s = tdrpStrDup("doppler_spectrum_width");
      tt->struct_vals[39].s = tdrpStrDup("doppler_spectrum_width");
      tt->struct_vals[40].s = tdrpStrDup("m/s");
      tt->struct_vals[41].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[42].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[43].d = 0.01;
      tt->struct_vals[44].d = 0;
      tt->struct_vals[45].e = NCP;
      tt->struct_vals[46].s = tdrpStrDup("NCP");
      tt->struct_vals[47].s = tdrpStrDup("normalized_coherent_power");
      tt->struct_vals[48].s = tdrpStrDup("normalized_coherent_power");
      tt->struct_vals[49].s = tdrpStrDup("");
      tt->struct_vals[50].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[51].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[52].d = 0.001;
      tt->struct_vals[53].d = 0;
      tt->struct_vals[54].e = ZDRM;
      tt->struct_vals[55].s = tdrpStrDup("ZDRM");
      tt->struct_vals[56].s = tdrpStrDup("measured_log_differential_reflectivity");
      tt->struct_vals[57].s = tdrpStrDup("measured_log_differential_reflectivity");
      tt->struct_vals[58].s = tdrpStrDup("dB");
      tt->struct_vals[59].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[60].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[61].d = 0.01;
      tt->struct_vals[62].d = 0;
      tt->struct_vals[63].e = ZDR;
      tt->struct_vals[64].s = tdrpStrDup("ZDR");
      tt->struct_vals[65].s = tdrpStrDup("calibrated_log_differential_reflectivity");
      tt->struct_vals[66].s = tdrpStrDup("log_differential_reflectivity");
      tt->struct_vals[67].s = tdrpStrDup("dB");
      tt->struct_vals[68].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[69].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[70].d = 0.01;
      tt->struct_vals[71].d = 0;
      tt->struct_vals[72].e = LDRH;
      tt->struct_vals[73].s = tdrpStrDup("LDRH");
      tt->struct_vals[74].s = tdrpStrDup("linear_depolarization_ratio_h_channel");
      tt->struct_vals[75].s = tdrpStrDup("log_linear_depolarization_ratio_h");
      tt->struct_vals[76].s = tdrpStrDup("dB");
      tt->struct_vals[77].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[78].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[79].d = 0.01;
      tt->struct_vals[80].d = 0;
      tt->struct_vals[81].e = LDRV;
      tt->struct_vals[82].s = tdrpStrDup("LDRV");
      tt->struct_vals[83].s = tdrpStrDup("linear_depolarization_ratio_v_channel");
      tt->struct_vals[84].s = tdrpStrDup("log_linear_depolarization_ratio_v");
      tt->struct_vals[85].s = tdrpStrDup("dB");
      tt->struct_vals[86].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[87].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[88].d = 0.01;
      tt->struct_vals[89].d = 0;
      tt->struct_vals[90].e = RHOHV;
      tt->struct_vals[91].s = tdrpStrDup("RHOHV");
      tt->struct_vals[92].s = tdrpStrDup("cross_correlation_ratio");
      tt->struct_vals[93].s = tdrpStrDup("cross_correlation_ratio_hv");
      tt->struct_vals[94].s = tdrpStrDup("");
      tt->struct_vals[95].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[96].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[97].d = 0.001;
      tt->struct_vals[98].d = 0;
      tt->struct_vals[99].e = PHIDP;
      tt->struct_vals[100].s = tdrpStrDup("PHIDP");
      tt->struct_vals[101].s = tdrpStrDup("differential_phase");
      tt->struct_vals[102].s = tdrpStrDup("differential_phase_hv");
      tt->struct_vals[103].s = tdrpStrDup("deg");
      tt->struct_vals[104].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[105].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[106].d = 0.01;
      tt->struct_vals[107].d = 0;
      tt->struct_vals[108].e = KDP;
      tt->struct_vals[109].s = tdrpStrDup("KDP");
      tt->struct_vals[110].s = tdrpStrDup("specific_differential_phase");
      tt->struct_vals[111].s = tdrpStrDup("specific_differential_phase_hv");
      tt->struct_vals[112].s = tdrpStrDup("deg/km");
      tt->struct_vals[113].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[114].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[115].d = 0.001;
      tt->struct_vals[116].d = 0;
      tt->struct_vals[117].e = PSOB;
      tt->struct_vals[118].s = tdrpStrDup("PSOB");
      tt->struct_vals[119].s = tdrpStrDup("phase_shift_on_backscatter");
      tt->struct_vals[120].s = tdrpStrDup("phase_shift_on_backscatter");
      tt->struct_vals[121].s = tdrpStrDup("deg");
      tt->struct_vals[122].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[123].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[124].d = 0.001;
      tt->struct_vals[125].d = 0;
      tt->struct_vals[126].e = SNRHC;
      tt->struct_vals[127].s = tdrpStrDup("SNRHC");
      tt->struct_vals[128].s = tdrpStrDup("signal_to_noise_ratio_db_h_copol_channel");
      tt->struct_vals[129].s = tdrpStrDup("signal_to_noise_ratio_hc");
      tt->struct_vals[130].s = tdrpStrDup("dB");
      tt->struct_vals[131].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[132].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[133].d = 0.01;
      tt->struct_vals[134].d = 0;
      tt->struct_vals[135].e = SNRHX;
      tt->struct_vals[136].s = tdrpStrDup("SNRHX");
      tt->struct_vals[137].s = tdrpStrDup("signal_to_noise_ratio_db_h_crosspol_channel");
      tt->struct_vals[138].s = tdrpStrDup("signal_to_noise_ratio_hx");
      tt->struct_vals[139].s = tdrpStrDup("dB");
      tt->struct_vals[140].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[141].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[142].d = 0.01;
      tt->struct_vals[143].d = 0;
      tt->struct_vals[144].e = SNRVC;
      tt->struct_vals[145].s = tdrpStrDup("SNRVC");
      tt->struct_vals[146].s = tdrpStrDup("signal_to_noise_ratio_db_v_copol_channel");
      tt->struct_vals[147].s = tdrpStrDup("signal_to_noise_ratio_vc");
      tt->struct_vals[148].s = tdrpStrDup("dB");
      tt->struct_vals[149].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[150].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[151].d = 0.01;
      tt->struct_vals[152].d = 0;
      tt->struct_vals[153].e = SNRVX;
      tt->struct_vals[154].s = tdrpStrDup("SNRVX");
      tt->struct_vals[155].s = tdrpStrDup("signal_to_noise_ratio_db_v_crosspol_channel");
      tt->struct_vals[156].s = tdrpStrDup("signal_to_noise_ratio_vx");
      tt->struct_vals[157].s = tdrpStrDup("dB");
      tt->struct_vals[158].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[159].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[160].d = 0.01;
      tt->struct_vals[161].d = 0;
      tt->struct_vals[162].e = DBMHC;
      tt->struct_vals[163].s = tdrpStrDup("DBMHC");
      tt->struct_vals[164].s = tdrpStrDup("power_in_dbm_h_copol_channel");
      tt->struct_vals[165].s = tdrpStrDup("log_power_hc");
      tt->struct_vals[166].s = tdrpStrDup("dBm");
      tt->struct_vals[167].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[168].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[169].d = 0.01;
      tt->struct_vals[170].d = 0;
      tt->struct_vals[171].e = DBMHX;
      tt->struct_vals[172].s = tdrpStrDup("DBMHX");
      tt->struct_vals[173].s = tdrpStrDup("power_in_dbm_h_crosspol_channel");
      tt->struct_vals[174].s = tdrpStrDup("log_power_hx");
      tt->struct_vals[175].s = tdrpStrDup("dBm");
      tt->struct_vals[176].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[177].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[178].d = 0.01;
      tt->struct_vals[179].d = 0;
      tt->struct_vals[180].e = DBMVC;
      tt->struct_vals[181].s = tdrpStrDup("DBMVC");
      tt->struct_vals[182].s = tdrpStrDup("power_in_dbm_v_copol_channel");
      tt->struct_vals[183].s = tdrpStrDup("log_power_vc");
      tt->struct_vals[184].s = tdrpStrDup("dBm");
      tt->struct_vals[185].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[186].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[187].d = 0.01;
      tt->struct_vals[188].d = 0;
      tt->struct_vals[189].e = DBMVX;
      tt->struct_vals[190].s = tdrpStrDup("DBMVX");
      tt->struct_vals[191].s = tdrpStrDup("power_in_dbm_v_crosspol_channel");
      tt->struct_vals[192].s = tdrpStrDup("log_power_vx");
      tt->struct_vals[193].s = tdrpStrDup("dBm");
      tt->struct_vals[194].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[195].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[196].d = 0.01;
      tt->struct_vals[197].d = 0;
    tt++;
    
    // Parameter 'Comment 19'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 19");
    tt->comment_hdr = tdrpStrDup("ECHO FIELDS UNCHANGED TO OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'add_echo_fields_to_output'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_echo_fields_to_output");
    tt->descr = tdrpStrDup("Option to echo fields from input to output files.");
    tt->help = tdrpStrDup("If true, the fields listed in echo_fields will be added to the output_fields. This allows you to copy extra fields directly from the input to the output.");
    tt->val_offset = (char *) &add_echo_fields_to_output - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'echo_fields'
    // ctype is '_echo_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("echo_fields");
    tt->descr = tdrpStrDup("Echo fields.");
    tt->help = tdrpStrDup("Set the details for the fields you wish to echo from the input to the output. The output_field_name is the ndtCDF variable name. Set the long name to a more descriptive name. Set the standard name to the CF standard name for this field. If the long and standard names are empty, the values in the input will be used unchanged. If SCALING_SPECIFIED, then the scale and offset is used.");
    tt->array_offset = (char *) &_echo_fields - &_start_;
    tt->array_n_offset = (char *) &echo_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(echo_field_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("echo_field_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_echo_fields->input_field_name - (char *) _echo_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_echo_fields->output_field_name - (char *) _echo_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_echo_fields->long_name - (char *) _echo_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_echo_fields->standard_name - (char *) _echo_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("output_units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_echo_fields->output_units - (char *) _echo_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_echo_fields->encoding - (char *) _echo_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[5].enum_def.nfields = 4;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_FL32");
        tt->struct_def.fields[5].enum_def.fields[0].val = OUTPUT_ENCODING_FL32;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
        tt->struct_def.fields[5].enum_def.fields[1].val = OUTPUT_ENCODING_INT32;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
        tt->struct_def.fields[5].enum_def.fields[2].val = OUTPUT_ENCODING_INT16;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
        tt->struct_def.fields[5].enum_def.fields[3].val = OUTPUT_ENCODING_INT08;
      tt->struct_def.fields[6].ftype = tdrpStrDup("output_scaling_t");
      tt->struct_def.fields[6].fname = tdrpStrDup("output_scaling");
      tt->struct_def.fields[6].ptype = ENUM_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_echo_fields->output_scaling - (char *) _echo_fields;
        tt->struct_def.fields[6].enum_def.name = tdrpStrDup("output_scaling_t");
        tt->struct_def.fields[6].enum_def.nfields = 2;
        tt->struct_def.fields[6].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[6].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[6].enum_def.fields[0].name = tdrpStrDup("OUTPUT_SCALING_DYNAMIC");
        tt->struct_def.fields[6].enum_def.fields[0].val = OUTPUT_SCALING_DYNAMIC;
        tt->struct_def.fields[6].enum_def.fields[1].name = tdrpStrDup("OUTPUT_SCALING_SPECIFIED");
        tt->struct_def.fields[6].enum_def.fields[1].val = OUTPUT_SCALING_SPECIFIED;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("output_scale");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_echo_fields->output_scale - (char *) _echo_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("output_offset");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_echo_fields->output_offset - (char *) _echo_fields;
    tt->n_struct_vals = 18;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("AIQ");
      tt->struct_vals[1].s = tdrpStrDup("AIQ");
      tt->struct_vals[2].s = tdrpStrDup("mean_phase_from_phasor_sum");
      tt->struct_vals[3].s = tdrpStrDup("mean_phase_from_phasor_sum");
      tt->struct_vals[4].s = tdrpStrDup("deg");
      tt->struct_vals[5].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[6].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[7].d = 0.001;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].s = tdrpStrDup("NIQ");
      tt->struct_vals[10].s = tdrpStrDup("NIQ");
      tt->struct_vals[11].s = tdrpStrDup("log_mean_power_from_phasor_sum");
      tt->struct_vals[12].s = tdrpStrDup("log_mean_power_from_phasor_sum");
      tt->struct_vals[13].s = tdrpStrDup("dBm");
      tt->struct_vals[14].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[15].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[16].d = 0.01;
      tt->struct_vals[17].d = 0;
    tt++;
    
    // Parameter 'Comment 20'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 20");
    tt->comment_hdr = tdrpStrDup("ADDING MERGED FIELDS FROM A DIFFERENT FILE");
    tt->comment_text = tdrpStrDup("This can be useful if, for example, you want to copy across fields from the original moments files that are not possible to recompute using the covariances.");
    tt++;
    
    // Parameter 'add_merged_fields_to_output'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_merged_fields_to_output");
    tt->descr = tdrpStrDup("Option to add merged fields from a different file to output.");
    tt->help = tdrpStrDup("If true, we read the corresponding volume (in time) from a different directory, and merge the required fields into the output object. Ideally this file will have the same rays as the main input file.");
    tt->val_offset = (char *) &add_merged_fields_to_output - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'merge_input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("merge_input_dir");
    tt->descr = tdrpStrDup("Input directory for files for merged fields.");
    tt->help = tdrpStrDup("These files should match the main input files in time and scan strategy.");
    tt->val_offset = (char *) &merge_input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'merge_fields'
    // ctype is '_merge_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("merge_fields");
    tt->descr = tdrpStrDup("Fields to be merged from other file.");
    tt->help = tdrpStrDup("Most likely the fields to be merged will come from the original moments output file. Some of the moments may not be reproducible from the covariances, and so it is good to be able to copy these from the moments file instead and merge them with the output data. If the output_field_name, long_name, standard_name or units are empty, the names from the original file will be used.");
    tt->array_offset = (char *) &_merge_fields - &_start_;
    tt->array_n_offset = (char *) &merge_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(merge_field_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("merge_field_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("input_field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_merge_fields->input_field_name - (char *) _merge_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("output_field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_merge_fields->output_field_name - (char *) _merge_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_merge_fields->long_name - (char *) _merge_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_merge_fields->standard_name - (char *) _merge_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("output_units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_merge_fields->output_units - (char *) _merge_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_merge_fields->encoding - (char *) _merge_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[5].enum_def.nfields = 4;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_FL32");
        tt->struct_def.fields[5].enum_def.fields[0].val = OUTPUT_ENCODING_FL32;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
        tt->struct_def.fields[5].enum_def.fields[1].val = OUTPUT_ENCODING_INT32;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
        tt->struct_def.fields[5].enum_def.fields[2].val = OUTPUT_ENCODING_INT16;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
        tt->struct_def.fields[5].enum_def.fields[3].val = OUTPUT_ENCODING_INT08;
    tt->n_struct_vals = 12;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("RHO_VX_HX");
      tt->struct_vals[1].s = tdrpStrDup("RHO_VX_HX");
      tt->struct_vals[2].s = tdrpStrDup("cross_correlation_ratio_vx_to_hx");
      tt->struct_vals[3].s = tdrpStrDup("cross_correlation_ratio_hchx");
      tt->struct_vals[4].s = tdrpStrDup("");
      tt->struct_vals[5].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[6].s = tdrpStrDup("TDBZ");
      tt->struct_vals[7].s = tdrpStrDup("TDBZ");
      tt->struct_vals[8].s = tdrpStrDup("texture_of_reflectivity");
      tt->struct_vals[9].s = tdrpStrDup("texture_of_reflectivity");
      tt->struct_vals[10].s = tdrpStrDup("dBZ");
      tt->struct_vals[11].e = OUTPUT_ENCODING_INT16;
    tt++;
    
    // Parameter 'merge_file_time_tolerance_sec'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("merge_file_time_tolerance_sec");
    tt->descr = tdrpStrDup("Time tolerance for finding the merge file (secs).");
    tt->help = tdrpStrDup("We search merge_input_dir for a file within this tolerance of the primary data set.");
    tt->val_offset = (char *) &merge_file_time_tolerance_sec - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'merge_ray_time_tolerance_sec'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("merge_ray_time_tolerance_sec");
    tt->descr = tdrpStrDup("Time tolerance for matching rays between the primary and merged data sets (secs).");
    tt->help = tdrpStrDup("We match up rays between the primary and merged volumes, and require that the rays must match in time by this tolerance or less.");
    tt->val_offset = (char *) &merge_ray_time_tolerance_sec - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'merge_ray_elevation_tolerance_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("merge_ray_elevation_tolerance_deg");
    tt->descr = tdrpStrDup("Elevation tolerance for matching rays between the primary and merged data sets (deg).");
    tt->help = tdrpStrDup("We match up rays between the primary and merged volumes, and require that the rays must match in elevation by this tolerance or less.");
    tt->val_offset = (char *) &merge_ray_elevation_tolerance_deg - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'merge_ray_azimuth_tolerance_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("merge_ray_azimuth_tolerance_deg");
    tt->descr = tdrpStrDup("Azimuth tolerance for matching rays between the primary and merged data sets (deg).");
    tt->help = tdrpStrDup("We match up rays between the primary and merged volumes, and require that the rays must match in azimuth by this tolerance or less.");
    tt->val_offset = (char *) &merge_ray_azimuth_tolerance_deg - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'merge_ray_check_fixed_angle'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("merge_ray_check_fixed_angle");
    tt->descr = tdrpStrDup("Option to use the fixed angle instead of the measured angle when computing angular differences.");
    tt->help = tdrpStrDup("If true, the fixed angle will be used for elevation in PPI mode, and azimuth in RHI mode.");
    tt->val_offset = (char *) &merge_ray_check_fixed_angle - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 21'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 21");
    tt->comment_hdr = tdrpStrDup("CENSORING OUTPUT FIELDS");
    tt->comment_text = tdrpStrDup("You have the option of censoring the output data fields - i.e. setting the fields to missing values - at gates which meet certain criteria. If this is done correctly, it allows you to preserve the valid data and discard the noise, thereby improving compression. This leads to smaller data files.");
    tt++;
    
    // Parameter 'censoring_mode'
    // ctype is '_censoring_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("censoring_mode");
    tt->descr = tdrpStrDup("Control of the censoring operation.");
    tt->help = tdrpStrDup("\tCENSORING_NONE: no censoring performed.\n\tCENSORING_BY_NOISE_FLAG: censor fields for gates with NOISE_FLAG set to true.\n\tCENSORING_BY_SNR_AND_NCP: censoring is performed using thresholds applied to SNR and NCP.");
    tt->val_offset = (char *) &censoring_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("censoring_mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CENSORING_NONE");
      tt->enum_def.fields[0].val = CENSORING_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("CENSORING_BY_NOISE_FLAG");
      tt->enum_def.fields[1].val = CENSORING_BY_NOISE_FLAG;
      tt->enum_def.fields[2].name = tdrpStrDup("CENSORING_BY_SNR_AND_NCP");
      tt->enum_def.fields[2].val = CENSORING_BY_SNR_AND_NCP;
    tt->single_val.e = CENSORING_NONE;
    tt++;
    
    // Parameter 'censoring_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("censoring_snr_threshold");
    tt->descr = tdrpStrDup("SNR threshold for censoring (dB).");
    tt->help = tdrpStrDup("Applies to CENSORING_BY_SNR_AND_NCP mode. Censoring is applied if both SNR and NCP are below the specified thresholds.");
    tt->val_offset = (char *) &censoring_snr_threshold - &_start_;
    tt->single_val.d = -1;
    tt++;
    
    // Parameter 'censoring_ncp_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("censoring_ncp_threshold");
    tt->descr = tdrpStrDup("NCP threshold for censoring.");
    tt->help = tdrpStrDup("Applies to CENSORING_BY_SNR_AND_NCP mode. Censoring is applied if both SNR and NCP are below the specified thresholds.");
    tt->val_offset = (char *) &censoring_ncp_threshold - &_start_;
    tt->single_val.d = 0.15;
    tt++;
    
    // Parameter 'write_censor_flag_to_output'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_censor_flag_to_output");
    tt->descr = tdrpStrDup("Option to write the censoring flag to the output file.");
    tt->help = tdrpStrDup("If true, we will write a field called 'CENSOR_FLAG' to the output file, to indicate where censoring was performed.");
    tt->val_offset = (char *) &write_censor_flag_to_output - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 22'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 22");
    tt->comment_hdr = tdrpStrDup("OUTPUT FILE FORMAT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_format'
    // ctype is '_output_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_format");
    tt->descr = tdrpStrDup("Format for the output files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_format - &_start_;
    tt->enum_def.name = tdrpStrDup("output_format_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_FORMAT_CFRADIAL");
      tt->enum_def.fields[0].val = OUTPUT_FORMAT_CFRADIAL;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_FORMAT_DORADE");
      tt->enum_def.fields[1].val = OUTPUT_FORMAT_DORADE;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_FORMAT_FORAY");
      tt->enum_def.fields[2].val = OUTPUT_FORMAT_FORAY;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_FORMAT_NEXRAD");
      tt->enum_def.fields[3].val = OUTPUT_FORMAT_NEXRAD;
      tt->enum_def.fields[4].name = tdrpStrDup("OUTPUT_FORMAT_UF");
      tt->enum_def.fields[4].val = OUTPUT_FORMAT_UF;
      tt->enum_def.fields[5].name = tdrpStrDup("OUTPUT_FORMAT_MDV_RADIAL");
      tt->enum_def.fields[5].val = OUTPUT_FORMAT_MDV_RADIAL;
    tt->single_val.e = OUTPUT_FORMAT_CFRADIAL;
    tt++;
    
    // Parameter 'netcdf_style'
    // ctype is '_netcdf_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("netcdf_style");
    tt->descr = tdrpStrDup("NetCDF style - if output_format is CFRADIAL");
    tt->help = tdrpStrDup("netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls");
    tt->val_offset = (char *) &netcdf_style - &_start_;
    tt->enum_def.name = tdrpStrDup("netcdf_style_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLASSIC");
      tt->enum_def.fields[0].val = CLASSIC;
      tt->enum_def.fields[1].name = tdrpStrDup("NC64BIT");
      tt->enum_def.fields[1].val = NC64BIT;
      tt->enum_def.fields[2].name = tdrpStrDup("NETCDF4");
      tt->enum_def.fields[2].val = NETCDF4;
      tt->enum_def.fields[3].name = tdrpStrDup("NETCDF4_CLASSIC");
      tt->enum_def.fields[3].val = NETCDF4_CLASSIC;
    tt->single_val.e = NETCDF4;
    tt++;
    
    // Parameter 'Comment 23'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 23");
    tt->comment_hdr = tdrpStrDup("OUTPUT BYTE-SWAPPING and COMPRESSION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_native_byte_order'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_native_byte_order");
    tt->descr = tdrpStrDup("Option to leave data in native byte order.");
    tt->help = tdrpStrDup("If false, data will be byte-swapped as appropriate on output.");
    tt->val_offset = (char *) &output_native_byte_order - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_compressed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_compressed");
    tt->descr = tdrpStrDup("Option to compress data fields on output.");
    tt->help = tdrpStrDup("Applies to netCDF and Dorade. UF does not support compression.");
    tt->val_offset = (char *) &output_compressed - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 24'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 24");
    tt->comment_hdr = tdrpStrDup("OUTPUT OPTIONS FOR CfRadial FILES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_force_ngates_vary'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_force_ngates_vary");
    tt->descr = tdrpStrDup("Option to force the use of ragged arrays for CfRadial files.");
    tt->help = tdrpStrDup("Only applies to CfRadial. If true, forces the use of ragged arrays even if the number of gates for all rays is constant.");
    tt->val_offset = (char *) &output_force_ngates_vary - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'compression_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("compression_level");
    tt->descr = tdrpStrDup("Compression level for output, if compressed.");
    tt->help = tdrpStrDup("Applies to netCDF only. Dorade compression is run-length encoding, and has not options..");
    tt->val_offset = (char *) &compression_level - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 25'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 25");
    tt->comment_hdr = tdrpStrDup("OUTPUT DIRECTORY AND FILE NAME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
      tt->enum_def.fields[3].name = tdrpStrDup("SPECIFY_FILE_NAME");
      tt->enum_def.fields[3].val = SPECIFY_FILE_NAME;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'output_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename");
    tt->descr = tdrpStrDup("Name of output file.");
    tt->help = tdrpStrDup("Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename - &_start_;
    tt->single_val.s = tdrpStrDup("cfradial.test.nc");
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_individual_sweeps'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_individual_sweeps");
    tt->descr = tdrpStrDup("Option to write out individual sweeps if appropriate.");
    tt->help = tdrpStrDup("If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.");
    tt->val_offset = (char *) &write_individual_sweeps - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 26'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 26");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE MISSING VALUES");
    tt->comment_text = tdrpStrDup("Missing values are applicable to both metadata and field data. The default values should be satisfactory for most purposes. However, you can choose to override these if you are careful with the selected values.\n\nThe default values for metadata are:\n\tmissingMetaDouble = -9999.0\n\tmissingMetaFloat = -9999.0\n\tmissingMetaInt = -9999\n\tmissingMetaChar = -128\n\nThe default values for field data are:\n\tmissingFl64 = -9.0e33\n\tmissingFl32 = -9.0e33\n\tmissingSi32 = -2147483647\n\tmissingSi16 = -32768\n\tmissingSi08 = -128\n\n");
    tt++;
    
    // Parameter 'override_missing_metadata_values'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_missing_metadata_values");
    tt->descr = tdrpStrDup("Option to override the missing values for meta-data");
    tt->help = tdrpStrDup("See following parameter options.");
    tt->val_offset = (char *) &override_missing_metadata_values - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'missing_metadata_double'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("missing_metadata_double");
    tt->descr = tdrpStrDup("Missing value for metadata of type double.");
    tt->help = tdrpStrDup("Only applies if override_missing_metadata_values is TRUE");
    tt->val_offset = (char *) &missing_metadata_double - &_start_;
    tt->single_val.d = -9999;
    tt++;
    
    // Parameter 'missing_metadata_float'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("missing_metadata_float");
    tt->descr = tdrpStrDup("Missing value for metadata of type float.");
    tt->help = tdrpStrDup("Only applies if override_missing_metadata_values is TRUE");
    tt->val_offset = (char *) &missing_metadata_float - &_start_;
    tt->single_val.f = -9999;
    tt++;
    
    // Parameter 'missing_metadata_int'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_metadata_int");
    tt->descr = tdrpStrDup("Missing value for metadata of type int.");
    tt->help = tdrpStrDup("Only applies if override_missing_metadata_values is TRUE");
    tt->val_offset = (char *) &missing_metadata_int - &_start_;
    tt->single_val.i = -9999;
    tt++;
    
    // Parameter 'missing_metadata_char'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_metadata_char");
    tt->descr = tdrpStrDup("Missing value for metadata of type char.");
    tt->help = tdrpStrDup("Only applies if override_missing_metadata_values is TRUE");
    tt->val_offset = (char *) &missing_metadata_char - &_start_;
    tt->single_val.i = -128;
    tt++;
    
    // Parameter 'override_missing_field_values'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_missing_field_values");
    tt->descr = tdrpStrDup("Option to override the missing values for field data");
    tt->help = tdrpStrDup("See following parameter options.");
    tt->val_offset = (char *) &override_missing_field_values - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'missing_field_fl64'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("missing_field_fl64");
    tt->descr = tdrpStrDup("Missing value for field data of type 64-bit float.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_fl64 - &_start_;
    tt->single_val.d = -9e+33;
    tt++;
    
    // Parameter 'missing_field_fl32'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("missing_field_fl32");
    tt->descr = tdrpStrDup("Missing value for field data of type 32-bit float.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_fl32 - &_start_;
    tt->single_val.d = -9e+33;
    tt++;
    
    // Parameter 'missing_field_si32'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_field_si32");
    tt->descr = tdrpStrDup("Missing value for field data of type 32-bit integer.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_si32 - &_start_;
    tt->single_val.i = -2147483647;
    tt++;
    
    // Parameter 'missing_field_si16'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_field_si16");
    tt->descr = tdrpStrDup("Missing value for field data of type 16-bit integer.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_si16 - &_start_;
    tt->single_val.i = -232768;
    tt++;
    
    // Parameter 'missing_field_si08'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_field_si08");
    tt->descr = tdrpStrDup("Missing value for field data of type 8-bit integer.");
    tt->help = tdrpStrDup("Only applies if override_missing_field_values is TRUE");
    tt->val_offset = (char *) &missing_field_si08 - &_start_;
    tt->single_val.i = -128;
    tt++;
    
    // Parameter 'Comment 27'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 27");
    tt->comment_hdr = tdrpStrDup("WRITE STATUS TO SPDB IN XML FORMAT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_status_to_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_status_to_spdb");
    tt->descr = tdrpStrDup("Option to write out radar status and calibration to SPDB.");
    tt->help = tdrpStrDup("The transmit power, noise levels, radar status and calibration in use will be written to SPDB, as XML. The data can then be retrieved for plotting or other purposes.");
    tt->val_offset = (char *) &write_status_to_spdb - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'status_spdb_output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("status_spdb_output_url");
    tt->descr = tdrpStrDup("URL for writing status to SPDB in XML.");
    tt->help = tdrpStrDup("For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir");
    tt->val_offset = (char *) &status_spdb_output_url - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/spdb/RadxCov2Mom");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
