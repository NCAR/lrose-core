/*********************************************************
 * parameter definitions for RadxCov2Mom
 *
 * Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * July 2011
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "RadxCov2Mom reads covariances in Radx-supported format files, computes the moments and writes out the results to Radx-supported format files.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

commentdef {
  p_header = "THREADING FOR SPEED.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to use multiple compute threads to improve performance.";
  p_help = "The read and write stages occur in the main thread, since netCDF is not thread safe. The compute stage can be multi-threaded to improve performance.";
} use_multiple_threads;

paramdef int {
  p_default = 4;
  p_min = 1;
  p_descr = "The number of compute threads.";
  p_help = "The moments computations are segmented in range, with each thread computing a fraction of the number of gates. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads.";
} n_compute_threads;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = FILELIST;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file.  "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in ARCHIVE mode, at least) MUST contain a "
           "day-directory above the data file -- ./data_file.ext will not "
           "work as a file path, but ./yyyymmdd/data_file.ext will.";
} mode;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

commentdef {
  p_header = "READ OPTIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to aggregate sweep files into a volume on read.";
  p_help = "If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.";
} aggregate_sweep_files_on_read;

paramdef boolean {
  p_default = true;
  p_descr = "Option to ignore data taken in IDLE mode.";
  p_help = "If true, on read will ignore files with an IDLE scan mode.";
} ignore_idle_scan_mode_on_read;

paramdef boolean {
  p_default = false;
  p_descr = "Optimize the transitions in surveillance mode.";
  p_help = "If true, we check the transitions between sweeps in surveillance mode, and move problem rays into the correct sweep. We also set the transition flag on/off based on the max elevation error speficied. See below.";
} optimize_surveillance_transitions;

paramdef double {
  p_default = 0.25;
  p_descr = "Max elevation angle error when optimizing surveillance transitions (degrees).";
  p_help = "If the difference between the fixed angle and measured angle exceeds this value, the transition flag will be set. If not, it will be cleared.";
} optimized_transitions_max_elev_error;

paramdef boolean {
  p_default = false;
  p_descr = "Option to trip surveillance sweeps so that they only cover 360 degrees.";
  p_help = "Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.";
} trim_surveillance_sweeps_to_360deg;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove rays taken while the antenna was in transition.";
  p_help = "If true, rays with the transition flag set will not be used. The transiton flag is set when the antenna is in transtion between one sweep and the next.";
} remove_rays_with_antenna_transitions;

paramdef int {
  p_default = 0;
  p_descr = "Number of transition rays to include as a margin";
  p_help =  "Sometimes the transition flag is turned on too early in a transition, on not turned off quickly enough after a transition. If you set this to a number greater than 0, that number of rays will be included at each end of the transition, i.e. the transition will effectively be shorter at each end by this number of rays.";
} transition_nrays_margin;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to compute sweep fixed angles using the angles in the data.";
  p_help = "Normally the sweep angles are set using the scan strategy angles - i.e., the theoretically perfect angles. This option allows you to recompute the sweep angles using the measured elevation angles (in PPI mode) or azimuth angles (in RHI mode).";
} compute_sweep_fixed_angles_from_rays;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set the sweep mode by inspecting the ray angles.";
  p_help = "If the sweep modes are not correct, we can inspect the ray angles to deduce what the antenna scan motion was, and set the sweep mode accordingly."; 
} compute_sweep_modes_from_ray_angles;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set the max range for any ray.";
} set_max_range;

paramdef double {
  p_default = 9999;
  p_descr = "Specified maximim range - km.";
  p_help = "Gates beyond this range are removed.";
} max_range_km;

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the number of gates to be constant.";
  p_help = "If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.";
} set_ngates_constant;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set fixed angle limits";
  p_help = "Only use sweeps within the specified fixed angle limits.";
} set_fixed_angle_limits;

paramdef double {
  p_default = 0;
  p_descr = "Lower fixed angle limit - degrees.";
} lower_fixed_angle_limit;

paramdef double {
  p_default = 90;
  p_descr = "Upper fixed angle limit - degrees.";
} upper_fixed_angle_limit;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set sweep number limits";
  p_help = "Only read sweeps within the specified sweep number limits.";
} set_sweep_num_limits;

paramdef int {
  p_default = 0;
  p_descr = "Lower sweep number limit.";
} lower_sweep_num;

paramdef int {
  p_default = 0;
  p_descr = "Upper sweep number limit.";
} upper_sweep_num;

commentdef {
  p_header = "CHECKING SWEEP DATA";
  p_text = "Checking whether sweeps should be included.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to check the number of rays in a sweep.";
  p_help = "If TRUE, a sweep is only considered valid if the number of rays exceeds 'min_rays_in_sweep'.";
} check_min_rays_in_sweep;

paramdef int {
  p_default = 180;
  p_descr = "The min number of rays for a sweep to be valid.";
  p_help = "If the number of rays is less than this, the sweep is removed. See 'check_min_rays_in_sweep'.";
} min_rays_in_sweep;

commentdef {
  p_header = "OPTION TO OVERRIDE RADAR LOCATION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} override_radar_location;

paramdef double {
  p_default = -999;
  p_descr = "Radar latitude (deg).";
  p_help = "See override_radar_location.";
} radar_latitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar longitude (deg).";
  p_help = "See override_radar_location.";
} radar_longitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar altitude (meters).";
  p_help = "See override_radar_location.";
} radar_altitude_meters;

commentdef {
  p_header = "INPUT COVARIANCE FIELDS";
  p_text = "Finding the names of covariance fields in the input files.";
}

typedef enum {

  LAG0_HC_DB,
  LAG0_HX_DB,
  LAG0_VC_DB,
  LAG0_VX_DB,

  LAG0_HCVX_DB,
  LAG0_HCVX_PHASE,

  LAG0_VCHX_DB,
  LAG0_VCHX_PHASE,

  LAG0_VXHX_DB,
  LAG0_VXHX_PHASE,

  LAG1_HC_DB,
  LAG1_HC_PHASE,

  LAG1_VC_DB,
  LAG1_VC_PHASE,

  LAG1_HCVC_DB,
  LAG1_HCVC_PHASE,

  LAG1_VCHC_DB,
  LAG1_VCHC_PHASE,

  LAG1_VXHX_DB,
  LAG1_VXHX_PHASE,

  LAG2_HC_DB,
  LAG2_HC_PHASE,

  LAG2_VC_DB,
  LAG2_VC_PHASE,

  LAG3_HC_DB,
  LAG3_HC_PHASE,

  LAG3_VC_DB,
  LAG3_VC_PHASE,

  RVVHH0_DB,
  RVVHH0_PHASE

} covariance_id_t;

typedef struct {

  covariance_id_t field_id;
  string field_name;
    
} input_covar_t;

paramdef struct input_covar_t {
  p_default = {
    { LAG0_HC_DB, "LAG0_HC_DB"},
    { LAG0_HX_DB, "LAG0_HX_DB"},
    { LAG0_VC_DB, "LAG0_VC_DB"},
    { LAG0_VX_DB, "LAG0_VX_DB"},
    { LAG0_HCVX_DB, "LAG0_HCVX_DB"},
    { LAG0_HCVX_PHASE, "LAG0_HCVX_PHASE"},
    { LAG0_VCHX_DB, "LAG0_VCHX_DB"},
    { LAG0_VCHX_PHASE, "LAG0_VCHX_PHASE"},
    { LAG0_VXHX_DB, "LAG0_VXHX_DB"},
    { LAG0_VXHX_PHASE, "LAG0_VXHX_PHASE"},
    { LAG1_HC_DB, "LAG1_HC_DB"},
    { LAG1_HC_PHASE, "LAG1_HC_PHASE"},
    { LAG1_VC_DB, "LAG1_VC_DB"},
    { LAG1_VC_PHASE, "LAG1_VC_PHASE"},
    { LAG1_HCVC_DB, "LAG1_HCVC_DB"},
    { LAG1_HCVC_PHASE, "LAG1_HCVC_PHASE"},
    { LAG1_VCHC_DB, "LAG1_VCHC_DB"},
    { LAG1_VCHC_PHASE, "LAG1_VCHC_PHASE"},
    { LAG1_VXHX_DB, "LAG1_VXHX_DB"},
    { LAG1_VXHX_PHASE, "LAG1_VXHX_PHASE"},
    { LAG2_HC_DB, "LAG2_HC_DB"},
    { LAG2_HC_PHASE, "LAG2_HC_PHASE"},
    { LAG2_VC_DB, "LAG2_VC_DB"},
    { LAG2_VC_PHASE, "LAG2_VC_PHASE"},
    { LAG3_HC_DB, "LAG3_HC_DB"},
    { LAG3_HC_PHASE, "LAG3_HC_PHASE"},
    { LAG3_VC_DB, "LAG3_VC_DB"},
    { LAG3_VC_PHASE, "LAG3_VC_PHASE"},
    { RVVHH0_DB, "RVVHH0_DB"},
    { RVVHH0_PHASE, "RVVHH0_PHASE"}
  };
  p_descr = "Indicate which field name is to be used for each covariance.";
  p_help = "Set the field name for each covariance type. If the covariance is not available in the input field, it will be set to missing.";
} input_covars[];

commentdef {
  p_header = "NOISE DETECTION";
  p_text = "Noise detection will be performed for one or both of 2 reasons: (a) if you set compute_vol_noise_stats to TRUE; (b) if you set censoring_mode is set to CENSORING_BY_NOISE_FLAG.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to compute the noise statistics per volume.";
  p_help = "If true, we will compute the noise stats for each volume.";
} compute_vol_noise_stats;

paramdef double {
  p_default = 0.0;
  p_descr = "Minimum elevation for computing noise stats on the volume (deg).";
  p_help = "Only rays with elevation above this will be included in the noise stats.";
} vol_noise_stats_min_elev_deg;

paramdef double {
  p_default = 90.0;
  p_descr = "Maximum elevation for computing noise stats on the volume (deg).";
  p_help = "Only rays with elevation less than this will be included in the noise stats.";
} vol_noise_stats_max_elev_deg;

paramdef int {
  p_default = 9;
  p_descr = "Number of gates over which the noise detection feature fields are computed.";
  p_help = "To identify noise at a gate, we accumulate the phase change in range for the entire ray. We then assume that the phase change will be linear in a local sense, i.e. within some region around each gate. This parameter specifies the length of the assumed linear region. The phase change error is computed as the mean absolute error between the actual accumulated phase change and the linear fit to the phase change over the local region. NOTE - this number should be odd.";
} noise_ngates_kernel;

paramdef int {
  p_default = 30;
  p_descr = "Min number of gates for computing median noise on a ray.";
  p_help = "In order to compute median noise for a ray, we require noise to be detected at at least this number of gates"; 
} noise_min_ngates_for_ray_median;

typedef enum {
  NOISE_RAY_BY_RAY, NOISE_RUNNING_MEDIAN
} noise_method_t;

paramdef enum noise_method_t {
  p_default = NOISE_RAY_BY_RAY;
  p_descr = "Method for computing mean noise.";
  p_help = "\tRAY_BY_RAY: compute noise for each ray individually. \tRUNNING_MEDIAN: store noise values in an array, and compute the mean noise when we have enough data. The noise varies more smoothly than in the RAY_BY_RAY method.";
} noise_method;

paramdef int {
  p_default = 2500;
  p_descr = "Number of gates used to compute noise running mean.";
  p_help = "When noise is located at a gate, the power values are stored in arrays. When we have accumulated enough gates, the mean is computed.";
} noise_ngates_for_running_median;

commentdef {
  p_header = "INTEREST MAPS and WEIGHTS for NOISE LOCATION";
  p_text = "Each map should hold at least 2 points. The points should be increasing in value, i.e. the value should increase for each subsequent point. The various interest values are combined using the specified weights in a weighted mean to produce the final interest value.";
};

typedef struct {
  double value;
  double interest;
} interest_map_point_t;

paramdef struct interest_map_point_t {
  p_default = {{35.0, 0.001}, {45.0, 1.0}};
  p_descr = "Interest mapping for phase change for noise.";
} phase_change_error_for_noise_interest_map[];

paramdef double {
  p_default = 1.0;
  p_descr = "Weight for interest for phase change error - for noise.";
  p_help = "The relative weighting applied when computing the fuzzy sum.";
} phase_change_error_for_noise_interest_weight;

paramdef struct interest_map_point_t {
  p_default = {{0.65, 1.0}, {0.75, 0.001}};
  p_descr = "Interest mapping for sdev of dbm for noise.";
} dbm_sdev_for_noise_interest_map[];

paramdef double {
  p_default = 1.0;
  p_descr = "Weight for interest for sdev of dbm - for noise.";
  p_help = "The relative weighting applied when computing the fuzzy sum.";
} dbm_sdev_for_noise_interest_weight;

paramdef struct interest_map_point_t {
  p_default = {{0.1, 1.0}, {0.2, 0.001}};
  p_descr = "Interest mapping for mean of ncp for noise.";
} ncp_mean_for_noise_interest_map[];

paramdef double {
  p_default = 1.0;
  p_descr = "Weight for interest for sdev of dbm - for noise.";
  p_help = "The relative weighting applied when computing the fuzzy sum.";
} ncp_mean_for_noise_interest_weight;

paramdef double {
  p_default = 0.51;
  p_descr = "Threshold interest value for identifying noise.";
  p_help = "If the fuzzy interest value exceeds this threshold, noise is assumed to exist at that gate.";
} interest_threshold_for_noise;

paramdef struct interest_map_point_t {
  p_default = {{10.0, 0.001}, {20.0, 1.0}};
  p_descr = "Interest mapping for phase change for signal.";
} phase_change_error_for_signal_interest_map[];

paramdef double {
  p_default = 1.0;
  p_descr = "Weight for interest for phase change error - for signal.";
  p_help = "The relative weighting applied when computing the fuzzy sum.";
} phase_change_error_for_signal_interest_weight;

paramdef struct interest_map_point_t {
  p_default = {{0.75, 1.0}, {0.85, 0.001}};
  p_descr = "Interest mapping for sdev of dbm for signal.";
} dbm_sdev_for_signal_interest_map[];

paramdef double {
  p_default = 1.0;
  p_descr = "Weight for interest for sdev of dbm - for signal.";
  p_help = "The relative weighting applied when computing the fuzzy sum.";
} dbm_sdev_for_signal_interest_weight;

paramdef double {
  p_default = 0.51;
  p_descr = "Threshold interest value for identifying signal.";
  p_help = "If the fuzzy interest value exceeds this threshold, signal is assumed to exist at that gate.";
} interest_threshold_for_signal;

commentdef {
  p_header = "MOMENTS COMPUTATIONS";
}

typedef enum {
  SINGLE_POL, 
  SINGLE_POL_V, 
  DUAL_POL_ALT_HV_CO_ONLY, 
  DUAL_POL_ALT_HV_CO_CROSS,
  DUAL_POL_SIM_HV,
  DUAL_POL_H_ONLY,
  DUAL_POL_V_ONLY
} xmit_rcv_mode_t;

paramdef enum xmit_rcv_mode_t {
  p_default = SINGLE_POL;
  p_descr = "Transmit/receive mode.";
  p_help = "This governs the type of moments computations to be applied.\n"
  "\tSINGLE_POL:\n"
  "\t\tSingle polarization - H channel\n"
  "\tSINGLE_POL_V:\n"
  "\t\tSingle polarization - V channel\n"
  "\tDUAL_POL_ALT_HV_CO_ONLY:\n"
  "\t\tDual pol, alternating transmission\n"
  "\t\t          copolar receiver only\n"
  "\tDUAL_POL_ALT_HV_CO_CROSS:\n"
  "\t\tDual pol, alternating transmission\n"
  "\t\t          co-polar and cross-polar receivers\n"
  "\tDUAL_POL_SIM_HV:\n"
  "\t\tDual pol, simultaneous transmit/receive\n"
  "\tDUAL_POL_H_ONLY:\n"
  "\t\tDual pol, H transmission\n"
  "\t\t          simultaneous H and V receive\n"
  "\tDUAL_POL_V_ONLY:\n"
  "\t\tDual pol, V transmission\n"
  "\t\t          simultaneous H and V receive\n";
} xmit_rcv_mode;

paramdef boolean {
  p_default = false;
  p_descr = "Option to correct power for estimated noise.";
  p_help = "We estimate the noise by identifying regions with noise and computing the mean power - see above. If this parameter is set to TRUE, we use the estimated noise instead of teh calibrated noise to compute the noise-subtracted powers.";
} use_estimated_noise_for_noise_subtraction;

paramdef boolean {
  p_default = true;
  p_descr = "Option to correct for system phidp.";
  p_help = "If true, the H and V correlation phases will be corrected by adding/subtracting the system phidp value as appropriate. This avoids premature wrapping of the phased from which phidp and velocity are computed. If false, this correction will not be applied. To find the system phidp, set this to false and compute phidp for vertically-pointing data.";
} correct_for_system_phidp;

paramdef boolean {
  p_default = false;
  p_descr = "Option to change sign on velocity field.";
  p_help = "Set to true to change the sign of the computed radial velocity field.";
} change_velocity_sign;

paramdef boolean {
  p_default = true;
  p_descr = "Option to use the hybrid estimator for spectrum width, if applicable.";
  p_help = "In some modes, we can compute the spectrum width with the NCAR hybrid spectrum width estimator. If this is set, the hybrid width will be used for all modes except dual pol alternating mode.";
} use_hybrid_for_width;

paramdef double {
  p_default = -3;
  p_descr = "Min SNR for computing ZDR (dB).";
  p_help = "If the SNR is below this threshold, ZDR will be set to missing.";
} min_snr_db_for_zdr;

paramdef double {
  p_default = -3;
  p_descr = "Min SNR for computing LDR (dB).";
  p_help = "If the SNR is below this threshold, LDR will be set to missing.";
} min_snr_db_for_ldr;

commentdef {
  p_header = "RADAR CALIBRATION XML FILES";
}

typedef struct {
  double pulse_width_us;
  string cal_file_path;
} cal_file_t;

paramdef struct cal_file_t {
  p_default = {
    { 0.5, "./spol_cal_pw_0.5.xml" },
    { 1.0, "./spol_cal_pw_1.0.xml" },
    { 2.0, "./spol_cal_pw_2.0.xml" }
  };
  p_descr = "Specify the calibration file for each pulse width.";
  p_help = "First, the program will determine which of the specified pulse widths best matches the pulse width in the data. The closest match will be used to determine the cal file.\n\nNOTE - the pulse width is specified in micro-seconds.";
} cal_files[];

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the system PHIDP in the calibration data.";
  p_help = "If true, the parameter 'system_phidp_deg' will override the system phidp in the calibration data.";
} override_cal_system_phidp;

paramdef double {
  p_default = 0.0;
  p_descr = "System PHIDP to be applied to all calibrations (deg).";
  p_help = "See 'override_cal_system_phidp'.";
} system_phidp_deg;

paramdef boolean {
  p_default = false;
  p_descr = "Option to change the sign of PHIDP.";
  p_help = "This should not be necessary - using for testing.";
} change_phidp_sign;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the DBZ correction in the calibration data.";
  p_help = "If true, we will override the DBZ correction in the calibration files. See 'dbz_correction'.";
} override_cal_dbz_correction;

paramdef double {
  p_default = 0.0;
  p_descr = "DBZ correction to be applied to all calibrations (dB).";
  p_help = "See 'override_cal_dbz_correction'.";
} dbz_correction;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the LDR corrections in the calibration data.";
  p_help = "If true, the parameters 'ldrh_correction_db' and 'ldrv_correction_db' will override the ldr corrections in the calibration data.";
} override_cal_ldr_correction;

paramdef double {
  p_default = 0.0;
  p_descr = "LDRH correction to be applied to all calibrations (dB).";
  p_help = "See 'override_cal_ldr_corrections'.";
} ldr_correction_db_h;

paramdef double {
  p_default = 0.0;
  p_descr = "LDRV correction to be applied to all calibrations (dB).";
  p_help = "See 'override_cal_ldr_corrections'.";
} ldr_correction_db_v;

commentdef {
  p_header = "CORRECTION TO ZDR";       
  p_text = "This can be eith a constant correction, or a linear-regression correction based on temperature.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the ZDR correction in the calibration data.";
  p_help = "If true, we will override the ZDR correction in the parameter file. If 'use_temperature_based_zdr_correction' is true, we will read temperature from SPDB and compute the correction based on the temperatire. If not, the parameter 'zdr_correction_db' will be used.";
} override_cal_zdr_correction;

paramdef double {
  p_default = 0.0;
  p_descr = "ZDR correction to be applied to all calibrations (dB).";
  p_help = "See 'override_cal_zdr_correction'. Only applies if 'apply_temperature_based_zdr_correction' is false.";
} zdr_correction_db;

paramdef boolean {
  p_default = false;
  p_descr = "Option to determine the ZDR correction using temperature.";
  p_help = "If true, we read the temperature from SPDB, and apply a zdr correction computed from a linear fit between temperature and zdr correction.";
} use_temperature_based_zdr_correction;

paramdef string {
  p_default = "spdbp:://hail:0:pecan/spdb/spol/temp";
  p_descr = "URL for site temperatures from SPDB.";
} site_temp_spdb_url;

paramdef string {
  p_default = "SPOL";
  p_descr = "Station name for site temperature.";
} site_temp_station_name;

paramdef int {
  p_default = 3600;
  p_descr = "Search margin when finding site temp data (secs).";
  p_help = "We search for the temperature closest in time to the radar volume. This is the search margin on either side of the volume time.";
} site_temp_search_margin_secs;

paramdef double {
  p_default = 0.0;
  p_descr = "Slope of regression fit between ZDR and temperature (db/C).";
  p_help = "The temperature-based ZDR correction is based on a linear regression analysis between ZDR and temperature. This is the slope of the regression line fit. The estimated ZDR correction is computed as (temp * slope + intercept).";
} temp_based_zdr_correction_slope;

paramdef double {
  p_default = 0.0;
  p_descr = "Intercept of regression fit between ZDR and temperature (C).";
  p_help = "The temperature-based ZDR correction is based on a linear regression analysis between ZDR and temperature. This is the intercept of the regression line fit. The estimated ZDR correction is computed as (temp * slope + intercept).";
} temp_based_zdr_correction_intercept;

commentdef {
  p_header = "ADJUSTING CALIBRATION FOR MEASURED TRANSMIT POWER";   
  p_text = "If the measured transmitter power is available, we can adjust the calibration to use that power instead of the nominal values available at calibration time.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to adjust the calibration based on measured transmitter power.";
  p_help = "If true, and the measured transmitter power is available, the calibration object will be updated to reflect the measured transmit power as opposed to the power used at calibration time.";
} adjust_calibration_for_measured_xmit_power;

paramdef double {
  p_default = 85.0;
  p_descr = "Min valid value for measured xmit power (dBm).";
  p_help = "Sometimes we get spurious values for measured xmit power. This limit allows us to ignore bad values.";
} min_valid_measured_xmit_power_dbm;

paramdef double {
  p_default = 90.0;
  p_descr = "Max valid value for measured xmit power (dBm).";
  p_help = "Sometimes we get spurious values for measured xmit power. This limit allows us to ignore bad values.";
} max_valid_measured_xmit_power_dbm;

paramdef double {
  p_default = 0.0;
  p_descr = "Correction to measured xmit power (dB).";
  p_help = "We correct the measured powers by this amount before using it.";
} measured_xmit_power_correction_db;

paramdef boolean {
  p_default = false;
  p_descr = "Option to swap the H and V measurements for transmit power.";
  p_help = "Set this to true if the power measuements were made on the incorrect channels.";
} swap_measured_xmit_power_channels;

commentdef {
  p_header = "ATMOSPHERIC ATTENUATION CORRECTION METHOD";
}

typedef enum {
  ATMOS_ATTEN_NONE, 
  ATMOS_ATTEN_CONSTANT, 
  ATMOS_ATTEN_CRPL
} atmos_atten_method_t;

paramdef enum atmos_atten_method_t {
  p_default = ATMOS_ATTEN_CRPL;
  p_descr = "Method for computing atmospheric attenuation.";
  p_help = "This is applied to the DBZ fields only.\n"
  "\tATMOS_ATTEN_NONE:\n"
  "\t\tNo correction is applied\n"
  "\tATMOS_ATTEN_CONSTANT:\n"
  "\t\tA constant correction in dB/km is applied\n"
  "\t\tSee atmos_atten_db_per_km\n"
  "\tATMOS_ATTEN_CRPL:\n"
  "\t\tUses the method based on the Central Radio Propagation Laboratory\n"
  "\t\tmeasurements.\n"
  "\t\tSee Doviak and Zrnic, page 44\n";
} atmos_atten_method;

paramdef double {
  p_default = 0.012;
  p_descr = "Constant atmospheric attenuation (dB/km).";
  p_help = "DBZ is corrected for this.";
} atmos_atten_db_per_km;

commentdef {
  p_header = "PRECIP-INDUCED ATTENUATION CORRECTION FOR DBZ AND ZDR";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to apply precip attenuation correction for DBZ and ZDR.";
  p_help =
    "The following extra fields will be computed:\n"
    "\tDBZ_ATTEN_CORRECTION - correction in dB\n"
    "\tZDR_ATTEN_CORRECTION - correction in dB\n"
    "\tDBZ_ATTEN_CORRECTED - DBZHC corrected\n"
    "\tZDR_ATTEN_CORRECTED - ZDR corrected\n";
} apply_precip_attenuation_correction;

paramdef boolean {
  p_default = false;
  p_descr = "Option to specify the coefficients and exponents - see below.";
  p_help = "If false, the default coefficients will be determined for the radar wavelength.";
} specify_coefficients_for_attenuation_correction;

paramdef double {
  p_default = 0.017;
  p_descr = "Coefficient for computing DBZ attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} dbz_attenuation_coefficient;

paramdef double {
  p_default = 0.84;
  p_descr = "Exponent for computing DBZ attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} dbz_attenuation_exponent;

paramdef double {
  p_default = 0.017;
  p_descr = "Coefficient for computing ZDR attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} zdr_attenuation_coefficient;

paramdef double {
  p_default = 0.84;
  p_descr = "Exponent for computing ZDR attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} zdr_attenuation_exponent;

commentdef {
  p_header = "COMPUTING KDP";
  p_text = "Parameters for computing KDP. KDP will be computed if KDP_available is FALSE.";
}

typedef enum {
  FIR_LEN_125, FIR_LEN_60, FIR_LEN_40, FIR_LEN_30, FIR_LEN_20, FIR_LEN_10
} fir_filter_len_t;
  
paramdef enum fir_filter_len_t {
  p_default = FIR_LEN_10;
  p_descr = "Filter length for the FIR filter for PHIDP (gates)";
  p_help = "When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.";
} KDP_fir_filter_len;

paramdef int {
  p_default = 2;
  p_descr = "Sets the number of iterations for the initial FIR filter for unfolded PHIDP.";
  p_help = "After unfolding PHIDP, the FIR filter is applied to the unfolded phidp, a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.";
} KDP_n_filt_iterations_unfolded;

paramdef int {
  p_default = 3;
  p_descr = "Sets the number of iterations for the final FIR filter for conditioned PHIDP.";
  p_help = "In order to identify phase shift on backscatter (PSOB), we condition the PHIDP to keep it generally increasing with range. The FIR filter is applied to the conditioned phidp a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.";
} KDP_n_filt_iterations_conditioned;

paramdef boolean {
  p_default = false;
  p_descr = "Perform iterative filtering to locate backscatter phase shift.";
  p_descr = "This is the Hubbert-Bringi method.";
} KDP_use_iterative_filtering;

paramdef double {
  p_default = 4.0;
  p_descr = "Difference threshold for the iterative filtering method.";
  p_help = "The FIR filter is applied successively, KDP_n_filt_iterations_conditioned times. After each iteration the result is checked against the original. If the difference is less than this parameter, the original value at that gate is retained. If the difference exceeds this parameter, the new filtered value is retained.";
} KDP_phidp_difference_threshold;

paramdef int {
  p_default = 9;
  p_descr = "Number of gates over which the phidp mean, sdev and jitter are computed.";
  p_help = "The mean, sdev and jitter of phidp are computed over a consecutive number of gates in range, centered on the current gate of interest. This parameter is the number of gates over which these statistics are computed.";
} KDP_ngates_for_stats;

paramdef double {
  p_default = 25.0;
  p_descr = "Sets the threshold for the standard deviation of phidp in range.";
  p_help = "The sdev of phidp is a good test for valid phidp. The sdev is computed in the circle, so that it takes account of folding if present. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_phidp_sdev_max;

paramdef double {
  p_default = 25.0;
  p_descr = "Sets the threshold for the jitter of phidp in range.";
  p_help = "The jitter of phidp is defined as the mean absolute change in angle between successive phidp measurements in range. It is computed on the circle to take account of folding. If the jitter is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_phidp_jitter_max;

paramdef double {
  p_default = 0.01;
  p_descr = "Sets the min valid KDP value.";
  p_help = "Values less than this are set to 0.";
} KDP_min_valid_abs_kdp;

paramdef boolean {
  p_default = true;
  p_descr = "Check the SNR.";
  p_descr = "This test can help identify regions of good PHIDP.";
} KDP_check_snr;

paramdef double {
  p_default = 0.0;
  p_descr = "Sets the threshold for checking SNR (dB).";
  p_help = "If the SNR drops below this value, KDP will not be computed at this gate.";
} KDP_snr_threshold;

paramdef boolean {
  p_default = true;
  p_descr = "Check the RHOHV.";
  p_descr = "This test can help identify regions of good PHIDP.";
} KDP_check_rhohv;

paramdef double {
  p_default = 0.85;
  p_descr = "Sets the threshold for checking RHOHV.";
  p_help = "If the RHOHV drops below this value, KDP will not be computed at this gate.";
} KDP_rhohv_threshold;

paramdef boolean {
  p_default = true;
  p_descr = "Check the standard deviation of ZDR in range?";
  p_descr = "This test can help identify regions of clutter, and hence noisy PHIDP.";
} KDP_check_zdr_sdev;

paramdef double {
  p_default = 2.5;
  p_descr = "Sets the threshold for the standard deviation of zdr in range.";
  p_help = "The sdev of zdr is a good test for clutter. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_zdr_sdev_max;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print debug messages in KDP computation.";
} KDP_debug;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write ray files to debug KDP computation.";
} KDP_write_ray_files;

paramdef string {
  p_default = "/tmp/kdp_ray_files";
  p_descr = "Directory for KDP ray files.";
} KDP_ray_files_dir;

commentdef {
  p_header = "LOADING UP TEST FIELDS - for debugging";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to load up test fields when computing alternative vel_alt for alternating mode.";
  p_help = "If true, the following will be loaded:\n\ttest2: meanConfidence for gap run.\n\ttest3: min velocity for a gap run.\n\ttest4: max velocity for a gap run.\n\ttest5: corrected velocity for run with incorrect unfold.";
} load_alt_vel_alt_test_fields;

commentdef {
  p_header = "SPECIFYING FIELD NAMES AND OUTPUT ENCODING";
}

typedef enum {
  
  DBZ,
  DBZHC,
  DBZVC,
  DBZHX,
  DBZVX,
  DBZ_NO_ATMOS_ATTEN,

  VEL,
  VEL_ALT,
  VEL_HV,
  VEL_ALT_FOLD_INTERVAL,
  VEL_ALT_FOLD_CONFIDENCE,
  VEL_DIFF,
  VEL_UNFOLD_INTERVAL,
  VEL_H_ONLY,
  VEL_V_ONLY,

  WIDTH,
  WIDTH_H_ONLY,
  WIDTH_V_ONLY,

  NCP,
  NCP_H_ONLY,
  NCP_V_ONLY,
  NCP_H_MINUS_V,

  ZDRM,
  ZDR,
  ZDR_BIAS,

  LDRHM,
  LDRH,
  LDRVM,
  LDRV,
  LDR_DIFF,
  LDR_MEAN,

  RHOHV,
  RHOHV_NNC,

  RHO_HCVX,
  RHO_VCHX,
  RHO_VXHX,

  PHIDP0,
  PHIDP,
  PHIDP_FILT,
  PHIDP_COND,
  KDP,
  PSOB,

  SNR,
  SNRHC,
  SNRHX,
  SNRVC,
  SNRVX,

  DBM,
  DBMHC,
  DBMHX,
  DBMVC,
  DBMVX,

  PHASE_FOR_NOISE,
  ACCUM_PHASE_CHANGE,
  PHASE_CHANGE_ERROR,
  DBM_SDEV,
  NCP_MEAN,

  NOISE_FLAG,
  SIGNAL_FLAG,

  NOISE_BIAS_DB_HC,
  NOISE_BIAS_DB_HX,
  NOISE_BIAS_DB_VC,
  NOISE_BIAS_DB_VX,

  DBZ_ATTEN_CORRECTION,
  ZDR_ATTEN_CORRECTION,
  DBZ_ATTEN_CORRECTED,
  ZDR_ATTEN_CORRECTED,

  DBZ_FOR_KDP,
  ZDR_FOR_KDP,
  RHOHV_FOR_KDP,
  SNR_FOR_KDP,
  PHIDP_SDEV_FOR_KDP,
  PHIDP_JITTER_FOR_KDP,
  ZDR_SDEV_FOR_KDP,

  TEST,
  TEST2,
  TEST3,
  TEST4,
  TEST5

} output_field_id_t;

typedef enum {
  OUTPUT_ENCODING_FL32,
  OUTPUT_ENCODING_INT32,
  OUTPUT_ENCODING_INT16,
  OUTPUT_ENCODING_INT08
} output_encoding_t;

typedef enum {
  OUTPUT_SCALING_DYNAMIC,
  OUTPUT_SCALING_SPECIFIED
} output_scaling_t;

typedef struct {
  output_field_id_t id;
  string name; 
  string long_name; 
  string standard_name; 
  string units;
  output_encoding_t encoding;
  output_scaling_t scaling;
  double scale;
  double offset;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    {
      id = SNR,
      name = "SNR",
      long_name = "signal_to_noise_ratio_db",
      standard_name = "signal_to_noise_ratio",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = DBM,
      name = "DBM",
      long_name = "power_in_dbm",
      standard_name = "log_power",
      units = "dBm",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = DBZ,
      name = "DBZ",
      long_name = "radar_reflectivity",
      standard_name = "equivalent_reflectivity_factor",
      units = "dBZ",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = VEL,
      name = "VEL",
      long_name = "radial_velocity",
      standard_name = "radial_velocity_away_from_instrument",
      units = "m/s",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = WIDTH,
      name = "WIDTH",
      long_name = "doppler_spectrum_width",
      standard_name = "doppler_spectrum_width",
      units = "m/s",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = NCP,
      name = "NCP",
      long_name = "normalized_coherent_power",
      standard_name = "normalized_coherent_power",
      units = "",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
    ,
    {
      id = ZDRM,
      name = "ZDRM",
      long_name = "measured_log_differential_reflectivity",
      standard_name = "measured_log_differential_reflectivity",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = ZDR,
      name = "ZDR",
      long_name = "calibrated_log_differential_reflectivity",
      standard_name = "log_differential_reflectivity",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = LDRH,
      name = "LDRH",
      long_name = "linear_depolarization_ratio_h_channel",
      standard_name = "log_linear_depolarization_ratio_h",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = LDRV,
      name = "LDRV",
      long_name = "linear_depolarization_ratio_v_channel",
      standard_name = "log_linear_depolarization_ratio_v",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = RHOHV,
      name = "RHOHV",
      long_name = "cross_correlation_ratio",
      standard_name = "cross_correlation_ratio_hv",
      units = "",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
    ,
    {
      id = PHIDP,
      name = "PHIDP",
      long_name = "differential_phase",
      standard_name = "differential_phase_hv",
      units = "deg",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = KDP,
      name = "KDP",
      long_name = "specific_differential_phase",
      standard_name = "specific_differential_phase_hv",
      units = "deg/km",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
    ,
    {
      id = PSOB,
      name = "PSOB",
      long_name = "phase_shift_on_backscatter",
      standard_name = "phase_shift_on_backscatter",
      units = "deg",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
    ,
    {
      id = SNRHC,
      name = "SNRHC",
      long_name = "signal_to_noise_ratio_db_h_copol_channel",
      standard_name = "signal_to_noise_ratio_hc",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = SNRHX,
      name = "SNRHX",
      long_name = "signal_to_noise_ratio_db_h_crosspol_channel",
      standard_name = "signal_to_noise_ratio_hx",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = SNRVC,
      name = "SNRVC",
      long_name = "signal_to_noise_ratio_db_v_copol_channel",
      standard_name = "signal_to_noise_ratio_vc",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = SNRVX,
      name = "SNRVX",
      long_name = "signal_to_noise_ratio_db_v_crosspol_channel",
      standard_name = "signal_to_noise_ratio_vx",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = DBMHC,
      name = "DBMHC",
      long_name = "power_in_dbm_h_copol_channel",
      standard_name = "log_power_hc",
      units = "dBm",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = DBMHX,
      name = "DBMHX",
      long_name = "power_in_dbm_h_crosspol_channel",
      standard_name = "log_power_hx",
      units = "dBm",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = DBMVC,
      name = "DBMVC",
      long_name = "power_in_dbm_v_copol_channel",
      standard_name = "log_power_vc",
      units = "dBm",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = DBMVX,
      name = "DBMVX",
      long_name = "power_in_dbm_v_crosspol_channel",
      standard_name = "log_power_vx",
      units = "dBm",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
  };
  p_descr = "Indicate which fields should be written to the output file.";
  p_help = "Choose the ID from the list. The name and units can be set however the user prefers.\n\nThe output_encoding and output_scaling apply to CfRadial output only. If the output_scaling is DYNAMIC then the scale and offset are computed using the dynamic range of the data. If the output_scaling is SPECIFIED, then the specified scale and offset are used.";
} output_fields[];

commentdef {
  p_header = "ECHO FIELDS UNCHANGED TO OUTPUT";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to echo fields from input to output files.";
  p_help = "If true, the fields listed in echo_fields will be added to the output_fields. This allows you to copy extra fields directly from the input to the output.";
} add_echo_fields_to_output;

typedef struct {
  string input_field_name; 
  string output_field_name; 
  string long_name; 
  string standard_name; 
  string output_units;
  output_encoding_t encoding;
  output_scaling_t output_scaling;
  double output_scale;
  double output_offset;
} echo_field_t;

paramdef struct echo_field_t {
  p_default = {
    { "AIQ",
      "AIQ",
      "mean_phase_from_phasor_sum",
      "mean_phase_from_phasor_sum",
      "deg",
      OUTPUT_ENCODING_INT16,
      OUTPUT_SCALING_DYNAMIC, 
      0.001, 0.0
    },
    { "NIQ", 
      "NIQ", 
      "log_mean_power_from_phasor_sum",
      "log_mean_power_from_phasor_sum",
      "dBm", 
      OUTPUT_ENCODING_INT16,
      OUTPUT_SCALING_DYNAMIC, 
      0.01, 0.0
    }
  };
  p_descr = "Echo fields.";
  p_help = "Set the details for the fields you wish to echo from the input to the output. The output_field_name is the ndtCDF variable name. Set the long name to a more descriptive name. Set the standard name to the CF standard name for this field. If the long and standard names are empty, the values in the input will be used unchanged. If SCALING_SPECIFIED, then the scale and offset is used.";
} echo_fields[];

commentdef {
  p_header = "ADDING MERGED FIELDS FROM A DIFFERENT FILE";
  p_text = "This can be useful if, for example, you want to copy across fields from the original moments files that are not possible to recompute using the covariances.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to add merged fields from a different file to output.";
  p_help = "If true, we read the corresponding volume (in time) from a different directory, and merge the required fields into the output object. Ideally this file will have the same rays as the main input file.";
} add_merged_fields_to_output;

paramdef string {
  p_default = ".";
  p_descr = "Input directory for files for merged fields.";
  p_help = "These files should match the main input files in time and scan strategy.";
} merge_input_dir;

typedef struct {
  string input_field_name; 
  string output_field_name; 
  string long_name; 
  string standard_name; 
  string output_units;
  output_encoding_t encoding;
} merge_field_t;

paramdef struct merge_field_t {
  p_default = {
    { "RHO_VX_HX",
      "RHO_VX_HX",
      "cross_correlation_ratio_vx_to_hx",
      "cross_correlation_ratio_hchx",
      "",
      OUTPUT_ENCODING_INT16
    },
    { "TDBZ", 
      "TDBZ", 
      "texture_of_reflectivity",
      "texture_of_reflectivity",
      "dBZ", 
      OUTPUT_ENCODING_INT16
    }
  };
  p_descr = "Fields to be merged from other file.";
  p_help = "Most likely the fields to be merged will come from the original moments output file. Some of the moments may not be reproducible from the covariances, and so it is good to be able to copy these from the moments file instead and merge them with the output data. If the output_field_name, long_name, standard_name or units are empty, the names from the original file will be used.";
} merge_fields[];

paramdef double {
  p_default = 30;
  p_descr = "Time tolerance for finding the merge file (secs).";
  p_help = "We search merge_input_dir for a file within this tolerance of the primary data set.";
} merge_file_time_tolerance_sec;

paramdef double {
  p_default = 30;
  p_descr = "Time tolerance for matching rays between the primary and merged data sets (secs).";
  p_help = "We match up rays between the primary and merged volumes, and require that the rays must match in time by this tolerance or less.";
} merge_ray_time_tolerance_sec;

paramdef double {
  p_default = 0.1;
  p_descr = "Elevation tolerance for matching rays between the primary and merged data sets (deg).";
  p_help = "We match up rays between the primary and merged volumes, and require that the rays must match in elevation by this tolerance or less.";
} merge_ray_elevation_tolerance_deg;

paramdef double {
  p_default = 0.1;
  p_descr = "Azimuth tolerance for matching rays between the primary and merged data sets (deg).";
  p_help = "We match up rays between the primary and merged volumes, and require that the rays must match in azimuth by this tolerance or less.";
} merge_ray_azimuth_tolerance_deg;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use the fixed angle instead of the measured angle when computing angular differences.";
  p_help = "If true, the fixed angle will be used for elevation in PPI mode, and azimuth in RHI mode.";
} merge_ray_check_fixed_angle;

commentdef {
  p_header = "CENSORING OUTPUT FIELDS";
  p_text = "You have the option of censoring the output data fields - i.e. setting the fields to missing values - at gates which meet certain criteria. If this is done correctly, it allows you to preserve the valid data and discard the noise, thereby improving compression. This leads to smaller data files.";
}

typedef enum {
  CENSORING_NONE,
  CENSORING_BY_NOISE_FLAG,
  CENSORING_BY_SNR_AND_NCP
} censoring_mode_t;

paramdef enum censoring_mode_t {
  p_default = CENSORING_NONE;
  p_descr = "Control of the censoring operation.";
  p_help = "\tCENSORING_NONE: no censoring performed.\n\tCENSORING_BY_NOISE_FLAG: censor fields for gates with NOISE_FLAG set to true.\n\tCENSORING_BY_SNR_AND_NCP: censoring is performed using thresholds applied to SNR and NCP.";
} censoring_mode;

paramdef double {
  p_default = -1.0;
  p_descr = "SNR threshold for censoring (dB).";
  p_help = "Applies to CENSORING_BY_SNR_AND_NCP mode. Censoring is applied if both SNR and NCP are below the specified thresholds.";
} censoring_snr_threshold;

paramdef double {
  p_default = 0.15;
  p_descr = "NCP threshold for censoring.";
  p_help = "Applies to CENSORING_BY_SNR_AND_NCP mode. Censoring is applied if both SNR and NCP are below the specified thresholds.";
} censoring_ncp_threshold;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to write the censoring flag to the output file.";
  p_help = "If true, we will write a field called 'CENSOR_FLAG' to the output file, to indicate where censoring was performed.";
} write_censor_flag_to_output;

commentdef {
  p_header = "OUTPUT FILE FORMAT";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_NEXRAD,
  OUTPUT_FORMAT_UF,
  OUTPUT_FORMAT_MDV_RADIAL
} output_format_t;

paramdef enum output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL;
  p_descr = "Format for the output files.";
} output_format;

typedef enum {
  CLASSIC, NC64BIT, NETCDF4, NETCDF4_CLASSIC
} netcdf_style_t;

paramdef enum netcdf_style_t {
  p_default = NETCDF4;
  p_descr = "NetCDF style - if output_format is CFRADIAL";
  p_help = "netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls";
} netcdf_style;

commentdef {
  p_header = "OUTPUT BYTE-SWAPPING and COMPRESSION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to leave data in native byte order.";
  p_help = "If false, data will be byte-swapped as appropriate on output.";
} output_native_byte_order;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress data fields on output.";
  p_help = "Applies to netCDF and Dorade. UF does not support compression.";
} output_compressed;

commentdef {
  p_header = "OUTPUT OPTIONS FOR CfRadial FILES";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to force the use of ragged arrays for CfRadial files.";
  p_help = "Only applies to CfRadial. If true, forces the use of ragged arrays even if the number of gates for all rays is constant.";
} output_force_ngates_vary;

paramdef int {
  p_default = 4;
  p_descr = "Compression level for output, if compressed.";
  p_help = "Applies to netCDF only. Dorade compression is run-length encoding, and has not options..";
} compression_level;

commentdef {
  p_header = "OUTPUT DIRECTORY AND FILE NAME";
}

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY,
  SPECIFY_FILE_NAME
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.";
} output_filename_mode;

paramdef string {
  p_default = "cfradial.test.nc";
  p_descr = "Name of output file.";
  p_help = "Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.";
} output_filename;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out individual sweeps if appropriate.";
  p_help = "If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.";
} write_individual_sweeps;

commentdef {
  p_header = "OPTION TO OVERRIDE MISSING VALUES";
  p_text = "Missing values are applicable to both metadata and field data. The default values should be satisfactory for most purposes. However, you can choose to override these if you are careful with the selected values.\n\nThe default values for metadata are:\n\tmissingMetaDouble = -9999.0\n\tmissingMetaFloat = -9999.0\n\tmissingMetaInt = -9999\n\tmissingMetaChar = -128\n\nThe default values for field data are:\n\tmissingFl64 = -9.0e33\n\tmissingFl32 = -9.0e33\n\tmissingSi32 = -2147483647\n\tmissingSi16 = -32768\n\tmissingSi08 = -128\n\n";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the missing values for meta-data";
  p_help = "See following parameter options.";
} override_missing_metadata_values;

paramdef double {
  p_default = -9999.0;
  p_descr = "Missing value for metadata of type double.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_double;

paramdef float {
  p_default = -9999.0;
  p_descr = "Missing value for metadata of type float.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_float;

paramdef int {
  p_default = -9999;
  p_descr = "Missing value for metadata of type int.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_int;

paramdef int {
  p_default = -128;
  p_descr = "Missing value for metadata of type char.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_char;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the missing values for field data";
  p_help = "See following parameter options.";
} override_missing_field_values;

paramdef double {
  p_default = -9.0e33;
  p_descr = "Missing value for field data of type 64-bit float.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_fl64;

paramdef double {
  p_default = -9.0e33;
  p_descr = "Missing value for field data of type 32-bit float.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_fl32;

paramdef int {
  p_default = -2147483647;
  p_descr = "Missing value for field data of type 32-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si32;

paramdef int {
  p_default = -232768;
  p_descr = "Missing value for field data of type 16-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si16;

paramdef int {
  p_default = -128;
  p_descr = "Missing value for field data of type 8-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si08;

commentdef {
  p_header = "WRITE STATUS TO SPDB IN XML FORMAT";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out radar status and calibration to SPDB.";
  p_help = "The transmit power, noise levels, radar status and calibration in use will be written to SPDB, as XML. The data can then be retrieved for plotting or other purposes.";
} write_status_to_spdb;

paramdef string {
  p_default = "/tmp/spdb/RadxCov2Mom";
  p_descr = "URL for writing status to SPDB in XML.";
  p_help = "For local writes, specify the directory. For remote writes, specify the full url: spdbp:://host::dir";
} status_spdb_output_url;

