/*********************************************************
 * parameter definitions for RadxHca
 *
 * Mike Dixon, EOL, NCAR, Boulder, CO, USA, 80307-3000
 *
 * Dec 2016
 */

//////////////////////////////////////////////////////////

commentdef {
  p_header = "RadxHca reads moments from Radx-supported format files, runs the NEXRAD Hydrometeor Classification Algorithm (HCA) on the moments, and writes out the results to CfRadial files.";
  p_text = "References:\n\nPark HyangSuk, A. V. Ryzhhov, D. S. Zrnic, Kyung0Eak Kim. June 2009. The Hydrometeor Classification Algorithm for the Polarimetric WSR-88D: Description and Application to an MCS. AMS Weather and Forecasting, Vol 24, 730-748, June 2009.";
}

commentdef {
  p_header = "DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Program instance for process registration.";
  p_help = "This application registers with procmap. This is the instance used for registration.";
} instance;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to register this process with the process mapper (procmap).";
  p_help = "If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.";
} register_with_procmap;

paramdef int {
  p_default = 60;
  p_descr = "Interval for registering with procmap (secs).";
  p_help = "The app will register with procmap at this interval, to update its status. If it does not register within twice this interval, the auto_restart script will restart the app.";
} procmap_register_interval;

commentdef {
  p_header = "THREADING FOR SPEED.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to use multiple compute threads to improve performance.";
  p_help = "The read and write stages occur in the main thread, since netCDF is not thread safe. The compute stage can be multi-threaded to improve performance.";
} use_multiple_threads;

paramdef int {
  p_default = 4;
  p_min = 1;
  p_descr = "The number of compute threads.";
  p_help = "The moments computations are segmented in range, with each thread computing a fraction of the number of gates. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads.";
} n_compute_threads;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = ".";
  p_descr = "Input directory for searching for files.";
  p_help = "Files will be searched for in this directory.";
} input_dir;

typedef enum {
  REALTIME, ARCHIVE, FILELIST
} mode_t;

paramdef enum mode_t {
  p_default = FILELIST;
  p_descr = "Operating mode";
  p_help = "In REALTIME mode, the program waits for a new input file.  "
           "In ARCHIVE mode, it moves through the data between the start "
           "and end times set on the command line. "
           "In FILELIST mode, it moves through the list of file names "
           "specified on the command line. "
           "Paths (in ARCHIVE mode, at least) MUST contain a "
           "day-directory above the data file -- ./data_file.ext will not "
           "work as a file path, but ./yyyymmdd/data_file.ext will.";
} mode;

paramdef int {
  p_default = 300;
  p_descr = "Maximum age of realtime data (secs)";
  p_help =  "Only data less old than this will be used.";
} max_realtime_data_age_secs;

paramdef string {
  p_default = "";
  p_descr = "File name extension.";
  p_help = "If set, only files with this extension will be processed.";
} input_file_search_ext;

paramdef string {
  p_default = "";
  p_descr = "File name sub-string.";
  p_help = "If set, only files with names containing this sub-string will be processed.";
} input_file_search_substr;

commentdef {
  p_header = "READ OPTIONS";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to aggregate sweep files into a volume on read.";
  p_help = "If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.";
} aggregate_sweep_files_on_read;

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove rays taken while the antenna was in transition.";
  p_help = "If true, rays with the transition flag set will not be used. The transiton flag is set when the antenna is in transtion between one sweep and the next.";
} remove_rays_with_antenna_transitions;

paramdef int {
  p_default = 0;
  p_descr = "Number of transition rays to include as a margin";
  p_help =  "Sometimes the transition flag is turned on too early in a transition, on not turned off quickly enough after a transition. If you set this to a number greater than 0, that number of rays will be included at each end of the transition, i.e. the transition will effectively be shorter at each end by this number of rays.";
} transition_nrays_margin;

paramdef boolean {
  p_default = false;
  p_descr = "Option to trip surveillance sweeps so that they only cover 360 degrees.";
  p_help = "Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.";
} trim_surveillance_sweeps_to_360deg;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set the max range for any ray.";
} set_max_range;

paramdef double {
  p_default = 9999;
  p_descr = "Specified maximim range - km.";
  p_help = "Gates beyond this range are removed.";
} max_range_km;

paramdef boolean {
  p_default = false;
  p_descr = "Option to force the number of gates to be constant.";
  p_help = "If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.";
} set_ngates_constant;

paramdef boolean {
  p_default = false;
  p_descr = "Option to set fixed angle limits";
  p_help = "Only use sweeps within the specified fixed angle limits.";
} set_fixed_angle_limits;

paramdef double {
  p_default = 0;
  p_descr = "Lower fixed angle limit - degrees.";
} lower_fixed_angle_limit;

paramdef double {
  p_default = 90;
  p_descr = "Upper fixed angle limit - degrees.";
} upper_fixed_angle_limit;

commentdef {
  p_header = "OPTION TO OVERRIDE RADAR LOCATION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} override_radar_location;

paramdef double {
  p_default = -999;
  p_descr = "Radar latitude (deg).";
  p_help = "See override_radar_location.";
} radar_latitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar longitude (deg).";
  p_help = "See override_radar_location.";
} radar_longitude_deg;

paramdef double {
  p_default = -999;
  p_descr = "Radar altitude (meters).";
  p_help = "See override_radar_location.";
} radar_altitude_meters;

commentdef {
  p_header = "INPUT FIELD INFORMATION";
  p_text = "Names of fields in the input file. The following fields are required: SNR, DBZ, ZDR, PHIDP and RHOHV. KDP is also required internally, but if KDP is not available it will be computed from PHIDP. LDR is optional, and is used for PID only.";
}

paramdef string {
  p_default = "DBZ";
  p_descr = "Field name for DBZ.";
  p_help = "Horizontally-polarized reflectivity factor.";
} DBZ_field_name;

paramdef string {
  p_default = "VEL";
  p_descr = "Field name for radial velocity.";
  p_help = "This is used in quality checks.";
} VEL_field_name;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is WIDTH data available?";
  p_help = "If NCP is not available, this field is used for locating RLAN interference.";
} WIDTH_available;

paramdef string {
  p_default = "WIDTH";
  p_descr = "Field name for WIDTH.";
} WIDTH_field_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Is NCP data available?";
  p_help = "This field is used for locating RLAN interference. If it is not available, use spectrum width instead.";
} NCP_available;

paramdef string {
  p_default = "NCP";
  p_descr = "Field name for NCP.";
} NCP_field_name;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Is SNR data available?";
  p_help = "If not, SNR will be computed from the DBZ field. See 'noise_dbz_at_100km'.";
} SNR_available;

paramdef string {
  p_default = "SNR";
  p_descr = "Field name for SNR.";
  p_help = "Signal-to-noise ratio (dB).";
} SNR_field_name;

paramdef double {
  p_default = 0.0;
  p_descr = "The noise value, represented as dBZ at a range of 100km.";
  p_help = "Used to fill in missing reflectivity data for the vertical gradient of reflectivity in identifying sea clutter and AP. Also used if SNR_available is set to FALSE. It is used for computing the SNR from the DBZ field. The SNR will be computed by range-correcting this value and using it as the noise value.";
} noise_dbz_at_100km;

paramdef string {
  p_default = "ZDR";
  p_descr = "Field name for ZDR.";
} ZDR_field_name;

paramdef string {
  p_default = "PHIDP";
  p_descr = "Field name for PHIDP.";
} PHIDP_field_name;

paramdef string {
  p_default = "RHOHV";
  p_descr = "Field name for RHOHV.";
} RHOHV_field_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Is LDR data available?";
} LDR_available;

paramdef string {
  p_default = "LDR";
  p_descr = "Field name for LDR.";
} LDR_field_name;

commentdef {
  p_header = "COMPUTE KDP";
  p_help = "KDP is computed from PHIDP.";
}

typedef enum {
  FIR_LEN_125, FIR_LEN_60, FIR_LEN_40, FIR_LEN_30, FIR_LEN_20, FIR_LEN_10
} fir_filter_len_t;
  
paramdef enum fir_filter_len_t {
  p_default = FIR_LEN_10;
  p_descr = "Filter length for the FIR filter for PHIDP (gates)";
  p_help = "When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.";
} KDP_fir_filter_len;

paramdef int {
  p_default = 2;
  p_descr = "Sets the number of iterations for the initial FIR filter for unfolded PHIDP.";
  p_help = "After unfolding PHIDP, the FIR filter is applied to the unfolded phidp, a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.";
} KDP_n_filt_iterations_unfolded;

paramdef int {
  p_default = 3;
  p_descr = "Sets the number of iterations for the final FIR filter for conditioned PHIDP.";
  p_help = "In order to identify phase shift on backscatter (PSOB), we condition the PHIDP to keep it generally increasing with range. The FIR filter is applied to the conditioned phidp a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.";
} KDP_n_filt_iterations_conditioned;

paramdef boolean {
  p_default = false;
  p_descr = "Perform iterative filtering to locate backscatter phase shift.";
  p_descr = "This is the Hubbert-Bringi method.";
} KDP_use_iterative_filtering;

paramdef double {
  p_default = 4.0;
  p_descr = "Difference threshold for the iterative filtering method.";
  p_help = "The FIR filter is applied successively, KDP_n_filt_iterations_conditioned times. After each iteration the result is checked against the original. If the difference is less than this parameter, the original value at that gate is retained. If the difference exceeds this parameter, the new filtered value is retained.";
} KDP_phidp_difference_threshold;

paramdef int {
  p_default = 9;
  p_descr = "Number of gates over which the phidp mean, sdev and jitter are computed.";
  p_help = "The mean, sdev and jitter of phidp are computed over a consecutive number of gates in range, centered on the current gate of interest. This parameter is the number of gates over which these statistics are computed.";
} KDP_ngates_for_stats;

paramdef double {
  p_default = 25.0;
  p_descr = "Sets the threshold for the standard deviation of phidp in range.";
  p_help = "The sdev of phidp is a good test for valid phidp. The sdev is computed in the circle, so that it takes account of folding if present. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_phidp_sdev_max;

paramdef double {
  p_default = 25.0;
  p_descr = "Sets the threshold for the jitter of phidp in range.";
  p_help = "The jitter of phidp is defined as the mean absolute change in angle between successive phidp measurements in range. It is computed on the circle to take account of folding. If the jitter is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_phidp_jitter_max;

paramdef double {
  p_default = 0.01;
  p_descr = "Sets the min valid KDP value.";
  p_help = "Values less than this are set to 0.";
} KDP_min_valid_abs_kdp;

paramdef boolean {
  p_default = true;
  p_descr = "Check the SNR.";
  p_descr = "This test can help identify regions of good PHIDP.";
} KDP_check_snr;

paramdef double {
  p_default = 0.0;
  p_descr = "Sets the threshold for checking SNR (dB).";
  p_help = "If the SNR drops below this value, KDP will not be computed at this gate.";
} KDP_snr_threshold;

paramdef boolean {
  p_default = true;
  p_descr = "Check the RHOHV.";
  p_descr = "This test can help identify regions of good PHIDP.";
} KDP_check_rhohv;

paramdef double {
  p_default = 0.85;
  p_descr = "Sets the threshold for checking RHOHV.";
  p_help = "If the RHOHV drops below this value, KDP will not be computed at this gate.";
} KDP_rhohv_threshold;

paramdef boolean {
  p_default = true;
  p_descr = "Check the standard deviation of ZDR in range?";
  p_descr = "This test can help identify regions of clutter, and hence noisy PHIDP.";
} KDP_check_zdr_sdev;

paramdef double {
  p_default = 2.5;
  p_descr = "Sets the threshold for the standard deviation of zdr in range.";
  p_help = "The sdev of zdr is a good test for clutter. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.";
} KDP_zdr_sdev_max;

paramdef double {
  p_default = 0.25;
  p_descr = "Sets the lower limit of KDP for computing KDP conditioned by self-consistency.";
  p_help = "To compute KDP_SC, we first find the gates over which regular KDP exceeds a minimum threshold (i.e. this parameter). Over this run of gates we compute the PHIDP change from the regular KDP and from KDP_ZZDR. By taking the ratio of sum(KDP) / sum(KDP_ZZDR), and applying that ratio to KDP_ZZDR over these gates, we can compute KDP_SC such that the PHIDP change over these gates is the same for both KDP and KDP_SC.";
} KDP_minimum_for_self_consistency;

paramdef int {
  p_default = 5;
  p_descr = "Sets the length of the median filter when computing KDP_ZZDR.";
  p_help = "The Z and ZDR fields are smoothed with a median filter of this length prior to estimating KDP_ZZDR.";
} KDP_median_filter_len_for_ZZDR;

paramdef boolean {
  p_default = false;
  p_descr = "Option to print debug messages in KDP computation.";
} KDP_debug;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write ray files to debug KDP computation.";
} KDP_write_ray_files;

paramdef string {
  p_default = "/tmp/kdp_ray_files";
  p_descr = "Directory for KDP ray files.";
} KDP_ray_files_dir;

commentdef {
  p_header = "PRECIP-INDUCED ATTENUATION CORRECTION FOR DBZ AND ZDR";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to apply precip attenuation correction for DBZ and ZDR.";
  p_help =
    "The following extra fields will be computed:\n"
    "\tDBZ_ATTEN_CORRECTION - correction in dB\n"
    "\tZDR_ATTEN_CORRECTION - correction in dB\n"
    "\tDBZ_ATTEN_CORRECTED - DBZHC corrected\n"
    "\tZDR_ATTEN_CORRECTED - ZDR corrected\n";
} apply_precip_attenuation_correction;

paramdef boolean {
  p_default = true;
  p_descr = "Option to specify the coefficients and exponents - see below.";
  p_help = "If false, the default coefficients will be determined for the radar wavelength.";
} specify_coefficients_for_attenuation_correction;

paramdef double {
  p_default = 0.017;
  p_descr = "Coefficient for computing DBZ attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} dbz_attenuation_coefficient;

paramdef double {
  p_default = 0.84;
  p_descr = "Exponent for computing DBZ attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} dbz_attenuation_exponent;

paramdef double {
  p_default = 0.003;
  p_descr = "Coefficient for computing ZDR attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} zdr_attenuation_coefficient;

paramdef double {
  p_default = 1.05;
  p_descr = "Exponent for computing ZDR attenuation correction.";
  p_help = "See Bringi and Chandrasekar, Table 7.1, page 494.";
} zdr_attenuation_exponent;

commentdef {
  p_header = "COMPUTING BEAM HEIGHT";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the standard 4/3 earth radius model for refraction.";
  p_help = "If true, the standard 4/3 earth radius will be overridden. The US NWS NEXRAD system uses 1.21 instead of 1.333.";
} override_standard_pseudo_earth_radius;

paramdef double {
  p_default = 1.33333333;
  p_descr = "Ratio for computing the pseudo earth radius for beam height computations.";
  p_help = "For standard refraction this is 4/3. For super refraction it will be less than 4.3, and for sub-refraction it will be greater. NEXRAD uses 1.21.";
} pseudo_earth_radius_ratio;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the beamwidth in the input file.";
  p_height = "The beamwidth is used to compute the height at the top and bottom edges of the beam.";
} override_vertical_beamwidth;

paramdef double {
  p_default = 1.0;
  p_descr = "Specified radar antenna vertical beamwidth (deg).";
  p_help = "See 'override_vertical_beamwidth'.";
} vertical_beamwidth_deg;

commentdef {
  p_header = "LOCATING SEA CLUTTER";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to locate gates with sea clutter.";
} locate_sea_clutter;

commentdef {
  p_header = "INTEREST MAPS and WEIGHTS for SEA CLUTTER DETECTION";
  p_text = "Each map should hold at least 2 points. The points should be increasing in value, i.e. the value should increase for each subsequent point. The various interest values are combined using the specified weights in a weighted mean to produce the final interest value.";
};

typedef struct {
  double value;
  double interest;
} interest_map_point_t;

paramdef double {
  p_default = 0.0;
  p_descr = "Min SNR for sea clutter (dB).";
  p_help = "Only locate sea clutter if SNR exceeds this value.";
} seaclut_min_snr_db;

paramdef struct interest_map_point_t {
  p_default = {{0.35, 1.0}, {0.4, 0.0001}};
  p_descr = "SEA CLUTTER interest mapping for rhohv mean.";
} seaclut_rhohv_mean_interest_map[];

paramdef double {
  p_default = 1.0;
  p_descr = "SEA CLUTTER weight for interest for rhohv mean.";
  p_help = "The relative weighting applied when computing the fuzzy sum.";
} seaclut_rhohv_mean_weight;

paramdef struct interest_map_point_t {
  p_default = {{40.0, 0.0001}, {45.0, 1.0}};
  p_descr = "SEA CLUTTER interest mapping for sdev of phidp.";
} seaclut_phidp_sdev_interest_map[];

paramdef double {
  p_default = 1.0;
  p_descr = "Weight for interest for sdev of phidp.";
  p_help = "The relative weighting applied when computing the fuzzy sum.";
} seaclut_phidp_sdev_weight;

paramdef struct interest_map_point_t {
  p_default = {{1.5, 0.0001}, {2.5, 1.0}};
  p_descr = "SEA CLUTTER interest mapping for sdev of zdr.";
} seaclut_zdr_sdev_interest_map[];

paramdef double {
  p_default = 1.0;
  p_descr = "Weight for interest for sdev of zdr.";
  p_help = "The relative weighting applied when computing the fuzzy sum.";
} seaclut_zdr_sdev_weight;

paramdef struct interest_map_point_t {
  p_default = {{-15.0, 1.0}, {-5.0, 0.0}};
  p_descr = "SEA CLUTTER interest mapping for gradient of dbz in polar elevation space.";
  p_help = "The reflectivity gradient is computed with respect to elevation, i.e. the change in reflectivity with change in elevation angle. The units are db/deg.";
} seaclut_dbz_elev_gradient_interest_map[];

paramdef double {
  p_default = 1.0;
  p_descr = "Weight for interest for elevation gradient of dbz.";
  p_help = "The relative weighting applied when computing the fuzzy sum.";
} seaclut_dbz_elev_gradient_weight;

paramdef double {
  p_default = 0.51;
  p_descr = "Threshold interest value for identifying sea clutter.";
  p_help = "If the fuzzy interest value exceeds this threshold, sea clutter is assumed to exist at that gate.";
} seaclut_interest_threshold;

paramdef string {
  p_default = "DbzElevGradient";
  p_descr = "Field name for computed vertical dbz gradient in polar elevation space (dB/deg).";
  p_help = "For sea clutter identification, we need to compute the vertical gradient of reflectivity. This is the name of that gradient field, in dB/deg.";
} dbz_elevation_gradient_field_name;

paramdef string {
  p_default = "RayHtMsl";
  p_descr = "Field name for computed ray height (km).";
  p_help = "In order to compute the vertical gradient of reflectivity for sea clutter, we need to compute the beam height at each gate. This is the name of the ray height field, in km MSL.";
} ray_height_field_name;

paramdef double {
  p_default = 2.5;
  p_descr = "Max elevation angle for sea clutter (deg).";
  p_help = "Above this angle the clutter flag will not be set.";
} seaclut_max_elev_deg;

commentdef {
  p_header = "COMPUTING WSR88D HCA - HYDROMETEOR PARTICLE ID";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to compute HCA classification.";
} compute_hca;

paramdef double {
  p_default = 3.0;
  p_descr = "Minimum SNR for valid HCA classification.";
  p_help = "If the SNR at a gate is below this, the HCA is censored.";
} HCA_snr_threshold;

commentdef {
  p_header = "Classification types";
  p_text = "There are 10 classification types:\n\tGC: ground clutter or AP\n\tBS: biological scatterers\n\tDS: dry aggregated snow\n\tWS: wet snow\n\tCR: crystals of various orientations\n\tGR: graupel\n\tBD: big drops\n\tRA: light to moderate rain\n\tHR: heavy rain\n\tRH: mixture of rain and hail.";
}

typedef enum {
  CLASS_GC = 0,
  CLASS_BS = 1,
  CLASS_DS = 2,
  CLASS_WS = 3,
  CLASS_CR = 4,
  CLASS_GR = 5,
  CLASS_BD = 6,
  CLASS_RA = 7,
  CLASS_HR = 8,
  CLASS_RH = 9
} hca_class_t;

typedef enum {
  FEATURE_DBZ = 0,
  FEATURE_ZDR = 1,
  FEATURE_RHOHV = 2,
  FEATURE_LOG_KDP = 3,
  FEATURE_SD_DBZ = 4,
  FEATURE_SD_PHIDP = 5
} feature_field_t;

typedef struct {
  hca_class_t hca_class;
  feature_field_t feature;
  double x1;
  double x2;
  double x3;
  double x4;
  double weight;
} hca_interest_map_t;

paramdef struct hca_interest_map_t {
  p_default = {

    { CLASS_GC,  FEATURE_DBZ,     15,   20,   70,   80,   0.2 },
    { CLASS_BS,  FEATURE_DBZ,      5,   10,   20,   30,   0.4 },
    { CLASS_DS,  FEATURE_DBZ,      5,   10,   35,   40,   1.0 },
    { CLASS_WS,  FEATURE_DBZ,     25,   30,   40,   50,   0.6 },
    { CLASS_CR,  FEATURE_DBZ,      0,    5,   20,   25,   1.0 },
    { CLASS_GR,  FEATURE_DBZ,     25,   35,   50,   55,   0.8 },
    { CLASS_BD,  FEATURE_DBZ,     20,   25,   45,   50,   0.8 },
    { CLASS_RA,  FEATURE_DBZ,      5,   10,   45,   50,   1.0 },
    { CLASS_HR,  FEATURE_DBZ,     40,   45,   55,   60,   1.0 },
    { CLASS_RH,  FEATURE_DBZ,     45,   50,   75,   80,   1.0 },

    { CLASS_GC,  FEATURE_ZDR,     -4,   -2,    1,    2,   0.4 },
    { CLASS_BS,  FEATURE_ZDR,      0,    2,   10,   12,   0.8 },
    { CLASS_DS,  FEATURE_ZDR,   -0.3,  0.0,  0.3,  0.6,   0.8 },
    { CLASS_WS,  FEATURE_ZDR,    0.5,  1.0,  2.0,  3.0,   0.8 },
    { CLASS_CR,  FEATURE_ZDR,    0.1,  0.4,  3.0,  3.3,   0.6 },
    { CLASS_GR,  FEATURE_ZDR,   -0.3,  0.0,  0.0,  0.3,   1.0 },
    { CLASS_BD,  FEATURE_ZDR,   -0.3,  0.0,  0.0,  1.0,   0.8 },
    { CLASS_RA,  FEATURE_ZDR,   -0.3,  0.0,  0.0,  0.5,   1.0 },
    { CLASS_HR,  FEATURE_ZDR,   -0.3,  0.0,  0.0,  0.5,   1.0 },
    { CLASS_RH,  FEATURE_ZDR,   -0.3,  0.0,  0.0,  0.5,   1.0 },

    { CLASS_GC,  FEATURE_RHOHV,  0.50, 0.60, 0.90, 0.95,   1.0 },
    { CLASS_BS,  FEATURE_RHOHV,  0.30, 0.50, 0.80, 0.83,   1.0 },
    { CLASS_DS,  FEATURE_RHOHV,  0.95, 0.98, 1.00, 1.01,   0.6 },
    { CLASS_WS,  FEATURE_RHOHV,  0.88, 0.92, 0.95,0.985,   1.0 },
    { CLASS_CR,  FEATURE_RHOHV,  0.95, 0.98, 1.00, 1.01,   0.4 },
    { CLASS_GR,  FEATURE_RHOHV,  0.90, 0.97, 1.00, 1.01,   0.4 },
    { CLASS_BD,  FEATURE_RHOHV,  0.92, 0.95, 1.00, 1.01,   0.6 },
    { CLASS_RA,  FEATURE_RHOHV,  0.95, 0.97, 1.00, 1.01,   0.6 },
    { CLASS_HR,  FEATURE_RHOHV,  0.92, 0.95, 1.00, 1.01,   0.6 },
    { CLASS_RH,  FEATURE_RHOHV,  0.85, 0.90, 1.00, 1.01,   0.6 },

    { CLASS_GC,  FEATURE_LOG_KDP, -30,  -25,   10,   20,   0.0 },
    { CLASS_BS,  FEATURE_LOG_KDP, -30,  -25,   10,   20,   0.0 },
    { CLASS_DS,  FEATURE_LOG_KDP, -30,  -25,   10,   20,   0.0 },
    { CLASS_WS,  FEATURE_LOG_KDP, -30,  -25,   10,   20,   0.0 },
    { CLASS_CR,  FEATURE_LOG_KDP,  -5,    0,   10,   15,   0.5 },
    { CLASS_GR,  FEATURE_LOG_KDP, -30,  -25,   10,   20,   0.0 },
    { CLASS_BD,  FEATURE_LOG_KDP,  -1,    0,    0,    1,   0.0 },
    { CLASS_RA,  FEATURE_LOG_KDP,  -1,    0,    0,    1,   0.0 },
    { CLASS_HR,  FEATURE_LOG_KDP,  -1,    0,    0,    1,   1.0 },
    { CLASS_RH,  FEATURE_LOG_KDP, -10,   -4,    0,    1,   1.0 },

    { CLASS_GC,  FEATURE_SD_DBZ,    2,  4.0,   10,   15,   0.6 },
    { CLASS_BS,  FEATURE_SD_DBZ,    1,  2.0,    4,    7,   0.8 },
    { CLASS_DS,  FEATURE_SD_DBZ,    0,  0.5,    3,    6,   0.2 },
    { CLASS_WS,  FEATURE_SD_DBZ,    0,  0.5,    3,    6,   0.2 },
    { CLASS_CR,  FEATURE_SD_DBZ,    0,  0.5,    3,    6,   0.2 },
    { CLASS_GR,  FEATURE_SD_DBZ,    0,  0.5,    3,    6,   0.2 },
    { CLASS_BD,  FEATURE_SD_DBZ,    0,  0.5,    3,    6,   0.2 },
    { CLASS_RA,  FEATURE_SD_DBZ,    0,  0.5,    3,    6,   0.2 },
    { CLASS_HR,  FEATURE_SD_DBZ,    0,  0.5,    3,    6,   0.2 },
    { CLASS_RH,  FEATURE_SD_DBZ,    0,  0.5,    3,    6,   0.2 },

    { CLASS_GC,  FEATURE_SD_PHIDP, 30,   40,   50,   60,   0.8 },
    { CLASS_BS,  FEATURE_SD_PHIDP,  8,   10,   40,   60,   0.8 },
    { CLASS_DS,  FEATURE_SD_PHIDP,  0,    1,   15,   30,   0.2 },
    { CLASS_WS,  FEATURE_SD_PHIDP,  0,    1,   15,   30,   0.2 },
    { CLASS_CR,  FEATURE_SD_PHIDP,  0,    1,   15,   30,   0.2 },
    { CLASS_GR,  FEATURE_SD_PHIDP,  0,    1,   15,   30,   0.2 },
    { CLASS_BD,  FEATURE_SD_PHIDP,  0,    1,   15,   30,   0.2 },
    { CLASS_RA,  FEATURE_SD_PHIDP,  0,    1,   15,   30,   0.2 },
    { CLASS_HR,  FEATURE_SD_PHIDP,  0,    1,   15,   30,   0.2 },
    { CLASS_RH,  FEATURE_SD_PHIDP,  0,    1,   15,   30,   0.2 }

  };
  p_descr = "Interest maps to convert feature fields into interest";
  p_help = "There should be 1 entry for each id/feature pair - i.e. 60 entries.";
} hca_interest_maps[60];

paramdef int {
  p_default = 5;
  p_descr = "Length of kernel for computing DBZ fields - gates.";
  p_help = "We use this filter length to compute DBZ smoothed and texture fields.";
} HCA_DBZ_filter_len;

paramdef int {
  p_default = 5;
  p_descr = "Length of kernel for computing ZDR fields - gates.";
  p_help = "We use this filter length to compute ZDR smoothed and texture fields.";
} HCA_ZDR_filter_len;

paramdef int {
  p_default = 5;
  p_descr = "Length of kernel for computing RHOHV fields - gates.";
  p_help = "We use this filter length to compute RHOHV smoothed and texture fields.";
} HCA_RHOHV_filter_len;

paramdef int {
  p_default = 11;
  p_descr = "Length of kernel for computing heavily filtered PHIDP fields - gates.";
  p_help = "We use this filter length to compute the heavily filtered PHIDP fields.";
} HCA_PHIDP_filter_len;

paramdef int {
  p_default = 25;
  p_descr = "Length of kernel for computing PHIDP fields - gates.";
  p_help = "We use this filter length to compute the lightly filtered PHIDP fields.";
} HCA_PHIDP_heavy_filter_len;

commentdef {
  p_header = "INDIVIDUAL THRESHOLDS FOR CLASSES";
}

paramdef double {
  p_default = 1.0;
  p_descr = "Maximum radial velocity for GC (m/s).";
  p_help = "If abs(velocity) exceeds this, GC will be suppressed.";
} HCA_max_abs_vel_for_GC;

paramdef double {
  p_default = 0.97;
  p_descr = "Maximum rhohv for BS.";
  p_help = "If rhohv exceeds this, BS will be suppressed.";
} HCA_max_rhohv_for_BS;

paramdef double {
  p_default = 2.0;
  p_descr = "Maximum zdr for DS.";
  p_help = "If zdr exceeds this, DS will be suppressed.";
} HCA_max_zdr_for_DS;

paramdef double {
  p_default = -0.3;
  p_descr = "Minimum zdr for BD.";
  p_help = "If zdr exceeds (f2(Z) - this), BD will be suppressed.";
} HCA_min_zdr_for_BD;

paramdef double {
  p_default = 0.0;
  p_descr = "Minimum zdr for WS.";
  p_help = "If zdr is less than this, WS will be suppressed.";
} HCA_min_zdr_for_WS;

paramdef double {
  p_default = 20.0;
  p_descr = "Minimum dbz for WS.";
  p_help = "If dbz is less than this, WS will be suppressed.";
} HCA_min_dbz_for_WS;

paramdef double {
  p_default = 40.0;
  p_descr = "Maximum dbz for CR.";
  p_help = "If dbz exceeds this, CR will be suppressed.";
} HCA_max_dbz_for_CR;

paramdef double {
  p_default = 10.0;
  p_descr = "Minimum dbz for GR.";
  p_help = "If dbz is less than this, GR will be suppressed.";
} HCA_min_dbz_for_GR;

paramdef double {
  p_default = 60.0;
  p_descr = "Maximum dbz for GR.";
  p_help = "If dbz exceeds this, GR will be suppressed.";
} HCA_max_dbz_for_GR;

paramdef double {
  p_default = 50.0;
  p_descr = "Maximum dbz for RA.";
  p_help = "If dbz exceeds this, RA will be suppressed.";
} HCA_max_dbz_for_RA;

paramdef double {
  p_default = 30.0;
  p_descr = "Minimum dbz for HR.";
  p_help = "If dbz is less than this, HR will be suppressed.";
} HCA_min_dbz_for_HR;

paramdef double {
  p_default = 40.0;
  p_descr = "Minimum dbz for RH.";
  p_help = "If dbz is less than this, RH will be suppressed.";
} HCA_min_dbz_for_RH;

commentdef {
  p_header = "COMPUTING NCAR PID - HYDROMETEOR PARTICLE ID";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to compute PID classification.";
} compute_pid;

paramdef string {
  p_descr = "File path for fuzzy logic thresholds for PID.";
  p_help = "This file contains the thresholds and weights for computing particle ID.";
  p_default = "./s_band_pid_input_steraotables27.input";
} pid_thresholds_file_path;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to override temp profile in pid_thresholds file.";
  p_help = "If TRUE, the profile in the thresholds file will be overridden by the sounding from SPDB.";
} pid_override_temp_profile;

paramdef double {
  p_default = 3.0;
  p_descr = "Minimum SNR for valid PID.";
  p_help = "If the SNR at a gate is below this, the PID is censored.";
} PID_snr_threshold;

paramdef double {
  p_default = 9999.0;
  p_descr = "Maximum SNR for valid PID.";
  p_help = "If the SNR at a gate is above this value, the PID will be set to SATURATED_SNR = 18.";
} PID_snr_upper_threshold;

paramdef double {
  p_default = 0.5;
  p_descr = "Minimum valid interest value for identifying a particle.";
  p_help = "If the computed interest value is below this, the PID is set to missing.";
} PID_min_valid_interest;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter DBZ with median filter.";
  p_help = "The filter is computed in range.";
} PID_apply_median_filter_to_DBZ;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for DBZ - gates.";
  p_help = "See 'PID_apply_median_filter_to_DBZ'";
} PID_DBZ_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter ZDR with median filter.";
  p_help = "The filter is computed in range.";
} PID_apply_median_filter_to_ZDR;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for ZDR - gates.";
  p_help = "See 'PID_apply_median_filter_to_ZDR'";
} PID_ZDR_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter RHOHV with median filter.";
  p_help = "The filter is computed in range.";
} PID_apply_median_filter_to_RHOHV;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for RHOHV - gates.";
  p_help = "See 'PID_apply_median_filter_to_RHOHV'";
} PID_RHOHV_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter LDR with median filter.";
  p_help = "The filter is computed in range.";
} PID_apply_median_filter_to_LDR;

paramdef int {
  p_default = 5;
  p_descr = "Length of median filter for LDR - gates.";
  p_help = "See 'PID_apply_median_filter_to_LDR'";
} PID_LDR_median_filter_len;

paramdef boolean {
  p_default = TRUE;
  p_descr = "For PID, option to replace missing LDR values with a specified value.";
  p_help = "When the SNR gets low, LDR is unreliable since there is not sufficient dynamic range to provide an accurate cross-polar power measurement. In these cases, it makes sense to replace LDR with a neutral value, such as 0.0, so that we do not reject gates at which valuable data is available.";
} PID_replace_missing_LDR;

paramdef double {
  p_default = 0.0;
  p_descr = "Value to which LDR will be set if missing.";
} PID_LDR_replacement_value;

paramdef int {
  p_default = 9;
  p_descr = "Number of gates for computing standard deviations.";
  p_help = "This applies to computing the standard deviation of zdr and phidp.";
} PID_ngates_for_sdev;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to output the individual interest fields.";
  p_help = "If TRUE, the interest field for each particle type will be written to the output FMQ, in addition to the list in 'output_fields'.";
} PID_output_particle_interest_fields;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter PID with median filter.";
  p_help = "The filter is computed in range, and affects both rain rate and PID.";
} apply_median_filter_to_PID;

paramdef int {
  p_default = 7;
  p_descr = "Length of median filter for PID - gates.";
  p_help = "See 'appply_median_filter_to_PID'";
} PID_median_filter_len;

commentdef {
  p_header = "SOUNDING INPUT FOR temperature profile";
}

paramdef string {
  p_descr = "SPDB URL for sounding data.";
  p_default = "spdb/soundings";
} sounding_spdb_url;

paramdef int {
  p_default = 86400;
  p_descr = "Time margin for retrieving sounding, in secs.";
  p_help = "This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).";
} sounding_search_time_margin_secs;

paramdef string {
  p_default = "";
  p_descr = "Name of sounding location.";
  p_help = "If set, we request a profile just for that sounding. If empty, all soundings in the data base are considered valid.";
} sounding_location_name;

typedef struct {
  double min_val;
  double max_val;
} data_range_t;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that pressure covers the required range.";
  p_help = "If TRUE, we will check that pressure range in the sounding meets or exceeds the min and max specified."; 
} sounding_check_pressure_range;

paramdef struct data_range_t {
  p_default = { min_val = 300, max_val = 950 };
  p_descr = "Required pressure range for sounding to be valid (hPa)";
  p_help = "This is used to provide a quality check on the sounding. If the pressure data does not fully cover this range, the sounding is rejected and we look back for the next available one.";
} sounding_required_pressure_range_hpa;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that height covers the required range.";
  p_help = "If TRUE, we will check that height range in the sounding meets or exceeds the min and max specified."; 
} sounding_check_height_range;

paramdef struct data_range_t {
  p_default = { min_val = 500, max_val = 15000 };
  p_descr = "Required height range for sounding to be valid (m)";
  p_help = "This is used to provide a quality check on the sounding. If the height data does not fully cover this range, the sounding is rejected and we look back for the next available one.";
} sounding_required_height_range_m;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to check that pressure decreases monotonically.";
  p_help = "If TRUE, we will check that pressure decreases monotonically. If not, the sounding is rejected and we look back for the next available one."; 
} sounding_check_pressure_monotonically_decreasing;

paramdef double {
  p_default = 0.0;
  p_descr = "Correction to the heights read in with the sounding (km).";
  p_help = "This correction is ADDED to the heights read in. So if the freezing level seems low, the correction should be positive. If the freezing level appears high, it should be negative.";
} sounding_height_correction_km;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use wet bulb temperature profile.";
  p_help = "If TRUE, we use the wet bulb temperature profile from the sounding instead of the dry bulb. Applies to PID estimation. This is thought to more closely track the temperature of melting ice.";
} sounding_use_wet_bulb_temp;

paramdef double {
  p_default = 1.0;
  p_descr = "Temperature at the bottom of the melting layer (C).";
  p_help = "We use this temperature to locate the bottom edge of the melting layer in the temperature profile.";
} temp_at_bottom_of_melting_layer;

paramdef double {
  p_default = -1.0;
  p_descr = "Temperature at the top of the melting layer (C).";
  p_help = "We use this temperature to locate the top edge of the melting layer in the temperature profile.";
} temp_at_top_of_melting_layer;

commentdef {
  p_header = "RETRIEVING SITE TEMPERATURE FROM SPDB";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to read site temperature from SPDB.";
  p_help = "The temperature closest to the radar volume time will be read in.";
} read_site_temp_from_spdb;

paramdef string {
  p_default = "spdbp:://hail:0:pecan/spdb/spol/temp";
  p_descr = "URL for temperatures from SPDB.";
} site_temp_spdb_url;

paramdef string {
  p_default = "SPOL";
  p_descr = "Station name for site temperature.";
} site_temp_station_name;

paramdef int {
  p_default = 3600;
  p_descr = "Search margin when finding site temp data (secs).";
  p_help = "We search for the temperature closest in time to the radar volume. This is the search margin on either side of the volume time.";
} site_temp_search_margin_secs;

commentdef {
  p_header = "SPECIFYING FIELD NAMES AND OUTPUT ENCODING";
}

typedef enum {
  
  SNR,
  DBZ,
  VEL,
  WIDTH,
  NCP,
  ZDR,
  LDR,
  RHOHV,
  PHIDP,
  KDP,
  KDP_COND,
  PSOB,

  DBZ_ATTEN_CORRECTION,
  ZDR_ATTEN_CORRECTION,
  DBZ_ATTEN_CORRECTED,
  ZDR_ATTEN_CORRECTED,

  DBZ_FOR_KDP,
  ZDR_FOR_KDP,
  RHOHV_FOR_KDP,
  SNR_FOR_KDP,
  ZDR_SDEV_FOR_KDP,
  VALID_FLAG_FOR_KDP,

  PHIDP_FOR_KDP,
  PHIDP_MEAN_FOR_KDP,
  PHIDP_MEAN_UNFOLD_FOR_KDP,
  PHIDP_SDEV_FOR_KDP,
  PHIDP_JITTER_FOR_KDP,
  PHIDP_UNFOLD_FOR_KDP,
  PHIDP_FILT_FOR_KDP,
  PHIDP_COND_FOR_KDP,
  PHIDP_COND_FILT_FOR_KDP,

  RAY_HEIGHT,

  SNR_MEAN_SEACLUT,
  RHOHV_MEAN_SEACLUT,
  PHIDP_SDEV_SEACLUT,
  ZDR_SDEV_SEACLUT,
  DBZ_ELEV_GRADIENT_SEACLUT,
  RHOHV_MEAN_INTEREST_SEACLUT,
  PHIDP_SDEV_INTEREST_SEACLUT,
  ZDR_SDEV_INTEREST_SEACLUT,
  DBZ_ELEV_GRADIENT_INTEREST_SEACLUT,
  SEACLUT_FLAG,

  PARTICLE_ID,
  TEMP_FOR_PID,

  HCA_DBZ,
  HCA_ZDR,
  HCA_RHOHV,
  HCA_PHIDP,
  HCA_LOGKDP,

  HCA_TEMP_LOW,
  HCA_TEMP_MID,
  HCA_TEMP_HIGH,

  HCA_SMOOTH_DBZ,
  HCA_SMOOTH_ZDR,
  HCA_SMOOTH_RHOHV,
  HCA_SMOOTH_PHIDP,
  HCA_HVY_SMOOTH_PHIDP,

  HCA_TEXTURE_DBZ,
  HCA_TEXTURE_ZDR,
  HCA_TEXTURE_RHOHV,
  HCA_TEXTURE_PHIDP,
  HCA_SD_DBZ,
  HCA_SD_PHIDP,

  HCA_GC_INTEREST,
  HCA_BS_INTEREST,
  HCA_DS_INTEREST,
  HCA_WS_INTEREST,
  HCA_CR_INTEREST,
  HCA_GR_INTEREST,
  HCA_BD_INTEREST,
  HCA_RA_INTEREST,
  HCA_HR_INTEREST,
  HCA_RH_INTEREST,

  HCA_TEMP_CAT,
  HCA

} output_field_id_t;

typedef enum {
  OUTPUT_ENCODING_FL32,
  OUTPUT_ENCODING_INT32,
  OUTPUT_ENCODING_INT16,
  OUTPUT_ENCODING_INT08
} output_encoding_t;

typedef enum {
  OUTPUT_SCALING_DYNAMIC,
  OUTPUT_SCALING_SPECIFIED
} output_scaling_t;

typedef struct {
  output_field_id_t id;
  string name; 
  string long_name; 
  string standard_name; 
  string units;
  output_encoding_t encoding;
  output_scaling_t scaling;
  double scale;
  double offset;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    {
      id = SNR,
      name = "SNR",
      long_name = "signal_to_noise_ratio_db",
      standard_name = "signal_to_noise_ratio",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = DBZ,
      name = "DBZ",
      long_name = "radar_reflectivity",
      standard_name = "equivalent_reflectivity_factor",
      units = "dBZ",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = ZDR,
      name = "ZDR",
      long_name = "calibrated_log_differential_reflectivity",
      standard_name = "log_differential_reflectivity",
      units = "dB",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = RHOHV,
      name = "RHOHV",
      long_name = "cross_correlation_ratio",
      standard_name = "cross_correlation_ratio_hv",
      units = "",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
    ,
    {
      id = PHIDP,
      name = "PHIDP",
      long_name = "differential_phase",
      standard_name = "differential_phase_hv",
      units = "deg",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.01,
      offset = 0.0
    }
    ,
    {
      id = KDP,
      name = "KDP",
      long_name = "specific_differential_phase",
      standard_name = "specific_differential_phase_hv",
      units = "deg/km",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
    ,
    {
      id = PSOB,
      name = "PSOB",
      long_name = "phase_shift_on_backscatter",
      standard_name = "phase_shift_on_backscatter",
      units = "deg",
      encoding = OUTPUT_ENCODING_INT16,
      scaling = OUTPUT_SCALING_DYNAMIC,
      scale = 0.001,
      offset = 0.0
    }
  };
  p_descr = "Indicate which fields should be written to the output file.";
  p_help = "Choose the ID from the list. The name and units can be set however the user prefers. The output_encoding and output_scaling apply to CfRadial output only. If the output_scaling is DYNAMIC then the scale and offset are computed using the dynamic range of the data. If the output_scaling is SPECIFIED, then the specified scale and offset are used.";
} output_fields[];

commentdef {
  p_header = "OUTPUT FILE FORMAT";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_NEXRAD,
  OUTPUT_FORMAT_UF,
  OUTPUT_FORMAT_MDV_RADIAL
} output_format_t;

paramdef enum output_format_t {
  p_default = OUTPUT_FORMAT_CFRADIAL;
  p_descr = "Format for the output files.";
} output_format;

typedef enum {
  CLASSIC, NC64BIT, NETCDF4, NETCDF4_CLASSIC
} netcdf_style_t;

paramdef enum netcdf_style_t {
  p_default = NETCDF4;
  p_descr = "NetCDF style - if output_format is CFRADIAL";
  p_help = "netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls";
} netcdf_style;

commentdef {
  p_header = "OUTPUT BYTE-SWAPPING and COMPRESSION";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to leave data in native byte order.";
  p_help = "If false, data will be byte-swapped as appropriate on output.";
} output_native_byte_order;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress data fields on output.";
  p_help = "Applies to netCDF and Dorade. UF does not support compression.";
} output_compressed;

paramdef int {
  p_default = 4;
  p_descr = "Compression level for output, if compressed.";
  p_help = "Applies to netCDF only. Dorade compression is run-length encoding, and has not options..";
} compression_level;

commentdef {
  p_header = "VOLUME OUTPUT";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to write the results to a volume output file.";
  p_help = "Normally this will be set to true. However, when running analyses such as self-consistency or zdr bias, it may be preferable to suppress writing the output file, in which case this should be set to false.";
} write_output_volume;

paramdef string {
  p_default = "./output";
  p_descr = "Output directory path.";
  p_help = "Files will be written to this directory.";
} output_dir;

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY,
  SPECIFY_FILE_NAME
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.";
} output_filename_mode;

paramdef string {
  p_default = "cfradial.test.nc";
  p_descr = "Name of output file.";
  p_help = "Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.";
} output_filename;

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be output_dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be output_dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Option to write out individual sweeps if appropriate.";
  p_help = "If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.";
} write_individual_sweeps;

