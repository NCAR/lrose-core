/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program RadxHca
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("RadxHca reads moments from Radx-supported format files, runs the NEXRAD Hydrometeor Classification Algorithm (HCA) on the moments, and writes out the results to CfRadial files.");
    tt->comment_text = tdrpStrDup("References:\n\nPark HyangSuk, A. V. Ryzhhov, D. S. Zrnic, Kyung0Eak Kim. June 2009. The Hydrometeor Classification Algorithm for the Polarimetric WSR-88D: Description and Application to an MCS. AMS Weather and Forecasting, Vol 24, 730-748, June 2009.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Program instance for process registration.");
    tt->help = tdrpStrDup("This application registers with procmap. This is the instance used for registration.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register this process with the process mapper (procmap).");
    tt->help = tdrpStrDup("If TRUE, every minute this process will register a heartbeat with procmap. If the process hangs, it will be restared by the auto_restarter.");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'procmap_register_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("procmap_register_interval");
    tt->descr = tdrpStrDup("Interval for registering with procmap (secs).");
    tt->help = tdrpStrDup("The app will register with procmap at this interval, to update its status. If it does not register within twice this interval, the auto_restart script will restart the app.");
    tt->val_offset = (char *) &procmap_register_interval - &_start_;
    tt->single_val.i = 60;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("THREADING FOR SPEED.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_multiple_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_multiple_threads");
    tt->descr = tdrpStrDup("Option to use multiple compute threads to improve performance.");
    tt->help = tdrpStrDup("The read and write stages occur in the main thread, since netCDF is not thread safe. The compute stage can be multi-threaded to improve performance.");
    tt->val_offset = (char *) &use_multiple_threads - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'n_compute_threads'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_compute_threads");
    tt->descr = tdrpStrDup("The number of compute threads.");
    tt->help = tdrpStrDup("The moments computations are segmented in range, with each thread computing a fraction of the number of gates. For maximum performance, n_threads should be set to the number of processors multiplied by 4. For further tuning, use top to maximize CPU usage while varying the number of threads.");
    tt->val_offset = (char *) &n_compute_threads - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Input directory for searching for files.");
    tt->help = tdrpStrDup("Files will be searched for in this directory.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file.  In ARCHIVE mode, it moves through the data between the start and end times set on the command line. In FILELIST mode, it moves through the list of file names specified on the command line. Paths (in ARCHIVE mode, at least) MUST contain a day-directory above the data file -- ./data_file.ext will not work as a file path, but ./yyyymmdd/data_file.ext will.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("FILELIST");
      tt->enum_def.fields[2].val = FILELIST;
    tt->single_val.e = FILELIST;
    tt++;
    
    // Parameter 'max_realtime_data_age_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_data_age_secs");
    tt->descr = tdrpStrDup("Maximum age of realtime data (secs)");
    tt->help = tdrpStrDup("Only data less old than this will be used.");
    tt->val_offset = (char *) &max_realtime_data_age_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'input_file_search_ext'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_file_search_ext");
    tt->descr = tdrpStrDup("File name extension.");
    tt->help = tdrpStrDup("If set, only files with this extension will be processed.");
    tt->val_offset = (char *) &input_file_search_ext - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_file_search_substr'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_file_search_substr");
    tt->descr = tdrpStrDup("File name sub-string.");
    tt->help = tdrpStrDup("If set, only files with names containing this sub-string will be processed.");
    tt->val_offset = (char *) &input_file_search_substr - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("READ OPTIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'aggregate_sweep_files_on_read'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("aggregate_sweep_files_on_read");
    tt->descr = tdrpStrDup("Option to aggregate sweep files into a volume on read.");
    tt->help = tdrpStrDup("If true, and the input data is in sweeps rather than volumes (e.g. DORADE), the sweep files from a volume will be aggregated into a volume.");
    tt->val_offset = (char *) &aggregate_sweep_files_on_read - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'remove_rays_with_antenna_transitions'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("remove_rays_with_antenna_transitions");
    tt->descr = tdrpStrDup("Option to remove rays taken while the antenna was in transition.");
    tt->help = tdrpStrDup("If true, rays with the transition flag set will not be used. The transiton flag is set when the antenna is in transtion between one sweep and the next.");
    tt->val_offset = (char *) &remove_rays_with_antenna_transitions - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'transition_nrays_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("transition_nrays_margin");
    tt->descr = tdrpStrDup("Number of transition rays to include as a margin");
    tt->help = tdrpStrDup("Sometimes the transition flag is turned on too early in a transition, on not turned off quickly enough after a transition. If you set this to a number greater than 0, that number of rays will be included at each end of the transition, i.e. the transition will effectively be shorter at each end by this number of rays.");
    tt->val_offset = (char *) &transition_nrays_margin - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'trim_surveillance_sweeps_to_360deg'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("trim_surveillance_sweeps_to_360deg");
    tt->descr = tdrpStrDup("Option to trip surveillance sweeps so that they only cover 360 degrees.");
    tt->help = tdrpStrDup("Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.");
    tt->val_offset = (char *) &trim_surveillance_sweeps_to_360deg - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_max_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_max_range");
    tt->descr = tdrpStrDup("Option to set the max range for any ray.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_max_range - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_range_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_range_km");
    tt->descr = tdrpStrDup("Specified maximim range - km.");
    tt->help = tdrpStrDup("Gates beyond this range are removed.");
    tt->val_offset = (char *) &max_range_km - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'set_ngates_constant'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_ngates_constant");
    tt->descr = tdrpStrDup("Option to force the number of gates to be constant.");
    tt->help = tdrpStrDup("If TRUE, the number of gates on all rays will be set to the maximum, and gates added to shorter rays will be filled with missing values.");
    tt->val_offset = (char *) &set_ngates_constant - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'set_fixed_angle_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_fixed_angle_limits");
    tt->descr = tdrpStrDup("Option to set fixed angle limits");
    tt->help = tdrpStrDup("Only use sweeps within the specified fixed angle limits.");
    tt->val_offset = (char *) &set_fixed_angle_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lower_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("lower_fixed_angle_limit");
    tt->descr = tdrpStrDup("Lower fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lower_fixed_angle_limit - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'upper_fixed_angle_limit'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("upper_fixed_angle_limit");
    tt->descr = tdrpStrDup("Upper fixed angle limit - degrees.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &upper_fixed_angle_limit - &_start_;
    tt->single_val.d = 90;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("OPTION TO OVERRIDE RADAR LOCATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_radar_location'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_radar_location");
    tt->descr = tdrpStrDup("Option to override the radar location.");
    tt->help = tdrpStrDup("If true, the location in this file will be used. If not, the location in the time series data will be used.");
    tt->val_offset = (char *) &override_radar_location - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'radar_latitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_latitude_deg");
    tt->descr = tdrpStrDup("Radar latitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_latitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_longitude_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_longitude_deg");
    tt->descr = tdrpStrDup("Radar longitude (deg).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_longitude_deg - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'radar_altitude_meters'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("radar_altitude_meters");
    tt->descr = tdrpStrDup("Radar altitude (meters).");
    tt->help = tdrpStrDup("See override_radar_location.");
    tt->val_offset = (char *) &radar_altitude_meters - &_start_;
    tt->single_val.d = -999;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("INPUT FIELD INFORMATION");
    tt->comment_text = tdrpStrDup("Names of fields in the input file. The following fields are required: SNR, DBZ, ZDR, PHIDP and RHOHV. KDP is also required internally, but if KDP is not available it will be computed from PHIDP. LDR is optional, and is used for PID only.");
    tt++;
    
    // Parameter 'DBZ_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("DBZ_field_name");
    tt->descr = tdrpStrDup("Field name for DBZ.");
    tt->help = tdrpStrDup("Horizontally-polarized reflectivity factor.");
    tt->val_offset = (char *) &DBZ_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DBZ");
    tt++;
    
    // Parameter 'VEL_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("VEL_field_name");
    tt->descr = tdrpStrDup("Field name for radial velocity.");
    tt->help = tdrpStrDup("This is used in quality checks.");
    tt->val_offset = (char *) &VEL_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("VEL");
    tt++;
    
    // Parameter 'WIDTH_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("WIDTH_available");
    tt->descr = tdrpStrDup("Is WIDTH data available?");
    tt->help = tdrpStrDup("If NCP is not available, this field is used for locating RLAN interference.");
    tt->val_offset = (char *) &WIDTH_available - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'WIDTH_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("WIDTH_field_name");
    tt->descr = tdrpStrDup("Field name for WIDTH.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &WIDTH_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("WIDTH");
    tt++;
    
    // Parameter 'NCP_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("NCP_available");
    tt->descr = tdrpStrDup("Is NCP data available?");
    tt->help = tdrpStrDup("This field is used for locating RLAN interference. If it is not available, use spectrum width instead.");
    tt->val_offset = (char *) &NCP_available - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'NCP_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("NCP_field_name");
    tt->descr = tdrpStrDup("Field name for NCP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &NCP_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("NCP");
    tt++;
    
    // Parameter 'SNR_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("SNR_available");
    tt->descr = tdrpStrDup("Is SNR data available?");
    tt->help = tdrpStrDup("If not, SNR will be computed from the DBZ field. See 'noise_dbz_at_100km'.");
    tt->val_offset = (char *) &SNR_available - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'SNR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("SNR_field_name");
    tt->descr = tdrpStrDup("Field name for SNR.");
    tt->help = tdrpStrDup("Signal-to-noise ratio (dB).");
    tt->val_offset = (char *) &SNR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("SNR");
    tt++;
    
    // Parameter 'noise_dbz_at_100km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("noise_dbz_at_100km");
    tt->descr = tdrpStrDup("The noise value, represented as dBZ at a range of 100km.");
    tt->help = tdrpStrDup("Used to fill in missing reflectivity data for the vertical gradient of reflectivity in identifying sea clutter and AP. Also used if SNR_available is set to FALSE. It is used for computing the SNR from the DBZ field. The SNR will be computed by range-correcting this value and using it as the noise value.");
    tt->val_offset = (char *) &noise_dbz_at_100km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'ZDR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ZDR_field_name");
    tt->descr = tdrpStrDup("Field name for ZDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ZDR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("ZDR");
    tt++;
    
    // Parameter 'PHIDP_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("PHIDP_field_name");
    tt->descr = tdrpStrDup("Field name for PHIDP.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &PHIDP_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("PHIDP");
    tt++;
    
    // Parameter 'RHOHV_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("RHOHV_field_name");
    tt->descr = tdrpStrDup("Field name for RHOHV.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &RHOHV_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("RHOHV");
    tt++;
    
    // Parameter 'LDR_available'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("LDR_available");
    tt->descr = tdrpStrDup("Is LDR data available?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &LDR_available - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'LDR_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("LDR_field_name");
    tt->descr = tdrpStrDup("Field name for LDR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &LDR_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("LDR");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("COMPUTE KDP");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'KDP_fir_filter_len'
    // ctype is '_fir_filter_len_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("KDP_fir_filter_len");
    tt->descr = tdrpStrDup("Filter length for the FIR filter for PHIDP (gates)");
    tt->help = tdrpStrDup("When computing KDP, an FIR filter is first applied to PHIDP to smooth it. This is the length of that filter, in gates.");
    tt->val_offset = (char *) &KDP_fir_filter_len - &_start_;
    tt->enum_def.name = tdrpStrDup("fir_filter_len_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FIR_LEN_125");
      tt->enum_def.fields[0].val = FIR_LEN_125;
      tt->enum_def.fields[1].name = tdrpStrDup("FIR_LEN_60");
      tt->enum_def.fields[1].val = FIR_LEN_60;
      tt->enum_def.fields[2].name = tdrpStrDup("FIR_LEN_40");
      tt->enum_def.fields[2].val = FIR_LEN_40;
      tt->enum_def.fields[3].name = tdrpStrDup("FIR_LEN_30");
      tt->enum_def.fields[3].val = FIR_LEN_30;
      tt->enum_def.fields[4].name = tdrpStrDup("FIR_LEN_20");
      tt->enum_def.fields[4].val = FIR_LEN_20;
      tt->enum_def.fields[5].name = tdrpStrDup("FIR_LEN_10");
      tt->enum_def.fields[5].val = FIR_LEN_10;
    tt->single_val.e = FIR_LEN_10;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_unfolded'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_unfolded");
    tt->descr = tdrpStrDup("Sets the number of iterations for the initial FIR filter for unfolded PHIDP.");
    tt->help = tdrpStrDup("After unfolding PHIDP, the FIR filter is applied to the unfolded phidp, a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_unfolded - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'KDP_n_filt_iterations_conditioned'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_n_filt_iterations_conditioned");
    tt->descr = tdrpStrDup("Sets the number of iterations for the final FIR filter for conditioned PHIDP.");
    tt->help = tdrpStrDup("In order to identify phase shift on backscatter (PSOB), we condition the PHIDP to keep it generally increasing with range. The FIR filter is applied to the conditioned phidp a number of times, to smooth it. The effect of the filter is a combination of the filter length and the number of iterations.");
    tt->val_offset = (char *) &KDP_n_filt_iterations_conditioned - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'KDP_use_iterative_filtering'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_use_iterative_filtering");
    tt->descr = tdrpStrDup("Perform iterative filtering to locate backscatter phase shift.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_use_iterative_filtering - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_phidp_difference_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_difference_threshold");
    tt->descr = tdrpStrDup("Difference threshold for the iterative filtering method.");
    tt->help = tdrpStrDup("The FIR filter is applied successively, KDP_n_filt_iterations_conditioned times. After each iteration the result is checked against the original. If the difference is less than this parameter, the original value at that gate is retained. If the difference exceeds this parameter, the new filtered value is retained.");
    tt->val_offset = (char *) &KDP_phidp_difference_threshold - &_start_;
    tt->single_val.d = 4;
    tt++;
    
    // Parameter 'KDP_ngates_for_stats'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_ngates_for_stats");
    tt->descr = tdrpStrDup("Number of gates over which the phidp mean, sdev and jitter are computed.");
    tt->help = tdrpStrDup("The mean, sdev and jitter of phidp are computed over a consecutive number of gates in range, centered on the current gate of interest. This parameter is the number of gates over which these statistics are computed.");
    tt->val_offset = (char *) &KDP_ngates_for_stats - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'KDP_phidp_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of phidp in range.");
    tt->help = tdrpStrDup("The sdev of phidp is a good test for valid phidp. The sdev is computed in the circle, so that it takes account of folding if present. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_sdev_max - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'KDP_phidp_jitter_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_phidp_jitter_max");
    tt->descr = tdrpStrDup("Sets the threshold for the jitter of phidp in range.");
    tt->help = tdrpStrDup("The jitter of phidp is defined as the mean absolute change in angle between successive phidp measurements in range. It is computed on the circle to take account of folding. If the jitter is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_phidp_jitter_max - &_start_;
    tt->single_val.d = 25;
    tt++;
    
    // Parameter 'KDP_min_valid_abs_kdp'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_min_valid_abs_kdp");
    tt->descr = tdrpStrDup("Sets the min valid KDP value.");
    tt->help = tdrpStrDup("Values less than this are set to 0.");
    tt->val_offset = (char *) &KDP_min_valid_abs_kdp - &_start_;
    tt->single_val.d = 0.01;
    tt++;
    
    // Parameter 'KDP_check_snr'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_snr");
    tt->descr = tdrpStrDup("Check the SNR.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_snr - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_snr_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking SNR (dB).");
    tt->help = tdrpStrDup("If the SNR drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_snr_threshold - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'KDP_check_rhohv'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_rhohv");
    tt->descr = tdrpStrDup("Check the RHOHV.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_rhohv - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_rhohv_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_rhohv_threshold");
    tt->descr = tdrpStrDup("Sets the threshold for checking RHOHV.");
    tt->help = tdrpStrDup("If the RHOHV drops below this value, KDP will not be computed at this gate.");
    tt->val_offset = (char *) &KDP_rhohv_threshold - &_start_;
    tt->single_val.d = 0.85;
    tt++;
    
    // Parameter 'KDP_check_zdr_sdev'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_check_zdr_sdev");
    tt->descr = tdrpStrDup("Check the standard deviation of ZDR in range?");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_check_zdr_sdev - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'KDP_zdr_sdev_max'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_zdr_sdev_max");
    tt->descr = tdrpStrDup("Sets the threshold for the standard deviation of zdr in range.");
    tt->help = tdrpStrDup("The sdev of zdr is a good test for clutter. If the sdev is less than this value, it is assumed we are in weather. Applies to computation of KDP only.");
    tt->val_offset = (char *) &KDP_zdr_sdev_max - &_start_;
    tt->single_val.d = 2.5;
    tt++;
    
    // Parameter 'KDP_minimum_for_self_consistency'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("KDP_minimum_for_self_consistency");
    tt->descr = tdrpStrDup("Sets the lower limit of KDP for computing KDP conditioned by self-consistency.");
    tt->help = tdrpStrDup("To compute KDP_SC, we first find the gates over which regular KDP exceeds a minimum threshold (i.e. this parameter). Over this run of gates we compute the PHIDP change from the regular KDP and from KDP_ZZDR. By taking the ratio of sum(KDP) / sum(KDP_ZZDR), and applying that ratio to KDP_ZZDR over these gates, we can compute KDP_SC such that the PHIDP change over these gates is the same for both KDP and KDP_SC.");
    tt->val_offset = (char *) &KDP_minimum_for_self_consistency - &_start_;
    tt->single_val.d = 0.25;
    tt++;
    
    // Parameter 'KDP_median_filter_len_for_ZZDR'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("KDP_median_filter_len_for_ZZDR");
    tt->descr = tdrpStrDup("Sets the length of the median filter when computing KDP_ZZDR.");
    tt->help = tdrpStrDup("The Z and ZDR fields are smoothed with a median filter of this length prior to estimating KDP_ZZDR.");
    tt->val_offset = (char *) &KDP_median_filter_len_for_ZZDR - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'KDP_debug'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_debug");
    tt->descr = tdrpStrDup("Option to print debug messages in KDP computation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_debug - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_write_ray_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("KDP_write_ray_files");
    tt->descr = tdrpStrDup("Option to write ray files to debug KDP computation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_write_ray_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'KDP_ray_files_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("KDP_ray_files_dir");
    tt->descr = tdrpStrDup("Directory for KDP ray files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &KDP_ray_files_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/kdp_ray_files");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("PRECIP-INDUCED ATTENUATION CORRECTION FOR DBZ AND ZDR");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_precip_attenuation_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_precip_attenuation_correction");
    tt->descr = tdrpStrDup("Option to apply precip attenuation correction for DBZ and ZDR.");
    tt->help = tdrpStrDup("The following extra fields will be computed:\n\tDBZ_ATTEN_CORRECTION - correction in dB\n\tZDR_ATTEN_CORRECTION - correction in dB\n\tDBZ_ATTEN_CORRECTED - DBZHC corrected\n\tZDR_ATTEN_CORRECTED - ZDR corrected\n");
    tt->val_offset = (char *) &apply_precip_attenuation_correction - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'specify_coefficients_for_attenuation_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_coefficients_for_attenuation_correction");
    tt->descr = tdrpStrDup("Option to specify the coefficients and exponents - see below.");
    tt->help = tdrpStrDup("If false, the default coefficients will be determined for the radar wavelength.");
    tt->val_offset = (char *) &specify_coefficients_for_attenuation_correction - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'dbz_attenuation_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_attenuation_coefficient");
    tt->descr = tdrpStrDup("Coefficient for computing DBZ attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &dbz_attenuation_coefficient - &_start_;
    tt->single_val.d = 0.017;
    tt++;
    
    // Parameter 'dbz_attenuation_exponent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_attenuation_exponent");
    tt->descr = tdrpStrDup("Exponent for computing DBZ attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &dbz_attenuation_exponent - &_start_;
    tt->single_val.d = 0.84;
    tt++;
    
    // Parameter 'zdr_attenuation_coefficient'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_attenuation_coefficient");
    tt->descr = tdrpStrDup("Coefficient for computing ZDR attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &zdr_attenuation_coefficient - &_start_;
    tt->single_val.d = 0.003;
    tt++;
    
    // Parameter 'zdr_attenuation_exponent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_attenuation_exponent");
    tt->descr = tdrpStrDup("Exponent for computing ZDR attenuation correction.");
    tt->help = tdrpStrDup("See Bringi and Chandrasekar, Table 7.1, page 494.");
    tt->val_offset = (char *) &zdr_attenuation_exponent - &_start_;
    tt->single_val.d = 1.05;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("COMPUTING BEAM HEIGHT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_standard_pseudo_earth_radius'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_standard_pseudo_earth_radius");
    tt->descr = tdrpStrDup("Option to override the standard 4/3 earth radius model for refraction.");
    tt->help = tdrpStrDup("If true, the standard 4/3 earth radius will be overridden. The US NWS NEXRAD system uses 1.21 instead of 1.333.");
    tt->val_offset = (char *) &override_standard_pseudo_earth_radius - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'pseudo_earth_radius_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("pseudo_earth_radius_ratio");
    tt->descr = tdrpStrDup("Ratio for computing the pseudo earth radius for beam height computations.");
    tt->help = tdrpStrDup("For standard refraction this is 4/3. For super refraction it will be less than 4.3, and for sub-refraction it will be greater. NEXRAD uses 1.21.");
    tt->val_offset = (char *) &pseudo_earth_radius_ratio - &_start_;
    tt->single_val.d = 1.33333;
    tt++;
    
    // Parameter 'override_vertical_beamwidth'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_vertical_beamwidth");
    tt->descr = tdrpStrDup("Option to override the beamwidth in the input file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &override_vertical_beamwidth - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'vertical_beamwidth_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("vertical_beamwidth_deg");
    tt->descr = tdrpStrDup("Specified radar antenna vertical beamwidth (deg).");
    tt->help = tdrpStrDup("See 'override_vertical_beamwidth'.");
    tt->val_offset = (char *) &vertical_beamwidth_deg - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("LOCATING SEA CLUTTER");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'locate_sea_clutter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("locate_sea_clutter");
    tt->descr = tdrpStrDup("Option to locate gates with sea clutter.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &locate_sea_clutter - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("INTEREST MAPS and WEIGHTS for SEA CLUTTER DETECTION");
    tt->comment_text = tdrpStrDup("Each map should hold at least 2 points. The points should be increasing in value, i.e. the value should increase for each subsequent point. The various interest values are combined using the specified weights in a weighted mean to produce the final interest value.");
    tt++;
    
    // Parameter 'seaclut_min_snr_db'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("seaclut_min_snr_db");
    tt->descr = tdrpStrDup("Min SNR for sea clutter (dB).");
    tt->help = tdrpStrDup("Only locate sea clutter if SNR exceeds this value.");
    tt->val_offset = (char *) &seaclut_min_snr_db - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'seaclut_rhohv_mean_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("seaclut_rhohv_mean_interest_map");
    tt->descr = tdrpStrDup("SEA CLUTTER interest mapping for rhohv mean.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_seaclut_rhohv_mean_interest_map - &_start_;
    tt->array_n_offset = (char *) &seaclut_rhohv_mean_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_seaclut_rhohv_mean_interest_map->value - (char *) _seaclut_rhohv_mean_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_seaclut_rhohv_mean_interest_map->interest - (char *) _seaclut_rhohv_mean_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.35;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.4;
      tt->struct_vals[3].d = 0.0001;
    tt++;
    
    // Parameter 'seaclut_rhohv_mean_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("seaclut_rhohv_mean_weight");
    tt->descr = tdrpStrDup("SEA CLUTTER weight for interest for rhohv mean.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &seaclut_rhohv_mean_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'seaclut_phidp_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("seaclut_phidp_sdev_interest_map");
    tt->descr = tdrpStrDup("SEA CLUTTER interest mapping for sdev of phidp.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_seaclut_phidp_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &seaclut_phidp_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_seaclut_phidp_sdev_interest_map->value - (char *) _seaclut_phidp_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_seaclut_phidp_sdev_interest_map->interest - (char *) _seaclut_phidp_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 40;
      tt->struct_vals[1].d = 0.0001;
      tt->struct_vals[2].d = 45;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'seaclut_phidp_sdev_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("seaclut_phidp_sdev_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of phidp.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &seaclut_phidp_sdev_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'seaclut_zdr_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("seaclut_zdr_sdev_interest_map");
    tt->descr = tdrpStrDup("SEA CLUTTER interest mapping for sdev of zdr.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_seaclut_zdr_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &seaclut_zdr_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_seaclut_zdr_sdev_interest_map->value - (char *) _seaclut_zdr_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_seaclut_zdr_sdev_interest_map->interest - (char *) _seaclut_zdr_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 1.5;
      tt->struct_vals[1].d = 0.0001;
      tt->struct_vals[2].d = 2.5;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'seaclut_zdr_sdev_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("seaclut_zdr_sdev_weight");
    tt->descr = tdrpStrDup("Weight for interest for sdev of zdr.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &seaclut_zdr_sdev_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'seaclut_dbz_elev_gradient_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("seaclut_dbz_elev_gradient_interest_map");
    tt->descr = tdrpStrDup("SEA CLUTTER interest mapping for gradient of dbz in polar elevation space.");
    tt->help = tdrpStrDup("The reflectivity gradient is computed with respect to elevation, i.e. the change in reflectivity with change in elevation angle. The units are db/deg.");
    tt->array_offset = (char *) &_seaclut_dbz_elev_gradient_interest_map - &_start_;
    tt->array_n_offset = (char *) &seaclut_dbz_elev_gradient_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_seaclut_dbz_elev_gradient_interest_map->value - (char *) _seaclut_dbz_elev_gradient_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_seaclut_dbz_elev_gradient_interest_map->interest - (char *) _seaclut_dbz_elev_gradient_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -15;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = -5;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'seaclut_dbz_elev_gradient_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("seaclut_dbz_elev_gradient_weight");
    tt->descr = tdrpStrDup("Weight for interest for elevation gradient of dbz.");
    tt->help = tdrpStrDup("The relative weighting applied when computing the fuzzy sum.");
    tt->val_offset = (char *) &seaclut_dbz_elev_gradient_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'seaclut_interest_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("seaclut_interest_threshold");
    tt->descr = tdrpStrDup("Threshold interest value for identifying sea clutter.");
    tt->help = tdrpStrDup("If the fuzzy interest value exceeds this threshold, sea clutter is assumed to exist at that gate.");
    tt->val_offset = (char *) &seaclut_interest_threshold - &_start_;
    tt->single_val.d = 0.51;
    tt++;
    
    // Parameter 'dbz_elevation_gradient_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("dbz_elevation_gradient_field_name");
    tt->descr = tdrpStrDup("Field name for computed vertical dbz gradient in polar elevation space (dB/deg).");
    tt->help = tdrpStrDup("For sea clutter identification, we need to compute the vertical gradient of reflectivity. This is the name of that gradient field, in dB/deg.");
    tt->val_offset = (char *) &dbz_elevation_gradient_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("DbzElevGradient");
    tt++;
    
    // Parameter 'ray_height_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ray_height_field_name");
    tt->descr = tdrpStrDup("Field name for computed ray height (km).");
    tt->help = tdrpStrDup("In order to compute the vertical gradient of reflectivity for sea clutter, we need to compute the beam height at each gate. This is the name of the ray height field, in km MSL.");
    tt->val_offset = (char *) &ray_height_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("RayHtMsl");
    tt++;
    
    // Parameter 'seaclut_max_elev_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("seaclut_max_elev_deg");
    tt->descr = tdrpStrDup("Max elevation angle for sea clutter (deg).");
    tt->help = tdrpStrDup("Above this angle the clutter flag will not be set.");
    tt->val_offset = (char *) &seaclut_max_elev_deg - &_start_;
    tt->single_val.d = 2.5;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("COMPUTING WSR88D HCA - HYDROMETEOR PARTICLE ID");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'compute_hca'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_hca");
    tt->descr = tdrpStrDup("Option to compute HCA classification.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &compute_hca - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'HCA_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_snr_threshold");
    tt->descr = tdrpStrDup("Minimum SNR for valid HCA classification.");
    tt->help = tdrpStrDup("If the SNR at a gate is below this, the HCA is censored.");
    tt->val_offset = (char *) &HCA_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("Classification types");
    tt->comment_text = tdrpStrDup("There are 10 classification types:\n\tGC: ground clutter or AP\n\tBS: biological scatterers\n\tDS: dry aggregated snow\n\tWS: wet snow\n\tCR: crystals of various orientations\n\tGR: graupel\n\tBD: big drops\n\tRA: light to moderate rain\n\tHR: heavy rain\n\tRH: mixture of rain and hail.");
    tt++;
    
    // Parameter 'hca_interest_maps'
    // ctype is '_hca_interest_map_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("hca_interest_maps");
    tt->descr = tdrpStrDup("Interest maps to convert feature fields into interest");
    tt->help = tdrpStrDup("There should be 1 entry for each id/feature pair - i.e. 60 entries.");
    tt->array_offset = (char *) &_hca_interest_maps - &_start_;
    tt->array_n_offset = (char *) &hca_interest_maps_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(hca_interest_map_t);
    tt->array_n = 60;
    tt->struct_def.name = tdrpStrDup("hca_interest_map_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("hca_class_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("hca_class");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_hca_interest_maps->hca_class - (char *) _hca_interest_maps;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("hca_class_t");
        tt->struct_def.fields[0].enum_def.nfields = 10;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("CLASS_GC");
        tt->struct_def.fields[0].enum_def.fields[0].val = CLASS_GC;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("CLASS_BS");
        tt->struct_def.fields[0].enum_def.fields[1].val = CLASS_BS;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("CLASS_DS");
        tt->struct_def.fields[0].enum_def.fields[2].val = CLASS_DS;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("CLASS_WS");
        tt->struct_def.fields[0].enum_def.fields[3].val = CLASS_WS;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("CLASS_CR");
        tt->struct_def.fields[0].enum_def.fields[4].val = CLASS_CR;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("CLASS_GR");
        tt->struct_def.fields[0].enum_def.fields[5].val = CLASS_GR;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("CLASS_BD");
        tt->struct_def.fields[0].enum_def.fields[6].val = CLASS_BD;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("CLASS_RA");
        tt->struct_def.fields[0].enum_def.fields[7].val = CLASS_RA;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("CLASS_HR");
        tt->struct_def.fields[0].enum_def.fields[8].val = CLASS_HR;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("CLASS_RH");
        tt->struct_def.fields[0].enum_def.fields[9].val = CLASS_RH;
      tt->struct_def.fields[1].ftype = tdrpStrDup("feature_field_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("feature");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_hca_interest_maps->feature - (char *) _hca_interest_maps;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("feature_field_t");
        tt->struct_def.fields[1].enum_def.nfields = 6;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("FEATURE_DBZ");
        tt->struct_def.fields[1].enum_def.fields[0].val = FEATURE_DBZ;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("FEATURE_ZDR");
        tt->struct_def.fields[1].enum_def.fields[1].val = FEATURE_ZDR;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("FEATURE_RHOHV");
        tt->struct_def.fields[1].enum_def.fields[2].val = FEATURE_RHOHV;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("FEATURE_LOG_KDP");
        tt->struct_def.fields[1].enum_def.fields[3].val = FEATURE_LOG_KDP;
        tt->struct_def.fields[1].enum_def.fields[4].name = tdrpStrDup("FEATURE_SD_DBZ");
        tt->struct_def.fields[1].enum_def.fields[4].val = FEATURE_SD_DBZ;
        tt->struct_def.fields[1].enum_def.fields[5].name = tdrpStrDup("FEATURE_SD_PHIDP");
        tt->struct_def.fields[1].enum_def.fields[5].val = FEATURE_SD_PHIDP;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("x1");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_hca_interest_maps->x1 - (char *) _hca_interest_maps;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("x2");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_hca_interest_maps->x2 - (char *) _hca_interest_maps;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("x3");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_hca_interest_maps->x3 - (char *) _hca_interest_maps;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("x4");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_hca_interest_maps->x4 - (char *) _hca_interest_maps;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("weight");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_hca_interest_maps->weight - (char *) _hca_interest_maps;
    tt->n_struct_vals = 420;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = CLASS_GC;
      tt->struct_vals[1].e = FEATURE_DBZ;
      tt->struct_vals[2].d = 15;
      tt->struct_vals[3].d = 20;
      tt->struct_vals[4].d = 70;
      tt->struct_vals[5].d = 80;
      tt->struct_vals[6].d = 0.2;
      tt->struct_vals[7].e = CLASS_BS;
      tt->struct_vals[8].e = FEATURE_DBZ;
      tt->struct_vals[9].d = 5;
      tt->struct_vals[10].d = 10;
      tt->struct_vals[11].d = 20;
      tt->struct_vals[12].d = 30;
      tt->struct_vals[13].d = 0.4;
      tt->struct_vals[14].e = CLASS_DS;
      tt->struct_vals[15].e = FEATURE_DBZ;
      tt->struct_vals[16].d = 5;
      tt->struct_vals[17].d = 10;
      tt->struct_vals[18].d = 35;
      tt->struct_vals[19].d = 40;
      tt->struct_vals[20].d = 1;
      tt->struct_vals[21].e = CLASS_WS;
      tt->struct_vals[22].e = FEATURE_DBZ;
      tt->struct_vals[23].d = 25;
      tt->struct_vals[24].d = 30;
      tt->struct_vals[25].d = 40;
      tt->struct_vals[26].d = 50;
      tt->struct_vals[27].d = 0.6;
      tt->struct_vals[28].e = CLASS_CR;
      tt->struct_vals[29].e = FEATURE_DBZ;
      tt->struct_vals[30].d = 0;
      tt->struct_vals[31].d = 5;
      tt->struct_vals[32].d = 20;
      tt->struct_vals[33].d = 25;
      tt->struct_vals[34].d = 1;
      tt->struct_vals[35].e = CLASS_GR;
      tt->struct_vals[36].e = FEATURE_DBZ;
      tt->struct_vals[37].d = 25;
      tt->struct_vals[38].d = 35;
      tt->struct_vals[39].d = 50;
      tt->struct_vals[40].d = 55;
      tt->struct_vals[41].d = 0.8;
      tt->struct_vals[42].e = CLASS_BD;
      tt->struct_vals[43].e = FEATURE_DBZ;
      tt->struct_vals[44].d = 20;
      tt->struct_vals[45].d = 25;
      tt->struct_vals[46].d = 45;
      tt->struct_vals[47].d = 50;
      tt->struct_vals[48].d = 0.8;
      tt->struct_vals[49].e = CLASS_RA;
      tt->struct_vals[50].e = FEATURE_DBZ;
      tt->struct_vals[51].d = 5;
      tt->struct_vals[52].d = 10;
      tt->struct_vals[53].d = 45;
      tt->struct_vals[54].d = 50;
      tt->struct_vals[55].d = 1;
      tt->struct_vals[56].e = CLASS_HR;
      tt->struct_vals[57].e = FEATURE_DBZ;
      tt->struct_vals[58].d = 40;
      tt->struct_vals[59].d = 45;
      tt->struct_vals[60].d = 55;
      tt->struct_vals[61].d = 60;
      tt->struct_vals[62].d = 1;
      tt->struct_vals[63].e = CLASS_RH;
      tt->struct_vals[64].e = FEATURE_DBZ;
      tt->struct_vals[65].d = 45;
      tt->struct_vals[66].d = 50;
      tt->struct_vals[67].d = 75;
      tt->struct_vals[68].d = 80;
      tt->struct_vals[69].d = 1;
      tt->struct_vals[70].e = CLASS_GC;
      tt->struct_vals[71].e = FEATURE_ZDR;
      tt->struct_vals[72].d = -4;
      tt->struct_vals[73].d = -2;
      tt->struct_vals[74].d = 1;
      tt->struct_vals[75].d = 2;
      tt->struct_vals[76].d = 0.4;
      tt->struct_vals[77].e = CLASS_BS;
      tt->struct_vals[78].e = FEATURE_ZDR;
      tt->struct_vals[79].d = 0;
      tt->struct_vals[80].d = 2;
      tt->struct_vals[81].d = 10;
      tt->struct_vals[82].d = 12;
      tt->struct_vals[83].d = 0.8;
      tt->struct_vals[84].e = CLASS_DS;
      tt->struct_vals[85].e = FEATURE_ZDR;
      tt->struct_vals[86].d = -0.3;
      tt->struct_vals[87].d = 0;
      tt->struct_vals[88].d = 0.3;
      tt->struct_vals[89].d = 0.6;
      tt->struct_vals[90].d = 0.8;
      tt->struct_vals[91].e = CLASS_WS;
      tt->struct_vals[92].e = FEATURE_ZDR;
      tt->struct_vals[93].d = 0.5;
      tt->struct_vals[94].d = 1;
      tt->struct_vals[95].d = 2;
      tt->struct_vals[96].d = 3;
      tt->struct_vals[97].d = 0.8;
      tt->struct_vals[98].e = CLASS_CR;
      tt->struct_vals[99].e = FEATURE_ZDR;
      tt->struct_vals[100].d = 0.1;
      tt->struct_vals[101].d = 0.4;
      tt->struct_vals[102].d = 3;
      tt->struct_vals[103].d = 3.3;
      tt->struct_vals[104].d = 0.6;
      tt->struct_vals[105].e = CLASS_GR;
      tt->struct_vals[106].e = FEATURE_ZDR;
      tt->struct_vals[107].d = -0.3;
      tt->struct_vals[108].d = 0;
      tt->struct_vals[109].d = 0;
      tt->struct_vals[110].d = 0.3;
      tt->struct_vals[111].d = 1;
      tt->struct_vals[112].e = CLASS_BD;
      tt->struct_vals[113].e = FEATURE_ZDR;
      tt->struct_vals[114].d = -0.3;
      tt->struct_vals[115].d = 0;
      tt->struct_vals[116].d = 0;
      tt->struct_vals[117].d = 1;
      tt->struct_vals[118].d = 0.8;
      tt->struct_vals[119].e = CLASS_RA;
      tt->struct_vals[120].e = FEATURE_ZDR;
      tt->struct_vals[121].d = -0.3;
      tt->struct_vals[122].d = 0;
      tt->struct_vals[123].d = 0;
      tt->struct_vals[124].d = 0.5;
      tt->struct_vals[125].d = 1;
      tt->struct_vals[126].e = CLASS_HR;
      tt->struct_vals[127].e = FEATURE_ZDR;
      tt->struct_vals[128].d = -0.3;
      tt->struct_vals[129].d = 0;
      tt->struct_vals[130].d = 0;
      tt->struct_vals[131].d = 0.5;
      tt->struct_vals[132].d = 1;
      tt->struct_vals[133].e = CLASS_RH;
      tt->struct_vals[134].e = FEATURE_ZDR;
      tt->struct_vals[135].d = -0.3;
      tt->struct_vals[136].d = 0;
      tt->struct_vals[137].d = 0;
      tt->struct_vals[138].d = 0.5;
      tt->struct_vals[139].d = 1;
      tt->struct_vals[140].e = CLASS_GC;
      tt->struct_vals[141].e = FEATURE_RHOHV;
      tt->struct_vals[142].d = 0.5;
      tt->struct_vals[143].d = 0.6;
      tt->struct_vals[144].d = 0.9;
      tt->struct_vals[145].d = 0.95;
      tt->struct_vals[146].d = 1;
      tt->struct_vals[147].e = CLASS_BS;
      tt->struct_vals[148].e = FEATURE_RHOHV;
      tt->struct_vals[149].d = 0.3;
      tt->struct_vals[150].d = 0.5;
      tt->struct_vals[151].d = 0.8;
      tt->struct_vals[152].d = 0.83;
      tt->struct_vals[153].d = 1;
      tt->struct_vals[154].e = CLASS_DS;
      tt->struct_vals[155].e = FEATURE_RHOHV;
      tt->struct_vals[156].d = 0.95;
      tt->struct_vals[157].d = 0.98;
      tt->struct_vals[158].d = 1;
      tt->struct_vals[159].d = 1.01;
      tt->struct_vals[160].d = 0.6;
      tt->struct_vals[161].e = CLASS_WS;
      tt->struct_vals[162].e = FEATURE_RHOHV;
      tt->struct_vals[163].d = 0.88;
      tt->struct_vals[164].d = 0.92;
      tt->struct_vals[165].d = 0.95;
      tt->struct_vals[166].d = 0.985;
      tt->struct_vals[167].d = 1;
      tt->struct_vals[168].e = CLASS_CR;
      tt->struct_vals[169].e = FEATURE_RHOHV;
      tt->struct_vals[170].d = 0.95;
      tt->struct_vals[171].d = 0.98;
      tt->struct_vals[172].d = 1;
      tt->struct_vals[173].d = 1.01;
      tt->struct_vals[174].d = 0.4;
      tt->struct_vals[175].e = CLASS_GR;
      tt->struct_vals[176].e = FEATURE_RHOHV;
      tt->struct_vals[177].d = 0.9;
      tt->struct_vals[178].d = 0.97;
      tt->struct_vals[179].d = 1;
      tt->struct_vals[180].d = 1.01;
      tt->struct_vals[181].d = 0.4;
      tt->struct_vals[182].e = CLASS_BD;
      tt->struct_vals[183].e = FEATURE_RHOHV;
      tt->struct_vals[184].d = 0.92;
      tt->struct_vals[185].d = 0.95;
      tt->struct_vals[186].d = 1;
      tt->struct_vals[187].d = 1.01;
      tt->struct_vals[188].d = 0.6;
      tt->struct_vals[189].e = CLASS_RA;
      tt->struct_vals[190].e = FEATURE_RHOHV;
      tt->struct_vals[191].d = 0.95;
      tt->struct_vals[192].d = 0.97;
      tt->struct_vals[193].d = 1;
      tt->struct_vals[194].d = 1.01;
      tt->struct_vals[195].d = 0.6;
      tt->struct_vals[196].e = CLASS_HR;
      tt->struct_vals[197].e = FEATURE_RHOHV;
      tt->struct_vals[198].d = 0.92;
      tt->struct_vals[199].d = 0.95;
      tt->struct_vals[200].d = 1;
      tt->struct_vals[201].d = 1.01;
      tt->struct_vals[202].d = 0.6;
      tt->struct_vals[203].e = CLASS_RH;
      tt->struct_vals[204].e = FEATURE_RHOHV;
      tt->struct_vals[205].d = 0.85;
      tt->struct_vals[206].d = 0.9;
      tt->struct_vals[207].d = 1;
      tt->struct_vals[208].d = 1.01;
      tt->struct_vals[209].d = 0.6;
      tt->struct_vals[210].e = CLASS_GC;
      tt->struct_vals[211].e = FEATURE_LOG_KDP;
      tt->struct_vals[212].d = -30;
      tt->struct_vals[213].d = -25;
      tt->struct_vals[214].d = 10;
      tt->struct_vals[215].d = 20;
      tt->struct_vals[216].d = 0;
      tt->struct_vals[217].e = CLASS_BS;
      tt->struct_vals[218].e = FEATURE_LOG_KDP;
      tt->struct_vals[219].d = -30;
      tt->struct_vals[220].d = -25;
      tt->struct_vals[221].d = 10;
      tt->struct_vals[222].d = 20;
      tt->struct_vals[223].d = 0;
      tt->struct_vals[224].e = CLASS_DS;
      tt->struct_vals[225].e = FEATURE_LOG_KDP;
      tt->struct_vals[226].d = -30;
      tt->struct_vals[227].d = -25;
      tt->struct_vals[228].d = 10;
      tt->struct_vals[229].d = 20;
      tt->struct_vals[230].d = 0;
      tt->struct_vals[231].e = CLASS_WS;
      tt->struct_vals[232].e = FEATURE_LOG_KDP;
      tt->struct_vals[233].d = -30;
      tt->struct_vals[234].d = -25;
      tt->struct_vals[235].d = 10;
      tt->struct_vals[236].d = 20;
      tt->struct_vals[237].d = 0;
      tt->struct_vals[238].e = CLASS_CR;
      tt->struct_vals[239].e = FEATURE_LOG_KDP;
      tt->struct_vals[240].d = -5;
      tt->struct_vals[241].d = 0;
      tt->struct_vals[242].d = 10;
      tt->struct_vals[243].d = 15;
      tt->struct_vals[244].d = 0.5;
      tt->struct_vals[245].e = CLASS_GR;
      tt->struct_vals[246].e = FEATURE_LOG_KDP;
      tt->struct_vals[247].d = -30;
      tt->struct_vals[248].d = -25;
      tt->struct_vals[249].d = 10;
      tt->struct_vals[250].d = 20;
      tt->struct_vals[251].d = 0;
      tt->struct_vals[252].e = CLASS_BD;
      tt->struct_vals[253].e = FEATURE_LOG_KDP;
      tt->struct_vals[254].d = -1;
      tt->struct_vals[255].d = 0;
      tt->struct_vals[256].d = 0;
      tt->struct_vals[257].d = 1;
      tt->struct_vals[258].d = 0;
      tt->struct_vals[259].e = CLASS_RA;
      tt->struct_vals[260].e = FEATURE_LOG_KDP;
      tt->struct_vals[261].d = -1;
      tt->struct_vals[262].d = 0;
      tt->struct_vals[263].d = 0;
      tt->struct_vals[264].d = 1;
      tt->struct_vals[265].d = 0;
      tt->struct_vals[266].e = CLASS_HR;
      tt->struct_vals[267].e = FEATURE_LOG_KDP;
      tt->struct_vals[268].d = -1;
      tt->struct_vals[269].d = 0;
      tt->struct_vals[270].d = 0;
      tt->struct_vals[271].d = 1;
      tt->struct_vals[272].d = 1;
      tt->struct_vals[273].e = CLASS_RH;
      tt->struct_vals[274].e = FEATURE_LOG_KDP;
      tt->struct_vals[275].d = -10;
      tt->struct_vals[276].d = -4;
      tt->struct_vals[277].d = 0;
      tt->struct_vals[278].d = 1;
      tt->struct_vals[279].d = 1;
      tt->struct_vals[280].e = CLASS_GC;
      tt->struct_vals[281].e = FEATURE_SD_DBZ;
      tt->struct_vals[282].d = 2;
      tt->struct_vals[283].d = 4;
      tt->struct_vals[284].d = 10;
      tt->struct_vals[285].d = 15;
      tt->struct_vals[286].d = 0.6;
      tt->struct_vals[287].e = CLASS_BS;
      tt->struct_vals[288].e = FEATURE_SD_DBZ;
      tt->struct_vals[289].d = 1;
      tt->struct_vals[290].d = 2;
      tt->struct_vals[291].d = 4;
      tt->struct_vals[292].d = 7;
      tt->struct_vals[293].d = 0.8;
      tt->struct_vals[294].e = CLASS_DS;
      tt->struct_vals[295].e = FEATURE_SD_DBZ;
      tt->struct_vals[296].d = 0;
      tt->struct_vals[297].d = 0.5;
      tt->struct_vals[298].d = 3;
      tt->struct_vals[299].d = 6;
      tt->struct_vals[300].d = 0.2;
      tt->struct_vals[301].e = CLASS_WS;
      tt->struct_vals[302].e = FEATURE_SD_DBZ;
      tt->struct_vals[303].d = 0;
      tt->struct_vals[304].d = 0.5;
      tt->struct_vals[305].d = 3;
      tt->struct_vals[306].d = 6;
      tt->struct_vals[307].d = 0.2;
      tt->struct_vals[308].e = CLASS_CR;
      tt->struct_vals[309].e = FEATURE_SD_DBZ;
      tt->struct_vals[310].d = 0;
      tt->struct_vals[311].d = 0.5;
      tt->struct_vals[312].d = 3;
      tt->struct_vals[313].d = 6;
      tt->struct_vals[314].d = 0.2;
      tt->struct_vals[315].e = CLASS_GR;
      tt->struct_vals[316].e = FEATURE_SD_DBZ;
      tt->struct_vals[317].d = 0;
      tt->struct_vals[318].d = 0.5;
      tt->struct_vals[319].d = 3;
      tt->struct_vals[320].d = 6;
      tt->struct_vals[321].d = 0.2;
      tt->struct_vals[322].e = CLASS_BD;
      tt->struct_vals[323].e = FEATURE_SD_DBZ;
      tt->struct_vals[324].d = 0;
      tt->struct_vals[325].d = 0.5;
      tt->struct_vals[326].d = 3;
      tt->struct_vals[327].d = 6;
      tt->struct_vals[328].d = 0.2;
      tt->struct_vals[329].e = CLASS_RA;
      tt->struct_vals[330].e = FEATURE_SD_DBZ;
      tt->struct_vals[331].d = 0;
      tt->struct_vals[332].d = 0.5;
      tt->struct_vals[333].d = 3;
      tt->struct_vals[334].d = 6;
      tt->struct_vals[335].d = 0.2;
      tt->struct_vals[336].e = CLASS_HR;
      tt->struct_vals[337].e = FEATURE_SD_DBZ;
      tt->struct_vals[338].d = 0;
      tt->struct_vals[339].d = 0.5;
      tt->struct_vals[340].d = 3;
      tt->struct_vals[341].d = 6;
      tt->struct_vals[342].d = 0.2;
      tt->struct_vals[343].e = CLASS_RH;
      tt->struct_vals[344].e = FEATURE_SD_DBZ;
      tt->struct_vals[345].d = 0;
      tt->struct_vals[346].d = 0.5;
      tt->struct_vals[347].d = 3;
      tt->struct_vals[348].d = 6;
      tt->struct_vals[349].d = 0.2;
      tt->struct_vals[350].e = CLASS_GC;
      tt->struct_vals[351].e = FEATURE_SD_PHIDP;
      tt->struct_vals[352].d = 30;
      tt->struct_vals[353].d = 40;
      tt->struct_vals[354].d = 50;
      tt->struct_vals[355].d = 60;
      tt->struct_vals[356].d = 0.8;
      tt->struct_vals[357].e = CLASS_BS;
      tt->struct_vals[358].e = FEATURE_SD_PHIDP;
      tt->struct_vals[359].d = 8;
      tt->struct_vals[360].d = 10;
      tt->struct_vals[361].d = 40;
      tt->struct_vals[362].d = 60;
      tt->struct_vals[363].d = 0.8;
      tt->struct_vals[364].e = CLASS_DS;
      tt->struct_vals[365].e = FEATURE_SD_PHIDP;
      tt->struct_vals[366].d = 0;
      tt->struct_vals[367].d = 1;
      tt->struct_vals[368].d = 15;
      tt->struct_vals[369].d = 30;
      tt->struct_vals[370].d = 0.2;
      tt->struct_vals[371].e = CLASS_WS;
      tt->struct_vals[372].e = FEATURE_SD_PHIDP;
      tt->struct_vals[373].d = 0;
      tt->struct_vals[374].d = 1;
      tt->struct_vals[375].d = 15;
      tt->struct_vals[376].d = 30;
      tt->struct_vals[377].d = 0.2;
      tt->struct_vals[378].e = CLASS_CR;
      tt->struct_vals[379].e = FEATURE_SD_PHIDP;
      tt->struct_vals[380].d = 0;
      tt->struct_vals[381].d = 1;
      tt->struct_vals[382].d = 15;
      tt->struct_vals[383].d = 30;
      tt->struct_vals[384].d = 0.2;
      tt->struct_vals[385].e = CLASS_GR;
      tt->struct_vals[386].e = FEATURE_SD_PHIDP;
      tt->struct_vals[387].d = 0;
      tt->struct_vals[388].d = 1;
      tt->struct_vals[389].d = 15;
      tt->struct_vals[390].d = 30;
      tt->struct_vals[391].d = 0.2;
      tt->struct_vals[392].e = CLASS_BD;
      tt->struct_vals[393].e = FEATURE_SD_PHIDP;
      tt->struct_vals[394].d = 0;
      tt->struct_vals[395].d = 1;
      tt->struct_vals[396].d = 15;
      tt->struct_vals[397].d = 30;
      tt->struct_vals[398].d = 0.2;
      tt->struct_vals[399].e = CLASS_RA;
      tt->struct_vals[400].e = FEATURE_SD_PHIDP;
      tt->struct_vals[401].d = 0;
      tt->struct_vals[402].d = 1;
      tt->struct_vals[403].d = 15;
      tt->struct_vals[404].d = 30;
      tt->struct_vals[405].d = 0.2;
      tt->struct_vals[406].e = CLASS_HR;
      tt->struct_vals[407].e = FEATURE_SD_PHIDP;
      tt->struct_vals[408].d = 0;
      tt->struct_vals[409].d = 1;
      tt->struct_vals[410].d = 15;
      tt->struct_vals[411].d = 30;
      tt->struct_vals[412].d = 0.2;
      tt->struct_vals[413].e = CLASS_RH;
      tt->struct_vals[414].e = FEATURE_SD_PHIDP;
      tt->struct_vals[415].d = 0;
      tt->struct_vals[416].d = 1;
      tt->struct_vals[417].d = 15;
      tt->struct_vals[418].d = 30;
      tt->struct_vals[419].d = 0.2;
    tt++;
    
    // Parameter 'HCA_DBZ_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("HCA_DBZ_filter_len");
    tt->descr = tdrpStrDup("Length of kernel for computing DBZ fields - gates.");
    tt->help = tdrpStrDup("We use this filter length to compute DBZ smoothed and texture fields.");
    tt->val_offset = (char *) &HCA_DBZ_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'HCA_ZDR_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("HCA_ZDR_filter_len");
    tt->descr = tdrpStrDup("Length of kernel for computing ZDR fields - gates.");
    tt->help = tdrpStrDup("We use this filter length to compute ZDR smoothed and texture fields.");
    tt->val_offset = (char *) &HCA_ZDR_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'HCA_RHOHV_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("HCA_RHOHV_filter_len");
    tt->descr = tdrpStrDup("Length of kernel for computing RHOHV fields - gates.");
    tt->help = tdrpStrDup("We use this filter length to compute RHOHV smoothed and texture fields.");
    tt->val_offset = (char *) &HCA_RHOHV_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'HCA_PHIDP_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("HCA_PHIDP_filter_len");
    tt->descr = tdrpStrDup("Length of kernel for computing heavily filtered PHIDP fields - gates.");
    tt->help = tdrpStrDup("We use this filter length to compute the heavily filtered PHIDP fields.");
    tt->val_offset = (char *) &HCA_PHIDP_filter_len - &_start_;
    tt->single_val.i = 11;
    tt++;
    
    // Parameter 'HCA_PHIDP_heavy_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("HCA_PHIDP_heavy_filter_len");
    tt->descr = tdrpStrDup("Length of kernel for computing PHIDP fields - gates.");
    tt->help = tdrpStrDup("We use this filter length to compute the lightly filtered PHIDP fields.");
    tt->val_offset = (char *) &HCA_PHIDP_heavy_filter_len - &_start_;
    tt->single_val.i = 25;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("INDIVIDUAL THRESHOLDS FOR CLASSES");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'HCA_max_abs_vel_for_GC'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_max_abs_vel_for_GC");
    tt->descr = tdrpStrDup("Maximum radial velocity for GC (m/s).");
    tt->help = tdrpStrDup("If abs(velocity) exceeds this, GC will be suppressed.");
    tt->val_offset = (char *) &HCA_max_abs_vel_for_GC - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'HCA_max_rhohv_for_BS'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_max_rhohv_for_BS");
    tt->descr = tdrpStrDup("Maximum rhohv for BS.");
    tt->help = tdrpStrDup("If rhohv exceeds this, BS will be suppressed.");
    tt->val_offset = (char *) &HCA_max_rhohv_for_BS - &_start_;
    tt->single_val.d = 0.97;
    tt++;
    
    // Parameter 'HCA_max_zdr_for_DS'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_max_zdr_for_DS");
    tt->descr = tdrpStrDup("Maximum zdr for DS.");
    tt->help = tdrpStrDup("If zdr exceeds this, DS will be suppressed.");
    tt->val_offset = (char *) &HCA_max_zdr_for_DS - &_start_;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'HCA_min_zdr_for_BD'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_min_zdr_for_BD");
    tt->descr = tdrpStrDup("Minimum zdr for BD.");
    tt->help = tdrpStrDup("If zdr exceeds (f2(Z) - this), BD will be suppressed.");
    tt->val_offset = (char *) &HCA_min_zdr_for_BD - &_start_;
    tt->single_val.d = -0.3;
    tt++;
    
    // Parameter 'HCA_min_zdr_for_WS'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_min_zdr_for_WS");
    tt->descr = tdrpStrDup("Minimum zdr for WS.");
    tt->help = tdrpStrDup("If zdr is less than this, WS will be suppressed.");
    tt->val_offset = (char *) &HCA_min_zdr_for_WS - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'HCA_min_dbz_for_WS'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_min_dbz_for_WS");
    tt->descr = tdrpStrDup("Minimum dbz for WS.");
    tt->help = tdrpStrDup("If dbz is less than this, WS will be suppressed.");
    tt->val_offset = (char *) &HCA_min_dbz_for_WS - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'HCA_max_dbz_for_CR'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_max_dbz_for_CR");
    tt->descr = tdrpStrDup("Maximum dbz for CR.");
    tt->help = tdrpStrDup("If dbz exceeds this, CR will be suppressed.");
    tt->val_offset = (char *) &HCA_max_dbz_for_CR - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'HCA_min_dbz_for_GR'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_min_dbz_for_GR");
    tt->descr = tdrpStrDup("Minimum dbz for GR.");
    tt->help = tdrpStrDup("If dbz is less than this, GR will be suppressed.");
    tt->val_offset = (char *) &HCA_min_dbz_for_GR - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'HCA_max_dbz_for_GR'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_max_dbz_for_GR");
    tt->descr = tdrpStrDup("Maximum dbz for GR.");
    tt->help = tdrpStrDup("If dbz exceeds this, GR will be suppressed.");
    tt->val_offset = (char *) &HCA_max_dbz_for_GR - &_start_;
    tt->single_val.d = 60;
    tt++;
    
    // Parameter 'HCA_max_dbz_for_RA'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_max_dbz_for_RA");
    tt->descr = tdrpStrDup("Maximum dbz for RA.");
    tt->help = tdrpStrDup("If dbz exceeds this, RA will be suppressed.");
    tt->val_offset = (char *) &HCA_max_dbz_for_RA - &_start_;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'HCA_min_dbz_for_HR'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_min_dbz_for_HR");
    tt->descr = tdrpStrDup("Minimum dbz for HR.");
    tt->help = tdrpStrDup("If dbz is less than this, HR will be suppressed.");
    tt->val_offset = (char *) &HCA_min_dbz_for_HR - &_start_;
    tt->single_val.d = 30;
    tt++;
    
    // Parameter 'HCA_min_dbz_for_RH'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("HCA_min_dbz_for_RH");
    tt->descr = tdrpStrDup("Minimum dbz for RH.");
    tt->help = tdrpStrDup("If dbz is less than this, RH will be suppressed.");
    tt->val_offset = (char *) &HCA_min_dbz_for_RH - &_start_;
    tt->single_val.d = 40;
    tt++;
    
    // Parameter 'Comment 15'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 15");
    tt->comment_hdr = tdrpStrDup("COMPUTING NCAR PID - HYDROMETEOR PARTICLE ID");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'compute_pid'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("compute_pid");
    tt->descr = tdrpStrDup("Option to compute PID classification.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &compute_pid - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'pid_thresholds_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("pid_thresholds_file_path");
    tt->descr = tdrpStrDup("File path for fuzzy logic thresholds for PID.");
    tt->help = tdrpStrDup("This file contains the thresholds and weights for computing particle ID.");
    tt->val_offset = (char *) &pid_thresholds_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("./s_band_pid_input_steraotables27.input");
    tt++;
    
    // Parameter 'pid_override_temp_profile'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("pid_override_temp_profile");
    tt->descr = tdrpStrDup("Option to override temp profile in pid_thresholds file.");
    tt->help = tdrpStrDup("If TRUE, the profile in the thresholds file will be overridden by the sounding from SPDB.");
    tt->val_offset = (char *) &pid_override_temp_profile - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_snr_threshold");
    tt->descr = tdrpStrDup("Minimum SNR for valid PID.");
    tt->help = tdrpStrDup("If the SNR at a gate is below this, the PID is censored.");
    tt->val_offset = (char *) &PID_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'PID_snr_upper_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_snr_upper_threshold");
    tt->descr = tdrpStrDup("Maximum SNR for valid PID.");
    tt->help = tdrpStrDup("If the SNR at a gate is above this value, the PID will be set to SATURATED_SNR = 18.");
    tt->val_offset = (char *) &PID_snr_upper_threshold - &_start_;
    tt->single_val.d = 9999;
    tt++;
    
    // Parameter 'PID_min_valid_interest'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_min_valid_interest");
    tt->descr = tdrpStrDup("Minimum valid interest value for identifying a particle.");
    tt->help = tdrpStrDup("If the computed interest value is below this, the PID is set to missing.");
    tt->val_offset = (char *) &PID_min_valid_interest - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_DBZ'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_DBZ");
    tt->descr = tdrpStrDup("Option to filter DBZ with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_DBZ - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_DBZ_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_DBZ_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for DBZ - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_DBZ'");
    tt->val_offset = (char *) &PID_DBZ_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_ZDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_ZDR");
    tt->descr = tdrpStrDup("Option to filter ZDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_ZDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_ZDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_ZDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for ZDR - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_ZDR'");
    tt->val_offset = (char *) &PID_ZDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_RHOHV'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_RHOHV");
    tt->descr = tdrpStrDup("Option to filter RHOHV with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_RHOHV - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_RHOHV_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_RHOHV_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for RHOHV - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_RHOHV'");
    tt->val_offset = (char *) &PID_RHOHV_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_apply_median_filter_to_LDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_apply_median_filter_to_LDR");
    tt->descr = tdrpStrDup("Option to filter LDR with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range.");
    tt->val_offset = (char *) &PID_apply_median_filter_to_LDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_LDR_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_LDR_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for LDR - gates.");
    tt->help = tdrpStrDup("See 'PID_apply_median_filter_to_LDR'");
    tt->val_offset = (char *) &PID_LDR_median_filter_len - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'PID_replace_missing_LDR'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_replace_missing_LDR");
    tt->descr = tdrpStrDup("For PID, option to replace missing LDR values with a specified value.");
    tt->help = tdrpStrDup("When the SNR gets low, LDR is unreliable since there is not sufficient dynamic range to provide an accurate cross-polar power measurement. In these cases, it makes sense to replace LDR with a neutral value, such as 0.0, so that we do not reject gates at which valuable data is available.");
    tt->val_offset = (char *) &PID_replace_missing_LDR - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'PID_LDR_replacement_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("PID_LDR_replacement_value");
    tt->descr = tdrpStrDup("Value to which LDR will be set if missing.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &PID_LDR_replacement_value - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'PID_ngates_for_sdev'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_ngates_for_sdev");
    tt->descr = tdrpStrDup("Number of gates for computing standard deviations.");
    tt->help = tdrpStrDup("This applies to computing the standard deviation of zdr and phidp.");
    tt->val_offset = (char *) &PID_ngates_for_sdev - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'PID_output_particle_interest_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("PID_output_particle_interest_fields");
    tt->descr = tdrpStrDup("Option to output the individual interest fields.");
    tt->help = tdrpStrDup("If TRUE, the interest field for each particle type will be written to the output FMQ, in addition to the list in 'output_fields'.");
    tt->val_offset = (char *) &PID_output_particle_interest_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'apply_median_filter_to_PID'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_median_filter_to_PID");
    tt->descr = tdrpStrDup("Option to filter PID with median filter.");
    tt->help = tdrpStrDup("The filter is computed in range, and affects both rain rate and PID.");
    tt->val_offset = (char *) &apply_median_filter_to_PID - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'PID_median_filter_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("PID_median_filter_len");
    tt->descr = tdrpStrDup("Length of median filter for PID - gates.");
    tt->help = tdrpStrDup("See 'appply_median_filter_to_PID'");
    tt->val_offset = (char *) &PID_median_filter_len - &_start_;
    tt->single_val.i = 7;
    tt++;
    
    // Parameter 'Comment 16'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 16");
    tt->comment_hdr = tdrpStrDup("SOUNDING INPUT FOR temperature profile");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'sounding_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_spdb_url");
    tt->descr = tdrpStrDup("SPDB URL for sounding data.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sounding_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdb/soundings");
    tt++;
    
    // Parameter 'sounding_search_time_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sounding_search_time_margin_secs");
    tt->descr = tdrpStrDup("Time margin for retrieving sounding, in secs.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &sounding_search_time_margin_secs - &_start_;
    tt->single_val.i = 86400;
    tt++;
    
    // Parameter 'sounding_location_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sounding_location_name");
    tt->descr = tdrpStrDup("Name of sounding location.");
    tt->help = tdrpStrDup("If set, we request a profile just for that sounding. If empty, all soundings in the data base are considered valid.");
    tt->val_offset = (char *) &sounding_location_name - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'sounding_check_pressure_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_check_pressure_range");
    tt->descr = tdrpStrDup("Option to check that pressure covers the required range.");
    tt->help = tdrpStrDup("If TRUE, we will check that pressure range in the sounding meets or exceeds the min and max specified.");
    tt->val_offset = (char *) &sounding_check_pressure_range - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_required_pressure_range_hpa'
    // ctype is '_data_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sounding_required_pressure_range_hpa");
    tt->descr = tdrpStrDup("Required pressure range for sounding to be valid (hPa)");
    tt->help = tdrpStrDup("This is used to provide a quality check on the sounding. If the pressure data does not fully cover this range, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &sounding_required_pressure_range_hpa - &_start_;
    tt->struct_def.name = tdrpStrDup("data_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_val");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &sounding_required_pressure_range_hpa.min_val - (char *) &sounding_required_pressure_range_hpa;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_val");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &sounding_required_pressure_range_hpa.max_val - (char *) &sounding_required_pressure_range_hpa;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 300;
      tt->struct_vals[1].d = 950;
    tt++;
    
    // Parameter 'sounding_check_height_range'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_check_height_range");
    tt->descr = tdrpStrDup("Option to check that height covers the required range.");
    tt->help = tdrpStrDup("If TRUE, we will check that height range in the sounding meets or exceeds the min and max specified.");
    tt->val_offset = (char *) &sounding_check_height_range - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_required_height_range_m'
    // ctype is '_data_range_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sounding_required_height_range_m");
    tt->descr = tdrpStrDup("Required height range for sounding to be valid (m)");
    tt->help = tdrpStrDup("This is used to provide a quality check on the sounding. If the height data does not fully cover this range, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &sounding_required_height_range_m - &_start_;
    tt->struct_def.name = tdrpStrDup("data_range_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_val");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &sounding_required_height_range_m.min_val - (char *) &sounding_required_height_range_m;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_val");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &sounding_required_height_range_m.max_val - (char *) &sounding_required_height_range_m;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 500;
      tt->struct_vals[1].d = 15000;
    tt++;
    
    // Parameter 'sounding_check_pressure_monotonically_decreasing'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_check_pressure_monotonically_decreasing");
    tt->descr = tdrpStrDup("Option to check that pressure decreases monotonically.");
    tt->help = tdrpStrDup("If TRUE, we will check that pressure decreases monotonically. If not, the sounding is rejected and we look back for the next available one.");
    tt->val_offset = (char *) &sounding_check_pressure_monotonically_decreasing - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'sounding_height_correction_km'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sounding_height_correction_km");
    tt->descr = tdrpStrDup("Correction to the heights read in with the sounding (km).");
    tt->help = tdrpStrDup("This correction is ADDED to the heights read in. So if the freezing level seems low, the correction should be positive. If the freezing level appears high, it should be negative.");
    tt->val_offset = (char *) &sounding_height_correction_km - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'sounding_use_wet_bulb_temp'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sounding_use_wet_bulb_temp");
    tt->descr = tdrpStrDup("Option to use wet bulb temperature profile.");
    tt->help = tdrpStrDup("If TRUE, we use the wet bulb temperature profile from the sounding instead of the dry bulb. Applies to PID estimation. This is thought to more closely track the temperature of melting ice.");
    tt->val_offset = (char *) &sounding_use_wet_bulb_temp - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'temp_at_bottom_of_melting_layer'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("temp_at_bottom_of_melting_layer");
    tt->descr = tdrpStrDup("Temperature at the bottom of the melting layer (C).");
    tt->help = tdrpStrDup("We use this temperature to locate the bottom edge of the melting layer in the temperature profile.");
    tt->val_offset = (char *) &temp_at_bottom_of_melting_layer - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'temp_at_top_of_melting_layer'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("temp_at_top_of_melting_layer");
    tt->descr = tdrpStrDup("Temperature at the top of the melting layer (C).");
    tt->help = tdrpStrDup("We use this temperature to locate the top edge of the melting layer in the temperature profile.");
    tt->val_offset = (char *) &temp_at_top_of_melting_layer - &_start_;
    tt->single_val.d = -1;
    tt++;
    
    // Parameter 'Comment 17'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 17");
    tt->comment_hdr = tdrpStrDup("RETRIEVING SITE TEMPERATURE FROM SPDB");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'read_site_temp_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_site_temp_from_spdb");
    tt->descr = tdrpStrDup("Option to read site temperature from SPDB.");
    tt->help = tdrpStrDup("The temperature closest to the radar volume time will be read in.");
    tt->val_offset = (char *) &read_site_temp_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'site_temp_spdb_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_spdb_url");
    tt->descr = tdrpStrDup("URL for temperatures from SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_spdb_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://hail:0:pecan/spdb/spol/temp");
    tt++;
    
    // Parameter 'site_temp_station_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("site_temp_station_name");
    tt->descr = tdrpStrDup("Station name for site temperature.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &site_temp_station_name - &_start_;
    tt->single_val.s = tdrpStrDup("SPOL");
    tt++;
    
    // Parameter 'site_temp_search_margin_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("site_temp_search_margin_secs");
    tt->descr = tdrpStrDup("Search margin when finding site temp data (secs).");
    tt->help = tdrpStrDup("We search for the temperature closest in time to the radar volume. This is the search margin on either side of the volume time.");
    tt->val_offset = (char *) &site_temp_search_margin_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // Parameter 'Comment 18'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 18");
    tt->comment_hdr = tdrpStrDup("SPECIFYING FIELD NAMES AND OUTPUT ENCODING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Indicate which fields should be written to the output file.");
    tt->help = tdrpStrDup("Choose the ID from the list. The name and units can be set however the user prefers. The output_encoding and output_scaling apply to CfRadial output only. If the output_scaling is DYNAMIC then the scale and offset are computed using the dynamic range of the data. If the output_scaling is SPECIFIED, then the specified scale and offset are used.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 7;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("output_field_id_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("id");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->id - (char *) _output_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("output_field_id_t");
        tt->struct_def.fields[0].enum_def.nfields = 75;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("SNR");
        tt->struct_def.fields[0].enum_def.fields[0].val = SNR;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("DBZ");
        tt->struct_def.fields[0].enum_def.fields[1].val = DBZ;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("VEL");
        tt->struct_def.fields[0].enum_def.fields[2].val = VEL;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("WIDTH");
        tt->struct_def.fields[0].enum_def.fields[3].val = WIDTH;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("NCP");
        tt->struct_def.fields[0].enum_def.fields[4].val = NCP;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("ZDR");
        tt->struct_def.fields[0].enum_def.fields[5].val = ZDR;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("LDR");
        tt->struct_def.fields[0].enum_def.fields[6].val = LDR;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("RHOHV");
        tt->struct_def.fields[0].enum_def.fields[7].val = RHOHV;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("PHIDP");
        tt->struct_def.fields[0].enum_def.fields[8].val = PHIDP;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("KDP");
        tt->struct_def.fields[0].enum_def.fields[9].val = KDP;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("KDP_COND");
        tt->struct_def.fields[0].enum_def.fields[10].val = KDP_COND;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("PSOB");
        tt->struct_def.fields[0].enum_def.fields[11].val = PSOB;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("DBZ_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[12].val = DBZ_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("ZDR_ATTEN_CORRECTION");
        tt->struct_def.fields[0].enum_def.fields[13].val = ZDR_ATTEN_CORRECTION;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("DBZ_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[14].val = DBZ_ATTEN_CORRECTED;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("ZDR_ATTEN_CORRECTED");
        tt->struct_def.fields[0].enum_def.fields[15].val = ZDR_ATTEN_CORRECTED;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("DBZ_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[16].val = DBZ_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("ZDR_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[17].val = ZDR_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("RHOHV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[18].val = RHOHV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("SNR_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[19].val = SNR_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("ZDR_SDEV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[20].val = ZDR_SDEV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("VALID_FLAG_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[21].val = VALID_FLAG_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("PHIDP_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[22].val = PHIDP_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("PHIDP_MEAN_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[23].val = PHIDP_MEAN_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("PHIDP_MEAN_UNFOLD_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[24].val = PHIDP_MEAN_UNFOLD_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[25].name = tdrpStrDup("PHIDP_SDEV_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[25].val = PHIDP_SDEV_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[26].name = tdrpStrDup("PHIDP_JITTER_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[26].val = PHIDP_JITTER_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[27].name = tdrpStrDup("PHIDP_UNFOLD_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[27].val = PHIDP_UNFOLD_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[28].name = tdrpStrDup("PHIDP_FILT_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[28].val = PHIDP_FILT_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[29].name = tdrpStrDup("PHIDP_COND_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[29].val = PHIDP_COND_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[30].name = tdrpStrDup("PHIDP_COND_FILT_FOR_KDP");
        tt->struct_def.fields[0].enum_def.fields[30].val = PHIDP_COND_FILT_FOR_KDP;
        tt->struct_def.fields[0].enum_def.fields[31].name = tdrpStrDup("RAY_HEIGHT");
        tt->struct_def.fields[0].enum_def.fields[31].val = RAY_HEIGHT;
        tt->struct_def.fields[0].enum_def.fields[32].name = tdrpStrDup("SNR_MEAN_SEACLUT");
        tt->struct_def.fields[0].enum_def.fields[32].val = SNR_MEAN_SEACLUT;
        tt->struct_def.fields[0].enum_def.fields[33].name = tdrpStrDup("RHOHV_MEAN_SEACLUT");
        tt->struct_def.fields[0].enum_def.fields[33].val = RHOHV_MEAN_SEACLUT;
        tt->struct_def.fields[0].enum_def.fields[34].name = tdrpStrDup("PHIDP_SDEV_SEACLUT");
        tt->struct_def.fields[0].enum_def.fields[34].val = PHIDP_SDEV_SEACLUT;
        tt->struct_def.fields[0].enum_def.fields[35].name = tdrpStrDup("ZDR_SDEV_SEACLUT");
        tt->struct_def.fields[0].enum_def.fields[35].val = ZDR_SDEV_SEACLUT;
        tt->struct_def.fields[0].enum_def.fields[36].name = tdrpStrDup("DBZ_ELEV_GRADIENT_SEACLUT");
        tt->struct_def.fields[0].enum_def.fields[36].val = DBZ_ELEV_GRADIENT_SEACLUT;
        tt->struct_def.fields[0].enum_def.fields[37].name = tdrpStrDup("RHOHV_MEAN_INTEREST_SEACLUT");
        tt->struct_def.fields[0].enum_def.fields[37].val = RHOHV_MEAN_INTEREST_SEACLUT;
        tt->struct_def.fields[0].enum_def.fields[38].name = tdrpStrDup("PHIDP_SDEV_INTEREST_SEACLUT");
        tt->struct_def.fields[0].enum_def.fields[38].val = PHIDP_SDEV_INTEREST_SEACLUT;
        tt->struct_def.fields[0].enum_def.fields[39].name = tdrpStrDup("ZDR_SDEV_INTEREST_SEACLUT");
        tt->struct_def.fields[0].enum_def.fields[39].val = ZDR_SDEV_INTEREST_SEACLUT;
        tt->struct_def.fields[0].enum_def.fields[40].name = tdrpStrDup("DBZ_ELEV_GRADIENT_INTEREST_SEACLUT");
        tt->struct_def.fields[0].enum_def.fields[40].val = DBZ_ELEV_GRADIENT_INTEREST_SEACLUT;
        tt->struct_def.fields[0].enum_def.fields[41].name = tdrpStrDup("SEACLUT_FLAG");
        tt->struct_def.fields[0].enum_def.fields[41].val = SEACLUT_FLAG;
        tt->struct_def.fields[0].enum_def.fields[42].name = tdrpStrDup("PARTICLE_ID");
        tt->struct_def.fields[0].enum_def.fields[42].val = PARTICLE_ID;
        tt->struct_def.fields[0].enum_def.fields[43].name = tdrpStrDup("TEMP_FOR_PID");
        tt->struct_def.fields[0].enum_def.fields[43].val = TEMP_FOR_PID;
        tt->struct_def.fields[0].enum_def.fields[44].name = tdrpStrDup("HCA_DBZ");
        tt->struct_def.fields[0].enum_def.fields[44].val = HCA_DBZ;
        tt->struct_def.fields[0].enum_def.fields[45].name = tdrpStrDup("HCA_ZDR");
        tt->struct_def.fields[0].enum_def.fields[45].val = HCA_ZDR;
        tt->struct_def.fields[0].enum_def.fields[46].name = tdrpStrDup("HCA_RHOHV");
        tt->struct_def.fields[0].enum_def.fields[46].val = HCA_RHOHV;
        tt->struct_def.fields[0].enum_def.fields[47].name = tdrpStrDup("HCA_PHIDP");
        tt->struct_def.fields[0].enum_def.fields[47].val = HCA_PHIDP;
        tt->struct_def.fields[0].enum_def.fields[48].name = tdrpStrDup("HCA_LOGKDP");
        tt->struct_def.fields[0].enum_def.fields[48].val = HCA_LOGKDP;
        tt->struct_def.fields[0].enum_def.fields[49].name = tdrpStrDup("HCA_TEMP_LOW");
        tt->struct_def.fields[0].enum_def.fields[49].val = HCA_TEMP_LOW;
        tt->struct_def.fields[0].enum_def.fields[50].name = tdrpStrDup("HCA_TEMP_MID");
        tt->struct_def.fields[0].enum_def.fields[50].val = HCA_TEMP_MID;
        tt->struct_def.fields[0].enum_def.fields[51].name = tdrpStrDup("HCA_TEMP_HIGH");
        tt->struct_def.fields[0].enum_def.fields[51].val = HCA_TEMP_HIGH;
        tt->struct_def.fields[0].enum_def.fields[52].name = tdrpStrDup("HCA_SMOOTH_DBZ");
        tt->struct_def.fields[0].enum_def.fields[52].val = HCA_SMOOTH_DBZ;
        tt->struct_def.fields[0].enum_def.fields[53].name = tdrpStrDup("HCA_SMOOTH_ZDR");
        tt->struct_def.fields[0].enum_def.fields[53].val = HCA_SMOOTH_ZDR;
        tt->struct_def.fields[0].enum_def.fields[54].name = tdrpStrDup("HCA_SMOOTH_RHOHV");
        tt->struct_def.fields[0].enum_def.fields[54].val = HCA_SMOOTH_RHOHV;
        tt->struct_def.fields[0].enum_def.fields[55].name = tdrpStrDup("HCA_SMOOTH_PHIDP");
        tt->struct_def.fields[0].enum_def.fields[55].val = HCA_SMOOTH_PHIDP;
        tt->struct_def.fields[0].enum_def.fields[56].name = tdrpStrDup("HCA_HVY_SMOOTH_PHIDP");
        tt->struct_def.fields[0].enum_def.fields[56].val = HCA_HVY_SMOOTH_PHIDP;
        tt->struct_def.fields[0].enum_def.fields[57].name = tdrpStrDup("HCA_TEXTURE_DBZ");
        tt->struct_def.fields[0].enum_def.fields[57].val = HCA_TEXTURE_DBZ;
        tt->struct_def.fields[0].enum_def.fields[58].name = tdrpStrDup("HCA_TEXTURE_ZDR");
        tt->struct_def.fields[0].enum_def.fields[58].val = HCA_TEXTURE_ZDR;
        tt->struct_def.fields[0].enum_def.fields[59].name = tdrpStrDup("HCA_TEXTURE_RHOHV");
        tt->struct_def.fields[0].enum_def.fields[59].val = HCA_TEXTURE_RHOHV;
        tt->struct_def.fields[0].enum_def.fields[60].name = tdrpStrDup("HCA_TEXTURE_PHIDP");
        tt->struct_def.fields[0].enum_def.fields[60].val = HCA_TEXTURE_PHIDP;
        tt->struct_def.fields[0].enum_def.fields[61].name = tdrpStrDup("HCA_SD_DBZ");
        tt->struct_def.fields[0].enum_def.fields[61].val = HCA_SD_DBZ;
        tt->struct_def.fields[0].enum_def.fields[62].name = tdrpStrDup("HCA_SD_PHIDP");
        tt->struct_def.fields[0].enum_def.fields[62].val = HCA_SD_PHIDP;
        tt->struct_def.fields[0].enum_def.fields[63].name = tdrpStrDup("HCA_GC_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[63].val = HCA_GC_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[64].name = tdrpStrDup("HCA_BS_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[64].val = HCA_BS_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[65].name = tdrpStrDup("HCA_DS_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[65].val = HCA_DS_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[66].name = tdrpStrDup("HCA_WS_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[66].val = HCA_WS_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[67].name = tdrpStrDup("HCA_CR_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[67].val = HCA_CR_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[68].name = tdrpStrDup("HCA_GR_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[68].val = HCA_GR_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[69].name = tdrpStrDup("HCA_BD_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[69].val = HCA_BD_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[70].name = tdrpStrDup("HCA_RA_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[70].val = HCA_RA_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[71].name = tdrpStrDup("HCA_HR_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[71].val = HCA_HR_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[72].name = tdrpStrDup("HCA_RH_INTEREST");
        tt->struct_def.fields[0].enum_def.fields[72].val = HCA_RH_INTEREST;
        tt->struct_def.fields[0].enum_def.fields[73].name = tdrpStrDup("HCA_TEMP_CAT");
        tt->struct_def.fields[0].enum_def.fields[73].val = HCA_TEMP_CAT;
        tt->struct_def.fields[0].enum_def.fields[74].name = tdrpStrDup("HCA");
        tt->struct_def.fields[0].enum_def.fields[74].val = HCA;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->name - (char *) _output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("long_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_output_fields->long_name - (char *) _output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("standard_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_output_fields->standard_name - (char *) _output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("units");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_output_fields->units - (char *) _output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_output_fields->encoding - (char *) _output_fields;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[5].enum_def.nfields = 4;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("OUTPUT_ENCODING_FL32");
        tt->struct_def.fields[5].enum_def.fields[0].val = OUTPUT_ENCODING_FL32;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("OUTPUT_ENCODING_INT32");
        tt->struct_def.fields[5].enum_def.fields[1].val = OUTPUT_ENCODING_INT32;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("OUTPUT_ENCODING_INT16");
        tt->struct_def.fields[5].enum_def.fields[2].val = OUTPUT_ENCODING_INT16;
        tt->struct_def.fields[5].enum_def.fields[3].name = tdrpStrDup("OUTPUT_ENCODING_INT08");
        tt->struct_def.fields[5].enum_def.fields[3].val = OUTPUT_ENCODING_INT08;
      tt->struct_def.fields[6].ftype = tdrpStrDup("output_scaling_t");
      tt->struct_def.fields[6].fname = tdrpStrDup("scaling");
      tt->struct_def.fields[6].ptype = ENUM_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_output_fields->scaling - (char *) _output_fields;
        tt->struct_def.fields[6].enum_def.name = tdrpStrDup("output_scaling_t");
        tt->struct_def.fields[6].enum_def.nfields = 2;
        tt->struct_def.fields[6].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[6].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[6].enum_def.fields[0].name = tdrpStrDup("OUTPUT_SCALING_DYNAMIC");
        tt->struct_def.fields[6].enum_def.fields[0].val = OUTPUT_SCALING_DYNAMIC;
        tt->struct_def.fields[6].enum_def.fields[1].name = tdrpStrDup("OUTPUT_SCALING_SPECIFIED");
        tt->struct_def.fields[6].enum_def.fields[1].val = OUTPUT_SCALING_SPECIFIED;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("scale");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_output_fields->scale - (char *) _output_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("offset");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_output_fields->offset - (char *) _output_fields;
    tt->n_struct_vals = 63;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = SNR;
      tt->struct_vals[1].s = tdrpStrDup("SNR");
      tt->struct_vals[2].s = tdrpStrDup("signal_to_noise_ratio_db");
      tt->struct_vals[3].s = tdrpStrDup("signal_to_noise_ratio");
      tt->struct_vals[4].s = tdrpStrDup("dB");
      tt->struct_vals[5].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[6].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[7].d = 0.01;
      tt->struct_vals[8].d = 0;
      tt->struct_vals[9].e = DBZ;
      tt->struct_vals[10].s = tdrpStrDup("DBZ");
      tt->struct_vals[11].s = tdrpStrDup("radar_reflectivity");
      tt->struct_vals[12].s = tdrpStrDup("equivalent_reflectivity_factor");
      tt->struct_vals[13].s = tdrpStrDup("dBZ");
      tt->struct_vals[14].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[15].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[16].d = 0.01;
      tt->struct_vals[17].d = 0;
      tt->struct_vals[18].e = ZDR;
      tt->struct_vals[19].s = tdrpStrDup("ZDR");
      tt->struct_vals[20].s = tdrpStrDup("calibrated_log_differential_reflectivity");
      tt->struct_vals[21].s = tdrpStrDup("log_differential_reflectivity");
      tt->struct_vals[22].s = tdrpStrDup("dB");
      tt->struct_vals[23].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[24].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[25].d = 0.01;
      tt->struct_vals[26].d = 0;
      tt->struct_vals[27].e = RHOHV;
      tt->struct_vals[28].s = tdrpStrDup("RHOHV");
      tt->struct_vals[29].s = tdrpStrDup("cross_correlation_ratio");
      tt->struct_vals[30].s = tdrpStrDup("cross_correlation_ratio_hv");
      tt->struct_vals[31].s = tdrpStrDup("");
      tt->struct_vals[32].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[33].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[34].d = 0.001;
      tt->struct_vals[35].d = 0;
      tt->struct_vals[36].e = PHIDP;
      tt->struct_vals[37].s = tdrpStrDup("PHIDP");
      tt->struct_vals[38].s = tdrpStrDup("differential_phase");
      tt->struct_vals[39].s = tdrpStrDup("differential_phase_hv");
      tt->struct_vals[40].s = tdrpStrDup("deg");
      tt->struct_vals[41].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[42].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[43].d = 0.01;
      tt->struct_vals[44].d = 0;
      tt->struct_vals[45].e = KDP;
      tt->struct_vals[46].s = tdrpStrDup("KDP");
      tt->struct_vals[47].s = tdrpStrDup("specific_differential_phase");
      tt->struct_vals[48].s = tdrpStrDup("specific_differential_phase_hv");
      tt->struct_vals[49].s = tdrpStrDup("deg/km");
      tt->struct_vals[50].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[51].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[52].d = 0.001;
      tt->struct_vals[53].d = 0;
      tt->struct_vals[54].e = PSOB;
      tt->struct_vals[55].s = tdrpStrDup("PSOB");
      tt->struct_vals[56].s = tdrpStrDup("phase_shift_on_backscatter");
      tt->struct_vals[57].s = tdrpStrDup("phase_shift_on_backscatter");
      tt->struct_vals[58].s = tdrpStrDup("deg");
      tt->struct_vals[59].e = OUTPUT_ENCODING_INT16;
      tt->struct_vals[60].e = OUTPUT_SCALING_DYNAMIC;
      tt->struct_vals[61].d = 0.001;
      tt->struct_vals[62].d = 0;
    tt++;
    
    // Parameter 'Comment 19'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 19");
    tt->comment_hdr = tdrpStrDup("OUTPUT FILE FORMAT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_format'
    // ctype is '_output_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_format");
    tt->descr = tdrpStrDup("Format for the output files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_format - &_start_;
    tt->enum_def.name = tdrpStrDup("output_format_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_FORMAT_CFRADIAL");
      tt->enum_def.fields[0].val = OUTPUT_FORMAT_CFRADIAL;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_FORMAT_DORADE");
      tt->enum_def.fields[1].val = OUTPUT_FORMAT_DORADE;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_FORMAT_FORAY");
      tt->enum_def.fields[2].val = OUTPUT_FORMAT_FORAY;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_FORMAT_NEXRAD");
      tt->enum_def.fields[3].val = OUTPUT_FORMAT_NEXRAD;
      tt->enum_def.fields[4].name = tdrpStrDup("OUTPUT_FORMAT_UF");
      tt->enum_def.fields[4].val = OUTPUT_FORMAT_UF;
      tt->enum_def.fields[5].name = tdrpStrDup("OUTPUT_FORMAT_MDV_RADIAL");
      tt->enum_def.fields[5].val = OUTPUT_FORMAT_MDV_RADIAL;
    tt->single_val.e = OUTPUT_FORMAT_CFRADIAL;
    tt++;
    
    // Parameter 'netcdf_style'
    // ctype is '_netcdf_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("netcdf_style");
    tt->descr = tdrpStrDup("NetCDF style - if output_format is CFRADIAL");
    tt->help = tdrpStrDup("netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls");
    tt->val_offset = (char *) &netcdf_style - &_start_;
    tt->enum_def.name = tdrpStrDup("netcdf_style_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CLASSIC");
      tt->enum_def.fields[0].val = CLASSIC;
      tt->enum_def.fields[1].name = tdrpStrDup("NC64BIT");
      tt->enum_def.fields[1].val = NC64BIT;
      tt->enum_def.fields[2].name = tdrpStrDup("NETCDF4");
      tt->enum_def.fields[2].val = NETCDF4;
      tt->enum_def.fields[3].name = tdrpStrDup("NETCDF4_CLASSIC");
      tt->enum_def.fields[3].val = NETCDF4_CLASSIC;
    tt->single_val.e = NETCDF4;
    tt++;
    
    // Parameter 'Comment 20'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 20");
    tt->comment_hdr = tdrpStrDup("OUTPUT BYTE-SWAPPING and COMPRESSION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_native_byte_order'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_native_byte_order");
    tt->descr = tdrpStrDup("Option to leave data in native byte order.");
    tt->help = tdrpStrDup("If false, data will be byte-swapped as appropriate on output.");
    tt->val_offset = (char *) &output_native_byte_order - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_compressed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_compressed");
    tt->descr = tdrpStrDup("Option to compress data fields on output.");
    tt->help = tdrpStrDup("Applies to netCDF and Dorade. UF does not support compression.");
    tt->val_offset = (char *) &output_compressed - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'compression_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("compression_level");
    tt->descr = tdrpStrDup("Compression level for output, if compressed.");
    tt->help = tdrpStrDup("Applies to netCDF only. Dorade compression is run-length encoding, and has not options..");
    tt->val_offset = (char *) &compression_level - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 21'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 21");
    tt->comment_hdr = tdrpStrDup("VOLUME OUTPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'write_output_volume'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_output_volume");
    tt->descr = tdrpStrDup("Option to write the results to a volume output file.");
    tt->help = tdrpStrDup("Normally this will be set to true. However, when running analyses such as self-consistency or zdr bias, it may be preferable to suppress writing the output file, in which case this should be set to false.");
    tt->val_offset = (char *) &write_output_volume - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory path.");
    tt->help = tdrpStrDup("Files will be written to this directory.");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'output_filename_mode'
    // ctype is '_filename_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_filename_mode");
    tt->descr = tdrpStrDup("Mode for computing output file name.");
    tt->help = tdrpStrDup("START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.");
    tt->val_offset = (char *) &output_filename_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("filename_mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("START_AND_END_TIMES");
      tt->enum_def.fields[0].val = START_AND_END_TIMES;
      tt->enum_def.fields[1].name = tdrpStrDup("START_TIME_ONLY");
      tt->enum_def.fields[1].val = START_TIME_ONLY;
      tt->enum_def.fields[2].name = tdrpStrDup("END_TIME_ONLY");
      tt->enum_def.fields[2].val = END_TIME_ONLY;
      tt->enum_def.fields[3].name = tdrpStrDup("SPECIFY_FILE_NAME");
      tt->enum_def.fields[3].val = SPECIFY_FILE_NAME;
    tt->single_val.e = START_AND_END_TIMES;
    tt++;
    
    // Parameter 'output_filename'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_filename");
    tt->descr = tdrpStrDup("Name of output file.");
    tt->help = tdrpStrDup("Applies only if output_filename_mode is SPECIFY_FILE_NAME. File of this name will be written to output_dir.");
    tt->val_offset = (char *) &output_filename - &_start_;
    tt->single_val.s = tdrpStrDup("cfradial.test.nc");
    tt++;
    
    // Parameter 'append_day_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_day_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the day directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_day_dir_to_output_dir - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'append_year_dir_to_output_dir'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("append_year_dir_to_output_dir");
    tt->descr = tdrpStrDup("Add the year directory to the output directory.");
    tt->help = tdrpStrDup("Path will be output_dir/yyyy/yyyymmdd/filename.");
    tt->val_offset = (char *) &append_year_dir_to_output_dir - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_individual_sweeps'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_individual_sweeps");
    tt->descr = tdrpStrDup("Option to write out individual sweeps if appropriate.");
    tt->help = tdrpStrDup("If true, the volume is split into individual sweeps for writing. Applies to CfRadial format. This is always true for DORADE format files.");
    tt->val_offset = (char *) &write_individual_sweeps - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
