///////////////////////////////////////////////////////
//  parameter definitions for Dsr2Radx
//
//  Mike Dixon, RAP, NCAR
//  P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
//  Feb 2011
//
////////////////////////////////////////////////////////

commentdef {
  p_header = "Dsr2Radx program";
  p_text = "Dsr2Radx reads radial radar data from an input FMQ, and writes the data to files in formats supported by Radx.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;
  
paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef int {
  p_default = 60;
  p_descr = "Interval at which regsitration occurs with procmap (secs).";
  p_help = "The auto_restart script expects registration at this interval. If registration does not occur in twice this time, the process is killed and restarted. Therefore, if writing the output files takes longer than 60 seconds because the files are large and compressed, then increase this interval, to say 120 secs.";
} procmap_register_interval;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_descr = "Input URL for DsRadar data via FMQ";
  p_default = "fmqp:://localhost::./fmq.dsRadar";
} input_fmq_url;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to seek to the end of the input FMQ.";
  p_help = "If TRUE, the program will seek to the end of the fmq and only read in new data. If FALSE, it will start reading from the beginning of the FMQ.";
} seek_to_end_of_input;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use the scan_mode in the input data.";
  p_help = "The scan_mode indicates whether the scan is of type SURVEILLANCE/PPI RHI. The scan_mode is optionally included in the ray data. If available, it makes sense to use the scan mode to determine whether to save the data as a SURVEILLANCE/PPI or RHI. Dsr2Radx treats SURVEILLANCE and PPI data in the same manner. However, RHIs are saved in a different way. If the input scan_mode is NOT used, Dsr2Radx uses the antenna angle changes to determine whether the scan is in PPI or RHI mode.";
} use_input_scan_mode;

commentdef {
  p_header = "RADAR PARAMETERS";
}

paramdef string {
  p_default = "";
  p_descr = "Name of radar site";
  p_help = "Stored in netCDF file.";
} site_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override radar name.";
  p_help = "If TRUE, we will use the parameter 'radar_name' instead of the name in the data stream.";
} override_radar_name;

paramdef string {
  p_default = "Unknown";
  p_descr = "Name of radar site - if overridden";
} radar_name;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to override radar location.";
  p_help = "If TRUE, the program will use location specified in the 'radar_location' parameter.";
} override_radar_location;

typedef struct {
  double latitudeDeg;
  double longitudeDeg;
  double altitudeKm;
} radar_location_t;

paramdef struct radar_location_t {
  p_default = { 0.0, 0.0, 0.0 };
  p_descr = "Radar location if override is set true.";
  p_help = "The radar_location is only used if 'override_radar_location' is set true. Otherwise the information in the input data stream is used. Note that the altitude is in meters MSL.";
} radar_location;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to apply an offset to the azimuth values.";
  p_help = "If TRUE, this offset will be ADDED to the measured azimuth angles. This is useful, for example, in the case of a mobile platform which is not set up oriented to true north. Suppose you have a truck (like the DOWs) which is oriented off true north. Then if you add in the truck HEADING relative to true north, the measured azimuth angles will be adjusted by the heading, to give azimuth relative to TRUE north. The offset is applied as the rays are read in - i.e. all other operations use the updated azimuths.";
} apply_azimuth_offset;

paramdef double {
  p_default = 0;
  p_descr = "Azimuth offset (degrees).";
  p_help = "See 'apply_azimuth_offset'. This value will be ADDED to the measured azimuths.";
} azimuth_offset;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to apply an offset to the elevation values.";
  p_help = "If TRUE, this offset will be ADDED to the measured elevation angles. This is useful to correct for a systematic bias in measured elevation angles. The offset is applied as the rays are read in - i.e. all other operations use the updated elevations.";
} apply_elevation_offset;

paramdef double {
  p_default = 0;
  p_descr = "Elevation offset (degrees).";
  p_help = "See 'apply_elevation_offset'. This value will be ADDED to the measured elevations.";
} elevation_offset;

commentdef {
  p_header = "OPTION TO OVERRIDE INSTRUMENT TYPE, PLATFORM TYPE AND PRIMARY AXIS.";
  p_text = "This applies to read operations.";
}

typedef enum {
  INSTRUMENT_RADAR = 0,
  INSTRUMENT_LIDAR = 1
} instrument_type_t;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override instrument type on read.";
  p_help = "If true, the file will be read in, the instrument type will be changed, and then any post-read processing will be performed.";
} override_instrument_type;

paramdef enum instrument_type_t {
  p_default = INSTRUMENT_RADAR;
  p_descr = "Specify the instrument type. See override_instrument_type.";
} instrument_type;

typedef enum {
  PLATFORM_FIXED = 1,
  PLATFORM_VEHICLE = 2,
  PLATFORM_SHIP = 3,
  PLATFORM_AIRCRAFT_FORE = 5,
  PLATFORM_AIRCRAFT_AFT = 6,
  PLATFORM_AIRCRAFT_TAIL = 7,
  PLATFORM_AIRCRAFT_BELLY = 8,
  PLATFORM_AIRCRAFT_ROOF = 9,
  PLATFORM_AIRCRAFT_NOSE = 10,
  PLATFORM_SATELLITE_ORBIT = 11,
  PLATFORM_SATELLITE_GEOSTAT = 12
} platform_type_t;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override platform type on read. If true, the file will be read in, the platform type will be changed, and then any post-read processing will be performed.";
  p_help =
    "\tPLATFORM_FIXED  - radar is in a fixed location\n"
    "\tPLATFORM_VEHICLE -  radar is mounted on a land vehicle\n"
    "\tPLATFORM_SHIP - radar is mounted on a ship\n"
    "\tPLATFORM_AIRCRAFT_FORE - forward-looking on aircraft\n"
    "\tPLATFORM_AIRCRAFT_AFT - backward-looking on aircraft\n"
    "\tPLATFORM_AIRCRAFT_TAIL - tail - e.g. ELDORA\n"
    "\tPLATFORM_AIRCRAFT_BELLY -  belly radar on aircraft\n"
    "\tPLATFORM_AIRCRAFT_ROOF - roof radar on aircraft\n"
    "\tPLATFORM_AIRCRAFT_NOSE - radar in nose radome on aircraft\n"
    "\tPLATFORM_SATELLITE_ORBIT - orbiting satellite\n"
    "\tPLATFORM_SATELLITE_GEOSTAT - geostationary satellite\n";
} override_platform_type;

paramdef enum platform_type_t {
  p_default = PLATFORM_FIXED;
  p_descr = "Platform type.";
  p_help = "See override_platform_type.";
} platform_type;

typedef enum {
  PRIMARY_AXIS_Z = 0, ///< vertical
  PRIMARY_AXIS_Y = 1, ///< longitudinal axis of platform
  PRIMARY_AXIS_X = 2, ///< lateral axis of platform
  PRIMARY_AXIS_Z_PRIME = 3, ///< inverted vertical
  PRIMARY_AXIS_Y_PRIME = 4, ///< ELDORA, HRD tail
  PRIMARY_AXIS_X_PRIME = 5  ///< translated lateral
} primary_axis_t;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override primary axis on read. If true, the file will be read in, the primary axis will be changed, and then any post-read processing will be performed.";
  p_help =
    "\tPRIMARY_AXIS_Z - vertical\n"
    "\tPRIMARY_AXIS_Y - longitudinal axis of platform\n"
    "\tPRIMARY_AXIS_X - lateral axis of platform\n"
    "\tPRIMARY_AXIS_Z_PRIME - inverted vertical\n"
    "\tPRIMARY_AXIS_Y_PRIME - ELDORA, HRD tail\n"
    "\tPRIMARY_AXIS_X_PRIME - translated lateral\n";
} override_primary_axis;

paramdef enum primary_axis_t {
  p_default = PRIMARY_AXIS_Z;
  p_descr = "Platform type.";
  p_help = "See override_primary_axis.";
} primary_axis;

paramdef boolean {
  p_default = false;
  p_descr = "Option to apply the georeference info for moving platforms.";
  p_help = "For moving platforms, measured georeference information is sometimes available. If this is set to true, the georeference data is applied and appropriate corrections made. If possible, Earth-centric azimuth and elevation angles will be computed.";
} apply_georeference_corrections;

commentdef {
  p_header = "CENSORING OUTPUT FIELDS";
  p_text = "You have the option of censoring the output data fields - i.e. setting the fields to missing values - at gates which meet certain criteria. If this is done correctly, it allows you to preserve the valid data and discard the noise, thereby improving compression. This leads to smaller data files.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Apply censoring based on field values and thresholds.";
  p_help = "If TRUE, censoring will be performed. See 'censoring_fields' for details on how the censoring is applied.";
} apply_censoring;

typedef enum {
  LOGICAL_AND, LOGICAL_OR
} logical_t;

typedef struct {
  string name;
  double min_valid_value;
  double max_valid_value;
  logical_t combination_method;
} censoring_field_t;

paramdef struct censoring_field_t {
  p_default = {
    { "SNR", 0.0, 1000.0, LOGICAL_OR },
    { "NCP", 0.15, 1000.0, LOGICAL_OR }
  };
  p_descr = "Fields to be used for censoring.";
  p_help = "Specify the fields to be used to determine whether a gate should be censored. The name refers to the input data fields. Valid field values lie in the range from min_valid_value to max_valid_value inclusive. If the value of a field at a gate lies within this range, it is considered valid. Each specified field is examined at each gate, and is flagged as valid if its value lies in the valid range. These field flags are then combined as follows: first, all of the LOGICAL_OR flags are combined, yielding a single combined_or flag which is true if any of the LOGICAL_OR fields is true. The combined_or flag is then combined with all of the LOGICAL_AND fields, yielding a true value only if the combined_or flag and the LOGICAL_AND fields are all true. If this final flag is true, then the data at the gate is regarded as valid and is retained. If the final flag is false, the data at the gate is censored, and all of the fields at the gate are set to missing.";
} censoring_fields[];
  
paramdef int {
  p_default = 3;
  p_descr = "Minimum valid run of non-censored gates.";
  p_help = "Only active if set to 2 or greater. A check is made to remove short runs of noise. Looking along the radial, we compute the number of contiguous gates (a 'run') with uncensored data. For the gates in this run to be accepted the length of the run must exceed censoring_min_valid_run. If the number of gates in a run is less than this, then all gates in the run are censored.";
} censoring_min_valid_run;

commentdef {
  p_header = "FILTER DATA BASED ON GEOMETRY";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter data based on gate spacing.";
  p_help = "If TRUE, the program will use only ray data which matches the 'keep_gate_spacing' parameter.";
} filter_using_gate_spacing;

paramdef double {
  p_default = 0.25;
  p_descr = "Desired radar gate spacing (km).";
  p_help = "The specified gate spacing is only used if 'filter_gate_spacing' is set true. Otherwise all gate spacings in the input data stream are used.";
} specified_gate_spacing;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter data based on start range.";
  p_help = "If TRUE, the program will use only ray data which matches the 'keep _start_range' parameter.";
} filter_using_start_range;

paramdef double {
  p_default = 0.0;
  p_descr = "Desired radar start range (km).";
  p_help = "The specified start range is only used if 'filter_start_range' is set true. Otherwise all start ranges in the input data stream are used.";
} specified_start_range;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter data based on elevation angle.";
  p_help = "If TRUE, the program will use only ray data with elevations between the given limits.";
} filter_using_elev;

paramdef double {
  p_default = -10.0;
  p_descr = "Minimum valid elevation for rays (deg).";
  p_help = "If the elevation is below this value, the ray is ignored. Applies only if filter_using_elev is true.";
} specified_min_elev;

paramdef double {
  p_default = 90.0;
  p_descr = "Maximum valid elevation for rays (deg).";
  p_help = "If the elevation is above this value, the ray is ignored. Applies only if filter_using_elev is true.";
} specified_max_elev;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter data based on the sweep number.";
  p_help = "If TRUE, the program will use only ray data with a sweep numbers between the given limits.";
} filter_using_sweep_number;

paramdef int {
  p_default = 0;
  p_descr = "Minimum valid sweep number for rays.";
  p_help = "If the sweep number is below this value, the ray is ignored. Applies only if filter_using_sweep_number is true.";
} specified_min_sweep_number;

paramdef int {
  p_default = 999;
  p_descr = "Maximum valid sweep number for rays.";
  p_help = "If the sweep number is above this value, the ray is ignored. Applies only if filter_using_sweep_number is true.";
} specified_max_sweep_number;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to filter data based on sweep numbers in the list.";
  p_help = "If TRUE, the program will use only ray data with a sweep number that is in the specified list.";
} filter_using_sweep_number_list;

paramdef int {
  p_default = { 0, 1, 2 };
  p_descr = "List of valid sweep numbers.";
  p_help = "If the sweep number is not in this list, the ray is ignored. Applies only if filter_using_sweep_number_list is true.";
} specified_sweep_number_list[];

commentdef {
  p_header = "FILTER DATA BASED ON ANTENNA or SCAN STATE";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to not ingest data when the antenna is stationary.";
  p_help = "If true, rays will only be stored if the antenna is moving. If the antenna stops, rays will be ignored.";
} filter_antenna_stationary;

paramdef double {
  p_default = 0.05;
  p_descr = "Minimun angle change ray-to-ray for antenna to be moving (deg).";
  p_help = "For the antenna to be considered moving. the antenna much move by this amount from one ray to the next. The angle check is made in both azimuth and elevation.";
} min_angle_change_for_moving_antenna;

paramdef boolean {
  p_default = false;
  p_descr = "Option to clear the transition flag on all rays.";
  p_help = "If true, for all rays on which the transition flag is set, this flag will be removed, so that all rays are considered to be NOT in transition.";
} clear_transition_flag_on_all_rays;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to ignore rays for which the transition flag is set.";
  p_help = "If TRUE, the program will filter out rays which are computed when the antenna is moving from one sweep to the next, or one volume to the next.";
} filter_antenna_transitions;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter rays when scan mode is IDLE.";
  p_help = "If TRUE, the program will filter out all rays for which the scan mode is IDLE.";
} filter_when_scan_idle;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to filter rays when scan mode is POINT.";
  p_help = "If TRUE, the program will filter out all rays for which the scan mode is POINTING.";
} filter_when_scan_pointing;

commentdef {
  p_header = "OUTPUT GATE GEOMETRY";
  p_text = "You can only choose one range geometry remapping option. If none are picked, all rays which do not match the predominant geometry will be discarded.";
}

paramdef boolean {
  p_default = true;
  p_descr = "Option to convert all rays to predominant geometry.";
  p_help = "If true, all rays will be converted to the predominant gate geometry - i.e. start_range and gate_spacing.";
} convert_to_predominant_gate_geometry;

paramdef boolean {
  p_default = false;
  p_descr = "Option to convert all rays to finest range gate spacing.";
  p_help = "If true, all rays will be converted to the finest gate spacing.";
} convert_to_finest_gate_geometry;

paramdef boolean {
  p_default = false;
  p_descr = "Option to convert all rays to a specified gate geometry.";
  p_help = "See 'specified_start_range_k', 'specified_gate_spacing_km' and 'interpolate_to_specified_gate_geometry'.";
} convert_to_specified_output_gate_geometry;

paramdef double {
  p_default = 0.1;
  p_descr = "Start range for specified remapping (km).";
  p_help = "See 'convert_to_specified_gate_geometry'.";
} output_start_range_km;

paramdef double {
  p_default = 0.2;
  p_descr = "Gate spacing for specified remapping (km).";
  p_help = "See 'convert_to_specified_gate_geometry'.";
} output_gate_spacing_km;

paramdef boolean {
  p_default = false;
  p_descr = "Option to use interpolation when converting to the specified gate geometry.";
  p_help = "If false, nearest neighbor mapping is used. See 'convert_to_specified_gate_geometry'.";
} interpolate_to_output_gate_geometry;

commentdef {
  p_header = "COMPUTING THE SWEEP ANGLE HISTOGRAM";
  p_text = "Normally we use the sweep numbers in the input data to logically separate the sweeps. Optionally, however, if the scan information is not available in the data, we can use a histogram technique to determine the sweep information instead.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use histogram to determine sweep numbers.";
  p_help = "If FALSE, the sweep numbers in the ray data will be used directly to group the rays into sweeps. If FALSE, the antenna angles will be analysed using a histogram technique to determine the sweep numbers.";
} find_sweep_numbers_using_histogram;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to use target angles instead of actual angles to compute the histogram.";
  p_help = "If TRUE, the target angles will be used to compute the histograms. If FALSE, the measured angles will be used.";
} use_target_angles_for_hist;

paramdef double {
  p_default = 0.1;
  p_descr = "Resolution of histogram (deg).";
  p_help = "The angle data is binned at this resolution. If the scan strategy has angles very close together you may need to use a fine resolution.";
} hist_angle_resolution;

paramdef int {
  p_min = 1;
  p_default = 3;
  p_descr = "The width of the search in looking for peaks in the histogram.";
  p_help = "When looking for peaks, the program searches by this number of bins on either side of the search bin. For example, if the hist_angle_resolution is 0.1 and the hist_angle_search_width is 3, the program will search 3 bins, or 0.3 degrees, on either side of the search bin. It looks for a peak with values equal to or below the peak in the adjacent bins and less than the peak in bins further out.";
} hist_search_width;

commentdef {
  p_header = "CROPPING ABOVE A GIVEN HEIGHT";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to crop all gates above a selectted maximum height.";
  p_help = "Normally all gates are processed. If this is set to true, gates above the selected height will be removed from the processing.";
} crop_above_max_height;

paramdef double {
  p_default = 25.0;
  p_descr = "Height MSL for cropping (km).";
  p_help = "Only gates below this height will be processed.";
} max_height_km_msl;

commentdef {
  p_header = "REMOVING TEST PULSE";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to remove the test pulse data.";
  p_help = "If true, the test pulse data will be removed from the end of the ray. The test pulse data generally lies in the last few gates in the ray. If true, the number of gates will be reduced by 'ngates_test_pulse'.";
} remove_test_pulse;

paramdef int {
  p_default = 20;
  p_descr = "Number of gates to remove to get rid of test pulse.";
  p_help = "See 'remove_test_pulse'.";
} ngates_test_pulse;

commentdef {
  p_header = "CHECKING SWEEP DATA";
  p_text = "Checking whether sweeps should be included.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to check the number of rays in a sweep.";
  p_help = "If TRUE, a sweep is only considered valid if the number of rays exceeds 'min_rays_in_sweep'.";
} check_min_rays_in_sweep;

paramdef int {
  p_default = 180;
  p_descr = "The min number of rays for a sweep to be valid.";
  p_help = "See 'check_min_rays_in_sweep'.";
} min_rays_in_sweep;

commentdef {
  p_header = "COMPUTING FIXED ANGLES FROM RAYS";
  p_text = "NOTE: if the antenna control system does not point the antenna correctly, there will be an offset between the fixed (commanded) angles and the measured antenna angles. This option allows you to re-compute the fixed angles so that they are derived from the measured angles.";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to recompute the fixed angles from the measured angles for PPI sweeps - i.e. surveillance and sector mode.";
  p_help = "See NOTE above.";
} compute_ppi_fixed_angles_from_measured_elevation;

paramdef boolean {
  p_default = false;
  p_descr = "Option to recompute the fixed angles from the measured angles for RHI sweeps.";
  p_help = "See NOTE above.";
} compute_rhi_fixed_angles_from_measured_azimuth;

paramdef boolean {
  p_default = true;
  p_descr = "Option to use mean to compute the fixed angles. This is the default.";
  p_help = "If false, uses the median.";
} use_mean_to_compute_fixed_angles;

commentdef {
  p_header = "INCREMENTING SWEEP NUMBERS BASED ON MODE CHANGES";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to increment the sweep number on a ray when the polarization mode changes.";
  p_help = "This operation is performed before writing the data out. We search through the rays, and if a polarization mode change occurs in the middle of a sweep, the sweep number is incremented to break up the sweep into multiple parts.";
} increment_sweep_num_when_pol_mode_changes;

paramdef boolean {
  p_default = false;
  p_descr = "Option to increment the sweep number on a ray when the prt mode changes.";
  p_help = "This operation is performed before writing the data out. We search through the rays, and if a prt mode change occurs in the middle of a sweep, the sweep number is incremented to break up the sweep into multiple parts.";
} increment_sweep_num_when_prt_mode_changes;

commentdef {
  p_header = "OPTION TO ADJUST SWEEP LIMITS USING FIXED AND MEASURED ANGLES";
  p_text = "Sometimes the transitions from one fixed angle to another are not accurately described by the scan flags, and as a result rays are not correctly assigned to the sweeps. This option goes through the volume in ray order, and adjusts the way rays are associated with each sweep. It does this by comparing the actual angle with the fixed angle, and minimizes the angular difference at the transition from one sweep to the next.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Adjust the limits of sweeps in surveillance mode.";
  p_help = "We compare the actual angle with the fixed angle, and minimize the angular difference at the transition from one sweep to the next.";
} adjust_sur_sweep_limits_using_angles;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Adjust the limits of sweeps in sector mode.";
  p_help = "We compare the actual angle with the fixed angle, and minimize the angular difference at the transition from one sweep to the next.";
} adjust_sector_sweep_limits_using_angles;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Adjust the limits of sweeps in RHI mode.";
  p_help = "We compare the actual angle with the fixed angle, and minimize the angular difference at the transition from one sweep to the next.";
} adjust_rhi_sweep_limits_using_angles;

commentdef {
  p_header = "OPTION TO MAKE SURVEILLANCE SWEEP TRANSITIONS OCCUR AT A SPECIFIED AZIMUTH";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Adjust the limits of surveillance sweeps, changing the sweep number when the azimuth crosses the specified value.";
  p_help = "Sometimes the transitions from one fixed angle to another are not accurately described by the scan flags, and as a result rays are not correctly assigned to the sweeps. This option goes through a surveillance volume in ray order, and adjusts the way rays are associated with each sweep. It forces a change in sweep when the azimuth transitions across 'sur_sweep_transitions_azimuth_deg'.\n\nNOTE: this applies in surveillance mode only, and will override 'adjust_sur_sweep_limits_using_angles' if both are set to TRUE. It has no effect on sweeps from RHI or SECTOR modes.";
} force_sur_sweep_transitions_at_fixed_azimuth;

paramdef double {
  p_default = 0.0;
  p_descr = "Azimuth to be used for forcing surveillance sweep transitions (deg).";
  p_help = "See 'adjust_sur_sweep_limits_to_fixed_azimuth'. Any azimuth_offset will be applied before this check.";
} sur_sweep_transitions_azimuth_deg;

commentdef {
  p_header = "TRIM SURVEILLANCE SWEEPS TO SPAN ONLY 360 DEG";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to trip surveillance sweeps so that they only cover 360 degrees.";
  p_help = "Some sweeps will have rays which cover more than a 360-degree rotation. Often these include antenna transitions. If this is set to true, rays are trimmed off either end of the sweep to limit the coverage to 360 degrees. The median elevation angle is computed and the end ray which deviates from the median in elevation is trimmed first.";
} trim_surveillance_sweeps_to_360deg;

commentdef {
  p_header = "DETERMINING END OF VOL";
}

typedef enum {
  END_OF_VOL_FLAG,
  CHANGE_IN_VOL_NUM,
  CHANGE_IN_SWEEP_NUM,
  EVERY_360_DEG,
  LAST_SWEEP_IN_VOL,
  AUTOMATIC,
  ELAPSED_TIME
} end_of_vol_decision_t;
  
paramdef enum end_of_vol_decision_t {
  p_default = END_OF_VOL_FLAG;
  p_descr = "Decision type for end-of-volume.";
  p_help = "\nEND_OF_VOL_FLAG: the end-of-volume flag in the data will be used to trigger the end of volume.\n\nCHANGE_IN_VOL_NUM: an end of volume will be assumed when the volume number changes from one ray to the next.\n\nCHANGE_IN_SWEEP_NUM: each sweep will be written out as a separate volume.\n\nEVERY_360_DEG: the volume will end after every 360 degree sweep. The azimuth at which the vol changes is specified by az_for_end_of_vol_360.\n\nLAST_SWEEP_IN_VOL: the end of the sweep number given by 'last_sweep_in_vol' will be used  to trigger the end-of-volume.\n\nAUTOMATIC: end-of-volume condition will be determined from the antenna-angle information.\n\nELAPSED_TIME: an end-of-volume will be triggered after 'nsecs_per_volume' seconds.";
} end_of_vol_decision;

paramdef int {
  p_descr = "The sweep number used to end the volume.";
  p_help = "Only applies if 'end_of_vol_decision' is set to LAST_SWEEP_IN_VOL.";
  p_default = 0;
} last_sweep_in_vol;

paramdef double {
  p_descr = "Azimuth at which the volume changes.";
  p_help = "An end-of-vol is triggered every time the antenna moves across this azimuth.";
  p_default = 0;
} az_for_end_of_vol_360;

paramdef boolean {
  p_default = false;
  p_descr = "Write end of vol event when data stops.";
  p_descr = "This will be written if no data arrives for a certain period of time.";
} write_end_of_vol_when_data_stops;

paramdef int {
  p_default = 5;
  p_descr = "Number of secs before writing end of vol.";
  p_help = "See 'write_end_of_vol_when_data_stops'";
} nsecs_no_data_for_end_of_vol;

paramdef int {
  p_default = 60;
  p_descr = "Number of secs in a volume.";
  p_help = "Applies to ELAPSED_TIME mode - see 'end_of_volume_decision'";
} nsecs_per_volume;

paramdef int {
  p_default = 1;
  p_descr = "The minimum number of rays in a volume.";
  p_help = "This filters out small unwanted bits of data between genuine volumes.";
} min_rays_in_vol;

paramdef int {
  p_default = 20000;
  p_descr = "The maximum number of rays in a volume.";
  p_help = "This prevents memory from filling up if no end-of-volume is found.";
} max_rays_in_vol;

commentdef {
  p_header = "AUTOMATIC END-OF-VOLUME DETECTION";
  p_text = "These parameters are used if end_of_volume_decision is set to AUTOMATIC. This assumes a simple bottom-up or top-down scan strategy. No attempt will be made to search for RHIs, or other complicattions in the SCAN strategy.";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to set the end of vol flag based on change in elevation angle.";
  p_help = "If true, the program will look for changes in elevation angle to compute the end of volume. Only this test, and the test for prf change, will be used to identify the end of volume condition.";
} set_end_of_vol_from_elev_change;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Flag to indicate that elevation angles increase in the volume.";
  p_help = "If the volume starts at the top, i.e. elevations decrease during the volume, set this to FALSE.";
} vol_starts_at_bottom;

paramdef double {
  p_default = 1.5;
  p_min = 0.1;
  p_descr = "Change in elevation which triggers and end of volume.";
  p_help = "If the elevation angle changes by this amount, and end of volume flag will be set.";
} elev_change_for_end_of_vol;

paramdef int {
  p_default = 16;
  p_descr = "Number of rays in history list.";
  p_help = "This is the number of rays stored in the history list. The list is used for determining the status of the antenna. The antenna algorithm checks o see if either the elevation angle is stable (PPI mode) or the azimuth angle is stable (RHI mode). The el_accuracy and az_accuracy parameters are used to detect whether el or az are stable.";
} nrays_history;

paramdef double {
  p_default = 0.25;
  p_descr = "Accuracy of antenna controller in elevation (deg).";
  p_help = "Used to determine if antenna is stationary in elevation, i.e. is it in PPI mode? If the cumulative elevation change during the history period is less than this value, the antenna is assumed to be in PPI mode.";
} el_accuracy;

paramdef double {
  p_default = 0.25;
  p_descr = "Accuracy of antenna controller in azimuth (deg).";
  p_help = "Used to determine if antenna is stationary in azimuth, i.e. is it in RHI mode? If the cumulative azimuth change during the history period is less than this value, the antenna is assumed to be in RHI mode.";
} az_accuracy;

paramdef double {
  p_default = 4.0;
  p_descr = "Min azimuth change for PPI (deg).";
  p_help = "For a valid PPI, the azimuth must change by at least this amount during nrays_history, while the elevation is not changing.";
} min_az_change_ppi;

paramdef double {
  p_default = 4.0;
  p_descr = "Min elevation change for RHI (deg).";
  p_help = "For a valid RHI, the elevation must change by at least this amount during nrays_history, while the azimuth is not changing.";
} min_el_change_rhi;

paramdef int {
  p_default = 540;
  p_descr = "Maximum azimuth change per sweep (deg).";
  p_help = "If the sweep elevation has not changed by the time the azimuth has changed by this number of degrees, an end-of-volume condition is triggered. This is used to handle the single-elevation surveillance case in which the antenna scans in PPI at a single elevation angle."; 
} max_az_change_per_sweep;

paramdef int {
  p_default = 180;
  p_descr = "Min number of rays per PPI volume.";
  p_help = "Used to prevent end-of-volume conditions being determined during antenna transition to the start of the next volume.";
} min_rays_per_ppi_vol;

paramdef int {
  p_default = 30;
  p_descr = "Min number of rays per RHI volume.";
  p_help = "Used to prevent end-of-volume conditions being determined during antenna transition to the start of the next volume.";
} min_rays_per_rhi_vol;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Flag for debugging auto end-of-vol detection.";
  p_help = "If set, messages will be printed to stderr on how the auto-detection algorithm is making decisions.";
} debug_auto_detection;

commentdef {
  p_header = "OUTPUT FIELDS";
}

typedef enum {
  OUTPUT_FLOAT, OUTPUT_SHORT, OUTPUT_BYTE
} output_encoding_t;
  
typedef struct {
  string dsr_name;
  string output_name;
  string long_name;
  string standard_name;
  string output_units;
  output_encoding_t output_encoding;
} output_field_t;

paramdef struct output_field_t {
  p_default = {
    {"DBZ", "DBZ", "", "", "dBZ", OUTPUT_SHORT },
    {"VEL", "VEL", "", "", "m/s", OUTPUT_SHORT }
  };
  p_descr = "Array of output fields.";
  p_help = "The program will only output these fields. The dsr_name is the field name in the dsr data. If the output_name is an empty string, the output name will be set to the dsr_name. If output_name is non-empty, this will be used. Likewise for the units. long_name and standard_name are netCDF conventions. Set the output encoding type to select the resolution of the output data.";
} output_fields[];

commentdef {
  p_header = "OUTPUT DATA SETS";
}

typedef enum {
  OUTPUT_FORMAT_CFRADIAL,
  OUTPUT_FORMAT_FORAY,
  OUTPUT_FORMAT_DORADE,
  OUTPUT_FORMAT_UF
} output_format_t;

typedef struct {
  string output_dir;
  output_format_t format;
} output_data_set_t;

paramdef struct output_data_set_t {
  p_default = {
    {
      output_dir = "/tmp/data/cfradial",
      format = OUTPUT_FORMAT_CFRADIAL
    }
    ,
    {
      output_dir = "/tmp/data/dorade",
      format = OUTPUT_FORMAT_DORADE
    }
    ,
    {
      output_dir = "/tmp/data/uf",
      format = OUTPUT_FORMAT_UF
    }
  };
  p_descr = "Detais for output data sets.";
  p_help = "Multiple formats may be output from a single instance of this application.\n\n\t output_dir: top level directory for data set.\n\t format: output file format.\n\t name_from_end_time: flag to indicate whether to compute the name from the start or end time of the volume. For DORADE files, the start time is always used, since this is the convention for DORADE.";
} output_data_set[];

typedef enum {
  START_AND_END_TIMES,
  START_TIME_ONLY,
  END_TIME_ONLY
} filename_mode_t;

paramdef enum filename_mode_t {
  p_default = START_AND_END_TIMES;
  p_descr = "Mode for computing output file name.";
  p_help = "START_AND_END_TIMES: include both start and end times in file name. START_TIME_ONLY: include only start time in file name. END_TIME_ONLY: include only end time in file name.";
} output_filename_mode;

commentdef {
  p_header = "APPENDING YEAR AND/OR DAY DIRS TO OUTPUT DIR";
};

paramdef boolean {
  p_default = true;
  p_descr = "Add the day directory to the output directory.";
  p_help = "Path will be dir/yyyymmdd/filename.";
} append_day_dir_to_output_dir;

paramdef boolean {
  p_default = false;
  p_descr = "Add the year directory to the output directory.";
  p_help = "Path will be dir/yyyy/yyyymmdd/filename.";
} append_year_dir_to_output_dir;

commentdef {
  p_header = "SEPARATING VOLUMES BY TYPE";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to separate the files based on scan type.";
  p_help = "Sometimes a scan strategy will switch between surveillance scans, sector scans, rhi scans, vertically-pointing scans and sun scans. If true, the files will be separated into subdirectories based on scan type.";
} separate_output_dirs_by_scan_type;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out files for surveillance mode.";
  p_help = "Only applies if 'separate_output_dirs_by_scan_type' is true.";
} write_surveillance_files;

paramdef string {
  p_default = "sur";
  p_descr = "The directory path for surveillance scan files.";
  p_help = "See 'separate_output_dirs_by_scan_type'. If the scan mode is surveillance, this subdirectory will be created under the ouput dir.";
} surveillance_subdir;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out files for sector mode.";
  p_help = "Only applies if 'separate_output_dirs_by_scan_type' is true.";
} write_sector_files;

paramdef string {
  p_default = "sec";
  p_descr = "The directory path for sector scan files.";
  p_help = "See 'separate_output_dirs_by_scan_type'. If the scan mode is sector, this subdirectory will be created under the ouput dir.";
} sector_subdir;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out files for rhi mode.";
  p_help = "Only applies if 'separate_output_dirs_by_scan_type' is true.";
} write_rhi_files;

paramdef string {
  p_default = "rhi";
  p_descr = "The directory path for rhi files.";
  p_help = "See 'separate_output_dirs_by_scan_type'. If the scan mode is rhi, this subdirectory will be created under the ouput dir.";
} rhi_subdir;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out files for vertical pointing mode.";
  p_help = "Only applies if 'separate_output_dirs_by_scan_type' is true.";
} write_vert_files;

paramdef string {
  p_default = "vert";
  p_descr = "The directory path for vert scan files.";
  p_help = "See 'separate_output_dirs_by_scan_type'. If the scan mode is vert, this subdirectory will be created under the ouput dir.";
} vert_subdir;

paramdef double {
  p_default = 85;
  p_descr = "The min elevation angle for vertically-pointing operations (deg).";
  p_help = "This is the elevation threshold for vertically-pointing operations. If the specified fraction of the data has an elevation angle in excess of this angle, the volume will be considered to be from vertically-pointing operations.";
} min_elevation_for_vert_files;

paramdef double {
  p_default = 0.9;
  p_descr = "The min fraction of data with elevations in excess of the min elevation.";
  p_help = "If the fraction of the data with elevation angles above the specified min_elevation exceeds this fraction,  the volume will be considered to be from vertically-pointing operations.";
} min_vert_fraction_for_vert_files;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write out files for sun scan mode.";
  p_help = "Only applies if 'separate_output_dirs_by_scan_type' is true.";
} write_sun_files;

paramdef string {
  p_default = "sun";
  p_descr = "The directory path for sun scan files.";
  p_help = "See 'separate_output_dirs_by_scan_type'. If the scan mode is sun, this subdirectory will be created under the ouput dir.";
} sun_subdir;

paramdef string {
  p_default = "Solar";
  p_descr = "Optionally specify the scan name for the solar scan.";
  p_help = "If the scan name from the antenna controller matches this string, it will be assumed that this is a solar scan.";
} solar_scan_name;

commentdef {
  p_header = "OUTPUT FILE NAME OPTIONS";
};

paramdef string {
  p_default = "";
  p_descr = "Optional prefix for output filename.";
  p_help = "If empty, the standard prefix will be used.";
} output_filename_prefix;

paramdef boolean {
  p_default = true;
  p_descr = "Option to include the instrument name in the file name.";
  p_help = "Default is true. Only applies to CfRadial files. If true, the instrument name will be included just before the volume number in the output file name.";
} include_instrument_name_in_file_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to include the site name in the file name.";
  p_help = "Only applies to CfRadial files. If true, the site name will be included just before the volume number in the output file name.";
} include_site_name_in_file_name;

paramdef boolean {
  p_default = true;
  p_descr = "Option to include sub-seconds in date-time part of file name.";
  p_help = "Default is true. Only applies to CfRadial files. If true, the millisecs of the start and end time will be included in the file name.";
} include_subsecs_in_file_name;

paramdef boolean {
  p_default = true;
  p_descr = "Option to include the scan type in the file name.";
  p_help = "Default is true. Only applies to CfRadial files. If true, the scan type (SUR, SEC, RHI, VER etc) will be included in the file name.";
} include_scan_type_in_file_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to include the volume number in the file name.";
  p_help = "Default is false. Only applies to CfRadial files. If true, the volume number is included in the file name, preceded by '_v'.";
} include_vol_num_in_file_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to use a hyphen between date and time in filename.";
  p_help = "Default is false. Only applies to CfRadial files. Normally an underscore is used.";
} use_hyphen_in_file_name_datetime_part;

commentdef {
  p_header = "REGISTERING LATEST DATA INFO";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to write a master latest_data_info for separated scan types.";
  p_help = "If the files for different scan types (surveillance, sector, rhi, vert etc.) are written to separate subdirectories, you have the option of registering the latest_data_info to the master location - i.e. the output directory. This allows the system monitor to stay current, no matter which scan type is active.";
} write_master_ldata_info;

paramdef boolean {
  p_default = true;
  p_descr = "Option to write latest_data_info for each data set.";
  p_help = "Writes a latest_data_info file for each data set written, including the separate directories for surveillance, sector, rhi etc. as appropriate. If write_master_ldata_info is true, you may consider turning this off.";
} write_individual_ldata_info;

paramdef boolean {
  p_default = true;
  p_descr = "Option to register the latest_data_info with the data mapper.";
  p_help = "If true, contacts the DataMapper using TCP, to update the latest time for this data set.";
} register_with_data_mapper;

commentdef {
  p_header = "NETCDF STYLE";
  p_text = "Only applies to CfRadial format files.";
}

typedef enum {
  CLASSIC, OFFSET_64BIT, NETCDF4_CLASSIC, NETCDF4
} netcdf_style_t;

paramdef enum netcdf_style_t {
  p_default = NETCDF4;
  p_descr = "NetCDF style - if output_format is CFRADIAL";
  p_help = "netCDF classic format, netCDF 64-bit offset format, netCDF4 using HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls";
} netcdf_style;

commentdef {
  p_header = "OUTPUT BYTE-SWAPPING and COMPRESSION";
  p_text = "These parameters are applied as appropriate. Not all file formats require or support them.";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to leave data in native byte order, if appropriate.";
  p_help = "If false, data will be byte-swapped on output. Only applies to UF and Dorade file formats.";
} output_native_byte_order;

paramdef boolean {
  p_default = true;
  p_descr = "Option to compress data fields on output.";
  p_help = "Applies to CfRadial netCDF and Dorade.";
} output_compressed;

paramdef int {
  p_default = 4;
  p_min = 1;
  p_max = 9;
  p_descr = "Level of compression for output data.";
  p_help = "Valid range is 1 through 9. 1 gives lowest compression, 9 highest. Only applies to CfRadial netCDF file format.";
} output_compression_level;

commentdef {
  p_header = "OUTPUT DATA SET INFORMATION";
  p_text = "Will be stored in CfRadial files, and other formats to the extent supported by the format.";
}

paramdef string {
  p_default = "SPOL radar data";
  p_descr = "Title string for netCDF file.";
} ncf_title;

paramdef string {
  p_default = "EOL/NCAR";
  p_descr = "Institution string for netCDF file.";
} ncf_institution;

paramdef string {
  p_default = "";
  p_descr = "References string for netCDF file.";
} ncf_references;

paramdef string {
  p_default = "SPOL radar";
  p_descr = "Source string for netCDF file.";
} ncf_source;

paramdef string {
  p_default = "";
  p_descr = "History string for netCDF file.";
} ncf_history;

paramdef string {
  p_default = "";
  p_descr = "Comment string for netCDF file.";
} ncf_comment;

commentdef {
  p_header = "OPTION TO OVERRIDE MISSING VALUES";
  p_text = "Missing values are applicable to both metadata and field data. The default values should be satisfactory for most purposes. However, you can choose to override these if you are careful with the selected values.\n\nThe default values for metadata are:\n\tmissingMetaDouble = -9999.0\n\tmissingMetaFloat = -9999.0\n\tmissingMetaInt = -9999\n\tmissingMetaChar = -128\n\nThe default values for field data are:\n\tmissingFl64 = -9.0e33\n\tmissingFl32 = -9.0e33\n\tmissingSi32 = -2147483647\n\tmissingSi16 = -32768\n\tmissingSi08 = -128\n\n";
}

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the missing values for meta-data";
  p_help = "See following parameter options.";
} override_missing_metadata_values;

paramdef double {
  p_default = -9999.0;
  p_descr = "Missing value for metadata of type double.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_double;

paramdef float {
  p_default = -9999.0;
  p_descr = "Missing value for metadata of type float.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_float;

paramdef int {
  p_default = -9999;
  p_descr = "Missing value for metadata of type int.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_int;

paramdef int {
  p_default = -128;
  p_descr = "Missing value for metadata of type char.";
  p_help = "Only applies if override_missing_metadata_values is TRUE";
} missing_metadata_char;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the missing values for field data";
  p_help = "See following parameter options.";
} override_missing_field_values;

paramdef double {
  p_default = -9.0e33;
  p_descr = "Missing value for field data of type 64-bit float.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_fl64;

paramdef double {
  p_default = -9.0e33;
  p_descr = "Missing value for field data of type 32-bit float.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_fl32;

paramdef int {
  p_default = -2147483647;
  p_descr = "Missing value for field data of type 32-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si32;

paramdef int {
  p_default = -232768;
  p_descr = "Missing value for field data of type 16-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si16;

paramdef int {
  p_default = -128;
  p_descr = "Missing value for field data of type 8-bit integer.";
  p_help = "Only applies if override_missing_field_values is TRUE";
} missing_field_si08;

