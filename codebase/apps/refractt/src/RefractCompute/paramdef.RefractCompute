/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/**********************************************************
 * paramdef.Refract
 *
 * This file contains the TDRP parameter definitions for
 * Refract
 */


commentdef
{
  p_header = "Refract";
  p_text = "This program calculates the refractivity fields from the "
           "raw polar radar data.";
};

/***********************************************************************
 * Input data information
 */

commentdef
{
  p_header = "INPUT DATA PARAMETERS";
};

typedef enum
{
  QUALITY_FROM_WIDTH,
  QUALITY_FROM_CPA
} quality_source_t;

paramdef enum quality_source_t
{
  p_descr = "Which field to use when calculating the quality value.";
  p_help = "\tQUALITY_FROM_WIDTH - The quality field is calculated using "
           "a spectrum width field.\n"
           "\tQUALITY_FROM_CPA - The quality field is calculated using "
           "a CPA field.\n";
  p_default = QUALITY_FROM_WIDTH;
} quality_source;

paramdef string
{
  p_descr = "Name of field to use in the quality calculations.";
  p_help = "If quality_source is set to QUALITY_FROM_WIDTH then this should be "
           "a spectrum width field.\n"
           "If quality_source is set to QUALITY_FROM_CPA then this shoudl be a "
           "probability of clutter field. "
           "The probability of clutter field should range from 0.0 to 1.0 with "
           "0.0 indicating the gate definitely doesn't contain clutter and 1.0 "
           "indicating that the gate definitely is clutter.\n";
  p_default = "SPW";
} quality_field_name;

/***********************************************************************
 * Algorithm parameters.
 */

commentdef
{
  p_header = "ALGORITHM PARAMETERS";
};

paramdef string
{
  p_descr = "Reference file name";
  p_help = "With path, file containing calibration information.  Daytime";
  p_default = "refr_calib.mdv";
} ref_file_name_day;

paramdef string
{
  p_descr = "Reference file name";
  p_help = "With path, file containing calibration information.  Nighttime";
  p_default = "refr_calib.mdv";
} ref_file_name_night;

paramdef int
{
  p_descr = "Hour min second for start of night";
  p_default = {2, 40, 0};
} hms_night[3];

paramdef int
{
  p_descr = "Hour min second for start of day";
  p_default = {10, 15, 0};
} hms_day[3];

paramdef int
{
  p_descr = "Transition from day to night or night to day, with interpolation";
  p_help = "up to this number of minutes, the day/night interface is interpolated, for example if t = hms_night - x, then percent given to day is (x+delta)/(2*delta) and percent given to night is (delta-x)/(2*delta)   up to where x exceeds delta.";
  p_default = 0;
} day_night_transition_delta_minutes;

paramdef double
{
  p_descr = "Frequency in Hz";
  p_min = 5.0e8;
  p_max = 2.0e10;
  p_default = 2.89e9;
} frequency;

paramdef long
{
  p_descr = "Min range gate of ground echo";
  p_min = 1;
  p_default = 4;
} r_min;

paramdef double
{
  p_descr = "N smoothing side length";
  p_help = "Smooth N phases with square of 4-km side lengths";
  p_default = 4000.0;
} n_smoothing_side_len;

paramdef double
{
  p_descr = "DN smoothing side length";
  p_help = "Smooth DN dif. phases with square of 4-km side length";
  p_default = 4000.0;
} dn_smoothing_side_len;

paramdef double
{
  p_descr = "Minimum consistency";
  p_help = "Minimum consistency of phase to accept N (DN) measurement. "
           "HIgher means smaller coverage of (hopefully) better data.";
  p_min = 0.0;
  p_max = 1.0;
  p_default = 0.015;
} min_consistency;

paramdef boolean
{
  p_descr = "Flag indicating whether to do the relaxation stage";
  p_default = false;
} do_relax;

paramdef double
{
  p_descr = "Quality threshold";
  p_default = 0.9;
} quality_threshold;


paramdef boolean
{
  p_descr = "Threshold on SigmaN for N and DN";
  p_help = "Set to TRUE if you want to threshold N and DN using SigmaN values";
  p_default = FALSE;
} threshold_using_sigma_n;

paramdef double
{
  p_descr = "maximum sigmaN value when threshold_using_sigma_n = TRUE";
  p_help = "if threshold_using_sigma_n = TRUE and sigmaN > max_sigma_n, N and DN are set to missing.  If threshold_using_sigma_n = FALSE, this value is ignored";
  p_default = 30;
} max_sigma_n;
