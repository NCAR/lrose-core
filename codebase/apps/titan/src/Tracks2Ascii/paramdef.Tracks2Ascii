/*********************************************************
 * parameter definitions for Tracks2Ascii
 *
 * Mike Dixon, RAP, NCAR, Boulder, CO, USA, 80307-3000
 *
 * July 1998
 */

commentdef {
  p_header = "Program name: Tracks2Ascii";
  p_text = "Tracks2Ascii prints out storm and track data to stdout in columm ASCII format, suitable for use by spread-sheet, data-base or similar application. Storm properties are seleted using the TRACK_ENTRY option, while aggregate track propertes are selected using the COMPLETE_TRACK option.";
}

commentdef {
  p_header = "DEBUG AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "Test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef string {
  p_default = "$(RAP_DATA_DIR)/titan/storms";
  p_descr = "Directory path for input data.";
  p_help = "This is used if start and end times are specified on the command line. It is ignored if you specify a file list using -f on the command line.";
} input_dir;

typedef enum {
  COMPLETE_TRACK, TRACK_ENTRY, INITIAL_PROPS
} target_entity_t;

paramdef enum target_entity_t {
  p_default = COMPLETE_TRACK;
  p_descr = "Entity for which data is sought.";
  p_help = "COMPLETE_TRACK - properties for the whole track. Where more than one part exists at a time the properties are aggregated from the parts. TRACK_ENTRY - instantaneous storm and track properties for each part of the tracks at regular intervals. INITIAL_PROPS - properties at the start of the track, used for selecting storms similar to seeded cases in weather mod activities.";
} target_entity;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to process complex tracks.";
  p_help = "If set, tracks with mergers and splits will be processed.";
} use_complex_tracks;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Option to process simple tracks.";
  p_help = "If set, tracks without mergers and splits will be processed.";
} use_simple_tracks;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to only count storms to get total number.";
  p_help = "Suppresses normal print output.";
} count_only;

paramdef int {
  p_default = 1800;
  p_descr = "Sampling interval (secs).";
  p_help = "TRACK_ENTRY entity only. The track entry properties are printed out at this interval. If set to -1, all entries are printed.";
} sample_interval;

paramdef int {
  p_default = 360;
  p_descr = "Volume scan interval (secs).";
  p_help = "Used in conjunction with sample_interval to determine whether to print the entry for a given scan. It is a temporal search region. If no entries lie within this interval on either side of the search time, no analysis is done for this time.";
} scan_interval;

paramdef int {
  p_default = 900;
  p_descr = "Minimum track duration (secs).";
  p_help = "Only tracks which exceed this duration are processed.";
} min_duration;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to limit analysis to a bounding box.";
  p_help = "If set, only tracks which pass through the box will be processed.";
} use_box_limits;

paramdef struct grid {
  p_descr = "Box parameters";
  p_help = "The parameters of the bounding box - see 'use_box_limits'. The size limits are in km relative to the grid origin. min_percent is the minimum percentage of the tracks which must lie inside the box. min_nscans is the minimum number of scans for which storms must lie in the box. If either of these conditions is true, the track is accepted for analysis.";
  p_field_type = {double, double, double, double, double, int};
  p_field_name = {min_x, min_y, max_x, max_y, min_percent, min_nscans};
} box;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to reject tracks too close to radar.";
  p_help = "This allows rejection of tracks with tops missing because it is too close to the radar.";
} check_too_close;

paramdef int {
  p_default = 5;
  p_descr = "Max nscans too close to radar - tops missing.";
  p_help = "Max number of scans per track allowed with missing tops.";
} max_nscans_too_close;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to reject tracks at max range.";
  p_help = "This allows rejection of tracks too far from the radar - data missing because part of the storm is out of range.";
} check_too_far;

paramdef int {
  p_default = 5;
  p_descr = "Max nscans too far.";
  p_help = "Max number of scans per track allowed at max range.";
} max_nscans_too_far;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to check vol at start of track.";
  p_help = "This allows rejection of tracks which existed at radar startup.";
} check_vol_at_start;

paramdef double {
  p_default = 5;
  p_descr = "Max vol at start of sampling (km2).";
  p_help = "Tracks with starting vol in excess of this value are rejected.";
} max_vol_at_start;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to check vol at end of track.";
  p_help = "This allows rejection of tracks which existed at radar shutdown.";
} check_vol_at_end;

paramdef double {
  p_default = 5;
  p_descr = "Max vol at end of sampling (km2).";
  p_help = "Tracks with ending vol in excess of this value are rejected.";
} max_vol_at_end;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to only print tracks specified in a case_tracks file.";
  p_help = "The option only applies if target_entity is COMPLETE_TRACK. Cloud seeding cases are stored in a case_tracks file. If this option is TRUE, only those tracks in the file will be printed.";
} use_case_tracks_file;

paramdef string {
  p_default = "case_tracks.txt";
  p_descr = "File path for seed/no-seed cases.";
  p_help = "This file indicates the time and track numbers for each seed and no-seed case. See use_case_tracks_file.";
} case_tracks_file_path;

commentdef {
  p_header = "OUTPUT DETAILS";
}

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to print storm polygons.";
  p_help = "TRACK_ENTRY only. If set the storm polygons are printed out for each track entry.";
} print_polygons;

paramdef int {
  p_default = 5;
  p_descr = "Number of scans used to compute initial props.";
} initial_props_nscans;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to only print out the reflectivity histogram.";
  p_help = "Only applicable if target_entity = TRACK_ENTRY. If this is set, the reflectivity histogram is written out after the date, time, track number and location. If refl_histogram_vol is true, you get the histogram for the volume. If it is false, you get the histogram for the area.";
} refl_histogram_only;

paramdef boolean {
  p_default = TRUE;
  p_descr = "Select volume for reflectivity histograms.";
  p_help = "If refl_histogram_only is true, and this is true, print out the reflectivity histogram for the volume. If it is false, print out the histogram for area.";
} refl_histogram_vol;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to print out data from only a single complex track.";
} specify_complex_track_num;

paramdef int {
  p_default = 1;
  p_descr = "Complex track number.";
  p_help = "See specify_complex_track_num.";
} complex_track_num;

paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to print out data from only a single simple track.";
} specify_simple_track_num;

paramdef int {
  p_default = 1;
  p_descr = "Simple track number.";
  p_help = "See specify_simple_track_num.";
} simple_track_num;



