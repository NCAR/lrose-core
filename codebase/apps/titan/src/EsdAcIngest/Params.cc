/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program EsdAcIngest
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("EsdAcIngest reads aircraft data from an ASCII string and stores it in Spdb");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the aircraft data is read in from the serial connection. In ARCHIVE mode the data is read in from files, using the -f command line option. In TCP mode, reads data from a TCP server. In TEST mode, aircraft data is generated for testing purposes.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[0].val = REALTIME;
      tt->enum_def.fields[1].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[1].val = ARCHIVE;
      tt->enum_def.fields[2].name = tdrpStrDup("TCP");
      tt->enum_def.fields[2].val = TCP;
      tt->enum_def.fields[3].name = tdrpStrDup("TEST");
      tt->enum_def.fields[3].val = TEST;
    tt->single_val.e = REALTIME;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("SERIAL DATA INPUT.");
    tt->comment_text = tdrpStrDup("The original system used a fixed-length preformatted string. The newer system uses a comma-delimited string. The program automatically determines which type of input string is being used.");
    tt++;
    
    // Parameter 'input_format'
    // ctype is '_input_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("input_format");
    tt->descr = tdrpStrDup("Data input format");
    tt->help = tdrpStrDup("\tAUTOMATIC_FORMAT - The program automatically determine the data format. This can only be done if the data is in one of the following formats:\n\t\tCOMMA_DELIMITED_FORMAT\n\t\tLONG_FIXED_STRING_FORMAT\n\t\tWMI_LONG_STRING_FORMAT\n\t\tWMI_STRING_FORMAT\n\tCOMMA_DELIMITED_FORMAT - The fields in the data are delimited by commas. The line begins with the following fields:\n\t\tcall sign\n\t\tyear\n\t\tmonth\n\t\tday\n\t\thour\n\t\tminute\n\t\tsecond\n\t\tlatitude\n\t\tlongitude\n\t\taltitude\nThese fields are followed by the optional fields specified in the optional_field_names parameter.\n\tLONG_FIXED_STRING_FORMAT - The data is in a white-space delimited format. The fields appear in the following order:\n\t\thour\n\t\tminute\n\t\tsecond\n\t\tpressure\n\t\ttemperature\n\t\tdew point\n\t\twind speed\n\t\twind direction\n\t\tlongitude\n\t\tlatitude\n\t\taltitude\n\t\tking lwc\n\t\tfssp conc\n\t\trosemount volts\nSince the call sign isn't specified in the data, the first call sign in the callsigns parameter is used as the call sign for this data. If the callsigns parameter is empty, the resulting AC position record won't have a call sign associated with it.\n\tWMI_LONG_STRING_FORMAT - The data is in the WMI long string format. In this format, the data is all in a long line with no delimiters with the following fields:\n\t\tcall sign\n\t\tlatitude * 10000\n\t\tlongitude * 10000\n\t\ttas\n\t\tGPS altitude * 100\n\t\tpressure altitude\n\t\ttdry * 10\n\t\tlwjw * 100\n\t\tdew point * 10\n\t\tfssp\n\t\tburn in place\n\t\tnumber of burn in place\n\t\tejectable\n\t\tnumber of ejectable\n\t\tleft burn\n\t\tright burn\n\t\tice hopper\n\t\tGPS time string\n\t\tGPS var\n\t\tGPS error\n\t\tGPS warn\n\tWMI_STRING_FORMAT - The data is received in the old WMI string format. In this format, the data is all in a long line with no delimiters with the following fields:\n\t\tcall sign\n\t\tlatitude\n\t\tlongitude\n\t\ttas\n\t\tGPS altitude\n\t\tpressure altitude\n\t\ttdry\n\t\tlwjw\n\t\t???\n\t\tnumber of burn in place\n\t\tnumber of ejectable\n\t\tright burn\n\t\tleft burn\n\t\t???\n\t\tburn in place\n\t\tejectable\n\t\tGPS hour\n\t\tGPS minute\n\t\tGPS second\n\t\tGPS var\n\t\tGPS error\n\t\tairnav warn\n\tSEA_M300_FORMAT - This data is in white-space delimited files and contains the following fields:\n\t\ttime in hh:mm:ss format\n\t\tdate in m/dd/yyyy format\n\t\tlatitude\n\t\tlongitude\n\t\taltitude in feet\n\t\taltitude in meters\n\t\ttemperature\n\t\trelative humidity\n\t\tCN concentration\n\t\tCCN concentration\n\t\tCCNSS\n\t\tCCN flag\n\t\tPCASP\n\t\tP1 - P15\n\t\tSPPRng\n\t\tSPP\n\t\tSPPLWC\n\t\tKPLWC\n\t\tmean dia\n\t\tMVD\n\t\tEffRad\n\t\tstandard deviation\n\t\tdisp\n\t\t2DCshad\n\t\t2DPshad\n\t\tS1 - S20\n\tPOLCAST2_FORMAT - This data is in white-space delimited files and contains the following fields:\n\t\ttail number\n\t\tyear\n\t\tmonth\n\t\tday\n\t\thour\n\t\tminute\n\t\tsecond\n\t\tlatitude (deg)\n\t\tlongitude (deg)\n\t\taltitude (m)\n\t\tground speed (knots)\n\t\tflare voltage (volts)\n");
    tt->val_offset = (char *) &input_format - &_start_;
    tt->enum_def.name = tdrpStrDup("input_format_t");
    tt->enum_def.nfields = 8;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("AUTOMATIC_FORMAT");
      tt->enum_def.fields[0].val = AUTOMATIC_FORMAT;
      tt->enum_def.fields[1].name = tdrpStrDup("COMMA_DELIMITED_FORMAT");
      tt->enum_def.fields[1].val = COMMA_DELIMITED_FORMAT;
      tt->enum_def.fields[2].name = tdrpStrDup("LONG_FIXED_STRING_FORMAT");
      tt->enum_def.fields[2].val = LONG_FIXED_STRING_FORMAT;
      tt->enum_def.fields[3].name = tdrpStrDup("WMI_LONG_STRING_FORMAT");
      tt->enum_def.fields[3].val = WMI_LONG_STRING_FORMAT;
      tt->enum_def.fields[4].name = tdrpStrDup("WMI_STRING_FORMAT");
      tt->enum_def.fields[4].val = WMI_STRING_FORMAT;
      tt->enum_def.fields[5].name = tdrpStrDup("SEA_M300_FORMAT");
      tt->enum_def.fields[5].val = SEA_M300_FORMAT;
      tt->enum_def.fields[6].name = tdrpStrDup("CSV_GPS_FORMAT");
      tt->enum_def.fields[6].val = CSV_GPS_FORMAT;
      tt->enum_def.fields[7].name = tdrpStrDup("POLCAST2_FORMAT");
      tt->enum_def.fields[7].val = POLCAST2_FORMAT;
    tt->single_val.e = AUTOMATIC_FORMAT;
    tt++;
    
    // Parameter 'optional_field_names'
    // ctype is '_field_name_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("optional_field_names");
    tt->descr = tdrpStrDup("Array of variable fields following fixed fields.");
    tt->help = tdrpStrDup("Used for comma-delimited format only.\n\nThe comma-delimited format has 10 fixed fields: callsign, year, month, day, hour, min, sec, lat, lon, alt.\n\nThese are followed by optional fields. This array specifies the optional field list.\n\n\tGS: ground speed(kts).\n\tTAS: true airspeed (kts).\n\tTEMP: air temp C.\n\tDEW_PT: dew point C.\n\tRH: relative humidity %.\n\tLW: liquid water concentration (g/m3).\n\tFSSP_CONC: particle concentration from FSSP (g/m3).\n\tHEADING_DEG: heading deg T.\n\tVERT_VEL_MPS: vertical velocity in m/s.\n\tERROR_FLAGS: bit-wise error flags.\n\tR_BURN: flag to show right-wing burn on.\n\tL_BURN: flag to show left-wing burn on.\n\tBURN_IN_PLACE: flag to show burn in place flares running.\n\tEJECTABLE: flag to show ejectable flares dispensed.\n\tN_BURN_IN_PLACE: number of flares burning.\n\tN_EJECTABLE: number of ejectable flares dispensed.\n\tDRY_ICE: dry ice pellets dispensed.");
    tt->array_offset = (char *) &_optional_field_names - &_start_;
    tt->array_n_offset = (char *) &optional_field_names_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(field_name_t);
    tt->array_n = 8;
    tt->enum_def.name = tdrpStrDup("field_name_t");
    tt->enum_def.nfields = 17;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("GS");
      tt->enum_def.fields[0].val = GS;
      tt->enum_def.fields[1].name = tdrpStrDup("TAS");
      tt->enum_def.fields[1].val = TAS;
      tt->enum_def.fields[2].name = tdrpStrDup("TEMP");
      tt->enum_def.fields[2].val = TEMP;
      tt->enum_def.fields[3].name = tdrpStrDup("DEW_PT");
      tt->enum_def.fields[3].val = DEW_PT;
      tt->enum_def.fields[4].name = tdrpStrDup("RH");
      tt->enum_def.fields[4].val = RH;
      tt->enum_def.fields[5].name = tdrpStrDup("LW");
      tt->enum_def.fields[5].val = LW;
      tt->enum_def.fields[6].name = tdrpStrDup("FSSP_CONC");
      tt->enum_def.fields[6].val = FSSP_CONC;
      tt->enum_def.fields[7].name = tdrpStrDup("HEADING_DEG");
      tt->enum_def.fields[7].val = HEADING_DEG;
      tt->enum_def.fields[8].name = tdrpStrDup("VERT_VEL_MPS");
      tt->enum_def.fields[8].val = VERT_VEL_MPS;
      tt->enum_def.fields[9].name = tdrpStrDup("ERROR_FLAGS");
      tt->enum_def.fields[9].val = ERROR_FLAGS;
      tt->enum_def.fields[10].name = tdrpStrDup("R_BURN");
      tt->enum_def.fields[10].val = R_BURN;
      tt->enum_def.fields[11].name = tdrpStrDup("L_BURN");
      tt->enum_def.fields[11].val = L_BURN;
      tt->enum_def.fields[12].name = tdrpStrDup("BURN_IN_PLACE");
      tt->enum_def.fields[12].val = BURN_IN_PLACE;
      tt->enum_def.fields[13].name = tdrpStrDup("EJECTABLE");
      tt->enum_def.fields[13].val = EJECTABLE;
      tt->enum_def.fields[14].name = tdrpStrDup("N_BURN_IN_PLACE");
      tt->enum_def.fields[14].val = N_BURN_IN_PLACE;
      tt->enum_def.fields[15].name = tdrpStrDup("N_EJECTABLE");
      tt->enum_def.fields[15].val = N_EJECTABLE;
      tt->enum_def.fields[16].name = tdrpStrDup("DRY_ICE");
      tt->enum_def.fields[16].val = DRY_ICE;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].e = GS;
      tt->array_vals[1].e = ERROR_FLAGS;
      tt->array_vals[2].e = R_BURN;
      tt->array_vals[3].e = L_BURN;
      tt->array_vals[4].e = BURN_IN_PLACE;
      tt->array_vals[5].e = EJECTABLE;
      tt->array_vals[6].e = N_BURN_IN_PLACE;
      tt->array_vals[7].e = N_EJECTABLE;
    tt++;
    
    // Parameter 'burn_in_place_time'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("burn_in_place_time");
    tt->descr = tdrpStrDup("Nominal burn time for burn-in-place flares (secs).");
    tt->help = tdrpStrDup("It is assumed that all burn-in-place flares will burn for this length of time. The program will keep track of how many flares are burning on each aircraft, and store that number in SPDB.");
    tt->val_offset = (char *) &burn_in_place_time - &_start_;
    tt->single_val.i = 240;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("SERIAL TTY input");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_device'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_device");
    tt->descr = tdrpStrDup("Name of input serial port device.");
    tt->help = tdrpStrDup("Normally /dev/ttyS0 (COM1) or /dev/ttyS1 (COM2). Check that you set the permissions on the serial device to rw-rw-rw-, (666), so that we have read-write permissions for the port.");
    tt->val_offset = (char *) &input_device - &_start_;
    tt->single_val.s = tdrpStrDup("/dev/ttyS1");
    tt++;
    
    // Parameter 'baud_rate'
    // ctype is '_baud_rate_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("baud_rate");
    tt->descr = tdrpStrDup("Baud rate");
    tt->help = tdrpStrDup("Baud rate for incoming serial data port");
    tt->val_offset = (char *) &baud_rate - &_start_;
    tt->enum_def.name = tdrpStrDup("baud_rate_t");
    tt->enum_def.nfields = 7;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("BAUD_300");
      tt->enum_def.fields[0].val = BAUD_300;
      tt->enum_def.fields[1].name = tdrpStrDup("BAUD_1200");
      tt->enum_def.fields[1].val = BAUD_1200;
      tt->enum_def.fields[2].name = tdrpStrDup("BAUD_2400");
      tt->enum_def.fields[2].val = BAUD_2400;
      tt->enum_def.fields[3].name = tdrpStrDup("BAUD_4800");
      tt->enum_def.fields[3].val = BAUD_4800;
      tt->enum_def.fields[4].name = tdrpStrDup("BAUD_9600");
      tt->enum_def.fields[4].val = BAUD_9600;
      tt->enum_def.fields[5].name = tdrpStrDup("BAUD_19200");
      tt->enum_def.fields[5].val = BAUD_19200;
      tt->enum_def.fields[6].name = tdrpStrDup("BAUD_38400");
      tt->enum_def.fields[6].val = BAUD_38400;
    tt->single_val.e = BAUD_9600;
    tt++;
    
    // Parameter 'dataIs7Bit'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("dataIs7Bit");
    tt->descr = tdrpStrDup("Flag for 7-bit data");
    tt->help = tdrpStrDup("Set TRUE for 7-bit data, FALSE for 8-bit data.");
    tt->val_offset = (char *) &dataIs7Bit - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'twoStopBits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("twoStopBits");
    tt->descr = tdrpStrDup("Flag for two stop bits");
    tt->help = tdrpStrDup("If TRUE, 2 stop bits. If FALSE, 1 stop bit.");
    tt->val_offset = (char *) &twoStopBits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'enableParity'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("enableParity");
    tt->descr = tdrpStrDup("Flag for enabling parity checking.");
    tt->help = tdrpStrDup("If TRUE, parity generation is enabled for outgoing characters, and checking enabled for incoming characters. If FALSE, parity generation and checking is off.");
    tt->val_offset = (char *) &enableParity - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'oddParity'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("oddParity");
    tt->descr = tdrpStrDup("Flag for parity type.");
    tt->help = tdrpStrDup("If TRUE, odd parity. If FALSE, even parity. Only applies if enableParity is TRUE.");
    tt->val_offset = (char *) &oddParity - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("TCP input");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'tcp_server_host_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("tcp_server_host_name");
    tt->descr = tdrpStrDup("Name of TCP server host.");
    tt->help = tdrpStrDup("For connection TCP. The name of the host for the TCP server.");
    tt->val_offset = (char *) &tcp_server_host_name - &_start_;
    tt->single_val.s = tdrpStrDup("192.168.1.1");
    tt++;
    
    // Parameter 'tcp_server_port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("tcp_server_port");
    tt->descr = tdrpStrDup("TCP server port number.");
    tt->help = tdrpStrDup("For connection TCP. The number of the port for the TCP server.");
    tt->val_offset = (char *) &tcp_server_port - &_start_;
    tt->single_val.i = 2003;
    tt++;
    
    // Parameter 'send_tcp_handshake'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("send_tcp_handshake");
    tt->descr = tdrpStrDup("Option to send TCP handshake sequence to the server to trigger the data flow.");
    tt->help = tdrpStrDup("If true, a sequence of bytes will be sent to the server to trigger the data flow. See 'tcp_handshape_bytes'.");
    tt->val_offset = (char *) &send_tcp_handshake - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'tcp_handshake_bytes'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("tcp_handshake_bytes");
    tt->descr = tdrpStrDup("List of bytes to be sent to server for handshaking.");
    tt->help = tdrpStrDup("This array of decimal integers is interpreted as a sequence of individual bytes which are to be sent to the server to trigger the data flow.");
    tt->array_offset = (char *) &_tcp_handshake_bytes - &_start_;
    tt->array_n_offset = (char *) &tcp_handshake_bytes_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 2;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].i = 13;
      tt->array_vals[1].i = 10;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("CHECKS FOR VALID DATA.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'check_callsigns'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_callsigns");
    tt->descr = tdrpStrDup("Option to check callsigns.");
    tt->help = tdrpStrDup("If TRUE, only aircraft in the callsigns array are stored. If FALSE, data from all aircraft is stored.");
    tt->val_offset = (char *) &check_callsigns - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'callsigns'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("callsigns");
    tt->descr = tdrpStrDup("Callsign array");
    tt->help = tdrpStrDup("Array of valid callsigns");
    tt->array_offset = (char *) &_callsigns - &_start_;
    tt->array_n_offset = (char *) &callsigns_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 1;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("UND");
    tt++;
    
    // Parameter 'check_ground_speed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_ground_speed");
    tt->descr = tdrpStrDup("Option to check ground speed.");
    tt->help = tdrpStrDup("If TRUE, data will only be stored if the ground speed exceeds the specified min_valid_ground_speed.");
    tt->val_offset = (char *) &check_ground_speed - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_valid_ground_speed'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_valid_ground_speed");
    tt->descr = tdrpStrDup("Minimum valid ground speed - should match the units of the input data.");
    tt->help = tdrpStrDup("If check_ground_speed is true, data will only be stored if the ground speed exceeds this value.");
    tt->val_offset = (char *) &min_valid_ground_speed - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'check_air_speed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_air_speed");
    tt->descr = tdrpStrDup("Option to check air speed.");
    tt->help = tdrpStrDup("If TRUE, data will only be stored if the air speed exceeds the specified min_valid_air_speed.");
    tt->val_offset = (char *) &check_air_speed - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_valid_air_speed'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_valid_air_speed");
    tt->descr = tdrpStrDup("Minimum valid air speed - should match the units of the input data.");
    tt->help = tdrpStrDup("If check_air_speed is true, data will only be stored if the air speed exceeds this value.");
    tt->val_offset = (char *) &min_valid_air_speed - &_start_;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("DATA OUTPUT.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'echo'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("echo");
    tt->descr = tdrpStrDup("Option to echo incoming data string.");
    tt->help = tdrpStrDup("If TRUE, the incoming strings are echoed to stdout.");
    tt->val_offset = (char *) &echo - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'new_line_on_echo'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("new_line_on_echo");
    tt->descr = tdrpStrDup("Option to add new line to echo output.");
    tt->help = tdrpStrDup("If FALSE, carriage return is used instead of new line.");
    tt->val_offset = (char *) &new_line_on_echo - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output SPDB URL.");
    tt->help = tdrpStrDup("This is the path to the output data directory. You can use full URL sytnax and optionally put the data to a remote machine.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup("$(RAP_DATA_DIR)/spdb/ac_posn");
    tt++;
    
    // Parameter 'valid_period'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("valid_period");
    tt->descr = tdrpStrDup("Valid period (secs)");
    tt->help = tdrpStrDup("Time period over which the aircraft position is considered valid.");
    tt->val_offset = (char *) &valid_period - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 120;
    tt++;
    
    // Parameter 'output_ascii'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_ascii");
    tt->descr = tdrpStrDup("Option to output ASCII to separate SPDB data base.");
    tt->help = tdrpStrDup("If TRUE, the incoming data strings will be stored as ASCII in a separate SPDB dir.");
    tt->val_offset = (char *) &output_ascii - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'ascii_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ascii_url");
    tt->descr = tdrpStrDup("ASCII SPDB URL.");
    tt->help = tdrpStrDup("Use if 'output_ascii' is TRUE.");
    tt->val_offset = (char *) &ascii_url - &_start_;
    tt->single_val.s = tdrpStrDup("$(RAP_DATA_DIR)/spdb/ascii_ac_posn");
    tt++;
    
    // Parameter 'output_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_interval");
    tt->descr = tdrpStrDup("Interval at which the data is written to the data base (secs)");
    tt->help = tdrpStrDup("This prevents extremely rapid updates to the data base.");
    tt->val_offset = (char *) &output_interval - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'change_lat_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_lat_sign");
    tt->descr = tdrpStrDup("Change the latitude sign");
    tt->help = tdrpStrDup("Use if southern latitudes are positive.");
    tt->val_offset = (char *) &change_lat_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("TEST SETUP.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'test_aircraft'
    // ctype is '_test_aircraft_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("test_aircraft");
    tt->descr = tdrpStrDup("Details of aircraft for TEST mode.");
    tt->help = tdrpStrDup("The test aircraft have a starting location, speed (knots) and altitude (ft). They wander randomly around. If they go further that 100 km from their starting location they are brought back to the start. right_burn and left_burn indicate whether the burners should be on or off. ejectable_interval indicates the time beteen ejectable flares - set to -1 for no ejectables. burn_in_place_interval indicates the time between starting burn_in_place flares - set to -1 for no burn_in_place flares. n_bip_at_a_time indictes the number of burn_in_place flares to start at a time.");
    tt->array_offset = (char *) &_test_aircraft - &_start_;
    tt->array_n_offset = (char *) &test_aircraft_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(test_aircraft_t);
    tt->array_n = 4;
    tt->struct_def.name = tdrpStrDup("test_aircraft_t");
    tt->struct_def.nfields = 11;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("callsign");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_test_aircraft->callsign - (char *) _test_aircraft;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("start_lat");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_test_aircraft->start_lat - (char *) _test_aircraft;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("start_lon");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_test_aircraft->start_lon - (char *) _test_aircraft;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("altitude");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_test_aircraft->altitude - (char *) _test_aircraft;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("speed");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_test_aircraft->speed - (char *) _test_aircraft;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("right_burn");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_test_aircraft->right_burn - (char *) _test_aircraft;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("left_burn");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_test_aircraft->left_burn - (char *) _test_aircraft;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("ejectable_interval");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_test_aircraft->ejectable_interval - (char *) _test_aircraft;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("burn_in_place_interval");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_test_aircraft->burn_in_place_interval - (char *) _test_aircraft;
      tt->struct_def.fields[9].ftype = tdrpStrDup("int");
      tt->struct_def.fields[9].fname = tdrpStrDup("n_bip_at_a_time");
      tt->struct_def.fields[9].ptype = INT_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_test_aircraft->n_bip_at_a_time - (char *) _test_aircraft;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("dry_ice_interval");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_test_aircraft->dry_ice_interval - (char *) _test_aircraft;
    tt->n_struct_vals = 44;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("JRA");
      tt->struct_vals[1].d = -27.43;
      tt->struct_vals[2].d = 28.87;
      tt->struct_vals[3].d = 9500;
      tt->struct_vals[4].d = 150;
      tt->struct_vals[5].b = pTRUE;
      tt->struct_vals[6].b = pTRUE;
      tt->struct_vals[7].d = -1;
      tt->struct_vals[8].d = -1;
      tt->struct_vals[9].i = 0;
      tt->struct_vals[10].d = -1;
      tt->struct_vals[11].s = tdrpStrDup("JRB");
      tt->struct_vals[12].d = -28.57;
      tt->struct_vals[13].d = 28.86;
      tt->struct_vals[14].d = 10500;
      tt->struct_vals[15].d = 250;
      tt->struct_vals[16].b = pFALSE;
      tt->struct_vals[17].b = pFALSE;
      tt->struct_vals[18].d = 10;
      tt->struct_vals[19].d = -1;
      tt->struct_vals[20].i = 0;
      tt->struct_vals[21].d = -1;
      tt->struct_vals[22].s = tdrpStrDup("CAN");
      tt->struct_vals[23].d = -28.19;
      tt->struct_vals[24].d = 27.76;
      tt->struct_vals[25].d = 11500;
      tt->struct_vals[26].d = 150;
      tt->struct_vals[27].b = pFALSE;
      tt->struct_vals[28].b = pFALSE;
      tt->struct_vals[29].d = -1;
      tt->struct_vals[30].d = 60;
      tt->struct_vals[31].i = 2;
      tt->struct_vals[32].d = -1;
      tt->struct_vals[33].s = tdrpStrDup("LTK");
      tt->struct_vals[34].d = -28;
      tt->struct_vals[35].d = 28;
      tt->struct_vals[36].d = 20500;
      tt->struct_vals[37].d = 200;
      tt->struct_vals[38].b = pFALSE;
      tt->struct_vals[39].b = pFALSE;
      tt->struct_vals[40].d = -1;
      tt->struct_vals[41].d = -1;
      tt->struct_vals[42].i = 0;
      tt->struct_vals[43].d = 20;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
