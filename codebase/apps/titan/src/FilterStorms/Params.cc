/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program FilterStorms
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("");
    tt->comment_text = tdrpStrDup("This program is used to filter storms in a TITAN SPDB database. The storms can be filtered by size or by information in an associated likelihood grid.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_WARNINGS");
      tt->enum_def.fields[1].val = DEBUG_WARNINGS;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[2].val = DEBUG_NORM;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[3].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("INPUT AND OUTPUT DATA.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'trigger_mode'
    // ctype is '_trigger_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("trigger_mode");
    tt->descr = tdrpStrDup("Input triggering mode");
    tt->help = tdrpStrDup("In LATEST_DATA mode, the program waits for new data from the MDV location specified by the latest_data_trigger parameter.\nIn TIME_LIST mode, the program operates on archive data as specified in the time_list_trigger parameter.");
    tt->val_offset = (char *) &trigger_mode - &_start_;
    tt->enum_def.name = tdrpStrDup("trigger_mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LATEST_DATA");
      tt->enum_def.fields[0].val = LATEST_DATA;
      tt->enum_def.fields[1].name = tdrpStrDup("TIME_LIST");
      tt->enum_def.fields[1].val = TIME_LIST;
    tt->single_val.e = LATEST_DATA;
    tt++;
    
    // Parameter 'time_list_trigger'
    // ctype is '_time_list_trigger_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("time_list_trigger");
    tt->descr = tdrpStrDup("Trigger information used when using the TIME_LIST trigger");
    tt->help = tdrpStrDup("start_time specifies the archive start time in any format recognized by the DateTime class.\nend_time specifies the archive end time in any format recognized by the DateTime class.");
    tt->val_offset = (char *) &time_list_trigger - &_start_;
    tt->struct_def.name = tdrpStrDup("time_list_trigger_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("start_time");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &time_list_trigger.start_time - (char *) &time_list_trigger;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("end_time");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &time_list_trigger.end_time - (char *) &time_list_trigger;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("2001/1/1 00:00:00");
      tt->struct_vals[1].s = tdrpStrDup("2002/1/2 00:00:00");
    tt++;
    
    // Parameter 'input_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_url");
    tt->descr = tdrpStrDup("Input URL");
    tt->help = tdrpStrDup("URL of the input TITAN SPDB database.");
    tt->val_offset = (char *) &input_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/storms");
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max age of input data");
    tt->help = tdrpStrDup("For realtime only - max age of input data for it to be valid");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 0;
    tt->single_val.l = 7200;
    tt++;
    
    // Parameter 'write_passing_storms'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_passing_storms");
    tt->descr = tdrpStrDup("Flag indicating whether to output the storms that pass the test");
    tt->help = tdrpStrDup("If true, any storms passing the filter test will be written to the URL specified in the passing_output_url.");
    tt->val_offset = (char *) &write_passing_storms - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'passing_storms_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("passing_storms_url");
    tt->descr = tdrpStrDup("URL for writing passing storms");
    tt->help = tdrpStrDup("Used only if write_passing_storms is set to TRUE.");
    tt->val_offset = (char *) &passing_storms_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/storms/passing");
    tt++;
    
    // Parameter 'write_failing_storms'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_failing_storms");
    tt->descr = tdrpStrDup("Flag indicating whether to output the storms that fail the test");
    tt->help = tdrpStrDup("If true, any storms failing the filter test will be written to the URL specified in the failing_output_url.");
    tt->val_offset = (char *) &write_failing_storms - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'failing_storms_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("failing_storms_url");
    tt->descr = tdrpStrDup("URL for writing failing storms");
    tt->help = tdrpStrDup("Used only if write_failing_storms is set to TRUE.");
    tt->val_offset = (char *) &failing_storms_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/storms/failing");
    tt++;
    
    // Parameter 'missing_input_action'
    // ctype is '_missing_input_action_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("missing_input_action");
    tt->descr = tdrpStrDup("Flag indicating how to operate when filtering based on another dataset and the other dataset isn't currently available.");
    tt->help = tdrpStrDup("If you are filtering based on another dataset, for example using an interest field or a partition field filter, this flag indicates how to operate when this other dataset isn't available.\n\tMISSING_NO_OUTPUT - If the dataset used for filtering isn't available, there will be no output written to either the passing or failing database.\n\tMISSING_PASSING - If the dataset used for filtering isn't available, all of the storms in the input storm database will be written to the output passing database.\n\tMISSING_FAILING - If the dataset used for filtering isn't available, all of the storms in the output storm database will be written to the output failing database.\n");
    tt->val_offset = (char *) &missing_input_action - &_start_;
    tt->enum_def.name = tdrpStrDup("missing_input_action_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("MISSING_NO_OUTPUT");
      tt->enum_def.fields[0].val = MISSING_NO_OUTPUT;
      tt->enum_def.fields[1].name = tdrpStrDup("MISSING_PASSING");
      tt->enum_def.fields[1].val = MISSING_PASSING;
      tt->enum_def.fields[2].name = tdrpStrDup("MISSING_FAILING");
      tt->enum_def.fields[2].val = MISSING_FAILING;
    tt->single_val.e = MISSING_NO_OUTPUT;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("ALGORITHM PARAMETERS.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'valid_forecasts_only'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("valid_forecasts_only");
    tt->descr = tdrpStrDup("Flag indicating whether to process all storms or just the storms that have valid forecasts.");
    tt->help = tdrpStrDup("If set to TRUE, only storms with valid forecasts will be processed. If set to FALSE, all storms will be processed and the forecast valid flag will be preserved from the input.");
    tt->val_offset = (char *) &valid_forecasts_only - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'filter_type'
    // ctype is '_filter_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("filter_type");
    tt->descr = tdrpStrDup("Type of filter to use when filtering the storms");
    tt->help = tdrpStrDup("\n\tAREA_FILTER - Storms are filtered based on storm area. See the following parameters:\n\t\tarea_min_storm_size\n\n\tLONGITUDE_FILTER - Storms are filtered based on the longitude of the storm centroid. See the following parameters:\n\t\tlongitude_min\n\n\tINTEREST_FILTER - Storms are filtered based on an interest grid. See the following parameters:\n\t\tinterest_url\n\t\tinterest_field_name\n\t\tinterest_level_num\n\t\tinterest_max_valid_secs\n\t\tinterest_min_value\n\t\tinterest_storm_growth\n\n\tPARTITION_FILTER - Storms are filtered based on a partition grid. A partition grid is a grid that partitions the grid points based on some criteria, like the partition field that comes out of stratiform_filter. See the following parameters:\n\t\tpartition_url\n\t\tpartition_field_name\n\t\tpartition_level_num\n\t\tpartition_max_valid_secs\n\t\tpartition_value\n\t\tpartition_percent\n\t\tpartition_storm_growth\n");
    tt->val_offset = (char *) &filter_type - &_start_;
    tt->enum_def.name = tdrpStrDup("filter_type_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("AREA_FILTER");
      tt->enum_def.fields[0].val = AREA_FILTER;
      tt->enum_def.fields[1].name = tdrpStrDup("LONGITUDE_FILTER");
      tt->enum_def.fields[1].val = LONGITUDE_FILTER;
      tt->enum_def.fields[2].name = tdrpStrDup("INTEREST_FILTER");
      tt->enum_def.fields[2].val = INTEREST_FILTER;
      tt->enum_def.fields[3].name = tdrpStrDup("PARTITION_FILTER");
      tt->enum_def.fields[3].val = PARTITION_FILTER;
    tt->single_val.e = AREA_FILTER;
    tt++;
    
    // Parameter 'output_algorithm_value'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_algorithm_value");
    tt->descr = tdrpStrDup("Flag indicating whether to output the filter value to the output databases");
    tt->help = tdrpStrDup("Will output the following values to the algorithm_value field of the storm entry for each storm in the output database(s):\n\tAREA_FILTER - the area for the storm.\n\tLONGITUDE_FILTER - the longitude of the centroid of the storm.\n\tINTEREST_FILTER - the maximum interest value inside of the storm polygon.\n\tPARTITION_FILTER - the percentage of grid spaces within the storm that have the given partition value.\n");
    tt->val_offset = (char *) &output_algorithm_value - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'area_min_storm_size'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("area_min_storm_size");
    tt->descr = tdrpStrDup("Minimum storm size when using an area filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to AREA_FILTER.\nIf a storm's area is greater than or equal to this value, the storm will be included in the \"passing\" list. Otherwise, the storm will be included in the \"failing\" list.");
    tt->val_offset = (char *) &area_min_storm_size - &_start_;
    tt->single_val.d = 100;
    tt++;
    
    // Parameter 'longitude_min'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("longitude_min");
    tt->descr = tdrpStrDup("Minimum longitude for storm centroid when using a longitude filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to LONGITUDE_FILTER.\nIf the longitude of a storm's centroid is greater than or equal to this value, the storm will be included in the \"passing\" list. Otherwise, the storm will be included in the \"failing\" list.");
    tt->val_offset = (char *) &longitude_min - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'interest_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("interest_url");
    tt->descr = tdrpStrDup("Interest field URL when using an interest filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to INTEREST_FILTER.");
    tt->val_offset = (char *) &interest_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::mdv/interest");
    tt++;
    
    // Parameter 'interest_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("interest_field_name");
    tt->descr = tdrpStrDup("Interest field name when using an interest filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to INTEREST_FILTER.\nSpecifies the interest field name exactly as it appears in the interest MDV file.");
    tt->val_offset = (char *) &interest_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("interest");
    tt++;
    
    // Parameter 'interest_level_num'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("interest_level_num");
    tt->descr = tdrpStrDup("Interest field level when using an interest filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to INTEREST_FILTER.\nSpecifies the level number to use as the interest field since the interest field must be 2-dimensional. If set to a negative number, a composite of the interest field will be used.");
    tt->val_offset = (char *) &interest_level_num - &_start_;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'interest_max_valid_secs'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("interest_max_valid_secs");
    tt->descr = tdrpStrDup("Maximum valid secons for the input interest field");
    tt->help = tdrpStrDup("Used only if filter_type is set to INTEREST_FILTER.\nSpecifies how old the interest field can be. If the interest field is older than this, it will not be used.");
    tt->val_offset = (char *) &interest_max_valid_secs - &_start_;
    tt->single_val.l = 3600;
    tt++;
    
    // Parameter 'interest_value_type'
    // ctype is '_interest_value_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("interest_value_type");
    tt->descr = tdrpStrDup("Data value type when using an interest filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to INTEREST_FILTER.\nDetermines if the interest value found in the polygon is the Maximum or the Minimum.");
    tt->val_offset = (char *) &interest_value_type - &_start_;
    tt->enum_def.name = tdrpStrDup("interest_value_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("MAX");
      tt->enum_def.fields[0].val = MAX;
      tt->enum_def.fields[1].name = tdrpStrDup("MIN");
      tt->enum_def.fields[1].val = MIN;
    tt->single_val.e = MAX;
    tt++;
    
    // Parameter 'interest_min_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("interest_min_value");
    tt->descr = tdrpStrDup("Minimun interest value when using an interest filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to INTEREST_FILTER.\nIf the interest value within the storm's polygon is greater than or equal to this value, the storm will be included in the \"passing\" list. Otherwise, the storm will be included in the \"failing\" list. See interest_value_type for details on what the interest value is.");
    tt->val_offset = (char *) &interest_min_value - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'interest_storm_growth'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("interest_storm_growth");
    tt->descr = tdrpStrDup("Amount (in km) to grow storms when using an interest filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to INTEREST_FILTER.\nBefore comparing to the interest grid, each of the storms is grown by this amount around its border. The growth is done by increasing the distance from the centroid of each vertex in the polygon by this amount. So, there will be funny results in pathelogical cases, like bow shaped storms, where the centroid is not within the polygon.\nA negative growth value can be used, but strange results will occur for any storm vertex that is not at least that far from the centroid.");
    tt->val_offset = (char *) &interest_storm_growth - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'partition_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("partition_url");
    tt->descr = tdrpStrDup("Partition field URL when using a partition filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to PARTITION_FILTER.");
    tt->val_offset = (char *) &partition_url - &_start_;
    tt->single_val.s = tdrpStrDup("mdvp:://localhost::mdv/partition");
    tt++;
    
    // Parameter 'partition_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("partition_field_name");
    tt->descr = tdrpStrDup("Partition field name when using a partition filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to PARTITION_FILTER.\nSpecifies the partition field name exactly as it appears in the partition MDV file.");
    tt->val_offset = (char *) &partition_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("partition");
    tt++;
    
    // Parameter 'partition_level_num'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("partition_level_num");
    tt->descr = tdrpStrDup("Partition field level when using a partition filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to PARTITION_FILTER.\nSpecifies the level number to use as the partition field since the partition field must be 2-dimensional.");
    tt->val_offset = (char *) &partition_level_num - &_start_;
    tt->has_min = TRUE;
    tt->min_val.l = 0;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'partition_max_valid_secs'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("partition_max_valid_secs");
    tt->descr = tdrpStrDup("Maximum valid seconds for the input partition field");
    tt->help = tdrpStrDup("Used only if filter_type is set to PARTITION_FILTER.\nSpecifies how old the partition field can be. If the partition field is older than this, it will not be used.");
    tt->val_offset = (char *) &partition_max_valid_secs - &_start_;
    tt->single_val.l = 3600;
    tt++;
    
    // Parameter 'partition_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("partition_value");
    tt->descr = tdrpStrDup("Partition value when using a partition filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to PARTITION_FILTER.\nIf the storm's polygon is filled with greater than partition_percent percent of this value, the storm will be included in the \"passing\" list. Otherwise, the storm will be included in the \"failing\" list.");
    tt->val_offset = (char *) &partition_value - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'partition_percent'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("partition_percent");
    tt->descr = tdrpStrDup("Percentage of partition value required when using a partition filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to PARTITION_FILTER.\nIf the storm's polygon is filled with greater than this percent of the value given in the partition_value parameter, the storm will be included in the \"passing\" list. Otherwise, the storm will be included in the \"failing\" list.");
    tt->val_offset = (char *) &partition_percent - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 1;
    tt->single_val.d = 0.75;
    tt++;
    
    // Parameter 'partition_storm_growth'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("partition_storm_growth");
    tt->descr = tdrpStrDup("Amount (in km) to grow storms when using a partition filter");
    tt->help = tdrpStrDup("Used only if filter_type is set to PARTITION_FILTER.\nBefore comparing to the partition grid, each of the storms is grown by this amount around its border. The growth is done by increasing the distance from the centroid of each vertex in the polygon by this amount. So, there will be funny results in pathelogical cases, like bow shaped storms, where the centroid is not within the polygon.\nA negative growth value can be used, but strange results will occur for any storm vertex that is not at least that far from the centroid.");
    tt->val_offset = (char *) &partition_storm_growth - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
