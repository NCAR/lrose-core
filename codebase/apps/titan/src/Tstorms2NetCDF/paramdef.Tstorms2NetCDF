/*********************************************************
 * parameter definitions for Tstorms2NetCDF
 *
 * Mike Dixon, EOL, NCAR
 * P.O.Box 3000, Boulder, CO, USA, 80307-3000
 *
 * May 2025
 */

commentdef {
  p_header = "Tstorms2NetCDF program";
  p_text = "Tstorms2NetCDF reads native TITAN binary data files, converts the data into NetCDF format, and writes the data out in NetCDF files.";
}

commentdef {
  p_header = "DEBUGGING AND PROCESS CONTROL";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE
} debug_t;
  
paramdef enum debug_t
{
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

typedef enum {
  ARCHIVE, FILELIST
} input_mode_t;

paramdef enum input_mode_t {
  p_default = ARCHIVE;
  p_descr = "Input file mode";
  p_help = "In ARCHIVE mode, all of the scans in a series of track files are processed. In FILELIST mode, the program processes a list of files specified on the command line.";
} input_mode;

commentdef {
  p_header = "DATA INPUT.";
}

paramdef string {
  p_default = "titan/storms";
  p_descr = "Directory for input TITAN storm data.";
  p_help = "For ARCHIVE mode only - we search for the files in this directory between the specified start and end times. If this path is not absolute (starts with /) or relative (starts with .) it will be taken relative to $DATA_DIR.";
} input_dir;

commentdef {
  p_header = "OUTPUT DETAILS";
  p_text = "Details for the output NetCDF files.";
}
	
paramdef string {
  p_default = "./output/netcdf";
  p_descr = "Output dir for NetCDF files.";
} output_dir;

commentdef {
  p_header = "OPTION TO REVERSE SENSE OF CONVERSION";
  p_text = "Read NetCDF, write legacy files.";
}
	
paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to reverse the sense of the conversion - for testing.";
  p_help = "If TRUE, read NetCDF files, write legacy files.";
} convert_to_legacy;

commentdef {
  p_header = "OPTION TO TEST TRUNCATION OPTION";
  p_text = "Truncation is used by Titan when it reprocesses scans that have previously been handled.";
}
	
paramdef boolean {
  p_default = FALSE;
  p_descr = "Option to test the truncation option.";
  p_help = "If TRUE, the output data will be truncated at the specified scan number.";
} test_truncation;

paramdef int {
  p_default = -1;
  p_descr = "Scan number for truncation test.";
  p_help = "This scan will be kept. The storm data for all subsequent scans will be set to missing. All tracking data will be set to missing.";
} truncation_scan_number;

