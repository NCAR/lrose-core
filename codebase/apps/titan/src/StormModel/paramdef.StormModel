/*********************************************************
 * parameter definitions for StormModel
 *
 * Mike Dixon, RAP, NCXAR, Boulder, CO, USA, 80307-3000
 *
 * February 1998
 */

paramdef enum debug
{
  p_options = {DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE};
  p_default = {DEBUG_OFF};	
  p_descr = "Debug option";	
  p_help = "If set, debug messages will be printed appropriately";
} debug;

paramdef long {
  p_default = {0};
  p_min = {0};
  p_max = {3};
  p_descr = "Malloc debug level";
  p_help = "0 - none, 1 - corruption checking, 2 - records all malloc blocks and checks, 3 - printout of all mallocs etc.";
} malloc_debug_level;

paramdef char* {
  p_default = {"Test"};
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

paramdef long {
  p_default = {10000};
  p_descr = "Number of storms generated.";
  p_help = "StormModel generates a number of artificial storms. This is the number generated.";
} nstorms_gen;

paramdef long {
  p_default = {-1};
  p_descr = "Seed for random number generator.";
  p_help = "If -1, unix time is used as the seed.";
} random_seed;

paramdef struct event_dur_hist {
  p_descr = "Gamma distribution parameters for duration of events.";
  p_help = "This distribution is used to generate the duration of the event periods.";
  p_field_type = {double, double};
  p_field_name = {shape, scale};
} event_dur_gamma;

paramdef struct event_start_tod_hist {
  p_descr = "Density histogram for time-of-day of start of events.";
  p_help = "This histogram is used to construct a PDF from which to sample the start tod. The values are in hours (for time) and density (for probability).";
  p_field_type = {double, double};
  p_field_name = {time, prob};
} event_start_tod_hist[];

paramdef struct event_gap_gamma {
  p_descr = "Gamma distribution parameters for event gap.";
  p_help = "Event gap is the number of hours between end of one event period and the start of the next. It is gamma distributed";
  p_field_type = {double, double};
  p_field_name = {shape, scale};
} event_gap_gamma;

paramdef double {
  p_default = {3.0};
  p_descr = "Minimum event gap (hr)";
  p_help = "This is the minimum event gap. It corresponds to the value of event_gap_max for the program TimeProps. Any gap less than this time is not considered a gap in event, but rather a temporary lull.";
} event_gap_min;

paramdef struct ln_storm_start_gap_norm {
  p_descr = "Normal distribution parameters for ln of storm start gap.";
  p_help = "Storm start gap is the number of hours between the start of one storm in an event and the start of the next storm. It is lognormally distributed";
  p_field_type = {double, double};
  p_field_name = {mean, sdev};
} ln_storm_start_gap_norm;

paramdef double {
  p_default = {0.05};
  p_max = {0.10};
  p_descr = "Minimum storm start gap (hr)";
  p_help = "This is the minimum storm start gap. It is set non-zero to prevent large numbers of very small start gaps.";
} storm_start_gap_min;

paramdef struct Dm_gamma {
  p_descr = "3-param Gamma distribution parameters for Dm variate.";
  p_help = "Dm is the Duration Measure. It is effectively the 'standard deviation' of the storm Area-time curve when fitted with a Gaussian.";
  p_field_type = {double, double, double};
  p_field_name = {shape, scale, lbound};
} Dm_gamma;

paramdef double {
  p_default = {0.5};
  p_min = {0.0};
  p_descr = "Minimum track duration (hrs).";
  p_help = "This should match the min_duration value in TrackProps. Note however that TrackProps uses secs for units.";
} min_duration;

paramdef double {
  p_default = {8.0};
  p_min = {0.0};
  p_descr = "Maximum track duration (hrs).";
  p_help = "This is the maximum allowable duration. If a longer duration is generated it is rejected and the process repeated.";
} max_duration;

paramdef double {
  p_default = {9.0};
  p_min = {0.0};
  p_descr = "Maximum log of mean area.";
  p_help = "This is the maximum allowable lnA. If a greater lnA is generated it is rejected and the process repeated.";
} max_lnA;

paramdef struct lnA_vs_Dm {
  p_descr = "Correlation and distribution parameters for ln(A) as a function of Dm.";
  p_help = "The conditional distribution of ln(A), given Dm, is a 3-parameter gamma. The lnA_vs_Dm array gives the shape, scale and min values for the gamma distribution of ln(A) for set values of Dm. The values for an actual Dm are interpolated from this array.";
  p_field_type = {double, double, double, double};
  p_field_name = {Dm, shape, scale, lbound};
} lnA_vs_Dm[];

paramdef double {
  p_default = {10.0};
  p_descr = "Area threshold (km2).";
  p_help = "This area is used to compute storm duration form the Gaussian which relates a(t) = f(A, Dm, t).";
} area_threshold;

paramdef struct dBZmax_vs_Dm {
  p_descr = "Correlation and distribution parameters for dBZmax as a function of Dm.";
  p_help = "The conditional distribution of dbzMax, given Dm, is normal. The dBZmax_vs_Dm array gives the mean and standard deviation values for dbzMax for set values of Dm. The values for an actual Dm are interpolated from this array.";
  p_field_type = {double, double, double};
  p_field_name = {Dm, mean, sdev};
} dBZmax_vs_Dm[];

paramdef double {
  p_default = {360.0};
  p_min = {0.0};
  p_max = {1800.0};
  p_descr = "Radar vol scan interval (secs)";
  p_help = "Interval between radar volume scans (secs). Used to compute the number of scans for a generated storm.";
} scan_interval;

paramdef double {
  p_default = {35.0};
  p_min = {-30.0};
  p_max = {80.0};
  p_descr = "Lower dBZ threshold.";
  p_help = "This value is added to the dbzMax values (which are relative to the threshold) to produce the dbzMax.";
} dbz_threshold;

paramdef char* {
  p_default = {"none"};
  p_descr = "MDV file path for start point data.";
  p_help = "The model uses this data for randomly selecting storm start points.";
} mid_point_file_path;

paramdef long {
  p_default = {0};
  p_descr = "Field number for mid_point data in MDV file.";
  p_help = "See mid_point_file_path.";
} mid_point_field_num;

paramdef double {
  p_default = {10.0};
  p_descr = "Standard deviation for start point location.";
  p_help = "First a mid_point is generated from the MDV cumulative density function for mid_point data. Then the position is varied randomly in x and y by assuming a normal spread with this sdev.";
} mid_point_sdev;

paramdef char* {
  p_default = {"none"};
  p_descr = "MDV file path for duration data.";
  p_help = "The model uses this data for generating storm duration. A duration is generated from the Gamma distribution, and the result is scaled by the duration at the point over the mean duration for the entire grid.";
} duration_file_path;

paramdef long {
  p_default = {0};
  p_descr = "Field number for duration data in MDV file.";
  p_help = "See duration_file_path.";
} duration_field_num;

paramdef char* {
  p_default = {"none"};
  p_descr = "MDV file path for ln(area) data.";
  p_help = "The model uses this data for generating storm area. ln(area) is generated from a gamma distribution conditioned on the Dm variable.The result is scaled by the ratio of ln(area) at the point over the mean for the entire grid.";
} ln_area_file_path;

paramdef long {
  p_default = {0};
  p_descr = "Field number for ln area data in MDV file.";
  p_help = "See ln_area_file_path.";
} ln_area_field_num;

paramdef char* {
  p_default = {"none"};
  p_descr = "MDV file path for mean U and V data.";
  p_help = "For a given point, selected from the mid_point array, the mean U and V data is determined. Then, the model U and V is selected using these mean values, and the area-wide standard deviations of the U and V fields.";
} velocity_file_path;

paramdef long {
  p_default = {0};
  p_descr = "Field number for mean U data in MDV file.";
  p_help = "See velocity_file_path.";
} u_mean_field_num;

paramdef long {
  p_default = {0};
  p_descr = "Field number for mean V data in MDV file.";
  p_help = "See velocity_file_path.";
} v_mean_field_num;

paramdef double {
  p_default = {0};
  p_descr = "Standard deviation for U data.";
  p_help = "See velocity_file_path.";
} u_sdev;

paramdef double {
  p_default = {0};
  p_descr = "Standard deviation for V data.";
  p_help = "See velocity_file_path.";
} v_sdev;

paramdef struct ln_ellipse_ratio_norm {
  p_descr = "Normal distribution parameters for ln of ellipse ratio.";
  p_help = "Ellipse ratio is the aspect ratio (major radius / minor radius) of the ellipse fitted to the storm shape. It is lognormally distributed";
  p_field_type = {double, double};
  p_field_name = {mean, sdev};
} ln_ellipse_ratio_norm;

paramdef struct ellipse_orientation_norm {
  p_descr = "Normal distribution parameters for ellipse orientation.";
  p_help = "Ellipse orientation is the orientation relative to TN  of the ellipse fitted to the storm shape. It is normally distributed";
  p_field_type = {double, double};
  p_field_name = {mean, sdev};
} ellipse_orientation_norm;








