/*******************************************
 * StormModel_tdrp.h
 *
 * TDRP header file for 'StormModel' module.
 *
 * Code for program StormModel
 *
 * This header file has been automatically
 * generated by TDRP, do not modify.
 *
 *******************************************/

#ifndef _StormModel_tdrp_h
#define _StormModel_tdrp_h

#ifdef __cplusplus
extern "C" {
#endif

#include <tdrp/tdrp.h>

/*
 * typedefs
 */

typedef enum {
  DEBUG_OFF = 0,
  DEBUG_NORM = 1,
  DEBUG_VERBOSE = 2
} StormModel_debug;

typedef struct {
  double shape;
  double scale;
} StormModel_event_dur_hist;

typedef struct {
  double time;
  double prob;
} StormModel_event_start_tod_hist;

typedef struct {
  double shape;
  double scale;
} StormModel_event_gap_gamma;

typedef struct {
  double mean;
  double sdev;
} StormModel_ln_storm_start_gap_norm;

typedef struct {
  double shape;
  double scale;
  double lbound;
} StormModel_Dm_gamma;

typedef struct {
  double Dm;
  double shape;
  double scale;
  double lbound;
} StormModel_lnA_vs_Dm;

typedef struct {
  double Dm;
  double mean;
  double sdev;
} StormModel_dBZmax_vs_Dm;

typedef struct {
  double mean;
  double sdev;
} StormModel_ln_ellipse_ratio_norm;

typedef struct {
  double mean;
  double sdev;
} StormModel_ellipse_orientation_norm;

/*
 * typedef for main struct - StormModel_tdrp_struct
 */

typedef struct {

  size_t struct_size;

  /***** debug *****/

  StormModel_debug debug;

  /***** malloc_debug_level *****/

  long malloc_debug_level;

  /***** instance *****/

  char* instance;

  /***** nstorms_gen *****/

  long nstorms_gen;

  /***** random_seed *****/

  long random_seed;

  /***** event_dur_gamma *****/

  StormModel_event_dur_hist event_dur_gamma;

  /***** event_start_tod_hist *****/

  struct {
    StormModel_event_start_tod_hist *val;
    int len;
  } event_start_tod_hist;
  StormModel_event_start_tod_hist *_event_start_tod_hist;
  int event_start_tod_hist_n;

  /***** event_gap_gamma *****/

  StormModel_event_gap_gamma event_gap_gamma;

  /***** event_gap_min *****/

  double event_gap_min;

  /***** ln_storm_start_gap_norm *****/

  StormModel_ln_storm_start_gap_norm ln_storm_start_gap_norm;

  /***** storm_start_gap_min *****/

  double storm_start_gap_min;

  /***** Dm_gamma *****/

  StormModel_Dm_gamma Dm_gamma;

  /***** min_duration *****/

  double min_duration;

  /***** max_duration *****/

  double max_duration;

  /***** max_lnA *****/

  double max_lnA;

  /***** lnA_vs_Dm *****/

  struct {
    StormModel_lnA_vs_Dm *val;
    int len;
  } lnA_vs_Dm;
  StormModel_lnA_vs_Dm *_lnA_vs_Dm;
  int lnA_vs_Dm_n;

  /***** area_threshold *****/

  double area_threshold;

  /***** dBZmax_vs_Dm *****/

  struct {
    StormModel_dBZmax_vs_Dm *val;
    int len;
  } dBZmax_vs_Dm;
  StormModel_dBZmax_vs_Dm *_dBZmax_vs_Dm;
  int dBZmax_vs_Dm_n;

  /***** scan_interval *****/

  double scan_interval;

  /***** dbz_threshold *****/

  double dbz_threshold;

  /***** mid_point_file_path *****/

  char* mid_point_file_path;

  /***** mid_point_field_num *****/

  long mid_point_field_num;

  /***** mid_point_sdev *****/

  double mid_point_sdev;

  /***** duration_file_path *****/

  char* duration_file_path;

  /***** duration_field_num *****/

  long duration_field_num;

  /***** ln_area_file_path *****/

  char* ln_area_file_path;

  /***** ln_area_field_num *****/

  long ln_area_field_num;

  /***** velocity_file_path *****/

  char* velocity_file_path;

  /***** u_mean_field_num *****/

  long u_mean_field_num;

  /***** v_mean_field_num *****/

  long v_mean_field_num;

  /***** u_sdev *****/

  double u_sdev;

  /***** v_sdev *****/

  double v_sdev;

  /***** ln_ellipse_ratio_norm *****/

  StormModel_ln_ellipse_ratio_norm ln_ellipse_ratio_norm;

  /***** ellipse_orientation_norm *****/

  StormModel_ellipse_orientation_norm ellipse_orientation_norm;

} StormModel_tdrp_struct;

/*
 * function prototypes
 */

/*************************************************************
 * StormModel_tdrp_load_from_args()
 *
 * Loads up TDRP using the command line args.
 *
 * Check TDRP_usage() for command line actions associated with
 * this function.
 *
 *   argc, argv: command line args
 *
 *   StormModel_tdrp_struct *params: loads up this struct
 * 
 *   char **override_list: A null-terminated list of overrides
 *     to the parameter file.
 *     An override string has exactly the format of an entry
 *     in the parameter file itself.
 *
 *   char **params_path_p: if non-NULL, this is set to point to
 *                         the path of the params file used.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int StormModel_tdrp_load_from_args(int argc, char **argv,
                                StormModel_tdrp_struct *params,
                                char **override_list,
                                char **params_path_p);

/*************************************************************
 * StormModel_tdrp_load()
 *
 * Loads up TDRP for a given module.
 *
 * This version of load gives the programmer the option to load
 * up more than one module for a single application. It is a
 * lower-level routine than StormModel_tdrp_load_from_args,
 * and hence more flexible, but the programmer must do more work.
 *
 *   char *param_file_path: the parameter file to be read in.
 *
 *   StormModel_tdrp_struct *params: loads up this struct
 *
 *   char **override_list: A null-terminated list of overrides
 *     to the parameter file.
 *     An override string has exactly the format of an entry
 *     in the parameter file itself.
 *
 *  expand_env: flag to control environment variable
 *                expansion during tokenization.
 *              If TRUE, environment expansion is set on.
 *              If FALSE, environment expansion is set off.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int StormModel_tdrp_load(char *param_file_path,
                      StormModel_tdrp_struct *params,
                      char **override_list,
                      int expand_env, int debug);

/*************************************************************
 * StormModel_tdrp_load_defaults()
 *
 * Loads up defaults for a given module.
 *
 * See StormModel_tdrp_load() for more details.
 *
 *  Returns 0 on success, -1 on failure.
 */

extern int StormModel_tdrp_load_defaults(StormModel_tdrp_struct *params,
                               int expand_env);

/*************************************************************
 * StormModel_tdrp_sync()
 *
 * Syncs the user struct data back into the parameter table,
 * in preparation for printing.
 */

extern void StormModel_tdrp_sync(void);

/*************************************************************
 * StormModel_tdrp_print()
 * 
 * Print params file
 *
 * The modes supported are:
 *
 *   PRINT_SHORT:   main comments only, no help or descriptions
 *                  structs and arrays on a single line
 *   PRINT_NORM:    short + descriptions and help
 *   PRINT_LONG:    norm  + arrays and structs expanded
 *   PRINT_VERBOSE: long  + private params included
 */

extern void StormModel_tdrp_print(FILE *out, tdrp_print_mode_t mode);

/*************************************************************
 * StormModel_tdrp_free_all()
 *
 * Frees up all TDRP dynamic memory.
 */

extern void StormModel_tdrp_free_all(void);

/*************************************************************
 * StormModel_tdrp_check_all_set()
 *
 * Return TRUE if all set, FALSE if not.
 *
 * If out is non-NULL, prints out warning messages for those
 * parameters which are not set.
 */

extern int StormModel_tdrp_check_all_set(FILE *out);

/*************************************************************
 * StormModel_tdrp_check_is_set()
 *
 * Return TRUE if parameter is set, FALSE if not.
 *
 */

extern int StormModel_tdrp_check_is_set(char *param_name);

/*************************************************************
 * StormModel_tdrp_array_realloc()
 *
 * Realloc 1D array.
 *
 * If size is increased, the values from the last array entry is
 * copied into the new space.
 *
 * Returns 0 on success, -1 on error.
 */

extern int StormModel_tdrp_array_realloc(char *param_name,
                              int new_array_n);

/*************************************************************
 * StormModel_tdrp_array2D_realloc()
 *
 * Realloc 2D array.
 *
 * If size is increased, the values from the last array entry is
 * copied into the new space.
 *
 * Returns 0 on success, -1 on error.
 */

extern int StormModel_tdrp_array2D_realloc(char *param_name,
                                 int new_array_n1,
                                 int new_array_n2);

/*************************************************************
 * StormModel_tdrp_table()
 *
 * Returns pointer to static Table for this module.
 */

extern TDRPtable *StormModel_tdrp_table(void);

/*************************************************************
 * StormModel_tdrp_init()
 *
 * Module table initialization function.
 *
 *
 * Returns pointer to static Table for this module.
 */

extern TDRPtable *StormModel_tdrp_init(StormModel_tdrp_struct *params);

#ifdef __cplusplus
}
#endif

#endif

