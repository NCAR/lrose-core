/****************************************************
 * TDRP params for StormModel
 ****************************************************/

/*
 * Debug option.
 * If set, debug messages will be printed appropriately.
 *
 * Type: enum
 * Default: DEBUG_OFF 
 * Legal values: DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE.
 */
debug = DEBUG_OFF;

/*
 * Malloc debug level.
 * 0 - none, 1 - corruption checking, 2 - records all malloc blocks
 *   and checks, 3 - printout of all mallocs etc.
 *
 * Type: long
 * Default: 0 
 * Min value: 0 
 * Max value: 3 
 */
malloc_debug_level = 0;

/*
 * Process instance.
 * Used for registration with procmap.
 *
 * Type: string
 * Default: "Test" 
 */
instance = "Test";

/*
 * Number of storms generated.
 * StormModel generates a number of artificial storms. This is
 *   the number generated.
 *
 * Type: long
 * Default: 10000 
 */
nstorms_gen = 7800;

/*
 * Seed for random number generator.
 * If -1, unix time is used as the seed.
 *
 * Type: long
 * Default: -1 
 */
random_seed = 123456789;

/*
 * Gamma distribution parameters for duration of events.
 * This distribution is used to generate the duration of the event
 *   periods.
 *
 * Type: struct
 */
event_dur_gamma = {
  4.0, /* shape:double */
  1.85  /* scale:double */
};

/*
 * Density histogram for time-of-day of start of events.
 * This histogram is used to construct a PDF from which to sample
 *   the start tod. The values are in hours (for time) and density
 *   (for probability).
 *
 * Type: struct
 * Array elem size: 16 bytes
 * Array has no max number of elements
 */
event_start_tod_hist = {
  {0.5, 0.000000000},
  {1.5, 0.000000000},
  {2.5, 0.000000000},
  {3.5, 0.000000000},
  {4.5, 0.015151515},
  {5.5, 0.022727273},
  {6.5, 0.007575758},
  {7.5, 0.000000000},
  {8.5, 0.030303030},
  {9.5, 0.060606061},
  {10.5, 0.166666667},
  {11.5, 0.212121212},
  {12.5, 0.181818182},
  {13.5, 0.090909091},
  {14.5, 0.113636364},
  {15.5, 0.015151515},
  {16.5, 0.015151515},
  {17.5, 0.022727273},
  {18.5, 0.000000000},
  {19.5, 0.007575758},
  {20.5, 0.007575758},
  {21.5, 0.015151515},
  {22.5, 0.000000000},
  {23.5, 0.015151515}
};

/*
 * Gamma distribution parameters for event gap.
 * Event gap is the number of hours between end of one event period
 *   and the start of the next. It is gamma distributed.
 *
 * Type: struct
 */
event_gap_gamma = {
  0.65, /* shape:double */
  61.5  /* scale:double */
};

/*
 * Minimum event gap (hr).
 * This is the minimum event gap. It corresponds to the value
 *   of event_gap_max for the program TimeProps. Any gap less
 *   than this time is not considered a gap in event, but rather
 *   a temporary lull.
 *
 * Type: double
 * Default: 3 
 */
event_gap_min = 2;

/*
 * Normal distribution parameters for ln of storm start gap.
 * Storm start gap is the number of hours between the start of one
 *   storm in an event and the start of the next storm. It is
 *   lognormally distributed.
 *
 * Type: struct
 */
ln_storm_start_gap_norm = {
  -1.948, /* mean:double */
  1.039  /* sdev:double */
};

/*
 * Minimum storm start gap (hr).
 * This is the minimum storm start gap. It is set non-zero to prevent
 *   large numbers of very small start gaps.
 *
 * Type: double
 * Default: 0.05 
 * Max value: 0.1 
 */
storm_start_gap_min = 0.05;

/*
 * 3-param Gamma distribution parameters for Dm variate.
 * Dm is the Duration Measure. It is effectively the 'standard
 *   deviation' of the storm Area-time curve when fitted with a Gaussian.
 *
 * Type: struct
 */
Dm_gamma = {
  0.8, /* shape:double */
  0.182, /* scale:double */
  0.075  /* lbound:double */
};

/*
 * Minimum track duration (hrs).
 * This should match the min_duration value in TrackProps. Note
 *   however that TrackProps uses secs for units.
 *
 * Type: double
 * Default: 0.5 
 * Min value: 0 
 */
min_duration = 0.417;

/*
 * Maximum track duration (hrs).
 * This is the maximum allowable duration. If a longer duration
 *   is generated it is rejected and the process repeated.
 *
 * Type: double
 * Default: 8 
 * Min value: 0 
 */
max_duration = 8.2;

/*
 * Maximum log of mean area.
 * This is the maximum allowable lnA. If a greater lnA is generated
 *   it is rejected and the process repeated.
 *
 * Type: double
 * Default: 9 
 * Min value: 0 
 */
max_lnA = 9.068;

/*
 * Correlation and distribution parameters for ln(A) as a function
 *   of Dm.
 * The conditional distribution of ln(A), given Dm, is a 3-parameter
 *   gamma. The lnA_vs_Dm array gives the shape, scale and min values
 *   for the gamma distribution of ln(A) for set values of Dm. The
 *   values for an actual Dm are interpolated from this array.
 *
 * Type: struct
 * Array elem size: 32 bytes
 * Array has no max number of elements
 */
lnA_vs_Dm = {
  {0.125, 5.0, 0.319, 1.832},
  {0.375, 5.0, 0.352, 2.584},
  {0.625, 5.0, 0.392, 3.058},
  {0.875, 5.0, 0.380, 3.715},
  {1.125, 5.0, 0.380, 4.297},
  {1.375, 5.0, 0.380, 4.300}
};

/*
 * Area threshold (km2).
 * This area is used to compute storm duration form the Gaussian
 *   which relates a(t) = f(A, Dm, t).
 *
 * Type: double
 * Default: 10 
 */
area_threshold = 10;

/*
 * Correlation and distribution parameters for dBZmax as a function
 *   of Dm.
 * The conditional distribution of dbzMax, given Dm, is normal.
 *   The dBZmax_vs_Dm array gives the mean and standard deviation
 *   values for dbzMax for set values of Dm. The values for an actual
 *   Dm are interpolated from this array.
 *
 * Type: struct
 * Array elem size: 24 bytes
 * Array has no max number of elements
 */
dBZmax_vs_Dm = {
  {
    0.125, /* Dm:double */
    53.8, /* mean:double */
    6.9  /* sdev:double */
  }, {
    0.375, /* Dm:double */
    59.2, /* mean:double */
    6.7  /* sdev:double */
  }, {
    0.625, /* Dm:double */
    64.0, /* mean:double */
    6.1  /* sdev:double */
  }, {
    0.875, /* Dm:double */
    65.6, /* mean:double */
    5.7  /* sdev:double */
  }, {
    1.125, /* Dm:double */
    67.1, /* mean:double */
    5.7  /* sdev:double */
  }, {
    1.375, /* Dm:double */
    67.6, /* mean:double */
    5.7  /* sdev:double */
  }
};

/*
 * Lower dBZ threshold.
 * This value is added to the dbzMax values (which are relative
 *   to the threshold) to produce the dbzMax.
 *
 * Type: double
 * Default: 35 
 * Min value: -30 
 * Max value: 80 
 */
dbz_threshold = 35;

/*
 * MDV file path for start point data.
 * The model uses this data for randomly selecting storm start
 *   points.
 *
 * Type: string
 * Default: "none" 
 */
start_point_file_path = "../TrackGridStats/titan/19940805/135824.mdv";

/*
 * Field number for start_point data in MDV file.
 * See start_point_file_path.
 *
 * Type: long
 * Default: 0 
 */
start_point_field_num = 4;

/*
 * Standard deviation for start point location.
 * First a start_point is generated from the MDV cumulative density
 *   function for start_point data. Then the position is varied
 *   randomly in x and y by assuming a normal spread with this sdev.
 *
 * Type: double
 * Default: 10 
 */
start_point_sdev = 10;

/*
 * MDV file path for duration data.
 * The model uses this data for generating storm duration. A duration
 *   is generated from the Gamma distribution, and the result is
 *   scaled by the duration at the point over the mean duration for
 *   the entire grid.
 *
 * Type: string
 * Default: "none" 
 */
duration_file_path = "../TrackGridStats/titan/19940805/135824.mdv";

/*
 * Field number for duration data in MDV file.
 * See duration_file_path.
 *
 * Type: long
 * Default: 0 
 */
duration_field_num = 18;

/*
 * MDV file path for ln(area) data.
 * The model uses this data for generating storm area. ln(area)
 *   is generated from a gamma distribution conditioned on the Dm
 *   variable.The result is scaled by the ratio of ln(area) at the
 *   point over the mean for the entire grid.
 *
 * Type: string
 * Default: "none" 
 */
ln_area_file_path = "../TrackGridStats/titan/19940805/135824.mdv";

/*
 * Field number for ln area data in MDV file.
 * See ln_area_file_path.
 *
 * Type: long
 * Default: 0 
 */
ln_area_field_num = 19;

/*
 * MDV file path for mean U and V data.
 * For a given point, selected from the start_point array, the
 *   mean U and V data is determined. Then, the model U and V is selected
 *   using these mean values, and the area-wide standard deviations
 *   of the U and V fields.
 *
 * Type: string
 * Default: "none" 
 */
velocity_file_path = "../TrackGridStats/titan/19940805/135824.mdv";

/*
 * Field number for mean U data in MDV file.
 * See velocity_file_path.
 *
 * Type: long
 * Default: 0 
 */
u_mean_field_num = 11;

/*
 * Field number for mean V data in MDV file.
 * See velocity_file_path.
 *
 * Type: long
 * Default: 0 
 */
v_mean_field_num = 12;

/*
 * Standard deviation for U data.
 * See velocity_file_path.
 *
 * Type: double
 * Default: 0 
 */
u_sdev = 10.91;

/*
 * Standard deviation for V data.
 * See velocity_file_path.
 *
 * Type: double
 * Default: 0 
 */
v_sdev = 12.03;

/*
 * Normal distribution parameters for ln of ellipse ratio.
 * Ellipse ratio is the aspect ratio (major radius / minor radius)
 *   of the ellipse fitted to the storm shape. It is lognormally distributed.
 *
 * Type: struct
 */
ln_ellipse_ratio_norm = {
  0.494, /* mean:double */
  0.152  /* sdev:double */
};

/*
 * Normal distribution parameters for ellipse orientation.
 * Ellipse orientation is the orientation relative to TN of the
 *   ellipse fitted to the storm shape. It is normally distributed.
 *
 * Type: struct
 */
ellipse_orientation_norm = {
  83.03, /* mean:double */
  25.8  /* sdev:double */
};


