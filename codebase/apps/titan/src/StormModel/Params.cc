/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program StormModel
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'nstorms_gen'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("nstorms_gen");
    tt->descr = tdrpStrDup("Number of storms generated.");
    tt->help = tdrpStrDup("StormModel generates a number of artificial storms. This is the number generated.");
    tt->val_offset = (char *) &nstorms_gen - &_start_;
    tt->single_val.i = 10000;
    tt++;
    
    // Parameter 'random_seed'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("random_seed");
    tt->descr = tdrpStrDup("Seed for random number generator.");
    tt->help = tdrpStrDup("If -1, unix time is used as the seed.");
    tt->val_offset = (char *) &random_seed - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'event_dur_gamma'
    // ctype is '_event_dur_hist_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("event_dur_gamma");
    tt->descr = tdrpStrDup("Gamma distribution parameters for duration of events.");
    tt->help = tdrpStrDup("This distribution is used to generate the duration of the event periods.");
    tt->val_offset = (char *) &event_dur_gamma - &_start_;
    tt->struct_def.name = tdrpStrDup("event_dur_hist_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("shape");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &event_dur_gamma.shape - (char *) &event_dur_gamma;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("scale");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &event_dur_gamma.scale - (char *) &event_dur_gamma;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'event_start_tod_hist'
    // ctype is '_event_start_tod_hist_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("event_start_tod_hist");
    tt->descr = tdrpStrDup("Density histogram for time-of-day of start of events.");
    tt->help = tdrpStrDup("This histogram is used to construct a PDF from which to sample the start tod. The values are in hours (for time) and density (for probability).");
    tt->array_offset = (char *) &_event_start_tod_hist - &_start_;
    tt->array_n_offset = (char *) &event_start_tod_hist_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(event_start_tod_hist_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("event_start_tod_hist_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("time");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_event_start_tod_hist->time - (char *) _event_start_tod_hist;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("prob");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_event_start_tod_hist->prob - (char *) _event_start_tod_hist;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'event_gap_gamma'
    // ctype is '_event_gap_gamma_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("event_gap_gamma");
    tt->descr = tdrpStrDup("Gamma distribution parameters for event gap.");
    tt->help = tdrpStrDup("Event gap is the number of hours between end of one event period and the start of the next. It is gamma distributed");
    tt->val_offset = (char *) &event_gap_gamma - &_start_;
    tt->struct_def.name = tdrpStrDup("event_gap_gamma_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("shape");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &event_gap_gamma.shape - (char *) &event_gap_gamma;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("scale");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &event_gap_gamma.scale - (char *) &event_gap_gamma;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'event_gap_min'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("event_gap_min");
    tt->descr = tdrpStrDup("Minimum event gap (hr)");
    tt->help = tdrpStrDup("This is the minimum event gap. It corresponds to the value of event_gap_max for the program TimeProps. Any gap less than this time is not considered a gap in event, but rather a temporary lull.");
    tt->val_offset = (char *) &event_gap_min - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'ln_storm_start_gap_norm'
    // ctype is '_ln_storm_start_gap_norm_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ln_storm_start_gap_norm");
    tt->descr = tdrpStrDup("Normal distribution parameters for ln of storm start gap.");
    tt->help = tdrpStrDup("Storm start gap is the number of hours between the start of one storm in an event and the start of the next storm. It is lognormally distributed");
    tt->val_offset = (char *) &ln_storm_start_gap_norm - &_start_;
    tt->struct_def.name = tdrpStrDup("ln_storm_start_gap_norm_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("mean");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &ln_storm_start_gap_norm.mean - (char *) &ln_storm_start_gap_norm;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("sdev");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &ln_storm_start_gap_norm.sdev - (char *) &ln_storm_start_gap_norm;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'storm_start_gap_min'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("storm_start_gap_min");
    tt->descr = tdrpStrDup("Minimum storm start gap (hr)");
    tt->help = tdrpStrDup("This is the minimum storm start gap. It is set non-zero to prevent large numbers of very small start gaps.");
    tt->val_offset = (char *) &storm_start_gap_min - &_start_;
    tt->has_max = TRUE;
    tt->max_val.d = 0.1;
    tt->single_val.d = 0.05;
    tt++;
    
    // Parameter 'Dm_gamma'
    // ctype is '_Dm_gamma_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("Dm_gamma");
    tt->descr = tdrpStrDup("3-param Gamma distribution parameters for Dm variate.");
    tt->help = tdrpStrDup("Dm is the Duration Measure. It is effectively the 'standard deviation' of the storm Area-time curve when fitted with a Gaussian.");
    tt->val_offset = (char *) &Dm_gamma - &_start_;
    tt->struct_def.name = tdrpStrDup("Dm_gamma_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("shape");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &Dm_gamma.shape - (char *) &Dm_gamma;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("scale");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &Dm_gamma.scale - (char *) &Dm_gamma;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("lbound");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &Dm_gamma.lbound - (char *) &Dm_gamma;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0;
    tt++;
    
    // Parameter 'min_duration'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_duration");
    tt->descr = tdrpStrDup("Minimum track duration (hrs).");
    tt->help = tdrpStrDup("This should match the min_duration value in TrackProps. Note however that TrackProps uses secs for units.");
    tt->val_offset = (char *) &min_duration - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'max_duration'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_duration");
    tt->descr = tdrpStrDup("Maximum track duration (hrs).");
    tt->help = tdrpStrDup("This is the maximum allowable duration. If a longer duration is generated it is rejected and the process repeated.");
    tt->val_offset = (char *) &max_duration - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 8;
    tt++;
    
    // Parameter 'max_lnA'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_lnA");
    tt->descr = tdrpStrDup("Maximum log of mean area.");
    tt->help = tdrpStrDup("This is the maximum allowable lnA. If a greater lnA is generated it is rejected and the process repeated.");
    tt->val_offset = (char *) &max_lnA - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 9;
    tt++;
    
    // Parameter 'lnA_vs_Dm'
    // ctype is '_lnA_vs_Dm_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("lnA_vs_Dm");
    tt->descr = tdrpStrDup("Correlation and distribution parameters for ln(A) as a function of Dm.");
    tt->help = tdrpStrDup("The conditional distribution of ln(A), given Dm, is a 3-parameter gamma. The lnA_vs_Dm array gives the shape, scale and min values for the gamma distribution of ln(A) for set values of Dm. The values for an actual Dm are interpolated from this array.");
    tt->array_offset = (char *) &_lnA_vs_Dm - &_start_;
    tt->array_n_offset = (char *) &lnA_vs_Dm_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(lnA_vs_Dm_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("lnA_vs_Dm_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("Dm");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_lnA_vs_Dm->Dm - (char *) _lnA_vs_Dm;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("shape");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_lnA_vs_Dm->shape - (char *) _lnA_vs_Dm;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("scale");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_lnA_vs_Dm->scale - (char *) _lnA_vs_Dm;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("lbound");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_lnA_vs_Dm->lbound - (char *) _lnA_vs_Dm;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'area_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("area_threshold");
    tt->descr = tdrpStrDup("Area threshold (km2).");
    tt->help = tdrpStrDup("This area is used to compute storm duration form the Gaussian which relates a(t) = f(A, Dm, t).");
    tt->val_offset = (char *) &area_threshold - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'dBZmax_vs_Dm'
    // ctype is '_dBZmax_vs_Dm_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dBZmax_vs_Dm");
    tt->descr = tdrpStrDup("Correlation and distribution parameters for dBZmax as a function of Dm.");
    tt->help = tdrpStrDup("The conditional distribution of dbzMax, given Dm, is normal. The dBZmax_vs_Dm array gives the mean and standard deviation values for dbzMax for set values of Dm. The values for an actual Dm are interpolated from this array.");
    tt->array_offset = (char *) &_dBZmax_vs_Dm - &_start_;
    tt->array_n_offset = (char *) &dBZmax_vs_Dm_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(dBZmax_vs_Dm_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("dBZmax_vs_Dm_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("Dm");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_dBZmax_vs_Dm->Dm - (char *) _dBZmax_vs_Dm;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("mean");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_dBZmax_vs_Dm->mean - (char *) _dBZmax_vs_Dm;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("sdev");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_dBZmax_vs_Dm->sdev - (char *) _dBZmax_vs_Dm;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0;
    tt++;
    
    // Parameter 'scan_interval'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("scan_interval");
    tt->descr = tdrpStrDup("Radar vol scan interval (secs)");
    tt->help = tdrpStrDup("Interval between radar volume scans (secs). Used to compute the number of scans for a generated storm.");
    tt->val_offset = (char *) &scan_interval - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 1800;
    tt->single_val.d = 360;
    tt++;
    
    // Parameter 'dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_threshold");
    tt->descr = tdrpStrDup("Lower dBZ threshold.");
    tt->help = tdrpStrDup("This value is added to the dbzMax values (which are relative to the threshold) to produce the dbzMax.");
    tt->val_offset = (char *) &dbz_threshold - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = -30;
    tt->max_val.d = 80;
    tt->single_val.d = 35;
    tt++;
    
    // Parameter 'mid_point_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("mid_point_file_path");
    tt->descr = tdrpStrDup("MDV file path for start point data.");
    tt->help = tdrpStrDup("The model uses this data for randomly selecting storm start points.");
    tt->val_offset = (char *) &mid_point_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("none");
    tt++;
    
    // Parameter 'mid_point_field_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("mid_point_field_num");
    tt->descr = tdrpStrDup("Field number for mid_point data in MDV file.");
    tt->help = tdrpStrDup("See mid_point_file_path.");
    tt->val_offset = (char *) &mid_point_field_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'mid_point_sdev'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("mid_point_sdev");
    tt->descr = tdrpStrDup("Standard deviation for start point location.");
    tt->help = tdrpStrDup("First a mid_point is generated from the MDV cumulative density function for mid_point data. Then the position is varied randomly in x and y by assuming a normal spread with this sdev.");
    tt->val_offset = (char *) &mid_point_sdev - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'duration_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("duration_file_path");
    tt->descr = tdrpStrDup("MDV file path for duration data.");
    tt->help = tdrpStrDup("The model uses this data for generating storm duration. A duration is generated from the Gamma distribution, and the result is scaled by the duration at the point over the mean duration for the entire grid.");
    tt->val_offset = (char *) &duration_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("none");
    tt++;
    
    // Parameter 'duration_field_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("duration_field_num");
    tt->descr = tdrpStrDup("Field number for duration data in MDV file.");
    tt->help = tdrpStrDup("See duration_file_path.");
    tt->val_offset = (char *) &duration_field_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'ln_area_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("ln_area_file_path");
    tt->descr = tdrpStrDup("MDV file path for ln(area) data.");
    tt->help = tdrpStrDup("The model uses this data for generating storm area. ln(area) is generated from a gamma distribution conditioned on the Dm variable.The result is scaled by the ratio of ln(area) at the point over the mean for the entire grid.");
    tt->val_offset = (char *) &ln_area_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("none");
    tt++;
    
    // Parameter 'ln_area_field_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("ln_area_field_num");
    tt->descr = tdrpStrDup("Field number for ln area data in MDV file.");
    tt->help = tdrpStrDup("See ln_area_file_path.");
    tt->val_offset = (char *) &ln_area_field_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'velocity_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("velocity_file_path");
    tt->descr = tdrpStrDup("MDV file path for mean U and V data.");
    tt->help = tdrpStrDup("For a given point, selected from the mid_point array, the mean U and V data is determined. Then, the model U and V is selected using these mean values, and the area-wide standard deviations of the U and V fields.");
    tt->val_offset = (char *) &velocity_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("none");
    tt++;
    
    // Parameter 'u_mean_field_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("u_mean_field_num");
    tt->descr = tdrpStrDup("Field number for mean U data in MDV file.");
    tt->help = tdrpStrDup("See velocity_file_path.");
    tt->val_offset = (char *) &u_mean_field_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'v_mean_field_num'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("v_mean_field_num");
    tt->descr = tdrpStrDup("Field number for mean V data in MDV file.");
    tt->help = tdrpStrDup("See velocity_file_path.");
    tt->val_offset = (char *) &v_mean_field_num - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'u_sdev'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("u_sdev");
    tt->descr = tdrpStrDup("Standard deviation for U data.");
    tt->help = tdrpStrDup("See velocity_file_path.");
    tt->val_offset = (char *) &u_sdev - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'v_sdev'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("v_sdev");
    tt->descr = tdrpStrDup("Standard deviation for V data.");
    tt->help = tdrpStrDup("See velocity_file_path.");
    tt->val_offset = (char *) &v_sdev - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'ln_ellipse_ratio_norm'
    // ctype is '_ln_ellipse_ratio_norm_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ln_ellipse_ratio_norm");
    tt->descr = tdrpStrDup("Normal distribution parameters for ln of ellipse ratio.");
    tt->help = tdrpStrDup("Ellipse ratio is the aspect ratio (major radius / minor radius) of the ellipse fitted to the storm shape. It is lognormally distributed");
    tt->val_offset = (char *) &ln_ellipse_ratio_norm - &_start_;
    tt->struct_def.name = tdrpStrDup("ln_ellipse_ratio_norm_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("mean");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &ln_ellipse_ratio_norm.mean - (char *) &ln_ellipse_ratio_norm;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("sdev");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &ln_ellipse_ratio_norm.sdev - (char *) &ln_ellipse_ratio_norm;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'ellipse_orientation_norm'
    // ctype is '_ellipse_orientation_norm_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ellipse_orientation_norm");
    tt->descr = tdrpStrDup("Normal distribution parameters for ellipse orientation.");
    tt->help = tdrpStrDup("Ellipse orientation is the orientation relative to TN  of the ellipse fitted to the storm shape. It is normally distributed");
    tt->val_offset = (char *) &ellipse_orientation_norm - &_start_;
    tt->struct_def.name = tdrpStrDup("ellipse_orientation_norm_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("mean");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &ellipse_orientation_norm.mean - (char *) &ellipse_orientation_norm;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("sdev");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &ellipse_orientation_norm.sdev - (char *) &ellipse_orientation_norm;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
