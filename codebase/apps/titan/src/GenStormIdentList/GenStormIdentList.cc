// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
///////////////////////////////////////////////////////////////
//
// GenStormIdentList program object
//
// Mike Dixon, RAP, NCAR, P.O.Box 3000, Boulder, CO, 80307-3000, USA
//
// November 1997
//
///////////////////////////////////////////////////////////////
// 
// This program generates a list of storm ident times for
// preparing scripts to rerun storm_ident.
//
///////////////////////////////////////////////////////////////

#include "GenStormIdentList.hh"

#include "Args.hh"
#include "Params.hh"
#include "Output.hh"

#include <toolsa/str.h>
#include <toolsa/pmu.h>
#include <didss/DsInputPath.hh>
using namespace std;

// Constructor

GenStormIdentList::GenStormIdentList(int argc, char **argv)

{

  OK = TRUE;
  _args = NULL;
  _params = NULL;

  // set programe name

  _progName = STRdup("StormIdent");
  ucopyright(_progName);

  // get command line args

  _args = new Args(argc, argv, _progName);
  if (!_args->OK) {
    fprintf(stderr, "ERROR: %s\n", _progName);
    fprintf(stderr, "Problem with command line args\n");
    OK = FALSE;
    return;
  }

  // get TDRP params

  _params = new Params();
  _paramsPath = (char *) "unknown";
  if (_params->loadFromArgs(argc, argv,
			    _args->override.list,
			    &_paramsPath)) {
    fprintf(stderr, "ERROR: %s\n", _progName);
    fprintf(stderr, "Problem with TDRP parameters\n");
    OK = FALSE;
    return;
  }

  // check that files have been specified

  if (_args->nFiles == 0) {
    fprintf(stderr, "ERROR - %s\n", _progName);
    fprintf(stderr, "Must set analysis file list using -f arg\n");
    OK = FALSE;
  }
  
  // init process mapper registration

  PMU_auto_init(_progName, _params->instance, PROCMAP_REGISTER_INTERVAL);
  
  // input file object

  _input = new DsInputPath(_progName,
			   _params->debug >= Params::DEBUG_VERBOSE,
			   _args->nFiles,
			   _args->filePaths);
  
  OK = TRUE;
  Done = FALSE;

  // init storm file handle
  
  RfInitStormFileHandle(&_s_handle, _progName);

  // Start of script

  fprintf(stdout, "#! /bin/csh\n");
  fprintf(stdout, "#\n");
  fprintf(stdout, "# storm_ident start script\n");
  fprintf(stdout, "#\n");
  fprintf(stdout, "# Generated by progran '%s'\n", _progName);
  fprintf(stdout, "# Date: %s\n", utimstr(time(NULL)));
  fprintf(stdout, "#\n");

}

// destructor

GenStormIdentList::~GenStormIdentList()

{

  // free up

  RfFreeStormScan(&_s_handle, "GenStormIdentList::~GenStormIdentList");
  RfFreeStormHeader(&_s_handle, "GenStormIdentList::~GenStormIdentList");
  RfFreeStormFileHandle(&_s_handle);

  // call destructors

  delete _input;
  delete _params;
  delete _args;

}

// Run

int GenStormIdentList::Run ()
{

  char *input_file_path;
  Output *output;
  
  while ((input_file_path = _input->next()) != NULL) {
    
    output = new Output(_progName, _params,
			input_file_path, &_s_handle);

    output->Process();

    delete(output);

  }

  return (0);

}
