/**********************************************************************
 * TDRP params for CaseStats
 **********************************************************************/

//======================================================================
//
// Computes statistics for the analysis of weather modification efforts. 
//   Uses the re-randomization technique to compute the probability that 
//   the effect was by chance. Requires randomized pools of seed/no-seed 
//   cases. Must run PartialProps first to compute the properties of the 
//   partial tracks for each case. The app reads in the partial properties 
//   files, computes the statistics and writes to output files in ASCII.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "0708";

///////////// case_file_path //////////////////////////
//
// File path for seed/no-seed cases.
// This file indicates the time and track numbers for each seeded case. 
//   In addition the environmental conditions, such as cloud base and CAPE 
//   are input from this file.
// Type: string
//

case_file_path = "../PartialProps/case_tracks.q0708";

///////////// props_files_dir /////////////////////////
//
// Directory for properties files.
// This directory holds the files produced by PartialProps.
// Type: string
//

props_files_dir = "../PartialProps/partial_props";

///////////// global_props ////////////////////////////
//
// Global property list.
// The is the list of global properties used in the analysis. Global 
//   properties apply to the entire case, for example mean_volume.
// Type: string
// 1D array - variable length.
//

global_props = {
 "cloud_base",
 "mixing_ratio",
 "temp_ccl",
 "deltat_500mb",
 "nscans",
 "seed_duration",
 "duration_before_decision",
 "duration_after_decision",
 "dbz_max_mean",
 "dbz_max_max",
 "dbz_max_max_roi",
 "precip_flux_mean",
 "precip_flux_max",
 "precip_flux_max_roi",
 "volume_mean",
 "volume_max",
 "volume_max_roi",
 "volume_above_alt_mean",
 "volume_above_alt_max",
 "volume_above_alt_max_roi",
 "mass_mean",
 "mass_max",
 "mass_max_roi",
 "mass_above_alt_mean",
 "mass_above_alt_max",
 "mass_above_alt_max_roi",
 "area_mean",
 "area_max",
 "area_max_roi",
 "ht_of_dbz_max_mean",
 "ht_of_dbz_max_max",
 "ht_of_dbz_max_max_roi",
 "refl_centroid_z_mean",
 "refl_centroid_z_max",
 "refl_centroid_z_max_roi",
 "ht_max_minus_centroid_z_mean",
 "ht_max_minus_centroid_z_max",
 "ht_max_minus_centroid_z_max_roi",
 "top_mean",
 "top_max",
 "top_max_roi",
 "base_max_roi",
 "ATI",
 "precip_mass",
 "VCDI"
};

///////////// tseries_props ///////////////////////////
//
// Time series property list.
// The is the list of time series properties used in the analysis. Time 
//   series properties are instanteous values, for example the volume at a 
//   given time.
// Type: string
// 1D array - variable length.
//

tseries_props = {
 "dbz_max",
 "precip_flux",
 "volume",
 "mass",
 "area",
 "ht_of_dbz_max",
 "refl_centroid_z",
 "ht_max_minus_centroid_z",
 "volume_above_alt",
 "mass_above_alt",
 "ATI",
 "VCDI",
 "precip_mass"
};

///////////// tseries_dtimes //////////////////////////
//
// Time series delta time list (secs).
// The is the list of time series delta time values used in the 
//   analysis. Delta_times are relative to decision time. Each of the 
//   tseries properties will be computed at each of these times.
// Type: long
// 1D array - variable length.
//

tseries_dtimes = {
 -1200,
 -900,
 -600,
 -300,
 0,
 300,
 600,
 900,
 1200,
 1500,
 1800,
 2100,
 2400,
 2700,
 3000,
 3300,
 3600
};

///////////// conditions //////////////////////////////
//
// Conditions on variables for analysis.
// If you wish you may impose conditions on the analysis by using this 
//   parameter array. For global props, just insert the prop_name and the 
//   max and min vals (e.g. precip_flux_max). Only cases in which the 
//   global val falls with the range will be included. For time_series 
//   props, designate the prop_name as prop_name@time, where time is the 
//   number of seconds from decision time in the time series (e.g. 
//   precip_flux@300 for precip_flux 5 mins after decision time).
//
// Type: struct
//   typedef struct {
//      string prop_name;
//      double min_val;
//      double max_val;
//   }
//
// 1D array - variable length.
//

conditions = {
  {
    prop_name = "seed_duration",
    min_val = 0,
    max_val = 3600
  }
};

///////////// stat_type ///////////////////////////////
//
// Statistic type for analysis.
// One of the following stats may be utilized in any single analysis: 
//   arithmetic mean, geometric mean (better for log-normal data), first 
//   quartile, second quartile and third quartile.
//
// Type: enum
// Options:
//     ARITH_MEAN
//     GEOM_MEAN
//     FIRST_QUARTILE
//     SECOND_QUARTILE
//     THIRD_QUARTILE
//

stat_type = ARITH_MEAN;

///////////// set_missing_val_in_interp ///////////////
//
// Option to set the interpolated value to missing if the storm did not 
//   exist at the interp time.
// If false, 0 will be used instead of missing data.
// Type: boolean
//

set_missing_val_in_interp = FALSE;

///////////// use_rerandomization /////////////////////
//
// Option to perform re-randomization.
// If set, the re-randomization technique will be used to compute the 
//   significance of any changes between the seed and no-seed data. The 
//   results will be included in the printout.
// Type: boolean
//

use_rerandomization = TRUE;

///////////// n_rerand ////////////////////////////////
//
// Number of re-randomization sequences.
// If rerandomization is used, this is the number of re-randomized 
//   sequences which are used in the analysis.
// Minimum val: 10
// Type: long
//

n_rerand = 1000;

///////////// n_random_list ///////////////////////////
//
// Number of entries in randomized list.
// Each time a random list is created, it will be n_random_list long. 
//   The entries in the list will be used from the start of the list, one 
//   per case. If there are more cases than n_random_list an error will be 
//   reported.
// Minimum val: 10
// Type: long
//

n_random_list = 200;

///////////// max_split ///////////////////////////////
//
// Maximum seed-no_seed split.
// This is the max allowable split between the seed and no-seed pools in 
//   the re-randomization. If the split in a list exceeds this value, a 
//   new list will be generated.
// Type: long
//

max_split = 7;

///////////// write_interp_files //////////////////////
//
// Option to write interpolated time-series files.
// If set, interpolated time-series files are written to 
//   props_files_dir. The file names are interp.nnn, where nnn is the case 
//   number.
// Type: boolean
//

write_interp_files = TRUE;

