/**********************************************************************
 * TDRP params for VerifyTracks
 **********************************************************************/

//======================================================================
//
// Program name: VerifyTracks.
//
// VerifyTracks prints out track data to stdout in columm ASCII format.
//
//======================================================================
 
//======================================================================
//
// DEBUG AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "Test";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Directory path for input data.
// This is used if start and end times are specified on the command 
//   line. It is ignored if you specify a file list using -f on the 
//   command line.
// Type: string
//

input_dir = "$(RAP_DATA_DIR)/titan/nexrain/storms";

///////////// target_entity ///////////////////////////
//
// Entity for which data is sought.
// COMPLETE_TRACK - properties for the whole track. Where more than one 
//   part exists at a time the properties are aggregated from the parts. 
//   TRACK_ENTRY - instantaneous properties for each part of the tracks at 
//   regular intervals. INITIAL_PROPS - properties at the start of the 
//   track, used for selecting storms similar to seeded cases in weather 
//   mod activities.
//
// Type: enum
// Options:
//     COMPLETE_TRACK
//     TRACK_ENTRY
//     INITIAL_PROPS
//

target_entity = TRACK_ENTRY;
target_entity = COMPLETE_TRACK;

///////////// use_complex_tracks //////////////////////
//
// Option to process complex tracks.
// If set, tracks with mergers and splits will be processed.
// Type: boolean
//

use_complex_tracks = TRUE;

///////////// use_simple_tracks ///////////////////////
//
// Option to process simple tracks.
// If set, tracks without mergers and splits will be processed.
// Type: boolean
//

use_simple_tracks = TRUE;

///////////// count_only //////////////////////////////
//
// Option to only count storms to get total number.
// Suppresses normal print output.
// Type: boolean
//

count_only = FALSE;

///////////// sample_interval /////////////////////////
//
// Sampling interval (secs).
// TRACK_ENTRY entity only. The track entry properties are printed out 
//   at this interval. If set to -1, all entries are printed.
// Type: long
//

sample_interval = -1;

///////////// scan_interval ///////////////////////////
//
// Volume scan interval (secs).
// Used in conjunction with sample_interval to determine whether to 
//   print the entry for a given scan. It is a temporal search region. If 
//   no entries lie within this interval on either side of the search 
//   time, no analysis is done for this time.
// Type: long
//

scan_interval = 900;

///////////// min_duration ////////////////////////////
//
// Minimum track duration (secs).
// Only tracks which exceed this duration are processed.
// Type: long
//

min_duration = 2700;

///////////// use_box_limits //////////////////////////
//
// Option to limit analysis to a bounding box.
// If set, only tracks which pass through the box will be processed.
// Type: boolean
//

use_box_limits = FALSE;

///////////// box /////////////////////////////////////
//
// Box parameters.
// The parameters of the bounding box - see 'use_box_limits'. The size 
//   limits are in km relative to the grid origin. min_percent is the 
//   minimum percentage of the tracks which must lie in the box. 
//   min_nstorms is the minimum number of scans for which storms must lie 
//   in the box.
//
// Type: struct
//   typedef struct {
//      double min_x;
//      double min_y;
//      double max_x;
//      double max_y;
//      double min_percent;
//      long min_nscans;
//   }
//
//

box = { 0, 0, 0, 0, 0, 0 };

///////////// check_too_close /////////////////////////
//
// Option to reject tracks too close to radar.
// This allows rejection of tracks with tops missing because it is too 
//   close to the radar.
// Type: boolean
//

check_too_close = FALSE;

///////////// max_nscans_too_close ////////////////////
//
// Max nscans too close to radar - tops missing.
// Max number of scans per track allowed with missing tops.
// Type: long
//

max_nscans_too_close = 5;

///////////// check_too_far ///////////////////////////
//
// Option to reject tracks at max range.
// This allows rejection of tracks too far from the radar - data missing 
//   because part of the storm is out of range.
// Type: boolean
//

check_too_far = FALSE;

///////////// max_nscans_too_far //////////////////////
//
// Max nscans too far.
// Max number of scans per track allowed at max range.
// Type: long
//

max_nscans_too_far = 5;

///////////// check_vol_at_start //////////////////////
//
// Option to check vol at start of track.
// This allows rejection of tracks which existed at radar startup.
// Type: boolean
//

check_vol_at_start = FALSE;

///////////// max_vol_at_start ////////////////////////
//
// Max vol at start of sampling (km2).
// Tracks with starting vol in excess of this value are rejected.
// Type: double
//

max_vol_at_start = 2.47033e-323;

///////////// check_vol_at_end ////////////////////////
//
// Option to check vol at end of track.
// This allows rejection of tracks which existed at radar shutdown.
// Type: boolean
//

check_vol_at_end = FALSE;

///////////// max_vol_at_end //////////////////////////
//
// Max vol at end of sampling (km2).
// Tracks with ending vol in excess of this value are rejected.
// Type: double
//

max_vol_at_end = 2.47033e-323;

///////////// print_polygons //////////////////////////
//
// Option to print storm polygons.
// TRACK_ENTRY only. If set the storm polygons are printed out for each 
//   track entry.
// Type: boolean
//

print_polygons = FALSE;

///////////// initial_props_nscans ////////////////////
//
// Number of scans used to compute initial props.
// Type: long
//

initial_props_nscans = 5;

