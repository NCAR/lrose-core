// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
// ** Copyright UCAR (c) 1990 - 2016                                         
// ** University Corporation for Atmospheric Research (UCAR)                 
// ** National Center for Atmospheric Research (NCAR)                        
// ** Boulder, Colorado, USA                                                 
// ** BSD licence applies - redistribution and use in source and binary      
// ** forms, with or without modification, are permitted provided that       
// ** the following conditions are met:                                      
// ** 1) If the software is modified to produce derivative works,            
// ** such modified software should be clearly marked, so as not             
// ** to confuse it with the version available from UCAR.                    
// ** 2) Redistributions of source code must retain the above copyright      
// ** notice, this list of conditions and the following disclaimer.          
// ** 3) Redistributions in binary form must reproduce the above copyright   
// ** notice, this list of conditions and the following disclaimer in the    
// ** documentation and/or other materials provided with the distribution.   
// ** 4) Neither the name of UCAR nor the names of its contributors,         
// ** if any, may be used to endorse or promote products derived from        
// ** this software without specific prior written permission.               
// ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  
// ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      
// ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    
// *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program ClutFilter
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
using namespace std;

#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params path ] specify params file path\n"
        << "   [ -check_params] check which params are not set\n"
        << "   [ -print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("Program name: ClutFilter");
    tt->comment_text = tdrpStrDup("ClutFilter simulates IQ data with clutter and tests a filter on removing the clutter.");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("CREATING SPECTRA");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Mode for determining moments characteristics.");
    tt->help = tdrpStrDup("MODE_SINGLE: use single_moments parameter. MODE_MULTIPLE: use multiple_moments parameter.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("MODE_SINGLE");
      tt->enum_def.fields[0].val = MODE_SINGLE;
      tt->enum_def.fields[1].name = tdrpStrDup("MODE_MULTIPLE");
      tt->enum_def.fields[1].val = MODE_MULTIPLE;
    tt->single_val.e = MODE_SINGLE;
    tt++;
    
    // Parameter 'spectra_creation_method'
    // ctype is '_spectra_creation_method_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("spectra_creation_method");
    tt->descr = tdrpStrDup("Method for creating spectra.");
    tt->help = tdrpStrDup("MODELLED: spectra are created using gaussian models based on the specified moments. RECONSTRUCTED: spectra are reconstructed from measured spectra.");
    tt->val_offset = (char *) &spectra_creation_method - &_start_;
    tt->enum_def.name = tdrpStrDup("spectra_creation_method_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("MODELLED");
      tt->enum_def.fields[0].val = MODELLED;
      tt->enum_def.fields[1].name = tdrpStrDup("RECONSTRUCTED");
      tt->enum_def.fields[1].val = RECONSTRUCTED;
    tt->single_val.e = MODELLED;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("MOMENTS FOR MODELLING SPECTRA");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'single_moments'
    // ctype is '_single_moments_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("single_moments");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("vel and width values are in m/s. cwr_dbm is clutter/weather power ratio, in dBM.");
    tt->val_offset = (char *) &single_moments - &_start_;
    tt->struct_def.name = tdrpStrDup("single_moments_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("weather_dbm");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &single_moments.weather_dbm - (char *) &single_moments;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("weather_vel");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &single_moments.weather_vel - (char *) &single_moments;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weather_width");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &single_moments.weather_width - (char *) &single_moments;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("cwr_dbm");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &single_moments.cwr_dbm - (char *) &single_moments;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("clutter_vel");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &single_moments.clutter_vel - (char *) &single_moments;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("clutter_width");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &single_moments.clutter_width - (char *) &single_moments;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -33;
      tt->struct_vals[1].d = 10;
      tt->struct_vals[2].d = 3;
      tt->struct_vals[3].d = 10;
      tt->struct_vals[4].d = 0;
      tt->struct_vals[5].d = 0.25;
    tt++;
    
    // Parameter 'mult_moments'
    // ctype is '_mult_moments_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("mult_moments");
    tt->descr = tdrpStrDup("");
    tt->help = tdrpStrDup("vel and width values are in m/s. cwr_dbm is clutter/weather power ratio, in dBM.");
    tt->val_offset = (char *) &mult_moments - &_start_;
    tt->struct_def.name = tdrpStrDup("mult_moments_t");
    tt->struct_def.nfields = 18;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("weather_dbm_min");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &mult_moments.weather_dbm_min - (char *) &mult_moments;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("weather_dbm_max");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &mult_moments.weather_dbm_max - (char *) &mult_moments;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("weather_dbm_delta");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &mult_moments.weather_dbm_delta - (char *) &mult_moments;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("weather_vel_min");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &mult_moments.weather_vel_min - (char *) &mult_moments;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("weather_vel_max");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &mult_moments.weather_vel_max - (char *) &mult_moments;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("weather_vel_delta");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &mult_moments.weather_vel_delta - (char *) &mult_moments;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("weather_width_min");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &mult_moments.weather_width_min - (char *) &mult_moments;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("weather_width_max");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &mult_moments.weather_width_max - (char *) &mult_moments;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("weather_width_delta");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &mult_moments.weather_width_delta - (char *) &mult_moments;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("cwr_dbm_min");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &mult_moments.cwr_dbm_min - (char *) &mult_moments;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("cwr_dbm_max");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &mult_moments.cwr_dbm_max - (char *) &mult_moments;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("cwr_dbm_delta");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &mult_moments.cwr_dbm_delta - (char *) &mult_moments;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("clutter_vel_min");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &mult_moments.clutter_vel_min - (char *) &mult_moments;
      tt->struct_def.fields[13].ftype = tdrpStrDup("double");
      tt->struct_def.fields[13].fname = tdrpStrDup("clutter_vel_max");
      tt->struct_def.fields[13].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &mult_moments.clutter_vel_max - (char *) &mult_moments;
      tt->struct_def.fields[14].ftype = tdrpStrDup("double");
      tt->struct_def.fields[14].fname = tdrpStrDup("clutter_vel_delta");
      tt->struct_def.fields[14].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &mult_moments.clutter_vel_delta - (char *) &mult_moments;
      tt->struct_def.fields[15].ftype = tdrpStrDup("double");
      tt->struct_def.fields[15].fname = tdrpStrDup("clutter_width_min");
      tt->struct_def.fields[15].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[15].rel_offset = 
        (char *) &mult_moments.clutter_width_min - (char *) &mult_moments;
      tt->struct_def.fields[16].ftype = tdrpStrDup("double");
      tt->struct_def.fields[16].fname = tdrpStrDup("clutter_width_max");
      tt->struct_def.fields[16].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[16].rel_offset = 
        (char *) &mult_moments.clutter_width_max - (char *) &mult_moments;
      tt->struct_def.fields[17].ftype = tdrpStrDup("double");
      tt->struct_def.fields[17].fname = tdrpStrDup("clutter_width_delta");
      tt->struct_def.fields[17].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[17].rel_offset = 
        (char *) &mult_moments.clutter_width_delta - (char *) &mult_moments;
    tt->n_struct_vals = 18;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -50;
      tt->struct_vals[1].d = -20;
      tt->struct_vals[2].d = 10;
      tt->struct_vals[3].d = -25;
      tt->struct_vals[4].d = 25;
      tt->struct_vals[5].d = 1;
      tt->struct_vals[6].d = 1;
      tt->struct_vals[7].d = 6;
      tt->struct_vals[8].d = 1;
      tt->struct_vals[9].d = -30;
      tt->struct_vals[10].d = 40;
      tt->struct_vals[11].d = 1;
      tt->struct_vals[12].d = -0.5;
      tt->struct_vals[13].d = 0.5;
      tt->struct_vals[14].d = 0.1;
      tt->struct_vals[15].d = 0.1;
      tt->struct_vals[16].d = 0.5;
      tt->struct_vals[17].d = 0.1;
    tt++;
    
    // Parameter 'nsamples'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("nsamples");
    tt->descr = tdrpStrDup("Number of samples in spectrum.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &nsamples - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'use_exponential'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_exponential");
    tt->descr = tdrpStrDup("Option to simulate noise with the exponential function.");
    tt->help = tdrpStrDup("If FALSE a smooth gaussian is produced. If TRUE, the data is exponentially disctibuted about the the gaussian.");
    tt->val_offset = (char *) &use_exponential - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'exponential_lambda'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("exponential_lambda");
    tt->descr = tdrpStrDup("Mean of exponential distribution.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &exponential_lambda - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'force_zero_phase'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("force_zero_phase");
    tt->descr = tdrpStrDup("Option to force the phase to 0.");
    tt->help = tdrpStrDup("This has the effect of generating only real parts.");
    tt->val_offset = (char *) &force_zero_phase - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'window'
    // ctype is '_window_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("window");
    tt->descr = tdrpStrDup("Window to apply to IQ data before computing spectrum.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &window - &_start_;
    tt->enum_def.name = tdrpStrDup("window_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("WINDOW_NONE");
      tt->enum_def.fields[0].val = WINDOW_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("WINDOW_HANNING");
      tt->enum_def.fields[1].val = WINDOW_HANNING;
      tt->enum_def.fields[2].name = tdrpStrDup("WINDOW_BLACKMAN");
      tt->enum_def.fields[2].val = WINDOW_BLACKMAN;
    tt->single_val.e = WINDOW_HANNING;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("FILES FOR RECONSTRUCTING SPECTRA");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'weather_spectra_input_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("weather_spectra_input_path");
    tt->descr = tdrpStrDup("Path to file containing measured weather spectra.");
    tt->help = tdrpStrDup("The weather spectra are used to reconstruct combined spectra.");
    tt->val_offset = (char *) &weather_spectra_input_path - &_start_;
    tt->single_val.s = tdrpStrDup("weather_spectra.out");
    tt++;
    
    // Parameter 'clutter_spectra_input_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("clutter_spectra_input_path");
    tt->descr = tdrpStrDup("Path to file containing measured clutter spectra.");
    tt->help = tdrpStrDup("The clutter spectra are used to reconstruct combined spectra.");
    tt->val_offset = (char *) &clutter_spectra_input_path - &_start_;
    tt->single_val.s = tdrpStrDup("clutter_spectra.out");
    tt++;
    
    // Parameter 'weather_spectrum_index'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("weather_spectrum_index");
    tt->descr = tdrpStrDup("Index of specified spectrum in weather spectra file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &weather_spectrum_index - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'clutter_spectrum_index'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("clutter_spectrum_index");
    tt->descr = tdrpStrDup("Index of specified spectrum in clutter spectra file.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &clutter_spectrum_index - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'n_reconstructed'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("n_reconstructed");
    tt->descr = tdrpStrDup("Number of spectra to be reconstructed.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &n_reconstructed - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'reconstructed_cwr'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("reconstructed_cwr");
    tt->descr = tdrpStrDup("Clutter-weather ratio for reconstructed spectra (dB).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &reconstructed_cwr - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'reconstructed_max_clutter_abs_vel'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("reconstructed_max_clutter_abs_vel");
    tt->descr = tdrpStrDup("Max clutter absolute velocity for reconstructed spectra (m/s).");
    tt->help = tdrpStrDup("Spectra which do not meet this criterion will not be used.");
    tt->val_offset = (char *) &reconstructed_max_clutter_abs_vel - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'reconstructed_max_clutter_width'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("reconstructed_max_clutter_width");
    tt->descr = tdrpStrDup("Max clutter width for reconstructed spectra (m/s).");
    tt->help = tdrpStrDup("Spectra which do not meet this criterion will not be used.");
    tt->val_offset = (char *) &reconstructed_max_clutter_width - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("RADAR DETAILS.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'wavelength'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("wavelength");
    tt->descr = tdrpStrDup("The wavelength of the radar (cm)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wavelength - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'prt'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("prt");
    tt->descr = tdrpStrDup("The PRT of the data (miscro-secs)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &prt - &_start_;
    tt->single_val.i = 1000;
    tt++;
    
    // Parameter 'receiver_noise'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("receiver_noise");
    tt->descr = tdrpStrDup("Receiver noise (watts)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &receiver_noise - &_start_;
    tt->single_val.d = 1e-06;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("FILTER OPTIONS.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'max_abs_clutter_vel'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_abs_clutter_vel");
    tt->descr = tdrpStrDup("Max clutter velocity for filter (m/s)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &max_abs_clutter_vel - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'initial_notch_width'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("initial_notch_width");
    tt->descr = tdrpStrDup("Width of initial notch (m/s)");
    tt->help = tdrpStrDup("This is the first guess for the notch. By iterating the algorithm may narrow the notch.");
    tt->val_offset = (char *) &initial_notch_width - &_start_;
    tt->single_val.d = 1.5;
    tt++;
    
    // Parameter 'max_clutter_to_weather_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("max_clutter_to_weather_ratio");
    tt->descr = tdrpStrDup("Max ratio of clutter power to weather power (dB)");
    tt->help = tdrpStrDup("If the ratio exceeds this, we will assume all of the power is from clutter.");
    tt->val_offset = (char *) &max_clutter_to_weather_ratio - &_start_;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'spectral_noise_power'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spectral_noise_power");
    tt->descr = tdrpStrDup("Noise power for filter (mW)");
    tt->help = tdrpStrDup("This is the noise in the spectral domain.");
    tt->val_offset = (char *) &spectral_noise_power - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("OUTPUT FILES.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_dir");
    tt->descr = tdrpStrDup("Output directory for spactra files.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./output");
    tt++;
    
    // Parameter 'output_file_base'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_file_base");
    tt->descr = tdrpStrDup("Base name for output files.");
    tt->help = tdrpStrDup("Output files will start with this, and end with names which describe their specifics.");
    tt->val_offset = (char *) &output_file_base - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'write_spectra_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_spectra_files");
    tt->descr = tdrpStrDup("Option to write spectra to files in SINGLE mode.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_spectra_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_results_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_results_file");
    tt->descr = tdrpStrDup("Option to write results to files in MULTIPLE mode.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &write_results_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
