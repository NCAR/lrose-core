/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Pirep2Symprod
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance.");
    tt->help = tdrpStrDup("Used for procmap registration and auto restarting.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'no_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_threads");
    tt->descr = tdrpStrDup("Option to prevent server from using a thread per client.");
    tt->help = tdrpStrDup("For debugging purposes it it sometimes useful to suppress the use of threads. Set no_threads to TRUE for this type of debugging.");
    tt->val_offset = (char *) &no_threads - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("Server details for support from ServerMgr");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("Port number.");
    tt->help = tdrpStrDup("The server listens on this port for client requests.");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.i = 5457;
    tt++;
    
    // Parameter 'qmax'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("qmax");
    tt->descr = tdrpStrDup("Max quiescent period (secs).");
    tt->help = tdrpStrDup("If the server does not receive requests for this time period, it will die gracefully. If set to -1, the server never exits.");
    tt->val_offset = (char *) &qmax - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'max_clients'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_clients");
    tt->descr = tdrpStrDup("Maximum number of clients");
    tt->help = tdrpStrDup("This is the maximum number of threads the application will produce to handle client requests.  If the maximum is reached, new clients will receive a SERVICE_DENIED error message and will have to request the data again.  If set to -1, no maximum is enforced.");
    tt->val_offset = (char *) &max_clients - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("CLIPPING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'apply_flight_level_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_flight_level_limits");
    tt->descr = tdrpStrDup("Option to only include pireps within certain flight level limits.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &apply_flight_level_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_flight_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_flight_level");
    tt->descr = tdrpStrDup("Min flight level (altitude(ft)/100).");
    tt->help = tdrpStrDup("See apply_flight_level_limits.");
    tt->val_offset = (char *) &min_flight_level - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'max_flight_level'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_flight_level");
    tt->descr = tdrpStrDup("Max flight level (altitude(ft)/100).");
    tt->help = tdrpStrDup("See apply_flight_level_limits.");
    tt->val_offset = (char *) &max_flight_level - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'apply_lat_lon_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_lat_lon_limits");
    tt->descr = tdrpStrDup("Option to only include pireps within given bounding box.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &apply_lat_lon_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_lat'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_lat");
    tt->descr = tdrpStrDup("Min latitude (deg).");
    tt->help = tdrpStrDup("See apply_lat_lon_limits.");
    tt->val_offset = (char *) &min_lat - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'min_lon'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_lon");
    tt->descr = tdrpStrDup("Min longitude (deg).");
    tt->help = tdrpStrDup("See apply_lat_lon_limits.");
    tt->val_offset = (char *) &min_lon - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'max_lat'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_lat");
    tt->descr = tdrpStrDup("Max latitude (deg).");
    tt->help = tdrpStrDup("See apply_lat_lon_limits.");
    tt->val_offset = (char *) &max_lat - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'max_lon'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_lon");
    tt->descr = tdrpStrDup("Max longitude (deg).");
    tt->help = tdrpStrDup("See apply_lat_lon_limits.");
    tt->val_offset = (char *) &max_lon - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("TRANSLATION OPTION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'do_translation'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("do_translation");
    tt->descr = tdrpStrDup("Option to perform translation to symprod format.");
    tt->help = tdrpStrDup("If FALSE, the data is passed to the client in binary format\n.Note: Display control of binary format is extremely limited\nValue must be TRUE to turn labels on/off, and set colors and\npositions independently");
    tt->val_offset = (char *) &do_translation - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_unscaled'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_unscaled");
    tt->descr = tdrpStrDup("Option to not scale the product with zoom state.");
    tt->help = tdrpStrDup("If true, the product is always rendered at the same scale, regardless of zoom state. If false, the product is scaled down on the screen as the zoome expands, and is scaled up as you zoom in.");
    tt->val_offset = (char *) &plot_unscaled - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_only_if_message'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_only_if_message");
    tt->descr = tdrpStrDup("Option to plot only if there is a text message.");
    tt->help = tdrpStrDup("If true, the pirep is only plotted if there is a text message portion to the pirep.");
    tt->val_offset = (char *) &plot_only_if_message - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("POSITION ICONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_icon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_icon");
    tt->descr = tdrpStrDup("Option to plot position icons.");
    tt->help = tdrpStrDup("If true, a triangle-shaped icon is drawn first, and then text is put around it. This is useful for large domains because you can see the icon even when the text is not displayed.");
    tt->val_offset = (char *) &plot_icon - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'icon_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("icon_size");
    tt->descr = tdrpStrDup("Size of icon in pixels");
    tt->help = tdrpStrDup("Acars is represented by a triangle. This is the distance from the center to each extremity of the triangle shape.");
    tt->val_offset = (char *) &icon_size - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'icon_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("icon_color");
    tt->descr = tdrpStrDup("Color for icon.");
    tt->help = tdrpStrDup("Name of color suggested for rendering acars icon.");
    tt->val_offset = (char *) &icon_color - &_start_;
    tt->single_val.s = tdrpStrDup("pink");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("TEXT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("Text labels");
    tt->comment_text = tdrpStrDup("The following are specified for each text label:\n\tdo_draw: option to draw the label, true or false\n\tcolor: foreground color\n\tbackground_color: background color - if empty, no background\n\tfont_name: name of font family\n\tfont_size: suggest size in pixels\n\tx_offset: x offset from station location in pixels\n\ty_offset: y offset from station location in pixels\n\tvert_align: vert justification of text relative to offset point\n\thoriz_align: horiz justification of text relative to offset point\n");
    tt++;
    
    // Parameter 'callsign_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("callsign_label");
    tt->descr = tdrpStrDup("Details for callsign label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &callsign_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &callsign_label.do_draw - (char *) &callsign_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &callsign_label.color - (char *) &callsign_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &callsign_label.background_color - (char *) &callsign_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &callsign_label.font_name - (char *) &callsign_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &callsign_label.font_size - (char *) &callsign_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &callsign_label.x_offset - (char *) &callsign_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &callsign_label.y_offset - (char *) &callsign_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[7].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[7].ptype = ENUM_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &callsign_label.vert_align - (char *) &callsign_label;
        tt->struct_def.fields[7].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[7].enum_def.nfields = 3;
        tt->struct_def.fields[7].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[7].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[7].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[7].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[7].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[7].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[7].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[7].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[8].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &callsign_label.horiz_align - (char *) &callsign_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[8].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[8].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("pink");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].s = tdrpStrDup("8x13");
      tt->struct_vals[4].i = 10;
      tt->struct_vals[5].i = -2;
      tt->struct_vals[6].i = -5;
      tt->struct_vals[7].e = VERT_ALIGN_TOP;
      tt->struct_vals[8].e = HORIZ_ALIGN_RIGHT;
    tt++;
    
    // Parameter 'flight_level_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("flight_level_label");
    tt->descr = tdrpStrDup("Details for flight level label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &flight_level_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &flight_level_label.do_draw - (char *) &flight_level_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &flight_level_label.color - (char *) &flight_level_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &flight_level_label.background_color - (char *) &flight_level_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &flight_level_label.font_name - (char *) &flight_level_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &flight_level_label.font_size - (char *) &flight_level_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &flight_level_label.x_offset - (char *) &flight_level_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &flight_level_label.y_offset - (char *) &flight_level_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[7].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[7].ptype = ENUM_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &flight_level_label.vert_align - (char *) &flight_level_label;
        tt->struct_def.fields[7].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[7].enum_def.nfields = 3;
        tt->struct_def.fields[7].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[7].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[7].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[7].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[7].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[7].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[7].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[7].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[8].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &flight_level_label.horiz_align - (char *) &flight_level_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[8].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[8].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("pink");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].s = tdrpStrDup("8x13");
      tt->struct_vals[4].i = 10;
      tt->struct_vals[5].i = 2;
      tt->struct_vals[6].i = -5;
      tt->struct_vals[7].e = VERT_ALIGN_TOP;
      tt->struct_vals[8].e = HORIZ_ALIGN_LEFT;
    tt++;
    
    // Parameter 'message_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("message_label");
    tt->descr = tdrpStrDup("Details for message label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &message_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &message_label.do_draw - (char *) &message_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &message_label.color - (char *) &message_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &message_label.background_color - (char *) &message_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &message_label.font_name - (char *) &message_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &message_label.font_size - (char *) &message_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &message_label.x_offset - (char *) &message_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &message_label.y_offset - (char *) &message_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[7].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[7].ptype = ENUM_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &message_label.vert_align - (char *) &message_label;
        tt->struct_def.fields[7].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[7].enum_def.nfields = 3;
        tt->struct_def.fields[7].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[7].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[7].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[7].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[7].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[7].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[7].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[7].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[8].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &message_label.horiz_align - (char *) &message_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[8].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[8].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("pink");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].s = tdrpStrDup("8x13");
      tt->struct_vals[4].i = 10;
      tt->struct_vals[5].i = 0;
      tt->struct_vals[6].i = -14;
      tt->struct_vals[7].e = VERT_ALIGN_TOP;
      tt->struct_vals[8].e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'temperature_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("temperature_label");
    tt->descr = tdrpStrDup("Details for temperature label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &temperature_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &temperature_label.do_draw - (char *) &temperature_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &temperature_label.color - (char *) &temperature_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &temperature_label.background_color - (char *) &temperature_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &temperature_label.font_name - (char *) &temperature_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &temperature_label.font_size - (char *) &temperature_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &temperature_label.x_offset - (char *) &temperature_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &temperature_label.y_offset - (char *) &temperature_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[7].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[7].ptype = ENUM_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &temperature_label.vert_align - (char *) &temperature_label;
        tt->struct_def.fields[7].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[7].enum_def.nfields = 3;
        tt->struct_def.fields[7].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[7].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[7].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[7].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[7].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[7].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[7].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[7].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[8].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &temperature_label.horiz_align - (char *) &temperature_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[8].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[8].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("pink");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].s = tdrpStrDup("8x13");
      tt->struct_vals[4].i = 10;
      tt->struct_vals[5].i = 0;
      tt->struct_vals[6].i = -26;
      tt->struct_vals[7].e = VERT_ALIGN_TOP;
      tt->struct_vals[8].e = HORIZ_ALIGN_LEFT;
    tt++;
    
    // Parameter 'wind_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_label");
    tt->descr = tdrpStrDup("Details for wind label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 9;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &wind_label.do_draw - (char *) &wind_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &wind_label.color - (char *) &wind_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &wind_label.background_color - (char *) &wind_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &wind_label.font_name - (char *) &wind_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &wind_label.font_size - (char *) &wind_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &wind_label.x_offset - (char *) &wind_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &wind_label.y_offset - (char *) &wind_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[7].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[7].ptype = ENUM_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &wind_label.vert_align - (char *) &wind_label;
        tt->struct_def.fields[7].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[7].enum_def.nfields = 3;
        tt->struct_def.fields[7].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[7].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[7].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[7].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[7].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[7].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[7].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[7].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[8].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &wind_label.horiz_align - (char *) &wind_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[8].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[8].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("pink");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].s = tdrpStrDup("8x13");
      tt->struct_vals[4].i = 10;
      tt->struct_vals[5].i = 0;
      tt->struct_vals[6].i = -38;
      tt->struct_vals[7].e = VERT_ALIGN_TOP;
      tt->struct_vals[8].e = HORIZ_ALIGN_LEFT;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("TURBULENCE ICON PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'send_turb_pireps_only'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("send_turb_pireps_only");
    tt->descr = tdrpStrDup("Option to only send pireps related to turbulence.");
    tt->help = tdrpStrDup("If true, only pireps with a turbulence intensity filled in will be sent.");
    tt->val_offset = (char *) &send_turb_pireps_only - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_turb_icon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_turb_icon");
    tt->descr = tdrpStrDup("Option to plot turbulence icons.");
    tt->help = tdrpStrDup("If true, the relevant ICAO turbulence symbol is plotted.");
    tt->val_offset = (char *) &plot_turb_icon - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'turb_icon_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("turb_icon_size");
    tt->descr = tdrpStrDup("Size of turb icon in pixels");
    tt->help = tdrpStrDup("Pirep is represented by a diamond. This is the distance from the center to each extremity of the diamond shape.");
    tt->val_offset = (char *) &turb_icon_size - &_start_;
    tt->single_val.i = 8;
    tt++;
    
    // Parameter 'turb_icon_colors'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("turb_icon_colors");
    tt->descr = tdrpStrDup("Color for turbulence icons.");
    tt->help = tdrpStrDup("Name of color suggested for rendering turbulence icons.");
    tt->array_offset = (char *) &_turb_icon_colors - &_start_;
    tt->array_n_offset = (char *) &turb_icon_colors_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = TRUE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 9;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("blue");
      tt->array_vals[1].s = tdrpStrDup("green");
      tt->array_vals[2].s = tdrpStrDup("green");
      tt->array_vals[3].s = tdrpStrDup("orange");
      tt->array_vals[4].s = tdrpStrDup("orange");
      tt->array_vals[5].s = tdrpStrDup("red");
      tt->array_vals[6].s = tdrpStrDup("red");
      tt->array_vals[7].s = tdrpStrDup("red");
      tt->array_vals[8].s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("FULL PIREP MESSAGE AS HIDDEN TEXT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'activate_hidden_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("activate_hidden_text");
    tt->descr = tdrpStrDup("Option to activate hidden text.");
    tt->help = tdrpStrDup("If true, the full PIREP message will be sent to the client, marked as hidden text. This text may then be used by the client for any purpose, such as pop-up text in response to a mouse event near the product location.");
    tt->val_offset = (char *) &activate_hidden_text - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'hidden_text_font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_font_name");
    tt->descr = tdrpStrDup("Name of font for hidden text.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_font_name - &_start_;
    tt->single_val.s = tdrpStrDup("fixed");
    tt++;
    
    // Parameter 'hidden_text_x_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_x_offset");
    tt->descr = tdrpStrDup("X offset for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_x_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'hidden_text_y_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_y_offset");
    tt->descr = tdrpStrDup("Y offset for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_y_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'hidden_text_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_font_size");
    tt->descr = tdrpStrDup("Font size for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_font_size - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'hidden_text_vert_align'
    // ctype is '_vert_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_vert_align");
    tt->descr = tdrpStrDup("Vertical alignment hidden text.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_vert_align - &_start_;
    tt->enum_def.name = tdrpStrDup("vert_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
      tt->enum_def.fields[0].val = VERT_ALIGN_TOP;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
      tt->enum_def.fields[1].val = VERT_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
      tt->enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
    tt->single_val.e = VERT_ALIGN_CENTER;
    tt++;
    
    // Parameter 'hidden_text_horiz_align'
    // ctype is '_horiz_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_horiz_align");
    tt->descr = tdrpStrDup("Horizontal alignment for hidden text.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_horiz_align - &_start_;
    tt->enum_def.name = tdrpStrDup("horiz_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
      tt->enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
      tt->enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
      tt->enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->single_val.e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'hidden_text_foreground_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_foreground_color");
    tt->descr = tdrpStrDup("Hidden text background color.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_foreground_color - &_start_;
    tt->single_val.s = tdrpStrDup("pink");
    tt++;
    
    // Parameter 'hidden_text_background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_background_color");
    tt->descr = tdrpStrDup("Hidden text background color.");
    tt->help = tdrpStrDup("Set to empty string to use display background color.");
    tt->val_offset = (char *) &hidden_text_background_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("WIND BARB PLOT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'draw_wind_barb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("draw_wind_barb");
    tt->descr = tdrpStrDup("Option to draw the wind barb.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &draw_wind_barb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'station_posn_circle_radius'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("station_posn_circle_radius");
    tt->descr = tdrpStrDup("Radius of circle at station position.");
    tt->help = tdrpStrDup("Set to 0 for no circle.");
    tt->val_offset = (char *) &station_posn_circle_radius - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'wind_barb_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("wind_barb_color");
    tt->descr = tdrpStrDup("Color of wind barb.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_barb_color - &_start_;
    tt->single_val.s = tdrpStrDup("pink");
    tt++;
    
    // Parameter 'wind_barb_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wind_barb_line_width");
    tt->descr = tdrpStrDup("Width of lines used to render wind barbs.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_barb_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'wind_barb_shaft_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wind_barb_shaft_len");
    tt->descr = tdrpStrDup("Length of wind barb shaft in pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_barb_shaft_len - &_start_;
    tt->single_val.i = 32;
    tt++;
    
    // Parameter 'wind_barb_tick_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wind_barb_tick_len");
    tt->descr = tdrpStrDup("Length of wind barb ticks in pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_barb_tick_len - &_start_;
    tt->single_val.i = 8;
    tt++;
    
    // Parameter 'wind_ticks_angle_to_shaft'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("wind_ticks_angle_to_shaft");
    tt->descr = tdrpStrDup("Angle of the wind ticks relative to the shaft (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_ticks_angle_to_shaft - &_start_;
    tt->single_val.f = 55;
    tt++;
    
    // Parameter 'use_pirep_t'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_pirep_t");
    tt->descr = tdrpStrDup("Option to use pirep_t formatted SPDB files or XML formatted files.");
    tt->help = tdrpStrDup("If true, pirep_t SPDB files are expected.  If false, XML formatted SPDB files are expected (output from Pirep2Spdb).");
    tt->val_offset = (char *) &use_pirep_t - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
