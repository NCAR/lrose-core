/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Metar2Symprod
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance.");
    tt->help = tdrpStrDup("Used for procmap registration and auto restarting.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'no_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_threads");
    tt->descr = tdrpStrDup("Option to prevent server from using a thread per client.");
    tt->help = tdrpStrDup("For debugging purposes it it sometimes useful to suppress the use of threads. Set no_threads to TRUE for this type of debugging.");
    tt->val_offset = (char *) &no_threads - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("Server details for support from ServerMgr");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("Port number.");
    tt->help = tdrpStrDup("The server listens on this port for client requests.");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.i = 5456;
    tt++;
    
    // Parameter 'qmax'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("qmax");
    tt->descr = tdrpStrDup("Max quiescent period (secs).");
    tt->help = tdrpStrDup("If the server does not receive requests for this time period, it will die gracefully. If set to -1, the server never exits.");
    tt->val_offset = (char *) &qmax - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'max_clients'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_clients");
    tt->descr = tdrpStrDup("Maximum number of clients");
    tt->help = tdrpStrDup("This is the maximum number of threads the application will produce to handle client requests.  If the maximum is reached, new clients will receive a SERVICE_DENIED error message and will have to request the data again.  If set to -1, no maximum is enforced.");
    tt->val_offset = (char *) &max_clients - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("STATION SELECTION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'useAcceptedStationsList'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("useAcceptedStationsList");
    tt->descr = tdrpStrDup("Set to TRUE to use the acceptedStations list (below)");
    tt->help = tdrpStrDup("Only accept stations in this list.");
    tt->val_offset = (char *) &useAcceptedStationsList - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'acceptedStations'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("acceptedStations");
    tt->descr = tdrpStrDup("List of accepted station IDs");
    tt->help = tdrpStrDup("If a station is not on this list, it is not displayed.");
    tt->array_offset = (char *) &_acceptedStations - &_start_;
    tt->array_n_offset = (char *) &acceptedStations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 29;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("RCTP");
      tt->array_vals[1].s = tdrpStrDup("RCFG");
      tt->array_vals[2].s = tdrpStrDup("RCSS");
      tt->array_vals[3].s = tdrpStrDup("RCGM");
      tt->array_vals[4].s = tdrpStrDup("RCNO");
      tt->array_vals[5].s = tdrpStrDup("RCQC");
      tt->array_vals[6].s = tdrpStrDup("RCBS");
      tt->array_vals[7].s = tdrpStrDup("RCUK");
      tt->array_vals[8].s = tdrpStrDup("RCKH");
      tt->array_vals[9].s = tdrpStrDup("RCFN");
      tt->array_vals[10].s = tdrpStrDup("RCNN");
      tt->array_vals[11].s = tdrpStrDup("RCAY");
      tt->array_vals[12].s = tdrpStrDup("RCKU");
      tt->array_vals[13].s = tdrpStrDup("RCMJ");
      tt->array_vals[14].s = tdrpStrDup("RCDC");
      tt->array_vals[15].s = tdrpStrDup("RCLG");
      tt->array_vals[16].s = tdrpStrDup("RCKW");
      tt->array_vals[17].s = tdrpStrDup("RCPO");
      tt->array_vals[18].s = tdrpStrDup("RCSQ");
      tt->array_vals[19].s = tdrpStrDup("RCQS");
      tt->array_vals[20].s = tdrpStrDup("RCLY");
      tt->array_vals[21].s = tdrpStrDup("RCYU");
      tt->array_vals[22].s = tdrpStrDup("RCMS");
      tt->array_vals[23].s = tdrpStrDup("RCDI");
      tt->array_vals[24].s = tdrpStrDup("RCMQ");
      tt->array_vals[25].s = tdrpStrDup("RCFS");
      tt->array_vals[26].s = tdrpStrDup("RCGI");
      tt->array_vals[27].s = tdrpStrDup("RCMT");
      tt->array_vals[28].s = tdrpStrDup("RCLM");
    tt++;
    
    // Parameter 'useRejectedStationsList'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("useRejectedStationsList");
    tt->descr = tdrpStrDup("Set to TRUE to use the rejectedStations list (below)");
    tt->help = tdrpStrDup("Reject stations in this list.");
    tt->val_offset = (char *) &useRejectedStationsList - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'rejectedStations'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("rejectedStations");
    tt->descr = tdrpStrDup("List of rejected station IDs");
    tt->help = tdrpStrDup("If a station is not on this list, it is not displayed.");
    tt->array_offset = (char *) &_rejectedStations - &_start_;
    tt->array_n_offset = (char *) &rejectedStations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 5;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("RCFN");
      tt->array_vals[1].s = tdrpStrDup("RCAY");
      tt->array_vals[2].s = tdrpStrDup("RCQS");
      tt->array_vals[3].s = tdrpStrDup("RCFS");
      tt->array_vals[4].s = tdrpStrDup("RCMT");
    tt++;
    
    // Parameter 'usePressureRange'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("usePressureRange");
    tt->descr = tdrpStrDup("Set to TRUE to only include stations within a defined pressure  range.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &usePressureRange - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'minStationPressure'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("minStationPressure");
    tt->descr = tdrpStrDup("Minimum station pressure for stations to be displayed.");
    tt->help = tdrpStrDup("Used only if usePressureRange is set to TRUE.");
    tt->val_offset = (char *) &minStationPressure - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'maxStationPressure'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("maxStationPressure");
    tt->descr = tdrpStrDup("Maximum station pressure for stations to be displayed.");
    tt->help = tdrpStrDup("Used only if usePressureRange is set to TRUE.");
    tt->val_offset = (char *) &maxStationPressure - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'useBoundingBox'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("useBoundingBox");
    tt->descr = tdrpStrDup("Set to TRUE to only include stations within the lat-lon bounding box.");
    tt->help = tdrpStrDup("Only accept stations for which the position is inside the bounding box. Note: this will be overridden if the client specifies horizontal limits.");
    tt->val_offset = (char *) &useBoundingBox - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'bounding_box'
    // ctype is '_bounding_box_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("bounding_box");
    tt->descr = tdrpStrDup("If useBoundingBox is true, only stations within this box will be included in the product list.");
    tt->help = tdrpStrDup("To span the international date line, specify a continuous interval using positive longitudes which exceed 180 or negative longitudes which are less than -180. For example, min_lon = 80 and max_lon = 240 will span between 80E and 120W across the Pacific.");
    tt->val_offset = (char *) &bounding_box - &_start_;
    tt->struct_def.name = tdrpStrDup("bounding_box_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_lat");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &bounding_box.min_lat - (char *) &bounding_box;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("min_lon");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &bounding_box.min_lon - (char *) &bounding_box;
      tt->struct_def.fields[2].ftype = tdrpStrDup("float");
      tt->struct_def.fields[2].fname = tdrpStrDup("max_lat");
      tt->struct_def.fields[2].ptype = FLOAT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &bounding_box.max_lat - (char *) &bounding_box;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("max_lon");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &bounding_box.max_lon - (char *) &bounding_box;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = -90;
      tt->struct_vals[1].f = -180;
      tt->struct_vals[2].f = 90;
      tt->struct_vals[3].f = 180;
    tt++;
    
    // Parameter 'decimate_spatially'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("decimate_spatially");
    tt->descr = tdrpStrDup("Option to decimate metar density spatially. Only applicable if the bounding box option is specified in the param file, or the client specifies the horizontal limits in the request.");
    tt->help = tdrpStrDup("If active, an imaginary grid will be constructed for the bounding box. The number of grids in each direction will be specified by decimate_n_lat and decimate_n_lon. Only one METAR product will be created for each rectangle in the grid.");
    tt->val_offset = (char *) &decimate_spatially - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'decimate_n_lat'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("decimate_n_lat");
    tt->descr = tdrpStrDup("If decimation is active, the bounding box is divided into this number of sub-boxes in the latitude direction.");
    tt->help = tdrpStrDup("See decimate_spatially.");
    tt->val_offset = (char *) &decimate_n_lat - &_start_;
    tt->single_val.i = 25;
    tt++;
    
    // Parameter 'decimate_n_lon'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("decimate_n_lon");
    tt->descr = tdrpStrDup("If decimation is active, the bounding box is divided into this number of sub-boxes in the longitude direction.");
    tt->help = tdrpStrDup("See decimate_spatially.");
    tt->val_offset = (char *) &decimate_n_lon - &_start_;
    tt->single_val.i = 25;
    tt++;
    
    // Parameter 'decimate_required_stations'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("decimate_required_stations");
    tt->descr = tdrpStrDup("List of required stations when decimating.");
    tt->help = tdrpStrDup("If a station is in this list, it will always be displayed.");
    tt->array_offset = (char *) &_decimate_required_stations - &_start_;
    tt->array_n_offset = (char *) &decimate_required_stations_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("RCTP");
      tt->array_vals[1].s = tdrpStrDup("RCSS");
      tt->array_vals[2].s = tdrpStrDup("RCKH");
    tt++;
    
    // Parameter 'check_for_required_fields'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("check_for_required_fields");
    tt->descr = tdrpStrDup("Option to check station data for required fields before accepting.");
    tt->help = tdrpStrDup("If set, this allows you to require certain fields to be present in the data before accepting the station for rendering.");
    tt->val_offset = (char *) &check_for_required_fields - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'required_fields'
    // ctype is '_required_fields_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("required_fields");
    tt->descr = tdrpStrDup("Specify which fields must be present to accept station.");
    tt->help = tdrpStrDup("If you want to require a given field to accept the station for rendering, set that field to TRUE.");
    tt->val_offset = (char *) &required_fields - &_start_;
    tt->struct_def.name = tdrpStrDup("required_fields_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("require_temperature");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &required_fields.require_temperature - (char *) &required_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("require_dewpoint");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &required_fields.require_dewpoint - (char *) &required_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("require_wind_speed");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &required_fields.require_wind_speed - (char *) &required_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("require_wind_direction");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &required_fields.require_wind_direction - (char *) &required_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("require_pressure");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &required_fields.require_pressure - (char *) &required_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("require_ceiling");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &required_fields.require_ceiling - (char *) &required_fields;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("require_visibility");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &required_fields.require_visibility - (char *) &required_fields;
      tt->struct_def.fields[7].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[7].fname = tdrpStrDup("require_rvr");
      tt->struct_def.fields[7].ptype = BOOL_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &required_fields.require_rvr - (char *) &required_fields;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].b = pFALSE;
      tt->struct_vals[2].b = pFALSE;
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].b = pFALSE;
      tt->struct_vals[5].b = pFALSE;
      tt->struct_vals[6].b = pFALSE;
      tt->struct_vals[7].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("TRANSLATION OPTION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'do_translation'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("do_translation");
    tt->descr = tdrpStrDup("Option to perform translation to symprod format.");
    tt->help = tdrpStrDup("If FALSE, the data is passed to the client in binary format\n.Note: Display control of binary format is extremely limited\nValue must be TRUE to turn labels on/off, and set colors and\npositions independently");
    tt->val_offset = (char *) &do_translation - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'display_temp'
    // ctype is '_display_temp_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("display_temp");
    tt->descr = tdrpStrDup("Display of temperature data");
    tt->help = tdrpStrDup("Set to the units that you want to use.");
    tt->val_offset = (char *) &display_temp - &_start_;
    tt->enum_def.name = tdrpStrDup("display_temp_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DISPLAY_TEMP_C");
      tt->enum_def.fields[0].val = DISPLAY_TEMP_C;
      tt->enum_def.fields[1].name = tdrpStrDup("DISPLAY_TEMP_F");
      tt->enum_def.fields[1].val = DISPLAY_TEMP_F;
      tt->enum_def.fields[2].name = tdrpStrDup("DISPLAY_TEMP_K");
      tt->enum_def.fields[2].val = DISPLAY_TEMP_K;
    tt->single_val.e = DISPLAY_TEMP_C;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("TRANSLATED RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters for translated rendering using symprod format.");
    tt++;
    
    // Parameter 'plot_unscaled'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_unscaled");
    tt->descr = tdrpStrDup("Option to not scale the product with zoom state.");
    tt->help = tdrpStrDup("If true, the product is always rendered at the same scale, regardless of zoom state. If false, the product is scaled down on the screen as the zoome expands, and is scaled up as you zoom in.");
    tt->val_offset = (char *) &plot_unscaled - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("Text labels");
    tt->comment_text = tdrpStrDup("The following are specified for each text label:\n\tdo_draw: option to draw the label, true or false\n\tcolor: foreground color\n\tbackground_color: background color - if empty, no background\n\toverride_color_from_flight_cat - if true, flight cat color will \n\t                                 used instead of specified color\n\tfont_name: name of font family\n\tfont_size: suggest size in pixels\n\tx_offset: x offset from station location in pixels\n\ty_offset: y offset from station location in pixels\n\tvert_align: vert justification of text relative to offset point\n\thoriz_align: horiz justification of text relative to offset point\n");
    tt++;
    
    // Parameter 'temperature_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("temperature_label");
    tt->descr = tdrpStrDup("Details for temperature label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &temperature_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &temperature_label.do_draw - (char *) &temperature_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &temperature_label.color - (char *) &temperature_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &temperature_label.background_color - (char *) &temperature_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &temperature_label.override_color_from_flight_cat - (char *) &temperature_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &temperature_label.font_name - (char *) &temperature_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &temperature_label.font_size - (char *) &temperature_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &temperature_label.x_offset - (char *) &temperature_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &temperature_label.y_offset - (char *) &temperature_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &temperature_label.vert_align - (char *) &temperature_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &temperature_label.horiz_align - (char *) &temperature_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("red");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = -6;
      tt->struct_vals[7].i = 6;
      tt->struct_vals[8].e = VERT_ALIGN_BOTTOM;
      tt->struct_vals[9].e = HORIZ_ALIGN_RIGHT;
    tt++;
    
    // Parameter 'dew_point_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("dew_point_label");
    tt->descr = tdrpStrDup("Details for dew_point label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dew_point_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &dew_point_label.do_draw - (char *) &dew_point_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &dew_point_label.color - (char *) &dew_point_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &dew_point_label.background_color - (char *) &dew_point_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &dew_point_label.override_color_from_flight_cat - (char *) &dew_point_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &dew_point_label.font_name - (char *) &dew_point_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &dew_point_label.font_size - (char *) &dew_point_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &dew_point_label.x_offset - (char *) &dew_point_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &dew_point_label.y_offset - (char *) &dew_point_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &dew_point_label.vert_align - (char *) &dew_point_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &dew_point_label.horiz_align - (char *) &dew_point_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("blue");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = -6;
      tt->struct_vals[7].i = -6;
      tt->struct_vals[8].e = VERT_ALIGN_TOP;
      tt->struct_vals[9].e = HORIZ_ALIGN_RIGHT;
    tt++;
    
    // Parameter 'pressure_as_3_digits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("pressure_as_3_digits");
    tt->descr = tdrpStrDup("Option to draw pressure in 3 digits only.");
    tt->help = tdrpStrDup("If true, only the first 3 digits of the pressure are plotted. So, for example, 1014 will appear as 014. 998 will always appear as 998.");
    tt->val_offset = (char *) &pressure_as_3_digits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'temps_to_1_digit'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("temps_to_1_digit");
    tt->descr = tdrpStrDup("Option to draw temperature and dew point to only one decmal point.");
    tt->help = tdrpStrDup("If true, temperature and dew point will appear to one decimal place, ie. 2.1198 will appear as 2.1");
    tt->val_offset = (char *) &temps_to_1_digit - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'temps_to_int'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("temps_to_int");
    tt->descr = tdrpStrDup("Option to round temperature and dew point to nearest integer.");
    tt->help = tdrpStrDup("If true, temperature and dew point will appear as integers, ie. 2.1198 will appear as 2. Overides temps_to_1_digit");
    tt->val_offset = (char *) &temps_to_int - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'pressure_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("pressure_label");
    tt->descr = tdrpStrDup("Details for pressure label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &pressure_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &pressure_label.do_draw - (char *) &pressure_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &pressure_label.color - (char *) &pressure_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &pressure_label.background_color - (char *) &pressure_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &pressure_label.override_color_from_flight_cat - (char *) &pressure_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &pressure_label.font_name - (char *) &pressure_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &pressure_label.font_size - (char *) &pressure_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &pressure_label.x_offset - (char *) &pressure_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &pressure_label.y_offset - (char *) &pressure_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &pressure_label.vert_align - (char *) &pressure_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &pressure_label.horiz_align - (char *) &pressure_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("white");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = 6;
      tt->struct_vals[7].i = 6;
      tt->struct_vals[8].e = VERT_ALIGN_BOTTOM;
      tt->struct_vals[9].e = HORIZ_ALIGN_LEFT;
    tt++;
    
    // Parameter 'current_weather_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("current_weather_label");
    tt->descr = tdrpStrDup("Details for current weather label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &current_weather_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &current_weather_label.do_draw - (char *) &current_weather_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &current_weather_label.color - (char *) &current_weather_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &current_weather_label.background_color - (char *) &current_weather_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &current_weather_label.override_color_from_flight_cat - (char *) &current_weather_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &current_weather_label.font_name - (char *) &current_weather_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &current_weather_label.font_size - (char *) &current_weather_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &current_weather_label.x_offset - (char *) &current_weather_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &current_weather_label.y_offset - (char *) &current_weather_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &current_weather_label.vert_align - (char *) &current_weather_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &current_weather_label.horiz_align - (char *) &current_weather_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("yellow");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = -6;
      tt->struct_vals[7].i = 0;
      tt->struct_vals[8].e = VERT_ALIGN_CENTER;
      tt->struct_vals[9].e = HORIZ_ALIGN_RIGHT;
    tt++;
    
    // Parameter 'current_weather_type'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("current_weather_type");
    tt->descr = tdrpStrDup("Details for current weather types - Set as bit fields");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &current_weather_type - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &current_weather_type.do_draw - (char *) &current_weather_type;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &current_weather_type.color - (char *) &current_weather_type;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &current_weather_type.background_color - (char *) &current_weather_type;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &current_weather_type.override_color_from_flight_cat - (char *) &current_weather_type;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &current_weather_type.font_name - (char *) &current_weather_type;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &current_weather_type.font_size - (char *) &current_weather_type;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &current_weather_type.x_offset - (char *) &current_weather_type;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &current_weather_type.y_offset - (char *) &current_weather_type;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &current_weather_type.vert_align - (char *) &current_weather_type;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &current_weather_type.horiz_align - (char *) &current_weather_type;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].s = tdrpStrDup("yellow");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = -6;
      tt->struct_vals[7].i = 0;
      tt->struct_vals[8].e = VERT_ALIGN_CENTER;
      tt->struct_vals[9].e = HORIZ_ALIGN_RIGHT;
    tt++;
    
    // Parameter 'wind_gust_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_gust_label");
    tt->descr = tdrpStrDup("Details for wind gust label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_gust_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &wind_gust_label.do_draw - (char *) &wind_gust_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &wind_gust_label.color - (char *) &wind_gust_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &wind_gust_label.background_color - (char *) &wind_gust_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &wind_gust_label.override_color_from_flight_cat - (char *) &wind_gust_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &wind_gust_label.font_name - (char *) &wind_gust_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &wind_gust_label.font_size - (char *) &wind_gust_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &wind_gust_label.x_offset - (char *) &wind_gust_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &wind_gust_label.y_offset - (char *) &wind_gust_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &wind_gust_label.vert_align - (char *) &wind_gust_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &wind_gust_label.horiz_align - (char *) &wind_gust_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("green");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = 6;
      tt->struct_vals[7].i = 0;
      tt->struct_vals[8].e = VERT_ALIGN_CENTER;
      tt->struct_vals[9].e = HORIZ_ALIGN_LEFT;
    tt++;
    
    // Parameter 'ceiling_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("ceiling_label");
    tt->descr = tdrpStrDup("Details for ceiling label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ceiling_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &ceiling_label.do_draw - (char *) &ceiling_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &ceiling_label.color - (char *) &ceiling_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &ceiling_label.background_color - (char *) &ceiling_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &ceiling_label.override_color_from_flight_cat - (char *) &ceiling_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &ceiling_label.font_name - (char *) &ceiling_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &ceiling_label.font_size - (char *) &ceiling_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &ceiling_label.x_offset - (char *) &ceiling_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &ceiling_label.y_offset - (char *) &ceiling_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &ceiling_label.vert_align - (char *) &ceiling_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &ceiling_label.horiz_align - (char *) &ceiling_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("cyan");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = 6;
      tt->struct_vals[7].i = -16;
      tt->struct_vals[8].e = VERT_ALIGN_TOP;
      tt->struct_vals[9].e = HORIZ_ALIGN_LEFT;
    tt++;
    
    // Parameter 'ceiling_units'
    // ctype is '_ceiling_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("ceiling_units");
    tt->descr = tdrpStrDup("Units for plotting ceiling.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &ceiling_units - &_start_;
    tt->enum_def.name = tdrpStrDup("ceiling_units_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CEILING_METERS");
      tt->enum_def.fields[0].val = CEILING_METERS;
      tt->enum_def.fields[1].name = tdrpStrDup("CEILING_KM");
      tt->enum_def.fields[1].val = CEILING_KM;
      tt->enum_def.fields[2].name = tdrpStrDup("CEILING_FT");
      tt->enum_def.fields[2].val = CEILING_FT;
      tt->enum_def.fields[3].name = tdrpStrDup("CEILING_KFT");
      tt->enum_def.fields[3].val = CEILING_KFT;
      tt->enum_def.fields[4].name = tdrpStrDup("CEILING_FL");
      tt->enum_def.fields[4].val = CEILING_FL;
    tt->single_val.e = CEILING_FT;
    tt++;
    
    // Parameter 'wind_units'
    // ctype is '_wind_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("wind_units");
    tt->descr = tdrpStrDup("Units for plotting Wind Barbs.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_units - &_start_;
    tt->enum_def.name = tdrpStrDup("wind_units_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("WIND_MS");
      tt->enum_def.fields[0].val = WIND_MS;
      tt->enum_def.fields[1].name = tdrpStrDup("WIND_KTS");
      tt->enum_def.fields[1].val = WIND_KTS;
      tt->enum_def.fields[2].name = tdrpStrDup("WIND_MPH");
      tt->enum_def.fields[2].val = WIND_MPH;
      tt->enum_def.fields[3].name = tdrpStrDup("WIND_KPH");
      tt->enum_def.fields[3].val = WIND_KPH;
    tt->single_val.e = WIND_KTS;
    tt++;
    
    // Parameter 'visibility_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("visibility_label");
    tt->descr = tdrpStrDup("Details for visibility label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &visibility_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &visibility_label.do_draw - (char *) &visibility_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &visibility_label.color - (char *) &visibility_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &visibility_label.background_color - (char *) &visibility_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &visibility_label.override_color_from_flight_cat - (char *) &visibility_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &visibility_label.font_name - (char *) &visibility_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &visibility_label.font_size - (char *) &visibility_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &visibility_label.x_offset - (char *) &visibility_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &visibility_label.y_offset - (char *) &visibility_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &visibility_label.vert_align - (char *) &visibility_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &visibility_label.horiz_align - (char *) &visibility_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("magenta");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = -6;
      tt->struct_vals[7].i = -16;
      tt->struct_vals[8].e = VERT_ALIGN_TOP;
      tt->struct_vals[9].e = HORIZ_ALIGN_RIGHT;
    tt++;
    
    // Parameter 'humidity_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("humidity_label");
    tt->descr = tdrpStrDup("Details for humidity label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &humidity_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &humidity_label.do_draw - (char *) &humidity_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &humidity_label.color - (char *) &humidity_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &humidity_label.background_color - (char *) &humidity_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &humidity_label.override_color_from_flight_cat - (char *) &humidity_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &humidity_label.font_name - (char *) &humidity_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &humidity_label.font_size - (char *) &humidity_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &humidity_label.x_offset - (char *) &humidity_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &humidity_label.y_offset - (char *) &humidity_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &humidity_label.vert_align - (char *) &humidity_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &humidity_label.horiz_align - (char *) &humidity_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].s = tdrpStrDup("blue");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = -6;
      tt->struct_vals[7].i = -6;
      tt->struct_vals[8].e = VERT_ALIGN_TOP;
      tt->struct_vals[9].e = HORIZ_ALIGN_RIGHT;
    tt++;
    
    // Parameter 'visibility_units'
    // ctype is '_visibility_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("visibility_units");
    tt->descr = tdrpStrDup("Units for plotting visibility.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &visibility_units - &_start_;
    tt->enum_def.name = tdrpStrDup("visibility_units_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VISIBILITY_METERS");
      tt->enum_def.fields[0].val = VISIBILITY_METERS;
      tt->enum_def.fields[1].name = tdrpStrDup("VISIBILITY_KM");
      tt->enum_def.fields[1].val = VISIBILITY_KM;
      tt->enum_def.fields[2].name = tdrpStrDup("VISIBILITY_METERS_KM");
      tt->enum_def.fields[2].val = VISIBILITY_METERS_KM;
      tt->enum_def.fields[3].name = tdrpStrDup("VISIBILITY_MILES");
      tt->enum_def.fields[3].val = VISIBILITY_MILES;
    tt->single_val.e = VISIBILITY_METERS;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("PRECIP PRODUCTS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'precip_rate_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("precip_rate_label");
    tt->descr = tdrpStrDup("Details for precip rate label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &precip_rate_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &precip_rate_label.do_draw - (char *) &precip_rate_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &precip_rate_label.color - (char *) &precip_rate_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &precip_rate_label.background_color - (char *) &precip_rate_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &precip_rate_label.override_color_from_flight_cat - (char *) &precip_rate_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &precip_rate_label.font_name - (char *) &precip_rate_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &precip_rate_label.font_size - (char *) &precip_rate_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &precip_rate_label.x_offset - (char *) &precip_rate_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &precip_rate_label.y_offset - (char *) &precip_rate_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &precip_rate_label.vert_align - (char *) &precip_rate_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &precip_rate_label.horiz_align - (char *) &precip_rate_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].s = tdrpStrDup("white");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = -26;
      tt->struct_vals[7].i = -16;
      tt->struct_vals[8].e = VERT_ALIGN_TOP;
      tt->struct_vals[9].e = HORIZ_ALIGN_RIGHT;
    tt++;
    
    // Parameter 'precip_accum_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("precip_accum_label");
    tt->descr = tdrpStrDup("Details for precip accum label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &precip_accum_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &precip_accum_label.do_draw - (char *) &precip_accum_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &precip_accum_label.color - (char *) &precip_accum_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &precip_accum_label.background_color - (char *) &precip_accum_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &precip_accum_label.override_color_from_flight_cat - (char *) &precip_accum_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &precip_accum_label.font_name - (char *) &precip_accum_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &precip_accum_label.font_size - (char *) &precip_accum_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &precip_accum_label.x_offset - (char *) &precip_accum_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &precip_accum_label.y_offset - (char *) &precip_accum_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &precip_accum_label.vert_align - (char *) &precip_accum_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &precip_accum_label.horiz_align - (char *) &precip_accum_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].s = tdrpStrDup("white");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = -36;
      tt->struct_vals[7].i = -16;
      tt->struct_vals[8].e = VERT_ALIGN_TOP;
      tt->struct_vals[9].e = HORIZ_ALIGN_RIGHT;
    tt++;
    
    // Parameter 'precip_accum_specify_duration_limits'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("precip_accum_specify_duration_limits");
    tt->descr = tdrpStrDup("Option to specify the duration for precip accum product.");
    tt->help = tdrpStrDup("If true, only accum values within the specified duration will be processed. See precip_accum_min_duration and precip_accum_max_duration.");
    tt->val_offset = (char *) &precip_accum_specify_duration_limits - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'precip_accum_min_duration_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("precip_accum_min_duration_secs");
    tt->descr = tdrpStrDup("Minimum duration for precip accum products (secs).");
    tt->help = tdrpStrDup("Only values with durations greater than or equal to this will be processed. See 'specify_precip_accum_duration_limits'.");
    tt->val_offset = (char *) &precip_accum_min_duration_secs - &_start_;
    tt->single_val.i = 3500;
    tt++;
    
    // Parameter 'precip_accum_max_duration_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("precip_accum_max_duration_secs");
    tt->descr = tdrpStrDup("Maximum duration for precip accum products (secs).");
    tt->help = tdrpStrDup("Only values with durations less than or equal to this will be processed. See 'specify_precip_accum_duration_limits'.");
    tt->val_offset = (char *) &precip_accum_max_duration_secs - &_start_;
    tt->single_val.i = 3700;
    tt++;
    
    // Parameter 'precip_accum_include_duration_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("precip_accum_include_duration_text");
    tt->descr = tdrpStrDup("Option to include duration text in precip accum product.");
    tt->help = tdrpStrDup("If true, the duration (in hours) will be added to the precip depth value.");
    tt->val_offset = (char *) &precip_accum_include_duration_text - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'precip_accum_line_spacing_pixels'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("precip_accum_line_spacing_pixels");
    tt->descr = tdrpStrDup("Line spacing in the vertical for multiple-line text.");
    tt->help = tdrpStrDup("Precip_accum may have more than 1 value, for different accumulation durations. Each value will appear on a different line, below the previous entry.");
    tt->val_offset = (char *) &precip_accum_line_spacing_pixels - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("STATION NAME AND TIME LABEL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'station_name_label_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("station_name_label_len");
    tt->descr = tdrpStrDup("Length of station name label.");
    tt->help = tdrpStrDup("The last n chars are included in the label.");
    tt->val_offset = (char *) &station_name_label_len - &_start_;
    tt->has_max = TRUE;
    tt->max_val.i = 4;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'station_name_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("station_name_label");
    tt->descr = tdrpStrDup("Details for station_name label.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &station_name_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &station_name_label.do_draw - (char *) &station_name_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &station_name_label.color - (char *) &station_name_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &station_name_label.background_color - (char *) &station_name_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &station_name_label.override_color_from_flight_cat - (char *) &station_name_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &station_name_label.font_name - (char *) &station_name_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &station_name_label.font_size - (char *) &station_name_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &station_name_label.x_offset - (char *) &station_name_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &station_name_label.y_offset - (char *) &station_name_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &station_name_label.vert_align - (char *) &station_name_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &station_name_label.horiz_align - (char *) &station_name_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("gray");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = 6;
      tt->struct_vals[7].i = -6;
      tt->struct_vals[8].e = VERT_ALIGN_TOP;
      tt->struct_vals[9].e = HORIZ_ALIGN_LEFT;
    tt++;
    
    // Parameter 'time_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("time_label");
    tt->descr = tdrpStrDup("Details for time string label.");
    tt->help = tdrpStrDup("Intended mainly for debugging, to see the time for the plotted METAR.");
    tt->val_offset = (char *) &time_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 10;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("do_draw");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &time_label.do_draw - (char *) &time_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &time_label.color - (char *) &time_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &time_label.background_color - (char *) &time_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("override_color_from_flight_cat");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &time_label.override_color_from_flight_cat - (char *) &time_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &time_label.font_name - (char *) &time_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &time_label.font_size - (char *) &time_label;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &time_label.x_offset - (char *) &time_label;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &time_label.y_offset - (char *) &time_label;
      tt->struct_def.fields[8].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &time_label.vert_align - (char *) &time_label;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[8].enum_def.nfields = 3;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[8].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[8].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[8].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[9].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &time_label.horiz_align - (char *) &time_label;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[9].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[9].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 10;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].s = tdrpStrDup("white");
      tt->struct_vals[2].s = tdrpStrDup("");
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 10;
      tt->struct_vals[6].i = 0;
      tt->struct_vals[7].i = -30;
      tt->struct_vals[8].e = VERT_ALIGN_TOP;
      tt->struct_vals[9].e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("WIND BARB PLOT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'draw_wind_barb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("draw_wind_barb");
    tt->descr = tdrpStrDup("Option to draw the wind barb.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &draw_wind_barb - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'station_posn_circle_radius'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("station_posn_circle_radius");
    tt->descr = tdrpStrDup("Radius of circle at station position.");
    tt->help = tdrpStrDup("Set to 0 for no circle.");
    tt->val_offset = (char *) &station_posn_circle_radius - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'wind_barb_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("wind_barb_color");
    tt->descr = tdrpStrDup("Color of wind barb.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_barb_color - &_start_;
    tt->single_val.s = tdrpStrDup("green");
    tt++;
    
    // Parameter 'override_wind_barb_color_from_flight_cat'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_wind_barb_color_from_flight_cat");
    tt->descr = tdrpStrDup("Option to override the the wind barb color using the flight category color.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &override_wind_barb_color_from_flight_cat - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'override_wind_barb_color_from_wind_speed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_wind_barb_color_from_wind_speed");
    tt->descr = tdrpStrDup("Option to override the the wind barb color using the wind speed\ntable specified below.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &override_wind_barb_color_from_wind_speed - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'wind_speed_colors'
    // ctype is '_wind_speed_color_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("wind_speed_colors");
    tt->descr = tdrpStrDup("List of min, max pairs and colors to use if\noverride_wind_barb_color_from_wind_speed is TRUE. Units are\nthose specified by the wind_units parameter. If the speed is not\ncovered by any of the ranges then the color specified by\nwind_barb_color is used.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_wind_speed_colors - &_start_;
    tt->array_n_offset = (char *) &wind_speed_colors_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(wind_speed_color_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("wind_speed_color_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_wind_speed_colors->min - (char *) _wind_speed_colors;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_wind_speed_colors->max - (char *) _wind_speed_colors;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_wind_speed_colors->color - (char *) _wind_speed_colors;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 5;
      tt->struct_vals[2].s = tdrpStrDup("blue");
      tt->struct_vals[3].d = 5;
      tt->struct_vals[4].d = 10;
      tt->struct_vals[5].s = tdrpStrDup("green");
      tt->struct_vals[6].d = 10;
      tt->struct_vals[7].d = 1000;
      tt->struct_vals[8].s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'wind_barb_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wind_barb_line_width");
    tt->descr = tdrpStrDup("Width of lines used to render wind barbs.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_barb_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'wind_barb_shaft_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wind_barb_shaft_len");
    tt->descr = tdrpStrDup("Length of wind barb shaft in pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_barb_shaft_len - &_start_;
    tt->single_val.i = 32;
    tt++;
    
    // Parameter 'wind_barb_tick_len'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("wind_barb_tick_len");
    tt->descr = tdrpStrDup("Length of wind barb ticks in pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_barb_tick_len - &_start_;
    tt->single_val.i = 8;
    tt++;
    
    // Parameter 'wind_ticks_angle_to_shaft'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("wind_ticks_angle_to_shaft");
    tt->descr = tdrpStrDup("Angle of the wind ticks relative to the shaft (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_ticks_angle_to_shaft - &_start_;
    tt->single_val.f = 55;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("FLIGHT CATEGORY AND SKY OBSCURATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'draw_flight_category'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("draw_flight_category");
    tt->descr = tdrpStrDup("Option to draw the flight category and obscuration icon.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &draw_flight_category - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'flight_category'
    // ctype is '_flight_category_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("flight_category");
    tt->descr = tdrpStrDup("Array of flight category parameters.");
    tt->help = tdrpStrDup("The flight category at a station will be computed using the ceiling (ft) and visibility (km) thresholds. If both values exceed the threshold, the flight category will be equal to or greater that the specified category.");
    tt->array_offset = (char *) &_flight_category - &_start_;
    tt->array_n_offset = (char *) &flight_category_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(flight_category_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("flight_category_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("flight_category_label_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("label");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_flight_category->label - (char *) _flight_category;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("flight_category_label_t");
        tt->struct_def.fields[0].enum_def.nfields = 3;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("VFR");
        tt->struct_def.fields[0].enum_def.fields[0].val = VFR;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("MVFR");
        tt->struct_def.fields[0].enum_def.fields[1].val = MVFR;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("IFR");
        tt->struct_def.fields[0].enum_def.fields[2].val = IFR;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_flight_category->color - (char *) _flight_category;
      tt->struct_def.fields[2].ftype = tdrpStrDup("float");
      tt->struct_def.fields[2].fname = tdrpStrDup("ceiling_threshold");
      tt->struct_def.fields[2].ptype = FLOAT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_flight_category->ceiling_threshold - (char *) _flight_category;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("visibility_threshold");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_flight_category->visibility_threshold - (char *) _flight_category;
    tt->n_struct_vals = 12;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = VFR;
      tt->struct_vals[1].s = tdrpStrDup("seagreen");
      tt->struct_vals[2].f = 1500;
      tt->struct_vals[3].f = 5;
      tt->struct_vals[4].e = MVFR;
      tt->struct_vals[5].s = tdrpStrDup("blue");
      tt->struct_vals[6].f = 500;
      tt->struct_vals[7].f = 1.6;
      tt->struct_vals[8].e = IFR;
      tt->struct_vals[9].s = tdrpStrDup("orange");
      tt->struct_vals[10].f = 0;
      tt->struct_vals[11].f = 0;
    tt++;
    
    // Parameter 'flight_category_circle_radius'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("flight_category_circle_radius");
    tt->descr = tdrpStrDup("Radius for flight_category / obscuration icon.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &flight_category_circle_radius - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("NATIVE RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("Parameters for rendering from native binary format.");
    tt++;
    
    // Parameter 'color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("color");
    tt->descr = tdrpStrDup("Chunk object foreground color");
    tt->help = tdrpStrDup("Suggested foreground color for rendering the object.");
    tt->val_offset = (char *) &color - &_start_;
    tt->single_val.s = tdrpStrDup("green");
    tt++;
    
    // Parameter 'background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("background_color");
    tt->descr = tdrpStrDup("Chunk object background color");
    tt->help = tdrpStrDup("Suggested background color for rendering the object.");
    tt->val_offset = (char *) &background_color - &_start_;
    tt->single_val.s = tdrpStrDup("black");
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("FULL METAR MESSAGE AS HIDDEN TEXT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'activate_hidden_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("activate_hidden_text");
    tt->descr = tdrpStrDup("Option to activate hidden text.");
    tt->help = tdrpStrDup("If true, the full METAR message will be sent to the client, marked as hidden text. This text may then be used by the client for any purpose, such as pop-up text in response to a mouse event near the product location.");
    tt->val_offset = (char *) &activate_hidden_text - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'hidden_text_font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_font_name");
    tt->descr = tdrpStrDup("Name of font for hidden texy.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_font_name - &_start_;
    tt->single_val.s = tdrpStrDup("fixed");
    tt++;
    
    // Parameter 'hidden_text_x_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_x_offset");
    tt->descr = tdrpStrDup("X offset for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_x_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'hidden_text_y_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_y_offset");
    tt->descr = tdrpStrDup("Y offset for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_y_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'hidden_text_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_font_size");
    tt->descr = tdrpStrDup("Font size for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_font_size - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'hidden_text_vert_align'
    // ctype is '_vert_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_vert_align");
    tt->descr = tdrpStrDup("Vertical alignment hidden text.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_vert_align - &_start_;
    tt->enum_def.name = tdrpStrDup("vert_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
      tt->enum_def.fields[0].val = VERT_ALIGN_TOP;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
      tt->enum_def.fields[1].val = VERT_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
      tt->enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
    tt->single_val.e = VERT_ALIGN_CENTER;
    tt++;
    
    // Parameter 'hidden_text_horiz_align'
    // ctype is '_horiz_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_horiz_align");
    tt->descr = tdrpStrDup("Horizontal alignment for hidden text.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_horiz_align - &_start_;
    tt->enum_def.name = tdrpStrDup("horiz_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
      tt->enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
      tt->enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
      tt->enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->single_val.e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'hidden_text_foreground_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_foreground_color");
    tt->descr = tdrpStrDup("Hidden text background color.");
    tt->help = tdrpStrDup("Set to empty string to use flight cat color color.");
    tt->val_offset = (char *) &hidden_text_foreground_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'hidden_text_background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_background_color");
    tt->descr = tdrpStrDup("Hidden text background color.");
    tt->help = tdrpStrDup("Set to empty string to use display background color.");
    tt->val_offset = (char *) &hidden_text_background_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("ADD CHUNK TO END OF PRODUCT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'add_raw_data_as_chunk'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_raw_data_as_chunk");
    tt->descr = tdrpStrDup("Option to add raw data as chunk.");
    tt->help = tdrpStrDup("If true, the raw data buffer will be added as a chunk at the end of the product.");
    tt->val_offset = (char *) &add_raw_data_as_chunk - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 14'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 14");
    tt->comment_hdr = tdrpStrDup("RENDER ALTERNATIVE STATION ICON IF CEILING DATA IS MISSING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'render_missing_ceiling_icon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("render_missing_ceiling_icon");
    tt->descr = tdrpStrDup("Option to render special icon if ceiling is missing.");
    tt->help = tdrpStrDup("Normally, the station plot shows a circle which is filled in at 0%, 25%, 50%, 75% or 100%, depending on cloud cover. If ceiling is missing, the option allows you to render an alternative icon - say an open triangle, or an M.");
    tt->val_offset = (char *) &render_missing_ceiling_icon - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'missing_ceiling_icon_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("missing_ceiling_icon_color");
    tt->descr = tdrpStrDup("Color of icon indicating missing ceiling information.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &missing_ceiling_icon_color - &_start_;
    tt->single_val.s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'missing_ceiling_icon_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("missing_ceiling_icon_line_width");
    tt->descr = tdrpStrDup("Width of lines used to render missing ceiling icon.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &missing_ceiling_icon_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'missing_ceiling_icon'
    // ctype is '_stroked_icon_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("missing_ceiling_icon");
    tt->descr = tdrpStrDup("Stroked icon for missing ceiling");
    tt->help = tdrpStrDup("The coordinates are in pixel space.");
    tt->array_offset = (char *) &_missing_ceiling_icon - &_start_;
    tt->array_n_offset = (char *) &missing_ceiling_icon_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(stroked_icon_point_t);
    tt->array_n = 4;
    tt->struct_def.name = tdrpStrDup("stroked_icon_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_missing_ceiling_icon->x - (char *) _missing_ceiling_icon;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_missing_ceiling_icon->y - (char *) _missing_ceiling_icon;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 0;
      tt->struct_vals[1].i = 10;
      tt->struct_vals[2].i = -8;
      tt->struct_vals[3].i = -5;
      tt->struct_vals[4].i = 8;
      tt->struct_vals[5].i = -5;
      tt->struct_vals[6].i = 0;
      tt->struct_vals[7].i = 10;
    tt++;
    
    // Parameter 'missing_ceiling_icon_scale'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("missing_ceiling_icon_scale");
    tt->descr = tdrpStrDup("Scale the icon by this value.");
    tt->help = tdrpStrDup("This makes it easy to try different sizes without re-specifying all of the icon points every time.");
    tt->val_offset = (char *) &missing_ceiling_icon_scale - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
