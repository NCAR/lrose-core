/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program GenPoly2Symprod
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance.");
    tt->help = tdrpStrDup("Used for procmap registration and auto restarting.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'no_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_threads");
    tt->descr = tdrpStrDup("Option to prevent server from using a thread per client.");
    tt->help = tdrpStrDup("For debugging purposes it it sometimes useful to suppress the use of threads. Set no_threads to TRUE for this type of debugging.");
    tt->val_offset = (char *) &no_threads - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("Server details for support from ServerMgr");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("Port number.");
    tt->help = tdrpStrDup("The server listens on this port for client requests.");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.i = 5472;
    tt++;
    
    // Parameter 'qmax'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("qmax");
    tt->descr = tdrpStrDup("Max quiescent period (secs).");
    tt->help = tdrpStrDup("If the server does not receive requests for this time period, it will die gracefully. If set to -1, the server never exits.");
    tt->val_offset = (char *) &qmax - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'max_clients'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_clients");
    tt->descr = tdrpStrDup("Maximum number of clients");
    tt->help = tdrpStrDup("This is the maximum number of threads the application will produce to handle client requests.  If the maximum is reached, new clients will receive a SERVICE_DENIED error message and will have to request the data again.  If set to -1, no maximum is enforced.");
    tt->val_offset = (char *) &max_clients - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'polyline_dashed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("polyline_dashed");
    tt->descr = tdrpStrDup("Polyline dashed flag");
    tt->help = tdrpStrDup("If set, the polyline will be rendered using a dashed line rather than a solid line.");
    tt->val_offset = (char *) &polyline_dashed - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'polyline_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("polyline_color");
    tt->descr = tdrpStrDup("Polyline color");
    tt->help = tdrpStrDup("Name of color suggested for rendering the polylines.");
    tt->val_offset = (char *) &polyline_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'polyline_color_mapped'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("polyline_color_mapped");
    tt->descr = tdrpStrDup("Polyline color mapped");
    tt->help = tdrpStrDup("TRUE to map colors using mapping function");
    tt->val_offset = (char *) &polyline_color_mapped - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'polyline_color_mapped_x'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("polyline_color_mapped_x");
    tt->descr = tdrpStrDup("Polyline color mapping");
    tt->help = tdrpStrDup("x values (in the 1DVal(0) value)");
    tt->array_offset = (char *) &_polyline_color_mapped_x - &_start_;
    tt->array_n_offset = (char *) &polyline_color_mapped_x_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'polyline_color_mapped_y'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("polyline_color_mapped_y");
    tt->descr = tdrpStrDup("Polyline color mapping");
    tt->help = tdrpStrDup("y values (a color)");
    tt->array_offset = (char *) &_polyline_color_mapped_y - &_start_;
    tt->array_n_offset = (char *) &polyline_color_mapped_y_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("Line styles");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'suggested_line_type'
    // ctype is '_line_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("suggested_line_type");
    tt->descr = tdrpStrDup("display line type");
    tt->help = tdrpStrDup("Line type suggested for using on the display.");
    tt->val_offset = (char *) &suggested_line_type - &_start_;
    tt->enum_def.name = tdrpStrDup("line_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LINETYPE_SOLID");
      tt->enum_def.fields[0].val = LINETYPE_SOLID;
      tt->enum_def.fields[1].name = tdrpStrDup("LINETYPE_DASH");
      tt->enum_def.fields[1].val = LINETYPE_DASH;
      tt->enum_def.fields[2].name = tdrpStrDup("LINETYPE_DOT_DASH");
      tt->enum_def.fields[2].val = LINETYPE_DOT_DASH;
    tt->single_val.e = LINETYPE_SOLID;
    tt++;
    
    // Parameter 'suggested_line_width'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("suggested_line_width");
    tt->descr = tdrpStrDup("display line width");
    tt->help = tdrpStrDup("Line width suggested for using on the display.");
    tt->val_offset = (char *) &suggested_line_width - &_start_;
    tt->single_val.l = 1;
    tt++;
    
    // Parameter 'suggested_arrow_line_width'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("suggested_arrow_line_width");
    tt->descr = tdrpStrDup("display arrow line width");
    tt->help = tdrpStrDup("Line width suggested for using on the arrow display.");
    tt->val_offset = (char *) &suggested_arrow_line_width - &_start_;
    tt->single_val.l = 2;
    tt++;
    
    // Parameter 'suggested_capstyle'
    // ctype is '_capstyle_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("suggested_capstyle");
    tt->descr = tdrpStrDup("display capstyle");
    tt->help = tdrpStrDup("Capstyle suggested for using on the display.");
    tt->val_offset = (char *) &suggested_capstyle - &_start_;
    tt->enum_def.name = tdrpStrDup("capstyle_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CAPSTYLE_BUTT");
      tt->enum_def.fields[0].val = CAPSTYLE_BUTT;
      tt->enum_def.fields[1].name = tdrpStrDup("CAPSTYLE_NOT_LAST");
      tt->enum_def.fields[1].val = CAPSTYLE_NOT_LAST;
      tt->enum_def.fields[2].name = tdrpStrDup("CAPSTYLE_PROJECTING");
      tt->enum_def.fields[2].val = CAPSTYLE_PROJECTING;
      tt->enum_def.fields[3].name = tdrpStrDup("CAPSTYLE_ROUND");
      tt->enum_def.fields[3].val = CAPSTYLE_ROUND;
    tt->single_val.e = CAPSTYLE_BUTT;
    tt++;
    
    // Parameter 'suggested_joinstyle'
    // ctype is '_joinstyle_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("suggested_joinstyle");
    tt->descr = tdrpStrDup("display joinstyle");
    tt->help = tdrpStrDup("Joinstyle suggested for using on the display.");
    tt->val_offset = (char *) &suggested_joinstyle - &_start_;
    tt->enum_def.name = tdrpStrDup("joinstyle_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("JOINSTYLE_BEVEL");
      tt->enum_def.fields[0].val = JOINSTYLE_BEVEL;
      tt->enum_def.fields[1].name = tdrpStrDup("JOINSTYLE_MITER");
      tt->enum_def.fields[1].val = JOINSTYLE_MITER;
      tt->enum_def.fields[2].name = tdrpStrDup("JOINSTYLE_ROUND");
      tt->enum_def.fields[2].val = JOINSTYLE_ROUND;
    tt->single_val.e = JOINSTYLE_BEVEL;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("Field values");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'display_fields'
    // ctype is '_field_display_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("display_fields");
    tt->descr = tdrpStrDup("Value fields to display with each polygon");
    tt->help = tdrpStrDup("\tfield_name - The name of the field in the GenPoly database. This name must match the name in the database exactly. If the field isn't found, nothing is displayed.\n\tformat_string - The printf format string to use when displaying the field.\n");
    tt->array_offset = (char *) &_display_fields - &_start_;
    tt->array_n_offset = (char *) &display_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(field_display_t);
    tt->array_n = 0;
    tt->struct_def.name = tdrpStrDup("field_display_t");
    tt->struct_def.nfields = 11;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("field_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_display_fields->field_name - (char *) _display_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("format_string");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_display_fields->format_string - (char *) _display_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("display_units");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_display_fields->display_units - (char *) _display_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("text_color");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_display_fields->text_color - (char *) _display_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_display_fields->background_color - (char *) _display_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_display_fields->x_offset - (char *) _display_fields;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_display_fields->y_offset - (char *) _display_fields;
      tt->struct_def.fields[7].ftype = tdrpStrDup("string");
      tt->struct_def.fields[7].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[7].ptype = STRING_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_display_fields->font_name - (char *) _display_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("int");
      tt->struct_def.fields[8].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[8].ptype = INT_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_display_fields->font_size - (char *) _display_fields;
      tt->struct_def.fields[9].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_display_fields->vert_align - (char *) _display_fields;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[9].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[9].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[10].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[10].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[10].ptype = ENUM_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_display_fields->horiz_align - (char *) _display_fields;
        tt->struct_def.fields[10].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[10].enum_def.nfields = 3;
        tt->struct_def.fields[10].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[10].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[10].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[10].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[10].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[10].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[10].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[10].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 0;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'show_field_names'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("show_field_names");
    tt->descr = tdrpStrDup("Option to make field names part of the displayed fields.");
    tt->help = tdrpStrDup("Default is not to do this, but it does help differentiate between the fields.");
    tt->val_offset = (char *) &show_field_names - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'display_time'
    // ctype is '_time_display_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("display_time");
    tt->descr = tdrpStrDup("Value fields to display with each polygon");
    tt->help = tdrpStrDup("\tdisplayGenTime - option to display issue time.\n\t  Requires that a leadTime in seconds be saved\n\t  as a field in the GenPoly.\n\tdisplayValidTime - option to display valid time.\n\tdisplayExpireTime - option to display expire time.\n\ttext_color - Color to use for the text.\n\tbackground_color - Color to use for the background.\n\tx_offset - X offset, in pixels, of the location to display the text. The text is displayed at this offset from the polygon centroid.\n\ty_offset - Y offset, in pixels, of the location to display the text. The text is displayed at this offset from the polygon centroid.\n\tfont_name - Name of the font to use for the text.\n\tfont_size - Size of the font to use for the text.\n\tvert_align - Vertical alignment to use for the text.\n\thoriz_align - Horizontal alignment to use for the text.\n");
    tt->val_offset = (char *) &display_time - &_start_;
    tt->struct_def.name = tdrpStrDup("time_display_t");
    tt->struct_def.nfields = 11;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("displayGenTime");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &display_time.displayGenTime - (char *) &display_time;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("displayValidTime");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &display_time.displayValidTime - (char *) &display_time;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("displayExpireTime");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &display_time.displayExpireTime - (char *) &display_time;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("text_color");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &display_time.text_color - (char *) &display_time;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &display_time.background_color - (char *) &display_time;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &display_time.x_offset - (char *) &display_time;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &display_time.y_offset - (char *) &display_time;
      tt->struct_def.fields[7].ftype = tdrpStrDup("string");
      tt->struct_def.fields[7].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[7].ptype = STRING_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &display_time.font_name - (char *) &display_time;
      tt->struct_def.fields[8].ftype = tdrpStrDup("int");
      tt->struct_def.fields[8].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[8].ptype = INT_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &display_time.font_size - (char *) &display_time;
      tt->struct_def.fields[9].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &display_time.vert_align - (char *) &display_time;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[9].enum_def.nfields = 3;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[9].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[9].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[9].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[10].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[10].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[10].ptype = ENUM_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &display_time.horiz_align - (char *) &display_time;
        tt->struct_def.fields[10].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[10].enum_def.nfields = 3;
        tt->struct_def.fields[10].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[10].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[10].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[10].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[10].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[10].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[10].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[10].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 11;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].b = pFALSE;
      tt->struct_vals[2].b = pFALSE;
      tt->struct_vals[3].s = tdrpStrDup("red");
      tt->struct_vals[4].s = tdrpStrDup("");
      tt->struct_vals[5].i = 0;
      tt->struct_vals[6].i = 0;
      tt->struct_vals[7].s = tdrpStrDup("fixed");
      tt->struct_vals[8].i = 12;
      tt->struct_vals[9].e = VERT_ALIGN_CENTER;
      tt->struct_vals[10].e = HORIZ_ALIGN_LEFT;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("Vectors");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_vectors'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_vectors");
    tt->descr = tdrpStrDup("Plot vector flag");
    tt->help = tdrpStrDup("If set, the forecast vector associated with each polygon will be plotted");
    tt->val_offset = (char *) &plot_vectors - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'forecast_lead_time'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("forecast_lead_time");
    tt->descr = tdrpStrDup("Forecast lead time (secs).");
    tt->help = tdrpStrDup("Lead time for forecast vectors.");
    tt->val_offset = (char *) &forecast_lead_time - &_start_;
    tt->single_val.l = 1800;
    tt++;
    
    // Parameter 'vector_field_names'
    // ctype is '_vector_field_names_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("vector_field_names");
    tt->descr = tdrpStrDup("The field names in the GenPoly SPDB database that give the vector information.");
    tt->help = tdrpStrDup("\tuse_speed_dir_fields - Flag indicating which type of fields have the vector information. If true, the speed_field_name and dir_field_name parameters are used for getting the vector information.\nIf false, the u_field_name and v_field_name parameters are used.\n\tspeed_field_name - The name of the field that contains the speed value. The speed value is assumed to be in km/hr.\n\tdir_field_name - The name of the field that contains the direction value. The direction is assumed to be in degN.\n\tu_field_name - The name of the field that contains the U value. The U value is assumed to be in m/s.\n\tv_field_name - The name of the field that contains the V value. The V value is assumed to be in m/s.\n");
    tt->val_offset = (char *) &vector_field_names - &_start_;
    tt->struct_def.name = tdrpStrDup("vector_field_names_t");
    tt->struct_def.nfields = 5;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("use_speed_dir_fields");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &vector_field_names.use_speed_dir_fields - (char *) &vector_field_names;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("speed_field_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &vector_field_names.speed_field_name - (char *) &vector_field_names;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("dir_field_name");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &vector_field_names.dir_field_name - (char *) &vector_field_names;
      tt->struct_def.fields[3].ftype = tdrpStrDup("string");
      tt->struct_def.fields[3].fname = tdrpStrDup("u_field_name");
      tt->struct_def.fields[3].ptype = STRING_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &vector_field_names.u_field_name - (char *) &vector_field_names;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("v_field_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &vector_field_names.v_field_name - (char *) &vector_field_names;
    tt->n_struct_vals = 5;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].s = tdrpStrDup("speed");
      tt->struct_vals[2].s = tdrpStrDup("dir");
      tt->struct_vals[3].s = tdrpStrDup("U");
      tt->struct_vals[4].s = tdrpStrDup("V");
    tt++;
    
    // Parameter 'vector_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vector_color");
    tt->descr = tdrpStrDup("Motion vector color.");
    tt->help = tdrpStrDup("Name of color suggested for rendering the motion vector.");
    tt->val_offset = (char *) &vector_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'arrow_head_len'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("arrow_head_len");
    tt->descr = tdrpStrDup("Length of arrow head (km).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &arrow_head_len - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'arrow_head_half_angle'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("arrow_head_half_angle");
    tt->descr = tdrpStrDup("Half angle of arrow head (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &arrow_head_half_angle - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 90;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'fixed_length_arrows'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("fixed_length_arrows");
    tt->descr = tdrpStrDup("Fixed length arrows flag");
    tt->help = tdrpStrDup("If flag set, direction arrows are of fixed length. If not set, arrows are scaled to length for time forecast_lead_time.");
    tt->val_offset = (char *) &fixed_length_arrows - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'arrow_shaft_length'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("arrow_shaft_length");
    tt->descr = tdrpStrDup("Shaft length arrow head (km).");
    tt->help = tdrpStrDup("This is used if fixed_length_arrows is TRUE.");
    tt->val_offset = (char *) &arrow_shaft_length - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'plot_genpoly_id'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_genpoly_id");
    tt->descr = tdrpStrDup("Option to plot ID at centroid of polyline.");
    tt->help = tdrpStrDup("Default is not to do this.");
    tt->val_offset = (char *) &plot_genpoly_id - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'id_format_string'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("id_format_string");
    tt->descr = tdrpStrDup("C-style format string to use in plotting ID.");
    tt->help = tdrpStrDup("Relevant only if plot_genpoly_id is TRUE.");
    tt->val_offset = (char *) &id_format_string - &_start_;
    tt->single_val.s = tdrpStrDup("ID : %d");
    tt++;
    
    // Parameter 'id_label'
    // ctype is '_text_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("id_label");
    tt->descr = tdrpStrDup("Details for id label. Relevant only if plot_genpoly_id is TRUE.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &id_label - &_start_;
    tt->struct_def.name = tdrpStrDup("text_item_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &id_label.background_color - (char *) &id_label;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &id_label.font_name - (char *) &id_label;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &id_label.font_size - (char *) &id_label;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &id_label.x_offset - (char *) &id_label;
      tt->struct_def.fields[4].ftype = tdrpStrDup("int");
      tt->struct_def.fields[4].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[4].ptype = INT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &id_label.y_offset - (char *) &id_label;
      tt->struct_def.fields[5].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[5].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[5].ptype = ENUM_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &id_label.vert_align - (char *) &id_label;
        tt->struct_def.fields[5].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[5].enum_def.nfields = 3;
        tt->struct_def.fields[5].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[5].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[5].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[5].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[5].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[5].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[5].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[5].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[6].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[6].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[6].ptype = ENUM_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &id_label.horiz_align - (char *) &id_label;
        tt->struct_def.fields[6].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[6].enum_def.nfields = 3;
        tt->struct_def.fields[6].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[6].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[6].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[6].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[6].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[6].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[6].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[6].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 7;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("");
      tt->struct_vals[1].s = tdrpStrDup("fixed");
      tt->struct_vals[2].i = 10;
      tt->struct_vals[3].i = 0;
      tt->struct_vals[4].i = 0;
      tt->struct_vals[5].e = VERT_ALIGN_CENTER;
      tt->struct_vals[6].e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'plot_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_text");
    tt->descr = tdrpStrDup("Plot text");
    tt->help = tdrpStrDup("If set, the text content of the GenPoly will be plotted at the centroid of the polygon");
    tt->val_offset = (char *) &plot_text - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'text_info'
    // ctype is '_text_display_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("text_info");
    tt->descr = tdrpStrDup("Text formatting, for when plot_text=TRUE");
    tt->help = tdrpStrDup("\ttext_color - Color to use for the text.\n\tbackground_color - Color to use for the background.\n\tx_offset - X offset, in pixels, of the location to display the text. The text is displayed at this offset from the polygon centroid.\n\ty_offset - Y offset, in pixels, of the location to display the text. The text is displayed at this offset from the polygon centroid.\n\tfont_name - Name of the font to use for the text.\n\tfont_size - Size of the font to use for the text.\n\tvert_align - Vertical alignment to use for the text.\n\thoriz_align - Horizontal alignment to use for the text.\n");
    tt->val_offset = (char *) &text_info - &_start_;
    tt->struct_def.name = tdrpStrDup("text_display_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("text_color");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &text_info.text_color - (char *) &text_info;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("background_color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &text_info.background_color - (char *) &text_info;
      tt->struct_def.fields[2].ftype = tdrpStrDup("int");
      tt->struct_def.fields[2].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[2].ptype = INT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &text_info.x_offset - (char *) &text_info;
      tt->struct_def.fields[3].ftype = tdrpStrDup("int");
      tt->struct_def.fields[3].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[3].ptype = INT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &text_info.y_offset - (char *) &text_info;
      tt->struct_def.fields[4].ftype = tdrpStrDup("string");
      tt->struct_def.fields[4].fname = tdrpStrDup("font_name");
      tt->struct_def.fields[4].ptype = STRING_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &text_info.font_name - (char *) &text_info;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("font_size");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &text_info.font_size - (char *) &text_info;
      tt->struct_def.fields[6].ftype = tdrpStrDup("vert_align_t");
      tt->struct_def.fields[6].fname = tdrpStrDup("vert_align");
      tt->struct_def.fields[6].ptype = ENUM_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &text_info.vert_align - (char *) &text_info;
        tt->struct_def.fields[6].enum_def.name = tdrpStrDup("vert_align_t");
        tt->struct_def.fields[6].enum_def.nfields = 3;
        tt->struct_def.fields[6].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[6].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[6].enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
        tt->struct_def.fields[6].enum_def.fields[0].val = VERT_ALIGN_TOP;
        tt->struct_def.fields[6].enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
        tt->struct_def.fields[6].enum_def.fields[1].val = VERT_ALIGN_CENTER;
        tt->struct_def.fields[6].enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
        tt->struct_def.fields[6].enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
      tt->struct_def.fields[7].ftype = tdrpStrDup("horiz_align_t");
      tt->struct_def.fields[7].fname = tdrpStrDup("horiz_align");
      tt->struct_def.fields[7].ptype = ENUM_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &text_info.horiz_align - (char *) &text_info;
        tt->struct_def.fields[7].enum_def.name = tdrpStrDup("horiz_align_t");
        tt->struct_def.fields[7].enum_def.nfields = 3;
        tt->struct_def.fields[7].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[7].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[7].enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
        tt->struct_def.fields[7].enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
        tt->struct_def.fields[7].enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
        tt->struct_def.fields[7].enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
        tt->struct_def.fields[7].enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
        tt->struct_def.fields[7].enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->n_struct_vals = 8;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("black");
      tt->struct_vals[1].s = tdrpStrDup("white");
      tt->struct_vals[2].i = 0;
      tt->struct_vals[3].i = 0;
      tt->struct_vals[4].s = tdrpStrDup("fixed");
      tt->struct_vals[5].i = 2;
      tt->struct_vals[6].e = VERT_ALIGN_CENTER;
      tt->struct_vals[7].e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'render_met_mode'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("render_met_mode");
    tt->descr = tdrpStrDup("Option to do rendering for MODE/MET gen polys");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &render_met_mode - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
