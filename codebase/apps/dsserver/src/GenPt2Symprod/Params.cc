/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program GenPt2Symprod
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance.");
    tt->help = tdrpStrDup("Used for procmap registration and auto restarting.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'no_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_threads");
    tt->descr = tdrpStrDup("Option to prevent server from using a thread per client.");
    tt->help = tdrpStrDup("For debugging purposes it it sometimes useful to suppress the use of threads. Set no_threads to TRUE for this type of debugging.");
    tt->val_offset = (char *) &no_threads - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("Server details for support from ServerMgr");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("Port number.");
    tt->help = tdrpStrDup("The server listens on this port for client requests.");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.i = 5465;
    tt++;
    
    // Parameter 'qmax'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("qmax");
    tt->descr = tdrpStrDup("Max quiescent period (secs).");
    tt->help = tdrpStrDup("If the server does not receive requests for this time period, it will die gracefully. If set to -1, the server never exits.");
    tt->val_offset = (char *) &qmax - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'max_clients'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_clients");
    tt->descr = tdrpStrDup("Maximum number of clients");
    tt->help = tdrpStrDup("This is the maximum number of threads the application will produce to handle client requests.  If the maximum is reached, new clients will receive a SERVICE_DENIED error message and will have to request the data again.  If set to -1, no maximum is enforced.");
    tt->val_offset = (char *) &max_clients - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("TEXT RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'do_text_labelling'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("do_text_labelling");
    tt->descr = tdrpStrDup("Option to put textual output of field values in output.\nIf you only want crosses at the GenPt locations,\nwith no text, set this to FALSE and set draw_crosses\nto TRUE");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &do_text_labelling - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'add_point_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_point_text");
    tt->descr = tdrpStrDup("Option to Prepend the Generic Point's Text Label in output\n");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &add_point_text - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'text_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("text_color");
    tt->descr = tdrpStrDup("Text color. Also determines color of cross\nicons if draw_crosses is TRUE.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'text_background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("text_background_color");
    tt->descr = tdrpStrDup("Text background color.");
    tt->help = tdrpStrDup("Set to empty string to use display background color.");
    tt->val_offset = (char *) &text_background_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("font_name");
    tt->descr = tdrpStrDup("Font name.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &font_name - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'text_offset'
    // ctype is '_text_offset_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("text_offset");
    tt->descr = tdrpStrDup("Pixel offset values for starting the text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_offset - &_start_;
    tt->struct_def.name = tdrpStrDup("text_offset_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("long");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = LONG_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &text_offset.x - (char *) &text_offset;
      tt->struct_def.fields[1].ftype = tdrpStrDup("long");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = LONG_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &text_offset.y - (char *) &text_offset;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].l = 0;
      tt->struct_vals[1].l = 0;
    tt++;
    
    // Parameter 'text_vert_align'
    // ctype is '_vert_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("text_vert_align");
    tt->descr = tdrpStrDup("Vertical alignment for the text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_vert_align - &_start_;
    tt->enum_def.name = tdrpStrDup("vert_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
      tt->enum_def.fields[0].val = VERT_ALIGN_TOP;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
      tt->enum_def.fields[1].val = VERT_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
      tt->enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
    tt->single_val.e = VERT_ALIGN_CENTER;
    tt++;
    
    // Parameter 'text_horiz_align'
    // ctype is '_horiz_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("text_horiz_align");
    tt->descr = tdrpStrDup("Horizontal alignment for the text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_horiz_align - &_start_;
    tt->enum_def.name = tdrpStrDup("horiz_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
      tt->enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
      tt->enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
      tt->enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->single_val.e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'text_font_size'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("text_font_size");
    tt->descr = tdrpStrDup("Size of font to use for text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_font_size - &_start_;
    tt->single_val.l = 0;
    tt++;
    
    // Parameter 'combopt_side'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("combopt_side");
    tt->descr = tdrpStrDup("If Product is a ComboPt, take Gen pt from side 1  or 2 ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &combopt_side - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.l = 1;
    tt->max_val.l = 2;
    tt->single_val.l = 1;
    tt++;
    
    // Parameter 'text_font_style'
    // ctype is '_font_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("text_font_style");
    tt->descr = tdrpStrDup("Font style for the text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_font_style - &_start_;
    tt->enum_def.name = tdrpStrDup("font_style_t");
    tt->enum_def.nfields = 7;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TEXT_NORM");
      tt->enum_def.fields[0].val = TEXT_NORM;
      tt->enum_def.fields[1].name = tdrpStrDup("TEXT_BOLD");
      tt->enum_def.fields[1].val = TEXT_BOLD;
      tt->enum_def.fields[2].name = tdrpStrDup("TEXT_ITALICS");
      tt->enum_def.fields[2].val = TEXT_ITALICS;
      tt->enum_def.fields[3].name = tdrpStrDup("TEXT_SUBSCRIPT");
      tt->enum_def.fields[3].val = TEXT_SUBSCRIPT;
      tt->enum_def.fields[4].name = tdrpStrDup("TEXT_SUPERSCRIPT");
      tt->enum_def.fields[4].val = TEXT_SUPERSCRIPT;
      tt->enum_def.fields[5].name = tdrpStrDup("TEXT_UNDERLINE");
      tt->enum_def.fields[5].val = TEXT_UNDERLINE;
      tt->enum_def.fields[6].name = tdrpStrDup("TEXT_STRIKETHROUGH");
      tt->enum_def.fields[6].val = TEXT_STRIKETHROUGH;
    tt->single_val.e = TEXT_NORM;
    tt++;
    
    // Parameter 'field_info'
    // ctype is '_field_info_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("field_info");
    tt->descr = tdrpStrDup("List of information about fields to display.");
    tt->help = tdrpStrDup("\tname - The name of the field to display. Must appear exactly as it appears in the SPDB database.\n\tmultiplier - Database values are multiplied by this value before they are displayed. This is used to change units of the displayed value, if desired.\n");
    tt->array_offset = (char *) &_field_info - &_start_;
    tt->array_n_offset = (char *) &field_info_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(field_info_t);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("field_info_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_field_info->name - (char *) _field_info;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("multiplier");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_field_info->multiplier - (char *) _field_info;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("not_set");
      tt->struct_vals[1].d = 0;
    tt++;
    
    // Parameter 'value_format_string'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("value_format_string");
    tt->descr = tdrpStrDup("The printf() format string to use when formating the data values for display.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &value_format_string - &_start_;
    tt->single_val.s = tdrpStrDup("%f");
    tt++;
    
    // Parameter 'field_delim'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("field_delim");
    tt->descr = tdrpStrDup("Delimiter to use between field values if there are more than one.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &field_delim - &_start_;
    tt->single_val.s = tdrpStrDup(",");
    tt++;
    
    // Parameter 'missing_value_string'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("missing_value_string");
    tt->descr = tdrpStrDup("Missing field value indicator.");
    tt->help = tdrpStrDup("This string will be displayed in place of any field value that is not found in the SPDB database.");
    tt->val_offset = (char *) &missing_value_string - &_start_;
    tt->single_val.s = tdrpStrDup("*");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("CROSS RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'draw_crosses'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("draw_crosses");
    tt->descr = tdrpStrDup("Option to draw crosses at the site of each GenPt.");
    tt->help = tdrpStrDup("Useful for storm initiation data. The text_color\nparameter also determines the color of the crosses.\nTo draw crosses without text, set do_text_labelling\nto FALSE.");
    tt->val_offset = (char *) &draw_crosses - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'cross_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cross_line_width");
    tt->descr = tdrpStrDup("Line thickness of icon lines used in drawing crosses.");
    tt->help = tdrpStrDup("Only relevant if draw_crosses is TRUE.");
    tt->val_offset = (char *) &cross_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'cross_icon_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cross_icon_size");
    tt->descr = tdrpStrDup("If GenPts are represented by a cross, this\nis the length of each arm of the cross in pixels.");
    tt->help = tdrpStrDup("Only relevant if draw_crosses is TRUE.");
    tt->val_offset = (char *) &cross_icon_size - &_start_;
    tt->single_val.i = 4;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("TIME LABELLING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'do_time_labelling'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("do_time_labelling");
    tt->descr = tdrpStrDup("Option to add a text label representing the time\nof each GenPt to the display. The text_color parameter\ndetermines the color of the text used.");
    tt->help = tdrpStrDup("Useful for StormInitLocation data. ");
    tt->val_offset = (char *) &do_time_labelling - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'time_format'
    // ctype is '_time_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("time_format");
    tt->descr = tdrpStrDup("Time label format");
    tt->help = tdrpStrDup("Only relevant if do_time_labelling is TRUE");
    tt->val_offset = (char *) &time_format - &_start_;
    tt->enum_def.name = tdrpStrDup("time_format_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIME_LABEL_HHMM");
      tt->enum_def.fields[0].val = TIME_LABEL_HHMM;
      tt->enum_def.fields[1].name = tdrpStrDup("TIME_LABEL_HHMMSS");
      tt->enum_def.fields[1].val = TIME_LABEL_HHMMSS;
      tt->enum_def.fields[2].name = tdrpStrDup("TIME_LABEL_YYYYMMDDHHMMSS");
      tt->enum_def.fields[2].val = TIME_LABEL_YYYYMMDDHHMMSS;
    tt->single_val.e = TIME_LABEL_HHMM;
    tt++;
    
    // Parameter 'time_text_offset'
    // ctype is '_text_offset_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("time_text_offset");
    tt->descr = tdrpStrDup("Pixel offset values for starting the time labelling text");
    tt->help = tdrpStrDup("Only relevant if do_time_labelling is TRUE");
    tt->val_offset = (char *) &time_text_offset - &_start_;
    tt->struct_def.name = tdrpStrDup("text_offset_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("long");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = LONG_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &time_text_offset.x - (char *) &time_text_offset;
      tt->struct_def.fields[1].ftype = tdrpStrDup("long");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = LONG_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &time_text_offset.y - (char *) &time_text_offset;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].l = 0;
      tt->struct_vals[1].l = 0;
    tt++;
    
    // Parameter 'show_SaveTime'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("show_SaveTime");
    tt->descr = tdrpStrDup("If this is set, then the server will look in the GenPt for\na field named saveTime. If this is found, it will be taken\nto be the time the data were saved (in seconds since January 1 1970)\nand it will be displayed.");
    tt->help = tdrpStrDup("Added by Niles Oien for StormInitLocation work.");
    tt->val_offset = (char *) &show_SaveTime - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'delay_text_offset'
    // ctype is '_text_offset_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("delay_text_offset");
    tt->descr = tdrpStrDup("Pixel offset values for starting the delay text");
    tt->help = tdrpStrDup("Only relevant if show_delay is TRUE");
    tt->val_offset = (char *) &delay_text_offset - &_start_;
    tt->struct_def.name = tdrpStrDup("text_offset_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("long");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = LONG_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &delay_text_offset.x - (char *) &delay_text_offset;
      tt->struct_def.fields[1].ftype = tdrpStrDup("long");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = LONG_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &delay_text_offset.y - (char *) &delay_text_offset;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].l = 0;
      tt->struct_vals[1].l = 0;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("COLOR THRESHOLDING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'do_color_thresholding'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("do_color_thresholding");
    tt->descr = tdrpStrDup("Option to use thresholding to determine display colors.");
    tt->help = tdrpStrDup("Allows the user to effectively set up a color scale\nbased on a physical value saved in the GenPt.\n\nNote that if the requested threshold variable is not found\nin the GenPt, or if it is found but it lies outside of\nthe specified color thresholds, then the default text_color\nwill be used in the rendering of crosses and their labelling.");
    tt->val_offset = (char *) &do_color_thresholding - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'color_threshold_field_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("color_threshold_field_name");
    tt->descr = tdrpStrDup("Field name to do color thresholding on. Relevant only\nif do_color_thresholding is TRUE.");
    tt->help = tdrpStrDup("Typically set to 'duration' or 'area_max' for storm\ninitialization work. NOTE : if this is set to 'dataAge' then\nthe color coding is done based on the data age in seconds\nrather than an actual field. If this option is selected for\nuse with CIDD, then the CIDD symprod parameter short_requests\nshould be set to TRUE so that the end of the data interval can\nbe set correctly.");
    tt->val_offset = (char *) &color_threshold_field_name - &_start_;
    tt->single_val.s = tdrpStrDup("duration");
    tt++;
    
    // Parameter 'color_thesholds'
    // ctype is '_threshold_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("color_thesholds");
    tt->descr = tdrpStrDup("Threshold ranges and colors. Relevant only if\ndo_color_thesholding is TRUE. The lower bound is\ninclusive, the upper bound is exclusive.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_color_thesholds - &_start_;
    tt->array_n_offset = (char *) &color_thesholds_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(threshold_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("threshold_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("minval");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_color_thesholds->minval - (char *) _color_thesholds;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("maxval");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_color_thesholds->maxval - (char *) _color_thesholds;
      tt->struct_def.fields[2].ftype = tdrpStrDup("string");
      tt->struct_def.fields[2].fname = tdrpStrDup("color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_color_thesholds->color - (char *) _color_thesholds;
    tt->n_struct_vals = 9;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 30;
      tt->struct_vals[2].s = tdrpStrDup("green");
      tt->struct_vals[3].d = 30;
      tt->struct_vals[4].d = 60;
      tt->struct_vals[5].s = tdrpStrDup("cyan");
      tt->struct_vals[6].d = 60;
      tt->struct_vals[7].d = 10000;
      tt->struct_vals[8].s = tdrpStrDup("white");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("DATA TIMING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'timing_type'
    // ctype is '_timing_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("timing_type");
    tt->descr = tdrpStrDup("Type of timing to use in data requests");
    tt->help = tdrpStrDup("\tTIMING_NORMAL - This is the option that will be used most often. In this mode, the client requests are satisfied as requested.\n\tTIMING_DAILY - In this mode, the server will return all products for the request that are valid from 0Z of the request time through the actual request time.\n");
    tt->val_offset = (char *) &timing_type - &_start_;
    tt->enum_def.name = tdrpStrDup("timing_type_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIMING_NORMAL");
      tt->enum_def.fields[0].val = TIMING_NORMAL;
      tt->enum_def.fields[1].name = tdrpStrDup("TIMING_DAILY");
      tt->enum_def.fields[1].val = TIMING_DAILY;
    tt->single_val.e = TIMING_NORMAL;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
