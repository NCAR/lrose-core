/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program Tstorms2Symprod
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance.");
    tt->help = tdrpStrDup("Used for procmap registration and auto restarting.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'no_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_threads");
    tt->descr = tdrpStrDup("Option to prevent server from using a thread per client.");
    tt->help = tdrpStrDup("For debugging purposes it it sometimes useful to suppress the use of threads. Set no_threads to TRUE for this type of debugging.");
    tt->val_offset = (char *) &no_threads - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("SERVER MANAGER");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("Port number.");
    tt->help = tdrpStrDup("The server listens on this port for client requests.");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.i = 5460;
    tt++;
    
    // Parameter 'qmax'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("qmax");
    tt->descr = tdrpStrDup("Max quiescent period (secs).");
    tt->help = tdrpStrDup("If the server does not receive requests for this time period, it will die gracefully. If set to -1, the server never exits.");
    tt->val_offset = (char *) &qmax - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'max_clients'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_clients");
    tt->descr = tdrpStrDup("Maximum number of clients");
    tt->help = tdrpStrDup("This is the maximum number of threads the application will produce to handle client requests.  If the maximum is reached, new clients will receive a SERVICE_DENIED error message and will have to request the data again.  If set to -1, no maximum is enforced.");
    tt->val_offset = (char *) &max_clients - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("PLOT CURRENT SHAPE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_current'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_current");
    tt->descr = tdrpStrDup("Plot current shape");
    tt->help = tdrpStrDup("If set, the current storm shape will be sent.");
    tt->val_offset = (char *) &plot_current - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'current_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("current_color");
    tt->descr = tdrpStrDup("current color");
    tt->help = tdrpStrDup("Color for current storm shapes.");
    tt->val_offset = (char *) &current_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("PLOT FORECAST SHAPE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_forecast'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_forecast");
    tt->descr = tdrpStrDup("Plot forecast shape");
    tt->help = tdrpStrDup("If set, the forecast storm shape will be sent.");
    tt->val_offset = (char *) &plot_forecast - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'forecast_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("forecast_color");
    tt->descr = tdrpStrDup("forecast color");
    tt->help = tdrpStrDup("Color for forecast storm shapes.");
    tt->val_offset = (char *) &forecast_color - &_start_;
    tt->single_val.s = tdrpStrDup("red");
    tt++;
    
    // Parameter 'vector_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("vector_color");
    tt->descr = tdrpStrDup("motion vector color");
    tt->help = tdrpStrDup("Color for forecast motion vector.");
    tt->val_offset = (char *) &vector_color - &_start_;
    tt->single_val.s = tdrpStrDup("orange");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("FORECASTS IN NON-XML data");
    tt->comment_text = tdrpStrDup("Data created by Tstorms2Spdb");
    tt++;
    
    // Parameter 'forecast_lead_time'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("forecast_lead_time");
    tt->descr = tdrpStrDup("Forecast lead time (secs).");
    tt->help = tdrpStrDup("Lead time for forecast shapes and positions. Does not apply to XML data - XML data has the forecasts pre-defined by Tstorms2Xml.");
    tt->val_offset = (char *) &forecast_lead_time - &_start_;
    tt->single_val.l = 1800;
    tt++;
    
    // Parameter 'forecast_dashed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("forecast_dashed");
    tt->descr = tdrpStrDup("Forecast line dashed");
    tt->help = tdrpStrDup("If set, the forecast will be rendered using a dashed line rather than a solid line. Does not apply to XML data.");
    tt->val_offset = (char *) &forecast_dashed - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'valid_forecasts_only'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("valid_forecasts_only");
    tt->descr = tdrpStrDup("Plot valid forecasts only");
    tt->help = tdrpStrDup("If set, only valid forecasts will be sent. If not, all forecasts will be sent. Does not apply to XML data.");
    tt->val_offset = (char *) &valid_forecasts_only - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'grow_forecast'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("grow_forecast");
    tt->descr = tdrpStrDup("Grow the storm when plotting the forecast");
    tt->help = tdrpStrDup("If set, the growth rate information provided by TITAN will be used to modify the storm area.  If not set, the storm will be moved to the extrapolated position without changing the area. Does not apply to XML data. XML forecasts are pre-defined by Tstorms2Xml.");
    tt->val_offset = (char *) &grow_forecast - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("PLOT PAST SHAPES");
    tt->comment_text = tdrpStrDup("XML data only");
    tt++;
    
    // Parameter 'plot_past'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_past");
    tt->descr = tdrpStrDup("Plot past shape.");
    tt->help = tdrpStrDup("Only applies to XML data.");
    tt->val_offset = (char *) &plot_past - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'past_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("past_color");
    tt->descr = tdrpStrDup("past color");
    tt->help = tdrpStrDup("Color for past shapes.");
    tt->val_offset = (char *) &past_color - &_start_;
    tt->single_val.s = tdrpStrDup("cyan");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("TEXT PLOTTING");
    tt->comment_text = tdrpStrDup("Text plotted relative to the storm location.");
    tt++;
    
    // Parameter 'plot_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_text");
    tt->descr = tdrpStrDup("Plot text labels?");
    tt->help = tdrpStrDup("Allows you to turn all text products off. This controls all non-hidden text plotting. The default is TRUE for backward compatibility.");
    tt->val_offset = (char *) &plot_text - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'text_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("text_color");
    tt->descr = tdrpStrDup("Color of text plotted next to storm position");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'text_background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("text_background_color");
    tt->descr = tdrpStrDup("text background color");
    tt->help = tdrpStrDup("Color for text background. Set to blank string (the default) to plot the text with no background.");
    tt->val_offset = (char *) &text_background_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_text_line_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("plot_text_line_offset");
    tt->descr = tdrpStrDup("Vertical line spacing, pixels.");
    tt->help = tdrpStrDup("Optionally, the user may choose to plot various parameters (storm speed, simple and complex track number, trend etc). The selected poltting elements are then draw vertically above each other on the display, separated by plot_text_line_offset pixels in the vertical. If this is negative then the column of numbers will ascend rather than descend on the display. Does not apply to XML data.");
    tt->val_offset = (char *) &plot_text_line_offset - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'plot_text_horizontal_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("plot_text_horizontal_offset");
    tt->descr = tdrpStrDup("Horizontal offset, pixels.");
    tt->help = tdrpStrDup("Option to move text to either side of the centroid. If this is negative the  text moves to the left rather than the right.");
    tt->val_offset = (char *) &plot_text_horizontal_offset - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'text_font'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("text_font");
    tt->descr = tdrpStrDup("text font name");
    tt->help = tdrpStrDup("The name of the X font to be used when rendering the text.");
    tt->val_offset = (char *) &text_font - &_start_;
    tt->single_val.s = tdrpStrDup("8x13");
    tt++;
    
    // Parameter 'text_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("text_font_size");
    tt->descr = tdrpStrDup("text font size");
    tt->help = tdrpStrDup("The size of the font to be used when rendering the text.");
    tt->val_offset = (char *) &text_font_size - &_start_;
    tt->single_val.i = 13;
    tt++;
    
    // Parameter 'plot_trend'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_trend");
    tt->descr = tdrpStrDup("Plot trend");
    tt->help = tdrpStrDup("If set, the storm size and intensity trend will be included as text: '+', '-' or '0'.");
    tt->val_offset = (char *) &plot_trend - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_speed'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_speed");
    tt->descr = tdrpStrDup("Plot speed");
    tt->help = tdrpStrDup("If set, speed is placed at the head of the vector.");
    tt->val_offset = (char *) &plot_speed - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'speed_units'
    // ctype is '_speed_units_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("speed_units");
    tt->descr = tdrpStrDup("Units for plotting speed.");
    tt->help = tdrpStrDup("The speed is computed in kmh. The speed will be converted and plotted in these units.");
    tt->val_offset = (char *) &speed_units - &_start_;
    tt->enum_def.name = tdrpStrDup("speed_units_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SPEED_KMH");
      tt->enum_def.fields[0].val = SPEED_KMH;
      tt->enum_def.fields[1].name = tdrpStrDup("SPEED_KNOTS");
      tt->enum_def.fields[1].val = SPEED_KNOTS;
      tt->enum_def.fields[2].name = tdrpStrDup("SPEED_MPH");
      tt->enum_def.fields[2].val = SPEED_MPH;
    tt->single_val.e = SPEED_KMH;
    tt++;
    
    // Parameter 'speed_round'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("speed_round");
    tt->descr = tdrpStrDup("Plot speed rounded to nearest 5.");
    tt->help = tdrpStrDup("Default is not rounded.");
    tt->val_offset = (char *) &speed_round - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_top'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_top");
    tt->descr = tdrpStrDup("Plot top");
    tt->help = tdrpStrDup("If set, top value is placed at the head of the vector.");
    tt->val_offset = (char *) &plot_top - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'top_km'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("top_km");
    tt->descr = tdrpStrDup("Plot top value in kilometers");
    tt->help = tdrpStrDup("If FALSE, top value is plotted in 100s of feet.");
    tt->val_offset = (char *) &top_km - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'plot_track_numbers'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_track_numbers");
    tt->descr = tdrpStrDup("Plot track numbers");
    tt->help = tdrpStrDup("If TRUE, track numbers are plotted.");
    tt->val_offset = (char *) &plot_track_numbers - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_volume'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_volume");
    tt->descr = tdrpStrDup("Plot storm volume in km3.");
    tt->help = tdrpStrDup("XML data only.");
    tt->val_offset = (char *) &plot_volume - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_area'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_area");
    tt->descr = tdrpStrDup("Plot storm area in km.");
    tt->help = tdrpStrDup("XML data only.");
    tt->val_offset = (char *) &plot_area - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_max_dbz'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_max_dbz");
    tt->descr = tdrpStrDup("Plot max DBZ - radar reflectivity.");
    tt->help = tdrpStrDup("XML data only.");
    tt->val_offset = (char *) &plot_max_dbz - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_vil'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_vil");
    tt->descr = tdrpStrDup("Plot VIL - vertically integrated liquid.");
    tt->help = tdrpStrDup("XML data only.");
    tt->val_offset = (char *) &plot_vil - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_storm_intensity'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_storm_intensity");
    tt->descr = tdrpStrDup("Plot storm intensity.");
    tt->help = tdrpStrDup("XML data only.");
    tt->val_offset = (char *) &plot_storm_intensity - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_hail_probability'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_hail_probability");
    tt->descr = tdrpStrDup("Plot hail probability - %.");
    tt->help = tdrpStrDup("XML data only.");
    tt->val_offset = (char *) &plot_hail_probability - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_hail_mass'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_hail_mass");
    tt->descr = tdrpStrDup("Plot hail mass - %.");
    tt->help = tdrpStrDup("XML data only.");
    tt->val_offset = (char *) &plot_hail_mass - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_hail_mass_aloft'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_hail_mass_aloft");
    tt->descr = tdrpStrDup("Plot hail mass aloft - %.");
    tt->help = tdrpStrDup("XML data only.");
    tt->val_offset = (char *) &plot_hail_mass_aloft - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'plot_individual_storms'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_individual_storms");
    tt->descr = tdrpStrDup("Option to plot each storm as an individual product.");
    tt->help = tdrpStrDup("Non-XML data only. Can be useful for CIDD.");
    tt->val_offset = (char *) &plot_individual_storms - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("STORM SHAPE");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'storm_shape'
    // ctype is '_storm_shape_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("storm_shape");
    tt->descr = tdrpStrDup("Shape type");
    tt->help = tdrpStrDup("Determines the way in which the storm is represented.");
    tt->val_offset = (char *) &storm_shape - &_start_;
    tt->enum_def.name = tdrpStrDup("storm_shape_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ELLIPSE_SHAPE");
      tt->enum_def.fields[0].val = ELLIPSE_SHAPE;
      tt->enum_def.fields[1].name = tdrpStrDup("POLYGON_SHAPE");
      tt->enum_def.fields[1].val = POLYGON_SHAPE;
    tt->single_val.e = POLYGON_SHAPE;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("POLYGON SMOOTHING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'hull_smooth'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("hull_smooth");
    tt->descr = tdrpStrDup("Smooth the storm polygon");
    tt->help = tdrpStrDup("If TRUE and storm_shape is POLYGON_SHAPE, the storm polygon will be smoothed within the boundaries defined by inner_bnd_multiplier and outer_bnd_multiplier. Does NOT apply to XML data.");
    tt->val_offset = (char *) &hull_smooth - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'inner_bnd_multiplier'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("inner_bnd_multiplier");
    tt->descr = tdrpStrDup("Inner boundary multiplier for storm smoothing");
    tt->help = tdrpStrDup("Multipliers less than 1.0 produce an inner boundary smaller than the original storm. Multipliers greater than 1.0 produce an inner boundary larger than the original storm. inner_bnd_multiplier must be <= outer_bnd_multiplier");
    tt->val_offset = (char *) &inner_bnd_multiplier - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'outer_bnd_multiplier'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("outer_bnd_multiplier");
    tt->descr = tdrpStrDup("Outer boundary multiplier for storm smoothing");
    tt->help = tdrpStrDup("Multipliers less than 1.0 produce an outer boundary smaller than the original storm. Multipliers greater than 1.0 produce an outer boundary larger than the original storm. outer_bnd_multiplier must be >= inner_bnd_multiplier");
    tt->val_offset = (char *) &outer_bnd_multiplier - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("VECTOR RENDERING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_vectors'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_vectors");
    tt->descr = tdrpStrDup("Plot vector");
    tt->help = tdrpStrDup("If set, the forecast vector be sent.");
    tt->val_offset = (char *) &plot_vectors - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'arrow_head_len_in_pixels'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("arrow_head_len_in_pixels");
    tt->descr = tdrpStrDup("Define arrow head length in pixels.");
    tt->help = tdrpStrDup("If false, head length is in km.");
    tt->val_offset = (char *) &arrow_head_len_in_pixels - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'arrow_head_len'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("arrow_head_len");
    tt->descr = tdrpStrDup("Length of arrow head.");
    tt->help = tdrpStrDup("Units can be either km or pixels. See 'arrow_head_len_in_pixels'.");
    tt->val_offset = (char *) &arrow_head_len - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'arrow_head_half_angle'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("arrow_head_half_angle");
    tt->descr = tdrpStrDup("Half angle of arrow head (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &arrow_head_half_angle - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0;
    tt->max_val.d = 90;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'fixed_length_arrows'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("fixed_length_arrows");
    tt->descr = tdrpStrDup("Fixed length arrows");
    tt->help = tdrpStrDup("If flag set, direction arrows are of fixed lenght. If not set, arrows are scaled to length for time forecast_lead_time.");
    tt->val_offset = (char *) &fixed_length_arrows - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'arrow_shaft_length'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("arrow_shaft_length");
    tt->descr = tdrpStrDup("Shaft length arrow head (km).");
    tt->help = tdrpStrDup("This is used if 'fixed_length_arrows' is TRUE.");
    tt->val_offset = (char *) &arrow_shaft_length - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 20;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("LINE STYLES");
    tt->comment_text = tdrpStrDup("For polygons, ellipses and vectors");
    tt++;
    
    // Parameter 'suggested_line_type'
    // ctype is '_line_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("suggested_line_type");
    tt->descr = tdrpStrDup("display line type");
    tt->help = tdrpStrDup("Line type suggested for using on the display.");
    tt->val_offset = (char *) &suggested_line_type - &_start_;
    tt->enum_def.name = tdrpStrDup("line_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LINETYPE_SOLID");
      tt->enum_def.fields[0].val = LINETYPE_SOLID;
      tt->enum_def.fields[1].name = tdrpStrDup("LINETYPE_DASH");
      tt->enum_def.fields[1].val = LINETYPE_DASH;
      tt->enum_def.fields[2].name = tdrpStrDup("LINETYPE_DOT_DASH");
      tt->enum_def.fields[2].val = LINETYPE_DOT_DASH;
    tt->single_val.e = LINETYPE_SOLID;
    tt++;
    
    // Parameter 'suggested_line_width'
    // ctype is 'long'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = LONG_TYPE;
    tt->param_name = tdrpStrDup("suggested_line_width");
    tt->descr = tdrpStrDup("display line width");
    tt->help = tdrpStrDup("Line width suggested for using on the display.");
    tt->val_offset = (char *) &suggested_line_width - &_start_;
    tt->single_val.l = 1;
    tt++;
    
    // Parameter 'suggested_capstyle'
    // ctype is '_capstyle_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("suggested_capstyle");
    tt->descr = tdrpStrDup("display capstyle");
    tt->help = tdrpStrDup("Capstyle suggested for using on the display.");
    tt->val_offset = (char *) &suggested_capstyle - &_start_;
    tt->enum_def.name = tdrpStrDup("capstyle_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CAPSTYLE_BUTT");
      tt->enum_def.fields[0].val = CAPSTYLE_BUTT;
      tt->enum_def.fields[1].name = tdrpStrDup("CAPSTYLE_NOT_LAST");
      tt->enum_def.fields[1].val = CAPSTYLE_NOT_LAST;
      tt->enum_def.fields[2].name = tdrpStrDup("CAPSTYLE_PROJECTING");
      tt->enum_def.fields[2].val = CAPSTYLE_PROJECTING;
      tt->enum_def.fields[3].name = tdrpStrDup("CAPSTYLE_ROUND");
      tt->enum_def.fields[3].val = CAPSTYLE_ROUND;
    tt->single_val.e = CAPSTYLE_BUTT;
    tt++;
    
    // Parameter 'suggested_joinstyle'
    // ctype is '_joinstyle_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("suggested_joinstyle");
    tt->descr = tdrpStrDup("display joinstyle");
    tt->help = tdrpStrDup("Joinstyle suggested for using on the display.");
    tt->val_offset = (char *) &suggested_joinstyle - &_start_;
    tt->enum_def.name = tdrpStrDup("joinstyle_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("JOINSTYLE_BEVEL");
      tt->enum_def.fields[0].val = JOINSTYLE_BEVEL;
      tt->enum_def.fields[1].name = tdrpStrDup("JOINSTYLE_MITER");
      tt->enum_def.fields[1].val = JOINSTYLE_MITER;
      tt->enum_def.fields[2].name = tdrpStrDup("JOINSTYLE_ROUND");
      tt->enum_def.fields[2].val = JOINSTYLE_ROUND;
    tt->single_val.e = JOINSTYLE_BEVEL;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("HIDDEN TEXT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plot_hidden_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_hidden_text");
    tt->descr = tdrpStrDup("Option to include hidden text instead of plotting it directly");
    tt->help = tdrpStrDup("If set, text will be hidden. Mouse-over events reveal the text.");
    tt->val_offset = (char *) &plot_hidden_text - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'hidden_text_x_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_x_offset");
    tt->descr = tdrpStrDup("X offset for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_x_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'hidden_text_y_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_y_offset");
    tt->descr = tdrpStrDup("Y offset for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_y_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'hidden_text_font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_font_name");
    tt->descr = tdrpStrDup("hidden text font name");
    tt->help = tdrpStrDup("The name of the X font to be used when rendering the text.");
    tt->val_offset = (char *) &hidden_text_font_name - &_start_;
    tt->single_val.s = tdrpStrDup("8x13");
    tt++;
    
    // Parameter 'hidden_text_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_font_size");
    tt->descr = tdrpStrDup("Font size for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_font_size - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'hidden_text_vert_align'
    // ctype is '_vert_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_vert_align");
    tt->descr = tdrpStrDup("Vertical alignment hidden text.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_vert_align - &_start_;
    tt->enum_def.name = tdrpStrDup("vert_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
      tt->enum_def.fields[0].val = VERT_ALIGN_TOP;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
      tt->enum_def.fields[1].val = VERT_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
      tt->enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
    tt->single_val.e = VERT_ALIGN_CENTER;
    tt++;
    
    // Parameter 'hidden_text_horiz_align'
    // ctype is '_horiz_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_horiz_align");
    tt->descr = tdrpStrDup("Horizontal alignment for hidden text.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_horiz_align - &_start_;
    tt->enum_def.name = tdrpStrDup("horiz_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
      tt->enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
      tt->enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
      tt->enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->single_val.e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'hidden_text_foreground_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_foreground_color");
    tt->descr = tdrpStrDup("Hidden text background color.");
    tt->help = tdrpStrDup("Set to empty string to use SIGMET product color.");
    tt->val_offset = (char *) &hidden_text_foreground_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'hidden_text_background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_background_color");
    tt->descr = tdrpStrDup("Hidden text background color.");
    tt->help = tdrpStrDup("Set to empty string to use display background color.");
    tt->val_offset = (char *) &hidden_text_background_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
