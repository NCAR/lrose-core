/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program AcTrack2Symprod
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance.");
    tt->help = tdrpStrDup("Used for procmap registration and auto restarting.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'no_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_threads");
    tt->descr = tdrpStrDup("Option to prevent server from using a thread per client.");
    tt->help = tdrpStrDup("For debugging purposes it it sometimes useful to suppress the use of threads. Set no_threads to TRUE for this type of debugging.");
    tt->val_offset = (char *) &no_threads - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("SERVER DETAILS FOR SUPPORT FROM ServerMgr");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("Port number.");
    tt->help = tdrpStrDup("The server listens on this port for client requests.");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.i = 5451;
    tt++;
    
    // Parameter 'qmax'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("qmax");
    tt->descr = tdrpStrDup("Max quiescent period (secs).");
    tt->help = tdrpStrDup("If the server does not receive requests for this time period, it will die gracefully. If set to -1, the server never exits.");
    tt->val_offset = (char *) &qmax - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'max_clients'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_clients");
    tt->descr = tdrpStrDup("Maximum number of clients");
    tt->help = tdrpStrDup("This is the maximum number of threads the application will produce to handle client requests.  If the maximum is reached, new clients will receive a SERVICE_DENIED error message and will have to request the data again.  If set to -1, no maximum is enforced.");
    tt->val_offset = (char *) &max_clients - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("PRODUCT TIME VALIDITY AND EXPIRATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'valid_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("valid_secs");
    tt->descr = tdrpStrDup("Product validity period (secs).");
    tt->help = tdrpStrDup("The track product will be set valid from the request time to the request time plus this period. After that it will be considered expired.");
    tt->val_offset = (char *) &valid_secs - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("PRODUCT SPATIAL VALIDITY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'useBoundingBox'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("useBoundingBox");
    tt->descr = tdrpStrDup("Set to TRUE to only include stations within the lat-lon bounding box.");
    tt->help = tdrpStrDup("Only accept stations for which the position is inside the bounding box. Note: this will be overridden if the client specifies horizontal limits.");
    tt->val_offset = (char *) &useBoundingBox - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'bounding_box'
    // ctype is '_bounding_box_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("bounding_box");
    tt->descr = tdrpStrDup("If useBoundingBox is true, only stations within this box will be included in the product list.");
    tt->help = tdrpStrDup("To span the international date line, specify a continuous interval using positive longitudes which exceed 180 or negative longitudes which are less than -180. For example, min_lon = 80 and max_lon = 240 will span between 80E and 120W across the Pacific.");
    tt->val_offset = (char *) &bounding_box - &_start_;
    tt->struct_def.name = tdrpStrDup("bounding_box_t");
    tt->struct_def.nfields = 4;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("float");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_lat");
      tt->struct_def.fields[0].ptype = FLOAT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &bounding_box.min_lat - (char *) &bounding_box;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("min_lon");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &bounding_box.min_lon - (char *) &bounding_box;
      tt->struct_def.fields[2].ftype = tdrpStrDup("float");
      tt->struct_def.fields[2].fname = tdrpStrDup("max_lat");
      tt->struct_def.fields[2].ptype = FLOAT_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &bounding_box.max_lat - (char *) &bounding_box;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("max_lon");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &bounding_box.max_lon - (char *) &bounding_box;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].f = -90;
      tt->struct_vals[1].f = -180;
      tt->struct_vals[2].f = 90;
      tt->struct_vals[3].f = 180;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'display_ga'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("display_ga");
    tt->descr = tdrpStrDup("display GA aircraft flag");
    tt->help = tdrpStrDup("If TRUE, all aircraft, including GA aircraft, will be displayed.  If FALSE, GA aircraft won't be displayed.  For this purporse, a GA aircraft is assumed to be any aircraft with a number somewhere in the first 3 characters of its callsign.");
    tt->val_offset = (char *) &display_ga - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'polyline_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("polyline_width");
    tt->descr = tdrpStrDup("Width of polylines");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &polyline_width - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'plot_dirn_arrow'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_dirn_arrow");
    tt->descr = tdrpStrDup("Plot the arrow for direction");
    tt->help = tdrpStrDup("If TRUE, an arrow will be added to the end of the polyline to indicate the direction of travel of the aircraft.\n");
    tt->val_offset = (char *) &plot_dirn_arrow - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'dirn_arrow_head_len'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dirn_arrow_head_len");
    tt->descr = tdrpStrDup("Length of head of dirn arrow (km)");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &dirn_arrow_head_len - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 2;
    tt++;
    
    // Parameter 'sparse_icons'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("sparse_icons");
    tt->descr = tdrpStrDup("Option to check space between icons.");
    tt->help = tdrpStrDup("If TRUE, the distance between consecutive icons will be computed.");
    tt->val_offset = (char *) &sparse_icons - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sparse_icons_min_distance'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sparse_icons_min_distance");
    tt->descr = tdrpStrDup("Minimum distance between sparse icons (km).");
    tt->help = tdrpStrDup("Applicable if sparse_icons is TRUE. Icon rendering will be limited so that this minimum distance is exceeded bewteen consecutive icons.");
    tt->val_offset = (char *) &sparse_icons_min_distance - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("TRACK BEFORE CURRENT TIME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'before_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("before_secs");
    tt->descr = tdrpStrDup("number of seconds of before track");
    tt->help = tdrpStrDup("Number of seconds of track information to display before the current position.");
    tt->val_offset = (char *) &before_secs - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'display_before_icon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("display_before_icon");
    tt->descr = tdrpStrDup("display before icon flag");
    tt->help = tdrpStrDup("If TRUE, the before icon (described in the before_icon parameter) is displayed at each aircraft position before the current position.\n");
    tt->val_offset = (char *) &display_before_icon - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'before_icon'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("before_icon");
    tt->descr = tdrpStrDup("before icon");
    tt->help = tdrpStrDup("Array defining the icon to be used for the before positions.  The icon is a bit-mapped square icon.  You put 1's in the positions of the icon where the bit should be displayed, and 0's in the positions that are not a part of the icon.  You may want to look at an example parameter file to see how this is done.");
    tt->array_offset = (char *) &_before_icon - &_start_;
    tt->array_n_offset = (char *) &before_icon_n - &_start_;
    tt->array2D_offset = (char *) &__before_icon - &_start_;
    tt->array_n1_offset = (char *) &before_icon_n1 - &_start_;
    tt->array_n2_offset = (char *) &before_icon_n2 - &_start_;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 25;
    tt->array_n1 = 5;
    tt->array_n2 = 5;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].i = 1;
      tt->array_vals[1].i = 0;
      tt->array_vals[2].i = 0;
      tt->array_vals[3].i = 0;
      tt->array_vals[4].i = 1;
      tt->array_vals[5].i = 0;
      tt->array_vals[6].i = 1;
      tt->array_vals[7].i = 0;
      tt->array_vals[8].i = 1;
      tt->array_vals[9].i = 0;
      tt->array_vals[10].i = 0;
      tt->array_vals[11].i = 0;
      tt->array_vals[12].i = 1;
      tt->array_vals[13].i = 0;
      tt->array_vals[14].i = 0;
      tt->array_vals[15].i = 0;
      tt->array_vals[16].i = 1;
      tt->array_vals[17].i = 0;
      tt->array_vals[18].i = 1;
      tt->array_vals[19].i = 0;
      tt->array_vals[20].i = 1;
      tt->array_vals[21].i = 0;
      tt->array_vals[22].i = 0;
      tt->array_vals[23].i = 0;
      tt->array_vals[24].i = 1;
    tt++;
    
    // Parameter 'before_icon_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("before_icon_color");
    tt->descr = tdrpStrDup("before icon color");
    tt->help = tdrpStrDup("Name of X color to be used when rendering the before icon(s).");
    tt->val_offset = (char *) &before_icon_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'display_before_polyline'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("display_before_polyline");
    tt->descr = tdrpStrDup("display before polyline flag");
    tt->help = tdrpStrDup("If TRUE, the before positions will be connected with a polyline.");
    tt->val_offset = (char *) &display_before_polyline - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'before_polyline_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("before_polyline_color");
    tt->descr = tdrpStrDup("before polyline color");
    tt->help = tdrpStrDup("Name of X color to be used when rendering the before polyline.");
    tt->val_offset = (char *) &before_polyline_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("TRACK AT CURRENT TIME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'display_current_icon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("display_current_icon");
    tt->descr = tdrpStrDup("display current icon flag");
    tt->help = tdrpStrDup("If TRUE, the current icon (described in the current_icon parameter) is displayed at the current position.\n");
    tt->val_offset = (char *) &display_current_icon - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'current_icon'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("current_icon");
    tt->descr = tdrpStrDup("current icon");
    tt->help = tdrpStrDup("Array defining the icon to be used for the current position.  The icon is a bit-mapped square icon.  You put 1's in the positions of the icon where the bit should be displayed, and 0's in the positions that are not a part of the icon.  You may want to look at an example parameter file to see how this is done.");
    tt->array_offset = (char *) &_current_icon - &_start_;
    tt->array_n_offset = (char *) &current_icon_n - &_start_;
    tt->array2D_offset = (char *) &__current_icon - &_start_;
    tt->array_n1_offset = (char *) &current_icon_n1 - &_start_;
    tt->array_n2_offset = (char *) &current_icon_n2 - &_start_;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 25;
    tt->array_n1 = 5;
    tt->array_n2 = 5;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].i = 0;
      tt->array_vals[1].i = 0;
      tt->array_vals[2].i = 1;
      tt->array_vals[3].i = 0;
      tt->array_vals[4].i = 0;
      tt->array_vals[5].i = 0;
      tt->array_vals[6].i = 1;
      tt->array_vals[7].i = 0;
      tt->array_vals[8].i = 1;
      tt->array_vals[9].i = 0;
      tt->array_vals[10].i = 1;
      tt->array_vals[11].i = 0;
      tt->array_vals[12].i = 0;
      tt->array_vals[13].i = 0;
      tt->array_vals[14].i = 1;
      tt->array_vals[15].i = 0;
      tt->array_vals[16].i = 1;
      tt->array_vals[17].i = 0;
      tt->array_vals[18].i = 1;
      tt->array_vals[19].i = 0;
      tt->array_vals[20].i = 0;
      tt->array_vals[21].i = 0;
      tt->array_vals[22].i = 1;
      tt->array_vals[23].i = 0;
      tt->array_vals[24].i = 0;
    tt++;
    
    // Parameter 'current_icon_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("current_icon_color");
    tt->descr = tdrpStrDup("current icon color");
    tt->help = tdrpStrDup("Name of X color to be used when rendering the current icon.");
    tt->val_offset = (char *) &current_icon_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'display_label'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("display_label");
    tt->descr = tdrpStrDup("display label flag");
    tt->help = tdrpStrDup("If TRUE, the callsign of the aircraft will be displayed by the current position icon (or where the current position icon would be if it isn't being displayed.");
    tt->val_offset = (char *) &display_label - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'label_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("label_color");
    tt->descr = tdrpStrDup("label color");
    tt->help = tdrpStrDup("Name of the X color to be used when rendering the aircraft label.");
    tt->val_offset = (char *) &label_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'label_font'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("label_font");
    tt->descr = tdrpStrDup("label font");
    tt->help = tdrpStrDup("Suggested X font to use for rendering label.");
    tt->val_offset = (char *) &label_font - &_start_;
    tt->single_val.s = tdrpStrDup("8x13");
    tt++;
    
    // Parameter 'label_horiz_align'
    // ctype is '_label_horiz_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("label_horiz_align");
    tt->descr = tdrpStrDup("label horizontal alignment");
    tt->help = tdrpStrDup("Desired horizontal alignment for the label.");
    tt->val_offset = (char *) &label_horiz_align - &_start_;
    tt->enum_def.name = tdrpStrDup("label_horiz_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
      tt->enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
      tt->enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
      tt->enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->single_val.e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'label_vert_align'
    // ctype is '_label_vert_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("label_vert_align");
    tt->descr = tdrpStrDup("label vertical alignment");
    tt->help = tdrpStrDup("Desired vertical alignment for the label.");
    tt->val_offset = (char *) &label_vert_align - &_start_;
    tt->enum_def.name = tdrpStrDup("label_vert_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
      tt->enum_def.fields[0].val = VERT_ALIGN_TOP;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
      tt->enum_def.fields[1].val = VERT_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
      tt->enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
    tt->single_val.e = VERT_ALIGN_CENTER;
    tt++;
    
    // Parameter 'label_offset'
    // ctype is '_label_offset_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("label_offset");
    tt->descr = tdrpStrDup("label offset");
    tt->help = tdrpStrDup("Pixel offsets for label rendering.  The label is rendered at the given offsets from the current position location.  A positive x_offset moves the label to the right; a positive y_offset moves the label up.");
    tt->val_offset = (char *) &label_offset - &_start_;
    tt->struct_def.name = tdrpStrDup("label_offset_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &label_offset.x_offset - (char *) &label_offset;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &label_offset.y_offset - (char *) &label_offset;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 0;
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("TRACK AFTER CURRENT TIME");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'after_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("after_secs");
    tt->descr = tdrpStrDup("number of seconds of after track");
    tt->help = tdrpStrDup("Number of seconds of track information to display after the current position.  Of course, when displaying realtime aircraft data, there will be no track information after the current position, so this value will be ignored.");
    tt->val_offset = (char *) &after_secs - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'display_after_icon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("display_after_icon");
    tt->descr = tdrpStrDup("display after icon flag");
    tt->help = tdrpStrDup("If TRUE, the after icon (described in the after_icon parameter) is displayed at each aircraft position after the current position.\n");
    tt->val_offset = (char *) &display_after_icon - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'after_icon'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("after_icon");
    tt->descr = tdrpStrDup("after icon");
    tt->help = tdrpStrDup("Array defining the icon to be used for the after positions.  The icon is a bit-mapped square icon.  You put 1's in the positions of the icon where the bit should be displayed, and 0's in the positions that are not a part of the icon.  You may want to look at an example parameter file to see how this is done.");
    tt->array_offset = (char *) &_after_icon - &_start_;
    tt->array_n_offset = (char *) &after_icon_n - &_start_;
    tt->array2D_offset = (char *) &__after_icon - &_start_;
    tt->array_n1_offset = (char *) &after_icon_n1 - &_start_;
    tt->array_n2_offset = (char *) &after_icon_n2 - &_start_;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 25;
    tt->array_n1 = 5;
    tt->array_n2 = 5;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].i = 0;
      tt->array_vals[1].i = 0;
      tt->array_vals[2].i = 1;
      tt->array_vals[3].i = 0;
      tt->array_vals[4].i = 0;
      tt->array_vals[5].i = 0;
      tt->array_vals[6].i = 0;
      tt->array_vals[7].i = 1;
      tt->array_vals[8].i = 0;
      tt->array_vals[9].i = 0;
      tt->array_vals[10].i = 1;
      tt->array_vals[11].i = 1;
      tt->array_vals[12].i = 1;
      tt->array_vals[13].i = 1;
      tt->array_vals[14].i = 1;
      tt->array_vals[15].i = 0;
      tt->array_vals[16].i = 0;
      tt->array_vals[17].i = 1;
      tt->array_vals[18].i = 0;
      tt->array_vals[19].i = 0;
      tt->array_vals[20].i = 0;
      tt->array_vals[21].i = 0;
      tt->array_vals[22].i = 1;
      tt->array_vals[23].i = 0;
      tt->array_vals[24].i = 0;
    tt++;
    
    // Parameter 'after_icon_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("after_icon_color");
    tt->descr = tdrpStrDup("after icon color");
    tt->help = tdrpStrDup("Name of X color to be used when rendering the after icon(s).");
    tt->val_offset = (char *) &after_icon_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'display_after_polyline'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("display_after_polyline");
    tt->descr = tdrpStrDup("display after polyline flag");
    tt->help = tdrpStrDup("If TRUE, the after positions will be connected with a polyline.");
    tt->val_offset = (char *) &display_after_polyline - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'after_polyline_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("after_polyline_color");
    tt->descr = tdrpStrDup("after polyline color");
    tt->help = tdrpStrDup("Name of X color to be used when rendering the after polyline.");
    tt->val_offset = (char *) &after_polyline_color - &_start_;
    tt->single_val.s = tdrpStrDup("yellow");
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("ALTITUDE DISPLAY");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'color_by_altitude'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("color_by_altitude");
    tt->descr = tdrpStrDup("Option to set color based on altitude field.");
    tt->help = tdrpStrDup("If TRUE, this option overrides the other color options and sets the color based on the aircraft altitude. The colors used are set in the altitude_color array.");
    tt->val_offset = (char *) &color_by_altitude - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'altitude_color_scale'
    // ctype is '_altitude_color_scale'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("altitude_color_scale");
    tt->descr = tdrpStrDup("Color scale for altitude data - only used if color_by_altitude is TRUE");
    tt->help = tdrpStrDup("This is an array of entries, each of which has min_val, max_val and color for each altitude range selected. Altitude units are meters. If the true altitude is outside this range the color will default to the color which would have been used if color_by_altitude were FALSE.");
    tt->array_offset = (char *) &_altitude_color_scale - &_start_;
    tt->array_n_offset = (char *) &altitude_color_scale_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(altitude_color_scale);
    tt->array_n = 1;
    tt->struct_def.name = tdrpStrDup("altitude_color_scale");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_val");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_altitude_color_scale->min_val - (char *) _altitude_color_scale;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_val");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_altitude_color_scale->max_val - (char *) _altitude_color_scale;
      tt->struct_def.fields[2].ftype = tdrpStrDup("char*");
      tt->struct_def.fields[2].fname = tdrpStrDup("color");
      tt->struct_def.fields[2].ptype = STRING_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_altitude_color_scale->color - (char *) _altitude_color_scale;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].s = tdrpStrDup("not_set");
    tt++;
    
    // Parameter 'plot_altitude_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plot_altitude_text");
    tt->descr = tdrpStrDup("Option to plot altitude as text instead of icon.");
    tt->help = tdrpStrDup("If TRUE, the altitude value is plotted at the aircraft position instead of the icon. The altitude_font is used.");
    tt->val_offset = (char *) &plot_altitude_text - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'altitude_font'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("altitude_font");
    tt->descr = tdrpStrDup("altitude font");
    tt->help = tdrpStrDup("Suggested X font to use for rendering altitude.");
    tt->val_offset = (char *) &altitude_font - &_start_;
    tt->single_val.s = tdrpStrDup("6x10");
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("SPECIFY CALLSIGNS TO BE DISPLAYED");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'specify_callsigns'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_callsigns");
    tt->descr = tdrpStrDup("Option to specify callsigns to be displayed.");
    tt->help = tdrpStrDup("If TRUE, only the specified callsigns will be displayed. If FALSE, all callsigns will be displayed.");
    tt->val_offset = (char *) &specify_callsigns - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'callsign_list'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("callsign_list");
    tt->descr = tdrpStrDup("List of callsigns to be displayed");
    tt->help = tdrpStrDup("See 'specify_callsigns' parameter above.");
    tt->array_offset = (char *) &_callsign_list - &_start_;
    tt->array_n_offset = (char *) &callsign_list_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(char*);
    tt->array_n = 3;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].s = tdrpStrDup("aircraft1");
      tt->array_vals[1].s = tdrpStrDup("aircraft2");
      tt->array_vals[2].s = tdrpStrDup("aircraft3");
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("SET COLOR BY CALLSIGN");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'color_by_callsign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("color_by_callsign");
    tt->descr = tdrpStrDup("Option to set color based on airfraft callsign.");
    tt->help = tdrpStrDup("If TRUE, the track for a recognized callsign will be colored accordingly.");
    tt->val_offset = (char *) &color_by_callsign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'callsign_colors'
    // ctype is '_callsign_color_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("callsign_colors");
    tt->descr = tdrpStrDup("Color table lookup for aircraft callsigns.");
    tt->help = tdrpStrDup("See 'color_by_callsign'.");
    tt->array_offset = (char *) &_callsign_colors - &_start_;
    tt->array_n_offset = (char *) &callsign_colors_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(callsign_color_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("callsign_color_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("callsign");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_callsign_colors->callsign - (char *) _callsign_colors;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("color");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_callsign_colors->color - (char *) _callsign_colors;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("ZJRA");
      tt->struct_vals[1].s = tdrpStrDup("orange");
      tt->struct_vals[2].s = tdrpStrDup("47RE");
      tt->struct_vals[3].s = tdrpStrDup("cyan");
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("ADD TIME LABELS TO TRACK");
    tt->comment_text = tdrpStrDup("Option to add time labels at a specified time interval along the track.");
    tt++;
    
    // Parameter 'add_time_labels'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("add_time_labels");
    tt->descr = tdrpStrDup("Option to add time labels to the track at specified intervals.");
    tt->help = tdrpStrDup("If TRUE, time labels are added at the specified time interval.");
    tt->val_offset = (char *) &add_time_labels - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'time_label_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("time_label_color");
    tt->descr = tdrpStrDup("Color for time labels");
    tt->help = tdrpStrDup("If empty, use the same color as the track.");
    tt->val_offset = (char *) &time_label_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'time_label_interval_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("time_label_interval_secs");
    tt->descr = tdrpStrDup("Time interval for labels (secs)");
    tt->help = tdrpStrDup("Number of seconds between time labels.");
    tt->val_offset = (char *) &time_label_interval_secs - &_start_;
    tt->single_val.i = 900;
    tt++;
    
    // Parameter 'time_label_format'
    // ctype is '_time_label_format_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("time_label_format");
    tt->descr = tdrpStrDup("Formatting for time label");
    tt->help = tdrpStrDup("Specify which elements in the time should appear in the label");
    tt->val_offset = (char *) &time_label_format - &_start_;
    tt->enum_def.name = tdrpStrDup("time_label_format_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TIME_LABEL_YYYY_MM_DD_HH_MM_SS");
      tt->enum_def.fields[0].val = TIME_LABEL_YYYY_MM_DD_HH_MM_SS;
      tt->enum_def.fields[1].name = tdrpStrDup("TIME_LABEL_YYYY_MM_DD_HH_MM");
      tt->enum_def.fields[1].val = TIME_LABEL_YYYY_MM_DD_HH_MM;
      tt->enum_def.fields[2].name = tdrpStrDup("TIME_LABEL_HH_MM_SS");
      tt->enum_def.fields[2].val = TIME_LABEL_HH_MM_SS;
      tt->enum_def.fields[3].name = tdrpStrDup("TIME_LABEL_HH_MM");
      tt->enum_def.fields[3].val = TIME_LABEL_HH_MM;
    tt->single_val.e = TIME_LABEL_HH_MM;
    tt++;
    
    // Parameter 'time_label_offset'
    // ctype is '_label_offset_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("time_label_offset");
    tt->descr = tdrpStrDup("(x,y) offset for time labels");
    tt->help = tdrpStrDup("Pixel offsets for time label rendering. The label is rendered at the given offsets from the track position at the label time. A positive x_offset moves the label to the right; a positive y_offset moves the label up.");
    tt->val_offset = (char *) &time_label_offset - &_start_;
    tt->struct_def.name = tdrpStrDup("label_offset_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("x_offset");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &time_label_offset.x_offset - (char *) &time_label_offset;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("y_offset");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &time_label_offset.y_offset - (char *) &time_label_offset;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 0;
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'time_label_icon'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("time_label_icon");
    tt->descr = tdrpStrDup("Icon for time label");
    tt->help = tdrpStrDup("Array defining the icon to be used for the time label positions. The icon is a bit-mapped square icon.  You put 1's in the positions of the icon where the bit should be displayed, and 0's in the positions that are not a part of the icon. You may want to look at an example parameter file to see how this is done.");
    tt->array_offset = (char *) &_time_label_icon - &_start_;
    tt->array_n_offset = (char *) &time_label_icon_n - &_start_;
    tt->array2D_offset = (char *) &__time_label_icon - &_start_;
    tt->array_n1_offset = (char *) &time_label_icon_n1 - &_start_;
    tt->array_n2_offset = (char *) &time_label_icon_n2 - &_start_;
    tt->is_array = TRUE;
    tt->is_array2D = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 25;
    tt->array_n1 = 5;
    tt->array_n2 = 5;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n1 * tt->array_n2 *
          sizeof(tdrpVal_t));
      tt->array_vals[0].i = 0;
      tt->array_vals[1].i = 0;
      tt->array_vals[2].i = 1;
      tt->array_vals[3].i = 0;
      tt->array_vals[4].i = 0;
      tt->array_vals[5].i = 0;
      tt->array_vals[6].i = 1;
      tt->array_vals[7].i = 1;
      tt->array_vals[8].i = 1;
      tt->array_vals[9].i = 0;
      tt->array_vals[10].i = 1;
      tt->array_vals[11].i = 1;
      tt->array_vals[12].i = 1;
      tt->array_vals[13].i = 1;
      tt->array_vals[14].i = 1;
      tt->array_vals[15].i = 0;
      tt->array_vals[16].i = 1;
      tt->array_vals[17].i = 1;
      tt->array_vals[18].i = 1;
      tt->array_vals[19].i = 0;
      tt->array_vals[20].i = 0;
      tt->array_vals[21].i = 0;
      tt->array_vals[22].i = 1;
      tt->array_vals[23].i = 0;
      tt->array_vals[24].i = 0;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
