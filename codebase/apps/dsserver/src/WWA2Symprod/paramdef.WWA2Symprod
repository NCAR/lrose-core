/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////
// parameter definitions for WWA2Symprod
//
// Frank Hage  RAL, NCAR, Boulder, CO, USA, 80307-3000
// 
//

//////////////////////////////////////////////////////////
// Debugging

commentdef
{
  p_header = "DEBUGGING";
}

typedef enum
{
  DEBUG_OFF,
  DEBUG_NORM,
  DEBUG_VERBOSE
} debug_t;

paramdef enum debug_t
{
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately";
  p_default = { DEBUG_OFF };
} debug;

//////////////////////////////////////////////////////////
// Process control

commentdef
{
  p_header = "PROCESS CONTROL";
}

paramdef string
{
  p_descr = "Process instance.";
  p_help = "Used for procmap registration and auto restarting.";
  p_default = "";
} instance;

paramdef boolean
{
  p_descr = "Option to prevent server from using a thread per client.";
  p_help = "For debugging purposes it it sometimes useful to suppress "
           "the use of threads. Set no_threads to TRUE for this type "
           "of debugging.";
  p_default = FALSE;
} no_threads;

//////////////////////////////////////////////////////////
// Server manager interaction

commentdef
{
  p_header = "Server details for support from ServerMgr";
};

paramdef int
{
  p_descr = "Assigned Port number. - See libs/dsserver/src/DsLocator/DsLocator.cc";
  p_help = "The WWA2Symprod server listens on this port for client requests.";
  p_default = 5480;
} port;
  
paramdef int
{
  p_descr = "Max quiescent period (secs).";
  p_help = "If the server does not receive requests for this time period, "
           "it will die gracefully. If set to -1, the server never exits.";
  p_default = -1;
} qmax;

paramdef int
{
  p_descr = "Maximum number of clients";
  p_help = "This is the maximum number of threads the application will "
           "produce to handle client requests.  If the maximum is reached, "
           "new clients will receive a SERVICE_DENIED error message and will "
           "have to request the data again.  If set to -1, no maximum is "
           "enforced.";
  p_default = 64;
} max_clients;

//////////////////////////////////////////////////////////
// Watches, Warnings and Advisories Rendering

commentdef
{
  p_header = "RENDERING PARAMETERS";
};

typedef enum
{
  LINETYPE_SOLID,
  LINETYPE_DASH,
  LINETYPE_DOT_DASH
} line_type_t;

paramdef enum line_type_t
{
  p_descr = "display line type";
  p_help = "Line type suggested for using on the display.";
  p_default = { LINETYPE_SOLID };
} suggested_line_type;

paramdef long
{
  p_descr = "display line width";
  p_help = "Line width suggested for using on the display.";
  p_default = { 1 };
} suggested_line_width;

typedef enum
{
  CAPSTYLE_BUTT,
  CAPSTYLE_NOT_LAST,
  CAPSTYLE_PROJECTING,
  CAPSTYLE_ROUND
} capstyle_t;

paramdef enum capstyle_t
{
  p_descr = "display capstyle";
  p_help = "Capstyle suggested for using on the display.";
  p_default = { CAPSTYLE_BUTT };
} suggested_capstyle;

typedef enum
{
  JOINSTYLE_BEVEL,
  JOINSTYLE_MITER,
  JOINSTYLE_ROUND
} joinstyle_t;

paramdef enum joinstyle_t
{
  p_descr = "display joinstyle";
  p_help = "Joinstyle suggested for using on the display.";
  p_default = { JOINSTYLE_BEVEL };
} suggested_joinstyle;


/* Hazardouus Weather Type Bitwize flags - Taken from NOAA/NWS definitions */
typedef enum {
        HW_TOWAR,  /* Tornado Warning */
        HW_TOWAT,  /* Tornado Watch */
        HW_STWAR, /* Severe ThunderStorm Warning */
        HW_STWAT, /* Severe ThunderStorm Watch */
        HW_SWS, /* Severe Weather Statement */
        HW_FFWAR, /* Flash Flood Warning */
        HW_FFWAT, /* Flash Flood Watch */
        HW_TSWAR, /* Tropical Storm Warning */
        HW_TSWAT, /* Tropical Storm Watch */
        HW_HUWAR, /* Hurricane Warning */
        HW_HUWAT, /* Hurricane Watch */
        HW_FLWAR, /* Flood Warning */
        HW_FLWAT, /* Flood Watch */
        HW_WSWAR, /* Winter Storm Warning */
        HW_WSWAT, /* Winter Storm Watch*/
        HW_SMWAR, /* Special Marine Warning (Squalls,   Tornados) */
        HW_WCWAR, /* Wind Chill Warning*/
        HW_WCADV, /* Wind Chill Advisory */
        HW_EHWAR, /* Excessive Heat Warning */
        HW_HEADV, /* Heat Advisory */
        HW_HWWAR, /* High Wind Warning */
        HW_WIADV, /* Wind Advisory */
        HW_DFADV, /* Dense Fog Advisory */
        HW_FZWAR, /* Freeze Warning */
        HW_FRADV, /* Frost Advisory */
        HW_LSWAR, /* LakeShore (Flooding) Warning */
        HW_BSADV, /* Blowing Snow Advisory */
        HW_RAWAR, /* Radiological Hazard Warning */
        HW_NUWAR, /* Nuclear Hazard Warning */
        HW_HMWAR, /* Hazardous Materials Warning */
        HW_VOWAR, /* Volcano Warning */
        HW_EAWAR, /* Earthquake Warning */
        HW_FIWAR, /* Fire Warning */
        WS_BLWAR,       /* Blizard Warning */
        WS_HSWAR, /* Heavy Snow Warning */
        WS_LEWAR, /* Lake Effect Snow Warning */
        WS_ISWAR, /* Ice Storm Warning */
        WS_HLWAR, /* Heavy sLeet Warning */
        WS_SNADV, /* Snow Advisory */
        WS_LEADV, /* Lake Efeect Snow Advisory */
        WS_SLADV, /* SLeet Advisory */
} hazard_type_t;

typedef struct
{
  hazard_type_t hazard;
  string hex_color_str;
  line_type_t line_type;
  long line_width;
} warn_color_t;

paramdef struct warn_color_t {
p_descr = "Each element of the struct has an enumerated warning type and a color. The defaults can be found here : https://www.weather.gov/help-map. Following is the default settings list:\n";
p_help = "Tornado Warning, red\n"
 "{HW_TOWAR,\"#FF0000\", LINETYPE_SOLID, 1}\n\n"
 "Tornado Watch, yellow\n"
 "{HW_TOWAT,\"#FFFF00\", LINETYPE_SOLID, 1},\n\n"
 "Severe ThunderStorm Warning, orange\n"
 "{HW_STWAR,\"#FFA500\", LINETYPE_SOLID, 1},\n\n"
 "Severe ThunderStorm Watch, Palevioletred\n"
 "{HW_STWAT, \"#DB7093\", LINETYPE_SOLID, 1},\n\n"
 "Severe Weather Statement, aqua\n" 
 "{HW_SWS,\"#00FFFF\", LINETYPE_SOLID, 1},\n\n"
 "Flash Flood Warning, Darkred\n"
 "{HW_FFWAR, \"#8B0000\", LINETYPE_SOLID, 1},\n\n"
 "Flash Flood Watch, Seagreen \n"
 "{HW_FFWAT, \"#32CD32\", LINETYPE_SOLID, 1},\n\n"
 "Tropical Storm Warning, Firebrick\n"
 "{HW_TSWAR, \"#B22222\", LINETYPE_SOLID, 1},\n\n"
 "Tropical Storm Watch, Lightcoral\n"
 "{HW_TSWAT, \"#F08080\", LINETYPE_SOLID, 1},\n\n"
 "Hurricane Warning, Crimson\n"
 "{HW_HUWAR, \"#DC143C\", LINETYPE_SOLID, 1},\n\n"
 "Hurricane Watch, Magenta\n"
 "{HW_HUWAT, \"#FF00FF\", LINETYPE_SOLID, 1},\n\n"
 "Flood Warning, Lime\n"
 "{HW_FLWAR, \"#00FF00\", LINETYPE_SOLID, 1},\n\n"
 "Flood Watch, Seagreen\n"
 "{HW_FLWAT, \"#2E8B57\", LINETYPE_SOLID, 1},\n\n"
 "Winter Storm Warning, Hotpink\n"
 "{HW_WSWAR, \"#FF69B4\", LINETYPE_SOLID, 1},\n\n"
 "Winter Storm Watch, Steelblue\n"
 "{HW_WSWAT, \"#4682B4\", LINETYPE_SOLID, 1},\n\n"
 "Special Marine Warning (Squalls, Tornados), orange\n"
 "{HW_SMWAR, \"#FFA500\", LINETYPE_SOLID, 1},\n\n"
 "Wind Chill Warning, Lightsteelblue\n"
 "{HW_WCWAR, \"#B0C4DE\", LINETYPE_SOLID, 1},\n\n"
 "Wind Chill Advisory, Paleturquoise\n"
 "{HW_WCADV, \"#AFEEEE\", LINETYPE_SOLID, 1},\n\n"
 "Excessive Heat Warning, Mediumvioletred\n"
 "{HW_EHWAR, \"#C71585\", LINETYPE_SOLID, 1},\n\n"
 "Heat Advisory, Coral\n"
 "{HW_HEADV, \"#FF7F50\", LINETYPE_SOLID, 1},\n\n"
 "High Wind Warning, Goldenrod\n"
 "{HW_HWWAR, \"#DAA520\", LINETYPE_SOLID, 1},\n\n"
 "Wind Advisoryi, Tan\n"
 "{HW_WIADV,\"#D2B48C\", LINETYPE_SOLID, 1},\n\n"
 "Dense Fog Advisory, Slategray\n"
 "{HW_DFADV,\"#708090\", LINETYPE_SOLID, 1},\n\n"
 "Freeze Warning, Darkslateblue\n"
 "{HW_FZWAR, \"#483D8B\", LINETYPE_SOLID, 1},\n\n"
 "Frost Advisory, Cornflower, NOT INCLUDED IN RAPFORMATS AS OPTION\n"
 "{HW_FRADV,  \"#649FED\", LINETYPE_SOLID, 1},\n\n"
 "LakeShore (Flooding) Warning , Forestgreen\n"
 "{HW_LSWAR,  \"#228B22\", LINETYPE_SOLID, 1},\n\n"
 "Blowing Snow Advisory, THIS DOESNT SHOW UP AS OPTION ON WEB PAGE\n"
 "{HW_BSADV, \"#B0E0E6\", LINETYPE_SOLID, 1},\n\n"
 "Radiological Hazard Warning, Indigo\n"
 "{HW_RAWAR, \"#4B0082\", LINETYPE_SOLID, 1},\n\n"
 "Nuclear Power Plant Warning, Indigo\n"
 "{HW_NUWAR, \"#4B0082\", LINETYPE_SOLID, 1},\n\n"
 "Hazardous Materials Warning, Indigo\n"
 "{HW_HMWAR, \"#4B0082\", LINETYPE_SOLID, 1},\n\n"
 "Volcano Warning, darkslategray\n"
 "{HW_VOWAR,\"#696969\", LINETYPE_SOLID, 1},\n\n"
 "Earthquake Warning, Saddlebrown\n"
 "{HW_EAWAR, \"#8B4513\", LINETYPE_SOLID, 1},\n\n"
 "Fire Warning, Sienna\n"
 "{HW_FIWAR, \"#A0522D\", LINETYPE_SOLID, 1},\n\n"
 "Blizzard Warning, Orangered\n"
 "{WS_BLWAR,  \"#FF4500\", LINETYPE_SOLID, 1},\n\n"
 "Heavy Snow Warning, THIS DOESNT SHOW UP AS OPTION ON WEB PAGE\n"
 "{WS_HSWAR, \"#8A2BE2\", LINETYPE_SOLID, 1},\n\n"
 "Lake Effect Snow Warning, Darkcyan\n"
 "{WS_LEWAR,\"#008B8B\", LINETYPE_SOLID, 1},\n\n"
 "Ice Storm Warning , Darkmagenta\n"
 "{WS_ISWAR, \"#8B008B\", LINETYPE_SOLID, 1},\n\n"
 "Sleet Warning,  THIS DOESNT SHOW UP AS OPTION ON WEB PAGE \n"
 "{WS_HLWAR, \"#87CEEB\", LINETYPE_SOLID, 1},\n\n"
 "Snow Advisory, THIS DOESNT SHOW UP AS OPTION ON WEB PAGE \n"
 "{WS_SNADV, \"#6699CC\", LINETYPE_SOLID, 1},\n\n"
 "Lake Effect Snow Advisory, Mediumturquoise \n"
 "{WS_LEADV,\"#48D1CC\", LINETYPE_SOLID, 1},\n\n"
 "Sleet Advisory THIS DOESNT SHOW UP AS OPTION ON WEB PAGE\n"
 "{WS_SLADV,\"#7B68EE\"\n";

p_default = { }; 

}warn_config_override[];

paramdef boolean
{
  p_descr = "Option to plot ID at centroid of WWA Area.";
  p_help = "Default is not to do this.";
  p_default = FALSE;
} plot_id;

paramdef string
{
  p_descr = "C-style format string to use in plotting ID.";
  p_help = "Relevant only if plot_id is TRUE.";
  p_default = "%s";
} id_format_string;


typedef enum {
  VERT_ALIGN_TOP           =  1,
  VERT_ALIGN_CENTER        =  2,
  VERT_ALIGN_BOTTOM        =  3
} vert_align_t;

typedef enum {
  HORIZ_ALIGN_LEFT         =  1,
  HORIZ_ALIGN_CENTER       =  2,
  HORIZ_ALIGN_RIGHT        =  3
} horiz_align_t;

typedef struct {
  string background_color;
  string font_name;
  int font_size;
  int x_offset;
  int y_offset;
  vert_align_t vert_align;
  horiz_align_t horiz_align;
} text_item_t;

paramdef struct text_item_t {
  p_default = { "",  "fixed", 10, 0, 0, VERT_ALIGN_CENTER, HORIZ_ALIGN_CENTER };
  p_descr = "Details for id label. Relevant only if plot_id is TRUE.";
} id_label;

paramdef struct text_item_t {
  p_default = { "Black",  "fixed", 10, -50, 100, VERT_ALIGN_CENTER, HORIZ_ALIGN_LEFT };
  p_descr = "Details Watch, Warn Text";
} wwa_text;
