/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program SigAirMet2Symprod
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance.");
    tt->help = tdrpStrDup("Used for procmap registration and auto restarting.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'no_threads'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("no_threads");
    tt->descr = tdrpStrDup("Option to prevent server from using a thread per client.");
    tt->help = tdrpStrDup("For debugging purposes it it sometimes useful to suppress the use of threads. Set no_threads to TRUE for this type of debugging.");
    tt->val_offset = (char *) &no_threads - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("Server details for support from ServerMgr");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'port'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("port");
    tt->descr = tdrpStrDup("Port number.");
    tt->help = tdrpStrDup("The server listens on this port for client requests.");
    tt->val_offset = (char *) &port - &_start_;
    tt->single_val.i = 5469;
    tt++;
    
    // Parameter 'qmax'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("qmax");
    tt->descr = tdrpStrDup("Max quiescent period (secs).");
    tt->help = tdrpStrDup("If the server does not receive requests for this time period, it will die gracefully. If set to -1, the server never exits.");
    tt->val_offset = (char *) &qmax - &_start_;
    tt->single_val.i = -1;
    tt++;
    
    // Parameter 'max_clients'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_clients");
    tt->descr = tdrpStrDup("Maximum number of clients");
    tt->help = tdrpStrDup("This is the maximum number of threads the application will produce to handle client requests.  If the maximum is reached, new clients will receive a SERVICE_DENIED error message and will have to request the data again.  If set to -1, no maximum is enforced.");
    tt->val_offset = (char *) &max_clients - &_start_;
    tt->single_val.i = 64;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("WHAT DATA TYPE TO PLOT PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'plotDataGroup'
    // ctype is '_plot_data_group_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("plotDataGroup");
    tt->descr = tdrpStrDup("What type (group) of data to plot from this param file.");
    tt->help = tdrpStrDup("If you use PLOT_ALL, the server will plot both SIGMETs and AIRMETs.");
    tt->val_offset = (char *) &plotDataGroup - &_start_;
    tt->enum_def.name = tdrpStrDup("plot_data_group_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("PLOT_SIGMETS");
      tt->enum_def.fields[0].val = PLOT_SIGMETS;
      tt->enum_def.fields[1].name = tdrpStrDup("PLOT_AIRMETS");
      tt->enum_def.fields[1].val = PLOT_AIRMETS;
      tt->enum_def.fields[2].name = tdrpStrDup("PLOT_ALL");
      tt->enum_def.fields[2].val = PLOT_ALL;
    tt->single_val.e = PLOT_SIGMETS;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("TEXT RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'text_background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("text_background_color");
    tt->descr = tdrpStrDup("Text background color.");
    tt->help = tdrpStrDup("Set to empty string to use display background color.");
    tt->val_offset = (char *) &text_background_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'font_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("font_name");
    tt->descr = tdrpStrDup("Font name.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &font_name - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'text_offset'
    // ctype is '_text_offset_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("text_offset");
    tt->descr = tdrpStrDup("Pixel offset values for starting the text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_offset - &_start_;
    tt->struct_def.name = tdrpStrDup("text_offset_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("x");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &text_offset.x - (char *) &text_offset;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("y");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &text_offset.y - (char *) &text_offset;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 0;
      tt->struct_vals[1].i = 0;
    tt++;
    
    // Parameter 'text_vert_align'
    // ctype is '_vert_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("text_vert_align");
    tt->descr = tdrpStrDup("Vertical alignment label text.");
    tt->help = tdrpStrDup("Does not apply if forecast and outlook labels are active.");
    tt->val_offset = (char *) &text_vert_align - &_start_;
    tt->enum_def.name = tdrpStrDup("vert_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
      tt->enum_def.fields[0].val = VERT_ALIGN_TOP;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
      tt->enum_def.fields[1].val = VERT_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
      tt->enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
    tt->single_val.e = VERT_ALIGN_CENTER;
    tt++;
    
    // Parameter 'text_horiz_align'
    // ctype is '_horiz_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("text_horiz_align");
    tt->descr = tdrpStrDup("Horizontal alignment for label text.");
    tt->help = tdrpStrDup("Does not apply if forecast and outlook labels are active.");
    tt->val_offset = (char *) &text_horiz_align - &_start_;
    tt->enum_def.name = tdrpStrDup("horiz_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
      tt->enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
      tt->enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
      tt->enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->single_val.e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'text_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("text_font_size");
    tt->descr = tdrpStrDup("Size of font to use for text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_font_size - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'text_font_style'
    // ctype is '_font_style_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("text_font_style");
    tt->descr = tdrpStrDup("Font style for the text");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &text_font_style - &_start_;
    tt->enum_def.name = tdrpStrDup("font_style_t");
    tt->enum_def.nfields = 7;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("TEXT_NORM");
      tt->enum_def.fields[0].val = TEXT_NORM;
      tt->enum_def.fields[1].name = tdrpStrDup("TEXT_BOLD");
      tt->enum_def.fields[1].val = TEXT_BOLD;
      tt->enum_def.fields[2].name = tdrpStrDup("TEXT_ITALICS");
      tt->enum_def.fields[2].val = TEXT_ITALICS;
      tt->enum_def.fields[3].name = tdrpStrDup("TEXT_SUBSCRIPT");
      tt->enum_def.fields[3].val = TEXT_SUBSCRIPT;
      tt->enum_def.fields[4].name = tdrpStrDup("TEXT_SUPERSCRIPT");
      tt->enum_def.fields[4].val = TEXT_SUPERSCRIPT;
      tt->enum_def.fields[5].name = tdrpStrDup("TEXT_UNDERLINE");
      tt->enum_def.fields[5].val = TEXT_UNDERLINE;
      tt->enum_def.fields[6].name = tdrpStrDup("TEXT_STRIKETHROUGH");
      tt->enum_def.fields[6].val = TEXT_STRIKETHROUGH;
    tt->single_val.e = TEXT_NORM;
    tt++;
    
    // Parameter 'plotTextLineLen'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("plotTextLineLen");
    tt->descr = tdrpStrDup("Length of a message line before text line is broken\n(effectively given a carriage return).");
    tt->help = tdrpStrDup("Program will break line at first space after\nthis many characters.");
    tt->val_offset = (char *) &plotTextLineLen - &_start_;
    tt->single_val.i = 32;
    tt++;
    
    // Parameter 'plot_text_line_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("plot_text_line_offset");
    tt->descr = tdrpStrDup("Vertical line spacing, pixels.");
    tt->help = tdrpStrDup("Optionally, the user may choose to plot various text parameters. The selected plotting elements are then draw vertically above each other on the display, separated by plot_text_line_offset pixels in the vertical. If this is negative then the column of numbers will ascend rather than descend on the display.");
    tt->val_offset = (char *) &plot_text_line_offset - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'plotPolygonIsFirBoundary_PrintFirName'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("plotPolygonIsFirBoundary_PrintFirName");
    tt->descr = tdrpStrDup("Option to print the name of the FIR for polygons which are the FIR boundary, not the actual SIGMET boundary. This occurs when the SIGMET polygon cannot be decoded");
    tt->help = tdrpStrDup("Default is to do this.");
    tt->val_offset = (char *) &plotPolygonIsFirBoundary_PrintFirName - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'unknown_wx_text'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("unknown_wx_text");
    tt->descr = tdrpStrDup("Text to be used for UNKNOWN weather type\n");
    tt->help = tdrpStrDup("If the weather type is UNKNOWN, it will be converted to this string for display.");
    tt->val_offset = (char *) &unknown_wx_text - &_start_;
    tt->single_val.s = tdrpStrDup("UNKNOWN");
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("POLYGON RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("line_width");
    tt->descr = tdrpStrDup("Icon line width");
    tt->help = tdrpStrDup("Used for icons.");
    tt->val_offset = (char *) &line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'requirePolygon'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("requirePolygon");
    tt->descr = tdrpStrDup("Option to only plot a SIG/AIRMET if it has a polygon\nassociated with it.");
    tt->help = tdrpStrDup("A ploygon is defined as at least 2 points.");
    tt->val_offset = (char *) &requirePolygon - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'polygon_line_type'
    // ctype is '_line_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("polygon_line_type");
    tt->descr = tdrpStrDup("polygon line type");
    tt->help = tdrpStrDup("Line type suggested for the polygons.");
    tt->val_offset = (char *) &polygon_line_type - &_start_;
    tt->enum_def.name = tdrpStrDup("line_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LINETYPE_SOLID");
      tt->enum_def.fields[0].val = LINETYPE_SOLID;
      tt->enum_def.fields[1].name = tdrpStrDup("LINETYPE_DASH");
      tt->enum_def.fields[1].val = LINETYPE_DASH;
      tt->enum_def.fields[2].name = tdrpStrDup("LINETYPE_DOT_DASH");
      tt->enum_def.fields[2].val = LINETYPE_DOT_DASH;
    tt->single_val.e = LINETYPE_SOLID;
    tt++;
    
    // Parameter 'forecast_line_type'
    // ctype is '_line_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("forecast_line_type");
    tt->descr = tdrpStrDup("forecast polygon line type");
    tt->help = tdrpStrDup("Line type suggested for the forecast polygons.");
    tt->val_offset = (char *) &forecast_line_type - &_start_;
    tt->enum_def.name = tdrpStrDup("line_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LINETYPE_SOLID");
      tt->enum_def.fields[0].val = LINETYPE_SOLID;
      tt->enum_def.fields[1].name = tdrpStrDup("LINETYPE_DASH");
      tt->enum_def.fields[1].val = LINETYPE_DASH;
      tt->enum_def.fields[2].name = tdrpStrDup("LINETYPE_DOT_DASH");
      tt->enum_def.fields[2].val = LINETYPE_DOT_DASH;
    tt->single_val.e = LINETYPE_DOT_DASH;
    tt++;
    
    // Parameter 'outlook_line_type'
    // ctype is '_line_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("outlook_line_type");
    tt->descr = tdrpStrDup("outlook polygon line type");
    tt->help = tdrpStrDup("Line type suggested for the outlook polygons.");
    tt->val_offset = (char *) &outlook_line_type - &_start_;
    tt->enum_def.name = tdrpStrDup("line_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LINETYPE_SOLID");
      tt->enum_def.fields[0].val = LINETYPE_SOLID;
      tt->enum_def.fields[1].name = tdrpStrDup("LINETYPE_DASH");
      tt->enum_def.fields[1].val = LINETYPE_DASH;
      tt->enum_def.fields[2].name = tdrpStrDup("LINETYPE_DOT_DASH");
      tt->enum_def.fields[2].val = LINETYPE_DOT_DASH;
    tt->single_val.e = LINETYPE_DOT_DASH;
    tt++;
    
    // Parameter 'fir_polygon_line_type'
    // ctype is '_line_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("fir_polygon_line_type");
    tt->descr = tdrpStrDup("polygon line type to use for polygons which are the FIR boundary, not the actual SIGMET boundary. This occurs when the SIGMET polygon cannot be decoded");
    tt->help = tdrpStrDup("Default is to set this type of polygon to a different linetype than the polygon_line_type");
    tt->val_offset = (char *) &fir_polygon_line_type - &_start_;
    tt->enum_def.name = tdrpStrDup("line_type_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("LINETYPE_SOLID");
      tt->enum_def.fields[0].val = LINETYPE_SOLID;
      tt->enum_def.fields[1].name = tdrpStrDup("LINETYPE_DASH");
      tt->enum_def.fields[1].val = LINETYPE_DASH;
      tt->enum_def.fields[2].name = tdrpStrDup("LINETYPE_DOT_DASH");
      tt->enum_def.fields[2].val = LINETYPE_DOT_DASH;
    tt->single_val.e = LINETYPE_DASH;
    tt++;
    
    // Parameter 'polygon_line_width'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("polygon_line_width");
    tt->descr = tdrpStrDup("polygon line width");
    tt->help = tdrpStrDup("Line width for polygon.");
    tt->val_offset = (char *) &polygon_line_width - &_start_;
    tt->single_val.i = 1;
    tt++;
    
    // Parameter 'polygon_capstyle'
    // ctype is '_capstyle_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("polygon_capstyle");
    tt->descr = tdrpStrDup("polygon capstyle");
    tt->help = tdrpStrDup("Capstyle suggested for using on the polygon.");
    tt->val_offset = (char *) &polygon_capstyle - &_start_;
    tt->enum_def.name = tdrpStrDup("capstyle_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("CAPSTYLE_BUTT");
      tt->enum_def.fields[0].val = CAPSTYLE_BUTT;
      tt->enum_def.fields[1].name = tdrpStrDup("CAPSTYLE_NOT_LAST");
      tt->enum_def.fields[1].val = CAPSTYLE_NOT_LAST;
      tt->enum_def.fields[2].name = tdrpStrDup("CAPSTYLE_PROJECTING");
      tt->enum_def.fields[2].val = CAPSTYLE_PROJECTING;
      tt->enum_def.fields[3].name = tdrpStrDup("CAPSTYLE_ROUND");
      tt->enum_def.fields[3].val = CAPSTYLE_ROUND;
    tt->single_val.e = CAPSTYLE_BUTT;
    tt++;
    
    // Parameter 'polygon_joinstyle'
    // ctype is '_joinstyle_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("polygon_joinstyle");
    tt->descr = tdrpStrDup("polygon joinstyle");
    tt->help = tdrpStrDup("Joinstyle suggested for using on the polygon.");
    tt->val_offset = (char *) &polygon_joinstyle - &_start_;
    tt->enum_def.name = tdrpStrDup("joinstyle_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("JOINSTYLE_BEVEL");
      tt->enum_def.fields[0].val = JOINSTYLE_BEVEL;
      tt->enum_def.fields[1].name = tdrpStrDup("JOINSTYLE_MITER");
      tt->enum_def.fields[1].val = JOINSTYLE_MITER;
      tt->enum_def.fields[2].name = tdrpStrDup("JOINSTYLE_ROUND");
      tt->enum_def.fields[2].val = JOINSTYLE_ROUND;
    tt->single_val.e = JOINSTYLE_BEVEL;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("ICON RENDERING PARAMETERS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("SIGMET ITEM DEFINITIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'sigmet_items'
    // ctype is '_sigmet_item_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sigmet_items");
    tt->descr = tdrpStrDup("Defines for how to render the SigAirMets based on\na wildcarding with the weather string.");
    tt->help = tdrpStrDup("WxWildCard is a string to separate out weather types, see the\n   SigAirMet2Spdb param file for the possible weather types.\nplotID: plot the ID?\nplotWx: plot the weather type string?\nplotFlightLevels: plot the flight levels?\nplotSource: plot the source station string?\nplotTimes: plot the start and expire times?\nplotText: plot the raw text?\nrenderPolygonSpokes: plot the polygon spokes?\nrenderPolygon: plot the polygon?\nrenderForecasts: plot the forecasts if they exist?\nrenderOutlooks: plot the outlooks if they exist?\nrenderIcon: plot the icon?\niconName: name of icon to plot, must be defined in icon_defs below\niconNameSouth: icon name for Southern Hemisphere, if different from main icon.\n  Set to empty string if the same icon is used everywhere.\niconScale: scaling factor to apply to the icon, if scaling is allowed\nallowClientScaling: allow the client to scale or resize the icon?\nmainColor: color for text, icons, polygons\nforecastColor: color for forecast components\noutlookColor: color for outlook components\nincludeHiddenPolygon: send a polygon marked as hidden, for mouse-over?\n");
    tt->array_offset = (char *) &_sigmet_items - &_start_;
    tt->array_n_offset = (char *) &sigmet_items_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(sigmet_item_t);
    tt->array_n = 16;
    tt->struct_def.name = tdrpStrDup("sigmet_item_t");
    tt->struct_def.nfields = 20;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("WxWildcard");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_sigmet_items->WxWildcard - (char *) _sigmet_items;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("plotID");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_sigmet_items->plotID - (char *) _sigmet_items;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("plotWx");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_sigmet_items->plotWx - (char *) _sigmet_items;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("plotFlightLevels");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_sigmet_items->plotFlightLevels - (char *) _sigmet_items;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("plotSource");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_sigmet_items->plotSource - (char *) _sigmet_items;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("plotTimes");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_sigmet_items->plotTimes - (char *) _sigmet_items;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("plotText");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_sigmet_items->plotText - (char *) _sigmet_items;
      tt->struct_def.fields[7].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[7].fname = tdrpStrDup("renderPolygonSpokes");
      tt->struct_def.fields[7].ptype = BOOL_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_sigmet_items->renderPolygonSpokes - (char *) _sigmet_items;
      tt->struct_def.fields[8].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[8].fname = tdrpStrDup("renderPolygon");
      tt->struct_def.fields[8].ptype = BOOL_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_sigmet_items->renderPolygon - (char *) _sigmet_items;
      tt->struct_def.fields[9].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[9].fname = tdrpStrDup("renderForecasts");
      tt->struct_def.fields[9].ptype = BOOL_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_sigmet_items->renderForecasts - (char *) _sigmet_items;
      tt->struct_def.fields[10].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[10].fname = tdrpStrDup("renderOutlooks");
      tt->struct_def.fields[10].ptype = BOOL_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_sigmet_items->renderOutlooks - (char *) _sigmet_items;
      tt->struct_def.fields[11].ftype = tdrpStrDup("draw_icon_t");
      tt->struct_def.fields[11].fname = tdrpStrDup("renderIcon");
      tt->struct_def.fields[11].ptype = ENUM_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_sigmet_items->renderIcon - (char *) _sigmet_items;
        tt->struct_def.fields[11].enum_def.name = tdrpStrDup("draw_icon_t");
        tt->struct_def.fields[11].enum_def.nfields = 3;
        tt->struct_def.fields[11].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[11].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[11].enum_def.fields[0].name = tdrpStrDup("ALWAYS_ON");
        tt->struct_def.fields[11].enum_def.fields[0].val = ALWAYS_ON;
        tt->struct_def.fields[11].enum_def.fields[1].name = tdrpStrDup("ALWAYS_OFF");
        tt->struct_def.fields[11].enum_def.fields[1].val = ALWAYS_OFF;
        tt->struct_def.fields[11].enum_def.fields[2].name = tdrpStrDup("ON_IF_NO_POLYGON");
        tt->struct_def.fields[11].enum_def.fields[2].val = ON_IF_NO_POLYGON;
      tt->struct_def.fields[12].ftype = tdrpStrDup("string");
      tt->struct_def.fields[12].fname = tdrpStrDup("iconName");
      tt->struct_def.fields[12].ptype = STRING_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_sigmet_items->iconName - (char *) _sigmet_items;
      tt->struct_def.fields[13].ftype = tdrpStrDup("string");
      tt->struct_def.fields[13].fname = tdrpStrDup("iconNameSouth");
      tt->struct_def.fields[13].ptype = STRING_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &_sigmet_items->iconNameSouth - (char *) _sigmet_items;
      tt->struct_def.fields[14].ftype = tdrpStrDup("float");
      tt->struct_def.fields[14].fname = tdrpStrDup("iconScale");
      tt->struct_def.fields[14].ptype = FLOAT_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &_sigmet_items->iconScale - (char *) _sigmet_items;
      tt->struct_def.fields[15].ftype = tdrpStrDup("client_scale_icon_t");
      tt->struct_def.fields[15].fname = tdrpStrDup("allowClientScaling");
      tt->struct_def.fields[15].ptype = ENUM_TYPE;
      tt->struct_def.fields[15].rel_offset = 
        (char *) &_sigmet_items->allowClientScaling - (char *) _sigmet_items;
        tt->struct_def.fields[15].enum_def.name = tdrpStrDup("client_scale_icon_t");
        tt->struct_def.fields[15].enum_def.nfields = 3;
        tt->struct_def.fields[15].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[15].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[15].enum_def.fields[0].name = tdrpStrDup("DO_NOT_SCALE");
        tt->struct_def.fields[15].enum_def.fields[0].val = DO_NOT_SCALE;
        tt->struct_def.fields[15].enum_def.fields[1].name = tdrpStrDup("DO_SCALE");
        tt->struct_def.fields[15].enum_def.fields[1].val = DO_SCALE;
        tt->struct_def.fields[15].enum_def.fields[2].name = tdrpStrDup("NO_SCALE_IF_NO_POLYGON");
        tt->struct_def.fields[15].enum_def.fields[2].val = NO_SCALE_IF_NO_POLYGON;
      tt->struct_def.fields[16].ftype = tdrpStrDup("string");
      tt->struct_def.fields[16].fname = tdrpStrDup("mainColor");
      tt->struct_def.fields[16].ptype = STRING_TYPE;
      tt->struct_def.fields[16].rel_offset = 
        (char *) &_sigmet_items->mainColor - (char *) _sigmet_items;
      tt->struct_def.fields[17].ftype = tdrpStrDup("string");
      tt->struct_def.fields[17].fname = tdrpStrDup("forecastColor");
      tt->struct_def.fields[17].ptype = STRING_TYPE;
      tt->struct_def.fields[17].rel_offset = 
        (char *) &_sigmet_items->forecastColor - (char *) _sigmet_items;
      tt->struct_def.fields[18].ftype = tdrpStrDup("string");
      tt->struct_def.fields[18].fname = tdrpStrDup("outlookColor");
      tt->struct_def.fields[18].ptype = STRING_TYPE;
      tt->struct_def.fields[18].rel_offset = 
        (char *) &_sigmet_items->outlookColor - (char *) _sigmet_items;
      tt->struct_def.fields[19].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[19].fname = tdrpStrDup("includeHiddenPolygon");
      tt->struct_def.fields[19].ptype = BOOL_TYPE;
      tt->struct_def.fields[19].rel_offset = 
        (char *) &_sigmet_items->includeHiddenPolygon - (char *) _sigmet_items;
    tt->n_struct_vals = 320;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("VA*");
      tt->struct_vals[1].b = pFALSE;
      tt->struct_vals[2].b = pFALSE;
      tt->struct_vals[3].b = pFALSE;
      tt->struct_vals[4].b = pFALSE;
      tt->struct_vals[5].b = pFALSE;
      tt->struct_vals[6].b = pFALSE;
      tt->struct_vals[7].b = pFALSE;
      tt->struct_vals[8].b = pTRUE;
      tt->struct_vals[9].b = pTRUE;
      tt->struct_vals[10].b = pTRUE;
      tt->struct_vals[11].e = ALWAYS_ON;
      tt->struct_vals[12].s = tdrpStrDup("va_icon");
      tt->struct_vals[13].s = tdrpStrDup("");
      tt->struct_vals[14].f = 1;
      tt->struct_vals[15].e = DO_NOT_SCALE;
      tt->struct_vals[16].s = tdrpStrDup("magenta");
      tt->struct_vals[17].s = tdrpStrDup("magenta");
      tt->struct_vals[18].s = tdrpStrDup("magenta");
      tt->struct_vals[19].b = pFALSE;
      tt->struct_vals[20].s = tdrpStrDup("TC");
      tt->struct_vals[21].b = pFALSE;
      tt->struct_vals[22].b = pFALSE;
      tt->struct_vals[23].b = pFALSE;
      tt->struct_vals[24].b = pFALSE;
      tt->struct_vals[25].b = pFALSE;
      tt->struct_vals[26].b = pFALSE;
      tt->struct_vals[27].b = pFALSE;
      tt->struct_vals[28].b = pTRUE;
      tt->struct_vals[29].b = pTRUE;
      tt->struct_vals[30].b = pTRUE;
      tt->struct_vals[31].e = ALWAYS_ON;
      tt->struct_vals[32].s = tdrpStrDup("tc_icon");
      tt->struct_vals[33].s = tdrpStrDup("tc_icon_south");
      tt->struct_vals[34].f = 0.5;
      tt->struct_vals[35].e = DO_NOT_SCALE;
      tt->struct_vals[36].s = tdrpStrDup("yellow");
      tt->struct_vals[37].s = tdrpStrDup("gray");
      tt->struct_vals[38].s = tdrpStrDup("gray");
      tt->struct_vals[39].b = pFALSE;
      tt->struct_vals[40].s = tdrpStrDup("*TS*");
      tt->struct_vals[41].b = pFALSE;
      tt->struct_vals[42].b = pFALSE;
      tt->struct_vals[43].b = pFALSE;
      tt->struct_vals[44].b = pFALSE;
      tt->struct_vals[45].b = pFALSE;
      tt->struct_vals[46].b = pFALSE;
      tt->struct_vals[47].b = pFALSE;
      tt->struct_vals[48].b = pTRUE;
      tt->struct_vals[49].b = pTRUE;
      tt->struct_vals[50].b = pTRUE;
      tt->struct_vals[51].e = ALWAYS_ON;
      tt->struct_vals[52].s = tdrpStrDup("convective_icon");
      tt->struct_vals[53].s = tdrpStrDup("");
      tt->struct_vals[54].f = 0.25;
      tt->struct_vals[55].e = DO_NOT_SCALE;
      tt->struct_vals[56].s = tdrpStrDup("red");
      tt->struct_vals[57].s = tdrpStrDup("");
      tt->struct_vals[58].s = tdrpStrDup("");
      tt->struct_vals[59].b = pFALSE;
      tt->struct_vals[60].s = tdrpStrDup("*CB*");
      tt->struct_vals[61].b = pFALSE;
      tt->struct_vals[62].b = pFALSE;
      tt->struct_vals[63].b = pFALSE;
      tt->struct_vals[64].b = pFALSE;
      tt->struct_vals[65].b = pFALSE;
      tt->struct_vals[66].b = pFALSE;
      tt->struct_vals[67].b = pFALSE;
      tt->struct_vals[68].b = pTRUE;
      tt->struct_vals[69].b = pTRUE;
      tt->struct_vals[70].b = pTRUE;
      tt->struct_vals[71].e = ALWAYS_ON;
      tt->struct_vals[72].s = tdrpStrDup("convective_icon");
      tt->struct_vals[73].s = tdrpStrDup("");
      tt->struct_vals[74].f = 0.25;
      tt->struct_vals[75].e = DO_NOT_SCALE;
      tt->struct_vals[76].s = tdrpStrDup("red");
      tt->struct_vals[77].s = tdrpStrDup("");
      tt->struct_vals[78].s = tdrpStrDup("");
      tt->struct_vals[79].b = pFALSE;
      tt->struct_vals[80].s = tdrpStrDup("*TURB*");
      tt->struct_vals[81].b = pFALSE;
      tt->struct_vals[82].b = pFALSE;
      tt->struct_vals[83].b = pFALSE;
      tt->struct_vals[84].b = pFALSE;
      tt->struct_vals[85].b = pFALSE;
      tt->struct_vals[86].b = pFALSE;
      tt->struct_vals[87].b = pFALSE;
      tt->struct_vals[88].b = pFALSE;
      tt->struct_vals[89].b = pTRUE;
      tt->struct_vals[90].b = pTRUE;
      tt->struct_vals[91].e = ALWAYS_ON;
      tt->struct_vals[92].s = tdrpStrDup("turb_icon");
      tt->struct_vals[93].s = tdrpStrDup("");
      tt->struct_vals[94].f = 0.5;
      tt->struct_vals[95].e = DO_NOT_SCALE;
      tt->struct_vals[96].s = tdrpStrDup("green");
      tt->struct_vals[97].s = tdrpStrDup("");
      tt->struct_vals[98].s = tdrpStrDup("");
      tt->struct_vals[99].b = pFALSE;
      tt->struct_vals[100].s = tdrpStrDup("*IC*");
      tt->struct_vals[101].b = pTRUE;
      tt->struct_vals[102].b = pFALSE;
      tt->struct_vals[103].b = pFALSE;
      tt->struct_vals[104].b = pFALSE;
      tt->struct_vals[105].b = pFALSE;
      tt->struct_vals[106].b = pFALSE;
      tt->struct_vals[107].b = pFALSE;
      tt->struct_vals[108].b = pTRUE;
      tt->struct_vals[109].b = pTRUE;
      tt->struct_vals[110].b = pTRUE;
      tt->struct_vals[111].e = ALWAYS_ON;
      tt->struct_vals[112].s = tdrpStrDup("icing_icon");
      tt->struct_vals[113].s = tdrpStrDup("");
      tt->struct_vals[114].f = 0.5;
      tt->struct_vals[115].e = DO_NOT_SCALE;
      tt->struct_vals[116].s = tdrpStrDup("cyan");
      tt->struct_vals[117].s = tdrpStrDup("");
      tt->struct_vals[118].s = tdrpStrDup("");
      tt->struct_vals[119].b = pFALSE;
      tt->struct_vals[120].s = tdrpStrDup("*DS*");
      tt->struct_vals[121].b = pFALSE;
      tt->struct_vals[122].b = pFALSE;
      tt->struct_vals[123].b = pFALSE;
      tt->struct_vals[124].b = pFALSE;
      tt->struct_vals[125].b = pFALSE;
      tt->struct_vals[126].b = pFALSE;
      tt->struct_vals[127].b = pFALSE;
      tt->struct_vals[128].b = pTRUE;
      tt->struct_vals[129].b = pTRUE;
      tt->struct_vals[130].b = pTRUE;
      tt->struct_vals[131].e = ALWAYS_ON;
      tt->struct_vals[132].s = tdrpStrDup("ds_icon");
      tt->struct_vals[133].s = tdrpStrDup("");
      tt->struct_vals[134].f = 0.5;
      tt->struct_vals[135].e = DO_NOT_SCALE;
      tt->struct_vals[136].s = tdrpStrDup("tan");
      tt->struct_vals[137].s = tdrpStrDup("");
      tt->struct_vals[138].s = tdrpStrDup("");
      tt->struct_vals[139].b = pFALSE;
      tt->struct_vals[140].s = tdrpStrDup("*SS*");
      tt->struct_vals[141].b = pFALSE;
      tt->struct_vals[142].b = pFALSE;
      tt->struct_vals[143].b = pFALSE;
      tt->struct_vals[144].b = pFALSE;
      tt->struct_vals[145].b = pFALSE;
      tt->struct_vals[146].b = pFALSE;
      tt->struct_vals[147].b = pFALSE;
      tt->struct_vals[148].b = pTRUE;
      tt->struct_vals[149].b = pTRUE;
      tt->struct_vals[150].b = pTRUE;
      tt->struct_vals[151].e = ALWAYS_ON;
      tt->struct_vals[152].s = tdrpStrDup("ds_icon");
      tt->struct_vals[153].s = tdrpStrDup("");
      tt->struct_vals[154].f = 0.5;
      tt->struct_vals[155].e = DO_NOT_SCALE;
      tt->struct_vals[156].s = tdrpStrDup("tan");
      tt->struct_vals[157].s = tdrpStrDup("");
      tt->struct_vals[158].s = tdrpStrDup("");
      tt->struct_vals[159].b = pFALSE;
      tt->struct_vals[160].s = tdrpStrDup("MTN OBSC*");
      tt->struct_vals[161].b = pFALSE;
      tt->struct_vals[162].b = pFALSE;
      tt->struct_vals[163].b = pFALSE;
      tt->struct_vals[164].b = pFALSE;
      tt->struct_vals[165].b = pFALSE;
      tt->struct_vals[166].b = pFALSE;
      tt->struct_vals[167].b = pFALSE;
      tt->struct_vals[168].b = pTRUE;
      tt->struct_vals[169].b = pFALSE;
      tt->struct_vals[170].b = pFALSE;
      tt->struct_vals[171].e = ALWAYS_ON;
      tt->struct_vals[172].s = tdrpStrDup("mtn_obsc_icon");
      tt->struct_vals[173].s = tdrpStrDup("");
      tt->struct_vals[174].f = 1;
      tt->struct_vals[175].e = DO_NOT_SCALE;
      tt->struct_vals[176].s = tdrpStrDup("white");
      tt->struct_vals[177].s = tdrpStrDup("");
      tt->struct_vals[178].s = tdrpStrDup("");
      tt->struct_vals[179].b = pFALSE;
      tt->struct_vals[180].s = tdrpStrDup("*VIS*");
      tt->struct_vals[181].b = pFALSE;
      tt->struct_vals[182].b = pFALSE;
      tt->struct_vals[183].b = pFALSE;
      tt->struct_vals[184].b = pFALSE;
      tt->struct_vals[185].b = pFALSE;
      tt->struct_vals[186].b = pFALSE;
      tt->struct_vals[187].b = pFALSE;
      tt->struct_vals[188].b = pTRUE;
      tt->struct_vals[189].b = pFALSE;
      tt->struct_vals[190].b = pFALSE;
      tt->struct_vals[191].e = ALWAYS_ON;
      tt->struct_vals[192].s = tdrpStrDup("ifr_icon");
      tt->struct_vals[193].s = tdrpStrDup("");
      tt->struct_vals[194].f = 1;
      tt->struct_vals[195].e = DO_NOT_SCALE;
      tt->struct_vals[196].s = tdrpStrDup("white");
      tt->struct_vals[197].s = tdrpStrDup("");
      tt->struct_vals[198].s = tdrpStrDup("");
      tt->struct_vals[199].b = pFALSE;
      tt->struct_vals[200].s = tdrpStrDup("*RDOACT*");
      tt->struct_vals[201].b = pFALSE;
      tt->struct_vals[202].b = pFALSE;
      tt->struct_vals[203].b = pFALSE;
      tt->struct_vals[204].b = pFALSE;
      tt->struct_vals[205].b = pFALSE;
      tt->struct_vals[206].b = pFALSE;
      tt->struct_vals[207].b = pFALSE;
      tt->struct_vals[208].b = pFALSE;
      tt->struct_vals[209].b = pTRUE;
      tt->struct_vals[210].b = pTRUE;
      tt->struct_vals[211].e = ALWAYS_ON;
      tt->struct_vals[212].s = tdrpStrDup("rdoact_icon");
      tt->struct_vals[213].s = tdrpStrDup("");
      tt->struct_vals[214].f = 0.5;
      tt->struct_vals[215].e = DO_NOT_SCALE;
      tt->struct_vals[216].s = tdrpStrDup("red");
      tt->struct_vals[217].s = tdrpStrDup("red");
      tt->struct_vals[218].s = tdrpStrDup("red");
      tt->struct_vals[219].b = pFALSE;
      tt->struct_vals[220].s = tdrpStrDup("*CLD*");
      tt->struct_vals[221].b = pFALSE;
      tt->struct_vals[222].b = pFALSE;
      tt->struct_vals[223].b = pFALSE;
      tt->struct_vals[224].b = pFALSE;
      tt->struct_vals[225].b = pFALSE;
      tt->struct_vals[226].b = pFALSE;
      tt->struct_vals[227].b = pFALSE;
      tt->struct_vals[228].b = pTRUE;
      tt->struct_vals[229].b = pFALSE;
      tt->struct_vals[230].b = pFALSE;
      tt->struct_vals[231].e = ALWAYS_ON;
      tt->struct_vals[232].s = tdrpStrDup("overcast_icon");
      tt->struct_vals[233].s = tdrpStrDup("");
      tt->struct_vals[234].f = 1;
      tt->struct_vals[235].e = DO_NOT_SCALE;
      tt->struct_vals[236].s = tdrpStrDup("white");
      tt->struct_vals[237].s = tdrpStrDup("");
      tt->struct_vals[238].s = tdrpStrDup("");
      tt->struct_vals[239].b = pFALSE;
      tt->struct_vals[240].s = tdrpStrDup("IFR");
      tt->struct_vals[241].b = pFALSE;
      tt->struct_vals[242].b = pFALSE;
      tt->struct_vals[243].b = pFALSE;
      tt->struct_vals[244].b = pFALSE;
      tt->struct_vals[245].b = pFALSE;
      tt->struct_vals[246].b = pFALSE;
      tt->struct_vals[247].b = pFALSE;
      tt->struct_vals[248].b = pTRUE;
      tt->struct_vals[249].b = pFALSE;
      tt->struct_vals[250].b = pFALSE;
      tt->struct_vals[251].e = ALWAYS_ON;
      tt->struct_vals[252].s = tdrpStrDup("ifr_icon");
      tt->struct_vals[253].s = tdrpStrDup("");
      tt->struct_vals[254].f = 1;
      tt->struct_vals[255].e = DO_NOT_SCALE;
      tt->struct_vals[256].s = tdrpStrDup("white");
      tt->struct_vals[257].s = tdrpStrDup("");
      tt->struct_vals[258].s = tdrpStrDup("");
      tt->struct_vals[259].b = pFALSE;
      tt->struct_vals[260].s = tdrpStrDup("*TS*");
      tt->struct_vals[261].b = pFALSE;
      tt->struct_vals[262].b = pFALSE;
      tt->struct_vals[263].b = pFALSE;
      tt->struct_vals[264].b = pTRUE;
      tt->struct_vals[265].b = pFALSE;
      tt->struct_vals[266].b = pFALSE;
      tt->struct_vals[267].b = pFALSE;
      tt->struct_vals[268].b = pTRUE;
      tt->struct_vals[269].b = pFALSE;
      tt->struct_vals[270].b = pFALSE;
      tt->struct_vals[271].e = ALWAYS_ON;
      tt->struct_vals[272].s = tdrpStrDup("convective_icon");
      tt->struct_vals[273].s = tdrpStrDup("");
      tt->struct_vals[274].f = 1;
      tt->struct_vals[275].e = DO_NOT_SCALE;
      tt->struct_vals[276].s = tdrpStrDup("red");
      tt->struct_vals[277].s = tdrpStrDup("");
      tt->struct_vals[278].s = tdrpStrDup("");
      tt->struct_vals[279].b = pFALSE;
      tt->struct_vals[280].s = tdrpStrDup("*ICE*");
      tt->struct_vals[281].b = pFALSE;
      tt->struct_vals[282].b = pFALSE;
      tt->struct_vals[283].b = pFALSE;
      tt->struct_vals[284].b = pFALSE;
      tt->struct_vals[285].b = pFALSE;
      tt->struct_vals[286].b = pFALSE;
      tt->struct_vals[287].b = pFALSE;
      tt->struct_vals[288].b = pTRUE;
      tt->struct_vals[289].b = pFALSE;
      tt->struct_vals[290].b = pFALSE;
      tt->struct_vals[291].e = ALWAYS_ON;
      tt->struct_vals[292].s = tdrpStrDup("icing_icon");
      tt->struct_vals[293].s = tdrpStrDup("");
      tt->struct_vals[294].f = 1;
      tt->struct_vals[295].e = DO_NOT_SCALE;
      tt->struct_vals[296].s = tdrpStrDup("cyan");
      tt->struct_vals[297].s = tdrpStrDup("");
      tt->struct_vals[298].s = tdrpStrDup("");
      tt->struct_vals[299].b = pFALSE;
      tt->struct_vals[300].s = tdrpStrDup("*");
      tt->struct_vals[301].b = pTRUE;
      tt->struct_vals[302].b = pTRUE;
      tt->struct_vals[303].b = pTRUE;
      tt->struct_vals[304].b = pTRUE;
      tt->struct_vals[305].b = pTRUE;
      tt->struct_vals[306].b = pTRUE;
      tt->struct_vals[307].b = pFALSE;
      tt->struct_vals[308].b = pTRUE;
      tt->struct_vals[309].b = pTRUE;
      tt->struct_vals[310].b = pTRUE;
      tt->struct_vals[311].e = ON_IF_NO_POLYGON;
      tt->struct_vals[312].s = tdrpStrDup("unknown");
      tt->struct_vals[313].s = tdrpStrDup("");
      tt->struct_vals[314].f = 1;
      tt->struct_vals[315].e = NO_SCALE_IF_NO_POLYGON;
      tt->struct_vals[316].s = tdrpStrDup("orange");
      tt->struct_vals[317].s = tdrpStrDup("");
      tt->struct_vals[318].s = tdrpStrDup("");
      tt->struct_vals[319].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("ICON DEFINITIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'icon_defs'
    // ctype is '_icon_defs_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("icon_defs");
    tt->descr = tdrpStrDup("Definitions for all of the icons used by the server.");
    tt->help = tdrpStrDup("The icon_points string contains the points used to define the icon in a space delimited string like the following:\n\t\"x1 y1 x2 y2 .... xn yn\"\nUse the value 32767 for both X and Y to indicate a pen up.\nThe turb_icon is the standard turbulence symbol.\nThe convective_icon is the standard convective symbol.\nThe icing_icon is the standard icing symbol.\nThe tc_icon is the standard tropical cyclone symbol.\nThe va_icon is an icon for volcanic ash.\nThe ds_icon is the standard icon for duststorms\nThe mtw_icon is an icon for mountain waves\nThe mtn_obsc_icon is the standard icon for mountain obscuration\nThe gr_icon is the standard icon for GR\nThe unknown is a question mark.\n");
    tt->array_offset = (char *) &_icon_defs - &_start_;
    tt->array_n_offset = (char *) &icon_defs_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(icon_defs_t);
    tt->array_n = 14;
    tt->struct_def.name = tdrpStrDup("icon_defs_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("string");
      tt->struct_def.fields[0].fname = tdrpStrDup("icon_name");
      tt->struct_def.fields[0].ptype = STRING_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_icon_defs->icon_name - (char *) _icon_defs;
      tt->struct_def.fields[1].ftype = tdrpStrDup("string");
      tt->struct_def.fields[1].fname = tdrpStrDup("icon_points");
      tt->struct_def.fields[1].ptype = STRING_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_icon_defs->icon_points - (char *) _icon_defs;
    tt->n_struct_vals = 28;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].s = tdrpStrDup("turb_icon");
      tt->struct_vals[1].s = tdrpStrDup("-10 0 0 20 10 0 32767 32767 -10 -10 0 10 10 -10 32767 32767 -20 -10 -10 -10 32767 32767 -5 -10 5 -10 32767 32767 10 -10 20 -10");
      tt->struct_vals[2].s = tdrpStrDup("convective_icon");
      tt->struct_vals[3].s = tdrpStrDup("0 0 15 15 -9 15 -9 -15 32767 32767 0 0 15 -15 32767 32767 15 -15 8 -15 32767 32767 15 -15 15 -9");
      tt->struct_vals[4].s = tdrpStrDup("icing_icon");
      tt->struct_vals[5].s = tdrpStrDup("0 0 0 -18 32767 32767 3 0 3 -18 32767 32767 -9 6 -9 0 -6 -3 -3 -6 6 -6 9 -3 12 0 12 6");
      tt->struct_vals[6].s = tdrpStrDup("tc_icon");
      tt->struct_vals[7].s = tdrpStrDup("0 8  1 8  4 7  5 6  6 5  7 4  8 1  8 0  8 -1  7 -4  6 -5  5 -6  4 -7  1 -8  0 -8  -1 -8  -4 -7  -5 -6  -6 -5  -7 -4  -8 -1  -8 0  -8 1  -7 4  -6 5  -5 6  -4 7  -1 8  0 8  32767 32767  -8 0  -8 1  -7 5  -6 7  -3 11  1 14  5 16 32767 32767 8 0  8 -1  7 -5  6 -7  3 -11  -1 -14  -5 -16 32767 32767  0 7  1 7  3 6  5 5  6 3  7 1  7 0  7 -1  6 -3  5 -5  3 -6  1 -7  0 -7  -1 -7  -3 -6  -5 -5  -6 -3  -7 -1  -7 0  -7 1  -6 3  -5 5  -3 6  -1 7  0 7  32767 32767  -7 0  -7 1  -6 4  -5 7  -4 8  -3 9  0 12  1 13  3 14  5 15  32767 32767  7 0  7 -1  6 -4  5 -7  4 -8  3 -9  0 -12  -1 -13  -3 -14  -5 -15 ");
      tt->struct_vals[8].s = tdrpStrDup("tc_icon_south");
      tt->struct_vals[9].s = tdrpStrDup("0 8  1 8  4 7  5 6  6 5  7 4  8 1  8 0  8 -1  7 -4  6 -5  5 -6  4 -7  1 -8  0 -8  -1 -8  -4 -7  -5 -6  -6 -5  -7 -4  -8 -1  -8 0  -8 1  -7 4  -6 5  -5 6  -4 7  -1 8  0 8  32767 32767  8 0  8 1  7 5  6 7  3 11  -1 14  -5 16 32767 32767 -8 0  -8 -1  -7 -5  -6 -7  -3 -11  1 -14  5 -16  32767 32767  0 7  1 7  3 6  5 5  6 3  7 1  7 0  7 -1  6 -3  5 -5  3 -6  1 -7  0 -7  -1 -7  -3 -6  -5 -5  -6 -3  -7 -1  -7 0  -7 1  -6 3  -5 5  -3 6  -1 7  0 7  32767 32767  7 0  7 1  6 4  5 7  4 8  3 9  0 12  -1 13  -3 14  -5 15  32767 32767  -7 0  -7 -1  -6 -4  -5 -7  -4 -8  -3 -9  0 -12  1 -13  3 -14  5 -15 ");
      tt->struct_vals[10].s = tdrpStrDup("va_icon");
      tt->struct_vals[11].s = tdrpStrDup("0 0  1 0  -1 0  0 0  0 -1  0 1  32767 32767  4 0  16 0  8 20  -8 20  -16 0  -4 0  32767 32767  4 1  15 1  7 19  -7 19  -15 1  -4 1  32767 32767  2 22  8 28  32767 32767  3 22  9 28  32767 32767  -2 22  -8 28  32767 32767  -3 22  -9 28  132767 32767  0 22  0 28 32767 32767  1 22  1 28 32767 32767  -1 22  -1 28 32767 32767");
      tt->struct_vals[12].s = tdrpStrDup("ds_icon");
      tt->struct_vals[13].s = tdrpStrDup("-6 6, -3 3, 0 0, 3 0, 6 3, 9 6, 9 9, 6 12, 3 15, 0 18, -3 21, -3 24, 0 27, 3 30, 6 30, 9 27, 12 24, 32767 32767, -8 17, 15 17, 32767 32767, -8 13 15 13, 32767 32767, 13 21, 18 15, 13 9");
      tt->struct_vals[14].s = tdrpStrDup("mtw_icon");
      tt->struct_vals[15].s = tdrpStrDup("0 0, 9 21, 18 0, 32767 32767, 17 12, 17 15, 20 18, 23 18, 26 15, 26 12, 29 9, 32 9, 35 12, 35 18");
      tt->struct_vals[16].s = tdrpStrDup("ifr_icon");
      tt->struct_vals[17].s = tdrpStrDup("0 0, -3 3, -3 21, 0 24, 32767 32767, 15 24, 18 21, 18 3, 15 0, 32767 32767, -3 18, 18 18 32767 32767, -3 12, 18 12 32767 32767, -3 6, 18 6");
      tt->struct_vals[18].s = tdrpStrDup("mtn_obsc_icon");
      tt->struct_vals[19].s = tdrpStrDup("0 0, 15 30, 30 0, 0 0, 32767 32767, 0 15, 30 15, 32767 32767, 0 30, 30 30, 32767 32767");
      tt->struct_vals[20].s = tdrpStrDup("gr_icon");
      tt->struct_vals[21].s = tdrpStrDup("0 0, -6 12, 6 12, 0 0, 32767 32767, -6 15, 0 24, 6 15, -6 15, 32767 32767");
      tt->struct_vals[22].s = tdrpStrDup("overcast_icon");
      tt->struct_vals[23].s = tdrpStrDup("0 10,  4 9,  6 8,  8 6,  9 4,  10 0,  9 -4,  8 -6,  6 -8,  4 -9,  0 -10,  -4 -9,  -6 -8,  -8 -6,  -9 -4,  -10 0,  -9 4,  -8 6,  -6 8,  -4 9,  0  10, 32767 32767, -4 9, 4 9,  32767 32767, -6 8, 6 8,  32767 32767, -7 7, 7 7,  32767 32767, -8 6, 8 6,  32767 32767, -8 5, 8 5,  32767 32767, -9 4, 9 4,  32767 32767, -9 3, 9 3,  32767 32767, -9 2, 9 2,  32767 32767, -10 1, 10 1,  32767 32767, -10 0, 10 0,  32767 32767, -10 -1, 10 -1,  32767 32767, -9 -2, 9 -2,  32767 32767, -9 -3, 9 -3,  32767 32767, -9 -4, 9 -4,  32767 32767, -8 -5, 8 -5,  32767 32767, -8 -6, 8 -6,  32767 32767, -7 -7, 7 -7,  32767 32767, -6 -8, 6 -8,  32767 32767, -4 -9, 4 -9,  32767 32767 ");
      tt->struct_vals[24].s = tdrpStrDup("rdoact_icon");
      tt->struct_vals[25].s = tdrpStrDup("-9 11 -8 11 32767 32767 7 11 8 11 32767 32767 -10 10 -7 10 32767 32767 6 10 9 10 32767 32767 -11 9 -6 9 32767 32767 5 9 10 9 32767 32767 -11 8 -6 8 32767 32767 5 8 10 8 32767 32767 -12 7 -5 7 32767 32767 4 7 11 7 32767 32767 -13 6 -5 6 32767 32767 4 6 12 6 32767 32767 -13 5 -4 5 32767 32767 3 5 11 5 32767 32767 -13 4 -3 4 32767 32767 2 4 12 4 32767 32767 -14 3 -3 3 32767 32767 2 3 13 3 32767 32767 -14 2 -4 2 32767 32767 3 2 13 2 32767 32767 -14 1 -5 1 32767 32767 4 1 13 1 32767 32767 -3 -5 2 -5 32767 32767 -3 -6 2 -6 32767 32767 -4 -7 3 -7 32767 32767 -4 -8 3 -8 32767 32767 -5 -9 4 -9 32767 32767 -5 -10 4 -10 32767 32767 -6 -11 5 -11 32767 32767 -7 -12 6 -12 32767 32767 -7 -13 6 -13 32767 32767 -4 -14 3 -14 32767 32767 -1 2 0 2 32767 32767  -2 1 1 1 32767 32767 -3 0 2 0 32767 32767 -3 -1 2 -1 32767 32767 2 -2 1 -2 32767 32767 -1 -3 0 -3 32767 32767");
      tt->struct_vals[26].s = tdrpStrDup("unknown");
      tt->struct_vals[27].s = tdrpStrDup("-6 6 -6 8 -4 10 -2 12 2 12 4 10 6 8 8 4 4 2 2 0 0 0 0 -5 32767 32767 -2 -10 0 -10 0 -12 -2 -12 -2 -10");
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("FORECAST AND OUTLOOK DETAILS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'forecast_arrow_head_len_pixels'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("forecast_arrow_head_len_pixels");
    tt->descr = tdrpStrDup("Length of forecast arrow head length, in pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &forecast_arrow_head_len_pixels - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'forecast_arrow_head_half_angle'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("forecast_arrow_head_half_angle");
    tt->descr = tdrpStrDup("Half angle of forecast arrow head (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &forecast_arrow_head_half_angle - &_start_;
    tt->single_val.d = 15;
    tt++;
    
    // Parameter 'outlook_arrow_head_len_pixels'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("outlook_arrow_head_len_pixels");
    tt->descr = tdrpStrDup("Length of outlook arrow head length, in pixels.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &outlook_arrow_head_len_pixels - &_start_;
    tt->single_val.i = 20;
    tt++;
    
    // Parameter 'outlook_arrow_head_half_angle'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("outlook_arrow_head_half_angle");
    tt->descr = tdrpStrDup("Half angle of outlook arrow head (deg).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &outlook_arrow_head_half_angle - &_start_;
    tt->single_val.d = 15;
    tt++;
    
    // Parameter 'render_forecast_and_outlook_times'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("render_forecast_and_outlook_times");
    tt->descr = tdrpStrDup("Render time for forecasts and outlooks.");
    tt->help = tdrpStrDup("If true, times are rendered next to forecasts and outlooks. The observed time is also rendered if a forecast and/or outlook exists.");
    tt->val_offset = (char *) &render_forecast_and_outlook_times - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'label_forecast_and_outlook_times'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("label_forecast_and_outlook_times");
    tt->descr = tdrpStrDup("Label times for forecasts and outlooks.");
    tt->help = tdrpStrDup("If true, the label OBS, FCST and OTLK will be placed next to the times for the forecasts and outlooks. Only active if 'render_forecast_and_outlook_times' is true.");
    tt->val_offset = (char *) &label_forecast_and_outlook_times - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("HIDDEN TEXT and POLYGONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'activate_hidden_text'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("activate_hidden_text");
    tt->descr = tdrpStrDup("Option to activate hidden text.");
    tt->help = tdrpStrDup("If true, the full sigmet or airmet message will be sent to the client, marked as hidden text. This text may then be used by the client for any purpose, such as pop-up text in response to a mouse event near the product location.");
    tt->val_offset = (char *) &activate_hidden_text - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'hidden_text_x_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_x_offset");
    tt->descr = tdrpStrDup("X offset for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_x_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'hidden_text_y_offset'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_y_offset");
    tt->descr = tdrpStrDup("Y offset for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_y_offset - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'hidden_text_font_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_font_size");
    tt->descr = tdrpStrDup("Font size for hidden text (pixels).");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_font_size - &_start_;
    tt->single_val.i = 10;
    tt++;
    
    // Parameter 'hidden_text_vert_align'
    // ctype is '_vert_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_vert_align");
    tt->descr = tdrpStrDup("Vertical alignment hidden text.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_vert_align - &_start_;
    tt->enum_def.name = tdrpStrDup("vert_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("VERT_ALIGN_TOP");
      tt->enum_def.fields[0].val = VERT_ALIGN_TOP;
      tt->enum_def.fields[1].name = tdrpStrDup("VERT_ALIGN_CENTER");
      tt->enum_def.fields[1].val = VERT_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("VERT_ALIGN_BOTTOM");
      tt->enum_def.fields[2].val = VERT_ALIGN_BOTTOM;
    tt->single_val.e = VERT_ALIGN_CENTER;
    tt++;
    
    // Parameter 'hidden_text_horiz_align'
    // ctype is '_horiz_align_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_horiz_align");
    tt->descr = tdrpStrDup("Horizontal alignment for hidden text.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hidden_text_horiz_align - &_start_;
    tt->enum_def.name = tdrpStrDup("horiz_align_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("HORIZ_ALIGN_LEFT");
      tt->enum_def.fields[0].val = HORIZ_ALIGN_LEFT;
      tt->enum_def.fields[1].name = tdrpStrDup("HORIZ_ALIGN_CENTER");
      tt->enum_def.fields[1].val = HORIZ_ALIGN_CENTER;
      tt->enum_def.fields[2].name = tdrpStrDup("HORIZ_ALIGN_RIGHT");
      tt->enum_def.fields[2].val = HORIZ_ALIGN_RIGHT;
    tt->single_val.e = HORIZ_ALIGN_CENTER;
    tt++;
    
    // Parameter 'hidden_text_foreground_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_foreground_color");
    tt->descr = tdrpStrDup("Hidden text background color.");
    tt->help = tdrpStrDup("Set to empty string to use SIGMET product color.");
    tt->val_offset = (char *) &hidden_text_foreground_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'hidden_text_background_color'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("hidden_text_background_color");
    tt->descr = tdrpStrDup("Hidden text background color.");
    tt->help = tdrpStrDup("Set to empty string to use display background color.");
    tt->val_offset = (char *) &hidden_text_background_color - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'hidden_polygons_alpha_value'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("hidden_polygons_alpha_value");
    tt->descr = tdrpStrDup("Alpha value for hidden polygons.");
    tt->help = tdrpStrDup("1.0 = solid, 0.0 = completely transparent.");
    tt->val_offset = (char *) &hidden_polygons_alpha_value - &_start_;
    tt->single_val.d = 0.4;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
