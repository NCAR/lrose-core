/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program XpolScanControl
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("XpolScanControl controls the XPOL antenna. It creates PAXI files and uploads them to the DRX. From one FMQ it reads the data coming from the DRX, to monitor the antenna behavior. It then adds the scan information as appropriate, and writes the modified data to an output FMQ.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA");
      tt->enum_def.fields[3].val = DEBUG_EXTRA;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'register_with_procmap'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("register_with_procmap");
    tt->descr = tdrpStrDup("Option to register with the process mapper.");
    tt->help = tdrpStrDup("If true, this application will try to register with procmap once per minute. (If unable to do so, no error occurs.)");
    tt->val_offset = (char *) &register_with_procmap - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("FMQ INPUT - file message queues");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_fmq_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_fmq_path");
    tt->descr = tdrpStrDup("Name of input fmq.");
    tt->help = tdrpStrDup("Data in this FMQ does not contain scan information.");
    tt->val_offset = (char *) &input_fmq_path - &_start_;
    tt->single_val.s = tdrpStrDup("$(DATA_DIR)/fmq/moments/xpol_raw");
    tt++;
    
    // Parameter 'start_reading_at_fmq_start'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("start_reading_at_fmq_start");
    tt->descr = tdrpStrDup("Option to start reading at beginning of input FMQs.");
    tt->help = tdrpStrDup("Normally, we start reading at the end of the queues. For debugging, however, it is sometimes helpful to start at the beginning of the queues.");
    tt->val_offset = (char *) &start_reading_at_fmq_start - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("FMQ OUTPUT for modified data");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fmq_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_path");
    tt->descr = tdrpStrDup("Name of output fmq.");
    tt->help = tdrpStrDup("This contains a duplicate of the input data, but with scan information attached.");
    tt->val_offset = (char *) &output_fmq_path - &_start_;
    tt->single_val.s = tdrpStrDup("$(DATA_DIR)/fmq/moments/xpol_with_scan_info");
    tt++;
    
    // Parameter 'set_output_size_equal_to_input_size'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_output_size_equal_to_input_size");
    tt->descr = tdrpStrDup("Option to set the FMQ size equal to the input FMQ.");
    tt->help = tdrpStrDup("If FALSE, size will be set from output_fmq_size and output_fmq_nslots.");
    tt->val_offset = (char *) &set_output_size_equal_to_input_size - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'output_fmq_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_size");
    tt->descr = tdrpStrDup("Size of output FMQ, in bytes.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &output_fmq_size - &_start_;
    tt->single_val.i = 50000000;
    tt++;
    
    // Parameter 'output_fmq_nslots'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_nslots");
    tt->descr = tdrpStrDup("Number of slots in output FMQ.");
    tt->help = tdrpStrDup("The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.");
    tt->val_offset = (char *) &output_fmq_nslots - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'write_blocking'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_blocking");
    tt->descr = tdrpStrDup("Option to set up the FMQ as blocking.");
    tt->help = tdrpStrDup("If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ becomes full, Test2Dsr will then block until there is space for more data.");
    tt->val_offset = (char *) &write_blocking - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'data_mapper_report_interval'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("data_mapper_report_interval");
    tt->descr = tdrpStrDup("Number of seconds between reports to DataMapper.");
    tt->help = tdrpStrDup("If > 0, the program will register with the DataMapper when the output FMQ is written to. If <= 0, registration will not be performed.");
    tt->val_offset = (char *) &data_mapper_report_interval - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("DRX PROCESSING OPTIONS");
    tt->comment_text = tdrpStrDup("Use this section to set up processing modes. These are then referred to in the scanning section below.");
    tt++;
    
    // Parameter 'drx_conf'
    // ctype is '_drx_conf_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("drx_conf");
    tt->descr = tdrpStrDup("Processing options for the digital receiver.");
    tt->help = tdrpStrDup("Generally the filter bandwidth should be set to the reciprocal of the pulse length, expressed in seconds. For example, if PULSE_LEN_75m is used, this translates to a 0.5 microsecond pulse, so a bandwidth of 2 mHz should be specified. If the pulse width is 30m, the filter should be set to 5 mHz. To keep the duty cycle below 0.1%, make sure the group interval is set appropriately.");
    tt->array_offset = (char *) &_drx_conf - &_start_;
    tt->array_n_offset = (char *) &drx_conf_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(drx_conf_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("drx_conf_t");
    tt->struct_def.nfields = 12;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("conf_id");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_drx_conf->conf_id - (char *) _drx_conf;
      tt->struct_def.fields[1].ftype = tdrpStrDup("proc_mode_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("proc_mode");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_drx_conf->proc_mode - (char *) _drx_conf;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("proc_mode_t");
        tt->struct_def.fields[1].enum_def.nfields = 4;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("PROC_MODE_PULSE_PAIR");
        tt->struct_def.fields[1].enum_def.fields[0].val = PROC_MODE_PULSE_PAIR;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("PROC_MODE_PULSE_PAIR_SUM_POWERS");
        tt->struct_def.fields[1].enum_def.fields[1].val = PROC_MODE_PULSE_PAIR_SUM_POWERS;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("PROC_MODE_DUAL_PULSE_PAIR");
        tt->struct_def.fields[1].enum_def.fields[2].val = PROC_MODE_DUAL_PULSE_PAIR;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("PROC_MODE_DUAL_PULSE_PAIR_SUM_POWERS");
        tt->struct_def.fields[1].enum_def.fields[3].val = PROC_MODE_DUAL_PULSE_PAIR_SUM_POWERS;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("pri_1_usec");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_drx_conf->pri_1_usec - (char *) _drx_conf;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("pri_2_usec");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_drx_conf->pri_2_usec - (char *) _drx_conf;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("group_interval_usec");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_drx_conf->group_interval_usec - (char *) _drx_conf;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("n_gates");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_drx_conf->n_gates - (char *) _drx_conf;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("clutter_n_ave");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_drx_conf->clutter_n_ave - (char *) _drx_conf;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("post_n_ave");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_drx_conf->post_n_ave - (char *) _drx_conf;
      tt->struct_def.fields[8].ftype = tdrpStrDup("range_res_t");
      tt->struct_def.fields[8].fname = tdrpStrDup("range_res");
      tt->struct_def.fields[8].ptype = ENUM_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_drx_conf->range_res - (char *) _drx_conf;
        tt->struct_def.fields[8].enum_def.name = tdrpStrDup("range_res_t");
        tt->struct_def.fields[8].enum_def.nfields = 5;
        tt->struct_def.fields[8].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[8].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[8].enum_def.fields[0].name = tdrpStrDup("RANGE_RES_15_m");
        tt->struct_def.fields[8].enum_def.fields[0].val = RANGE_RES_15_m;
        tt->struct_def.fields[8].enum_def.fields[1].name = tdrpStrDup("RANGE_RES_30_m");
        tt->struct_def.fields[8].enum_def.fields[1].val = RANGE_RES_30_m;
        tt->struct_def.fields[8].enum_def.fields[2].name = tdrpStrDup("RANGE_RES_75_m");
        tt->struct_def.fields[8].enum_def.fields[2].val = RANGE_RES_75_m;
        tt->struct_def.fields[8].enum_def.fields[3].name = tdrpStrDup("RANGE_RES_105_m");
        tt->struct_def.fields[8].enum_def.fields[3].val = RANGE_RES_105_m;
        tt->struct_def.fields[8].enum_def.fields[4].name = tdrpStrDup("RANGE_RES_150_m");
        tt->struct_def.fields[8].enum_def.fields[4].val = RANGE_RES_150_m;
      tt->struct_def.fields[9].ftype = tdrpStrDup("pulse_len_t");
      tt->struct_def.fields[9].fname = tdrpStrDup("pulse_len");
      tt->struct_def.fields[9].ptype = ENUM_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_drx_conf->pulse_len - (char *) _drx_conf;
        tt->struct_def.fields[9].enum_def.name = tdrpStrDup("pulse_len_t");
        tt->struct_def.fields[9].enum_def.nfields = 5;
        tt->struct_def.fields[9].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[9].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[9].enum_def.fields[0].name = tdrpStrDup("PULSE_LEN_7pt5_m");
        tt->struct_def.fields[9].enum_def.fields[0].val = PULSE_LEN_7pt5_m;
        tt->struct_def.fields[9].enum_def.fields[1].name = tdrpStrDup("PULSE_LEN_15_m");
        tt->struct_def.fields[9].enum_def.fields[1].val = PULSE_LEN_15_m;
        tt->struct_def.fields[9].enum_def.fields[2].name = tdrpStrDup("PULSE_LEN_30_m");
        tt->struct_def.fields[9].enum_def.fields[2].val = PULSE_LEN_30_m;
        tt->struct_def.fields[9].enum_def.fields[3].name = tdrpStrDup("PULSE_LEN_45_m");
        tt->struct_def.fields[9].enum_def.fields[3].val = PULSE_LEN_45_m;
        tt->struct_def.fields[9].enum_def.fields[4].name = tdrpStrDup("PULSE_LEN_75_m");
        tt->struct_def.fields[9].enum_def.fields[4].val = PULSE_LEN_75_m;
      tt->struct_def.fields[10].ftype = tdrpStrDup("filter_bw_t");
      tt->struct_def.fields[10].fname = tdrpStrDup("filter_bw");
      tt->struct_def.fields[10].ptype = ENUM_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_drx_conf->filter_bw - (char *) _drx_conf;
        tt->struct_def.fields[10].enum_def.name = tdrpStrDup("filter_bw_t");
        tt->struct_def.fields[10].enum_def.nfields = 6;
        tt->struct_def.fields[10].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[10].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[10].enum_def.fields[0].name = tdrpStrDup("FILTER_BW_1_mhz");
        tt->struct_def.fields[10].enum_def.fields[0].val = FILTER_BW_1_mhz;
        tt->struct_def.fields[10].enum_def.fields[1].name = tdrpStrDup("FILTER_BW_1pt5_mhz");
        tt->struct_def.fields[10].enum_def.fields[1].val = FILTER_BW_1pt5_mhz;
        tt->struct_def.fields[10].enum_def.fields[2].name = tdrpStrDup("FILTER_BW_2_mhz");
        tt->struct_def.fields[10].enum_def.fields[2].val = FILTER_BW_2_mhz;
        tt->struct_def.fields[10].enum_def.fields[3].name = tdrpStrDup("FILTER_BW_5_mhz");
        tt->struct_def.fields[10].enum_def.fields[3].val = FILTER_BW_5_mhz;
        tt->struct_def.fields[10].enum_def.fields[4].name = tdrpStrDup("FILTER_BW_10_mhz");
        tt->struct_def.fields[10].enum_def.fields[4].val = FILTER_BW_10_mhz;
        tt->struct_def.fields[10].enum_def.fields[5].name = tdrpStrDup("FILTER_BW_20_mhz");
        tt->struct_def.fields[10].enum_def.fields[5].val = FILTER_BW_20_mhz;
      tt->struct_def.fields[11].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[11].fname = tdrpStrDup("use_clutter_filter");
      tt->struct_def.fields[11].ptype = BOOL_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_drx_conf->use_clutter_filter - (char *) _drx_conf;
    tt->n_struct_vals = 24;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 0;
      tt->struct_vals[1].e = PROC_MODE_PULSE_PAIR;
      tt->struct_vals[2].d = 1000;
      tt->struct_vals[3].d = 1000;
      tt->struct_vals[4].d = 2000;
      tt->struct_vals[5].i = 800;
      tt->struct_vals[6].i = 32;
      tt->struct_vals[7].i = 1;
      tt->struct_vals[8].e = RANGE_RES_75_m;
      tt->struct_vals[9].e = PULSE_LEN_75_m;
      tt->struct_vals[10].e = FILTER_BW_2_mhz;
      tt->struct_vals[11].b = pFALSE;
      tt->struct_vals[12].i = 1;
      tt->struct_vals[13].e = PROC_MODE_DUAL_PULSE_PAIR;
      tt->struct_vals[14].d = 1000;
      tt->struct_vals[15].d = 1500;
      tt->struct_vals[16].d = 2000;
      tt->struct_vals[17].i = 800;
      tt->struct_vals[18].i = 32;
      tt->struct_vals[19].i = 1;
      tt->struct_vals[20].e = RANGE_RES_75_m;
      tt->struct_vals[21].e = PULSE_LEN_75_m;
      tt->struct_vals[22].e = FILTER_BW_2_mhz;
      tt->struct_vals[23].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("SCAN DETAILS");
    tt->comment_text = tdrpStrDup("This is a sequence of scans to be run one after the other, in order. After all scans have been run once, the sequence is repeated.");
    tt++;
    
    // Parameter 'scan_sequence'
    // ctype is '_scan_params_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("scan_sequence");
    tt->descr = tdrpStrDup("Scan sequence.");
    tt->help = tdrpStrDup("\n\nSets up the scan sequence. Each entry in the sequence is run in order. When the end of the sequence is reached, the entire sequence is repeated. \n\naz_rate_deg_per_sec and el_rate_deg_per_sec apply to all scan modes except for IDLE.\n\nnsecs_wait applies to POINTING and IDLE modes only.\n\nThe number of sweeps (n_sweeps) applies to VERTICAL_POINTING mode only.\n\nPOINTING: move to (start_az_deg, start_el_deg) and point for nsecs_wait.\n\nSURVEILLANCE: starts at (start_az_deg, start_el_deg). Rotation is clockwise. Lowest elevation is start_el_deg, each sweep increases by delta_el_deg until end_el_deg is reached. \n\nSECTOR: starts at (start_az_deg, start_el_deg). Sweeps clockwise to end_az_deg and then back again. Lowest elevation is start_el_deg, each sweep increases by delta_el_deg until end_el_deg is reached. \n\nRHI: starts at (start_az_deg, start_el_deg). Sweeps up to end_el_deg and then back down again. First azimuth is at start_az_deg, each sweep increases by delta_az_deg until end_az_deg is reached. \n\nVERTICAL_POINTING: starts at (start_az_defg, start_el_deg). Elevation stays fixed. Rotation is clockwise. Each sweep is 370 degrees in azimuth arc. A volume is made up of n_sweeps.\n\nSUNSCAN: starts at start_az_deg to left of sun and start_el_deg below sun. Sweeps clockwise across sun to end_az_deg and then back again. Each sweep increases by delta_el_deg until end_el_deg above sun is reached.\n\nSUNSCAN_RHI: starts at start_az_deg to left of sun and start_el_deg below sun. Sweeps up across sun to end_az_deg and then back down again. Each sweep increases by delta_az_deg until end_az_deg reached.\n\nIDLE: stop at the current antenna position, and wait for nsecs_wait.");
    tt->array_offset = (char *) &_scan_sequence - &_start_;
    tt->array_n_offset = (char *) &scan_sequence_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(scan_params_t);
    tt->array_n = 6;
    tt->struct_def.name = tdrpStrDup("scan_params_t");
    tt->struct_def.nfields = 13;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("drx_conf_id");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_scan_sequence->drx_conf_id - (char *) _scan_sequence;
      tt->struct_def.fields[1].ftype = tdrpStrDup("scan_mode_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("scan_mode");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_scan_sequence->scan_mode - (char *) _scan_sequence;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("scan_mode_t");
        tt->struct_def.fields[1].enum_def.nfields = 8;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("SCAN_MODE_SECTOR");
        tt->struct_def.fields[1].enum_def.fields[0].val = SCAN_MODE_SECTOR;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("SCAN_MODE_RHI");
        tt->struct_def.fields[1].enum_def.fields[1].val = SCAN_MODE_RHI;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("SCAN_MODE_VERTICAL_POINTING");
        tt->struct_def.fields[1].enum_def.fields[2].val = SCAN_MODE_VERTICAL_POINTING;
        tt->struct_def.fields[1].enum_def.fields[3].name = tdrpStrDup("SCAN_MODE_IDLE");
        tt->struct_def.fields[1].enum_def.fields[3].val = SCAN_MODE_IDLE;
        tt->struct_def.fields[1].enum_def.fields[4].name = tdrpStrDup("SCAN_MODE_SURVEILLANCE");
        tt->struct_def.fields[1].enum_def.fields[4].val = SCAN_MODE_SURVEILLANCE;
        tt->struct_def.fields[1].enum_def.fields[5].name = tdrpStrDup("SCAN_MODE_SUNSCAN");
        tt->struct_def.fields[1].enum_def.fields[5].val = SCAN_MODE_SUNSCAN;
        tt->struct_def.fields[1].enum_def.fields[6].name = tdrpStrDup("SCAN_MODE_POINTING");
        tt->struct_def.fields[1].enum_def.fields[6].val = SCAN_MODE_POINTING;
        tt->struct_def.fields[1].enum_def.fields[7].name = tdrpStrDup("SCAN_MODE_SUNSCAN_RHI");
        tt->struct_def.fields[1].enum_def.fields[7].val = SCAN_MODE_SUNSCAN_RHI;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("az_rate_deg_per_sec");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_scan_sequence->az_rate_deg_per_sec - (char *) _scan_sequence;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("el_rate_deg_per_sec");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_scan_sequence->el_rate_deg_per_sec - (char *) _scan_sequence;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("start_az_deg");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_scan_sequence->start_az_deg - (char *) _scan_sequence;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("end_az_deg");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_scan_sequence->end_az_deg - (char *) _scan_sequence;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("delta_az_deg");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_scan_sequence->delta_az_deg - (char *) _scan_sequence;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("start_el_deg");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_scan_sequence->start_el_deg - (char *) _scan_sequence;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("end_el_deg");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &_scan_sequence->end_el_deg - (char *) _scan_sequence;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("delta_el_deg");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &_scan_sequence->delta_el_deg - (char *) _scan_sequence;
      tt->struct_def.fields[10].ftype = tdrpStrDup("int");
      tt->struct_def.fields[10].fname = tdrpStrDup("n_sweeps");
      tt->struct_def.fields[10].ptype = INT_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &_scan_sequence->n_sweeps - (char *) _scan_sequence;
      tt->struct_def.fields[11].ftype = tdrpStrDup("double");
      tt->struct_def.fields[11].fname = tdrpStrDup("transition_tolerance_deg");
      tt->struct_def.fields[11].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &_scan_sequence->transition_tolerance_deg - (char *) _scan_sequence;
      tt->struct_def.fields[12].ftype = tdrpStrDup("double");
      tt->struct_def.fields[12].fname = tdrpStrDup("nsecs_wait");
      tt->struct_def.fields[12].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &_scan_sequence->nsecs_wait - (char *) _scan_sequence;
    tt->n_struct_vals = 78;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 0;
      tt->struct_vals[1].e = SCAN_MODE_POINTING;
      tt->struct_vals[2].d = 10;
      tt->struct_vals[3].d = 10;
      tt->struct_vals[4].d = 0;
      tt->struct_vals[5].d = 20;
      tt->struct_vals[6].d = 1;
      tt->struct_vals[7].d = 45;
      tt->struct_vals[8].d = 10;
      tt->struct_vals[9].d = 1;
      tt->struct_vals[10].i = 1;
      tt->struct_vals[11].d = 0.1;
      tt->struct_vals[12].d = 10;
      tt->struct_vals[13].i = 1;
      tt->struct_vals[14].e = SCAN_MODE_SURVEILLANCE;
      tt->struct_vals[15].d = 20;
      tt->struct_vals[16].d = 5;
      tt->struct_vals[17].d = 0;
      tt->struct_vals[18].d = 20;
      tt->struct_vals[19].d = 1;
      tt->struct_vals[20].d = 1;
      tt->struct_vals[21].d = 10;
      tt->struct_vals[22].d = 1;
      tt->struct_vals[23].i = 1;
      tt->struct_vals[24].d = 0.35;
      tt->struct_vals[25].d = 0;
      tt->struct_vals[26].i = 1;
      tt->struct_vals[27].e = SCAN_MODE_SECTOR;
      tt->struct_vals[28].d = 10;
      tt->struct_vals[29].d = 5;
      tt->struct_vals[30].d = 315;
      tt->struct_vals[31].d = 45;
      tt->struct_vals[32].d = 1;
      tt->struct_vals[33].d = 1;
      tt->struct_vals[34].d = 10;
      tt->struct_vals[35].d = 1;
      tt->struct_vals[36].i = 1;
      tt->struct_vals[37].d = 0.2;
      tt->struct_vals[38].d = 0;
      tt->struct_vals[39].i = 1;
      tt->struct_vals[40].e = SCAN_MODE_RHI;
      tt->struct_vals[41].d = 10;
      tt->struct_vals[42].d = 10;
      tt->struct_vals[43].d = 90;
      tt->struct_vals[44].d = 110;
      tt->struct_vals[45].d = 1;
      tt->struct_vals[46].d = 0;
      tt->struct_vals[47].d = 30;
      tt->struct_vals[48].d = 1;
      tt->struct_vals[49].i = 1;
      tt->struct_vals[50].d = 0.2;
      tt->struct_vals[51].d = 0;
      tt->struct_vals[52].i = 0;
      tt->struct_vals[53].e = SCAN_MODE_VERTICAL_POINTING;
      tt->struct_vals[54].d = 6;
      tt->struct_vals[55].d = 5;
      tt->struct_vals[56].d = 0;
      tt->struct_vals[57].d = 0;
      tt->struct_vals[58].d = 1;
      tt->struct_vals[59].d = 89;
      tt->struct_vals[60].d = 90;
      tt->struct_vals[61].d = 0.2;
      tt->struct_vals[62].i = 1;
      tt->struct_vals[63].d = 0.2;
      tt->struct_vals[64].d = 0;
      tt->struct_vals[65].i = 0;
      tt->struct_vals[66].e = SCAN_MODE_SUNSCAN;
      tt->struct_vals[67].d = 1;
      tt->struct_vals[68].d = 1;
      tt->struct_vals[69].d = -5;
      tt->struct_vals[70].d = 5;
      tt->struct_vals[71].d = 1;
      tt->struct_vals[72].d = -1.5;
      tt->struct_vals[73].d = 1.5;
      tt->struct_vals[74].d = 0.1;
      tt->struct_vals[75].i = 1;
      tt->struct_vals[76].d = 0.1;
      tt->struct_vals[77].d = 0;
    tt++;
    
    // Parameter 'requested_angle_tolerance'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("requested_angle_tolerance");
    tt->descr = tdrpStrDup("Tolerance for checking a requested angle has been reached (deg).");
    tt->help = tdrpStrDup("We check the antenna angles against the requested values. This applies, for example, to pointing scans.");
    tt->val_offset = (char *) &requested_angle_tolerance - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'transition_angle_tolerance'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("transition_angle_tolerance");
    tt->descr = tdrpStrDup("Angle tolerance for flagging a beam in transition (deg).");
    tt->help = tdrpStrDup("We check the actual antenna angles against the nominal fixed angle for the scan. If the difference differs by more than tolerance, the beam will be flagged as in transition.");
    tt->val_offset = (char *) &transition_angle_tolerance - &_start_;
    tt->single_val.d = 0.2;
    tt++;
    
    // Parameter 'azimuth_correction_deg'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("azimuth_correction_deg");
    tt->descr = tdrpStrDup("Correction to raw azimuth to align data to True North (deg).");
    tt->help = tdrpStrDup("This value is ADDED to the raw azimuth to get the corrected value. Note that for the XPOL radar, the raw azimuth of the direction in which the trailer is pointing is 120 degrees.");
    tt->val_offset = (char *) &azimuth_correction_deg - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'sector_widen_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sector_widen_secs");
    tt->descr = tdrpStrDup("Widen a sector by this number of seconds.");
    tt->help = tdrpStrDup("In order to prevent transitions within the sector, we optionally widen the sector by a number of degrees equal to the specified time multiplied by the antenna azimuth rate.");
    tt->val_offset = (char *) &sector_widen_secs - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'rhi_widen_secs'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rhi_widen_secs");
    tt->descr = tdrpStrDup("Widen rhi elevation range by this number of seconds.");
    tt->help = tdrpStrDup("In order to prevent transitions within the rhi, we optionally widen the rhi vertical sector by a number of degrees equal to the specified time multiplied by the antenna elevation rate.");
    tt->val_offset = (char *) &rhi_widen_secs - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'default_antenna_speed'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("default_antenna_speed");
    tt->descr = tdrpStrDup("Antenna speed for normal moves (deg/sec).");
    tt->help = tdrpStrDup("This speed will be used to position the antenna to the start of each scan.");
    tt->val_offset = (char *) &default_antenna_speed - &_start_;
    tt->single_val.d = 15;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("WRITING PAXI SCRIPTS");
    tt->comment_text = tdrpStrDup("This program creates a PAXI file with commands for the relevant scan. This file is uploaded to the DRX server using a script. The script takes one argument, which is the path of the PAXI file.");
    tt++;
    
    // Parameter 'upload_paxi_script_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("upload_paxi_script_name");
    tt->descr = tdrpStrDup("Name of script to call to upload paxi file to server.");
    tt->help = tdrpStrDup("This should be in the path.");
    tt->val_offset = (char *) &upload_paxi_script_name - &_start_;
    tt->single_val.s = tdrpStrDup("run_paxcon");
    tt++;
    
    // Parameter 'paxi_file_path'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("paxi_file_path");
    tt->descr = tdrpStrDup("Path to paxi file to be uploaded.");
    tt->help = tdrpStrDup("This app writes the relevant commands to the paxi file, and then uploads it using the above script.");
    tt->val_offset = (char *) &paxi_file_path - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/paxi.txt");
    tt++;
    
    // Parameter 'run_script_in_background'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("run_script_in_background");
    tt->descr = tdrpStrDup("Option to run upload script in background.");
    tt->help = tdrpStrDup("If TRUE, the upload script will be run in the background. Therefore, the system call will return immediately. If FALSE, this app will register with procmap while waiting for the script to complete.");
    tt->val_offset = (char *) &run_script_in_background - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'terminate_script_if_hung'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("terminate_script_if_hung");
    tt->descr = tdrpStrDup("Option to terminate upload script if it hangs.");
    tt->help = tdrpStrDup("If TRUE, the script will be killed if it does not return within 'script_max_run_secs'.");
    tt->val_offset = (char *) &terminate_script_if_hung - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'script_max_run_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("script_max_run_secs");
    tt->descr = tdrpStrDup("Max time allowed for script - secs.");
    tt->help = tdrpStrDup("If 'terminate_script_if_hung' is TRUE, the script will be killed if it does not complete withing this number of secs.");
    tt->val_offset = (char *) &script_max_run_secs - &_start_;
    tt->single_val.i = 3600;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
