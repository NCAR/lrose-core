/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR (c) 1990 - 2016                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
//////////////////////////////////////////////////////////////////////
// parameter definitions for ProSensing2Dsr
//
// Mike Dixon, EOL, NCAR,
// P.O.Box 3000, Boulder, CO, USA, 80307-3000
//
// April 2012

commentdef {
  p_header = "Program name: ProSensing2Dsr";
  p_text = "ProSensing2Dsr reads radar data from the ProSensing xpold server over a socket and writes the data to a DsRadarQueue beam by beam. Mike Dixon, EOL, NCAR, Boulder, CO, USA.";
}

commentdef {
  p_header = "PROCESS CONTROL AND DEBUGGING";
}

typedef enum {
  DEBUG_OFF, DEBUG_NORM, DEBUG_VERBOSE, DEBUG_EXTRA
} debug_t;

paramdef enum debug_t {
  p_default = DEBUG_OFF;
  p_descr = "Debug option";
  p_help = "If set, debug messages will be printed appropriately.";
} debug;

paramdef string {
  p_default = "test";
  p_descr = "Process instance";
  p_help = "Used for registration with procmap.";
} instance;

commentdef {
  p_header = "DATA INPUT";
}

paramdef int {
  p_default = 3000;
  p_descr = "Port for xpold server.";
  p_help = "Communication with xpold is via TCP.";
} xpold_port;

paramdef string {
  p_default = "drx";
  p_descr = "Host running the xpold server.";
  p_help = "Communication with xpold is via TCP.";
} xpold_host;

commentdef {
  p_header = "RADAR CALIBRATION";
}

paramdef string {
  p_default = "./xpol_cal.xml";
  p_descr = "Path to XML file containing calibration.";
  p_help = "This will be read in at startup. Edit the file by hand to set the calibration values.";
} cal_file_xml_path;

commentdef {
  p_header = "RADAR PARAMETERS";
  p_text = "Some radar parameters may be included in the time series data. This section allows you to optionally override some of those values.";
};

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar name.";
  p_help = "If true, the name in this file will be used. If not, the name in the time series data will be used.";
} override_radar_name;

paramdef string {
  p_default = "XPOL";
  p_descr = "Name of the radar.";
  p_help = "See 'override_radar_name'.";
} radar_name;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the radar location.";
  p_help = "If true, the location in this file will be used. If not, the location in the time series data will be used.";
} override_radar_location;

paramdef double {
  p_default = 39.93208;
  p_descr = "Radar latitude (deg).";
  p_help = "See override_radar_location.";
} radar_latitude_deg;

paramdef double {
  p_default = -105.18175;
  p_descr = "Radar longitude (deg).";
  p_help = "See override_radar_location.";
} radar_longitude_deg;

paramdef double {
  p_default = 1742;
  p_descr = "Radar altitude msl (meters).";
  p_help = "See override_radar_location.";
} radar_altitude_meters;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override the azimuth offset from the server.";
  p_help = "The azimuth_offset is the offset between the actual pointing azimuth of the radar and TN. It should be set by the server and come though in the data. If this is not working properly, you can override the offset by setting this to true and also setting azimuth_offset_deg appropriately.";
} override_azimuth_offset;

paramdef double {
  p_default = 240.0;
  p_descr = "Azimuth offset (deg).";
  p_help = "See override_azimuth_offset.";
} azimuth_offset_deg;

commentdef {
  p_header = "DATA OUTPUT";
}

paramdef string {
  p_default = "fmq/rdas";
  p_descr = "Output URL for DSR radar data FMQ.";
  p_help = "This program outputs beam-by-beam data to a file message queue (FMQ). This is the URL for that queue. It is of the form 'fmqp:://host::dir/name'. If the output is to the local host you can use just 'dir/name'.";
} output_url;

paramdef boolean {
  p_default = false;
  p_descr = "Option to block on write when the radar queue fills up.";
  p_help = "If false, the program writes data to the output queue without regard to whether the reader is keeping up. If the FMQ fills without being read it will overflow and overwrite data which has not been read. This is the normal mode for REALTIME operations. If true, the program will not overwrite data in the queue which has not been read by the reader. In this mode there should be only one reader. If you need to service more than one reader, use Fmq2Fmq in write blocking mode with multiple output urls to multiplex the queue.";
} write_blocking;

paramdef boolean {
  p_default = false;
  p_descr = "Option to compress output infor FMQ.";
  p_help = "If compression is on, this increases the amount of data you can store in the output FMQ before overflow. However, this causes increased CPU load.";
} output_compression;

paramdef int {
  p_default = 10000;
  p_descr = "Number of slots in output FMQ.";
} output_n_slots;

paramdef int {
  p_default = 10000000;
  p_descr = "Size of buffer in output FMQ.";
} output_buf_size;

paramdef boolean {
  p_default = false;
  p_descr = "Option to override data time with current time.";
  p_help = "If true, the data will be time-stamped with the current time set on the host computer.";
} override_time;

