#!/usr/bin/perl
#
# Retrieve special RUC2 binary files from the Forecast Systems Lab (FSL)
# experimental FTP server.  Note that this is not an anonymous FTP server
# so you must get a login from FSL before you can retrieve any data.
# 
# Based on rucRetrieveExp.
#
# This must be run in a cron, instead of using the auto-restarter.
# The cron should be set to run this script for every model time,
# but should allow for a delay in the time it takes from the model
# time for the file to appear on the ftp site.  In other words,
# if we are looking for ruc files with a model time of 0Z, cron
# should fire off this script at 0Z + $ModelDelay.
#

########################################################
# Includes
########################################################
use Net::FTP;
use Time::Local;
use Env qw( RAP_LIB_DIR );
use Env qw( RAP_SHARED_LIB_DIR );
use lib "$RAP_SHARED_LIB_DIR/perl5/";
use lib "$RAP_LIB_DIR/perl5/";
use Toolsa;
 
#######################################################
# Misc.
#######################################################
( $prog = $0 ) =~ s%.*/%%;               # Determine program basename.
$| = 1;                                  # Unbuffer standard output.
umask 002;                               # Set file permissions.

#######################################################
# Global variables
#######################################################
$rapDataDir = $ENV{'RAP_DATA_DIR'};
$ftpTimeout = 240;                       # Time to allow for single file transfer
$defaultRegInterval = 120;               # Expected Heartbeat rate in seconds.
$sysTimeout = 10;                        # Timeout for system calls


#############################################################
# Command line defaults
#############################################################
use Getopt::Long;
use Env;
use Cwd;
Env::import();

sub badArg;
sub translateDataDir;
sub verifyDataDir;

$ftpHost = "eftp.fsl.noaa.gov";          # The Experimental FSL FTP server's domain name.
$user = "anonymous";                     # The remote username.
$pass = "rehak\@ucar.edu";               # The remote password.
$remoteDir = "20kmruc/bckp_pdf";           # The remote directory.
$remoteBasename = "bckpcnpdf";            # The remote file basename

$OutputDir = "$rapDataDir/other/ruc/hybrid";  # Local data directory.
$TmpDir    = "$OutputDir/.$prog.tmp";         # Local temporary directory.
$Instance  = "test";                          # Instance
$OverWrite = 0;                               # Do not overwrite existing files
@ModelTimes = ( 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 );
@ForecastTimes = ( 0,3 );
$ModelDelay = 0 * 60;
$ModelWaitTime = 60 * 2;
$ModelNumTries = 2;
$MoveWaitTime = 1 * 60; 
$UpdateFreq = 1 * 3600; 
$RapDirStruct = 1;

#############################################################
# Save the usage to print to the user if there is a problem
#############################################################
$usage =
    "\nrucRetrieveBin is used for retrieving RUC binary datasets from\n" .
    "an FTP site.  These binary files contain RUC intermediate fields that\n" .
    "are not included in the final RUC GRIB files.  The binary files are\n" .
    "converted to MDV using RucBin2Mdv.  The datasets on the experimental\n" .
    "site are assumed to be located in the FTP directory specified on the\n" .
    "command line using the following naming convention:\n" .
    "\n" .
    "      FILENAME.YYJJJHHFF\n" .
    "\n" .
    "where:\n" .
    "\n" .
    "     FILENAME = name of file, usually indicating included fields\n" .
    "     YY = last 2 digits of year\n" .
    "     JJJ = Julian day (10 July is 191)\n" .
    "     HH = model init hour (UTC)\n" .
    "     FF = model fcst length (h)\n" .
    "\n" .
    "Usage: $prog [-h] [-cdfghilmnorstuw]\n" .
    "   -a  --aa                         : Use for non Rap directory structure output\n" .
    "   -b  --basename <file basename> : Basename of file on FTP site\n" .
    "   -c  --checkDataWait <num seconds>  : Wait between checks for data\n" .
    "   -d  --debug                    : Print extra debugging messages\n" .
    "       --expFtpHost <host>        : The experimental data FTP host\n" .
    "       --expFtpUser <user>        : The FTP login user\n" .
    "       --expFtpPasswd <passwd>    : The FTP login password\n" .
    "       --expFtpDir <directory>    : The experimental data directory on the FTP host\n" .
    "   -f  --forecasts <comma delimited forecast hours> : retrieve ruc files at these forcast times\n" .
    "   -g  --generationTimes <comma delimited assimilation hours> : retrieve ruc files at these assimilation or generation times.\n" .
    "   -h  --help                     : Print this usage message\n" .
    "   -i  --instance <instance-name> : Instance name\n" .
    "   -l  --lagTime  <num seconds>   : Model delay or lag time\n" .
    "   -m  --moveWait <num seconds>   : wait time before moving data to final outdir\n" .
    "   -n  --numTries  <num tries >   : Number of times to attempt retrieval\n" .
    "   -o  --outdir <output-dir-name> : Output directory for retrieved files\n" .
    "   -t  --tmpdir <tmp-dir-name>    : Directory name for temporary files\n" .
    "   -u  --updateFreq <num seconds> : Update frequency of model\n" .
    "   -w  --writeover                : Overwrite existing files\n" ;

############################################################
# Get the arguments from the command line
############################################################

@modelTimes = ();
@forecastHours = ();

$result = &GetOptions('aa',
		      'basename=s' => \$remoteBasename,
		      'checkDataWait=i' => \$ModelWaitTime,
		      'debug',
		      'expFtpDir=s' => \$remoteDir,
		      'expFtpHost=s' => \$ftpHost,
		      'expFtpPasswd=s' => \$pass,
		      'expFtpUser=s' => \$user,
		      'forecasts=s' => \@forecastTimes,
		      'generationTimes=s'=> \@modelTimes,
		      'help', 
		      'instance=s' => \$Instance,
		      'lagTime=i' => \$ModelDelay,
		      'moveWait=i' => \$MoveWaitTime,
		      'numTries=i' => \$ModelNumTries,
		      'outdir=s' => \$OutputDir,
		      'tmpdir=s' => \$TmpDir,
		      'updateFreq=i' => \$UpdateFreq,
		      'writeover' => \$OverWrite,
		      '<>', \&badArg );

if ( $result == 0 || $opt_help ) {
   print( STDERR $usage );
   exit 0;
}

#
# I dont know what to call this variable!
# Since this variable is used in the opposite sense of
# normal boolean command line options, it must be set
# by hand.
#
if ($opt_aa)
{
  $RapDirStruct = 0; 
}

#
# Convert the comma delimited lists in the command line options
# into the appropriate arrays.
#

if( $#modelTimes > -1 ) {
   @ModelTimes = split(/,/,join(',',@modelTimes));
}

if ($#forecastTimes > -1 ) {
   @ForecastTimes = split(/,/,join(',',@forecastTimes));
}

#
# Print out the retrieval information we are using.
#

if ( $opt_debug ) {
    print( STDERR "Input options specified: \n" );
    print( STDERR "  aa: $opt_aa\n");
    print( STDERR "  basename: $remoteBasename\n" );
    print( STDERR "  checkDataWait: $ModelWaitTime\n");
    print( STDERR "  debug: $opt_debug\n" );
    print( STDERR "  expFtpDir: $remoteDir\n");
    print( STDERR "  expFtpHost: $ftpHost\n");
    print( STDERR "  expFtpPasswd: $pass\n");
    print( STDERR "  expFtpUser: $user\n");
    print( STDERR "  generationTimes: @modelTimes\n");
    print( STDERR "  forecasts: @forecastTimes\n");
    print( STDERR "  instance: $Instance\n" );
    print( STDERR "  lagTime: $ModelDelay\n");
    print( STDERR "  moveWait: $MoveWaitTime\n");
    print( STDERR "  numTries: $ModelNumTries\n");
    print( STDERR "  output dir: $OutputDir\n" );
    print( STDERR "  tmp dir: $TmpDir\n" );
    print( STDERR "  updateFreq: $UpdateFreq\n");
    print( STDERR "  overwrite: $OverWrite\n" );
    $debug = 1;
}
  

#######################################################################
# Start of main
#######################################################################

#
# Set up signal handling
#
$SIG{'INT'} = $SIG{'QUIT'} = $SIG{'KILL'} = $SIG{'TERM'} = 'sigHandler'; 

#
# Create a clean temporary directory, if it does not exist.
#
if (!(-e $TmpDir))
{
    $cmd = "mkdir -p -m 0755 $TmpDir";
    $status = Toolsa::safe_system( $cmd, $sysTimeout, $debug );
    unless (defined($status))
    {
	tidyAndExit("Could not create temporary directory\n", -1);
    }
}
#
# Make sure the output directory exists
#
$cmd = "mkdir -p -m 0755 $OutputDir";
$status = Toolsa::safe_system($cmd, $sysTimeout, $debug);
unless (defined($status))
{
    tidyAndExit("Could not create output directory\n", -1 );
}

#
# Initialize the wait time for files that are not ready yet
#
$startWaitTime = time();

$count = 0;
while ($count < $ModelNumTries)
{
    $try_again = 0;

    #
    # Poll the ftp site for a current directory listing
    #
    ($year, $month, $day, $julian_day, $cycleStartTime, $modelTime, 
     $modelUTime, $remoteDir, @dirListing ) = &pollFtp();

    
    #
    # Print directory listing
    #
    if ($debug)
    {
	foreach $listItem (@dirListing )
	{
	    print( STDERR "$listItem\n" );
	    print "$listItem\n";
	}
    }

    foreach $fcastTime(@ForecastTimes)
    {
	if ($debug)
	{
	    print(STDERR "Forecast time is $fcastTime\n");
	}

	#
	# Construct the expected file name for the file on
	# the FTP site.
	#

	$fname = sprintf("%s.%02d%03d%02d%02d",
			 $remoteBasename, $year - 2000, $julian_day,
			 $modelTime, $fcastTime);
	if ($debug)
	{
	    print(STDERR "Looking for file $fname\n");
	}

	#
	# See if we have a match in the directory list
	#
	$fileIdex = &fileAvail($fname, @dirListing);
	if ($fileIdex < 0)
	{
	    #
	    # The file is not in the list, so go on
	    #
	    if ($debug)
	    {
		print(STDERR "File $fname not ready yet\n" );
	    }
	    
	    $try_again = 1;

	    next;
	}
	else
	{
	    #
	    # The file is in the list
	    #
	    if ($fname eq $lastFile)
	    {
		# 
		# We already processed the file, so go on
		#
		if ($debug)
		{
		    print(STDERR "File $fname already retrieved\n" );
		}

		next;
	    }
	    else
	    {
		#
		# Set up parts of local directories and filenames
		#
		$dateDir = sprintf("%04d%02d%02d", $year, $month, $day);

		($localDir, $ldataInfoStrNoExt, $localFname, $LdataDir) =
		    &getDirNames($modelTime, $fcastTime,
				 $OutputDir, $dateDir, $remoteBasename);
		
		$cmd = "mkdir -p -m 0755 ${localDir}";
		$status = Toolsa::safe_system($cmd, $sysTimeout, $debug);
		unless (defined($status))
		{
		    tidyAndExit("Could not create local directory\n", -1);
		}

		#
		# If we don't want to overwrite existing files,
		# and the file exists, skip it
		#
		if (!$OverWrite)
		{
		    if (-e "$localDir/$localFname")
		    {
			print( STDERR "$localFname already exists\n" );
			next;
		    }
		}
	   
		while (ftpRetrieve($ftpHost, $ftpTimeout,
				   $user, $pass, $remoteDir,
				   $fname, $TmpDir) == 0 &&
		       $ModelNumTries > 0)
		{
		    $ModelNumTries--;

		    print (STDERR "sleeping for 30 seconds\n");
		    #
		    # Register with the process mapper
		    #
		    sleep 30;
		}

		if ($ModelNumTries == 0)
		{
		    tidyAndExit ( "Could not retrieve file\n", -1);
		}

		#
		# Move the file to the correct place and rename it
		# 
		if ($debug)
		{
		    print(STDERR "Renaming ${TmpDir}/${fname} to ");
		    print(STDERR "${localDir}/${localFname}\n");
		}

		$cmd = "mv ${TmpDir}/${fname} ${localDir}/${localFname}";
		$status = Toolsa::safe_system($cmd, $sysTimeout, $debug);
		unless (defined($status))
		{
		    tidyAndExit( "Could not move temporary file\n", -1 );
		}

		sleep $mvWaitTime;

		#
		# Update the ldata info file
		#
		$latestTimeStr = sprintf("%04d%02d%02d%02d0000",
					 $year, $month, $day, $modelTime);

		$info1Str = $ldataInfoStrNoExt;
		$info2Str = $ldataInfoStrNoExt . "." . $remoteBasename;

		if($RapDirStruct)
		{
		    $leadTimeSecs = $fcastTime * 3600;
		    $cmd = "LdataWriter -dir $LdataDir -ext $remoteBasename " .
			"-lead $leadTimeSecs -ltime $latestTimeStr " .
			    "-info1 $info1Str -info2 $info2Str";
		}
		else
		{
		    #
		    # Write ldata file in $OutputDir/fhh where hh is the
		    # forecast hour
		    #
		    $cmd = "LdataWriter -dir $LdataDir -ext $remoteBasename " .
			"-ltime $latestTimeStr " .
			    "-info1 $info1Str -info2 $info2Str";
		}

		if ($debug)
		{
		    print(STDERR "Executing cmd: $cmd\n");
		}

		$status = Toolsa::safe_system($cmd, $sysTimeout, $debug);
		unless (defined($status))
		{
		    tidyAndExit("Could not write ldata file with LdataWriter", -1);
		}
		
		if ($debug)
		{
		    print( STDERR "Done retrieving file $fname\n" );
		}

		$lastFile = $fname;
	    }
	}
	print( STDERR "\n\n" );

    }

    $count = $count + 1;

    if ($try_again && $count < $ModelNumTries)
    {
	$startWaitTime = $startWaitTime + $ModelWaitTime;
	&ftpWait( $startWaitTime, $ModelWaitTime );
    }
    else
    {
	last;
    }
}

tidyAndExit( "Done\n", 0 );

############################################################
# End of Main
############################################################
               

############################################################
# Start of Subroutines
############################################################


############################################################
# &getTime: Get current time from gmtime command
# Package: main
# Returns: year, month, day and hour 
############################################################
sub getTime {
  local($gmYear, $gmMonth, $gmDay, $gmHour, $gmMin, $gmSec,
	$gmWday, $gmYday,
        $currentTime);

  $currentTime = time();
  $modelSearchTime = $currentTime - $ModelDelay;

  if ($debug)
  {
      print(STDERR "\ngetTime: Calculating modelSearchTime (currentTime - ModelDelay($ModelDelay)\n" );
  }

  ( $gmSec, $gmMin, $gmHour, $gmDay, $gmMonth, $gmYear, $gmWday, $gmYday ) = 
       (gmtime( $modelSearchTime ))[0...7];
  
  return($gmYear+1900, $gmMonth+1, $gmDay, $gmHour, $gmMin,
	 $gmSec, $gmYday+1, $modelSearchTime, $currentTime);
}

##############################################################
# &ftpWait
# Package: main
# Returns: nothing
#############################################################
sub ftpWait {
   local( $cycleStartTime, $waitTime ) = @_;
   $nextTryTime = $cycleStartTime + $waitTime;
   $sleepTime = $nextTryTime - time();

   print( STDERR "Sleeping $sleepTime seconds\n" );

   sleep $sleepTime;
}
 
######################################################################
# &dirList 
# Package: pollFtp
# Returns: a listing of files in the directory which 
#          match the pattern string from a remote host
#          Each entry in the array is a single line of 
#          ftp's dir command.
######################################################################
sub dirList {
    local($rdir, $matchString) = @_;
    local($ftp, @listings);

    if ($debug)
    {
	($curr_sec, $curr_min, $curr_hour, $curr_day, $curr_mon, $curr_year) =
	    (gmtime())[0...5];
	$curr_year = $curr_year + 1900;
	$curr_mon = $curr_mon + 1;
	print(STDERR "Looking for files in directory: $rdir\n");
        print(STDERR "    Matching string: $matchString\n");
	print(STDERR "    Current time: $curr_year $curr_mon $curr_day $curr_hour $curr_min $curr_sec\n");
    }

    #
    # Initialize the listings variable to an empty list in case
    # we need it for an error return
    #

    @listings = ();

    #
    # Log in to ftp site
    #
    $ftp = Net::FTP->new($ftpHost, Passive=>true, 
			 Timeout=>$ftpTimeout);
    if (!$ftp)
    {
	print(STDERR "Could not create ftp connection\n");
	return (@listings);
    }

    if (!$ftp->login( $user, $pass ))
    {
	print(STDERR "ftp-login failure\n");
	return (@listings);
    }

    if (!$ftp->binary)
    {
	print(STDERR "ftp-binary mode failure\n");
	return (@listings);
    }

    if (!$ftp->cwd( $rdir ))
    {
	print "$rdir\n";
	print(STDERR "ftp-cwd failure\n");
	return (@listings);
    }

    #
    # Do a directory listing and capture the output
    #
    @listings = $ftp->dir( $matchString );
    $ftp->quit;

    return (@listings);
}

###############################################################
# &numerically
# Package: pollFtp
# Returns: an integer less than, equal to or greater than
#          zero depending on how the inputs are ordered
###############################################################
sub numerically { $a <=> $b; }

###############################################################
# &pollFtp
# Package: main
# Returns: the current model time and a list of files 
###############################################################
sub pollFtp {

  local( @sortedModelTimes, $year, $month, $day, $hour, $min, $sec, $julian_day,
         $modelSearchTime, $cycleStartTime, $currentModelTime, $rucModelTime, 
         $modelUTime, $matchString, @dirListing, 
         $gotDir, $nextTryTime, $sleepTime );

  #
  # Make sure the model times are in order
  #
  @sortedModelTimes = sort numerically @ModelTimes;

  $gotDir = 0;

  $dirListCount = 0;

  while (!$gotDir && $dirListCount < $ModelNumTries)
  {
      #
      # Get the modelsearchTime and currentTime(cycleStartTime)
      #
      ( $year, $month, $day, $hour, $min, $sec, $julian_day,
        $modelSearchTime, $cycleStartTime ) = getTime();

      if ($debug)
      {
	 print( STDERR "\npollFtp: model search time is $year $month $day $hour:${min}Z \n" );
	 print( STDERR "\npollFtp: Looking for modelTime nearest modelSearchTime but less than modelSearchTime \n" );
      }
      
      #
      # Set the current model time to be that
      # which is <= modelSearchTime (currentTime - ModelDelay)
      #
      $currentModelTime = $sortedModelTimes[0];
      foreach $rucModelTime (@sortedModelTimes)
      {
	 if($hour * 60 * 60 + $min * 60 + $sec >= $rucModelTime * 60 * 60)
	 {
	   $currentModelTime = $rucModelTime;
	 }
      }
      if ($debug)
      {
	 print( STDERR "pollFtp: Looking for model time: $currentModelTime\n" );
      }

      #
      # Find the unix time that goes with the model time
      #
      $modelUTime = $modelSearchTime - 
	 (( $hour * 60 * 60 ) + ( $min * 60 ) + $sec ) +
	    ( $currentModelTime * 60 * 60 );
            
      #
      # Set up the file match string that will be used
      # at the ftp site
      #
      $matchString = sprintf("%s.%02d%03d%02d??",
			     $remoteBasename, $year - 2000, $julian_day,
			     $currentModelTime);

      if ($debug)
      {
         print( STDERR "Looking in remote directory $remoteDir\n" );
         print( STDERR "   for files matching $matchString\n" );
      }

      #
      # Request a directory listing from the ftp site
      #
      @dirListing = &dirList( $remoteDir, $matchString );

      #
      # If we didn't get a directory listing, sleep a while
      #
      if( @dirListing ) {
	 $gotDir = 1;
         if( $debug ) {
	    print( STDERR "Got directory listing\n" );
         }
      }
      else {
         $gotDir = 0;
         if( $debug ) {
            print( STDERR "No matching files in directory. Going to sleep...\n");
         }
         &ftpWait( $cycleStartTime, $ModelWaitTime );
      }

      $dirListCount++;
  }
    
  return($year, $month, $day, $julian_day,
	 $cycleStartTime, $currentModelTime, 
	 $modelUTime, $remoteDir, @dirListing);

}

########################################################################
# &fileAvail: Determine if a file is in the file list
# Package: main
# Returns: index of file in listing or -1 if not found
########################################################################
sub fileAvail {
    local( $fname, @listings ) = @_;
    local( $listing, $count );

    $count = 0;
    foreach $listing ( @listings ) {
       chomp $listing;

       if( $listing =~ /$fname/ ) {
          return( $count );
       }

       $count += 1;
    }

    return( -1 );
}

########################################################################
# &getDirNames: Construct the local directory and file names to use for
#               the retrieved file.
# Package: main
# Returns: local directory name and local file name
########################################################################
sub getDirNames {
    local($model_time, $fcst_time,
	  $output_dir, $date_dir, $local_ext) = @_;
    local($local_dir, $ldata_info_str_no_ext, $local_fname, $ldata_dir);

    if($RapDirStruct) {
	
	#
	# Use the rap directory structure and filenaming convention  
	# $OutputDir/yyyymmdd/g_hh0000/f_nnnnnnnnn where hh is the 
	# hour (ie. 030000, 060000 ) and nnnnnnnnn is the forecast 
	# hour in seconds.
	#   
         
	$local_dir = sprintf("%s/%s/g_%02d0000",
			     $output_dir, $date_dir, $model_time);
	       
	$ldata_info_str_no_ext =
	    sprintf("%s/g_%02d0000/f_%09d",
		    $date_dir, $model_time, $fcst_time*60*60);

	$local_fname = sprintf("f_%09d.%s",
			       $fcst_time*60*60, $local_ext);

	$ldata_dir = $output_dir;
    }
      
    else {

	$modelTimeStr = sprintf( "%02d", $model_time );
   
	#
	# Use the following directory structure and filenaming pattern:
	# $output_dir/fhh/yyyymmdd/
	#

	$local_dir = sprintf("%s/f%02d/%s",
                             $output_dir, $fcst_time, $date_dir);

	$ldata_info_str_no_ext =
	    sprintf("%s/%02d0000",
		    $date_dir, $model_time);

	$local_fname = sprintf("%02d0000.%s",
			       $model_time, $local_ext);

	$ldata_dir = sprintf("%s/f%02d", $output_dir, $fcst_time);
    }

    if ($output_dir =~ m/^$rapDataDir/)
    {
	$begin_pos = length($rapDataDir) + 1;
	$ldata_dir = substr($ldata_dir, $begin_pos);
    }

    if( $debug ) {
	print( STDERR "Local directory $local_dir\n" );
	print( STDERR "Ldata info string without ext $ldata_info_str_no_ext\n" );
	print( STDERR "Local filename $local_fname\n" );
	print( STDERR "Ldata directory $ldata_dir\n" );
    }

    return($local_dir, $ldata_info_str_no_ext, $local_fname, $ldata_dir);
}

########################################################################
# &ftpRetrieve: Retrieve the given file from the FTP site
# Package: main
# Returns: nothing
########################################################################
sub ftpRetrieve {
    local($ftp_host, $ftp_timeout, $ftp_user, $ftp_pass,
	  $ftp_dir, $ftp_fname, $local_dir) = @_;


    #
    # Connect to the ftp server
    #
    if( $debug ) {
	print( STDERR "Connecting to the ftp server\n" );
    }

    $ftp = Net::FTP->new( $ftp_host, Passive=>true, 
			 Timeout=>$ftp_timeout );

    if (! $ftp)
    {
        print(STDERR "Could not create ftp connection\n");
        return;
    }

    if (! $ftp->login( $ftp_user, $ftp_pass ) )
    {
	print(STDERR "Could not log into ftp server\n");
	return;
    }

    if (! $ftp->binary )
    {
	print (STDERR "ftp-binary mode failed\n");
	return;
    }

    if (! $ftp->cwd( $ftp_dir )) 
    {
	print (STDERR "ftp-cwd failure\n");
	return;
    }

    #
    # Get the file
    #
    if( $debug ) {
	print( STDERR "Retrieving $fname\n" );
    }
    
    $ftp->get( $ftp_fname, "${local_dir}/${ftp_fname}" ) 
	or tidyAndExit( "ftp-get failure for $ftp_fname\n", -1 );

    #
    # End the ftp session
    #
    $ftp->quit;
    
}

########################################################################
# &tidyAndExit
# Package: main
# Returns: nothing
########################################################################
sub tidyAndExit {
   local( $errStr, $errCode ) = @_;

   print( STDERR $errStr );

   exit $errCode;
}

######################################################################
# &sigHandler
# Package: main
# Returns: nothing
######################################################################
sub sigHandler {
   local( $sig ) = @_;
   
   print( STDERR "Exiting\n" );

   exit(0);
}
            


