# collect.cfg
# This is a Sample config file used by collect_output
# The collect_output script gunzips the appropriate directories and files
# Because of the various options it can be runs as, please look through this file and make sure the options for your project are
# set correctly.
# 


# This flag dictates if collect_output will run in archive_only
# Default is to archive and scrub. Please comment this if you'd like to scrub and archive (i.e. remove the files)
# Use scrub_only if you need to remove files (Magen Requirement)
archive_only

#
# Input Root Data directory. This is where the script will look for files
# 
data_dir=./test

# NEW - 
# This is the directory pattern that it will look underneath the root data directory. dir_pattern will 
# be the parent directory where the actual files live. The script recursively tries to find this pattern
# underneath data_dir and then gets all the files 1 level underneath dir_pattern.
#
# Below is the default directory pattern representing cycle-time. The directory pattern needs to be
# in the form yyyymmddhh in order to do intervals. For Atec, there are no interval needs. So, it can be a name,
# such as, fcst or final

dir_pattern=(2\d\d\d)(\d\d)(\d\d)(\d\d)

# For the need to go more-than-one level under dir_pattern, set optional
# sub_dir_pattern to desired subdirectory.  Default - not set.
#sub_dir_pattern=RAP_RTFDDA

#
# Output directory to be used. The script will create subdirectories with the same name as in the dir_pattern
#
archive_dir=./archive

#
# zip command to use
#
zip_utility=gzip -f

#
# file_pattern is a Perl regular expression. Please note, Perl regular expressions are not the same as shell syntax
# used with ls etc. ls wrfout* but in Perl it's wrfout.*
# 

# For ATEC that does not rely on intervals, following file pattern is sufficient
#
file_pattern=wrfout.*

# Since Magen has need for intervals, it should use the following pattern. 
# file_pattern='wrfout.*(2\d\d\d)-(\d\d)-(\d\d)_(\d\d).*'"


# 
# Files older than default_age are archived or scrubbed.
#
default_age=10

# 
# 
# By defualt, intervals are not set. All files are included. If you need to only archive files every 6 hours, set default_interval
# default_interval=6

# 
# Interval arguments can be specified in multiple lines for different types of files
# It will make a list of them and apply them *all*. Note - intervals are calculated based on the date and time embedded in file name. 
# A file pattern must be given on where to look for the date
#interval=.*d0.*:3
#interval=.*d1.*:4

# Specify age for different types of files. collect_output looks at file modification time to determine the age.
# Each line can contain different arugments.
age=.*d03.*:1
age=.*d04.*:1


# Bundle Arguments
# Files to be tar-ed together.
# Each line contains file patterns (in Perl regex) to be tar-ed
bundle=.*d01.*_F:d01_final
bundle=.*d01.*FCST:d01_fcst
bundle=.*d02.*_F:d02_final
bundle=.*d02.*FCST:d02_fcst
bundle=.*d03.*_F:d03_final
bundle=.*d03.*FCST:d03_fcst
bundle=.*d04.*_F:d04_final
bundle=.*d04.*FCST:d04_fcst

