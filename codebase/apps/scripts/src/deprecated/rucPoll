#!/usr/bin/perl
#
# rucPoll - this script is intended only as tool to collect 
#           statistics on the timeliness of 20km RUC model
#           files on the NCEP web site
#
# Code taken from rucRetrieve
#

########################################################
# Includes
########################################################
use Net::FTP;
use Time::Local;
use Env qw( RAP_LIB_DIR );
use Env qw( RAP_SHARED_LIB_DIR );
use lib "$RAP_SHARED_LIB_DIR/perl5/";
use lib "$RAP_LIB_DIR/perl5/";
use Toolsa;
 
#######################################################
# Misc.
#######################################################
( $prog = $0 ) =~ s%.*/%%;               # Determine program basename.
$| = 1;                                  # Unbuffer standard output.
umask 002;                               # Set file permissions.

#######################################################
# Global variables
#######################################################
$ftpHost = "tgftp.nws.noaa.gov";         # The NCEP FTP server's domain name.
$ftpTimeout = 240;                       # Time to allow for single file transfer
$user = "anonymous";                     # The remote username.
$pass = "jaimi\@ucar.edu";               # The remote password.


$ruc2pNcepDir = "/SL.us008001/ST.opnl";
$ruc2bNcepDir = "/SL.us008001/ST.opnl";
$ruc2sfcNcepDir = "/SL.us008001/ST.opnl";

@months = ( "Jan","Feb","Mar","Apr","May","Jun","Jul","Aug",
            "Sep","Oct","Nov","Dec" );


#############################################################
# Command line defaults
#############################################################
use Getopt::Long;
use Env;
use Cwd;
Env::import();

sub badArg;
sub translateDataDir;
sub verifyDataDir;

$Ruc_model = "ruc2b";                         # Ruc model (ruc2b, ruc2p, ruc2sfc)
@ModelTimes = ( 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 );
$ModelDelay = 0 * 60;

#############################################################
# Save the usage to print to the user if there is a problem
#############################################################
$usage =                                                 
    "\nUsage: $prog [-h] [-gr]\n" .
    "   -g  --generationTimes <comma delimited assimilation hours> : retrieve ruc files at these assimilation or generation times.\n" .
    "   -l  --lagTime  <num seconds>   : Model delay or lag time\n" .
    "   -r  --ruc <model>              : Specify ruc2p, ruc2b or ruc2sfc model\n" ;

############################################################
# Get the arguments from the command line
############################################################

@modelTimes = ();

$result = &GetOptions( 'help',
                       'generationTimes=s'=> \@modelTimes,
                       'lagTime=i',
		       'ruc=s',
                       '<>', \&badArg );

if ( $result == 0 || $opt_help ) {
   print( STDERR $usage );
   exit 0;
}

print( STDERR "Input options specified: \n" );
print( STDERR "  generationTimes: @modelTimes\n");
print( STDERR "  lagTime: $opt_lagTime\n");
print( STDERR "  ruc: $opt_ruc\n" );
  
if( $#modelTimes > -1 ) {
   @ModelTimes = split(/,/,join(',',@modelTimes));
}

if ( $opt_lagTime ) {
    $ModelDelay = $opt_lagTime;
}

if ( $opt_ruc eq "ruc2b" ) {
    $Ruc_model=$opt_ruc;
}
elsif ( $opt_ruc eq "ruc2p" ) {
    $Ruc_model=$opt_ruc;
}
elsif ( $opt_ruc eq "ruc2sfc" ) {
    $Ruc_model=$opt_ruc;
}
else {
    tidyAndExit( "Options are ruc2b, ruc2p or ruc2sfc\n", -1 );
}

#
# Set up "constants" based on the model you are retreiving
#

if ($Ruc_model eq "ruc2b")
{
    $modelExt = "bgrib20";
}
elsif ($Ruc_model eq "ruc2p")
{
    $modelExt = "us20km";
}
elsif ($Ruc_model eq "ruc2sfc")
{
    $modelExt = "sgrib20";
}

#######################################################################
# Start of main
#######################################################################

#
# Set up signal handling
#
$SIG{'INT'} = $SIG{'QUIT'} = $SIG{'KILL'} = $SIG{'TERM'} = 'sigHandler'; 

#
# Poll the ftp site for a current directory listing
#
pollFtp();
    
tidyAndExit( "Done\n", 0 );

############################################################
# End of Main
############################################################
               

############################################################
# Start of Subroutines
############################################################


############################################################
# &getTime: Get current time from gmtime command
# Package: main
# Returns: year, month, day and hour 
############################################################
sub getTime {
  local( $gmYear, $gmMonth, $gmDay, $gmHour, $gmMin, $gmSec,
         $currentTime );

  $currentTime = time();
  $modelSearchTime = $currentTime - $ModelDelay;

  ( $gmSec, $gmMin, $gmHour, $gmDay, $gmMonth, $gmYear ) = 
       (gmtime( $modelSearchTime ))[0...5];
  
  return( $gmYear+1900, $gmMonth+1, $gmDay, $gmHour, $gmMin,
          $gmSec, $modelSearchTime, $currentTime );
}

######################################################################
# &dirList 
# Package: pollFtp
# Returns: a listing of files in the directory which 
#          match the pattern string from a remote host
#          Each entry in the array is a single line of 
#          ftp's dir command.
######################################################################
sub dirList {
    local($rdir, $matchString) = @_;
    local($ftp, @listings);

    ($curr_sec, $curr_min, $curr_hour, $curr_day, $curr_mon, $curr_year) =
	(gmtime())[0...5];
    $curr_year = $curr_year + 1900;
    $curr_mon = $curr_mon + 1;
    print(STDERR "Looking for files in directory: $rdir\n");
    print(STDERR "    Matching string: $matchString\n");
    
    #
    # Initialize the listings variable to an empty list in case
    # we need it for an error return
    #

    @listings = ();

    #
    # Log in to ftp site
    #
    $ftp = Net::FTP->new($ftpHost, Passive=>true, 
			 Timeout=>$ftpTimeout);
    if (!$ftp)
    {
	print(STDERR "Could not create ftp connection\n");
	return (@listings);
    }

    if (!$ftp->login( $user, $pass ))
    {
	print(STDERR "ftp-login failure\n");
	return (@listings);
    }

    if (!$ftp->binary)
    {
	print(STDERR "ftp-binary mode failure\n");
	return (@listings);
    }

    if (!$ftp->cwd( $rdir ))
    {
	print "$rdir\n";
	print(STDERR "ftp-cwd failure\n");
	return (@listings);
    }

    #
    # Do a directory listing and capture the output
    #
    @listings = $ftp->dir( $matchString );
    $ftp->quit;

    return (@listings);
}

###############################################################
# &numerically
# Package: pollFtp
# Returns: an integer less than, equal to or greater than
#          zero depending on how the inputs are ordered
###############################################################
sub numerically { $a <=> $b; }

###############################################################
# &pollFtp
# Package: main
# Returns: the current model time and a list of files 
###############################################################
sub pollFtp {

  local( @sortedModelTimes, $year, $month, $day, $hour, $min, $sec,
         $modelSearchTime, $cycleStartTime, $currentModelTime, $rucModelTime, 
         $modelUTime, $modelString, $dirString, $ncepExt, $ncepDir, @dirListing, 
         $gotDir );

  #
  # Make sure the model times are in order
  #
  @sortedModelTimes = sort numerically @ModelTimes;

  #
  # Get the modelsearchTime and currentTime(cycleStartTime)
  #
  ( $year, $month, $day, $hour, $min, $sec, 
   $modelSearchTime, $cycleStartTime ) = getTime();
  

  #
  # Set the current model time to be that
  # which is <= modelSearchTime (currentTime - ModelDelay)
  #
  foreach $rucModelTime ( @sortedModelTimes ) {
      $currentModelTime = $rucModelTime;
      
      print( STDERR "pollFtp: Looking for model time: $currentModelTime\n" );
      
      #
      # Find the unix time that goes with the model time
      #
      $modelUTime = $modelSearchTime - 
	  (( $hour * 60 * 60 ) + ( $min * 60 ) + $sec ) +
	      ( $currentModelTime * 60 * 60 );
      
      #
      # Set up the directory string that will be used
      # at the ftp site
      #
      $modelString = sprintf( "%02d", $currentModelTime );
      
      $dirString = "fh.????_tl.press_gr.${modelExt}";
      
      #
      # Create the ncep directory string 
      #   Use only the last two digits of the year.
      #
      $ncepExt = sprintf( "MT.ruc_CY.${modelString}/RD.%04d%02d%02d/PT.grid_DF.gr1", substr($year,0,4), $month, $day );
      if( $Ruc_model eq "ruc2p" ) {
	  $ncepDir = "${ruc2pNcepDir}/${ncepExt}";
      }
      elsif( $Ruc_model eq "ruc2b" ) {
	  $ncepDir = "${ruc2bNcepDir}/${ncepExt}";
      } 
      elsif( $Ruc_model eq "ruc2sfc" ) {
	  $ncepDir = "${ruc2sfcNcepDir}/${ncepExt}";
      }
      
      #
      # Request a directory listing from the ftp site
      #
      @dirListing = &dirList( $ncepDir, $dirString );
      
      #
      # If we didn't get a directory listing, sleep a while
      #
      if( @dirListing ) {
	  $gotDir = 1;
	  print( STDERR "Got directory listing\n" );
	  
	  #
	  # Print directory listing
	  #
	  foreach $listItem (@dirListing ) {
	      print( STDERR "$listItem\n" );
	  }
	  
      }
      else {
	  print( STDERR "No matching files in directory.\n");
      }
      
    print(STDERR "\n\n");
  }
 
}

########################################################################
# &tidyAndExit
# Package: main
# Returns: nothing
########################################################################
sub tidyAndExit {
   local( $errStr, $errCode ) = @_;

   print( STDERR $errStr );
   Toolsa::PMU_auto_unregister();

   exit $errCode;
}

######################################################################
# &sigHandler
# Package: main
# Returns: nothing
######################################################################
sub sigHandler {
   local( $sig ) = @_;
   
   print( STDERR "Exiting\n" );

   exit(0);
}
            


