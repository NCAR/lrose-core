#!/usr/bin/perl --
# scrub: Scrub directories, based on modification time.
# margolis@ucar.edu
# CVS: $Id: truncate,v 1.3 2015/08/21 22:35:45 dixon Exp $

# Truncates file(s) in target directory by deleting lines from the
# beginning of the files, maintaining the last N lines in the file.
#
# The -v option prints the names of files to be truncated.
# The -n option causes the script to not truncate files, and enables the -v option.
# The -p option causes truncation only of files matching the Perl regular expression [pattern].

use File::Find;
use Getopt::Std qw( getopts );

($prog = $0) =~ s%.*/%%;

$usage = <<EOF;
Usage: $prog [-nv] [-p pattern] number-of-lines-to-keep pathToDirectory ...
  -n  Do not actually truncate anything.
  -v  Print file names to be truncated.
  -p  truncate only files/directories matching pattern.
[pattern is a Perl regular expression.]
EOF

&getopts('p:nv') || die $usage;
@ARGV >= 2        || die $usage;

# The -n option implies the -v option.
$opt_v = 1 if $opt_n;

# Verify that the specified max_lines is valid.
($max_lines = eval shift) =~ /^[.\d]+/ || die "$prog: bad max_lines\n";

# Round up $max_lines (e.g. 7.2 becomes 8)
$max_lines = round($max_lines);

# Quote any (unlikely, but...) "/" characters in the pattern.
$opt_p =~ s|/|\\/|g if $opt_p;

# Traverse the desired directories.
&find(@ARGV);

sub wanted
{
    (($dev, $ino, $mode, $nlink, $uid, $gid) = lstat($_))
        || warn "stat: $name: $!\n";

    # If a pattern has been specified, check for it.
    !/$opt_p/o && return if $opt_p;

    my $lines_in_file=`cat $name | wc -l`;
    if( $lines_in_file <= $max_lines )
    {
      return;
    }

    print "${name}\n" if $opt_v;

    return if $opt_n;

    my $lines_to_delete = $lines_in_file - $max_lines;
    `sed -i '1,${lines_to_delete}d' ${name}`;
}

sub round
{
  my $num = shift;
  return (($num == int($num)) ? $num : int($num + 1));
}
