#!/bin/sh --
# snuff: Kill processes by name, BSD or SysV.
# Usage: snuff_inst process_name instance_name
#
# Original TITAN version
# by Tres Hofmeister <tres@ncar.ucar.edu>
# - Tested under: SunOS 4.1.3 and 5.4, IRIX 4.0.5, 5.3 and 6.2,
#   Debian Linux 1.1, Slackware Linux 3.0, HP-UX B.10.01, and AIX 4.1
# - Failed under: AIX 3.2 and OSF/1 V3.0 with getopts(1) problems.
#
# Optimised version
# by BMRC/K.Cheong <k.cheong@bom.gov.au>
# - Optimised for robustness and speed.
# - Tested under: RHEL 3.x, 4.x, 5.x and equivalent Linux OS-es.

PATH=/bin:/usr/bin:/usr/ucb

prog=$(basename $0)
usage="Usage: $prog process instance"

# Disable the use of default signal lists.
# - previously user supplied signal lists was not enabled in this
#   script as input args
# Default signal list.
#signals="TERM KILL"

# Remaining arguments are process names.
if [ $# -ne 2 ]; then
    echo $usage >&2
    exit 1
fi

proc=$1
inst=$2

# Why verify signal list?
# - When a fake signal is used, kill(1) will fail and return an unknown/invalid
#   signal error. So we comment out the following section.
#
# Verify the signal list.
#maxsig=`kill -l | wc -w`
#for sig in $signals
#do
#    if kill -l | egrep "(^| )|SIG$sig( |$)" > /dev/null 2>&1; then
#        : # Continue.
#    elif echo $sig | egrep '^[0-9]+$' > /dev/null 2>&1; then
#        if [ $sig -le $maxsig ]; then
#            : # Continue.
#        else
#            echo "$prog: signal out of range: $sig" >&2
#            exit 1
#        fi
#    else
#        echo "$prog: invalid signal: $sig" >&2
#        exit 1
#    fi
#done

# Take advantage of the already available $PROJDIR_HOME/bin/print_procmap
# - Comment out sections using BSD/SysV ps calls.
# - It was assumed previously that this snuff_inst will kill localhost
#   TITAN processes. Hence we use localhost in print_procmap too.
pids=$($PROJ_DIR/bin/print_procmap -plain -host localhost | grep -m1 -w "^${proc} ${inst}" | cut -f5 -d' ')

# Is this BSD or SysV?
#if ps -x >/dev/null 2>&1; then
#    BSD="true"
#fi

# A process name is considered to start with either
# a space or '/', and end with either a space or newline.

#if [ "$BSD" ]; then
#    pids=`ps -axww | grep $proc | grep $inst | grep -v grep | grep -v snuff_inst | awk '{print $1}'`
#else
#    pids=`ps -ef | grep $proc | grep $inst | grep -v grep | grep -v snuff_inst | awk '{print $2}'`
#fi

# Do any processes match this pattern?
if [ "$pids" ]; then

    inst=$(echo $pids | wc -w)
    echo "Instances of \`$proc':" $inst

    # Loop over each instance of this pattern.
    for pid in $pids
    do
        echo " Killing $proc, PID $pid"

        # Is this process killable by this UID?
        error=`kill -0 $pid 2>&1`
        if [ "$error" ]; then
            echo " $prog: $error" >&2
            # Next PID.
            continue
        fi

        # See above, default signal list disabled.
        # Try each signal in the list.
        #for sig in $signals
        #do
        #    kill -$sig $pid; sleep 1
        #    if kill -0 $pid > /dev/null 2>&1; then
        #        echo "  SIG$sig failed" >&2
        #else
        #    echo "  SIG$sig succeeded"
        #    # Next PID.
        #    continue 2
        #    fi
        #done
        #
        # We use the standard Linux way of killing a process
        # and adapt it here. See /etc/init.d/functions, killproc()
        kill -TERM $pid >/dev/null 2>&1
        usleep 100000
        if kill -0 $pid > /dev/null 2>&1; then
          sleep 1
          if kill -0 $pid > /dev/null 2>&1; then
            sleep 3
            if kill -0 $pid > /dev/null 2>&1; then
              kill -KILL $pid >/dev/null 2>&1
              usleep 100000
            fi
          fi
        fi

        if kill -0 $pid > /dev/null 2>&1; then
            echo "Failed to kill $proc, PID $pid" >&2
        fi
    done
else
    # No processes match this pattern.
    echo "$proc: no such process" >&2
fi

exit 0
