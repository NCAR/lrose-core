#! /usr/bin/perl
# *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
# Copyright (c) 1990 - 2017, University Corporation for Atmospheric 
# Research (UCAR), Boulder, Colorado, USA.  All rights reserved.  
#  
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are 
# met: 
#  
# 1) If the software is modified to produce derivative works, such 
# modified software should be clearly marked, so as not to confuse it 
# with the version available from UCAR. 
#  
# 2) Redistributions of source code must retain the above copyright 
# notice, this list of conditions and the following disclaimer. 
#  
# 3) Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution. 
#  
# 4) Neither the name of UCAR nor the names of its contributors, if any, 
# may be used to endorse or promote products derived from this software 
# without specific prior written permission. 
#  
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
# *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* 
#
# Purpose: To review the procmap_auto_restart process log file and
#          gather statistics on process restarts. Write the stats
#          to a file and (optionally) email the results to a list
#          of addresses. The reported statistics will be for the
#          entire contents of the logfile.
#
# Usage:   auto_restart_stats -l logfile-to-read
#                           -p process-list-file
#                           -o output-file-name
#                           -m $PROCMAP_HOST
#                           -u output-summary-file-name
#                           -t output-totals-only-file-name
#                           -a emailAddress-file
#                           -r summaryEmailAddress-file
#                           -s start-time (YYYYmmdd/hhmmss)
#                           -e end-time (YYYYmmdd/hhmmss)
#                           -d debug
#
# Input:   1) A procmap_auto_restart.log file
#          2) A file containing a list of email addresses to send to
#          3) A process list file
#
# Output:  1) Creates an output file containing a set of statistics.
#          2) Emails the output file to the input list of email addresses
#
# Example: auto_restart_stats -l $CONTROL_DIR/procmap_auto_restart.log \
#                           -p $CONTROL_DIR/params/process_list \
#                           -a $CONTROL_DIR/params/stats_email.list \
#                           -r $CONTROL_DIR/params/stats_summary_email.list \
#                           -o $DATA_DIR/statistics/19980412_procmap.stats \
#                           -u $DATA_DIR/statistics/19980412_procmap_summary.stats \
#                           -t $DATA_DIR/web_stats/19980412_process_totals.stats
#                           -s 19980508/000000 \
#                           -e 19980508/235959
#
# The three types of entries we will see in the log file are:
#          SystemStartup, ProcessMissing, ProcessHung
#
# SystemStartup Example:
#          Checking procmap on dew : Fri Jul 25 09:46:44 EDT 1997
#
# ProcessMissing Example:
#          Didn't find rview ops in procmap at Fri Jul 25 10:56:53 EDT 1997 -- restarting.
#
# ProcessHung Example:
#          Restarting rview ops on dew at Fri Jul 25 11:28:07 EDT 1997.
#             rview ops dew nowcast 4430 120 -125 -125 93 0 "Waiting for data"
#
#
# Authors: Terri B & Deirdre G              MAY 1998
#
#
# Future possible enhancements:
#   1) Do down-time statistics with weighted process categories (priorities).
#      instead of assuming all processes have the same priority.
#   2) Expand the email input file to contain email addresses and processes
#      to send email to each address on. For example, for developers to only
#      receive email when a process they are interested in has a problem.
#
#================================================================================

# Libraries to include

use Sys::Hostname;
use Time::Local;

#
# RAP Perl modules
#

use Env qw(PROJ_DIR);
use Env qw(RAP_INST_LIB_DIR);
use Env qw(RAP_SHARED_LIB_DIR);
use Env qw(RAP_LIB_DIR);

use lib "$PROJ_DIR/lrose/lib/perl5/";
use lib "$RAP_INST_LIB_DIR/perl5/";
use lib "$RAP_SHARED_LIB_DIR/perl5/";
use lib "$RAP_LIB_DIR/perl5/";

use Env qw(HOME);
use lib "$HOME/git/lrose-core/codebase/libs/perl5/src/";

# Need this for Operational ADDS, which no longer has compile-time
# dirs in place for the runtime system. DO NOT REMOVE! - P McCarthy.
use Env qw(ADDSHOME);
use lib "$ADDSHOME/perl_lib/";

use Procmap;
use Toolsa;

#
# Local constants
# (These need to match those set at the top of Procmap.pm. Need to figure
#  out how to put these into an include file at some point.)
#

$Use_local=1;		# flag value for timezone (Local)
$Use_GMT=2;		# flag value for timezone (GMT)    

$Ave_maxint=120;	# average maxint value returned from print_procmap

$Miss_restart=1;       # flag value for restart due to missing process
$Hung_restart=2;       # flag value for restart due to hung process

$Proc_idx=0;           # index into proc_info for process name
$Inst_idx=1;           # index into proc_info for process instance
$Mach_idx=2;           # index into proc_info for process hostname
$Miss_idx=3;           # index into proc_info for restart due to missing (bin)
$Hung_idx=4;           # index into proc_info for restart due to hung (bin)

$Gap_start=0;		# index into arr_proc_gaps for gap start time
$Gap_end=1;		# index into arr_proc_gaps for gap end time
$Gap_number=2;		# index into arr_proc_gaps for gap number
$Gap_proc_name=3;	# index into arr_proc_gaps for process name
$Gap_proc_instance=4;	# index into arr_proc_gaps for process instance
$Gap_proc_machine=5;	# index into arr_proc_gaps for process hostname

$Pri_idx=0;             # index into arr_priorities_downtime for process priority index
$Pri_descrip_idx=1;     # index into arr_priorities_downtime for process priority description
$Pri_timespan_idx=2;    # index into arr_priorities_downtime for process priority downtime in secs
$Pri_start_idx=3;       # index into arr_priorities_downtime for start time (ignore, used as temp)
$Pri_end_idx=4;         # index into arr_priorities_downtime for end time (ignore, used as temp)
$Pri_weight_idx=5;      # index into arr_priorities_downtime for process category WEIGHT
$Pri_num_procs=6;       # index into arr_priorities_downtime for number of processes in this category
$Pri_pct_impaired=7;    # index into arr_priorities_downtime for percent time impaired

$Restart_sleep_secs=60; # default number of sleep seconds for procmap_auto_restart


#---------------------------------------------------------------------
# Subroutine: Date2utime()
#
# Usage:      ($return_val, $unixdate)=Date2utime($input_date, $tz_flag, $debug_flag)
#
# Function:   Convert the input start/stop date format (YYYYmmddhhmmss)
#             into UNIX time.
#
# Input:      A time in YYYYmmddhhmmss format to be converted
#             A timezone flag (1=local, 2=gmt) -- ignored
# Output:     Returns (in return_val), 1 if successful or 0 on error.
#             Returns (in unixdate), the date in UNIX time format
# 
# Overview:   Use the 'date --day %s' OS call to convert the time to UNIX
#             time. If that is not available, will need to uncomment the
#             section to convert the date using the JulianDay module.
#         
#
sub Date2utime
{	
	local ($input_date, $tz_flag, $debug_flag) = @_;

	# Initialize
       
	$sub_name="Date2utime";
	$ret_val=0;
	
	# Parse the input date into YYYY mm dd hh mm ss so can pass into
	# conversion routine 

	($date, $hms)=split('/', $input_date);
	
	$year=substr($date, 0, 4);
	$month=substr($date, 4, 2);
	$day=substr($date, 6, 2);
	$hour=substr($hms, 0, 2);
	$min=substr($hms, 2, 2);
	$sec=substr($hms, 4, 2);

	if ($debug_flag == 1) {
	    print(STDERR "Parsing date: $input_date yields $year $month $day $hour $min $sec, tz_flag: $tz_flag\n");
	}

	# Need to reset month to 0 based from 1 based

	$month=$month-1;
	if ($month < 0) {
	    $month = 0;
	}

	# Convert to UNIX time based on the timezone

	if ($tz_flag == $Use_GMT) {
	    $unixtime=timegm($sec, $min, $hour, $day, $month, $year);
	} else {
	    $unixtime=timelocal($sec, $min, $hour, $day, $month, $year);
	}

	if ($debug_flag == 1) {
	    print(STDERR "Resulting UNIX time is: $unixtime\n");
	}

	$ret_val = 1;
	return($ret_val, $unixtime);
}

#---------------------------------------------------------------------
# Subroutine: Print_header()
#
# Usage:      $return_val=Print_header($output_file, ...., $debug_flag)
#
# Function:   Print the stats file header to the output_file
#
# Input:      
#             
# Output:     Returns (in return_val), 1 if successful or 0 on error.
# 
# Overview:   
#         
#
sub Print_header
{	
    local ($outfile, $datetime, $logfile, $proc_list, $start, $end, $empty_logfile, $span, $first_line, $last_line, $debug_flag) = @_;

    # Initialize

    $ret_val=0;
    if (!$start) {
	$start="Not specified";
    }
    if (!$end) {
	$end="Not specified";
    }

    $current_host=`hostname`;

    # Print
 
    print($outfile "============ Statistics for procmap_auto_restart ================\n");
    print($outfile "Today's date: \t$datetime\n");
    print($outfile "Hostname: \t$current_host");
    print($outfile "Logfile read: \t$logfile\n");
    print($outfile "Process list file read: \t$proc_list\n");
    print($outfile "Start time for statistics: \t$start\n");
    print($outfile "End time for statistics: \t$end\n");
    print($outfile "Time span (hours) covered by statistics: ");

    if ($empty_logfile) {
	print($outfile "\tFile is empty\n");
    }
    else {
	printf($outfile "\t%7.2f\n", $span);
    }

    print($outfile "First timestamp in logfile:\n");
    print($outfile "     $first_line");
    if ($empty_logfile) {
	print($outfile "\n");
    }

    print($outfile "Last timestamp in logfile:\n");
    print($outfile "     $last_line");
    if ($empty_logfile) {
	print($outfile "\n");
    }
    print($outfile "-----------------------------------------------------------------\n");

    $ret_val=1;
    return($ret_val);
}


#---------------------------------------------------------------------
# Subroutine: Print_system_summary()
#
# Usage:      $return_val=Print_system_summary($output_file, ...., $debug_flag)
#
# Function:   Print the system summary to the output_file
#
# Input:      
#             
# Output:     Returns (in return_val), 1 if successful or 0 on error.
# 
# Overview:   
#         
#
sub Print_system_summary
{	
    local ($outfile, $num_procs, $num_machines, $num_sys_restarts, $total_num_proc_restarts, $num_proc_miss_restarts, $num_proc_hung_restarts, $debug_flag) = @_;

    # Initialize

    $ret_val=0;

    # Print
 
    print($outfile "Number of processes in system: \t$num_procs\n");
    print($outfile "Number of machines in system: \t$num_machines\n");
    print($outfile "Number of system restarts: \t$num_sys_restarts\n");
    print($outfile "Number of process restarts: \t$total_num_proc_restarts\n");
    print($outfile "    Mode 1 (missing): number of process restarts: $num_proc_miss_restarts\n");
    print($outfile "    Mode 2 (hung)   : number of process restarts: $num_proc_hung_restarts\n");
    print($outfile "\n");

    $ret_val=1;
    return($ret_val);
}


#---------------------------------------------------------------------
# Subroutine: Print_detailed_proc_restarts()
#
# Usage:      $return_val=Print_detailed_proc_restarts($output_file, ...., $debug_flag)
#
# Function:   Print the details on process restarts to the output_file
#
# Input:      
#             
# Output:     Returns (in return_val), 1 if successful or 0 on error.
# 
# Overview:   
#         
#
sub Print_detailed_proc_restarts
{	
    local ($outfile, *proc_info, *machine_proc_info, $debug_flag) = @_;

    # Initialize

    $ret_val=0;
    $num_proc_info=@proc_info;
    $num_machine_proc_info=@machine_proc_info;

    # Return if no restarts

    if ($num_proc_info == 0) {
	if ($debug_flag) {
	    print(STDERR "No process restarts. Will not print details.\n");
	}
	return(1);
    }

    # Print

    print($outfile "Details on individual processes...\n");
    print($outfile "\t\t\t\t\t\t\t\t   Restarts\n");
    printf($outfile "%-30s \t%-10s \t%-12s \t%-6s \t%-6s\n", "Process", "Instance", "Machine", "Mode 1", "Mode 2");
    printf($outfile "%-30s \t%-10s \t%-12s \t%-6s \t%-6s\n", "-------", "--------", "-------", "-----", "----");
    for ($i=0; $i<$num_proc_info; $i++) {
	$proc=$proc_info[$i][$Proc_idx];
	$inst=$proc_info[$i][$Inst_idx];
	$mach=$proc_info[$i][$Mach_idx];
	$miss=$proc_info[$i][$Miss_idx];
	$hung=$proc_info[$i][$Hung_idx];
	printf($outfile "%-30s \t%-10s \t%-12s \t%d \t%d\n", $proc, $inst, $mach, $miss, $hung);
    }

    print($outfile "\n\nDetails on individual machines...\n\n");
    print($outfile "\t\tProcess-restarts\n");
    printf($outfile "Machine \tMode 1 \tMode 2 \tSystem restarts\n");
    printf($outfile "------- \t------ \t------ \t---------------\n");
    for ($i=0; $i<$num_machine_proc_info; $i++) {
	$mach_idx=$Mach_idx - 2;
	$miss_idx=$Miss_idx - 2;
	$hung_idx=$Hung_idx - 2;
        $syst_idx=$hung_idx + 1;
	
	$mach=$machine_proc_info[$i][$mach_idx];
	$miss=$machine_proc_info[$i][$miss_idx];
	$hung=$machine_proc_info[$i][$hung_idx];
	$syst=$machine_proc_info[$i][$syst_idx];
	printf($outfile "%-12s \t%d \t%d \t%d\n", $mach, $miss, $hung, $syst);
    }
}


#---------------------------------------------------------------------
# Subroutine: Print_summary_reliabilty_stats()
#
# Usage:      $return_val=Print_summary_reliability_stats($output_file, ...., $debug_flag)
#
# Function:   Print the reliability stats to the output_file
#
# Input:      
#             
# Output:     Returns (in return_val), 1 if successful or 0 on error.
# 
# Overview:   
#         
#
sub Print_summary_reliability_stats
{	
    local ($outfile, $span, $pct_impaired, $do_totals, $debug_flag) = @_;

    # Initialize

    $ret_val=0;

    # Find reliability rather than downtime percentage

    if ($total_num_proc_restarts == 0) {
	$process_rel = 100.0;
    } else {
	$process_rel = 100.0 - $pct_impaired;
    }

    # Print
 
    if (!$do_totals) {
	print($outfile "\n\n---------------------------------------------------------------\n");
	print($outfile "Statistics for process restarts...\n");
    }
    else {
	print($outfile "Date: \t$datetime\n");
    }

    printf($outfile "Time span (hours) covered: \t%7.2f\n", $span);
    printf($outfile "Process reliability: \t\t%5.2f%\n", $process_rel);
    print($outfile "\n");

    # Return

    $ret_val=1;
    return($ret_val);
}


#---------------------------------------------------------------------
# Subroutine: Print_detailed_process_gaps()
#
# Usage:      $return_val=Print_detailed_process_gaps($output_file, ...., $debug_flag)
#
# Function:   Print the downtime stats to the output_file
#
# Input:      
#             
# Output:     Returns (in return_val), 1 if successful or 0 on error.
# 
# Overview:   
#         
#
sub Print_detailed_process_gaps
{	
    local ($outfile, $start, $end, *arr_gaps, *arr_proc_gaps, $debug_flag) = @_;

    # Initialize

    $ret_val=0;
    $num_gaps=@arr_gaps;
    $num_proc_gaps=@arr_proc_gaps;

    # Return if no gaps

    if (($num_gaps == 0) || ($arr_gaps[0][0] < 0)) {
	if ($debug_flag) {
	    print(STDERR "No gaps. Will not print details.\n");
	}
	return(1);
    }

    # Print
 
    print($outfile "\n\n");
    print($outfile "The system time gaps were:\n\n");
    printf($outfile "Gap #\tStart\t\t\tEnd\t\t\tLength (secs)\n");
	printf($outfile "-----\t-----\t\t\t---\t\t\t-------------\n");
    for ($i=0; $i<$num_gaps; $i++) {
	$start=$arr_gaps[$i][$Gap_start];
	$end=$arr_gaps[$i][$Gap_end];
	$length=$end - $start;

	($is_ok, $start_string)=PMP_conv_utime_to_human($start, $tz_flag, $debug_flag);
	($is_ok, $end_string)=PMP_conv_utime_to_human($end, $tz_flag, $debug_flag);
	printf($outfile "$i\t$start_string\t$end_string\t$length\n");
    }

    print(OUTFILE "\n\nDetails on individual processes...\n\n");
    printf(OUTFILE "%-3s %-4s %-20s \t%-12s \t%-12s \t%-17s %-17s %-10s\n", "#", "Gap#", "Process", "Instance", "Machine", "Start", "End", "Length \(secs\)");
    printf(OUTFILE "%-3s %-4s %-20s \t%-12s \t%-12s \t%-17s %-17s %-10s\n", "---", "----", "-------", "--------", "-------", "-----------------", "-----------------", "------");
    for ($i=0; $i<$num_proc_gaps; $i++) {
	$start=$arr_proc_gaps[$i][$Gap_start];
	$end=$arr_proc_gaps[$i][$Gap_end];
	$length=$end-$start;
	$gap_num=$arr_proc_gaps[$i][$Gap_number];
	$proc=$arr_proc_gaps[$i][$Gap_proc_name];
	$inst=$arr_proc_gaps[$i][$Gap_proc_instance];
	$mach=$arr_proc_gaps[$i][$Gap_proc_machine];

	($is_ok, $start_string)=PMP_conv_utime_to_human($start, $tz_flag, $debug_flag);
	($is_ok, $end_string)=PMP_conv_utime_to_human($end, $tz_flag, $debug_flag);
	printf(OUTFILE "%-3d %-4d %-20s \t%-12s \t%-12s \t%-17s %-17s %-10d\n", $i, $gap_num, $proc, $inst, $mach, $start_string, $end_string, $length);
    }

    $ret_val=1;
    return($ret_val);
}


#---------------------------------------------------------------------
# Subroutine: Print_proc_category_stats()
#
# Usage:      $return_val=Print_proc_category_stats($output_file, ...., $debug_flag)
#
# Function:   Print the process category downtime stats to the output_file
#
# Input:      
#             
# Output:     Returns (in return_val), 1 if successful or 0 on error.
# 
# Overview:   
#         
#
sub Print_proc_category_stats
{	
    local ($outfile, $start_utime, $end_utime, *arr_priorities_downtime, $debug_flag) = @_;

    # Initialize

    $ret_val=0;

    # Print

    print($outfile "Process reliability by category:\n");
 
    $num_priorities=@arr_priorities_downtime;

    if ($num_priorities <= 0) {
	print($outfile "\tUnavailable\n");
    }

    for ($i=0; $i<$num_priorities-1; $i++) {
	$priority=$arr_priorities_downtime[$i][$Pri_idx];
	$pct_reliable=100.0 - $arr_priorities_downtime[$i][$Pri_pct_impaired];
	printf($outfile "\tCategory $priority ($arr_priorities_downtime[$i][$Pri_descrip_idx]) processes:\t%5.2f%\n", $pct_reliable);
    }

    $ret_val=1;
    return($ret_val);
}


#---------------------------------------------------------------------------
# Subroutine: writeLdataInfo
#
# Usage:      $return_val = writeLdataInfo($ldata_handle, $filename,
#                                          $utime, $ldatadir, $debug)
#
# Function:   Write a latest_data_info file pointed to by $ldata_handle
#
# Input:      $ldata_handle     handle for LDATA file
#             $filename         latest filename written
#             $utime            time of filename (in UNIX time)
#             $ldatadir         directory to write the ldata info file to
#             $debug            debug flag
#
# Output:     $return_val       1 on success, 0 on error
#
# Overview:   
#

sub writeLdataInfo {
  local ($ldata_handle, $filename, $utime, $in_ldatadir, $debug) = @_;

  local($return_val, $subname);
  local($nfcasts, $file_ext, $user_info_1, $user_info_2);
  local($fcast_lead_times, $just_filename);
  local($last_slash, $last_dot, $filename_no_ext, $len_ext, $len_in_ldatadir);
  local($use_ldata_dir, $len_rap_data_dir);

  # Set defaults

  $return_val=0;
  $subname="writeLdataInfo";

  # Debug

  if ($debug) {
    print (STDERR "Input to $subname...\n");
    print (STDERR "\thandle: $ldata_handle, dir: $in_ldatadir, filename: $filename, utime: $utime\n");
  }
   
  # Need to extract the filename extension and filename relative
  # to the $in_ldatadir

  $len_in_ldatadir=length($in_ldatadir);
  $just_filename=substr($filename, $len_in_ldatadir + 1);
  $last_dot=rindex($just_filename, '.');
  $file_ext=substr($just_filename, $last_dot + 1);
  $len_ext=length($file_ext);
  $filename_no_ext=substr($just_filename, 0, $last_dot);

  # For LdataWriter need to set the directory relative to rap_data_dir
  
  if ($UseLdataWriter) {
      $found_index=index($in_ldatadir, $Rap_data_dir);
      if ($found_index < 0) {
	  $use_ldata_dir = $in_ldatadir;
      } else {
	  $len_rap_data_dir=length($Rap_data_dir);
	  $use_ldata_dir = substr($in_ldatadir, $len_rap_data_dir + 1);
      }
  }
  
  # Set the other fields for the ldata file
  # user_info_1 is the filename
  # user_info_2 is the full filename
  # nfcasts is the number of forecasts
  # fcast_lead_times is the forecast lead time
  # Need to remove the extension from the filename for user_info_1
 
  $nfcasts=0;
  $user_info_1=$filename_no_ext;
  $user_info_2=$just_filename;
  $fcast_lead_times="";

  # Write the LDATA info file

  if ($UseLdataWriter) {
      $cmd="LdataWriter -dir $use_ldata_dir -ext $file_ext -info1 $user_info_1 -info2 $user_info_2";
      if ($debug) {
	  print(STDERR "$prog: $subname: running $cmd\n");
      }
      system($cmd);
  } else {
      if ($debug) {
	  print(STDERR "$prog: $subname: $Today: Calling LDATA_info_write with input...\n");
	  print(STDERR "\thandle: $ldata_handle, dir: $in_ldatadir, utime: $utime\n");
	  print(STDERR "\text: $file_ext, info1: $user_info_1, info2: $user_info_2\n");
	  print(STDERR "\tnfcasts: $nfcasts, fcast_lead_times: $fcast_lead_times\n");
      }

      &LDATA_info_write($ldata_handle, $in_ldatadir, $utime, $file_ext, $user_info_1, $user_info_2, $nfcasts, $fcast_lead_times);
  }

  # Done

  $return_val = 1;
  return($return_val);
}


# ------------------------ START OF MAIN ---------------------------
use Getopt::Long;
use Env;
use Cwd;
Env::import();

sub badArg;
sub translateDataDir;
sub verifyDataDir;

#
# Set program defaults
#
$send_stats_email=0;
$send_summary_email=0;
$debug_flag=0;
$print_category_stats=0;
$do_totals=0;
$do_totals_outfile=0;
$do_summary_outfile=0;
$do_ldatainfo=0;
$UseLdataWriter=0;
$tz_flag=$Use_local;    # Use LOCAL time, =2 for GMT

#
# Get the program basename.
#
($prog = $0) =~ s|.*/||;

#
# Save the usage to print to the user if there is a problem
#
$usage =                                                 
    "\nUsage: $prog -l logfile-name -p process-list-file [-adegmorstu] [-w dir]\n" .
    "   -a --address <filename>            : Name of file containing email addresses to send full stats file to\n" .
    "                                        (no email sent if file not specified)\n".
    "   -c --catlist <proc-category-list-file> : Name of the process category list file to read\n" .
    "   -d --debug                         : Print debugging messages\n" .
    "   -e --end <YYYYmmdd/hhmmss>         : End time for log statistics\n" .
    "   -g --gmt                           : Flag to use GMT. Default is localtime.\n" .
    "   -h --help                          : Print this usage message\n" .
    "   -l --logfile <logfile-to-read>     : Name of the procmap_auto_restart.log to read (REQUIRED)\n" .
    "   -m --map_host <hostname>           : Name of the procmap_host to run print_procmap on\n" .
    "   -o --outfile <output-filename>     : Name of file to output statistics to\n" .
    "   -p --proc_list <process-list-file> : Name of the process list file to read (REQUIRED)\n" .
    "   -r --rmail_summary <filename>      : Name of file containing email addresses to send summary file to\n" .
    "                                        (no email sent if file not specified)\n".
    "   -s --start <YYYYmmdd/hhmmss>       : Start time for log statistics\n" .
    "   -t --total_outfile <filename>      : Name of file to output total pct downtime only to\n" .
    "   -u --ummary_outfile <filename>     : Name of file to output summary statistics to\n" .
    "   -w --writeldatainfo <dir>          : Write a _latest_data_info file to the specified directory.\n" .
    "   -x --xternLdataWriter              : Use the external binary LdataWriter to write the\n " .
    "                                        _latest_data_info file. Default is to use a Perl\n" .
    "                                        function in Toolsa.pm\n" ;
#
# Get the arguments from the command line
#
$result = &GetOptions('address=s',
		      'catlist=s',
		      'debug', 
		      'end=s',
		      'gmt',
		      'help', 
		      'logfile=s',
		      'map_host=s',
		      'outfile=s', 
		      'proc_list=s',
		      'rmail_summary=s',
		      'start=s',
                      'total_outfile=s',
		      'ummary_outfile=s',
		      'writeldatainfo=s',
		      'xternLdataWriter',
                       '<>', \&badArg );

if ( $result == 0 || $opt_help ) {
   print $usage;
   exit 0;
}

if ($opt_debug) {
    print(STDERR "Input options specified: \n");
    print(STDERR "  address: $opt_address\n");
    print(STDERR "  debug: $opt_debug\n");
    print(STDERR "  gmt: $opt_gmt\n");
    print(STDERR "  log file: $opt_logfile\n");
    print(STDERR "  procmap host: $opt_map_host\n");
    print(STDERR "  output file: $opt_outfile\n");
    print(STDERR "  summary output file: $opt_ummary_outfile\n");
    print(STDERR "  totals only output file: $opt_total_outfile\n");
    print(STDERR "  process list file: $opt_proc_list\n");
    print(STDERR "  rmail summary file: $opt_rmail_summary\n");
    print(STDERR "  category list file: $opt_catlist\n");
    print(STDERR "  start time: $opt_start\n");
    print(STDERR "  end time: $opt_end\n");
    print(STDERR "  write ldata_info file: $opt_writeldatainfo\n");
    print(STDERR "  xternLdataWriter: $opt_xternLdataWriter\n");
}

#
# Error checking on command line arguments
#

if ($opt_address) {
    $send_stats_email=1;
}

if ($opt_gmt) {
    $tz_flag=$Use_GMT;
}

if (!$opt_logfile) {
    print(STDERR "ERROR: You must specify an input logfile to read\n");
    print $usage;
    exit 0;
}

if (!$opt_map_host) {
    $procmap_host = "local";
}
else {
    $procmap_host = $opt_map_host;
}

if (!$opt_proc_list) {
    print(STDERR "ERROR: You must specify a process list to read\n");
    print $usage;
    exit 0;
}

if ($opt_rmail_summary) {
    $send_summary_email=1;
} 

if ($opt_writeldatainfo) {
    $do_ldatainfo=1;
    $LdataInfoDir=$opt_writeldatainfo;
    if (!-d $LdataInfoDir) {
	print(STDERR "ERROR: The ldata info write directory $LdataInfoDir does not exist\n");
	exit 0;
    }
}

if ($opt_xternLdataWriter) {
    $UseLdataWriter=1;
    
    # Need the $RAP_DATA_DIR for LdataWriter
    $Rap_data_dir=$ENV{'RAP_DATA_DIR'};
}

if (!$opt_start) {
    print(STDERR "WARNING: You did NOT specify a start time\n");
    print(STDERR "         generated statistics will be misleading!\n");
    print(STDERR "         Will use default of first timestamp in logfile\n");
}

if (!$opt_end) {
    print(STDERR "WARNING: You did NOT specify an end time\n");
    print(STDERR "         generated statistics will be misleading!\n");
    print(STDERR "         Will use default of last timestamp in logfile\n");
}

if ($opt_debug) {
    $debug_flag=1;
}

# ------------- Initialization ---------------------------
#
# Get date in several formats for different uses
#
if ($tz_flag == $Use_local) {
    $tz_string="";
} else {
    $tz_string="-u";
}
	

$dateonly = `date $tz_string +%Y%m%d`;
chop($dateonly);
$datetimestamp = `date $tz_string +%Y%m%d%H%M%S`;
chop($datetimestamp);
$datetime=`date $tz_string`;
chop($datetime);

#
# Create the filename for the output stats files if needed
#

if (!$opt_outfile) {
    $output_file="./" . $dateonly . "_procmap.stats";
}
else {
    $output_file=$opt_outfile;
}

if ($opt_ummary_outfile) {
    $do_summary_outfile=1;
    $summary_output_file=$opt_ummary_outfile;
}

if ($opt_total_outfile) {
    $do_totals_outfile=1;
    $total_output_file=$opt_total_outfile;
}

#
# Copy the input log file to a timestamped filename before parsing
#

$save_logfile="/tmp/procmap_tmp_logfile." . $datetimestamp;
if ($debug_flag) {
    print(STDERR "Copying $opt_logfile to a temporary file for reading: $save_logfile\n");
}

system("cp $opt_logfile $save_logfile");

#
# Test that we can open the output file(s)
#

unless (open(OUTFILE, "> $output_file")) {
    print(STDERR "ERROR: Cannot open the output file $output_file\n");
    exit 0;
}

if ($do_summary_outfile) {
    unless (open(SUMMARY_OUTFILE, "> $summary_output_file")) {
	print(STDERR "ERROR: Cannot open the output file $summary_output_file\n");
	exit 0;
    }
}

if ($do_totals_outfile) {
    unless (open(TOTALS_OUTFILE, "> $total_output_file")) {
	print(STDERR "ERROR: Cannot open the output file $total_output_file\n");
	exit 0;
    }
}

# ---------------------- Main processing ---------------------------
#
# Convert the start/stop times to UNIX time so can do something with them
# If the start/stop times are NOT specified, use the first and last lines
# in the procmap_auto_restart.log file as the defaults. Need to handle the
# special case where the logfile is empty ($nlines == 0).
#

($is_ok, $first_line, $last_line, $nlines) = PMP_get_log_first_last_line($save_logfile, $debug_flag);
if (($is_ok < 1) && ($nlines < 0)) {
    print(STDERR "ERROR: Cannot get the first and last lines from logfile $opt_logfile\n");
    exit 0;
}

$empty_logfile=0;
if ($nlines == 0) {
    $empty_logfile = 1;

    # Zero-out variables so will print correctly
    $num_sys_restarts=0;
    $total_num_proc_restarts=0;
    $num_proc_miss_restarts=0;
    $num_proc_hung_restarts=0;
}

if (($nlines == 0) && (!$opt_start) && (!$opt_end)) {
    print(STDERR "WARNING: The logfile $opt_logfile is empty and no start/end times\n");
    print(STDERR "\twere specified. Cannot calculate time-based statistics.\n");
}

if ($opt_start) {
    ($is_ok, $start_utime)=Date2utime($opt_start, $tz_flag, $debug_flag);
}
elsif ((!$opt_start) && (!$empty_logfile)) {
    ($is_ok, $start_utime)=PMP_extract_utime_from_logline($first_line, $debug_flag);

    if ($is_ok == 0) {
	print(STDERR "ERROR: Cannot extract a start time from the first line in the log\n");
	exit 0;
    }
}

if ($opt_end) {
    ($is_ok, $end_utime)=Date2utime($opt_end, $tz_flag, $debug_flag);
}
elsif ((!$opt_end) && (!$empty_logfile)) {
    ($is_ok, $end_utime)=PMP_extract_utime_from_logline($last_line, $debug_flag);

    if ($is_ok == 0) {
	print(STDERR "ERROR: Cannot extract an end time from the last line in the log\n");
	exit 0;
    }
}

#
# Generate statistics on the number of machines and processes
#

$timespan_secs=$end_utime - $start_utime;
$timespan_mins=$timespan_secs / 60;
$timespan_hours=$timespan_mins / 60;

($is_ok, $num_procs, $num_machines)=PMP_get_num_procs_machines($opt_proc_list, $debug_flag);
if ($is_ok < 1) {
    print(STDERR "ERROR: Cannot get the number of processes and machines from $opt_proc_list\n");
    exit 0;
}

#
# Generate statistics on the number of restarts
# Skip if the logfile is empty (assume no restarts)

if (!$empty_logfile) {
    ($is_ok, $num_sys_restarts, $num_proc_miss_restarts, $num_proc_hung_restarts) = PMP_get_process_stats($save_logfile, $start_utime, $end_utime, *proc_info, *machine_proc_info, $debug_flag);
    if ($is_ok < 1) {
	print(STDERR "ERROR: Cannot get the details on process restarts\n");
	exit 0;
    }
    $total_num_proc_restarts=$num_proc_miss_restarts + $num_proc_hung_restarts;
    
    $is_ok = PMP_get_machine_proc_stats(*proc_info, *machine_proc_info, $debug_flag);
    if ($is_ok < 1) {
	print(STDERR "ERROR: Cannot get the number of process restarts per machine\n");
	exit 0;
    }

    #
    # Generate statistics on the amount of system down/impaired time
    #

    ($is_ok, $total_down_time)=PMP_get_sys_time_gaps($save_logfile, $procmap_host, $start_utime, $end_utime, *arr_gaps, *arr_proc_gaps, $Restart_sleep_secs, $debug_flag);
    if ($is_ok < 1) {
	print(STDERR "WARNING: Cannot get the system impaired time gaps\n");
    }

    ($is_ok, $pct_impaired)=PMP_get_sys_impaired_pct($start_utime, $end_utime, *arr_proc_gaps, $num_procs, $debug_flag);
    if ($is_ok < 1) {
	print(STDERR "WARNING: Cannot get the system impaired percentage\n");
    }

    #
    # Generate statistics on the process category down/impaired time.
    # Skip if a process category list was not specified.
    #

    if ($opt_catlist) {
	$is_ok=PMP_get_category_time_gaps($opt_proc_list, $opt_catlist, *arr_proc_gaps, *arr_priorities_downtime, $debug_flag);

	$print_category_stats=1;
	if ($is_ok < 1) {
	    print(STDERR "WARNING: Cannot get the process category impaired time gaps\n");
	    $print_category_stats=0;
	}

	$is_ok=PMP_get_cat_impaired_pct($start_utime, $end_utime, *arr_priorities_downtime, $debug_flag);
	if ($is_ok < 1) {
	    print(STDERR "WARNING: Cannot get process category percent time impaired\n");
	    $print_category_stats=0;
	}
    } #endif (opt_catlist)
    else {
	if ($debug_flag) {
	    print(STDERR "WARNING: Cannot calculate process category down/impaired stats\n");
	    print(STDERR "         since a process category list file was NOT specified\n");
	}
    } 

} #endif (!empty_logfile)

#
# Print to the output files
#

# ...Print headers...

$is_ok=Print_header(OUTFILE, $datetime, $opt_logfile, $opt_proc_list, $opt_start, $opt_end, $empty_logfile, $timespan_hours, $first_line, $last_line, $debug_flag);
if ($do_summary_outfile) {
    $is_ok=Print_header(SUMMARY_OUTFILE, $datetime, $opt_logfile, $opt_proc_list, $opt_start, $opt_end, $empty_logfile, $timespan_hours, $first_line, $last_line, $debug_flag);
}

# ...Print system summary...

$is_ok=Print_system_summary(OUTFILE, $num_procs, $num_machines, $num_sys_restarts, $total_num_proc_restarts, $num_proc_miss_restarts, $num_proc_hung_restarts, $debug_flag);
if ($do_summary_outfile) {
    $is_ok=Print_system_summary(SUMMARY_OUTFILE, $num_procs, $num_machines, $num_sys_restarts, $total_num_proc_restarts, $num_proc_miss_restarts, $num_proc_hung_restarts, $debug_flag);
}

# ...Print process restart details...
# Skip if logfile is empty, no restarts

if (!$empty_logfile) {
    $is_ok=Print_detailed_proc_restarts(OUTFILE, *proc_info, *machine_proc_info, $debug_flag);
}

# ...Print summary reliability stats...

$is_ok=Print_summary_reliability_stats(OUTFILE, $timespan_hours, $pct_impaired, $do_totals, $debug_flag);
if ($do_summary_outfile) {
    $is_ok=Print_summary_reliability_stats(SUMMARY_OUTFILE, $timespan_hours, $pct_impaired, $do_totals_oufile, $debug_flag);
}

# ...Print category stats...
# SKIP if no process category list file was specified *OR* processes don't have
# the category/priority in the process list file. 

if ($print_category_stats) {

    $is_ok=Print_proc_category_stats(OUTFILE, $start_utime, $end_utime, *arr_priorities_downtime, $debug_flag);

    if ($do_summary_outfile == 1) {
	$is_ok=Print_proc_category_stats(SUMMARY_OUTFILE, $start_utime, $end_utime, *arr_priorities_downtime, $debug_flag);
    }
}

# ...Print details on process gaps...
# Skip if logfile is empty, no restarts

if (!$empty_logfile) {
    $is_ok=Print_detailed_process_gaps(OUTFILE, $start_utime, $end_utime, *arr_gaps, *arr_proc_gaps, $debug_flag);
}

#
# Print to the totals only output file
#
if ($do_totals_outfile) {
    $do_totals=1;
    $is_ok=Print_summary_reliability_stats(TOTALS_OUTFILE, $timespan_hours, $pct_impaired, $do_totals, $debug_flag);
}

#
# Close the output files
#

close(OUTFILE);
if ($do_summary_outfile) {
    close(SUMMARY_OUTFILE);
}

if ($do_totals_outfile) {
    close(TOTALS_OUTFILE);
}

#
# Remove the temporary log file
#

if ($debug_flag) {
    print(STDERR "Deleting the temporary logfile $save_logfile\n");
}
unlink($save_logfile);

#
# email the stats files (if requested)
#

chop($current_host);
$project = $ENV{'PROJECT'};
$subject="$project ($current_host): daily restarts";

if ($send_stats_email == 1) {
    $is_ok = PMP_email_file($opt_address, $output_file, $subject, $debug_flag);
    if ($is_ok < 1) {
	print(STDERR "ERROR: Problem sending email to address file $opt_address\n");
	exit 0;
    }
}

if ($send_summary_email == 1) {
    $is_ok = PMP_email_file($opt_rmail_summary, $summary_output_file, $subject, $debug_flag);
    if ($is_ok < 1) {
	print(STDERR "ERROR: Problem sending email to address file $opt_rmail_summary\n");
	exit 0;
    }
}

#
# Write a latest data info file (if requested)
#

if ($do_ldatainfo) {
    $ldata_handle=&LDATA_init_handle($prog, $debug_flag);
    $is_ok = &writeLdataInfo($ldata_handle, $output_file, $start_utime, $LdataInfoDir, $debug_flag);
}


#
# Done
#

exit 1;
