/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
/* ** Copyright UCAR                                                         */
/* ** University Corporation for Atmospheric Research (UCAR)                 */
/* ** National Center for Atmospheric Research (NCAR)                        */
/* ** Boulder, Colorado, USA                                                 */
/* ** BSD licence applies - redistribution and use in source and binary      */
/* ** forms, with or without modification, are permitted provided that       */
/* ** the following conditions are met:                                      */
/* ** 1) If the software is modified to produce derivative works,            */
/* ** such modified software should be clearly marked, so as not             */
/* ** to confuse it with the version available from UCAR.                    */
/* ** 2) Redistributions of source code must retain the above copyright      */
/* ** notice, this list of conditions and the following disclaimer.          */
/* ** 3) Redistributions in binary form must reproduce the above copyright   */
/* ** notice, this list of conditions and the following disclaimer in the    */
/* ** documentation and/or other materials provided with the distribution.   */
/* ** 4) Neither the name of UCAR nor the names of its contributors,         */
/* ** if any, may be used to endorse or promote products derived from        */
/* ** this software without specific prior written permission.               */
/* ** DISCLAIMER: THIS SOFTWARE IS PROVIDED 'AS IS' AND WITHOUT ANY EXPRESS  */
/* ** OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED      */
/* ** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.    */
/* *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=* */
////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program MM5Ingest
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

/**
 *
 * @file Params.cc
 *
 * @class Params
 *
 * This class is automatically generated by the Table
 * Driven Runtime Parameters (TDRP) system
 *
 * @note Source is automatically generated from
 *       paramdef file at compile time, do not modify
 *       since modifications will be overwritten.
 *
 *
 * @author Automatically generated
 *
 */
#include "Params.hh"
#include <cstring>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   const char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  // return number of args consumed.
  //

  int Params::isArgValidN(const char *arg)
  {
    return (tdrpIsArgValidN(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   const char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(const char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   const char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   const char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(const char *param_source_str,
                          char **override_list,
                          const char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(const char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params/--params path ] specify params file path\n"
        << "   [ -check_params/--check_params] check which params are not set\n"
        << "   [ -print_params/--print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(const char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(const char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("MM5Ingest reads output files from the MM5 model and writes\nMDV data. It also allows the computation of some turbulence\nindicies. Both MM5 version 2 and 3 input files are coped with.\n\nOne arcane detail of the program's operation is that the base\nstate variables are placed in the user data section of the\nmaster header as follows :\n\nmhdr.user_data_fl32[0] =  Base state sea-level pressure (Pa)\nmhdr.user_data_fl32[1] =  Base state sea-level temperature (K)\nmhdr.user_data_fl32[2] =  Base state lapse rate d(T)/d(ln P)\nmhdr.user_data_fl32[3] =  Base state isothermal stratospheric\n                          temperature (K)\nmhdr.user_data_fl32[4] =  Top pressure (Pa)\n\nThis allows the vertical level scheme to be changed from sigma-p by\nother applications if desired.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed with the appropriate level of detail.");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_WARNINGS");
      tt->enum_def.fields[1].val = DEBUG_WARNINGS;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[2].val = DEBUG_NORM;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[3].val = DEBUG_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'dbzConstantIntercepts'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("dbzConstantIntercepts");
    tt->descr = tdrpStrDup("Somewhat arcance option involving how the derived\ndbz field is calculated.");
    tt->help = tdrpStrDup("If TRUE (default) then a simple constant intercept\nscheme is used. If FALSE, a more complex scheme is used.\nRelevant only if the DBZ field is being derived.");
    tt->val_offset = (char *) &dbzConstantIntercepts - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("Test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("PROGRAM MODES OF OPERATION.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operation mode");
    tt->help = tdrpStrDup("Program may be run in two modes, archive and realtime. In realtime mode, the analysis is performed for each volume scan as it becomes available. In archive mode, the file list is obtained from the command line.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("INPUT DATA.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'realtime_input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("realtime_input_dir");
    tt->descr = tdrpStrDup("Directory for input MM5 data - REALTIME mode.");
    tt->help = tdrpStrDup("The latest_data_info file in this directory is updated each time the model adds a forecast time step to the output file.");
    tt->val_offset = (char *) &realtime_input_dir - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'DomainString'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("DomainString");
    tt->descr = tdrpStrDup("If set to other than NULL, filenames must contain this string to be ingested.");
    tt->help = tdrpStrDup("This can be used to only ingest one domain.");
    tt->val_offset = (char *) &DomainString - &_start_;
    tt->single_val.s = tdrpStrDup("");
    tt++;
    
    // Parameter 'use_ldata'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_ldata");
    tt->descr = tdrpStrDup("Set to TRUE if MM5 is writing a _latest_data_info file.");
    tt->help = tdrpStrDup("Realtime mode only.");
    tt->val_offset = (char *) &use_ldata - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max age of input data - REALTIME mode.");
    tt->help = tdrpStrDup("For realtime only - max age of input data for it to be valid (secs). If the latest_data_info file is older than this, the program waits for new data.");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 0;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'min_forecast_dtime'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_forecast_dtime");
    tt->descr = tdrpStrDup("The minimum forecast time (secs) relative to model start time.");
    tt->help = tdrpStrDup("Only forecast times greater than or equal to this dtime are used. This allows us to ignore the first n forecasts, which may not be good anyway due to model spin-up requirements.");
    tt->val_offset = (char *) &min_forecast_dtime - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'specify_lead_times'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("specify_lead_times");
    tt->descr = tdrpStrDup("Option to specify which lead times to process.");
    tt->help = tdrpStrDup("If FALSE, all lead times are processed. If TRUE, only files with lead times in the parameter 'lead_times' will be processed. If this is set, it will act together with min_forecast_dtime to limit the output times. For a forecast to be accepted it must have a lead time equal to or greater than min_forecast_dtime, and must also be in the lead_times array.");
    tt->val_offset = (char *) &specify_lead_times - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'lead_times'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("lead_times");
    tt->descr = tdrpStrDup("Array of lead times (secs).");
    tt->help = tdrpStrDup("If 'specify_lead_times' is TRUE, only the files with lead times matching this array will be processed.");
    tt->array_offset = (char *) &_lead_times - &_start_;
    tt->array_n_offset = (char *) &lead_times_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 0;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("OUTPUT DATA.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'round_leads'
    // ctype is '_round_lead_times_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("round_leads");
    tt->descr = tdrpStrDup("Option to round lead times and the temporal resolution, seconds, to use in the rounding.");
    tt->help = tdrpStrDup("If you have a lot of very rapid forecasts you may wish to set the temporal resolution to a lower value, or simply turn this feature off");
    tt->val_offset = (char *) &round_leads - &_start_;
    tt->struct_def.name = tdrpStrDup("round_lead_times_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("round_lead_times");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &round_leads.round_lead_times - (char *) &round_leads;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("lead_time_resolution_seconds");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &round_leads.lead_time_resolution_seconds - (char *) &round_leads;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pTRUE;
      tt->struct_vals[1].i = 900;
    tt++;
    
    // Parameter 'output_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_url");
    tt->descr = tdrpStrDup("Output URL.");
    tt->help = tdrpStrDup("The MM5 data is output to URL in MDV format.");
    tt->val_offset = (char *) &output_url - &_start_;
    tt->single_val.s = tdrpStrDup(".");
    tt++;
    
    // Parameter 'use_filename_for_gen_time'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_filename_for_gen_time");
    tt->descr = tdrpStrDup("Option to use date and time in model ouput filename for gen_time instead of model cold start time.");
    tt->help = tdrpStrDup("If FALSE, gen_time is the model cold start time (old behavior). If TRUE, the gen_time becomes the time given in the model output filename which better represents the gen_time of that model run.");
    tt->val_offset = (char *) &use_filename_for_gen_time - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_parent_path_for_gen_time'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_parent_path_for_gen_time");
    tt->descr = tdrpStrDup("Option to use date and time from input path for gen_time instead of model cold start time.");
    tt->help = tdrpStrDup("If FALSE, gen_time is the model cold start time (old behavior). If TRUE, the gen_time becomes the time given in the input path (parent path) which better represents the gen_time of that model run. If use_filename_for_gen_time is TRUE, then apply use_filename_for_gen_time");
    tt->val_offset = (char *) &use_parent_path_for_gen_time - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("Supported MM5 raw and derived fields");
    tt->comment_text = tdrpStrDup("====== raw MM5 3-d fields - on cross (center) points =====\n\t\nU_FIELD, V_FIELD, TK_FIELD, Q_FIELD,\nCLW_FIELD, RNW_FIELD, ICE_FIELD,\nSNOW_FIELD, GRAUPEL_FIELD, NCI_FIELD,\nRAD_TEND_FIELD, W_FIELD, P_FIELD,\n\t\n======= raw MM5 3-d fields - on dot (corner) points =====\n\t\nNOTE: only applicable if output_projection is OUTPUT_PROJ_NATIVE\n\t\nU_CORNER_FIELD, V_CORNER_FIELD,\n\t\n========== derived 3-d fields ==========\n\t\nTC_FIELD, WSPD_FIELD, WDIR_FIELD, Z_FIELD, DIVERGENCE_FIELD,\nPRESSURE_FIELD, RH_FIELD, DEWPT_FIELD, TURB_FIELD, ICING_FIELD,\nCLW_G_FIELD, RNW_G_FIELD, Q_G_FIELD,\nTHETA_FIELD, THETAE_FIELD, THETAV_FIELD, DBZ_3D_FIELD,\nTOT_CLD_CON_FIELD, (CLW_FIELD + ICE_FIELD)\n\t\n========== ITFA debug 3-d fields ==========\n\t\nBROWN1_FIELD, BROWN2_FIELD, CCAT_FIELD, COLSON_PANOFSKY_FIELD,\nDEF_SQR_FIELD, ELLROD1_FIELD, ELLROD2_FIELD, DUTTON_FIELD,\nENDLICH_FIELD, HSHEAR_FIELD, LAZ_FIELD, PVORT_FIELD,\nPVORT_GRADIENT_FIELD, NGM1_FIELD, NGM2_FIELD, RICHARDSON_FIELD,\nRIT_FIELD, SAT_RI_FIELD, STABILITY_FIELD, VORT_SQR_FIELD,\nVWSHEAR_FIELD,\nTKE_KH3_FIELD, TKE_KH4_FIELD, TKE_KH5_FIELD,\n\t\n========== raw MM5 2-d fields ==========\n\t\nGROUND_T_FIELD, RAIN_CON_FIELD, RAIN_NON_FIELD,\nTERRAIN_FIELD, CORIOLIS_FIELD, RES_TEMP_FIELD,\nLAND_USE_FIELD, SNOWCOVR_FIELD, TSEASFC_FIELD,\nPBL_HGT_FIELD, REGIME_FIELD, SHFLUX_FIELD, LHFLUX_FIELD,\nUST_FIELD, SWDOWN_FIELD, LWDOWN_FIELD,\nSOIL_T_1_FIELD, SOIL_T_2_FIELD, SOIL_T_3_FIELD,\nSOIL_T_4_FIELD, SOIL_T_5_FIELD, SOIL_T_6_FIELD,\nSOIL_M_1_FIELD, SOIL_M_2_FIELD, SOIL_M_3_FIELD,\nSOIL_M_4_FIELD\nT2_FIELD, Q2_FIELD, U10_FIELD, V10_FIELD,\nWEASD_FIELD, SNOWH_FIELD,LON_FIELD, LAT_FIELD\nHOURLY_CONV_RAIN_FIELD, HOURLY_NONC_RAIN_FIELD,\n\t\n========== derived 2-d fields ==========\n\t\nFZLEVEL_FIELD, RAIN_TOTAL_FIELD, HOURLY_RAIN_TOTAL_FIELD,\nRH2_FIELD, DEWPT2_FIELD,\nWSPD10_FIELD, WDIR10_FIELD,\nTHETA2_FIELD, THETAE2_FIELD, THETAV2_FIELD,\nMSLP2_FIELD, T2C_FIELD, Q2_G_FIELD, DBZ_2D_FIELD.\nCLOUD_FRACT_FIELD, TWP_FIELD, RWP_FIELD,\nTOT_CLD_CONP_FIELD -  Total cloud condensate Path -Vertical Integration of TOT_CLD_CON_FIELD \nCLWP_FIELD - Cloud Liquid Water Path - Vertical Integration of CLW_FIELD");
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_field_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Output fields with encoding type.");
    tt->help = tdrpStrDup("Note: do not use START_2D_FIELDS - this is only a marker.");
    tt->array_offset = (char *) &_output_fields - &_start_;
    tt->array_n_offset = (char *) &output_fields_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_t);
    tt->array_n = 8;
    tt->struct_def.name = tdrpStrDup("output_field_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("output_field_name_t");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_output_fields->name - (char *) _output_fields;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("output_field_name_t");
        tt->struct_def.fields[0].enum_def.nfields = 113;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("U_FIELD");
        tt->struct_def.fields[0].enum_def.fields[0].val = U_FIELD;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("V_FIELD");
        tt->struct_def.fields[0].enum_def.fields[1].val = V_FIELD;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("TK_FIELD");
        tt->struct_def.fields[0].enum_def.fields[2].val = TK_FIELD;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("Q_FIELD");
        tt->struct_def.fields[0].enum_def.fields[3].val = Q_FIELD;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("CLW_FIELD");
        tt->struct_def.fields[0].enum_def.fields[4].val = CLW_FIELD;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("RNW_FIELD");
        tt->struct_def.fields[0].enum_def.fields[5].val = RNW_FIELD;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("ICE_FIELD");
        tt->struct_def.fields[0].enum_def.fields[6].val = ICE_FIELD;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("SNOW_FIELD");
        tt->struct_def.fields[0].enum_def.fields[7].val = SNOW_FIELD;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("GRAUPEL_FIELD");
        tt->struct_def.fields[0].enum_def.fields[8].val = GRAUPEL_FIELD;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("NCI_FIELD");
        tt->struct_def.fields[0].enum_def.fields[9].val = NCI_FIELD;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("RAD_TEND_FIELD");
        tt->struct_def.fields[0].enum_def.fields[10].val = RAD_TEND_FIELD;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("W_FIELD");
        tt->struct_def.fields[0].enum_def.fields[11].val = W_FIELD;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("P_FIELD");
        tt->struct_def.fields[0].enum_def.fields[12].val = P_FIELD;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("U_CORNER_FIELD");
        tt->struct_def.fields[0].enum_def.fields[13].val = U_CORNER_FIELD;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("V_CORNER_FIELD");
        tt->struct_def.fields[0].enum_def.fields[14].val = V_CORNER_FIELD;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("TC_FIELD");
        tt->struct_def.fields[0].enum_def.fields[15].val = TC_FIELD;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("WSPD_FIELD");
        tt->struct_def.fields[0].enum_def.fields[16].val = WSPD_FIELD;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("WDIR_FIELD");
        tt->struct_def.fields[0].enum_def.fields[17].val = WDIR_FIELD;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("Z_FIELD");
        tt->struct_def.fields[0].enum_def.fields[18].val = Z_FIELD;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("DIVERGENCE_FIELD");
        tt->struct_def.fields[0].enum_def.fields[19].val = DIVERGENCE_FIELD;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("PRESSURE_FIELD");
        tt->struct_def.fields[0].enum_def.fields[20].val = PRESSURE_FIELD;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("RH_FIELD");
        tt->struct_def.fields[0].enum_def.fields[21].val = RH_FIELD;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("DEWPT_FIELD");
        tt->struct_def.fields[0].enum_def.fields[22].val = DEWPT_FIELD;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("TURB_FIELD");
        tt->struct_def.fields[0].enum_def.fields[23].val = TURB_FIELD;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("ICING_FIELD");
        tt->struct_def.fields[0].enum_def.fields[24].val = ICING_FIELD;
        tt->struct_def.fields[0].enum_def.fields[25].name = tdrpStrDup("CLW_G_FIELD");
        tt->struct_def.fields[0].enum_def.fields[25].val = CLW_G_FIELD;
        tt->struct_def.fields[0].enum_def.fields[26].name = tdrpStrDup("RNW_G_FIELD");
        tt->struct_def.fields[0].enum_def.fields[26].val = RNW_G_FIELD;
        tt->struct_def.fields[0].enum_def.fields[27].name = tdrpStrDup("Q_G_FIELD");
        tt->struct_def.fields[0].enum_def.fields[27].val = Q_G_FIELD;
        tt->struct_def.fields[0].enum_def.fields[28].name = tdrpStrDup("THETA_FIELD");
        tt->struct_def.fields[0].enum_def.fields[28].val = THETA_FIELD;
        tt->struct_def.fields[0].enum_def.fields[29].name = tdrpStrDup("THETAE_FIELD");
        tt->struct_def.fields[0].enum_def.fields[29].val = THETAE_FIELD;
        tt->struct_def.fields[0].enum_def.fields[30].name = tdrpStrDup("THETAV_FIELD");
        tt->struct_def.fields[0].enum_def.fields[30].val = THETAV_FIELD;
        tt->struct_def.fields[0].enum_def.fields[31].name = tdrpStrDup("DBZ_3D_FIELD");
        tt->struct_def.fields[0].enum_def.fields[31].val = DBZ_3D_FIELD;
        tt->struct_def.fields[0].enum_def.fields[32].name = tdrpStrDup("TOT_CLD_CON_FIELD");
        tt->struct_def.fields[0].enum_def.fields[32].val = TOT_CLD_CON_FIELD;
        tt->struct_def.fields[0].enum_def.fields[33].name = tdrpStrDup("BROWN1_FIELD");
        tt->struct_def.fields[0].enum_def.fields[33].val = BROWN1_FIELD;
        tt->struct_def.fields[0].enum_def.fields[34].name = tdrpStrDup("BROWN2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[34].val = BROWN2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[35].name = tdrpStrDup("CCAT_FIELD");
        tt->struct_def.fields[0].enum_def.fields[35].val = CCAT_FIELD;
        tt->struct_def.fields[0].enum_def.fields[36].name = tdrpStrDup("COLSON_PANOFSKY_FIELD");
        tt->struct_def.fields[0].enum_def.fields[36].val = COLSON_PANOFSKY_FIELD;
        tt->struct_def.fields[0].enum_def.fields[37].name = tdrpStrDup("DEF_SQR_FIELD");
        tt->struct_def.fields[0].enum_def.fields[37].val = DEF_SQR_FIELD;
        tt->struct_def.fields[0].enum_def.fields[38].name = tdrpStrDup("ELLROD1_FIELD");
        tt->struct_def.fields[0].enum_def.fields[38].val = ELLROD1_FIELD;
        tt->struct_def.fields[0].enum_def.fields[39].name = tdrpStrDup("ELLROD2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[39].val = ELLROD2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[40].name = tdrpStrDup("DUTTON_FIELD");
        tt->struct_def.fields[0].enum_def.fields[40].val = DUTTON_FIELD;
        tt->struct_def.fields[0].enum_def.fields[41].name = tdrpStrDup("ENDLICH_FIELD");
        tt->struct_def.fields[0].enum_def.fields[41].val = ENDLICH_FIELD;
        tt->struct_def.fields[0].enum_def.fields[42].name = tdrpStrDup("HSHEAR_FIELD");
        tt->struct_def.fields[0].enum_def.fields[42].val = HSHEAR_FIELD;
        tt->struct_def.fields[0].enum_def.fields[43].name = tdrpStrDup("LAZ_FIELD");
        tt->struct_def.fields[0].enum_def.fields[43].val = LAZ_FIELD;
        tt->struct_def.fields[0].enum_def.fields[44].name = tdrpStrDup("PVORT_FIELD");
        tt->struct_def.fields[0].enum_def.fields[44].val = PVORT_FIELD;
        tt->struct_def.fields[0].enum_def.fields[45].name = tdrpStrDup("PVORT_GRADIENT_FIELD");
        tt->struct_def.fields[0].enum_def.fields[45].val = PVORT_GRADIENT_FIELD;
        tt->struct_def.fields[0].enum_def.fields[46].name = tdrpStrDup("NGM1_FIELD");
        tt->struct_def.fields[0].enum_def.fields[46].val = NGM1_FIELD;
        tt->struct_def.fields[0].enum_def.fields[47].name = tdrpStrDup("NGM2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[47].val = NGM2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[48].name = tdrpStrDup("RICHARDSON_FIELD");
        tt->struct_def.fields[0].enum_def.fields[48].val = RICHARDSON_FIELD;
        tt->struct_def.fields[0].enum_def.fields[49].name = tdrpStrDup("RIT_FIELD");
        tt->struct_def.fields[0].enum_def.fields[49].val = RIT_FIELD;
        tt->struct_def.fields[0].enum_def.fields[50].name = tdrpStrDup("SAT_RI_FIELD");
        tt->struct_def.fields[0].enum_def.fields[50].val = SAT_RI_FIELD;
        tt->struct_def.fields[0].enum_def.fields[51].name = tdrpStrDup("STABILITY_FIELD");
        tt->struct_def.fields[0].enum_def.fields[51].val = STABILITY_FIELD;
        tt->struct_def.fields[0].enum_def.fields[52].name = tdrpStrDup("VORT_SQR_FIELD");
        tt->struct_def.fields[0].enum_def.fields[52].val = VORT_SQR_FIELD;
        tt->struct_def.fields[0].enum_def.fields[53].name = tdrpStrDup("VWSHEAR_FIELD");
        tt->struct_def.fields[0].enum_def.fields[53].val = VWSHEAR_FIELD;
        tt->struct_def.fields[0].enum_def.fields[54].name = tdrpStrDup("TKE_KH3_FIELD");
        tt->struct_def.fields[0].enum_def.fields[54].val = TKE_KH3_FIELD;
        tt->struct_def.fields[0].enum_def.fields[55].name = tdrpStrDup("TKE_KH4_FIELD");
        tt->struct_def.fields[0].enum_def.fields[55].val = TKE_KH4_FIELD;
        tt->struct_def.fields[0].enum_def.fields[56].name = tdrpStrDup("TKE_KH5_FIELD");
        tt->struct_def.fields[0].enum_def.fields[56].val = TKE_KH5_FIELD;
        tt->struct_def.fields[0].enum_def.fields[57].name = tdrpStrDup("START_2D_FIELDS");
        tt->struct_def.fields[0].enum_def.fields[57].val = START_2D_FIELDS;
        tt->struct_def.fields[0].enum_def.fields[58].name = tdrpStrDup("GROUND_T_FIELD");
        tt->struct_def.fields[0].enum_def.fields[58].val = GROUND_T_FIELD;
        tt->struct_def.fields[0].enum_def.fields[59].name = tdrpStrDup("RAIN_CON_FIELD");
        tt->struct_def.fields[0].enum_def.fields[59].val = RAIN_CON_FIELD;
        tt->struct_def.fields[0].enum_def.fields[60].name = tdrpStrDup("RAIN_NON_FIELD");
        tt->struct_def.fields[0].enum_def.fields[60].val = RAIN_NON_FIELD;
        tt->struct_def.fields[0].enum_def.fields[61].name = tdrpStrDup("TERRAIN_FIELD");
        tt->struct_def.fields[0].enum_def.fields[61].val = TERRAIN_FIELD;
        tt->struct_def.fields[0].enum_def.fields[62].name = tdrpStrDup("CORIOLIS_FIELD");
        tt->struct_def.fields[0].enum_def.fields[62].val = CORIOLIS_FIELD;
        tt->struct_def.fields[0].enum_def.fields[63].name = tdrpStrDup("RES_TEMP_FIELD");
        tt->struct_def.fields[0].enum_def.fields[63].val = RES_TEMP_FIELD;
        tt->struct_def.fields[0].enum_def.fields[64].name = tdrpStrDup("LAND_USE_FIELD");
        tt->struct_def.fields[0].enum_def.fields[64].val = LAND_USE_FIELD;
        tt->struct_def.fields[0].enum_def.fields[65].name = tdrpStrDup("SNOWCOVR_FIELD");
        tt->struct_def.fields[0].enum_def.fields[65].val = SNOWCOVR_FIELD;
        tt->struct_def.fields[0].enum_def.fields[66].name = tdrpStrDup("TSEASFC_FIELD");
        tt->struct_def.fields[0].enum_def.fields[66].val = TSEASFC_FIELD;
        tt->struct_def.fields[0].enum_def.fields[67].name = tdrpStrDup("PBL_HGT_FIELD");
        tt->struct_def.fields[0].enum_def.fields[67].val = PBL_HGT_FIELD;
        tt->struct_def.fields[0].enum_def.fields[68].name = tdrpStrDup("REGIME_FIELD");
        tt->struct_def.fields[0].enum_def.fields[68].val = REGIME_FIELD;
        tt->struct_def.fields[0].enum_def.fields[69].name = tdrpStrDup("SHFLUX_FIELD");
        tt->struct_def.fields[0].enum_def.fields[69].val = SHFLUX_FIELD;
        tt->struct_def.fields[0].enum_def.fields[70].name = tdrpStrDup("LHFLUX_FIELD");
        tt->struct_def.fields[0].enum_def.fields[70].val = LHFLUX_FIELD;
        tt->struct_def.fields[0].enum_def.fields[71].name = tdrpStrDup("UST_FIELD");
        tt->struct_def.fields[0].enum_def.fields[71].val = UST_FIELD;
        tt->struct_def.fields[0].enum_def.fields[72].name = tdrpStrDup("SWDOWN_FIELD");
        tt->struct_def.fields[0].enum_def.fields[72].val = SWDOWN_FIELD;
        tt->struct_def.fields[0].enum_def.fields[73].name = tdrpStrDup("LWDOWN_FIELD");
        tt->struct_def.fields[0].enum_def.fields[73].val = LWDOWN_FIELD;
        tt->struct_def.fields[0].enum_def.fields[74].name = tdrpStrDup("SOIL_T_1_FIELD");
        tt->struct_def.fields[0].enum_def.fields[74].val = SOIL_T_1_FIELD;
        tt->struct_def.fields[0].enum_def.fields[75].name = tdrpStrDup("SOIL_T_2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[75].val = SOIL_T_2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[76].name = tdrpStrDup("SOIL_T_3_FIELD");
        tt->struct_def.fields[0].enum_def.fields[76].val = SOIL_T_3_FIELD;
        tt->struct_def.fields[0].enum_def.fields[77].name = tdrpStrDup("SOIL_T_4_FIELD");
        tt->struct_def.fields[0].enum_def.fields[77].val = SOIL_T_4_FIELD;
        tt->struct_def.fields[0].enum_def.fields[78].name = tdrpStrDup("SOIL_T_5_FIELD");
        tt->struct_def.fields[0].enum_def.fields[78].val = SOIL_T_5_FIELD;
        tt->struct_def.fields[0].enum_def.fields[79].name = tdrpStrDup("SOIL_T_6_FIELD");
        tt->struct_def.fields[0].enum_def.fields[79].val = SOIL_T_6_FIELD;
        tt->struct_def.fields[0].enum_def.fields[80].name = tdrpStrDup("SOIL_M_1_FIELD");
        tt->struct_def.fields[0].enum_def.fields[80].val = SOIL_M_1_FIELD;
        tt->struct_def.fields[0].enum_def.fields[81].name = tdrpStrDup("SOIL_M_2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[81].val = SOIL_M_2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[82].name = tdrpStrDup("SOIL_M_3_FIELD");
        tt->struct_def.fields[0].enum_def.fields[82].val = SOIL_M_3_FIELD;
        tt->struct_def.fields[0].enum_def.fields[83].name = tdrpStrDup("SOIL_M_4_FIELD");
        tt->struct_def.fields[0].enum_def.fields[83].val = SOIL_M_4_FIELD;
        tt->struct_def.fields[0].enum_def.fields[84].name = tdrpStrDup("T2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[84].val = T2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[85].name = tdrpStrDup("Q2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[85].val = Q2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[86].name = tdrpStrDup("U10_FIELD");
        tt->struct_def.fields[0].enum_def.fields[86].val = U10_FIELD;
        tt->struct_def.fields[0].enum_def.fields[87].name = tdrpStrDup("V10_FIELD");
        tt->struct_def.fields[0].enum_def.fields[87].val = V10_FIELD;
        tt->struct_def.fields[0].enum_def.fields[88].name = tdrpStrDup("WEASD_FIELD");
        tt->struct_def.fields[0].enum_def.fields[88].val = WEASD_FIELD;
        tt->struct_def.fields[0].enum_def.fields[89].name = tdrpStrDup("SNOWH_FIELD");
        tt->struct_def.fields[0].enum_def.fields[89].val = SNOWH_FIELD;
        tt->struct_def.fields[0].enum_def.fields[90].name = tdrpStrDup("LON_FIELD");
        tt->struct_def.fields[0].enum_def.fields[90].val = LON_FIELD;
        tt->struct_def.fields[0].enum_def.fields[91].name = tdrpStrDup("LAT_FIELD");
        tt->struct_def.fields[0].enum_def.fields[91].val = LAT_FIELD;
        tt->struct_def.fields[0].enum_def.fields[92].name = tdrpStrDup("HOURLY_CONV_RAIN_FIELD");
        tt->struct_def.fields[0].enum_def.fields[92].val = HOURLY_CONV_RAIN_FIELD;
        tt->struct_def.fields[0].enum_def.fields[93].name = tdrpStrDup("HOURLY_NONC_RAIN_FIELD");
        tt->struct_def.fields[0].enum_def.fields[93].val = HOURLY_NONC_RAIN_FIELD;
        tt->struct_def.fields[0].enum_def.fields[94].name = tdrpStrDup("FZLEVEL_FIELD");
        tt->struct_def.fields[0].enum_def.fields[94].val = FZLEVEL_FIELD;
        tt->struct_def.fields[0].enum_def.fields[95].name = tdrpStrDup("RAIN_TOTAL_FIELD");
        tt->struct_def.fields[0].enum_def.fields[95].val = RAIN_TOTAL_FIELD;
        tt->struct_def.fields[0].enum_def.fields[96].name = tdrpStrDup("HOURLY_RAIN_TOTAL_FIELD");
        tt->struct_def.fields[0].enum_def.fields[96].val = HOURLY_RAIN_TOTAL_FIELD;
        tt->struct_def.fields[0].enum_def.fields[97].name = tdrpStrDup("RH2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[97].val = RH2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[98].name = tdrpStrDup("DEWPT2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[98].val = DEWPT2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[99].name = tdrpStrDup("WSPD10_FIELD");
        tt->struct_def.fields[0].enum_def.fields[99].val = WSPD10_FIELD;
        tt->struct_def.fields[0].enum_def.fields[100].name = tdrpStrDup("WDIR10_FIELD");
        tt->struct_def.fields[0].enum_def.fields[100].val = WDIR10_FIELD;
        tt->struct_def.fields[0].enum_def.fields[101].name = tdrpStrDup("THETA2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[101].val = THETA2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[102].name = tdrpStrDup("THETAE2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[102].val = THETAE2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[103].name = tdrpStrDup("THETAV2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[103].val = THETAV2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[104].name = tdrpStrDup("MSLP2_FIELD");
        tt->struct_def.fields[0].enum_def.fields[104].val = MSLP2_FIELD;
        tt->struct_def.fields[0].enum_def.fields[105].name = tdrpStrDup("T2C_FIELD");
        tt->struct_def.fields[0].enum_def.fields[105].val = T2C_FIELD;
        tt->struct_def.fields[0].enum_def.fields[106].name = tdrpStrDup("Q2_G_FIELD");
        tt->struct_def.fields[0].enum_def.fields[106].val = Q2_G_FIELD;
        tt->struct_def.fields[0].enum_def.fields[107].name = tdrpStrDup("DBZ_2D_FIELD");
        tt->struct_def.fields[0].enum_def.fields[107].val = DBZ_2D_FIELD;
        tt->struct_def.fields[0].enum_def.fields[108].name = tdrpStrDup("CLOUD_FRACT_FIELD");
        tt->struct_def.fields[0].enum_def.fields[108].val = CLOUD_FRACT_FIELD;
        tt->struct_def.fields[0].enum_def.fields[109].name = tdrpStrDup("TWP_FIELD");
        tt->struct_def.fields[0].enum_def.fields[109].val = TWP_FIELD;
        tt->struct_def.fields[0].enum_def.fields[110].name = tdrpStrDup("RWP_FIELD");
        tt->struct_def.fields[0].enum_def.fields[110].val = RWP_FIELD;
        tt->struct_def.fields[0].enum_def.fields[111].name = tdrpStrDup("TOT_CLD_CONP_FIELD");
        tt->struct_def.fields[0].enum_def.fields[111].val = TOT_CLD_CONP_FIELD;
        tt->struct_def.fields[0].enum_def.fields[112].name = tdrpStrDup("CLWP_FIELD");
        tt->struct_def.fields[0].enum_def.fields[112].val = CLWP_FIELD;
      tt->struct_def.fields[1].ftype = tdrpStrDup("output_encoding_t");
      tt->struct_def.fields[1].fname = tdrpStrDup("encoding");
      tt->struct_def.fields[1].ptype = ENUM_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_output_fields->encoding - (char *) _output_fields;
        tt->struct_def.fields[1].enum_def.name = tdrpStrDup("output_encoding_t");
        tt->struct_def.fields[1].enum_def.nfields = 3;
        tt->struct_def.fields[1].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[1].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[1].enum_def.fields[0].name = tdrpStrDup("OUT_INT8");
        tt->struct_def.fields[1].enum_def.fields[0].val = OUT_INT8;
        tt->struct_def.fields[1].enum_def.fields[1].name = tdrpStrDup("OUT_INT16");
        tt->struct_def.fields[1].enum_def.fields[1].val = OUT_INT16;
        tt->struct_def.fields[1].enum_def.fields[2].name = tdrpStrDup("OUT_FLOAT32");
        tt->struct_def.fields[1].enum_def.fields[2].val = OUT_FLOAT32;
    tt->n_struct_vals = 16;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = U_FIELD;
      tt->struct_vals[1].e = OUT_INT8;
      tt->struct_vals[2].e = V_FIELD;
      tt->struct_vals[3].e = OUT_INT8;
      tt->struct_vals[4].e = WSPD_FIELD;
      tt->struct_vals[5].e = OUT_INT8;
      tt->struct_vals[6].e = TC_FIELD;
      tt->struct_vals[7].e = OUT_INT16;
      tt->struct_vals[8].e = RH_FIELD;
      tt->struct_vals[9].e = OUT_INT8;
      tt->struct_vals[10].e = CLW_FIELD;
      tt->struct_vals[11].e = OUT_INT8;
      tt->struct_vals[12].e = FZLEVEL_FIELD;
      tt->struct_vals[13].e = OUT_INT16;
      tt->struct_vals[14].e = DBZ_2D_FIELD;
      tt->struct_vals[15].e = OUT_INT8;
    tt++;
    
    // Parameter 'output_fields_as_index'
    // ctype is '_output_field_name_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_fields_as_index");
    tt->descr = tdrpStrDup("Output fields to be saved as indices, not float values.");
    tt->help = tdrpStrDup("Use the enum list.");
    tt->array_offset = (char *) &_output_fields_as_index - &_start_;
    tt->array_n_offset = (char *) &output_fields_as_index_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(output_field_name_t);
    tt->array_n = 1;
    tt->enum_def.name = tdrpStrDup("output_field_name_t");
    tt->enum_def.nfields = 113;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("U_FIELD");
      tt->enum_def.fields[0].val = U_FIELD;
      tt->enum_def.fields[1].name = tdrpStrDup("V_FIELD");
      tt->enum_def.fields[1].val = V_FIELD;
      tt->enum_def.fields[2].name = tdrpStrDup("TK_FIELD");
      tt->enum_def.fields[2].val = TK_FIELD;
      tt->enum_def.fields[3].name = tdrpStrDup("Q_FIELD");
      tt->enum_def.fields[3].val = Q_FIELD;
      tt->enum_def.fields[4].name = tdrpStrDup("CLW_FIELD");
      tt->enum_def.fields[4].val = CLW_FIELD;
      tt->enum_def.fields[5].name = tdrpStrDup("RNW_FIELD");
      tt->enum_def.fields[5].val = RNW_FIELD;
      tt->enum_def.fields[6].name = tdrpStrDup("ICE_FIELD");
      tt->enum_def.fields[6].val = ICE_FIELD;
      tt->enum_def.fields[7].name = tdrpStrDup("SNOW_FIELD");
      tt->enum_def.fields[7].val = SNOW_FIELD;
      tt->enum_def.fields[8].name = tdrpStrDup("GRAUPEL_FIELD");
      tt->enum_def.fields[8].val = GRAUPEL_FIELD;
      tt->enum_def.fields[9].name = tdrpStrDup("NCI_FIELD");
      tt->enum_def.fields[9].val = NCI_FIELD;
      tt->enum_def.fields[10].name = tdrpStrDup("RAD_TEND_FIELD");
      tt->enum_def.fields[10].val = RAD_TEND_FIELD;
      tt->enum_def.fields[11].name = tdrpStrDup("W_FIELD");
      tt->enum_def.fields[11].val = W_FIELD;
      tt->enum_def.fields[12].name = tdrpStrDup("P_FIELD");
      tt->enum_def.fields[12].val = P_FIELD;
      tt->enum_def.fields[13].name = tdrpStrDup("U_CORNER_FIELD");
      tt->enum_def.fields[13].val = U_CORNER_FIELD;
      tt->enum_def.fields[14].name = tdrpStrDup("V_CORNER_FIELD");
      tt->enum_def.fields[14].val = V_CORNER_FIELD;
      tt->enum_def.fields[15].name = tdrpStrDup("TC_FIELD");
      tt->enum_def.fields[15].val = TC_FIELD;
      tt->enum_def.fields[16].name = tdrpStrDup("WSPD_FIELD");
      tt->enum_def.fields[16].val = WSPD_FIELD;
      tt->enum_def.fields[17].name = tdrpStrDup("WDIR_FIELD");
      tt->enum_def.fields[17].val = WDIR_FIELD;
      tt->enum_def.fields[18].name = tdrpStrDup("Z_FIELD");
      tt->enum_def.fields[18].val = Z_FIELD;
      tt->enum_def.fields[19].name = tdrpStrDup("DIVERGENCE_FIELD");
      tt->enum_def.fields[19].val = DIVERGENCE_FIELD;
      tt->enum_def.fields[20].name = tdrpStrDup("PRESSURE_FIELD");
      tt->enum_def.fields[20].val = PRESSURE_FIELD;
      tt->enum_def.fields[21].name = tdrpStrDup("RH_FIELD");
      tt->enum_def.fields[21].val = RH_FIELD;
      tt->enum_def.fields[22].name = tdrpStrDup("DEWPT_FIELD");
      tt->enum_def.fields[22].val = DEWPT_FIELD;
      tt->enum_def.fields[23].name = tdrpStrDup("TURB_FIELD");
      tt->enum_def.fields[23].val = TURB_FIELD;
      tt->enum_def.fields[24].name = tdrpStrDup("ICING_FIELD");
      tt->enum_def.fields[24].val = ICING_FIELD;
      tt->enum_def.fields[25].name = tdrpStrDup("CLW_G_FIELD");
      tt->enum_def.fields[25].val = CLW_G_FIELD;
      tt->enum_def.fields[26].name = tdrpStrDup("RNW_G_FIELD");
      tt->enum_def.fields[26].val = RNW_G_FIELD;
      tt->enum_def.fields[27].name = tdrpStrDup("Q_G_FIELD");
      tt->enum_def.fields[27].val = Q_G_FIELD;
      tt->enum_def.fields[28].name = tdrpStrDup("THETA_FIELD");
      tt->enum_def.fields[28].val = THETA_FIELD;
      tt->enum_def.fields[29].name = tdrpStrDup("THETAE_FIELD");
      tt->enum_def.fields[29].val = THETAE_FIELD;
      tt->enum_def.fields[30].name = tdrpStrDup("THETAV_FIELD");
      tt->enum_def.fields[30].val = THETAV_FIELD;
      tt->enum_def.fields[31].name = tdrpStrDup("DBZ_3D_FIELD");
      tt->enum_def.fields[31].val = DBZ_3D_FIELD;
      tt->enum_def.fields[32].name = tdrpStrDup("TOT_CLD_CON_FIELD");
      tt->enum_def.fields[32].val = TOT_CLD_CON_FIELD;
      tt->enum_def.fields[33].name = tdrpStrDup("BROWN1_FIELD");
      tt->enum_def.fields[33].val = BROWN1_FIELD;
      tt->enum_def.fields[34].name = tdrpStrDup("BROWN2_FIELD");
      tt->enum_def.fields[34].val = BROWN2_FIELD;
      tt->enum_def.fields[35].name = tdrpStrDup("CCAT_FIELD");
      tt->enum_def.fields[35].val = CCAT_FIELD;
      tt->enum_def.fields[36].name = tdrpStrDup("COLSON_PANOFSKY_FIELD");
      tt->enum_def.fields[36].val = COLSON_PANOFSKY_FIELD;
      tt->enum_def.fields[37].name = tdrpStrDup("DEF_SQR_FIELD");
      tt->enum_def.fields[37].val = DEF_SQR_FIELD;
      tt->enum_def.fields[38].name = tdrpStrDup("ELLROD1_FIELD");
      tt->enum_def.fields[38].val = ELLROD1_FIELD;
      tt->enum_def.fields[39].name = tdrpStrDup("ELLROD2_FIELD");
      tt->enum_def.fields[39].val = ELLROD2_FIELD;
      tt->enum_def.fields[40].name = tdrpStrDup("DUTTON_FIELD");
      tt->enum_def.fields[40].val = DUTTON_FIELD;
      tt->enum_def.fields[41].name = tdrpStrDup("ENDLICH_FIELD");
      tt->enum_def.fields[41].val = ENDLICH_FIELD;
      tt->enum_def.fields[42].name = tdrpStrDup("HSHEAR_FIELD");
      tt->enum_def.fields[42].val = HSHEAR_FIELD;
      tt->enum_def.fields[43].name = tdrpStrDup("LAZ_FIELD");
      tt->enum_def.fields[43].val = LAZ_FIELD;
      tt->enum_def.fields[44].name = tdrpStrDup("PVORT_FIELD");
      tt->enum_def.fields[44].val = PVORT_FIELD;
      tt->enum_def.fields[45].name = tdrpStrDup("PVORT_GRADIENT_FIELD");
      tt->enum_def.fields[45].val = PVORT_GRADIENT_FIELD;
      tt->enum_def.fields[46].name = tdrpStrDup("NGM1_FIELD");
      tt->enum_def.fields[46].val = NGM1_FIELD;
      tt->enum_def.fields[47].name = tdrpStrDup("NGM2_FIELD");
      tt->enum_def.fields[47].val = NGM2_FIELD;
      tt->enum_def.fields[48].name = tdrpStrDup("RICHARDSON_FIELD");
      tt->enum_def.fields[48].val = RICHARDSON_FIELD;
      tt->enum_def.fields[49].name = tdrpStrDup("RIT_FIELD");
      tt->enum_def.fields[49].val = RIT_FIELD;
      tt->enum_def.fields[50].name = tdrpStrDup("SAT_RI_FIELD");
      tt->enum_def.fields[50].val = SAT_RI_FIELD;
      tt->enum_def.fields[51].name = tdrpStrDup("STABILITY_FIELD");
      tt->enum_def.fields[51].val = STABILITY_FIELD;
      tt->enum_def.fields[52].name = tdrpStrDup("VORT_SQR_FIELD");
      tt->enum_def.fields[52].val = VORT_SQR_FIELD;
      tt->enum_def.fields[53].name = tdrpStrDup("VWSHEAR_FIELD");
      tt->enum_def.fields[53].val = VWSHEAR_FIELD;
      tt->enum_def.fields[54].name = tdrpStrDup("TKE_KH3_FIELD");
      tt->enum_def.fields[54].val = TKE_KH3_FIELD;
      tt->enum_def.fields[55].name = tdrpStrDup("TKE_KH4_FIELD");
      tt->enum_def.fields[55].val = TKE_KH4_FIELD;
      tt->enum_def.fields[56].name = tdrpStrDup("TKE_KH5_FIELD");
      tt->enum_def.fields[56].val = TKE_KH5_FIELD;
      tt->enum_def.fields[57].name = tdrpStrDup("START_2D_FIELDS");
      tt->enum_def.fields[57].val = START_2D_FIELDS;
      tt->enum_def.fields[58].name = tdrpStrDup("GROUND_T_FIELD");
      tt->enum_def.fields[58].val = GROUND_T_FIELD;
      tt->enum_def.fields[59].name = tdrpStrDup("RAIN_CON_FIELD");
      tt->enum_def.fields[59].val = RAIN_CON_FIELD;
      tt->enum_def.fields[60].name = tdrpStrDup("RAIN_NON_FIELD");
      tt->enum_def.fields[60].val = RAIN_NON_FIELD;
      tt->enum_def.fields[61].name = tdrpStrDup("TERRAIN_FIELD");
      tt->enum_def.fields[61].val = TERRAIN_FIELD;
      tt->enum_def.fields[62].name = tdrpStrDup("CORIOLIS_FIELD");
      tt->enum_def.fields[62].val = CORIOLIS_FIELD;
      tt->enum_def.fields[63].name = tdrpStrDup("RES_TEMP_FIELD");
      tt->enum_def.fields[63].val = RES_TEMP_FIELD;
      tt->enum_def.fields[64].name = tdrpStrDup("LAND_USE_FIELD");
      tt->enum_def.fields[64].val = LAND_USE_FIELD;
      tt->enum_def.fields[65].name = tdrpStrDup("SNOWCOVR_FIELD");
      tt->enum_def.fields[65].val = SNOWCOVR_FIELD;
      tt->enum_def.fields[66].name = tdrpStrDup("TSEASFC_FIELD");
      tt->enum_def.fields[66].val = TSEASFC_FIELD;
      tt->enum_def.fields[67].name = tdrpStrDup("PBL_HGT_FIELD");
      tt->enum_def.fields[67].val = PBL_HGT_FIELD;
      tt->enum_def.fields[68].name = tdrpStrDup("REGIME_FIELD");
      tt->enum_def.fields[68].val = REGIME_FIELD;
      tt->enum_def.fields[69].name = tdrpStrDup("SHFLUX_FIELD");
      tt->enum_def.fields[69].val = SHFLUX_FIELD;
      tt->enum_def.fields[70].name = tdrpStrDup("LHFLUX_FIELD");
      tt->enum_def.fields[70].val = LHFLUX_FIELD;
      tt->enum_def.fields[71].name = tdrpStrDup("UST_FIELD");
      tt->enum_def.fields[71].val = UST_FIELD;
      tt->enum_def.fields[72].name = tdrpStrDup("SWDOWN_FIELD");
      tt->enum_def.fields[72].val = SWDOWN_FIELD;
      tt->enum_def.fields[73].name = tdrpStrDup("LWDOWN_FIELD");
      tt->enum_def.fields[73].val = LWDOWN_FIELD;
      tt->enum_def.fields[74].name = tdrpStrDup("SOIL_T_1_FIELD");
      tt->enum_def.fields[74].val = SOIL_T_1_FIELD;
      tt->enum_def.fields[75].name = tdrpStrDup("SOIL_T_2_FIELD");
      tt->enum_def.fields[75].val = SOIL_T_2_FIELD;
      tt->enum_def.fields[76].name = tdrpStrDup("SOIL_T_3_FIELD");
      tt->enum_def.fields[76].val = SOIL_T_3_FIELD;
      tt->enum_def.fields[77].name = tdrpStrDup("SOIL_T_4_FIELD");
      tt->enum_def.fields[77].val = SOIL_T_4_FIELD;
      tt->enum_def.fields[78].name = tdrpStrDup("SOIL_T_5_FIELD");
      tt->enum_def.fields[78].val = SOIL_T_5_FIELD;
      tt->enum_def.fields[79].name = tdrpStrDup("SOIL_T_6_FIELD");
      tt->enum_def.fields[79].val = SOIL_T_6_FIELD;
      tt->enum_def.fields[80].name = tdrpStrDup("SOIL_M_1_FIELD");
      tt->enum_def.fields[80].val = SOIL_M_1_FIELD;
      tt->enum_def.fields[81].name = tdrpStrDup("SOIL_M_2_FIELD");
      tt->enum_def.fields[81].val = SOIL_M_2_FIELD;
      tt->enum_def.fields[82].name = tdrpStrDup("SOIL_M_3_FIELD");
      tt->enum_def.fields[82].val = SOIL_M_3_FIELD;
      tt->enum_def.fields[83].name = tdrpStrDup("SOIL_M_4_FIELD");
      tt->enum_def.fields[83].val = SOIL_M_4_FIELD;
      tt->enum_def.fields[84].name = tdrpStrDup("T2_FIELD");
      tt->enum_def.fields[84].val = T2_FIELD;
      tt->enum_def.fields[85].name = tdrpStrDup("Q2_FIELD");
      tt->enum_def.fields[85].val = Q2_FIELD;
      tt->enum_def.fields[86].name = tdrpStrDup("U10_FIELD");
      tt->enum_def.fields[86].val = U10_FIELD;
      tt->enum_def.fields[87].name = tdrpStrDup("V10_FIELD");
      tt->enum_def.fields[87].val = V10_FIELD;
      tt->enum_def.fields[88].name = tdrpStrDup("WEASD_FIELD");
      tt->enum_def.fields[88].val = WEASD_FIELD;
      tt->enum_def.fields[89].name = tdrpStrDup("SNOWH_FIELD");
      tt->enum_def.fields[89].val = SNOWH_FIELD;
      tt->enum_def.fields[90].name = tdrpStrDup("LON_FIELD");
      tt->enum_def.fields[90].val = LON_FIELD;
      tt->enum_def.fields[91].name = tdrpStrDup("LAT_FIELD");
      tt->enum_def.fields[91].val = LAT_FIELD;
      tt->enum_def.fields[92].name = tdrpStrDup("HOURLY_CONV_RAIN_FIELD");
      tt->enum_def.fields[92].val = HOURLY_CONV_RAIN_FIELD;
      tt->enum_def.fields[93].name = tdrpStrDup("HOURLY_NONC_RAIN_FIELD");
      tt->enum_def.fields[93].val = HOURLY_NONC_RAIN_FIELD;
      tt->enum_def.fields[94].name = tdrpStrDup("FZLEVEL_FIELD");
      tt->enum_def.fields[94].val = FZLEVEL_FIELD;
      tt->enum_def.fields[95].name = tdrpStrDup("RAIN_TOTAL_FIELD");
      tt->enum_def.fields[95].val = RAIN_TOTAL_FIELD;
      tt->enum_def.fields[96].name = tdrpStrDup("HOURLY_RAIN_TOTAL_FIELD");
      tt->enum_def.fields[96].val = HOURLY_RAIN_TOTAL_FIELD;
      tt->enum_def.fields[97].name = tdrpStrDup("RH2_FIELD");
      tt->enum_def.fields[97].val = RH2_FIELD;
      tt->enum_def.fields[98].name = tdrpStrDup("DEWPT2_FIELD");
      tt->enum_def.fields[98].val = DEWPT2_FIELD;
      tt->enum_def.fields[99].name = tdrpStrDup("WSPD10_FIELD");
      tt->enum_def.fields[99].val = WSPD10_FIELD;
      tt->enum_def.fields[100].name = tdrpStrDup("WDIR10_FIELD");
      tt->enum_def.fields[100].val = WDIR10_FIELD;
      tt->enum_def.fields[101].name = tdrpStrDup("THETA2_FIELD");
      tt->enum_def.fields[101].val = THETA2_FIELD;
      tt->enum_def.fields[102].name = tdrpStrDup("THETAE2_FIELD");
      tt->enum_def.fields[102].val = THETAE2_FIELD;
      tt->enum_def.fields[103].name = tdrpStrDup("THETAV2_FIELD");
      tt->enum_def.fields[103].val = THETAV2_FIELD;
      tt->enum_def.fields[104].name = tdrpStrDup("MSLP2_FIELD");
      tt->enum_def.fields[104].val = MSLP2_FIELD;
      tt->enum_def.fields[105].name = tdrpStrDup("T2C_FIELD");
      tt->enum_def.fields[105].val = T2C_FIELD;
      tt->enum_def.fields[106].name = tdrpStrDup("Q2_G_FIELD");
      tt->enum_def.fields[106].val = Q2_G_FIELD;
      tt->enum_def.fields[107].name = tdrpStrDup("DBZ_2D_FIELD");
      tt->enum_def.fields[107].val = DBZ_2D_FIELD;
      tt->enum_def.fields[108].name = tdrpStrDup("CLOUD_FRACT_FIELD");
      tt->enum_def.fields[108].val = CLOUD_FRACT_FIELD;
      tt->enum_def.fields[109].name = tdrpStrDup("TWP_FIELD");
      tt->enum_def.fields[109].val = TWP_FIELD;
      tt->enum_def.fields[110].name = tdrpStrDup("RWP_FIELD");
      tt->enum_def.fields[110].val = RWP_FIELD;
      tt->enum_def.fields[111].name = tdrpStrDup("TOT_CLD_CONP_FIELD");
      tt->enum_def.fields[111].val = TOT_CLD_CONP_FIELD;
      tt->enum_def.fields[112].name = tdrpStrDup("CLWP_FIELD");
      tt->enum_def.fields[112].val = CLWP_FIELD;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].e = LAND_USE_FIELD;
    tt++;
    
    // Parameter 'wind_speed_in_knots'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("wind_speed_in_knots");
    tt->descr = tdrpStrDup("Set to TRUE to convert wind speed fields to knots.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &wind_speed_in_knots - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_projection'
    // ctype is '_output_projection_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_projection");
    tt->descr = tdrpStrDup("Projection of output grid.");
    tt->help = tdrpStrDup("FLAT - (x,y) Cartesian data in km from a given origin. LATLON - lat/lon grid with constant grid spacing. LAMBERT - Lambert conformal projection. NATIVE - use the native data grid, copy to output. NATIVE only works for model data on Lambert and Stereographic projections.");
    tt->val_offset = (char *) &output_projection - &_start_;
    tt->enum_def.name = tdrpStrDup("output_projection_t");
    tt->enum_def.nfields = 6;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("OUTPUT_PROJ_FLAT");
      tt->enum_def.fields[0].val = OUTPUT_PROJ_FLAT;
      tt->enum_def.fields[1].name = tdrpStrDup("OUTPUT_PROJ_LATLON");
      tt->enum_def.fields[1].val = OUTPUT_PROJ_LATLON;
      tt->enum_def.fields[2].name = tdrpStrDup("OUTPUT_PROJ_LAMBERT");
      tt->enum_def.fields[2].val = OUTPUT_PROJ_LAMBERT;
      tt->enum_def.fields[3].name = tdrpStrDup("OUTPUT_PROJ_STEREOGRAPHIC");
      tt->enum_def.fields[3].val = OUTPUT_PROJ_STEREOGRAPHIC;
      tt->enum_def.fields[4].name = tdrpStrDup("OUTPUT_PROJ_MERCATOR");
      tt->enum_def.fields[4].val = OUTPUT_PROJ_MERCATOR;
      tt->enum_def.fields[5].name = tdrpStrDup("OUTPUT_PROJ_NATIVE");
      tt->enum_def.fields[5].val = OUTPUT_PROJ_NATIVE;
    tt->single_val.e = OUTPUT_PROJ_FLAT;
    tt++;
    
    // Parameter 'output_origin'
    // ctype is '_output_origin_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_origin");
    tt->descr = tdrpStrDup("Origin of output grid.");
    tt->help = tdrpStrDup("Used with OUTPUT_PROJ_FLAT, OUTPUT_PROJ_LAMBERT, OUTPUT_PROJ_STEREOGRAPHIC.");
    tt->val_offset = (char *) &output_origin - &_start_;
    tt->struct_def.name = tdrpStrDup("output_origin_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("lat");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &output_origin.lat - (char *) &output_origin;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("lon");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &output_origin.lon - (char *) &output_origin;
    tt->n_struct_vals = 2;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 40;
      tt->struct_vals[1].d = -104;
    tt++;
    
    // Parameter 'lambert_lat1'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("lambert_lat1");
    tt->descr = tdrpStrDup("lat 1 value for Lambert conformal projection.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lambert_lat1 - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // Parameter 'lambert_lat2'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("lambert_lat2");
    tt->descr = tdrpStrDup("lat 2 value for Lambert conformal projection.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &lambert_lat2 - &_start_;
    tt->single_val.d = 60;
    tt++;
    
    // Parameter 'stereographic_tangent_lat'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("stereographic_tangent_lat");
    tt->descr = tdrpStrDup("Tangent latitude for stereographic projection.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &stereographic_tangent_lat - &_start_;
    tt->single_val.d = 60;
    tt++;
    
    // Parameter 'stereographic_tangent_lon'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("stereographic_tangent_lon");
    tt->descr = tdrpStrDup("Tangent longitude for stereographic projection.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &stereographic_tangent_lon - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'stereographic_central_scale'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("stereographic_central_scale");
    tt->descr = tdrpStrDup("Stereographic projection - Central Scale Factor.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &stereographic_central_scale - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'output_grid'
    // ctype is '_output_grid_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_grid");
    tt->descr = tdrpStrDup("Output grid parameters.");
    tt->help = tdrpStrDup("The grid params for the output grid.");
    tt->val_offset = (char *) &output_grid - &_start_;
    tt->struct_def.name = tdrpStrDup("output_grid_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("int");
      tt->struct_def.fields[0].fname = tdrpStrDup("nx");
      tt->struct_def.fields[0].ptype = INT_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &output_grid.nx - (char *) &output_grid;
      tt->struct_def.fields[1].ftype = tdrpStrDup("int");
      tt->struct_def.fields[1].fname = tdrpStrDup("ny");
      tt->struct_def.fields[1].ptype = INT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &output_grid.ny - (char *) &output_grid;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("minx");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &output_grid.minx - (char *) &output_grid;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("miny");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &output_grid.miny - (char *) &output_grid;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("dx");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &output_grid.dx - (char *) &output_grid;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("dy");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &output_grid.dy - (char *) &output_grid;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].i = 300;
      tt->struct_vals[1].i = 300;
      tt->struct_vals[2].d = -149.5;
      tt->struct_vals[3].d = -149.5;
      tt->struct_vals[4].d = 1;
      tt->struct_vals[5].d = 1;
    tt++;
    
    // Parameter 'output_levels'
    // ctype is '_output_levels_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_levels");
    tt->descr = tdrpStrDup("Option to choose vertical levels for output file.");
    tt->help = tdrpStrDup("If FLIGHT_LEVELS, PRESSURE_LEVELS or HEIGHT_LEVELS, vertical levels will be interpolated accordingly. If NATIVE_SIGMA_LEVELS, no interpolation is done and the data is output on the original sigma levels.");
    tt->val_offset = (char *) &output_levels - &_start_;
    tt->enum_def.name = tdrpStrDup("output_levels_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("FLIGHT_LEVELS");
      tt->enum_def.fields[0].val = FLIGHT_LEVELS;
      tt->enum_def.fields[1].name = tdrpStrDup("PRESSURE_LEVELS");
      tt->enum_def.fields[1].val = PRESSURE_LEVELS;
      tt->enum_def.fields[2].name = tdrpStrDup("HEIGHT_LEVELS");
      tt->enum_def.fields[2].val = HEIGHT_LEVELS;
      tt->enum_def.fields[3].name = tdrpStrDup("NATIVE_SIGMA_LEVELS");
      tt->enum_def.fields[3].val = NATIVE_SIGMA_LEVELS;
    tt->single_val.e = FLIGHT_LEVELS;
    tt++;
    
    // Parameter 'flight_levels'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("flight_levels");
    tt->descr = tdrpStrDup("Array of output flight levels.");
    tt->help = tdrpStrDup("Only used if output_levels is FLIGHT_LEVELS. The output grid has a variable Z dimension, in flight levels. The flight levels in the output are taken from this array.");
    tt->array_offset = (char *) &_flight_levels - &_start_;
    tt->array_n_offset = (char *) &flight_levels_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(int);
    tt->array_n = 33;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].i = 10;
      tt->array_vals[1].i = 20;
      tt->array_vals[2].i = 30;
      tt->array_vals[3].i = 40;
      tt->array_vals[4].i = 50;
      tt->array_vals[5].i = 60;
      tt->array_vals[6].i = 70;
      tt->array_vals[7].i = 80;
      tt->array_vals[8].i = 90;
      tt->array_vals[9].i = 100;
      tt->array_vals[10].i = 110;
      tt->array_vals[11].i = 120;
      tt->array_vals[12].i = 130;
      tt->array_vals[13].i = 140;
      tt->array_vals[14].i = 150;
      tt->array_vals[15].i = 160;
      tt->array_vals[16].i = 170;
      tt->array_vals[17].i = 180;
      tt->array_vals[18].i = 190;
      tt->array_vals[19].i = 200;
      tt->array_vals[20].i = 210;
      tt->array_vals[21].i = 230;
      tt->array_vals[22].i = 250;
      tt->array_vals[23].i = 270;
      tt->array_vals[24].i = 290;
      tt->array_vals[25].i = 310;
      tt->array_vals[26].i = 330;
      tt->array_vals[27].i = 350;
      tt->array_vals[28].i = 370;
      tt->array_vals[29].i = 390;
      tt->array_vals[30].i = 410;
      tt->array_vals[31].i = 430;
      tt->array_vals[32].i = 450;
    tt++;
    
    // Parameter 'pressure_levels'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("pressure_levels");
    tt->descr = tdrpStrDup("Array of output pressure levels (mb).");
    tt->help = tdrpStrDup("Only used if output_levels is PRESSURE_LEVELS. The output grid has a variable Z dimension, in pressure levels. The pressure levels in the output are taken from this array.");
    tt->array_offset = (char *) &_pressure_levels - &_start_;
    tt->array_n_offset = (char *) &pressure_levels_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 9;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 1000;
      tt->array_vals[1].d = 950;
      tt->array_vals[2].d = 900;
      tt->array_vals[3].d = 850;
      tt->array_vals[4].d = 700;
      tt->array_vals[5].d = 500;
      tt->array_vals[6].d = 300;
      tt->array_vals[7].d = 200;
      tt->array_vals[8].d = 100;
    tt++;
    
    // Parameter 'height_levels'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("height_levels");
    tt->descr = tdrpStrDup("Array of output height levels (km).");
    tt->help = tdrpStrDup("Only used if output_levels is HEIGHT_LEVELS. The output grid has a variable Z dimension. The height levels in the output are taken from this array.");
    tt->array_offset = (char *) &_height_levels - &_start_;
    tt->array_n_offset = (char *) &height_levels_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(double);
    tt->array_n = 17;
    tt->array_vals = (tdrpVal_t *)
        tdrpMalloc(tt->array_n * sizeof(tdrpVal_t));
      tt->array_vals[0].d = 0;
      tt->array_vals[1].d = 1;
      tt->array_vals[2].d = 2;
      tt->array_vals[3].d = 3;
      tt->array_vals[4].d = 4;
      tt->array_vals[5].d = 5;
      tt->array_vals[6].d = 6;
      tt->array_vals[7].d = 7;
      tt->array_vals[8].d = 8;
      tt->array_vals[9].d = 9;
      tt->array_vals[10].d = 10;
      tt->array_vals[11].d = 11;
      tt->array_vals[12].d = 12;
      tt->array_vals[13].d = 13;
      tt->array_vals[14].d = 14;
      tt->array_vals[15].d = 15;
      tt->array_vals[16].d = 16;
    tt++;
    
    // Parameter 'output_scaling'
    // ctype is '_scaling_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_scaling");
    tt->descr = tdrpStrDup("Applicable for INT8 and INT16 encoding.");
    tt->help = tdrpStrDup("ROUNDED: produces values which are easily readable. INTEGRAL: integer output values. DYNAMIC: utilizes the full dynamic range.");
    tt->val_offset = (char *) &output_scaling - &_start_;
    tt->enum_def.name = tdrpStrDup("scaling_t");
    tt->enum_def.nfields = 2;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("SCALING_ROUNDED");
      tt->enum_def.fields[0].val = SCALING_ROUNDED;
      tt->enum_def.fields[1].name = tdrpStrDup("SCALING_DYNAMIC");
      tt->enum_def.fields[1].val = SCALING_DYNAMIC;
    tt->single_val.e = SCALING_ROUNDED;
    tt++;
    
    // Parameter 'copy_lowest_downwards'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("copy_lowest_downwards");
    tt->descr = tdrpStrDup("Option to copy the lowest valid value down to the lowest level");
    tt->help = tdrpStrDup("This option is applicable only to FLIGHT_LEVELS. Where terrain is encountered, there may be flight levels which have missing data after vertical interpolation from sigma levels to flight levels. If this option is set to true, the data from the lowest valid flight level will be copied down to the levels below.");
    tt->val_offset = (char *) &copy_lowest_downwards - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'output_compression'
    // ctype is '_compression_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("output_compression");
    tt->descr = tdrpStrDup("Compression tpye for output files");
    tt->help = tdrpStrDup("See <mdv/mdv_macros.h> for the C definitions to which these correspond.");
    tt->val_offset = (char *) &output_compression - &_start_;
    tt->enum_def.name = tdrpStrDup("compression_t");
    tt->enum_def.nfields = 5;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("_MDV_COMPRESSION_NONE");
      tt->enum_def.fields[0].val = _MDV_COMPRESSION_NONE;
      tt->enum_def.fields[1].name = tdrpStrDup("_MDV_COMPRESSION_RLE");
      tt->enum_def.fields[1].val = _MDV_COMPRESSION_RLE;
      tt->enum_def.fields[2].name = tdrpStrDup("_MDV_COMPRESSION_LZO");
      tt->enum_def.fields[2].val = _MDV_COMPRESSION_LZO;
      tt->enum_def.fields[3].name = tdrpStrDup("_MDV_COMPRESSION_ZLIB");
      tt->enum_def.fields[3].val = _MDV_COMPRESSION_ZLIB;
      tt->enum_def.fields[4].name = tdrpStrDup("_MDV_COMPRESSION_BZIP");
      tt->enum_def.fields[4].val = _MDV_COMPRESSION_BZIP;
    tt->single_val.e = _MDV_COMPRESSION_ZLIB;
    tt++;
    
    // Parameter 'output_path_in_forecast_format'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_path_in_forecast_format");
    tt->descr = tdrpStrDup("Option to create output path in forecast format.");
    tt->help = tdrpStrDup("If false, the output path is determined  using the valid time: topdir/yyyymmdd/hhmmss.mdv. If true, the output path is determined using the model initialization (generate) time and the forecast lead time in secs: yyyymmdd/g_hhmmss/f_ssssssss.mdv");
    tt->val_offset = (char *) &output_path_in_forecast_format - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("FILE HEADER INFO");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'data_collection_type'
    // ctype is '_data_collection_type_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("data_collection_type");
    tt->descr = tdrpStrDup("Data collection type");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &data_collection_type - &_start_;
    tt->enum_def.name = tdrpStrDup("data_collection_type_t");
    tt->enum_def.nfields = 9;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DATA_MEASURED");
      tt->enum_def.fields[0].val = DATA_MEASURED;
      tt->enum_def.fields[1].name = tdrpStrDup("DATA_EXTRAPOLATED");
      tt->enum_def.fields[1].val = DATA_EXTRAPOLATED;
      tt->enum_def.fields[2].name = tdrpStrDup("DATA_FORECAST");
      tt->enum_def.fields[2].val = DATA_FORECAST;
      tt->enum_def.fields[3].name = tdrpStrDup("DATA_SYNTHESIS");
      tt->enum_def.fields[3].val = DATA_SYNTHESIS;
      tt->enum_def.fields[4].name = tdrpStrDup("DATA_MIXED");
      tt->enum_def.fields[4].val = DATA_MIXED;
      tt->enum_def.fields[5].name = tdrpStrDup("DATA_IMAGE");
      tt->enum_def.fields[5].val = DATA_IMAGE;
      tt->enum_def.fields[6].name = tdrpStrDup("DATA_GRAPHIC");
      tt->enum_def.fields[6].val = DATA_GRAPHIC;
      tt->enum_def.fields[7].name = tdrpStrDup("DATA_CLIMO_ANA");
      tt->enum_def.fields[7].val = DATA_CLIMO_ANA;
      tt->enum_def.fields[8].name = tdrpStrDup("DATA_CLIMO_OBS");
      tt->enum_def.fields[8].val = DATA_CLIMO_OBS;
    tt->single_val.e = DATA_FORECAST;
    tt++;
    
    // Parameter 'data_set_info'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_info");
    tt->descr = tdrpStrDup("Data set info.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_info - &_start_;
    tt->single_val.s = tdrpStrDup("This MDV file was created by MM5Ingest.");
    tt++;
    
    // Parameter 'data_set_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_name");
    tt->descr = tdrpStrDup("Data set name.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_name - &_start_;
    tt->single_val.s = tdrpStrDup("MM5 model output.");
    tt++;
    
    // Parameter 'data_set_source'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("data_set_source");
    tt->descr = tdrpStrDup("Data set source details.");
    tt->help = tdrpStrDup("This is placed in the MDV master header for documentation purposes.");
    tt->val_offset = (char *) &data_set_source - &_start_;
    tt->single_val.s = tdrpStrDup("MM5 output from MMM, NCAR.");
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("TURBULENCE PRODUCT - ITFA");
    tt->comment_text = tdrpStrDup("The turbulence severity product is normalized between 0 and 1, where 0 indicates low probability of turbulence and 1 indicates a high probability of turbulence.");
    tt++;
    
    // Parameter 'itfa_derived_indices'
    // ctype is '_itfa_derived_index_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("itfa_derived_indices");
    tt->descr = tdrpStrDup("Array of derived index parameters for ITFA.");
    tt->help = tdrpStrDup("These are the itfa indices computed from the MM5 model output variables. For each index you specify (a) The name: from the enum list. (b) the weight to be applied, set to 0.0 to exclude the index altogether. The final value is formed as a linear combination of the values multiplied by their weights, and then normalized to between 0 and 1 by dividing by the sum of the weights. (c) The sense of the test: if GREATER_THAN, the index indicates turbulence if the value exceeds threshold_1. If LESS_THAN, the index indicates turbulence if the value is less than threshold_1. If INSIDE_INTERVAL indicates turbulence if the value is between threshold_1 and threshold_2. If OUTSIDE_INTERVAL indicates turbulence if the value is NOT between threshold_1 and threshold_2. (d) threshold_1. (e) threshold_2, set to -999.0 as documentation if sense is LESS_THAN or GREATER_THAN. (f) The min flight level for applying the index. (g) The max flight level for applying the index.");
    tt->array_offset = (char *) &_itfa_derived_indices - &_start_;
    tt->array_n_offset = (char *) &itfa_derived_indices_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(itfa_derived_index_t);
    tt->array_n = 37;
    tt->struct_def.name = tdrpStrDup("itfa_derived_index_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("itfa_derived_index_name");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_itfa_derived_indices->name - (char *) _itfa_derived_indices;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("itfa_derived_index_name");
        tt->struct_def.fields[0].enum_def.nfields = 25;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("BROWN1");
        tt->struct_def.fields[0].enum_def.fields[0].val = BROWN1;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("BROWN2");
        tt->struct_def.fields[0].enum_def.fields[1].val = BROWN2;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("CCAT");
        tt->struct_def.fields[0].enum_def.fields[2].val = CCAT;
        tt->struct_def.fields[0].enum_def.fields[3].name = tdrpStrDup("COLSON_PANOFSKY");
        tt->struct_def.fields[0].enum_def.fields[3].val = COLSON_PANOFSKY;
        tt->struct_def.fields[0].enum_def.fields[4].name = tdrpStrDup("DEF_SQR");
        tt->struct_def.fields[0].enum_def.fields[4].val = DEF_SQR;
        tt->struct_def.fields[0].enum_def.fields[5].name = tdrpStrDup("ELLROD1");
        tt->struct_def.fields[0].enum_def.fields[5].val = ELLROD1;
        tt->struct_def.fields[0].enum_def.fields[6].name = tdrpStrDup("ELLROD2");
        tt->struct_def.fields[0].enum_def.fields[6].val = ELLROD2;
        tt->struct_def.fields[0].enum_def.fields[7].name = tdrpStrDup("DUTTON");
        tt->struct_def.fields[0].enum_def.fields[7].val = DUTTON;
        tt->struct_def.fields[0].enum_def.fields[8].name = tdrpStrDup("ENDLICH");
        tt->struct_def.fields[0].enum_def.fields[8].val = ENDLICH;
        tt->struct_def.fields[0].enum_def.fields[9].name = tdrpStrDup("HSHEAR");
        tt->struct_def.fields[0].enum_def.fields[9].val = HSHEAR;
        tt->struct_def.fields[0].enum_def.fields[10].name = tdrpStrDup("LAZ");
        tt->struct_def.fields[0].enum_def.fields[10].val = LAZ;
        tt->struct_def.fields[0].enum_def.fields[11].name = tdrpStrDup("PVORT");
        tt->struct_def.fields[0].enum_def.fields[11].val = PVORT;
        tt->struct_def.fields[0].enum_def.fields[12].name = tdrpStrDup("PVORT_GRADIENT");
        tt->struct_def.fields[0].enum_def.fields[12].val = PVORT_GRADIENT;
        tt->struct_def.fields[0].enum_def.fields[13].name = tdrpStrDup("NGM1");
        tt->struct_def.fields[0].enum_def.fields[13].val = NGM1;
        tt->struct_def.fields[0].enum_def.fields[14].name = tdrpStrDup("NGM2");
        tt->struct_def.fields[0].enum_def.fields[14].val = NGM2;
        tt->struct_def.fields[0].enum_def.fields[15].name = tdrpStrDup("RICHARDSON");
        tt->struct_def.fields[0].enum_def.fields[15].val = RICHARDSON;
        tt->struct_def.fields[0].enum_def.fields[16].name = tdrpStrDup("RIT");
        tt->struct_def.fields[0].enum_def.fields[16].val = RIT;
        tt->struct_def.fields[0].enum_def.fields[17].name = tdrpStrDup("SAT_RI");
        tt->struct_def.fields[0].enum_def.fields[17].val = SAT_RI;
        tt->struct_def.fields[0].enum_def.fields[18].name = tdrpStrDup("STABILITY");
        tt->struct_def.fields[0].enum_def.fields[18].val = STABILITY;
        tt->struct_def.fields[0].enum_def.fields[19].name = tdrpStrDup("VORT_SQR");
        tt->struct_def.fields[0].enum_def.fields[19].val = VORT_SQR;
        tt->struct_def.fields[0].enum_def.fields[20].name = tdrpStrDup("VWSHEAR");
        tt->struct_def.fields[0].enum_def.fields[20].val = VWSHEAR;
        tt->struct_def.fields[0].enum_def.fields[21].name = tdrpStrDup("TKE_GWB");
        tt->struct_def.fields[0].enum_def.fields[21].val = TKE_GWB;
        tt->struct_def.fields[0].enum_def.fields[22].name = tdrpStrDup("TKE_KH3");
        tt->struct_def.fields[0].enum_def.fields[22].val = TKE_KH3;
        tt->struct_def.fields[0].enum_def.fields[23].name = tdrpStrDup("TKE_KH4");
        tt->struct_def.fields[0].enum_def.fields[23].val = TKE_KH4;
        tt->struct_def.fields[0].enum_def.fields[24].name = tdrpStrDup("TKE_KH5");
        tt->struct_def.fields[0].enum_def.fields[24].val = TKE_KH5;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("weight");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_itfa_derived_indices->weight - (char *) _itfa_derived_indices;
      tt->struct_def.fields[2].ftype = tdrpStrDup("itfa_index_sense_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("sense");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_itfa_derived_indices->sense - (char *) _itfa_derived_indices;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("itfa_index_sense_t");
        tt->struct_def.fields[2].enum_def.nfields = 4;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("LESS_THAN");
        tt->struct_def.fields[2].enum_def.fields[0].val = LESS_THAN;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("GREATER_THAN");
        tt->struct_def.fields[2].enum_def.fields[1].val = GREATER_THAN;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("INSIDE_INTERVAL");
        tt->struct_def.fields[2].enum_def.fields[2].val = INSIDE_INTERVAL;
        tt->struct_def.fields[2].enum_def.fields[3].name = tdrpStrDup("OUTSIDE_INTERVAL");
        tt->struct_def.fields[2].enum_def.fields[3].val = OUTSIDE_INTERVAL;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("threshold_1");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_itfa_derived_indices->threshold_1 - (char *) _itfa_derived_indices;
      tt->struct_def.fields[4].ftype = tdrpStrDup("float");
      tt->struct_def.fields[4].fname = tdrpStrDup("threshold_2");
      tt->struct_def.fields[4].ptype = FLOAT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_itfa_derived_indices->threshold_2 - (char *) _itfa_derived_indices;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("min_flight_level");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_itfa_derived_indices->min_flight_level - (char *) _itfa_derived_indices;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("max_flight_level");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_itfa_derived_indices->max_flight_level - (char *) _itfa_derived_indices;
    tt->n_struct_vals = 259;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = BROWN1;
      tt->struct_vals[1].f = 1;
      tt->struct_vals[2].e = GREATER_THAN;
      tt->struct_vals[3].f = 0.0001;
      tt->struct_vals[4].f = -999;
      tt->struct_vals[5].i = 200;
      tt->struct_vals[6].i = 260;
      tt->struct_vals[7].e = BROWN1;
      tt->struct_vals[8].f = 1;
      tt->struct_vals[9].e = GREATER_THAN;
      tt->struct_vals[10].f = 0.0001;
      tt->struct_vals[11].f = -999;
      tt->struct_vals[12].i = 260;
      tt->struct_vals[13].i = 310;
      tt->struct_vals[14].e = BROWN2;
      tt->struct_vals[15].f = 1.8;
      tt->struct_vals[16].e = GREATER_THAN;
      tt->struct_vals[17].f = 0.4;
      tt->struct_vals[18].f = -999;
      tt->struct_vals[19].i = 200;
      tt->struct_vals[20].i = 260;
      tt->struct_vals[21].e = BROWN2;
      tt->struct_vals[22].f = 0.9;
      tt->struct_vals[23].e = GREATER_THAN;
      tt->struct_vals[24].f = 0.4;
      tt->struct_vals[25].f = -999;
      tt->struct_vals[26].i = 260;
      tt->struct_vals[27].i = 310;
      tt->struct_vals[28].e = CCAT;
      tt->struct_vals[29].f = 0;
      tt->struct_vals[30].e = GREATER_THAN;
      tt->struct_vals[31].f = 2e-08;
      tt->struct_vals[32].f = -999;
      tt->struct_vals[33].i = 200;
      tt->struct_vals[34].i = 400;
      tt->struct_vals[35].e = COLSON_PANOFSKY;
      tt->struct_vals[36].f = 0;
      tt->struct_vals[37].e = GREATER_THAN;
      tt->struct_vals[38].f = 0;
      tt->struct_vals[39].f = -999;
      tt->struct_vals[40].i = 200;
      tt->struct_vals[41].i = 400;
      tt->struct_vals[42].e = DEF_SQR;
      tt->struct_vals[43].f = 1.3;
      tt->struct_vals[44].e = GREATER_THAN;
      tt->struct_vals[45].f = 5e-09;
      tt->struct_vals[46].f = -999;
      tt->struct_vals[47].i = 200;
      tt->struct_vals[48].i = 260;
      tt->struct_vals[49].e = DEF_SQR;
      tt->struct_vals[50].f = 0.9;
      tt->struct_vals[51].e = GREATER_THAN;
      tt->struct_vals[52].f = 5e-09;
      tt->struct_vals[53].f = -999;
      tt->struct_vals[54].i = 260;
      tt->struct_vals[55].i = 310;
      tt->struct_vals[56].e = ELLROD1;
      tt->struct_vals[57].f = 1.4;
      tt->struct_vals[58].e = GREATER_THAN;
      tt->struct_vals[59].f = 5e-06;
      tt->struct_vals[60].f = -999;
      tt->struct_vals[61].i = 200;
      tt->struct_vals[62].i = 260;
      tt->struct_vals[63].e = ELLROD1;
      tt->struct_vals[64].f = 0.8;
      tt->struct_vals[65].e = GREATER_THAN;
      tt->struct_vals[66].f = 5e-06;
      tt->struct_vals[67].f = -999;
      tt->struct_vals[68].i = 260;
      tt->struct_vals[69].i = 310;
      tt->struct_vals[70].e = ELLROD2;
      tt->struct_vals[71].f = 1.7;
      tt->struct_vals[72].e = GREATER_THAN;
      tt->struct_vals[73].f = 4e-07;
      tt->struct_vals[74].f = -999;
      tt->struct_vals[75].i = 200;
      tt->struct_vals[76].i = 260;
      tt->struct_vals[77].e = ELLROD2;
      tt->struct_vals[78].f = 1;
      tt->struct_vals[79].e = GREATER_THAN;
      tt->struct_vals[80].f = 4e-07;
      tt->struct_vals[81].f = -999;
      tt->struct_vals[82].i = 260;
      tt->struct_vals[83].i = 310;
      tt->struct_vals[84].e = DUTTON;
      tt->struct_vals[85].f = 1.4;
      tt->struct_vals[86].e = GREATER_THAN;
      tt->struct_vals[87].f = 30;
      tt->struct_vals[88].f = -999;
      tt->struct_vals[89].i = 200;
      tt->struct_vals[90].i = 260;
      tt->struct_vals[91].e = ENDLICH;
      tt->struct_vals[92].f = 0;
      tt->struct_vals[93].e = GREATER_THAN;
      tt->struct_vals[94].f = 0.2;
      tt->struct_vals[95].f = -999;
      tt->struct_vals[96].i = 200;
      tt->struct_vals[97].i = 400;
      tt->struct_vals[98].e = HSHEAR;
      tt->struct_vals[99].f = 0;
      tt->struct_vals[100].e = GREATER_THAN;
      tt->struct_vals[101].f = 5e-05;
      tt->struct_vals[102].f = -999;
      tt->struct_vals[103].i = 200;
      tt->struct_vals[104].i = 400;
      tt->struct_vals[105].e = LAZ;
      tt->struct_vals[106].f = 0;
      tt->struct_vals[107].e = LESS_THAN;
      tt->struct_vals[108].f = 1;
      tt->struct_vals[109].f = -999;
      tt->struct_vals[110].i = 200;
      tt->struct_vals[111].i = 400;
      tt->struct_vals[112].e = PVORT;
      tt->struct_vals[113].f = 0;
      tt->struct_vals[114].e = LESS_THAN;
      tt->struct_vals[115].f = 0;
      tt->struct_vals[116].f = -999;
      tt->struct_vals[117].i = 200;
      tt->struct_vals[118].i = 400;
      tt->struct_vals[119].e = PVORT_GRADIENT;
      tt->struct_vals[120].f = 0;
      tt->struct_vals[121].e = GREATER_THAN;
      tt->struct_vals[122].f = 4e-13;
      tt->struct_vals[123].f = -999;
      tt->struct_vals[124].i = 200;
      tt->struct_vals[125].i = 400;
      tt->struct_vals[126].e = NGM1;
      tt->struct_vals[127].f = 1.6;
      tt->struct_vals[128].e = GREATER_THAN;
      tt->struct_vals[129].f = 0.002;
      tt->struct_vals[130].f = -999;
      tt->struct_vals[131].i = 200;
      tt->struct_vals[132].i = 260;
      tt->struct_vals[133].e = NGM1;
      tt->struct_vals[134].f = 1.5;
      tt->struct_vals[135].e = GREATER_THAN;
      tt->struct_vals[136].f = 0.002;
      tt->struct_vals[137].f = -999;
      tt->struct_vals[138].i = 260;
      tt->struct_vals[139].i = 310;
      tt->struct_vals[140].e = NGM2;
      tt->struct_vals[141].f = 0;
      tt->struct_vals[142].e = GREATER_THAN;
      tt->struct_vals[143].f = 0;
      tt->struct_vals[144].f = -999;
      tt->struct_vals[145].i = 200;
      tt->struct_vals[146].i = 400;
      tt->struct_vals[147].e = RICHARDSON;
      tt->struct_vals[148].f = 1.2;
      tt->struct_vals[149].e = LESS_THAN;
      tt->struct_vals[150].f = 2;
      tt->struct_vals[151].f = -999;
      tt->struct_vals[152].i = 200;
      tt->struct_vals[153].i = 260;
      tt->struct_vals[154].e = RIT;
      tt->struct_vals[155].f = 0;
      tt->struct_vals[156].e = LESS_THAN;
      tt->struct_vals[157].f = 0;
      tt->struct_vals[158].f = -999;
      tt->struct_vals[159].i = 200;
      tt->struct_vals[160].i = 400;
      tt->struct_vals[161].e = SAT_RI;
      tt->struct_vals[162].f = 0;
      tt->struct_vals[163].e = LESS_THAN;
      tt->struct_vals[164].f = 1;
      tt->struct_vals[165].f = -999;
      tt->struct_vals[166].i = 200;
      tt->struct_vals[167].i = 400;
      tt->struct_vals[168].e = STABILITY;
      tt->struct_vals[169].f = 0;
      tt->struct_vals[170].e = INSIDE_INTERVAL;
      tt->struct_vals[171].f = 0.0001;
      tt->struct_vals[172].f = 0.0002;
      tt->struct_vals[173].i = 200;
      tt->struct_vals[174].i = 400;
      tt->struct_vals[175].e = VORT_SQR;
      tt->struct_vals[176].f = 0;
      tt->struct_vals[177].e = GREATER_THAN;
      tt->struct_vals[178].f = 1e-08;
      tt->struct_vals[179].f = -999;
      tt->struct_vals[180].i = 200;
      tt->struct_vals[181].i = 400;
      tt->struct_vals[182].e = VWSHEAR;
      tt->struct_vals[183].f = 1.5;
      tt->struct_vals[184].e = GREATER_THAN;
      tt->struct_vals[185].f = 0.006;
      tt->struct_vals[186].f = -999;
      tt->struct_vals[187].i = 200;
      tt->struct_vals[188].i = 260;
      tt->struct_vals[189].e = VWSHEAR;
      tt->struct_vals[190].f = 1.1;
      tt->struct_vals[191].e = GREATER_THAN;
      tt->struct_vals[192].f = 0.006;
      tt->struct_vals[193].f = -999;
      tt->struct_vals[194].i = 260;
      tt->struct_vals[195].i = 310;
      tt->struct_vals[196].e = TKE_KH3;
      tt->struct_vals[197].f = 1.4;
      tt->struct_vals[198].e = GREATER_THAN;
      tt->struct_vals[199].f = 3;
      tt->struct_vals[200].f = -999;
      tt->struct_vals[201].i = 200;
      tt->struct_vals[202].i = 260;
      tt->struct_vals[203].e = TKE_KH3;
      tt->struct_vals[204].f = 0.8;
      tt->struct_vals[205].e = GREATER_THAN;
      tt->struct_vals[206].f = 3;
      tt->struct_vals[207].f = -999;
      tt->struct_vals[208].i = 260;
      tt->struct_vals[209].i = 310;
      tt->struct_vals[210].e = TKE_KH3;
      tt->struct_vals[211].f = 1.5;
      tt->struct_vals[212].e = GREATER_THAN;
      tt->struct_vals[213].f = 3;
      tt->struct_vals[214].f = -999;
      tt->struct_vals[215].i = 310;
      tt->struct_vals[216].i = 400;
      tt->struct_vals[217].e = TKE_KH4;
      tt->struct_vals[218].f = 0.8;
      tt->struct_vals[219].e = GREATER_THAN;
      tt->struct_vals[220].f = 10;
      tt->struct_vals[221].f = -999;
      tt->struct_vals[222].i = 200;
      tt->struct_vals[223].i = 260;
      tt->struct_vals[224].e = TKE_KH4;
      tt->struct_vals[225].f = 0;
      tt->struct_vals[226].e = GREATER_THAN;
      tt->struct_vals[227].f = 10;
      tt->struct_vals[228].f = -999;
      tt->struct_vals[229].i = 260;
      tt->struct_vals[230].i = 310;
      tt->struct_vals[231].e = TKE_KH4;
      tt->struct_vals[232].f = 1.2;
      tt->struct_vals[233].e = GREATER_THAN;
      tt->struct_vals[234].f = 10;
      tt->struct_vals[235].f = -999;
      tt->struct_vals[236].i = 310;
      tt->struct_vals[237].i = 400;
      tt->struct_vals[238].e = TKE_KH5;
      tt->struct_vals[239].f = 1.7;
      tt->struct_vals[240].e = GREATER_THAN;
      tt->struct_vals[241].f = 0.3;
      tt->struct_vals[242].f = -999;
      tt->struct_vals[243].i = 200;
      tt->struct_vals[244].i = 260;
      tt->struct_vals[245].e = TKE_KH5;
      tt->struct_vals[246].f = 1.2;
      tt->struct_vals[247].e = GREATER_THAN;
      tt->struct_vals[248].f = 0.3;
      tt->struct_vals[249].f = -999;
      tt->struct_vals[250].i = 260;
      tt->struct_vals[251].i = 310;
      tt->struct_vals[252].e = TKE_KH5;
      tt->struct_vals[253].f = 1.6;
      tt->struct_vals[254].e = GREATER_THAN;
      tt->struct_vals[255].f = 0.3;
      tt->struct_vals[256].f = -999;
      tt->struct_vals[257].i = 310;
      tt->struct_vals[258].i = 400;
    tt++;
    
    // Parameter 'itfa_model_indices'
    // ctype is '_itfa_model_index_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("itfa_model_indices");
    tt->descr = tdrpStrDup("Array of model index parameters for ITFA.");
    tt->help = tdrpStrDup("For each index you specify (a) The name: from the enum list. (b) the weight to be applied, set to 0.0 to exclude the index altogether. The final value is formed as a linear combination of the values multiplied by their weights, and then normalized to between 0 and 1 by dividing by the sum of the weights. (c) The sense of the test: if GREATER_THAN, the index indicates turbulence if the value exceeds threshold_1. If LESS_THAN, the index indicates turbulence if the value is less than threshold_1. If INSIDE_INTERVAL indicates turbulence if the value is between threshold_1 and threshold_2. If OUTSIDE_INTERVAL indicates turbulence if the value is NOT between threshold_1 and threshold_2. (d) threshold_1. (e) threshold_2, set to -999.0 as documentation if sense is LESS_THAN or GREATER_THAN. (f) The min flight level for applying the index. (g) The max flight level for applying the index.");
    tt->array_offset = (char *) &_itfa_model_indices - &_start_;
    tt->array_n_offset = (char *) &itfa_model_indices_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(itfa_model_index_t);
    tt->array_n = 6;
    tt->struct_def.name = tdrpStrDup("itfa_model_index_t");
    tt->struct_def.nfields = 7;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("itfa_model_index_name");
      tt->struct_def.fields[0].fname = tdrpStrDup("name");
      tt->struct_def.fields[0].ptype = ENUM_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_itfa_model_indices->name - (char *) _itfa_model_indices;
        tt->struct_def.fields[0].enum_def.name = tdrpStrDup("itfa_model_index_name");
        tt->struct_def.fields[0].enum_def.nfields = 3;
        tt->struct_def.fields[0].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[0].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[0].enum_def.fields[0].name = tdrpStrDup("W_ITFA");
        tt->struct_def.fields[0].enum_def.fields[0].val = W_ITFA;
        tt->struct_def.fields[0].enum_def.fields[1].name = tdrpStrDup("WSPD_ITFA");
        tt->struct_def.fields[0].enum_def.fields[1].val = WSPD_ITFA;
        tt->struct_def.fields[0].enum_def.fields[2].name = tdrpStrDup("DIVERGENCE_ITFA");
        tt->struct_def.fields[0].enum_def.fields[2].val = DIVERGENCE_ITFA;
      tt->struct_def.fields[1].ftype = tdrpStrDup("float");
      tt->struct_def.fields[1].fname = tdrpStrDup("weight");
      tt->struct_def.fields[1].ptype = FLOAT_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_itfa_model_indices->weight - (char *) _itfa_model_indices;
      tt->struct_def.fields[2].ftype = tdrpStrDup("itfa_index_sense_t");
      tt->struct_def.fields[2].fname = tdrpStrDup("sense");
      tt->struct_def.fields[2].ptype = ENUM_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_itfa_model_indices->sense - (char *) _itfa_model_indices;
        tt->struct_def.fields[2].enum_def.name = tdrpStrDup("itfa_index_sense_t");
        tt->struct_def.fields[2].enum_def.nfields = 4;
        tt->struct_def.fields[2].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[2].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[2].enum_def.fields[0].name = tdrpStrDup("LESS_THAN");
        tt->struct_def.fields[2].enum_def.fields[0].val = LESS_THAN;
        tt->struct_def.fields[2].enum_def.fields[1].name = tdrpStrDup("GREATER_THAN");
        tt->struct_def.fields[2].enum_def.fields[1].val = GREATER_THAN;
        tt->struct_def.fields[2].enum_def.fields[2].name = tdrpStrDup("INSIDE_INTERVAL");
        tt->struct_def.fields[2].enum_def.fields[2].val = INSIDE_INTERVAL;
        tt->struct_def.fields[2].enum_def.fields[3].name = tdrpStrDup("OUTSIDE_INTERVAL");
        tt->struct_def.fields[2].enum_def.fields[3].val = OUTSIDE_INTERVAL;
      tt->struct_def.fields[3].ftype = tdrpStrDup("float");
      tt->struct_def.fields[3].fname = tdrpStrDup("threshold_1");
      tt->struct_def.fields[3].ptype = FLOAT_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_itfa_model_indices->threshold_1 - (char *) _itfa_model_indices;
      tt->struct_def.fields[4].ftype = tdrpStrDup("float");
      tt->struct_def.fields[4].fname = tdrpStrDup("threshold_2");
      tt->struct_def.fields[4].ptype = FLOAT_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_itfa_model_indices->threshold_2 - (char *) _itfa_model_indices;
      tt->struct_def.fields[5].ftype = tdrpStrDup("int");
      tt->struct_def.fields[5].fname = tdrpStrDup("min_flight_level");
      tt->struct_def.fields[5].ptype = INT_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_itfa_model_indices->min_flight_level - (char *) _itfa_model_indices;
      tt->struct_def.fields[6].ftype = tdrpStrDup("int");
      tt->struct_def.fields[6].fname = tdrpStrDup("max_flight_level");
      tt->struct_def.fields[6].ptype = INT_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_itfa_model_indices->max_flight_level - (char *) _itfa_model_indices;
    tt->n_struct_vals = 42;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].e = W_ITFA;
      tt->struct_vals[1].f = 1.3;
      tt->struct_vals[2].e = OUTSIDE_INTERVAL;
      tt->struct_vals[3].f = -0.04;
      tt->struct_vals[4].f = 0.04;
      tt->struct_vals[5].i = 200;
      tt->struct_vals[6].i = 260;
      tt->struct_vals[7].e = W_ITFA;
      tt->struct_vals[8].f = 1.1;
      tt->struct_vals[9].e = OUTSIDE_INTERVAL;
      tt->struct_vals[10].f = -0.04;
      tt->struct_vals[11].f = 0.04;
      tt->struct_vals[12].i = 260;
      tt->struct_vals[13].i = 310;
      tt->struct_vals[14].e = WSPD_ITFA;
      tt->struct_vals[15].f = 0.9;
      tt->struct_vals[16].e = GREATER_THAN;
      tt->struct_vals[17].f = 80;
      tt->struct_vals[18].f = -999;
      tt->struct_vals[19].i = 200;
      tt->struct_vals[20].i = 260;
      tt->struct_vals[21].e = WSPD_ITFA;
      tt->struct_vals[22].f = 1.3;
      tt->struct_vals[23].e = GREATER_THAN;
      tt->struct_vals[24].f = 80;
      tt->struct_vals[25].f = -999;
      tt->struct_vals[26].i = 260;
      tt->struct_vals[27].i = 310;
      tt->struct_vals[28].e = WSPD_ITFA;
      tt->struct_vals[29].f = 1.5;
      tt->struct_vals[30].e = GREATER_THAN;
      tt->struct_vals[31].f = 80;
      tt->struct_vals[32].f = -999;
      tt->struct_vals[33].i = 310;
      tt->struct_vals[34].i = 400;
      tt->struct_vals[35].e = DIVERGENCE_ITFA;
      tt->struct_vals[36].f = 0;
      tt->struct_vals[37].e = GREATER_THAN;
      tt->struct_vals[38].f = 1e-05;
      tt->struct_vals[39].f = -999;
      tt->struct_vals[40].i = 200;
      tt->struct_vals[41].i = 400;
    tt++;
    
    // Parameter 'min_turb_severity_threshold'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("min_turb_severity_threshold");
    tt->descr = tdrpStrDup("Min valid threshold for the turbulence severity index.");
    tt->help = tdrpStrDup("We are only interested in values above this. Therefore, to save file space, all values less that this threshold are set to 0.");
    tt->val_offset = (char *) &min_turb_severity_threshold - &_start_;
    tt->single_val.f = 0.25;
    tt++;
    
    // Parameter 'itfa_fill_edges'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("itfa_fill_edges");
    tt->descr = tdrpStrDup("Option to fill in the edges of the ITFA grid.");
    tt->help = tdrpStrDup("The ITFA combined index is not computed all the way to the edge of the grid, because surrounding values are required to compute the indices at a point. This function fills in the edges by copying the data from the closest interior point out to the edges.");
    tt->val_offset = (char *) &itfa_fill_edges - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("ICING SEVERITY PRODUCT");
    tt->comment_text = tdrpStrDup("The icing severity product is normalized between 0 and 1, where 0 indicates no icing and 1 indicates a high probability of severe icing.");
    tt++;
    
    // Parameter 'trace_icing_clw'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("trace_icing_clw");
    tt->descr = tdrpStrDup("Cloud liquid water content threshold for trace icing - g/m3.");
    tt->help = tdrpStrDup("Below this content level, no icing is expected. Above this, trace icing is expected. At trace or below, the icing index is set to 0. If the temperature is between 0 and -10C, the index is increased by 0.25.");
    tt->val_offset = (char *) &trace_icing_clw - &_start_;
    tt->single_val.f = 0.01;
    tt++;
    
    // Parameter 'light_icing_clw'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("light_icing_clw");
    tt->descr = tdrpStrDup("Cloud liquid water content threshold for light icing - g/m3.");
    tt->help = tdrpStrDup("Below this content level, trace icing is expected. Above this, light icing is expected. Between trace and light, the icing index is set to 0.25. If the temperature is between 0 and -10C, the index is increased by 0.25.");
    tt->val_offset = (char *) &light_icing_clw - &_start_;
    tt->single_val.f = 0.1;
    tt++;
    
    // Parameter 'moderate_icing_clw'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("moderate_icing_clw");
    tt->descr = tdrpStrDup("Cloud liquid water content threshold for moderate icing - g/m3.");
    tt->help = tdrpStrDup("Below this content level, light icing is expected. Above this, moderate icing is expected. Between light and moderate, the icing index is set to 0.5. If the temperature is between 0 and -10C, the index is increased by 0.25.");
    tt->val_offset = (char *) &moderate_icing_clw - &_start_;
    tt->single_val.f = 0.6;
    tt++;
    
    // Parameter 'severe_icing_clw'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("severe_icing_clw");
    tt->descr = tdrpStrDup("Cloud liquid water content threshold for severe icing - g/m3.");
    tt->help = tdrpStrDup("Below this content level, moderate icing is expected. Above this, severe icing is expected. Between moderate and severe, the icing index is set to 0.75. If the temperature is between 0 and -10C, the index is increased by 0.25.");
    tt->val_offset = (char *) &severe_icing_clw - &_start_;
    tt->single_val.f = 1.2;
    tt++;
    
    // Parameter 'clear_ice_temp'
    // ctype is 'float'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = FLOAT_TYPE;
    tt->param_name = tdrpStrDup("clear_ice_temp");
    tt->descr = tdrpStrDup("Temperature (C) above which clear icing forms.");
    tt->help = tdrpStrDup("Clear icing occurs at temperatures just below freezing. Clear icing is more severe in impact than rime icing. Therefore, when the temperature is between this value and freezing, the severity is raised by 0.25.");
    tt->val_offset = (char *) &clear_ice_temp - &_start_;
    tt->single_val.f = -10;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
